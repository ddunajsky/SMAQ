
SMAQProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a710  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a74  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c354  0800c354  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c35c  0800c35c  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c35c  0800c35c  0001c35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c360  0800c360  0001c360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  0800c3d8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  0800c478  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006544  200001b4  0800c518  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200066f8  0800c518  000266f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002ba3e  00000000  00000000  00020227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000045f9  00000000  00000000  0004bc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002548  00000000  00000000  00050260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e35  00000000  00000000  000527a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000062e8  00000000  00000000  000545dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a26e  00000000  00000000  0005a8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00109f9a  00000000  00000000  00084b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b1b0  00000000  00000000  0018ead0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  00199c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b4 	.word	0x200001b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a8c8 	.word	0x0800a8c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b8 	.word	0x200001b8
 800020c:	0800a8c8 	.word	0x0800a8c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
static uint32_t Hum;  // Humidity readings from SCD-40-2
static uint32_t Carb; // C02 readings from SCD-40-2
static uint32_t Pm;  // PM 2.5 readings from SNJGAC5
static double aqi = 0;
//static char *str;
int main(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000ebc:	f002 f9d7 	bl	800326e <HAL_Init>

  /* Configure the system clock */
    SystemClock_Config();
 8000ec0:	f000 f81e 	bl	8000f00 <SystemClock_Config>

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ec4:	f000 f958 	bl	8001178 <MX_GPIO_Init>
    MX_ETH_Init();
 8000ec8:	f000 f8c6 	bl	8001058 <MX_ETH_Init>
    MX_RNG_Init();
 8000ecc:	f000 f910 	bl	80010f0 <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000ed0:	f000 f922 	bl	8001118 <MX_USART3_UART_Init>
    MX_I2C1_Init();
 8000ed4:	f000 f880 	bl	8000fd8 <MX_I2C1_Init>

    osKernelInitialize();
 8000ed8:	f005 fefc 	bl	8006cd4 <osKernelInitialize>

//    ServerHandle = osThreadNew(server, NULL, &Server_attributes);
//    BlinkerHandle = osThreadNew(blinker, NULL, &Blinker_attributes);
    SCDHandle = osThreadNew(sensor1, NULL, &SCD_attributes);
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <main+0x3c>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <main+0x40>)
 8000ee2:	f005 ff93 	bl	8006e0c <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <main+0x44>)
 8000eea:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8000eec:	f005 ff26 	bl	8006d3c <osKernelStart>

    while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <main+0x38>
 8000ef2:	bf00      	nop
 8000ef4:	0800c280 	.word	0x0800c280
 8000ef8:	08001321 	.word	0x08001321
 8000efc:	200003a4 	.word	0x200003a4

08000f00 <SystemClock_Config>:
    }

}

void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f008 feb5 	bl	8009c7e <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <SystemClock_Config+0xd4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <SystemClock_Config+0xd4>)
 8000f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <SystemClock_Config+0xd4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f6c:	23d8      	movs	r3, #216	; 0xd8
 8000f6e:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f74:	2309      	movs	r3, #9
 8000f76:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fdd7 	bl	8004b30 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x8c>
	  {
	    Error_Handler();
 8000f88:	f000 fa1a 	bl	80013c0 <Error_Handler>
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f8c:	f003 fd80 	bl	8004a90 <HAL_PWREx_EnableOverDrive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000f96:	f000 fa13 	bl	80013c0 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000faa:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 f85d 	bl	8005078 <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xc8>
	  {
	    Error_Handler();
 8000fc4:	f000 f9fc 	bl	80013c0 <Error_Handler>
	  }
	}
 8000fc8:	bf00      	nop
 8000fca:	3750      	adds	r7, #80	; 0x50
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_I2C1_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <MX_I2C1_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x600030D;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_I2C1_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <MX_I2C1_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_I2C1_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_I2C1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_I2C1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <MX_I2C1_Init+0x74>)
 8001014:	f002 ff4a 	bl	8003eac <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f9cf 	bl	80013c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <MX_I2C1_Init+0x74>)
 8001026:	f003 fc9b 	bl	8004960 <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f9c6 	bl	80013c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_I2C1_Init+0x74>)
 8001038:	f003 fcdd 	bl	80049f6 <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f9bd 	bl	80013c0 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000350 	.word	0x20000350
 8001050:	40005400 	.word	0x40005400
 8001054:	0600030d 	.word	0x0600030d

08001058 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ETH_Init+0x80>)
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <MX_ETH_Init+0x84>)
 8001060:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ETH_Init+0x88>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_ETH_Init+0x88>)
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ETH_Init+0x88>)
 8001070:	22e1      	movs	r2, #225	; 0xe1
 8001072:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ETH_Init+0x88>)
 8001076:	2200      	movs	r2, #0
 8001078:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ETH_Init+0x88>)
 800107c:	2200      	movs	r2, #0
 800107e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_ETH_Init+0x88>)
 8001082:	2200      	movs	r2, #0
 8001084:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_ETH_Init+0x80>)
 8001088:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <MX_ETH_Init+0x88>)
 800108a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_ETH_Init+0x80>)
 800108e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001092:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_ETH_Init+0x80>)
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <MX_ETH_Init+0x8c>)
 8001098:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_ETH_Init+0x80>)
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_ETH_Init+0x90>)
 800109e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 0;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_ETH_Init+0x80>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_ETH_Init+0x80>)
 80010a8:	f002 fa14 	bl	80034d4 <HAL_ETH_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010b2:	f000 f985 	bl	80013c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010b6:	2238      	movs	r2, #56	; 0x38
 80010b8:	2100      	movs	r1, #0
 80010ba:	480c      	ldr	r0, [pc, #48]	; (80010ec <MX_ETH_Init+0x94>)
 80010bc:	f008 fddf 	bl	8009c7e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_ETH_Init+0x94>)
 80010c2:	2221      	movs	r2, #33	; 0x21
 80010c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_ETH_Init+0x94>)
 80010c8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_ETH_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000208 	.word	0x20000208
 80010dc:	40028000 	.word	0x40028000
 80010e0:	200003ac 	.word	0x200003ac
 80010e4:	20000114 	.word	0x20000114
 80010e8:	20000074 	.word	0x20000074
 80010ec:	200001d0 	.word	0x200001d0

080010f0 <MX_RNG_Init>:


static void MX_RNG_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_RNG_Init+0x20>)
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <MX_RNG_Init+0x24>)
 80010f8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_RNG_Init+0x20>)
 80010fc:	f004 fe04 	bl	8005d08 <HAL_RNG_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001106:	f000 f95b 	bl	80013c0 <Error_Handler>
  }

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200002b8 	.word	0x200002b8
 8001114:	50060800 	.word	0x50060800

08001118 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART3_UART_Init+0x58>)
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_USART3_UART_Init+0x5c>)
 8001120:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART3_UART_Init+0x58>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART3_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_USART3_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART3_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART3_UART_Init+0x58>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART3_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART3_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART3_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART3_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART3_UART_Init+0x58>)
 800115c:	f005 f8de 	bl	800631c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001166:	f000 f92b 	bl	80013c0 <Error_Handler>
  }

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002c8 	.word	0x200002c8
 8001174:	40004800 	.word	0x40004800

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <MX_GPIO_Init+0x170>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a55      	ldr	r2, [pc, #340]	; (80012e8 <MX_GPIO_Init+0x170>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <MX_GPIO_Init+0x170>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a4f      	ldr	r2, [pc, #316]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a49      	ldr	r2, [pc, #292]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a3d      	ldr	r2, [pc, #244]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <MX_GPIO_Init+0x170>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <MX_GPIO_Init+0x170>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a37      	ldr	r2, [pc, #220]	; (80012e8 <MX_GPIO_Init+0x170>)
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <MX_GPIO_Init+0x170>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f244 0181 	movw	r1, #16513	; 0x4081
 8001224:	4831      	ldr	r0, [pc, #196]	; (80012ec <MX_GPIO_Init+0x174>)
 8001226:	f002 fe27 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	4830      	ldr	r0, [pc, #192]	; (80012f0 <MX_GPIO_Init+0x178>)
 8001230:	f002 fe22 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	482a      	ldr	r0, [pc, #168]	; (80012f4 <MX_GPIO_Init+0x17c>)
 800124c:	f002 fc68 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001250:	f244 0381 	movw	r3, #16513	; 0x4081
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4820      	ldr	r0, [pc, #128]	; (80012ec <MX_GPIO_Init+0x174>)
 800126a:	f002 fc59 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	481a      	ldr	r0, [pc, #104]	; (80012f0 <MX_GPIO_Init+0x178>)
 8001286:	f002 fc4b 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <MX_GPIO_Init+0x178>)
 800129e:	f002 fc3f 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
   GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012a6:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012b4:	230a      	movs	r3, #10
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <MX_GPIO_Init+0x180>)
 80012c0:	f002 fc2e 	bl	8003b20 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_VBUS_Pin */
     GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_GPIO_Init+0x180>)
 80012da:	f002 fc21 	bl	8003b20 <HAL_GPIO_Init>

}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020000 	.word	0x40020000

080012fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800130e:	f001 ffbb 	bl	8003288 <HAL_IncTick>
  }
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40001000 	.word	0x40001000

08001320 <sensor1>:
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}

void sensor1(void *argument) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af04      	add	r7, sp, #16
 8001326:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t read_buf[9];
	MG_INFO(("start"));
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <sensor1+0x88>)
 800132a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800132e:	491f      	ldr	r1, [pc, #124]	; (80013ac <sensor1+0x8c>)
 8001330:	2002      	movs	r0, #2
 8001332:	f001 f993 	bl	800265c <mg_log_prefix>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <sensor1+0x22>
 800133c:	481c      	ldr	r0, [pc, #112]	; (80013b0 <sensor1+0x90>)
 800133e:	f001 f9e7 	bl	8002710 <mg_log>


	status = HAL_I2C_Mem_Write(&hi2c1, SCD40_ADDR << 1, 0x21b1, 2, 0, 0, 500);
 8001342:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2300      	movs	r3, #0
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	2300      	movs	r3, #0
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2302      	movs	r3, #2
 8001352:	f242 12b1 	movw	r2, #8625	; 0x21b1
 8001356:	21c4      	movs	r1, #196	; 0xc4
 8001358:	4816      	ldr	r0, [pc, #88]	; (80013b4 <sensor1+0x94>)
 800135a:	f002 ff2d 	bl	80041b8 <HAL_I2C_Mem_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]



	for(;;){
		HAL_Delay(5000);
 8001362:	f241 3088 	movw	r0, #5000	; 0x1388
 8001366:	f001 ffaf 	bl	80032c8 <HAL_Delay>
		Temp = 15;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <sensor1+0x98>)
 800136c:	220f      	movs	r2, #15
 800136e:	601a      	str	r2, [r3, #0]
		status = HAL_I2C_Master_Receive(&hi2c1, SCD40_ADDR << 1, read_buf, 9, 500);
 8001370:	f107 020c 	add.w	r2, r7, #12
 8001374:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2309      	movs	r3, #9
 800137c:	21c4      	movs	r1, #196	; 0xc4
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <sensor1+0x94>)
 8001380:	f002 fe24 	bl	8003fcc <HAL_I2C_Master_Receive>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
		MG_INFO(("status: %d", status));
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <sensor1+0x88>)
 800138a:	f240 12b1 	movw	r2, #433	; 0x1b1
 800138e:	4907      	ldr	r1, [pc, #28]	; (80013ac <sensor1+0x8c>)
 8001390:	2002      	movs	r0, #2
 8001392:	f001 f963 	bl	800265c <mg_log_prefix>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0e2      	beq.n	8001362 <sensor1+0x42>
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	4619      	mov	r1, r3
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <sensor1+0x9c>)
 80013a2:	f001 f9b5 	bl	8002710 <mg_log>
		HAL_Delay(5000);
 80013a6:	e7dc      	b.n	8001362 <sensor1+0x42>
 80013a8:	0800c2a4 	.word	0x0800c2a4
 80013ac:	0800a8ec 	.word	0x0800a8ec
 80013b0:	0800a95c 	.word	0x0800a95c
 80013b4:	20000350 	.word	0x20000350
 80013b8:	200003a8 	.word	0x200003a8
 80013bc:	0800a964 	.word	0x0800a964

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>

080013ca <is_digit>:
#endif




static bool is_digit(int c) {
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b2f      	cmp	r3, #47	; 0x2f
 80013d6:	dd04      	ble.n	80013e2 <is_digit+0x18>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b39      	cmp	r3, #57	; 0x39
 80013dc:	dc01      	bgt.n	80013e2 <is_digit+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <is_digit+0x1a>
 80013e2:	2300      	movs	r3, #0
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <addexp>:

static int addexp(char *buf, int e, int sign) {
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  int n = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	617a      	str	r2, [r7, #20]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	2265      	movs	r2, #101	; 0x65
 8001416:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	617a      	str	r2, [r7, #20]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001430:	dd01      	ble.n	8001436 <addexp+0x3e>
 8001432:	2300      	movs	r3, #0
 8001434:	e057      	b.n	80014e6 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b09      	cmp	r3, #9
 800143a:	dc07      	bgt.n	800144c <addexp+0x54>
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	617a      	str	r2, [r7, #20]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b63      	cmp	r3, #99	; 0x63
 8001450:	dd1c      	ble.n	800148c <addexp+0x94>
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	4a27      	ldr	r2, [pc, #156]	; (80014f4 <addexp+0xfc>)
 8001456:	fb82 1203 	smull	r1, r2, r2, r3
 800145a:	1152      	asrs	r2, r2, #5
 800145c:	17db      	asrs	r3, r3, #31
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	6179      	str	r1, [r7, #20]
 8001468:	4619      	mov	r1, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	440b      	add	r3, r1
 800146e:	3230      	adds	r2, #48	; 0x30
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <addexp+0xfc>)
 8001478:	fb82 1203 	smull	r1, r2, r2, r3
 800147c:	1151      	asrs	r1, r2, #5
 800147e:	17da      	asrs	r2, r3, #31
 8001480:	1a8a      	subs	r2, r1, r2
 8001482:	2164      	movs	r1, #100	; 0x64
 8001484:	fb01 f202 	mul.w	r2, r1, r2
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b09      	cmp	r3, #9
 8001490:	dd1d      	ble.n	80014ce <addexp+0xd6>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <addexp+0x100>)
 8001496:	fb82 1203 	smull	r1, r2, r2, r3
 800149a:	1092      	asrs	r2, r2, #2
 800149c:	17db      	asrs	r3, r3, #31
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	1c59      	adds	r1, r3, #1
 80014a6:	6179      	str	r1, [r7, #20]
 80014a8:	4619      	mov	r1, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	440b      	add	r3, r1
 80014ae:	3230      	adds	r2, #48	; 0x30
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <addexp+0x100>)
 80014b8:	fb83 1302 	smull	r1, r3, r3, r2
 80014bc:	1099      	asrs	r1, r3, #2
 80014be:	17d3      	asrs	r3, r2, #31
 80014c0:	1ac9      	subs	r1, r1, r3
 80014c2:	460b      	mov	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	1c59      	adds	r1, r3, #1
 80014d6:	6179      	str	r1, [r7, #20]
 80014d8:	4619      	mov	r1, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	440b      	add	r3, r1
 80014de:	3230      	adds	r2, #48	; 0x30
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
  return n;
 80014e4:	697b      	ldr	r3, [r7, #20]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	51eb851f 	.word	0x51eb851f
 80014f8:	66666667 	.word	0x66666667

080014fc <xisinf>:

static int xisinf(double x) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800150a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800150e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	000a      	movs	r2, r1
 800151c:	2300      	movs	r3, #0
 800151e:	4613      	mov	r3, r2
 8001520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <xisinf+0x4c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d106      	bne.n	8001538 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 800152a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800152e:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <xisinf+0x3c>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <xisinf+0x3e>
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	7ff00000 	.word	0x7ff00000

0800154c <xisnan>:

static int xisnan(double x) {
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800155a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 800155e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	000a      	movs	r2, r1
 800156c:	2300      	movs	r3, #0
 800156e:	4613      	mov	r3, r2
 8001570:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001578:	4613      	mov	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001584:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <xisnan+0x54>)
 8001588:	4293      	cmp	r3, r2
 800158a:	bf8c      	ite	hi
 800158c:	2301      	movhi	r3, #1
 800158e:	2300      	movls	r3, #0
 8001590:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	7ff00000 	.word	0x7ff00000
 80015a4:	00000000 	.word	0x00000000

080015a8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b09e      	sub	sp, #120	; 0x78
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	6178      	str	r0, [r7, #20]
 80015b0:	6139      	str	r1, [r7, #16]
 80015b2:	ed87 0b02 	vstr	d0, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80015be:	2300      	movs	r3, #0
 80015c0:	667b      	str	r3, [r7, #100]	; 0x64
 80015c2:	2300      	movs	r3, #0
 80015c4:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d2:	f7ff fa99 	bl	8000b08 <__aeabi_dcmpeq>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <mg_dtoa+0x44>
 80015dc:	4b7f      	ldr	r3, [pc, #508]	; (80017dc <mg_dtoa+0x234>)
 80015de:	4a80      	ldr	r2, [pc, #512]	; (80017e0 <mg_dtoa+0x238>)
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f001 f934 	bl	8002850 <mg_snprintf>
 80015e8:	4603      	mov	r3, r0
 80015ea:	e2c9      	b.n	8001b80 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80015ec:	ed97 0b02 	vldr	d0, [r7, #8]
 80015f0:	f7ff ff84 	bl	80014fc <xisinf>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d014      	beq.n	8001624 <mg_dtoa+0x7c>
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001606:	f7ff faa7 	bl	8000b58 <__aeabi_dcmpgt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <mg_dtoa+0x6c>
 8001610:	4b74      	ldr	r3, [pc, #464]	; (80017e4 <mg_dtoa+0x23c>)
 8001612:	e000      	b.n	8001616 <mg_dtoa+0x6e>
 8001614:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <mg_dtoa+0x240>)
 8001616:	4a72      	ldr	r2, [pc, #456]	; (80017e0 <mg_dtoa+0x238>)
 8001618:	6939      	ldr	r1, [r7, #16]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f001 f918 	bl	8002850 <mg_snprintf>
 8001620:	4603      	mov	r3, r0
 8001622:	e2ad      	b.n	8001b80 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8001624:	ed97 0b02 	vldr	d0, [r7, #8]
 8001628:	f7ff ff90 	bl	800154c <xisnan>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <mg_dtoa+0x9a>
 8001632:	4b6e      	ldr	r3, [pc, #440]	; (80017ec <mg_dtoa+0x244>)
 8001634:	4a6a      	ldr	r2, [pc, #424]	; (80017e0 <mg_dtoa+0x238>)
 8001636:	6939      	ldr	r1, [r7, #16]
 8001638:	6978      	ldr	r0, [r7, #20]
 800163a:	f001 f909 	bl	8002850 <mg_snprintf>
 800163e:	4603      	mov	r3, r0
 8001640:	e29e      	b.n	8001b80 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800164e:	f7ff fa65 	bl	8000b1c <__aeabi_dcmplt>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00d      	beq.n	8001674 <mg_dtoa+0xcc>
 8001658:	68bc      	ldr	r4, [r7, #8]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001660:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8001664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	66ba      	str	r2, [r7, #104]	; 0x68
 800166a:	3370      	adds	r3, #112	; 0x70
 800166c:	443b      	add	r3, r7
 800166e:	222d      	movs	r2, #45	; 0x2d
 8001670:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8001674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001678:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <mg_dtoa+0x248>)
 8001682:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001686:	e00a      	b.n	800169e <mg_dtoa+0xf6>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <mg_dtoa+0x24c>)
 800168e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001692:	f7fe ffd1 	bl	8000638 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <mg_dtoa+0x24c>)
 80016a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016a8:	f7ff fa4c 	bl	8000b44 <__aeabi_dcmpge>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d011      	beq.n	80016d6 <mg_dtoa+0x12e>
 80016b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ba:	f7ff f8e7 	bl	800088c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <mg_dtoa+0x24c>)
 80016cc:	f7ff fa3a 	bl	8000b44 <__aeabi_dcmpge>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1d8      	bne.n	8001688 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80016d6:	e00a      	b.n	80016ee <mg_dtoa+0x146>
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <mg_dtoa+0x24c>)
 80016de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016e2:	f7ff f8d3 	bl	800088c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <mg_dtoa+0x248>)
 80016f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f8:	f7ff fa1a 	bl	8000b30 <__aeabi_dcmple>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <mg_dtoa+0x17e>
 8001702:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001706:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800170a:	f7ff f8bf 	bl	800088c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <mg_dtoa+0x248>)
 800171c:	f7ff fa08 	bl	8000b30 <__aeabi_dcmple>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1d8      	bne.n	80016d8 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001726:	2300      	movs	r3, #0
 8001728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <mg_dtoa+0x250>)
 8001730:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001734:	f7fe ff80 	bl	8000638 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001740:	e00d      	b.n	800175e <mg_dtoa+0x1b6>
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <mg_dtoa+0x24c>)
 8001748:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800174c:	f7ff f89e 	bl	800088c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800175a:	3301      	adds	r3, #1
 800175c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800175e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	dbed      	blt.n	8001742 <mg_dtoa+0x19a>
  d += t;
 8001766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800176a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800176e:	f7fe fdad 	bl	80002cc <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <mg_dtoa+0x248>)
 8001780:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8001784:	e00d      	b.n	80017a2 <mg_dtoa+0x1fa>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <mg_dtoa+0x24c>)
 800178c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001790:	f7fe ff52 	bl	8000638 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800179c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800179e:	3301      	adds	r3, #1
 80017a0:	663b      	str	r3, [r7, #96]	; 0x60
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <mg_dtoa+0x24c>)
 80017a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ac:	f7ff f9ca 	bl	8000b44 <__aeabi_dcmpge>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d011      	beq.n	80017da <mg_dtoa+0x232>
 80017b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017be:	f7ff f865 	bl	800088c <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <mg_dtoa+0x24c>)
 80017d0:	f7ff f9b8 	bl	8000b44 <__aeabi_dcmpge>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1d5      	bne.n	8001786 <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80017da:	e01d      	b.n	8001818 <mg_dtoa+0x270>
 80017dc:	0800ab60 	.word	0x0800ab60
 80017e0:	0800ab64 	.word	0x0800ab64
 80017e4:	0800ab68 	.word	0x0800ab68
 80017e8:	0800ab6c 	.word	0x0800ab6c
 80017ec:	0800ab74 	.word	0x0800ab74
 80017f0:	3ff00000 	.word	0x3ff00000
 80017f4:	40240000 	.word	0x40240000
 80017f8:	40140000 	.word	0x40140000
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b9d      	ldr	r3, [pc, #628]	; (8001a78 <mg_dtoa+0x4d0>)
 8001802:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001806:	f7ff f841 	bl	800088c <__aeabi_ddiv>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001814:	3b01      	subs	r3, #1
 8001816:	663b      	str	r3, [r7, #96]	; 0x60
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b97      	ldr	r3, [pc, #604]	; (8001a7c <mg_dtoa+0x4d4>)
 800181e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001822:	f7ff f97b 	bl	8000b1c <__aeabi_dcmplt>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d011      	beq.n	8001850 <mg_dtoa+0x2a8>
 800182c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001830:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001834:	f7ff f82a 	bl	800088c <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b8d      	ldr	r3, [pc, #564]	; (8001a7c <mg_dtoa+0x4d4>)
 8001846:	f7ff f969 	bl	8000b1c <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1d5      	bne.n	80017fc <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8001850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	db33      	blt.n	80018c0 <mg_dtoa+0x318>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	dd30      	ble.n	80018c0 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800185e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001862:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001866:	f7ff f811 	bl	800088c <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ec43 2b17 	vmov	d7, r2, r3
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	f107 0018 	add.w	r0, r7, #24
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	eeb0 0a47 	vmov.f32	s0, s14
 800187e:	eef0 0a67 	vmov.f32	s1, s15
 8001882:	2128      	movs	r1, #40	; 0x28
 8001884:	f7ff fe90 	bl	80015a8 <mg_dtoa>
 8001888:	4603      	mov	r3, r0
 800188a:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 800188c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800188e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001890:	4413      	add	r3, r2
 8001892:	f107 0218 	add.w	r2, r7, #24
 8001896:	4413      	add	r3, r2
 8001898:	222b      	movs	r2, #43	; 0x2b
 800189a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fdab 	bl	80013f8 <addexp>
 80018a2:	4602      	mov	r2, r0
 80018a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a6:	4413      	add	r3, r2
 80018a8:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b2:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <mg_dtoa+0x4d8>)
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f000 ffca 	bl	8002850 <mg_snprintf>
 80018bc:	4603      	mov	r3, r0
 80018be:	e15f      	b.n	8001b80 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	425b      	negs	r3, r3
 80018c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dc34      	bgt.n	8001934 <mg_dtoa+0x38c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	dd31      	ble.n	8001934 <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80018d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018d8:	f7fe ffd8 	bl	800088c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	ec43 2b17 	vmov	d7, r2, r3
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f107 0018 	add.w	r0, r7, #24
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	eeb0 0a47 	vmov.f32	s0, s14
 80018f0:	eef0 0a67 	vmov.f32	s1, s15
 80018f4:	2128      	movs	r1, #40	; 0x28
 80018f6:	f7ff fe57 	bl	80015a8 <mg_dtoa>
 80018fa:	4603      	mov	r3, r0
 80018fc:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 80018fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001902:	4413      	add	r3, r2
 8001904:	f107 0218 	add.w	r2, r7, #24
 8001908:	18d0      	adds	r0, r2, r3
 800190a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800190c:	425b      	negs	r3, r3
 800190e:	222d      	movs	r2, #45	; 0x2d
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff fd71 	bl	80013f8 <addexp>
 8001916:	4602      	mov	r2, r0
 8001918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800191a:	4413      	add	r3, r2
 800191c:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800191e:	f107 0318 	add.w	r3, r7, #24
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001926:	4a56      	ldr	r2, [pc, #344]	; (8001a80 <mg_dtoa+0x4d8>)
 8001928:	6939      	ldr	r1, [r7, #16]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f000 ff90 	bl	8002850 <mg_snprintf>
 8001930:	4603      	mov	r3, r0
 8001932:	e125      	b.n	8001b80 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800193c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001940:	e03f      	b.n	80019c2 <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8001942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800194a:	f7fe ff9f 	bl	800088c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f909 	bl	8000b6c <__aeabi_d2iz>
 800195a:	4603      	mov	r3, r0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 800195e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001960:	2b00      	cmp	r3, #0
 8001962:	dc02      	bgt.n	800196a <mg_dtoa+0x3c2>
 8001964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001966:	2b00      	cmp	r3, #0
 8001968:	dd0c      	ble.n	8001984 <mg_dtoa+0x3dc>
 800196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196c:	b2da      	uxtb	r2, r3
 800196e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001970:	1c59      	adds	r1, r3, #1
 8001972:	6679      	str	r1, [r7, #100]	; 0x64
 8001974:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001976:	440b      	add	r3, r1
 8001978:	3230      	adds	r2, #48	; 0x30
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	3370      	adds	r3, #112	; 0x70
 800197e:	443b      	add	r3, r7
 8001980:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001984:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001986:	f7fe fded 	bl	8000564 <__aeabi_i2d>
 800198a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800198e:	f7fe fe53 	bl	8000638 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800199a:	f7fe fc95 	bl	80002c8 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <mg_dtoa+0x4d0>)
 80019ac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019b0:	f7fe ff6c 	bl	800088c <__aeabi_ddiv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80019bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019be:	3301      	adds	r3, #1
 80019c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <mg_dtoa+0x4d4>)
 80019c8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019cc:	f7ff f8ba 	bl	8000b44 <__aeabi_dcmpge>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <mg_dtoa+0x438>
 80019d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019da:	4413      	add	r3, r2
 80019dc:	2b27      	cmp	r3, #39	; 0x27
 80019de:	ddb0      	ble.n	8001942 <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 80019e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11b      	bne.n	8001a1e <mg_dtoa+0x476>
 80019e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80019ec:	3370      	adds	r3, #112	; 0x70
 80019ee:	443b      	add	r3, r7
 80019f0:	2230      	movs	r2, #48	; 0x30
 80019f2:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80019f6:	e012      	b.n	8001a1e <mg_dtoa+0x476>
 80019f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	667a      	str	r2, [r7, #100]	; 0x64
 80019fe:	3370      	adds	r3, #112	; 0x70
 8001a00:	443b      	add	r3, r7
 8001a02:	2230      	movs	r2, #48	; 0x30
 8001a04:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <mg_dtoa+0x4d0>)
 8001a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a12:	f7fe ff3b 	bl	800088c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <mg_dtoa+0x4d4>)
 8001a24:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a28:	f7ff f88c 	bl	8000b44 <__aeabi_dcmpge>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <mg_dtoa+0x494>
 8001a32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a36:	4413      	add	r3, r2
 8001a38:	2b27      	cmp	r3, #39	; 0x27
 8001a3a:	dddd      	ble.n	80019f8 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8001a3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a40:	4413      	add	r3, r2
 8001a42:	2b27      	cmp	r3, #39	; 0x27
 8001a44:	dc09      	bgt.n	8001a5a <mg_dtoa+0x4b2>
 8001a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	66ba      	str	r2, [r7, #104]	; 0x68
 8001a4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a4e:	4413      	add	r3, r2
 8001a50:	3370      	adds	r3, #112	; 0x70
 8001a52:	443b      	add	r3, r7
 8001a54:	222e      	movs	r2, #46	; 0x2e
 8001a56:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a5e:	a304      	add	r3, pc, #16	; (adr r3, 8001a70 <mg_dtoa+0x4c8>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001a68:	e046      	b.n	8001af8 <mg_dtoa+0x550>
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w
 8001a70:	9999999a 	.word	0x9999999a
 8001a74:	3fb99999 	.word	0x3fb99999
 8001a78:	40240000 	.word	0x40240000
 8001a7c:	3ff00000 	.word	0x3ff00000
 8001a80:	0800ab78 	.word	0x0800ab78
      int ch = (int) (d / t);
 8001a84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a8c:	f7fe fefe 	bl	800088c <__aeabi_ddiv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f868 	bl	8000b6c <__aeabi_d2iz>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 8001aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa6:	1c59      	adds	r1, r3, #1
 8001aa8:	6679      	str	r1, [r7, #100]	; 0x64
 8001aaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001aac:	440b      	add	r3, r1
 8001aae:	3230      	adds	r2, #48	; 0x30
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	3370      	adds	r3, #112	; 0x70
 8001ab4:	443b      	add	r3, r7
 8001ab6:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001aba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001abc:	f7fe fd52 	bl	8000564 <__aeabi_i2d>
 8001ac0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ac4:	f7fe fdb8 	bl	8000638 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ad0:	f7fe fbfa 	bl	80002c8 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <mg_dtoa+0x5e0>)
 8001ae2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ae6:	f7fe fed1 	bl	800088c <__aeabi_ddiv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001af4:	3301      	adds	r3, #1
 8001af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001af8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001afc:	4413      	add	r3, r2
 8001afe:	2b27      	cmp	r3, #39	; 0x27
 8001b00:	dc07      	bgt.n	8001b12 <mg_dtoa+0x56a>
 8001b02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbbc      	blt.n	8001a84 <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8001b0a:	e002      	b.n	8001b12 <mg_dtoa+0x56a>
 8001b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	667b      	str	r3, [r7, #100]	; 0x64
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <mg_dtoa+0x58a>
 8001b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	dd09      	ble.n	8001b32 <mg_dtoa+0x58a>
 8001b1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b22:	4413      	add	r3, r2
 8001b24:	3b01      	subs	r3, #1
 8001b26:	3370      	adds	r3, #112	; 0x70
 8001b28:	443b      	add	r3, r7
 8001b2a:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001b2e:	2b30      	cmp	r3, #48	; 0x30
 8001b30:	d0ec      	beq.n	8001b0c <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8001b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	dd0c      	ble.n	8001b52 <mg_dtoa+0x5aa>
 8001b38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001b3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	3370      	adds	r3, #112	; 0x70
 8001b42:	443b      	add	r3, r7
 8001b44:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001b48:	2b2e      	cmp	r3, #46	; 0x2e
 8001b4a:	d102      	bne.n	8001b52 <mg_dtoa+0x5aa>
 8001b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 8001b52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b56:	4413      	add	r3, r2
 8001b58:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8001b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b5c:	2b27      	cmp	r3, #39	; 0x27
 8001b5e:	dd01      	ble.n	8001b64 <mg_dtoa+0x5bc>
 8001b60:	2327      	movs	r3, #39	; 0x27
 8001b62:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 8001b64:	f107 0218 	add.w	r2, r7, #24
 8001b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b6a:	4413      	add	r3, r2
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <mg_dtoa+0x5e4>)
 8001b76:	6939      	ldr	r1, [r7, #16]
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f000 fe69 	bl	8002850 <mg_snprintf>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3770      	adds	r7, #112	; 0x70
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}
 8001b88:	40240000 	.word	0x40240000
 8001b8c:	0800ab64 	.word	0x0800ab64

08001b90 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <mg_lld+0x15c>)
 8001b9e:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8001ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8001bac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d012      	beq.n	8001bda <mg_lld+0x4a>
 8001bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da0e      	bge.n	8001bda <mg_lld+0x4a>
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	222d      	movs	r2, #45	; 0x2d
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4254      	negs	r4, r2
 8001bd2:	eb61 0503 	sbc.w	r5, r1, r3
 8001bd6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8001bda:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d021      	beq.n	8001c26 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
 8001be6:	e019      	b.n	8001c1c <mg_lld+0x8c>
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	1c59      	adds	r1, r3, #1
 8001bf6:	6239      	str	r1, [r7, #32]
 8001bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfa:	440b      	add	r3, r1
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	440b      	add	r3, r1
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	0902      	lsrs	r2, r0, #4
 8001c12:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001c16:	090b      	lsrs	r3, r1, #4
 8001c18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c20:	4313      	orrs	r3, r2
 8001c22:	d1e1      	bne.n	8001be8 <mg_lld+0x58>
 8001c24:	e025      	b.n	8001c72 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	e01e      	b.n	8001c6a <mg_lld+0xda>
 8001c2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c30:	f04f 020a 	mov.w	r2, #10
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f7fe ffc0 	bl	8000bbc <__aeabi_uldivmod>
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	441a      	add	r2, r3
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	1c59      	adds	r1, r3, #1
 8001c44:	6239      	str	r1, [r7, #32]
 8001c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c48:	440b      	add	r3, r1
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	440b      	add	r3, r1
 8001c4e:	7812      	ldrb	r2, [r2, #0]
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c56:	f04f 020a 	mov.w	r2, #10
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	f7fe ffad 	bl	8000bbc <__aeabi_uldivmod>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	d1dc      	bne.n	8001c2c <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e022      	b.n	8001cbe <mg_lld+0x12e>
    char t = buf[s + i];
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4413      	add	r3, r2
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	441a      	add	r2, r3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	441a      	add	r2, r3
 8001c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	440b      	add	r3, r1
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	441a      	add	r2, r3
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	7dfa      	ldrb	r2, [r7, #23]
 8001cb6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3d7      	bcc.n	8001c78 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8001cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	d106      	bne.n	8001cde <mg_lld+0x14e>
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	623a      	str	r2, [r7, #32]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	2230      	movs	r2, #48	; 0x30
 8001cdc:	701a      	strb	r2, [r3, #0]
  return n + s;
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	4413      	add	r3, r2
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bdb0      	pop	{r4, r5, r7, pc}
 8001cec:	0800ab80 	.word	0x0800ab80

08001cf0 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8001d02:	e009      	b.n	8001d18 <scpy+0x28>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	617a      	str	r2, [r7, #20]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	4610      	mov	r0, r2
 8001d16:	4798      	blx	r3
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d205      	bcs.n	8001d2c <scpy+0x3c>
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	4413      	add	r3, r2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1eb      	bne.n	8001d04 <scpy+0x14>
  return i;
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <mg_vxprintf>:
  va_end(ap);
  return len;
}

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8001d38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d3c:	b0a6      	sub	sp, #152	; 0x98
 8001d3e:	af02      	add	r7, sp, #8
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8001d54:	e383      	b.n	800245e <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b25      	cmp	r3, #37	; 0x25
 8001d62:	f040 8369 	bne.w	8002438 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8001d66:	2300      	movs	r3, #0
 8001d68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d6e:	2300      	movs	r3, #0
 8001d70:	677b      	str	r3, [r7, #116]	; 0x74
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8001d78:	2320      	movs	r3, #32
 8001d7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 8001d9c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001da0:	2b23      	cmp	r3, #35	; 0x23
 8001da2:	d10e      	bne.n	8001dc2 <mg_vxprintf+0x8a>
 8001da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da6:	3301      	adds	r3, #1
 8001da8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dae:	3301      	adds	r3, #1
 8001db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dba:	4413      	add	r3, r2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8001dc2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001dc6:	2b2d      	cmp	r3, #45	; 0x2d
 8001dc8:	d110      	bne.n	8001dec <mg_vxprintf+0xb4>
 8001dca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8001dec:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001df0:	2b30      	cmp	r3, #48	; 0x30
 8001df2:	d127      	bne.n	8001e44 <mg_vxprintf+0x10c>
 8001df4:	2330      	movs	r3, #48	; 0x30
 8001df6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8001e12:	e017      	b.n	8001e44 <mg_vxprintf+0x10c>
 8001e14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	677b      	str	r3, [r7, #116]	; 0x74
 8001e20:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e26:	4413      	add	r3, r2
 8001e28:	3b30      	subs	r3, #48	; 0x30
 8001e2a:	677b      	str	r3, [r7, #116]	; 0x74
 8001e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e30:	3301      	adds	r3, #1
 8001e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001e44:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fabe 	bl	80013ca <is_digit>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1df      	bne.n	8001e14 <mg_vxprintf+0xdc>
      if (c == '.') {
 8001e54:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e58:	2b2e      	cmp	r3, #46	; 0x2e
 8001e5a:	d153      	bne.n	8001f04 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8001e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e60:	3301      	adds	r3, #1
 8001e62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8001e74:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e78:	2b2a      	cmp	r3, #42	; 0x2a
 8001e7a:	d113      	bne.n	8001ea4 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1d19      	adds	r1, r3, #4
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	6011      	str	r1, [r2, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8001e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001ea2:	e02f      	b.n	8001f04 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8001ea8:	e017      	b.n	8001eda <mg_vxprintf+0x1a2>
 8001eaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	673b      	str	r3, [r7, #112]	; 0x70
 8001eb6:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b30      	subs	r3, #48	; 0x30
 8001ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8001ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed2:	4413      	add	r3, r2
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001eda:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fa73 	bl	80013ca <is_digit>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1df      	bne.n	8001eaa <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8001eea:	e00b      	b.n	8001f04 <mg_vxprintf+0x1cc>
 8001eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001f04:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f08:	2b68      	cmp	r3, #104	; 0x68
 8001f0a:	d0ef      	beq.n	8001eec <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8001f0c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f10:	2b6c      	cmp	r3, #108	; 0x6c
 8001f12:	d121      	bne.n	8001f58 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8001f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f16:	3301      	adds	r3, #1
 8001f18:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8001f32:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f36:	2b6c      	cmp	r3, #108	; 0x6c
 8001f38:	d10e      	bne.n	8001f58 <mg_vxprintf+0x220>
 8001f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f44:	3301      	adds	r3, #1
 8001f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8001f58:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f5c:	2b70      	cmp	r3, #112	; 0x70
 8001f5e:	d103      	bne.n	8001f68 <mg_vxprintf+0x230>
 8001f60:	2301      	movs	r3, #1
 8001f62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f64:	2301      	movs	r3, #1
 8001f66:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8001f68:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f6c:	2b64      	cmp	r3, #100	; 0x64
 8001f6e:	d018      	beq.n	8001fa2 <mg_vxprintf+0x26a>
 8001f70:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f74:	2b75      	cmp	r3, #117	; 0x75
 8001f76:	d014      	beq.n	8001fa2 <mg_vxprintf+0x26a>
 8001f78:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f7c:	2b78      	cmp	r3, #120	; 0x78
 8001f7e:	d010      	beq.n	8001fa2 <mg_vxprintf+0x26a>
 8001f80:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f84:	2b58      	cmp	r3, #88	; 0x58
 8001f86:	d00c      	beq.n	8001fa2 <mg_vxprintf+0x26a>
 8001f88:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f8c:	2b70      	cmp	r3, #112	; 0x70
 8001f8e:	d008      	beq.n	8001fa2 <mg_vxprintf+0x26a>
 8001f90:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f94:	2b67      	cmp	r3, #103	; 0x67
 8001f96:	d004      	beq.n	8001fa2 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8001f98:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001f9c:	2b66      	cmp	r3, #102	; 0x66
 8001f9e:	f040 816c 	bne.w	800227a <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8001fa2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fb2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001fb6:	2b78      	cmp	r3, #120	; 0x78
 8001fb8:	d007      	beq.n	8001fca <mg_vxprintf+0x292>
 8001fba:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001fbe:	2b58      	cmp	r3, #88	; 0x58
 8001fc0:	d003      	beq.n	8001fca <mg_vxprintf+0x292>
 8001fc2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001fc6:	2b70      	cmp	r3, #112	; 0x70
 8001fc8:	d101      	bne.n	8001fce <mg_vxprintf+0x296>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <mg_vxprintf+0x298>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001fd4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8001fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <mg_vxprintf+0x2b2>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e000      	b.n	8001fec <mg_vxprintf+0x2b4>
 8001fea:	2300      	movs	r3, #0
 8001fec:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 8001fee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001ff2:	2b67      	cmp	r3, #103	; 0x67
 8001ff4:	d003      	beq.n	8001ffe <mg_vxprintf+0x2c6>
 8001ff6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001ffa:	2b66      	cmp	r3, #102	; 0x66
 8001ffc:	d124      	bne.n	8002048 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3307      	adds	r3, #7
 8002004:	f023 0307 	bic.w	r3, r3, #7
 8002008:	f103 0108 	add.w	r1, r3, #8
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	6011      	str	r1, [r2, #0]
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 8002018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d101      	bne.n	8002024 <mg_vxprintf+0x2ec>
 8002020:	2306      	movs	r3, #6
 8002022:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002024:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002026:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800202a:	2b67      	cmp	r3, #103	; 0x67
 800202c:	bf0c      	ite	eq
 800202e:	2301      	moveq	r3, #1
 8002030:	2300      	movne	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f107 0014 	add.w	r0, r7, #20
 8002038:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800203c:	2128      	movs	r1, #40	; 0x28
 800203e:	f7ff fab3 	bl	80015a8 <mg_dtoa>
 8002042:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 8002046:	e069      	b.n	800211c <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800204a:	2b02      	cmp	r3, #2
 800204c:	d11c      	bne.n	8002088 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3307      	adds	r3, #7
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	f103 0108 	add.w	r1, r3, #8
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	6011      	str	r1, [r2, #0]
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 8002068:	f107 0114 	add.w	r1, r7, #20
 800206c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800207c:	4608      	mov	r0, r1
 800207e:	f7ff fd87 	bl	8001b90 <mg_lld>
 8002082:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002086:	e049      	b.n	800211c <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800208a:	2b01      	cmp	r3, #1
 800208c:	d123      	bne.n	80020d6 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	1d19      	adds	r1, r3, #4
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	6011      	str	r1, [r2, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 800209c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <mg_vxprintf+0x376>
 80020a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a6:	17da      	asrs	r2, r3, #31
 80020a8:	461c      	mov	r4, r3
 80020aa:	4615      	mov	r5, r2
 80020ac:	e003      	b.n	80020b6 <mg_vxprintf+0x37e>
 80020ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b0:	2200      	movs	r2, #0
 80020b2:	461c      	mov	r4, r3
 80020b4:	4615      	mov	r5, r2
 80020b6:	f107 0114 	add.w	r1, r7, #20
 80020ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4622      	mov	r2, r4
 80020c8:	462b      	mov	r3, r5
 80020ca:	4608      	mov	r0, r1
 80020cc:	f7ff fd60 	bl	8001b90 <mg_lld>
 80020d0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80020d4:	e022      	b.n	800211c <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1d19      	adds	r1, r3, #4
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	6011      	str	r1, [r2, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80020e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <mg_vxprintf+0x3be>
 80020ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ee:	17da      	asrs	r2, r3, #31
 80020f0:	4698      	mov	r8, r3
 80020f2:	4691      	mov	r9, r2
 80020f4:	e003      	b.n	80020fe <mg_vxprintf+0x3c6>
 80020f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f8:	2200      	movs	r2, #0
 80020fa:	4698      	mov	r8, r3
 80020fc:	4691      	mov	r9, r2
 80020fe:	f107 0114 	add.w	r1, r7, #20
 8002102:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4642      	mov	r2, r8
 8002110:	464b      	mov	r3, r9
 8002112:	4608      	mov	r0, r1
 8002114:	f7ff fd3c 	bl	8001b90 <mg_lld>
 8002118:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002122:	e007      	b.n	8002134 <mg_vxprintf+0x3fc>
 8002124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002126:	3b01      	subs	r3, #1
 8002128:	677b      	str	r3, [r7, #116]	; 0x74
 800212a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800212e:	3301      	adds	r3, #1
 8002130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002134:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213a:	429a      	cmp	r2, r3
 800213c:	d202      	bcs.n	8002144 <mg_vxprintf+0x40c>
 800213e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ef      	bne.n	8002124 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800214a:	e011      	b.n	8002170 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 800214c:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002150:	2301      	movs	r3, #1
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fdcb 	bl	8001cf0 <scpy>
 800215a:	4602      	mov	r2, r0
 800215c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002160:	4413      	add	r3, r2
 8002162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800216a:	3301      	adds	r3, #1
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002170:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002174:	2b20      	cmp	r3, #32
 8002176:	d110      	bne.n	800219a <mg_vxprintf+0x462>
 8002178:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10c      	bne.n	800219a <mg_vxprintf+0x462>
 8002180:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002186:	429a      	cmp	r2, r3
 8002188:	d207      	bcs.n	800219a <mg_vxprintf+0x462>
 800218a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800218e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002192:	4413      	add	r3, r2
 8002194:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002196:	429a      	cmp	r2, r3
 8002198:	d8d8      	bhi.n	800214c <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 800219a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219c:	4ab7      	ldr	r2, [pc, #732]	; (800247c <mg_vxprintf+0x744>)
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff fda5 	bl	8001cf0 <scpy>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ac:	4413      	add	r3, r2
 80021ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021b8:	e011      	b.n	80021de <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 80021ba:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80021be:	2301      	movs	r3, #1
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff fd94 	bl	8001cf0 <scpy>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ce:	4413      	add	r3, r2
 80021d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80021d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d8:	3301      	adds	r3, #1
 80021da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021e2:	2b30      	cmp	r3, #48	; 0x30
 80021e4:	d10c      	bne.n	8002200 <mg_vxprintf+0x4c8>
 80021e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d207      	bcs.n	8002200 <mg_vxprintf+0x4c8>
 80021f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80021f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f8:	4413      	add	r3, r2
 80021fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8dc      	bhi.n	80021ba <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8002200:	f107 0214 	add.w	r2, r7, #20
 8002204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff fd70 	bl	8001cf0 <scpy>
 8002210:	4602      	mov	r2, r0
 8002212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002216:	4413      	add	r3, r2
 8002218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002222:	e011      	b.n	8002248 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002224:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002228:	2301      	movs	r3, #1
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fd5f 	bl	8001cf0 <scpy>
 8002232:	4602      	mov	r2, r0
 8002234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002238:	4413      	add	r3, r2
 800223a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800223e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002242:	3301      	adds	r3, #1
 8002244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002248:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800224c:	2b20      	cmp	r3, #32
 800224e:	f040 80ea 	bne.w	8002426 <mg_vxprintf+0x6ee>
 8002252:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80e5 	beq.w	8002426 <mg_vxprintf+0x6ee>
 800225c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002262:	429a      	cmp	r2, r3
 8002264:	f080 80df 	bcs.w	8002426 <mg_vxprintf+0x6ee>
 8002268:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800226c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002270:	4413      	add	r3, r2
 8002272:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002274:	429a      	cmp	r2, r3
 8002276:	d8d5      	bhi.n	8002224 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002278:	e0d5      	b.n	8002426 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 800227a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800227e:	2b6d      	cmp	r3, #109	; 0x6d
 8002280:	d003      	beq.n	800228a <mg_vxprintf+0x552>
 8002282:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002286:	2b4d      	cmp	r3, #77	; 0x4d
 8002288:	d128      	bne.n	80022dc <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1d19      	adds	r1, r3, #4
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	6011      	str	r1, [r2, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 8002298:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800229c:	2b6d      	cmp	r3, #109	; 0x6d
 800229e:	d103      	bne.n	80022a8 <mg_vxprintf+0x570>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	2022      	movs	r0, #34	; 0x22
 80022a6:	4798      	blx	r3
        n += f(out, param, ap);
 80022a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	4798      	blx	r3
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022b8:	4413      	add	r3, r2
 80022ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 80022be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022c2:	2b6d      	cmp	r3, #109	; 0x6d
 80022c4:	f040 80b1 	bne.w	800242a <mg_vxprintf+0x6f2>
 80022c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022cc:	3302      	adds	r3, #2
 80022ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	2022      	movs	r0, #34	; 0x22
 80022d8:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 80022da:	e0a6      	b.n	800242a <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 80022dc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022e0:	2b63      	cmp	r3, #99	; 0x63
 80022e2:	d112      	bne.n	800230a <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	1d19      	adds	r1, r3, #4
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 80022f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	4610      	mov	r0, r2
 80022fc:	4798      	blx	r3
        n++;
 80022fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002302:	3301      	adds	r3, #1
 8002304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002308:	e090      	b.n	800242c <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 800230a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800230e:	2b73      	cmp	r3, #115	; 0x73
 8002310:	d16b      	bne.n	80023ea <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1d19      	adds	r1, r3, #4
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6011      	str	r1, [r2, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8002320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d109      	bne.n	800233c <mg_vxprintf+0x604>
 8002328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <mg_vxprintf+0x600>
 800232e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002330:	f7fd ffbe 	bl	80002b0 <strlen>
 8002334:	4603      	mov	r3, r0
 8002336:	e000      	b.n	800233a <mg_vxprintf+0x602>
 8002338:	2300      	movs	r3, #0
 800233a:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002342:	e011      	b.n	8002368 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002344:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002348:	2301      	movs	r3, #1
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff fccf 	bl	8001cf0 <scpy>
 8002352:	4602      	mov	r2, r0
 8002354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002358:	4413      	add	r3, r2
 800235a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800235e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002362:	3301      	adds	r3, #1
 8002364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002368:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <mg_vxprintf+0x64e>
 8002370:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002374:	429a      	cmp	r2, r3
 8002376:	d206      	bcs.n	8002386 <mg_vxprintf+0x64e>
 8002378:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800237c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800237e:	4413      	add	r3, r2
 8002380:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002382:	429a      	cmp	r2, r3
 8002384:	d8de      	bhi.n	8002344 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8002386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002388:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fcaf 	bl	8001cf0 <scpy>
 8002392:	4602      	mov	r2, r0
 8002394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002398:	4413      	add	r3, r2
 800239a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023a4:	e011      	b.n	80023ca <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 80023a6:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80023aa:	2301      	movs	r3, #1
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff fc9e 	bl	8001cf0 <scpy>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ba:	4413      	add	r3, r2
 80023bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80023c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c4:	3301      	adds	r3, #1
 80023c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02c      	beq.n	800242c <mg_vxprintf+0x6f4>
 80023d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80023d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d228      	bcs.n	800242c <mg_vxprintf+0x6f4>
 80023da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e0:	4413      	add	r3, r2
 80023e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8de      	bhi.n	80023a6 <mg_vxprintf+0x66e>
 80023e8:	e020      	b.n	800242c <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 80023ea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023ee:	2b25      	cmp	r3, #37	; 0x25
 80023f0:	d109      	bne.n	8002406 <mg_vxprintf+0x6ce>
        out('%', param);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	2025      	movs	r0, #37	; 0x25
 80023f8:	4798      	blx	r3
        n++;
 80023fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023fe:	3301      	adds	r3, #1
 8002400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002404:	e012      	b.n	800242c <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	2025      	movs	r0, #37	; 0x25
 800240c:	4798      	blx	r3
        out(c, param);
 800240e:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	4610      	mov	r0, r2
 8002418:	4798      	blx	r3
        n += 2;
 800241a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800241e:	3302      	adds	r3, #2
 8002420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002424:	e002      	b.n	800242c <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 800242a:	bf00      	nop
      }
      i++;
 800242c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002430:	3301      	adds	r3, #1
 8002432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002436:	e012      	b.n	800245e <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243e:	4413      	add	r3, r2
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	4610      	mov	r0, r2
 8002448:	4798      	blx	r3
 800244a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800244e:	3301      	adds	r3, #1
 8002450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002458:	3301      	adds	r3, #1
 800245a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002464:	4413      	add	r3, r2
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f ac74 	bne.w	8001d56 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800246e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8002472:	4618      	mov	r0, r3
 8002474:	3790      	adds	r7, #144	; 0x90
 8002476:	46bd      	mov	sp, r7
 8002478:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800247c:	0800ab94 	.word	0x0800ab94

08002480 <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <zeromem+0x26>
    while (len--) *buf++ = 0;
 8002490:	e004      	b.n	800249c <zeromem+0x1c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	603a      	str	r2, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f5      	bne.n	8002492 <zeromem+0x12>
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <roundup>:

static size_t roundup(size_t size, size_t align) {
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <roundup+0x26>
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	e000      	b.n	80024da <roundup+0x28>
 80024d8:	687b      	ldr	r3, [r7, #4]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 80024e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024ec:	b088      	sub	sp, #32
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  int ok = 1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4619      	mov	r1, r3
 80024fe:	6838      	ldr	r0, [r7, #0]
 8002500:	f7ff ffd7 	bl	80024b2 <roundup>
 8002504:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d117      	bne.n	800253c <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f7ff ffb2 	bl	8002480 <zeromem>
    free(io->buf);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f007 f9bf 	bl	80098a4 <free>
    io->buf = NULL;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	e052      	b.n	80025e2 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d04d      	beq.n	80025e2 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	2001      	movs	r0, #1
 800254a:	f007 f98d 	bl	8009868 <calloc>
 800254e:	4603      	mov	r3, r0
 8002550:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d028      	beq.n	80025aa <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4293      	cmp	r3, r2
 8002560:	bf28      	it	cs
 8002562:	4613      	movcs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <mg_iobuf_resize+0x9a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <mg_iobuf_resize+0x9a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4619      	mov	r1, r3
 800257c:	6938      	ldr	r0, [r7, #16]
 800257e:	f007 fb64 	bl	8009c4a <memmove>
      zeromem(io->buf, io->size);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f7ff ff77 	bl	8002480 <zeromem>
      free(io->buf);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f007 f984 	bl	80098a4 <free>
      io->buf = (unsigned char *) p;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	e01b      	b.n	80025e2 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <mg_iobuf_resize+0x108>)
 80025b0:	f640 1255 	movw	r2, #2389	; 0x955
 80025b4:	490f      	ldr	r1, [pc, #60]	; (80025f4 <mg_iobuf_resize+0x10c>)
 80025b6:	2001      	movs	r0, #1
 80025b8:	f000 f850 	bl	800265c <mg_log_prefix>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00f      	beq.n	80025e2 <mg_iobuf_resize+0xfa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	4698      	mov	r8, r3
 80025ca:	4691      	mov	r9, r2
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	461c      	mov	r4, r3
 80025d2:	4615      	mov	r5, r2
 80025d4:	e9cd 4500 	strd	r4, r5, [sp]
 80025d8:	4642      	mov	r2, r8
 80025da:	464b      	mov	r3, r9
 80025dc:	4806      	ldr	r0, [pc, #24]	; (80025f8 <mg_iobuf_resize+0x110>)
 80025de:	f000 f897 	bl	8002710 <mg_log>
    }
  }
  return ok;
 80025e2:	697b      	ldr	r3, [r7, #20]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025ee:	bf00      	nop
 80025f0:	0800c2ac 	.word	0x0800c2ac
 80025f4:	0800aa48 	.word	0x0800aa48
 80025f8:	0800b650 	.word	0x0800b650

080025fc <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <logc+0x20>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <logc+0x24>)
 800260c:	6811      	ldr	r1, [r2, #0]
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000004 	.word	0x20000004
 8002620:	200003b4 	.word	0x200003b4

08002624 <logs>:

static void logs(const char *buf, size_t len) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e009      	b.n	8002648 <logs+0x24>
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ffdd 	bl	80025fc <logc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3f1      	bcc.n	8002634 <logs+0x10>
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <mg_log_prefix>:
void mg_log_set(int log_level) {
  MG_DEBUG(("Setting log level to %d", log_level));
  s_level = log_level;
}

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b099      	sub	sp, #100	; 0x64
 8002660:	af06      	add	r7, sp, #24
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <mg_log_prefix+0xac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	dc43      	bgt.n	80026fc <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 8002674:	212f      	movs	r1, #47	; 0x2f
 8002676:	68b8      	ldr	r0, [r7, #8]
 8002678:	f007 fb16 	bl	8009ca8 <strrchr>
 800267c:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 800267e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002680:	2b00      	cmp	r3, #0
 8002682:	d104      	bne.n	800268e <mg_log_prefix+0x32>
 8002684:	215c      	movs	r1, #92	; 0x5c
 8002686:	68b8      	ldr	r0, [r7, #8]
 8002688:	f007 fb0e 	bl	8009ca8 <strrchr>
 800268c:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800268e:	f000 f9ab 	bl	80029e8 <mg_millis>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002698:	2900      	cmp	r1, #0
 800269a:	d002      	beq.n	80026a2 <mg_log_prefix+0x46>
 800269c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800269e:	3101      	adds	r1, #1
 80026a0:	e000      	b.n	80026a4 <mg_log_prefix+0x48>
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	f107 0414 	add.w	r4, r7, #20
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	9005      	str	r0, [sp, #20]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	9004      	str	r0, [sp, #16]
 80026b0:	9103      	str	r1, [sp, #12]
 80026b2:	68f9      	ldr	r1, [r7, #12]
 80026b4:	9102      	str	r1, [sp, #8]
 80026b6:	e9cd 2300 	strd	r2, r3, [sp]
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <mg_log_prefix+0xb0>)
 80026bc:	2129      	movs	r1, #41	; 0x29
 80026be:	4620      	mov	r0, r4
 80026c0:	f000 f8c6 	bl	8002850 <mg_snprintf>
 80026c4:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80026c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c8:	2b27      	cmp	r3, #39	; 0x27
 80026ca:	d90a      	bls.n	80026e2 <mg_log_prefix+0x86>
 80026cc:	2327      	movs	r3, #39	; 0x27
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 80026d0:	e007      	b.n	80026e2 <mg_log_prefix+0x86>
 80026d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	643a      	str	r2, [r7, #64]	; 0x40
 80026d8:	3348      	adds	r3, #72	; 0x48
 80026da:	443b      	add	r3, r7
 80026dc:	2220      	movs	r2, #32
 80026de:	f803 2c34 	strb.w	r2, [r3, #-52]
 80026e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e4:	2b28      	cmp	r3, #40	; 0x28
 80026e6:	d9f4      	bls.n	80026d2 <mg_log_prefix+0x76>
    logs(buf, n - 1);
 80026e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff96 	bl	8002624 <logs>
    return true;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <mg_log_prefix+0xa2>
  } else {
    return false;
 80026fc:	2300      	movs	r3, #0
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	374c      	adds	r7, #76	; 0x4c
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000
 800270c:	0800b69c 	.word	0x0800b69c

08002710 <mg_log>:

void mg_log(const char *fmt, ...) {
 8002710:	b40f      	push	{r0, r1, r2, r3}
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <mg_log+0x34>)
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <mg_log+0x38>)
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	f7ff fb05 	bl	8001d38 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800272e:	2102      	movs	r1, #2
 8002730:	4806      	ldr	r0, [pc, #24]	; (800274c <mg_log+0x3c>)
 8002732:	f7ff ff77 	bl	8002624 <logs>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002740:	b004      	add	sp, #16
 8002742:	4770      	bx	lr
 8002744:	20000004 	.word	0x20000004
 8002748:	200003b4 	.word	0x200003b4
 800274c:	0800abe0 	.word	0x0800abe0

08002750 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
 800275c:	4613      	mov	r3, r2
 800275e:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8002764:	79bb      	ldrb	r3, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <mg_pfn_iobuf_private+0x36>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d906      	bls.n	8002786 <mg_pfn_iobuf_private+0x36>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	3302      	adds	r3, #2
 800277e:	4619      	mov	r1, r3
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff feb1 	bl	80024e8 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	1c9a      	adds	r2, r3, #2
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d811      	bhi.n	80027b8 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	1c58      	adds	r0, r3, #1
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	6088      	str	r0, [r1, #8]
 80027a2:	4413      	add	r3, r2
 80027a4:	79fa      	ldrb	r2, [r7, #7]
 80027a6:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 80027b6:	e00f      	b.n	80027d8 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d209      	bcs.n	80027d8 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	1c58      	adds	r0, r3, #1
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	6088      	str	r0, [r1, #8]
 80027d2:	4413      	add	r3, r2
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2200      	movs	r2, #0
 80027f0:	6839      	ldr	r1, [r7, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ffac 	bl	8002750 <mg_pfn_iobuf_private>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <mg_vsnprintf>:

void mg_pfn_iobuf(char ch, void *param) {
  mg_pfn_iobuf_private(ch, param, true);
}

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800281e:	f107 0114 	add.w	r1, r7, #20
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4809      	ldr	r0, [pc, #36]	; (800284c <mg_vsnprintf+0x4c>)
 8002828:	f7ff fa86 	bl	8001d38 <mg_vxprintf>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	d204      	bcs.n	8002840 <mg_vsnprintf+0x40>
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	4413      	add	r3, r2
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
  return n;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002842:	4618      	mov	r0, r3
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	080027e1 	.word	0x080027e1

08002850 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8002850:	b40c      	push	{r2, r3}
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ffc8 	bl	8002800 <mg_vsnprintf>
 8002870:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800287e:	b002      	add	sp, #8
 8002880:	4770      	bx	lr

08002882 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	6039      	str	r1, [r7, #0]
 800288c:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4618      	mov	r0, r3
 8002892:	f007 f98f 	bl	8009bb4 <putchar>
  (void) param;
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <mg_queue_write_len>:
  memcpy(&n, q->buf + q->tail, sizeof(n));
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
}

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 80028ba:	f3bf 8f5b 	dmb	ish
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	2308      	movs	r3, #8
 80028dc:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d312      	bcc.n	8002910 <mg_queue_book+0x46>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	441a      	add	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	441a      	add	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d808      	bhi.n	8002910 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	1ad2      	subs	r2, r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e011      	b.n	8002934 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	429a      	cmp	r2, r3
 800291a:	d30b      	bcc.n	8002934 <mg_queue_book+0x6a>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	429a      	cmp	r2, r3
 8002924:	d206      	bcs.n	8002934 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8002926:	2100      	movs	r1, #0
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff ffb8 	bl	800289e <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	441a      	add	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	441a      	add	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	d207      	bcs.n	8002958 <mg_queue_book+0x8e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	1ad2      	subs	r2, r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <mg_queue_book+0xa4>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	3304      	adds	r3, #4
 8002968:	441a      	add	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	601a      	str	r2, [r3, #0]
  return space;
 800296e:	697b      	ldr	r3, [r7, #20]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <mg_queue_add>:
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
  assert(q->tail + len <= q->size);
  return len;
}

void mg_queue_add(struct mg_queue *q, size_t len) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <mg_queue_add+0x1e>
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <mg_queue_add+0x60>)
 800298a:	4a14      	ldr	r2, [pc, #80]	; (80029dc <mg_queue_add+0x64>)
 800298c:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8002990:	4813      	ldr	r0, [pc, #76]	; (80029e0 <mg_queue_add+0x68>)
 8002992:	f006 ff4b 	bl	800982c <__assert_func>
  mg_queue_write_len(q, len);
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff80 	bl	800289e <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	f103 0208 	add.w	r2, r3, #8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d906      	bls.n	80029c0 <mg_queue_add+0x48>
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <mg_queue_add+0x6c>)
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <mg_queue_add+0x64>)
 80029b6:	f640 71ed 	movw	r1, #4077	; 0xfed
 80029ba:	4809      	ldr	r0, [pc, #36]	; (80029e0 <mg_queue_add+0x68>)
 80029bc:	f006 ff36 	bl	800982c <__assert_func>
  q->head += len + sizeof(uint32_t);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	1d1a      	adds	r2, r3, #4
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60da      	str	r2, [r3, #12]
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	0800b8b4 	.word	0x0800b8b4
 80029dc:	0800c2bc 	.word	0x0800c2bc
 80029e0:	0800aa48 	.word	0x0800aa48
 80029e4:	0800b8bc 	.word	0x0800b8bc

080029e8 <mg_millis>:
  return allowed == '+';
}

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 80029e8:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
 80029ec:	af00      	add	r7, sp, #0
#elif MG_ARCH == MG_ARCH_ZEPHYR
  return (uint64_t) k_uptime_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS1
  return (uint64_t) rt_time_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS2
  return (uint64_t) ((osKernelGetTickCount() * 1000) / osKernelGetTickFreq());
 80029ee:	f004 f9db 	bl	8006da8 <osKernelGetTickCount>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029f8:	fb02 f403 	mul.w	r4, r2, r3
 80029fc:	f004 f9fc 	bl	8006df8 <osKernelGetTickFreq>
 8002a00:	4603      	mov	r3, r0
 8002a02:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a06:	2200      	movs	r2, #0
 8002a08:	4698      	mov	r8, r3
 8002a0a:	4691      	mov	r9, r2
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}

08002a18 <ETH_IRQHandler>:
  }
  return up;
}

void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
  if (ETH->DMASR & BIT(6)) {             // Frame received, loop
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <ETH_IRQHandler+0xfc>)
 8002a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d061      	beq.n	8002af2 <ETH_IRQHandler+0xda>
    ETH->DMASR = BIT(16) | BIT(6);       // Clear flag
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <ETH_IRQHandler+0xfc>)
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <ETH_IRQHandler+0x100>)
 8002a38:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	e053      	b.n	8002ae8 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4a36      	ldr	r2, [pc, #216]	; (8002b20 <ETH_IRQHandler+0x108>)
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db4f      	blt.n	8002af0 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 8002a50:	4b32      	ldr	r3, [pc, #200]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4a32      	ldr	r2, [pc, #200]	; (8002b20 <ETH_IRQHandler+0x108>)
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a64:	d128      	bne.n	8002ab8 <ETH_IRQHandler+0xa0>
          !(s_rxdesc[s_rxno][0] & BIT(15))) {  // skip partial/errored frames
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	4a2d      	ldr	r2, [pc, #180]	; (8002b20 <ETH_IRQHandler+0x108>)
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	4413      	add	r3, r2
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11e      	bne.n	8002ab8 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (BIT(14) - 1));
 8002a7a:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <ETH_IRQHandler+0x108>)
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a8c:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f240 6304 	movw	r3, #1540	; 0x604
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <ETH_IRQHandler+0x10c>)
 8002a9e:	1898      	adds	r0, r3, r2
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d902      	bls.n	8002aac <ETH_IRQHandler+0x94>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	3b04      	subs	r3, #4
 8002aaa:	e000      	b.n	8002aae <ETH_IRQHandler+0x96>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <ETH_IRQHandler+0x110>)
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f000 f83a 	bl	8002b2c <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = BIT(31);
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <ETH_IRQHandler+0x108>)
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ac6:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d902      	bls.n	8002ae2 <ETH_IRQHandler+0xca>
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <ETH_IRQHandler+0x104>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b09      	cmp	r3, #9
 8002aec:	d9a8      	bls.n	8002a40 <ETH_IRQHandler+0x28>
 8002aee:	e000      	b.n	8002af2 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8002af0:	bf00      	nop
    }
  }
  ETH->DMASR = BIT(7);  // Clear possible RBUS while processing
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <ETH_IRQHandler+0xfc>)
 8002af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af8:	461a      	mov	r2, r3
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	6153      	str	r3, [r2, #20]
  ETH->DMARPDR = 0;     // and resume RX
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <ETH_IRQHandler+0xfc>)
 8002b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b04:	461a      	mov	r2, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	6093      	str	r3, [r2, #8]
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40028000 	.word	0x40028000
 8002b18:	00010040 	.word	0x00010040
 8002b1c:	20001c08 	.word	0x20001c08
 8002b20:	200003b8 	.word	0x200003b8
 8002b24:	200003f8 	.word	0x200003f8
 8002b28:	20001c0c 	.word	0x20001c0c

08002b2c <mg_tcpip_qwrite>:
}

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	332c      	adds	r3, #44	; 0x2c
 8002b3c:	f107 0114 	add.w	r1, r7, #20
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fec1 	bl	80028ca <mg_queue_book>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d811      	bhi.n	8002b74 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	68f9      	ldr	r1, [r7, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f007 f941 	bl	8009dde <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	332c      	adds	r3, #44	; 0x2c
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff08 	bl	8002978 <mg_queue_add>
    ifp->nrecv++;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 8002b72:	e004      	b.n	8002b7e <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	f06f 0001 	mvn.w	r0, #1
 8002bc6:	f000 fc5b 	bl	8003480 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	; 0x38
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <HAL_ETH_MspInit+0x168>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	f040 809e 	bne.w	8002d38 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4a50      	ldr	r2, [pc, #320]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c06:	6313      	str	r3, [r2, #48]	; 0x30
 8002c08:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	4a44      	ldr	r2, [pc, #272]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c36:	6313      	str	r3, [r2, #48]	; 0x30
 8002c38:	4b42      	ldr	r3, [pc, #264]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a3e      	ldr	r2, [pc, #248]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b3c      	ldr	r3, [pc, #240]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4a38      	ldr	r2, [pc, #224]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6313      	str	r3, [r2, #48]	; 0x30
 8002c68:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c74:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c96:	6313      	str	r3, [r2, #48]	; 0x30
 8002c98:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_ETH_MspInit+0x16c>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002ca4:	2332      	movs	r3, #50	; 0x32
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cb4:	230b      	movs	r3, #11
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4822      	ldr	r0, [pc, #136]	; (8002d48 <HAL_ETH_MspInit+0x170>)
 8002cc0:	f000 ff2e 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cc4:	2386      	movs	r3, #134	; 0x86
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cd4:	230b      	movs	r3, #11
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	4619      	mov	r1, r3
 8002cde:	481b      	ldr	r0, [pc, #108]	; (8002d4c <HAL_ETH_MspInit+0x174>)
 8002ce0:	f000 ff1e 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cf6:	230b      	movs	r3, #11
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4813      	ldr	r0, [pc, #76]	; (8002d50 <HAL_ETH_MspInit+0x178>)
 8002d02:	f000 ff0d 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d18:	230b      	movs	r3, #11
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	480c      	ldr	r0, [pc, #48]	; (8002d54 <HAL_ETH_MspInit+0x17c>)
 8002d24:	f000 fefc 	bl	8003b20 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2105      	movs	r1, #5
 8002d2c:	203d      	movs	r0, #61	; 0x3d
 8002d2e:	f000 fba7 	bl	8003480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002d32:	203d      	movs	r0, #61	; 0x3d
 8002d34:	f000 fbc0 	bl	80034b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3738      	adds	r7, #56	; 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40028000 	.word	0x40028000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40020400 	.word	0x40020400
 8002d54:	40021800 	.word	0x40021800

08002d58 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b0a4      	sub	sp, #144	; 0x90
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2284      	movs	r2, #132	; 0x84
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f006 ff88 	bl	8009c7e <memset>
  if(hrng->Instance==RNG)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_RNG_MspInit+0x60>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d11b      	bne.n	8002db0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d7c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f002 fbcd 	bl	8005528 <HAL_RCCEx_PeriphCLKConfig>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002d94:	f7fe fb14 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_RNG_MspInit+0x64>)
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <HAL_RNG_MspInit+0x64>)
 8002d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da2:	6353      	str	r3, [r2, #52]	; 0x34
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RNG_MspInit+0x64>)
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002db0:	bf00      	nop
 8002db2:	3790      	adds	r7, #144	; 0x90
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	50060800 	.word	0x50060800
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b0aa      	sub	sp, #168	; 0xa8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	2284      	movs	r2, #132	; 0x84
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f006 ff4c 	bl	8009c7e <memset>
  if(huart->Instance==USART3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <HAL_UART_MspInit+0xb4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d13c      	bne.n	8002e6a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002df6:	2300      	movs	r3, #0
 8002df8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 fb92 	bl	8005528 <HAL_RCCEx_PeriphCLKConfig>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e0a:	f7fe fad9 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <HAL_UART_MspInit+0xb8>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_UART_MspInit+0xb8>)
 8002e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <HAL_UART_MspInit+0xb8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_UART_MspInit+0xb8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <HAL_UART_MspInit+0xb8>)
 8002e2c:	f043 0308 	orr.w	r3, r3, #8
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_UART_MspInit+0xb8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e52:	2303      	movs	r3, #3
 8002e54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e58:	2307      	movs	r3, #7
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e62:	4619      	mov	r1, r3
 8002e64:	4805      	ldr	r0, [pc, #20]	; (8002e7c <HAL_UART_MspInit+0xbc>)
 8002e66:	f000 fe5b 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	37a8      	adds	r7, #168	; 0xa8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40004800 	.word	0x40004800
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020c00 	.word	0x40020c00

08002e80 <HAL_I2C_MspInit>:

}


void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0aa      	sub	sp, #168	; 0xa8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	2284      	movs	r2, #132	; 0x84
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f006 feec 	bl	8009c7e <memset>
  if(hi2c->Instance==I2C1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_I2C_MspInit+0xb4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d13c      	bne.n	8002f2a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eba:	f107 0310 	add.w	r3, r7, #16
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 fb32 	bl	8005528 <HAL_RCCEx_PeriphCLKConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002eca:	f7fe fa79 	bl	80013c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_I2C_MspInit+0xb8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_I2C_MspInit+0xb8>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <HAL_I2C_MspInit+0xb8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ee6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eee:	2312      	movs	r3, #18
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f00:	2304      	movs	r3, #4
 8002f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480b      	ldr	r0, [pc, #44]	; (8002f3c <HAL_I2C_MspInit+0xbc>)
 8002f0e:	f000 fe07 	bl	8003b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_I2C_MspInit+0xb8>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_I2C_MspInit+0xb8>)
 8002f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_I2C_MspInit+0xb8>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f2a:	bf00      	nop
 8002f2c:	37a8      	adds	r7, #168	; 0xa8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40005400 	.word	0x40005400
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020400 	.word	0x40020400

08002f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08e      	sub	sp, #56	; 0x38
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f50:	4b33      	ldr	r3, [pc, #204]	; (8003020 <HAL_InitTick+0xe0>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a32      	ldr	r2, [pc, #200]	; (8003020 <HAL_InitTick+0xe0>)
 8002f56:	f043 0310 	orr.w	r3, r3, #16
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <HAL_InitTick+0xe0>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f68:	f107 0210 	add.w	r2, r7, #16
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 faa6 	bl	80054c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f82:	f002 fa77 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 8002f86:	6378      	str	r0, [r7, #52]	; 0x34
 8002f88:	e004      	b.n	8002f94 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f8a:	f002 fa73 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_InitTick+0xe4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	0c9b      	lsrs	r3, r3, #18
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <HAL_InitTick+0xe8>)
 8002fa4:	4a21      	ldr	r2, [pc, #132]	; (800302c <HAL_InitTick+0xec>)
 8002fa6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <HAL_InitTick+0xe8>)
 8002faa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_InitTick+0xe8>)
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_InitTick+0xe8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_InitTick+0xe8>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_InitTick+0xe8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002fc8:	4817      	ldr	r0, [pc, #92]	; (8003028 <HAL_InitTick+0xe8>)
 8002fca:	f002 fec7 	bl	8005d5c <HAL_TIM_Base_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11b      	bne.n	8003014 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002fdc:	4812      	ldr	r0, [pc, #72]	; (8003028 <HAL_InitTick+0xe8>)
 8002fde:	f002 ff1f 	bl	8005e20 <HAL_TIM_Base_Start_IT>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ff0:	2036      	movs	r0, #54	; 0x36
 8002ff2:	f000 fa61 	bl	80034b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d808      	bhi.n	800300e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	2036      	movs	r0, #54	; 0x36
 8003002:	f000 fa3d 	bl	8003480 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_InitTick+0xf0>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e002      	b.n	8003014 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003014:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003018:	4618      	mov	r0, r3
 800301a:	3738      	adds	r7, #56	; 0x38
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	431bde83 	.word	0x431bde83
 8003028:	20001c10 	.word	0x20001c10
 800302c:	40001000 	.word	0x40001000
 8003030:	2000000c 	.word	0x2000000c

08003034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003038:	e7fe      	b.n	8003038 <NMI_Handler+0x4>

0800303a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303e:	e7fe      	b.n	800303e <HardFault_Handler+0x4>

08003040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003044:	e7fe      	b.n	8003044 <MemManage_Handler+0x4>

08003046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800304a:	e7fe      	b.n	800304a <BusFault_Handler+0x4>

0800304c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003050:	e7fe      	b.n	8003050 <UsageFault_Handler+0x4>

08003052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <TIM6_DAC_IRQHandler+0x10>)
 8003066:	f002 ff53 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20001c10 	.word	0x20001c10

08003074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return 1;
 8003078:	2301      	movs	r3, #1
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_kill>:

int _kill(int pid, int sig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800308e:	f006 fe79 	bl	8009d84 <__errno>
 8003092:	4603      	mov	r3, r0
 8003094:	2216      	movs	r2, #22
 8003096:	601a      	str	r2, [r3, #0]
  return -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_exit>:

void _exit (int status)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ffe7 	bl	8003084 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030b6:	e7fe      	b.n	80030b6 <_exit+0x12>

080030b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e00a      	b.n	80030e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ca:	f3af 8000 	nop.w
 80030ce:	4601      	mov	r1, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	60ba      	str	r2, [r7, #8]
 80030d6:	b2ca      	uxtb	r2, r1
 80030d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbf0      	blt.n	80030ca <_read+0x12>
  }

  return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <_write+0x22>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	b29a      	uxth	r2, r3
 800310a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <_write+0x2c>)
 8003112:	f003 f951 	bl	80063b8 <HAL_UART_Transmit>
	 return len;
 8003116:	687b      	ldr	r3, [r7, #4]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	200002c8 	.word	0x200002c8

08003124 <_close>:
//#endif

int _close(int file)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800314c:	605a      	str	r2, [r3, #4]
  return 0;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_isatty>:

int _isatty(int file)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003164:	2301      	movs	r3, #1
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <_sbrk+0x5c>)
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <_sbrk+0x60>)
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <_sbrk+0x64>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <_sbrk+0x64>)
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <_sbrk+0x68>)
 80031ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <_sbrk+0x64>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d207      	bcs.n	80031cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031bc:	f006 fde2 	bl	8009d84 <__errno>
 80031c0:	4603      	mov	r3, r0
 80031c2:	220c      	movs	r2, #12
 80031c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ca:	e009      	b.n	80031e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <_sbrk+0x64>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <_sbrk+0x64>)
 80031dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20050000 	.word	0x20050000
 80031ec:	00000400 	.word	0x00000400
 80031f0:	20001c5c 	.word	0x20001c5c
 80031f4:	200066f8 	.word	0x200066f8

080031f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <SystemInit+0x20>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	4a05      	ldr	r2, [pc, #20]	; (8003218 <SystemInit+0x20>)
 8003204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800321c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003254 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003220:	480d      	ldr	r0, [pc, #52]	; (8003258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003222:	490e      	ldr	r1, [pc, #56]	; (800325c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003224:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003228:	e002      	b.n	8003230 <LoopCopyDataInit>

0800322a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800322c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322e:	3304      	adds	r3, #4

08003230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003234:	d3f9      	bcc.n	800322a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003238:	4c0b      	ldr	r4, [pc, #44]	; (8003268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800323c:	e001      	b.n	8003242 <LoopFillZerobss>

0800323e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003240:	3204      	adds	r2, #4

08003242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003244:	d3fb      	bcc.n	800323e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003246:	f7ff ffd7 	bl	80031f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324a:	f006 fda1 	bl	8009d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324e:	f7fd fe33 	bl	8000eb8 <main>
  bx  lr    
 8003252:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003254:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800325c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003260:	0800c364 	.word	0x0800c364
  ldr r2, =_sbss
 8003264:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8003268:	200066f8 	.word	0x200066f8

0800326c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800326c:	e7fe      	b.n	800326c <ADC_IRQHandler>

0800326e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003272:	2003      	movs	r0, #3
 8003274:	f000 f8f9 	bl	800346a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003278:	200f      	movs	r0, #15
 800327a:	f7ff fe61 	bl	8002f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800327e:	f7ff fc83 	bl	8002b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_IncTick+0x20>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x24>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4413      	add	r3, r2
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_IncTick+0x24>)
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000010 	.word	0x20000010
 80032ac:	20001c60 	.word	0x20001c60

080032b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_GetTick+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20001c60 	.word	0x20001c60

080032c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff ffee 	bl	80032b0 <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d005      	beq.n	80032ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_Delay+0x44>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ee:	bf00      	nop
 80032f0:	f7ff ffde 	bl	80032b0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d8f7      	bhi.n	80032f0 <HAL_Delay+0x28>
  {
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000010 	.word	0x20000010

08003310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <__NVIC_SetPriorityGrouping+0x40>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800332c:	4013      	ands	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 800333a:	4313      	orrs	r3, r2
 800333c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333e:	4a04      	ldr	r2, [pc, #16]	; (8003350 <__NVIC_SetPriorityGrouping+0x40>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00
 8003354:	05fa0000 	.word	0x05fa0000

08003358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <__NVIC_GetPriorityGrouping+0x18>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0307 	and.w	r3, r3, #7
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db0b      	blt.n	800339e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	4907      	ldr	r1, [pc, #28]	; (80033ac <__NVIC_EnableIRQ+0x38>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	db0a      	blt.n	80033da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	490c      	ldr	r1, [pc, #48]	; (80033fc <__NVIC_SetPriority+0x4c>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	0112      	lsls	r2, r2, #4
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	440b      	add	r3, r1
 80033d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d8:	e00a      	b.n	80033f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4908      	ldr	r1, [pc, #32]	; (8003400 <__NVIC_SetPriority+0x50>)
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	3b04      	subs	r3, #4
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	440b      	add	r3, r1
 80033ee:	761a      	strb	r2, [r3, #24]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000e100 	.word	0xe000e100
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f1c3 0307 	rsb	r3, r3, #7
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf28      	it	cs
 8003422:	2304      	movcs	r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3304      	adds	r3, #4
 800342a:	2b06      	cmp	r3, #6
 800342c:	d902      	bls.n	8003434 <NVIC_EncodePriority+0x30>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3b03      	subs	r3, #3
 8003432:	e000      	b.n	8003436 <NVIC_EncodePriority+0x32>
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	401a      	ands	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800344c:	f04f 31ff 	mov.w	r1, #4294967295
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43d9      	mvns	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	4313      	orrs	r3, r2
         );
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ff4c 	bl	8003310 <__NVIC_SetPriorityGrouping>
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003492:	f7ff ff61 	bl	8003358 <__NVIC_GetPriorityGrouping>
 8003496:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	f7ff ffb1 	bl	8003404 <NVIC_EncodePriority>
 80034a2:	4602      	mov	r2, r0
 80034a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff ff80 	bl	80033b0 <__NVIC_SetPriority>
}
 80034b0:	bf00      	nop
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ff54 	bl	8003374 <__NVIC_EnableIRQ>
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06a      	b.n	80035bc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d106      	bne.n	80034fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2223      	movs	r2, #35	; 0x23
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fb6d 	bl	8002bd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_ETH_Init+0xf0>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <HAL_ETH_Init+0xf0>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b2e      	ldr	r3, [pc, #184]	; (80035c4 <HAL_ETH_Init+0xf0>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003516:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <HAL_ETH_Init+0xf4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <HAL_ETH_Init+0xf4>)
 800351c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003520:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <HAL_ETH_Init+0xf4>)
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4927      	ldr	r1, [pc, #156]	; (80035c8 <HAL_ETH_Init+0xf4>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_ETH_Init+0xf4>)
 8003532:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800354a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354c:	f7ff feb0 	bl	80032b0 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003552:	e011      	b.n	8003578 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003554:	f7ff feac 	bl	80032b0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003562:	d909      	bls.n	8003578 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2204      	movs	r2, #4
 8003568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	22e0      	movs	r2, #224	; 0xe0
 8003570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e021      	b.n	80035bc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e4      	bne.n	8003554 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f958 	bl	8003840 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f9ff 	bl	8003994 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa55 	bl	8003a46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	461a      	mov	r2, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f9bd 	bl	8003924 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2210      	movs	r2, #16
 80035b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40013800 	.word	0x40013800

080035cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4b51      	ldr	r3, [pc, #324]	; (8003728 <ETH_SetMACConfig+0x15c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	7c1b      	ldrb	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <ETH_SetMACConfig+0x28>
 80035ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035f2:	e000      	b.n	80035f6 <ETH_SetMACConfig+0x2a>
 80035f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	7c5b      	ldrb	r3, [r3, #17]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <ETH_SetMACConfig+0x38>
 80035fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003602:	e000      	b.n	8003606 <ETH_SetMACConfig+0x3a>
 8003604:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003606:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800360c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	7fdb      	ldrb	r3, [r3, #31]
 8003612:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003614:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800361a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	7f92      	ldrb	r2, [r2, #30]
 8003620:	2a00      	cmp	r2, #0
 8003622:	d102      	bne.n	800362a <ETH_SetMACConfig+0x5e>
 8003624:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003628:	e000      	b.n	800362c <ETH_SetMACConfig+0x60>
 800362a:	2200      	movs	r2, #0
                        macconf->Speed |
 800362c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	7f1b      	ldrb	r3, [r3, #28]
 8003632:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003634:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800363a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	791b      	ldrb	r3, [r3, #4]
 8003640:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003642:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	f892 2020 	ldrb.w	r2, [r2, #32]
 800364a:	2a00      	cmp	r2, #0
 800364c:	d102      	bne.n	8003654 <ETH_SetMACConfig+0x88>
 800364e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003652:	e000      	b.n	8003656 <ETH_SetMACConfig+0x8a>
 8003654:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003656:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	7bdb      	ldrb	r3, [r3, #15]
 800365c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800365e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003664:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800366c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800366e:	4313      	orrs	r3, r2
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003686:	2001      	movs	r0, #1
 8003688:	f7ff fe1e 	bl	80032c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80036a2:	4013      	ands	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d101      	bne.n	80036ba <ETH_SetMACConfig+0xee>
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	e000      	b.n	80036bc <ETH_SetMACConfig+0xf0>
 80036ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80036ca:	2a01      	cmp	r2, #1
 80036cc:	d101      	bne.n	80036d2 <ETH_SetMACConfig+0x106>
 80036ce:	2208      	movs	r2, #8
 80036d0:	e000      	b.n	80036d4 <ETH_SetMACConfig+0x108>
 80036d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80036d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80036dc:	2a01      	cmp	r2, #1
 80036de:	d101      	bne.n	80036e4 <ETH_SetMACConfig+0x118>
 80036e0:	2204      	movs	r2, #4
 80036e2:	e000      	b.n	80036e6 <ETH_SetMACConfig+0x11a>
 80036e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80036ee:	2a01      	cmp	r2, #1
 80036f0:	d101      	bne.n	80036f6 <ETH_SetMACConfig+0x12a>
 80036f2:	2202      	movs	r2, #2
 80036f4:	e000      	b.n	80036f8 <ETH_SetMACConfig+0x12c>
 80036f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036f8:	4313      	orrs	r3, r2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff fdd9 	bl	80032c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	ff20810f 	.word	0xff20810f

0800372c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4b3d      	ldr	r3, [pc, #244]	; (800383c <ETH_SetDMAConfig+0x110>)
 8003746:	4013      	ands	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	7b1b      	ldrb	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <ETH_SetDMAConfig+0x2c>
 8003752:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003756:	e000      	b.n	800375a <ETH_SetDMAConfig+0x2e>
 8003758:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	7b5b      	ldrb	r3, [r3, #13]
 800375e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003760:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	7f52      	ldrb	r2, [r2, #29]
 8003766:	2a00      	cmp	r2, #0
 8003768:	d102      	bne.n	8003770 <ETH_SetDMAConfig+0x44>
 800376a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800376e:	e000      	b.n	8003772 <ETH_SetDMAConfig+0x46>
 8003770:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003772:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	7b9b      	ldrb	r3, [r3, #14]
 8003778:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800377a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003780:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	7f1b      	ldrb	r3, [r3, #28]
 8003786:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003788:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	7f9b      	ldrb	r3, [r3, #30]
 800378e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003790:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003796:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80037a0:	4313      	orrs	r3, r2
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b0:	461a      	mov	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7ff fd80 	bl	80032c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	791b      	ldrb	r3, [r3, #4]
 80037da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80037e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80037ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80037f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80037fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003804:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800380e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003812:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003820:	2001      	movs	r0, #1
 8003822:	f7ff fd51 	bl	80032c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	f8de3f23 	.word	0xf8de3f23

08003840 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0a6      	sub	sp, #152	; 0x98
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003854:	2300      	movs	r3, #0
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800387c:	2300      	movs	r3, #0
 800387e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003886:	2300      	movs	r3, #0
 8003888:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80038a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80038b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fe86 	bl	80035cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80038f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80038f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80038fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003900:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003908:	2300      	movs	r3, #0
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003910:	f107 0308 	add.w	r3, r7, #8
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff08 	bl	800372c <ETH_SetDMAConfig>
}
 800391c:	bf00      	nop
 800391e:	3798      	adds	r7, #152	; 0x98
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3305      	adds	r3, #5
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	3204      	adds	r2, #4
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <ETH_MACAddressConfig+0x68>)
 8003946:	4413      	add	r3, r2
 8003948:	461a      	mov	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3303      	adds	r3, #3
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	061a      	lsls	r2, r3, #24
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3302      	adds	r3, #2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3301      	adds	r3, #1
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	4313      	orrs	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <ETH_MACAddressConfig+0x6c>)
 8003976:	4413      	add	r3, r2
 8003978:	461a      	mov	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	6013      	str	r3, [r2, #0]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40028040 	.word	0x40028040
 8003990:	40028044 	.word	0x40028044

08003994 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e03e      	b.n	8003a20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	3206      	adds	r2, #6
 80039d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d80c      	bhi.n	8003a04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68d9      	ldr	r1, [r3, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	440b      	add	r3, r1
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e004      	b.n	8003a0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d9bd      	bls.n	80039a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a38:	611a      	str	r2, [r3, #16]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e046      	b.n	8003ae2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6919      	ldr	r1, [r3, #16]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	440b      	add	r3, r1
 8003a64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	3212      	adds	r2, #18
 8003aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d80c      	bhi.n	8003ad2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6919      	ldr	r1, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	440b      	add	r3, r1
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	e004      	b.n	8003adc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d9b5      	bls.n	8003a54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b12:	60da      	str	r2, [r3, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e175      	b.n	8003e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	f040 8164 	bne.w	8003e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d005      	beq.n	8003b76 <HAL_GPIO_Init+0x56>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d130      	bne.n	8003bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0201 	and.w	r2, r3, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d017      	beq.n	8003c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d123      	bne.n	8003c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	220f      	movs	r2, #15
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	69b9      	ldr	r1, [r7, #24]
 8003c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0203 	and.w	r2, r3, #3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80be 	beq.w	8003e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	4b66      	ldr	r3, [pc, #408]	; (8003e44 <HAL_GPIO_Init+0x324>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a65      	ldr	r2, [pc, #404]	; (8003e44 <HAL_GPIO_Init+0x324>)
 8003cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b63      	ldr	r3, [pc, #396]	; (8003e44 <HAL_GPIO_Init+0x324>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cc2:	4a61      	ldr	r2, [pc, #388]	; (8003e48 <HAL_GPIO_Init+0x328>)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a58      	ldr	r2, [pc, #352]	; (8003e4c <HAL_GPIO_Init+0x32c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d037      	beq.n	8003d5e <HAL_GPIO_Init+0x23e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d031      	beq.n	8003d5a <HAL_GPIO_Init+0x23a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d02b      	beq.n	8003d56 <HAL_GPIO_Init+0x236>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a55      	ldr	r2, [pc, #340]	; (8003e58 <HAL_GPIO_Init+0x338>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d025      	beq.n	8003d52 <HAL_GPIO_Init+0x232>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a54      	ldr	r2, [pc, #336]	; (8003e5c <HAL_GPIO_Init+0x33c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01f      	beq.n	8003d4e <HAL_GPIO_Init+0x22e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a53      	ldr	r2, [pc, #332]	; (8003e60 <HAL_GPIO_Init+0x340>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d019      	beq.n	8003d4a <HAL_GPIO_Init+0x22a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a52      	ldr	r2, [pc, #328]	; (8003e64 <HAL_GPIO_Init+0x344>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_Init+0x226>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a51      	ldr	r2, [pc, #324]	; (8003e68 <HAL_GPIO_Init+0x348>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00d      	beq.n	8003d42 <HAL_GPIO_Init+0x222>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a50      	ldr	r2, [pc, #320]	; (8003e6c <HAL_GPIO_Init+0x34c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <HAL_GPIO_Init+0x21e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4f      	ldr	r2, [pc, #316]	; (8003e70 <HAL_GPIO_Init+0x350>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_GPIO_Init+0x21a>
 8003d36:	2309      	movs	r3, #9
 8003d38:	e012      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	e010      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	e00e      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d42:	2307      	movs	r3, #7
 8003d44:	e00c      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d46:	2306      	movs	r3, #6
 8003d48:	e00a      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d4a:	2305      	movs	r3, #5
 8003d4c:	e008      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d4e:	2304      	movs	r3, #4
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d52:	2303      	movs	r3, #3
 8003d54:	e004      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x240>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f002 0203 	and.w	r2, r2, #3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4093      	lsls	r3, r2
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d70:	4935      	ldr	r1, [pc, #212]	; (8003e48 <HAL_GPIO_Init+0x328>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da2:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da8:	4b32      	ldr	r3, [pc, #200]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd2:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <HAL_GPIO_Init+0x354>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	f67f ae86 	bls.w	8003b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020c00 	.word	0x40020c00
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40021400 	.word	0x40021400
 8003e64:	40021800 	.word	0x40021800
 8003e68:	40021c00 	.word	0x40021c00
 8003e6c:	40022000 	.word	0x40022000
 8003e70:	40022400 	.word	0x40022400
 8003e74:	40013c00 	.word	0x40013c00

08003e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
 8003e84:	4613      	mov	r3, r2
 8003e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e88:	787b      	ldrb	r3, [r7, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e94:	e003      	b.n	8003e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	041a      	lsls	r2, r3, #16
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	619a      	str	r2, [r3, #24]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e07f      	b.n	8003fbe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe ffd4 	bl	8002e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003efc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	e006      	b.n	8003f34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d104      	bne.n	8003f46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_I2C_Init+0x11c>)
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69d9      	ldr	r1, [r3, #28]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	02008000 	.word	0x02008000

08003fcc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	460b      	mov	r3, r1
 8003fda:	817b      	strh	r3, [r7, #10]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	f040 80db 	bne.w	80041a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2C_Master_Receive+0x30>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0d4      	b.n	80041a6 <HAL_I2C_Master_Receive+0x1da>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004004:	f7ff f954 	bl	80032b0 <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	2319      	movs	r3, #25
 8004010:	2201      	movs	r2, #1
 8004012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fa5a 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0bf      	b.n	80041a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2222      	movs	r2, #34	; 0x22
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2210      	movs	r2, #16
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	893a      	ldrh	r2, [r7, #8]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2bff      	cmp	r3, #255	; 0xff
 8004056:	d90e      	bls.n	8004076 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	22ff      	movs	r2, #255	; 0xff
 800405c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	b2da      	uxtb	r2, r3
 8004064:	8979      	ldrh	r1, [r7, #10]
 8004066:	4b52      	ldr	r3, [pc, #328]	; (80041b0 <HAL_I2C_Master_Receive+0x1e4>)
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fc44 	bl	80048fc <I2C_TransferConfig>
 8004074:	e06d      	b.n	8004152 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	b2da      	uxtb	r2, r3
 8004086:	8979      	ldrh	r1, [r7, #10]
 8004088:	4b49      	ldr	r3, [pc, #292]	; (80041b0 <HAL_I2C_Master_Receive+0x1e4>)
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fc33 	bl	80048fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004096:	e05c      	b.n	8004152 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	6a39      	ldr	r1, [r7, #32]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fad3 	bl	8004648 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e07c      	b.n	80041a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d034      	beq.n	8004152 <HAL_I2C_Master_Receive+0x186>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d130      	bne.n	8004152 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f9e8 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e04d      	b.n	80041a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2bff      	cmp	r3, #255	; 0xff
 8004112:	d90e      	bls.n	8004132 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	22ff      	movs	r2, #255	; 0xff
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	b2da      	uxtb	r2, r3
 8004120:	8979      	ldrh	r1, [r7, #10]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fbe6 	bl	80048fc <I2C_TransferConfig>
 8004130:	e00f      	b.n	8004152 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fbd5 	bl	80048fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d19d      	bne.n	8004098 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	6a39      	ldr	r1, [r7, #32]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fa35 	bl	80045d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e01a      	b.n	80041a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2220      	movs	r2, #32
 8004176:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <HAL_I2C_Master_Receive+0x1e8>)
 8004184:	400b      	ands	r3, r1
 8004186:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	80002400 	.word	0x80002400
 80041b4:	fe00e800 	.word	0xfe00e800

080041b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	461a      	mov	r2, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	460b      	mov	r3, r1
 80041cc:	813b      	strh	r3, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	f040 80f9 	bne.w	80043d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_I2C_Mem_Write+0x34>
 80041e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0ed      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Mem_Write+0x4e>
 8004202:	2302      	movs	r3, #2
 8004204:	e0e6      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800420e:	f7ff f84f 	bl	80032b0 <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2319      	movs	r3, #25
 800421a:	2201      	movs	r2, #1
 800421c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f955 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d1      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2221      	movs	r2, #33	; 0x21
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004258:	88f8      	ldrh	r0, [r7, #6]
 800425a:	893a      	ldrh	r2, [r7, #8]
 800425c:	8979      	ldrh	r1, [r7, #10]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4603      	mov	r3, r0
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f8b9 	bl	80043e0 <I2C_RequestMemoryWrite>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0a9      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2bff      	cmp	r3, #255	; 0xff
 8004288:	d90e      	bls.n	80042a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	22ff      	movs	r2, #255	; 0xff
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	b2da      	uxtb	r2, r3
 8004296:	8979      	ldrh	r1, [r7, #10]
 8004298:	2300      	movs	r3, #0
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fb2b 	bl	80048fc <I2C_TransferConfig>
 80042a6:	e00f      	b.n	80042c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	8979      	ldrh	r1, [r7, #10]
 80042ba:	2300      	movs	r3, #0
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fb1a 	bl	80048fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f93f 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e07b      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d034      	beq.n	8004380 <HAL_I2C_Mem_Write+0x1c8>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	d130      	bne.n	8004380 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	2200      	movs	r2, #0
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f8d1 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e04d      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2bff      	cmp	r3, #255	; 0xff
 8004340:	d90e      	bls.n	8004360 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	22ff      	movs	r2, #255	; 0xff
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	b2da      	uxtb	r2, r3
 800434e:	8979      	ldrh	r1, [r7, #10]
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 facf 	bl	80048fc <I2C_TransferConfig>
 800435e:	e00f      	b.n	8004380 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	b2da      	uxtb	r2, r3
 8004370:	8979      	ldrh	r1, [r7, #10]
 8004372:	2300      	movs	r3, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fabe 	bl	80048fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d19e      	bne.n	80042c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f91e 	bl	80045d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e01a      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2220      	movs	r2, #32
 80043a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_I2C_Mem_Write+0x224>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	fe00e800 	.word	0xfe00e800

080043e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	8979      	ldrh	r1, [r7, #10]
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <I2C_RequestMemoryWrite+0xa4>)
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fa77 	bl	80048fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f89c 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e02c      	b.n	800447c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
 8004432:	e015      	b.n	8004460 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	69b9      	ldr	r1, [r7, #24]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f882 	bl	8004550 <I2C_WaitOnTXISFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e012      	b.n	800447c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004456:	893b      	ldrh	r3, [r7, #8]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f830 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	80002000 	.word	0x80002000

08004488 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d103      	bne.n	80044a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d007      	beq.n	80044c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	619a      	str	r2, [r3, #24]
  }
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	e022      	b.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d01e      	beq.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe fee1 	bl	80032b0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d113      	bne.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e00f      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d0cd      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800455c:	e02c      	b.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f8ea 	bl	800473c <I2C_IsErrorOccurred>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e02a      	b.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d01e      	beq.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fe fe99 	bl	80032b0 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e007      	b.n	80045c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d1cb      	bne.n	800455e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045dc:	e028      	b.n	8004630 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8aa 	bl	800473c <I2C_IsErrorOccurred>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e026      	b.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fe fe5d 	bl	80032b0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d113      	bne.n	8004630 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e007      	b.n	8004640 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	d1cf      	bne.n	80045de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004654:	e064      	b.n	8004720 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f86e 	bl	800473c <I2C_IsErrorOccurred>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e062      	b.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d138      	bne.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b04      	cmp	r3, #4
 8004684:	d105      	bne.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e04e      	b.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d107      	bne.n	80046b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2210      	movs	r2, #16
 80046a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2204      	movs	r2, #4
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
 80046ae:	e002      	b.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2220      	movs	r2, #32
 80046bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80046ca:	400b      	ands	r3, r1
 80046cc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e022      	b.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fe fde1 	bl	80032b0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10f      	bne.n	8004720 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e007      	b.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d193      	bne.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	fe00e800 	.word	0xfe00e800

0800473c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d068      	beq.n	800483a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2210      	movs	r2, #16
 800476e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004770:	e049      	b.n	8004806 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d045      	beq.n	8004806 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800477a:	f7fe fd99 	bl	80032b0 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d302      	bcc.n	8004790 <I2C_IsErrorOccurred+0x54>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d13a      	bne.n	8004806 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b2:	d121      	bne.n	80047f8 <I2C_IsErrorOccurred+0xbc>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ba:	d01d      	beq.n	80047f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d01a      	beq.n	80047f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047d2:	f7fe fd6d 	bl	80032b0 <HAL_GetTick>
 80047d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d8:	e00e      	b.n	80047f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047da:	f7fe fd69 	bl	80032b0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b19      	cmp	r3, #25
 80047e6:	d907      	bls.n	80047f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f043 0320 	orr.w	r3, r3, #32
 80047ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80047f6:	e006      	b.n	8004806 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b20      	cmp	r3, #32
 8004804:	d1e9      	bne.n	80047da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b20      	cmp	r3, #32
 8004812:	d003      	beq.n	800481c <I2C_IsErrorOccurred+0xe0>
 8004814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0aa      	beq.n	8004772 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800481c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2220      	movs	r2, #32
 800482a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800485c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800487e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f043 0302 	orr.w	r3, r3, #2
 8004896:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80048a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff fde9 	bl	8004488 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <I2C_IsErrorOccurred+0x1bc>)
 80048c2:	400b      	ands	r3, r1
 80048c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80048ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3728      	adds	r7, #40	; 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	fe00e800 	.word	0xfe00e800

080048fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	460b      	mov	r3, r1
 8004908:	817b      	strh	r3, [r7, #10]
 800490a:	4613      	mov	r3, r2
 800490c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800490e:	897b      	ldrh	r3, [r7, #10]
 8004910:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004914:	7a7b      	ldrb	r3, [r7, #9]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800491c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	4313      	orrs	r3, r2
 8004926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800492a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	0d5b      	lsrs	r3, r3, #21
 8004936:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <I2C_TransferConfig+0x60>)
 800493c:	430b      	orrs	r3, r1
 800493e:	43db      	mvns	r3, r3
 8004940:	ea02 0103 	and.w	r1, r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	03ff63ff 	.word	0x03ff63ff

08004960 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b20      	cmp	r3, #32
 8004974:	d138      	bne.n	80049e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004980:	2302      	movs	r3, #2
 8004982:	e032      	b.n	80049ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2224      	movs	r2, #36	; 0x24
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6819      	ldr	r1, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d139      	bne.n	8004a80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e033      	b.n	8004a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2224      	movs	r2, #36	; 0x24
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004abe:	f7fe fbf7 	bl	80032b0 <HAL_GetTick>
 8004ac2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ac4:	e009      	b.n	8004ada <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ac6:	f7fe fbf3 	bl	80032b0 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ad4:	d901      	bls.n	8004ada <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e022      	b.n	8004b20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae6:	d1ee      	bne.n	8004ac6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004af4:	f7fe fbdc 	bl	80032b0 <HAL_GetTick>
 8004af8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004afa:	e009      	b.n	8004b10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004afc:	f7fe fbd8 	bl	80032b0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0a:	d901      	bls.n	8004b10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e007      	b.n	8004b20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b1c:	d1ee      	bne.n	8004afc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e291      	b.n	800506a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8087 	beq.w	8004c62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b54:	4b96      	ldr	r3, [pc, #600]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d00c      	beq.n	8004b7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b60:	4b93      	ldr	r3, [pc, #588]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d112      	bne.n	8004b92 <HAL_RCC_OscConfig+0x62>
 8004b6c:	4b90      	ldr	r3, [pc, #576]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b78:	d10b      	bne.n	8004b92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7a:	4b8d      	ldr	r3, [pc, #564]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x130>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d168      	bne.n	8004c60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e26b      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x7a>
 8004b9c:	4b84      	ldr	r3, [pc, #528]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a83      	ldr	r2, [pc, #524]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e02e      	b.n	8004c08 <HAL_RCC_OscConfig+0xd8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x9c>
 8004bb2:	4b7f      	ldr	r3, [pc, #508]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7e      	ldr	r2, [pc, #504]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b7c      	ldr	r3, [pc, #496]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7b      	ldr	r2, [pc, #492]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xd8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0xc0>
 8004bd6:	4b76      	ldr	r3, [pc, #472]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a75      	ldr	r2, [pc, #468]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b73      	ldr	r3, [pc, #460]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a72      	ldr	r2, [pc, #456]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0xd8>
 8004bf0:	4b6f      	ldr	r3, [pc, #444]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6e      	ldr	r2, [pc, #440]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a6b      	ldr	r2, [pc, #428]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fe fb4e 	bl	80032b0 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fe fb4a 	bl	80032b0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e21f      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0xe8>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fe fb3a 	bl	80032b0 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fe fb36 	bl	80032b0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e20b      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x110>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d069      	beq.n	8004d42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6e:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7a:	4b4d      	ldr	r3, [pc, #308]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x190>
 8004c86:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x17a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e1df      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	493d      	ldr	r1, [pc, #244]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	e040      	b.n	8004d42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d023      	beq.n	8004d10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe faec 	bl	80032b0 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fae8 	bl	80032b0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e1bd      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfa:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4929      	ldr	r1, [pc, #164]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
 8004d0e:	e018      	b.n	8004d42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d10:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a26      	ldr	r2, [pc, #152]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fac8 	bl	80032b0 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d24:	f7fe fac4 	bl	80032b0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e199      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d36:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d038      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d019      	beq.n	8004d8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d56:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5a:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d62:	f7fe faa5 	bl	80032b0 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6a:	f7fe faa1 	bl	80032b0 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e176      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCC_OscConfig+0x23a>
 8004d88:	e01a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <HAL_RCC_OscConfig+0x280>)
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fe fa8b 	bl	80032b0 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7fe fa87 	bl	80032b0 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d903      	bls.n	8004db4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e15c      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
 8004db0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	4b91      	ldr	r3, [pc, #580]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ee      	bne.n	8004d9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80a4 	beq.w	8004f16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dce:	4b8b      	ldr	r3, [pc, #556]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10d      	bne.n	8004df6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	4b88      	ldr	r3, [pc, #544]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a87      	ldr	r2, [pc, #540]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
 8004de6:	4b85      	ldr	r3, [pc, #532]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df6:	4b82      	ldr	r3, [pc, #520]	; (8005000 <HAL_RCC_OscConfig+0x4d0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d118      	bne.n	8004e34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e02:	4b7f      	ldr	r3, [pc, #508]	; (8005000 <HAL_RCC_OscConfig+0x4d0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7e      	ldr	r2, [pc, #504]	; (8005000 <HAL_RCC_OscConfig+0x4d0>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0e:	f7fe fa4f 	bl	80032b0 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e16:	f7fe fa4b 	bl	80032b0 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b64      	cmp	r3, #100	; 0x64
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e120      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e28:	4b75      	ldr	r3, [pc, #468]	; (8005000 <HAL_RCC_OscConfig+0x4d0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCC_OscConfig+0x31a>
 8004e3c:	4b6f      	ldr	r3, [pc, #444]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	4a6e      	ldr	r2, [pc, #440]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	6713      	str	r3, [r2, #112]	; 0x70
 8004e48:	e02d      	b.n	8004ea6 <HAL_RCC_OscConfig+0x376>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x33c>
 8004e52:	4b6a      	ldr	r3, [pc, #424]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	4a69      	ldr	r2, [pc, #420]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5e:	4b67      	ldr	r3, [pc, #412]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	4a66      	ldr	r2, [pc, #408]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e64:	f023 0304 	bic.w	r3, r3, #4
 8004e68:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6a:	e01c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x376>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	d10c      	bne.n	8004e8e <HAL_RCC_OscConfig+0x35e>
 8004e74:	4b61      	ldr	r3, [pc, #388]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	4a60      	ldr	r2, [pc, #384]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e80:	4b5e      	ldr	r3, [pc, #376]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	4a5d      	ldr	r2, [pc, #372]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8c:	e00b      	b.n	8004ea6 <HAL_RCC_OscConfig+0x376>
 8004e8e:	4b5b      	ldr	r3, [pc, #364]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a5a      	ldr	r2, [pc, #360]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	4b58      	ldr	r3, [pc, #352]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004ea0:	f023 0304 	bic.w	r3, r3, #4
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d015      	beq.n	8004eda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fe f9ff 	bl	80032b0 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fe f9fb 	bl	80032b0 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0ce      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ecc:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ee      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x386>
 8004ed8:	e014      	b.n	8004f04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fe f9e9 	bl	80032b0 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fe f9e5 	bl	80032b0 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0b8      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef8:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ee      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d105      	bne.n	8004f16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0a:	4b3c      	ldr	r3, [pc, #240]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a3b      	ldr	r2, [pc, #236]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80a4 	beq.w	8005068 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f20:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d06b      	beq.n	8005004 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d149      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f34:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a30      	ldr	r2, [pc, #192]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fe f9b6 	bl	80032b0 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fe f9b2 	bl	80032b0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e087      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fe f986 	bl	80032b0 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fe f982 	bl	80032b0 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e057      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x478>
 8004fc6:	e04f      	b.n	8005068 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fe f96c 	bl	80032b0 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fe f968 	bl	80032b0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e03d      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_RCC_OscConfig+0x4cc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4ac>
 8004ffa:	e035      	b.n	8005068 <HAL_RCC_OscConfig+0x538>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x544>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d028      	beq.n	8005064 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d121      	bne.n	8005064 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d11a      	bne.n	8005064 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800503c:	4293      	cmp	r3, r2
 800503e:	d111      	bne.n	8005064 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	3b01      	subs	r3, #1
 800504e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d107      	bne.n	8005064 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800

08005078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0d0      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005090:	4b6a      	ldr	r3, [pc, #424]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d910      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b67      	ldr	r3, [pc, #412]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 020f 	bic.w	r2, r3, #15
 80050a6:	4965      	ldr	r1, [pc, #404]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b63      	ldr	r3, [pc, #396]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0b8      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d020      	beq.n	800510e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d8:	4b59      	ldr	r3, [pc, #356]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a58      	ldr	r2, [pc, #352]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80050de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f0:	4b53      	ldr	r3, [pc, #332]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a52      	ldr	r2, [pc, #328]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80050f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b50      	ldr	r3, [pc, #320]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	494d      	ldr	r1, [pc, #308]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d040      	beq.n	800519c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b47      	ldr	r3, [pc, #284]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d115      	bne.n	800515a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e07f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	4b41      	ldr	r3, [pc, #260]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e073      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514a:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e06b      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4936      	ldr	r1, [pc, #216]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516c:	f7fe f8a0 	bl	80032b0 <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fe f89c 	bl	80032b0 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e053      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 020c 	and.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	429a      	cmp	r2, r3
 800519a:	d1eb      	bne.n	8005174 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800519c:	4b27      	ldr	r3, [pc, #156]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d210      	bcs.n	80051cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 020f 	bic.w	r2, r3, #15
 80051b2:	4922      	ldr	r1, [pc, #136]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b20      	ldr	r3, [pc, #128]	; (800523c <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e032      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d8:	4b19      	ldr	r3, [pc, #100]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4916      	ldr	r1, [pc, #88]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	490e      	ldr	r1, [pc, #56]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800520a:	f000 f821 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	490a      	ldr	r1, [pc, #40]	; (8005244 <HAL_RCC_ClockConfig+0x1cc>)
 800521c:	5ccb      	ldrb	r3, [r1, r3]
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	4a09      	ldr	r2, [pc, #36]	; (8005248 <HAL_RCC_ClockConfig+0x1d0>)
 8005224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_ClockConfig+0x1d4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fd fe88 	bl	8002f40 <HAL_InitTick>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023c00 	.word	0x40023c00
 8005240:	40023800 	.word	0x40023800
 8005244:	0800c2cc 	.word	0x0800c2cc
 8005248:	20000008 	.word	0x20000008
 800524c:	2000000c 	.word	0x2000000c

08005250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005254:	b094      	sub	sp, #80	; 0x50
 8005256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	647b      	str	r3, [r7, #68]	; 0x44
 800525c:	2300      	movs	r3, #0
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005260:	2300      	movs	r3, #0
 8005262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005268:	4b79      	ldr	r3, [pc, #484]	; (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b08      	cmp	r3, #8
 8005272:	d00d      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x40>
 8005274:	2b08      	cmp	r3, #8
 8005276:	f200 80e1 	bhi.w	800543c <HAL_RCC_GetSysClockFreq+0x1ec>
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x34>
 800527e:	2b04      	cmp	r3, #4
 8005280:	d003      	beq.n	800528a <HAL_RCC_GetSysClockFreq+0x3a>
 8005282:	e0db      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005284:	4b73      	ldr	r3, [pc, #460]	; (8005454 <HAL_RCC_GetSysClockFreq+0x204>)
 8005286:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005288:	e0db      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800528a:	4b73      	ldr	r3, [pc, #460]	; (8005458 <HAL_RCC_GetSysClockFreq+0x208>)
 800528c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800528e:	e0d8      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005290:	4b6f      	ldr	r3, [pc, #444]	; (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800529a:	4b6d      	ldr	r3, [pc, #436]	; (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d063      	beq.n	800536e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a6:	4b6a      	ldr	r3, [pc, #424]	; (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	099b      	lsrs	r3, r3, #6
 80052ac:	2200      	movs	r2, #0
 80052ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ba:	2300      	movs	r3, #0
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
 80052be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	f04f 0000 	mov.w	r0, #0
 80052ca:	f04f 0100 	mov.w	r1, #0
 80052ce:	0159      	lsls	r1, r3, #5
 80052d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d4:	0150      	lsls	r0, r2, #5
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4621      	mov	r1, r4
 80052dc:	1a51      	subs	r1, r2, r1
 80052de:	6139      	str	r1, [r7, #16]
 80052e0:	4629      	mov	r1, r5
 80052e2:	eb63 0301 	sbc.w	r3, r3, r1
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052f4:	4659      	mov	r1, fp
 80052f6:	018b      	lsls	r3, r1, #6
 80052f8:	4651      	mov	r1, sl
 80052fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052fe:	4651      	mov	r1, sl
 8005300:	018a      	lsls	r2, r1, #6
 8005302:	4651      	mov	r1, sl
 8005304:	ebb2 0801 	subs.w	r8, r2, r1
 8005308:	4659      	mov	r1, fp
 800530a:	eb63 0901 	sbc.w	r9, r3, r1
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800531a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005322:	4690      	mov	r8, r2
 8005324:	4699      	mov	r9, r3
 8005326:	4623      	mov	r3, r4
 8005328:	eb18 0303 	adds.w	r3, r8, r3
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	462b      	mov	r3, r5
 8005330:	eb49 0303 	adc.w	r3, r9, r3
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005342:	4629      	mov	r1, r5
 8005344:	024b      	lsls	r3, r1, #9
 8005346:	4621      	mov	r1, r4
 8005348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800534c:	4621      	mov	r1, r4
 800534e:	024a      	lsls	r2, r1, #9
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005356:	2200      	movs	r2, #0
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
 800535a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800535c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005360:	f7fb fc2c 	bl	8000bbc <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536c:	e058      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536e:	4b38      	ldr	r3, [pc, #224]	; (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	099b      	lsrs	r3, r3, #6
 8005374:	2200      	movs	r2, #0
 8005376:	4618      	mov	r0, r3
 8005378:	4611      	mov	r1, r2
 800537a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800537e:	623b      	str	r3, [r7, #32]
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	f04f 0000 	mov.w	r0, #0
 8005390:	f04f 0100 	mov.w	r1, #0
 8005394:	0159      	lsls	r1, r3, #5
 8005396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800539a:	0150      	lsls	r0, r2, #5
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4641      	mov	r1, r8
 80053a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80053a6:	4649      	mov	r1, r9
 80053a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053c0:	ebb2 040a 	subs.w	r4, r2, sl
 80053c4:	eb63 050b 	sbc.w	r5, r3, fp
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	00eb      	lsls	r3, r5, #3
 80053d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053d6:	00e2      	lsls	r2, r4, #3
 80053d8:	4614      	mov	r4, r2
 80053da:	461d      	mov	r5, r3
 80053dc:	4643      	mov	r3, r8
 80053de:	18e3      	adds	r3, r4, r3
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	464b      	mov	r3, r9
 80053e4:	eb45 0303 	adc.w	r3, r5, r3
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053f6:	4629      	mov	r1, r5
 80053f8:	028b      	lsls	r3, r1, #10
 80053fa:	4621      	mov	r1, r4
 80053fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005400:	4621      	mov	r1, r4
 8005402:	028a      	lsls	r2, r1, #10
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540a:	2200      	movs	r2, #0
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	61fa      	str	r2, [r7, #28]
 8005410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005414:	f7fb fbd2 	bl	8000bbc <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4613      	mov	r3, r2
 800541e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_RCC_GetSysClockFreq+0x200>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	3301      	adds	r3, #1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800543a:	e002      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RCC_GetSysClockFreq+0x204>)
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005444:	4618      	mov	r0, r3
 8005446:	3750      	adds	r7, #80	; 0x50
 8005448:	46bd      	mov	sp, r7
 800544a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800
 8005454:	00f42400 	.word	0x00f42400
 8005458:	007a1200 	.word	0x007a1200

0800545c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <HAL_RCC_GetHCLKFreq+0x14>)
 8005462:	681b      	ldr	r3, [r3, #0]
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000008 	.word	0x20000008

08005474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005478:	f7ff fff0 	bl	800545c <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0a9b      	lsrs	r3, r3, #10
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	; (8005498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	0800c2dc 	.word	0x0800c2dc

0800549c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054a0:	f7ff ffdc 	bl	800545c <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0b5b      	lsrs	r3, r3, #13
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4903      	ldr	r1, [pc, #12]	; (80054c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40023800 	.word	0x40023800
 80054c0:	0800c2dc 	.word	0x0800c2dc

080054c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	220f      	movs	r2, #15
 80054d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <HAL_RCC_GetClockConfig+0x5c>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0203 	and.w	r2, r3, #3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <HAL_RCC_GetClockConfig+0x5c>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054ec:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <HAL_RCC_GetClockConfig+0x5c>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_GetClockConfig+0x5c>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	08db      	lsrs	r3, r3, #3
 80054fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <HAL_RCC_GetClockConfig+0x60>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 020f 	and.w	r2, r3, #15
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	40023c00 	.word	0x40023c00

08005528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d012      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005550:	4b69      	ldr	r3, [pc, #420]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4a68      	ldr	r2, [pc, #416]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005556:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800555a:	6093      	str	r3, [r2, #8]
 800555c:	4b66      	ldr	r3, [pc, #408]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005564:	4964      	ldr	r1, [pc, #400]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005572:	2301      	movs	r3, #1
 8005574:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d017      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005582:	4b5d      	ldr	r3, [pc, #372]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005590:	4959      	ldr	r1, [pc, #356]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a0:	d101      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d017      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055be:	4b4e      	ldr	r3, [pc, #312]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	494a      	ldr	r1, [pc, #296]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80055ea:	2301      	movs	r3, #1
 80055ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80055fa:	2301      	movs	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 808b 	beq.w	8005722 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800560c:	4b3a      	ldr	r3, [pc, #232]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	4a39      	ldr	r2, [pc, #228]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005616:	6413      	str	r3, [r2, #64]	; 0x40
 8005618:	4b37      	ldr	r3, [pc, #220]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005624:	4b35      	ldr	r3, [pc, #212]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800562a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005630:	f7fd fe3e 	bl	80032b0 <HAL_GetTick>
 8005634:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005636:	e008      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005638:	f7fd fe3a 	bl	80032b0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b64      	cmp	r3, #100	; 0x64
 8005644:	d901      	bls.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e357      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800564a:	4b2c      	ldr	r3, [pc, #176]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005656:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d035      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d02e      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005674:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800567e:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800568a:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005694:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800569c:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d114      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd fe02 	bl	80032b0 <HAL_GetTick>
 80056ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ae:	e00a      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fd fdfe 	bl	80032b0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e319      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0ee      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056de:	d111      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056ee:	400b      	ands	r3, r1
 80056f0:	4901      	ldr	r1, [pc, #4]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	608b      	str	r3, [r1, #8]
 80056f6:	e00b      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80056f8:	40023800 	.word	0x40023800
 80056fc:	40007000 	.word	0x40007000
 8005700:	0ffffcff 	.word	0x0ffffcff
 8005704:	4baa      	ldr	r3, [pc, #680]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4aa9      	ldr	r2, [pc, #676]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800570a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800570e:	6093      	str	r3, [r2, #8]
 8005710:	4ba7      	ldr	r3, [pc, #668]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800571c:	49a4      	ldr	r1, [pc, #656]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571e:	4313      	orrs	r3, r2
 8005720:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	d010      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800572e:	4ba0      	ldr	r3, [pc, #640]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005734:	4a9e      	ldr	r2, [pc, #632]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800573a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800573e:	4b9c      	ldr	r3, [pc, #624]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005740:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	4999      	ldr	r1, [pc, #612]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800575c:	4b94      	ldr	r3, [pc, #592]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576a:	4991      	ldr	r1, [pc, #580]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800577e:	4b8c      	ldr	r3, [pc, #560]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800578c:	4988      	ldr	r1, [pc, #544]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057a0:	4b83      	ldr	r3, [pc, #524]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ae:	4980      	ldr	r1, [pc, #512]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057c2:	4b7b      	ldr	r3, [pc, #492]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4977      	ldr	r1, [pc, #476]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057e4:	4b72      	ldr	r3, [pc, #456]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	496f      	ldr	r1, [pc, #444]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005806:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f023 020c 	bic.w	r2, r3, #12
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005814:	4966      	ldr	r1, [pc, #408]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005828:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005836:	495e      	ldr	r1, [pc, #376]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800584a:	4b59      	ldr	r3, [pc, #356]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005850:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005858:	4955      	ldr	r1, [pc, #340]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800586c:	4b50      	ldr	r3, [pc, #320]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	494d      	ldr	r1, [pc, #308]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800588e:	4b48      	ldr	r3, [pc, #288]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589c:	4944      	ldr	r1, [pc, #272]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058b0:	4b3f      	ldr	r3, [pc, #252]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	493c      	ldr	r1, [pc, #240]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058d2:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e0:	4933      	ldr	r1, [pc, #204]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058f4:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005902:	492b      	ldr	r1, [pc, #172]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005916:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005924:	4922      	ldr	r1, [pc, #136]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005934:	d101      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005936:	2301      	movs	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005946:	2301      	movs	r3, #1
 8005948:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005956:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005964:	4912      	ldr	r1, [pc, #72]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005988:	4909      	ldr	r1, [pc, #36]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d006      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80d9 	beq.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059a4:	4b02      	ldr	r3, [pc, #8]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a01      	ldr	r2, [pc, #4]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ae:	e001      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80059b0:	40023800 	.word	0x40023800
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fd fc7b 	bl	80032b0 <HAL_GetTick>
 80059ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059bc:	e008      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059be:	f7fd fc77 	bl	80032b0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b64      	cmp	r3, #100	; 0x64
 80059ca:	d901      	bls.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e194      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059d0:	4b6c      	ldr	r3, [pc, #432]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f0      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d021      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11d      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059f0:	4b64      	ldr	r3, [pc, #400]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059fe:	4b61      	ldr	r3, [pc, #388]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a04:	0e1b      	lsrs	r3, r3, #24
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	019a      	lsls	r2, r3, #6
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	431a      	orrs	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	071b      	lsls	r3, r3, #28
 8005a24:	4957      	ldr	r1, [pc, #348]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d02e      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a56:	d129      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a58:	4b4a      	ldr	r3, [pc, #296]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5e:	0c1b      	lsrs	r3, r3, #16
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a66:	4b47      	ldr	r3, [pc, #284]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6c:	0f1b      	lsrs	r3, r3, #28
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	019a      	lsls	r2, r3, #6
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	061b      	lsls	r3, r3, #24
 8005a86:	431a      	orrs	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	071b      	lsls	r3, r3, #28
 8005a8c:	493d      	ldr	r1, [pc, #244]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a94:	4b3b      	ldr	r3, [pc, #236]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a9a:	f023 021f 	bic.w	r2, r3, #31
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	4937      	ldr	r1, [pc, #220]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01d      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ab8:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ac6:	4b2f      	ldr	r3, [pc, #188]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005acc:	0f1b      	lsrs	r3, r3, #28
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	019a      	lsls	r2, r3, #6
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	041b      	lsls	r3, r3, #16
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	071b      	lsls	r3, r3, #28
 8005aec:	4925      	ldr	r1, [pc, #148]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d011      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	019a      	lsls	r2, r3, #6
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	061b      	lsls	r3, r3, #24
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	071b      	lsls	r3, r3, #28
 8005b1c:	4919      	ldr	r1, [pc, #100]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b24:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a16      	ldr	r2, [pc, #88]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b30:	f7fd fbbe 	bl	80032b0 <HAL_GetTick>
 8005b34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b38:	f7fd fbba 	bl	80032b0 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b64      	cmp	r3, #100	; 0x64
 8005b44:	d901      	bls.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e0d7      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 80cd 	bne.w	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6a:	f7fd fba1 	bl	80032b0 <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b70:	e00a      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b72:	f7fd fb9d 	bl	80032b0 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b64      	cmp	r3, #100	; 0x64
 8005b7e:	d903      	bls.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0ba      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005b84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b88:	4b5e      	ldr	r3, [pc, #376]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b94:	d0ed      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d009      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02e      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d12a      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bbe:	4b51      	ldr	r3, [pc, #324]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bcc:	4b4d      	ldr	r3, [pc, #308]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	0f1b      	lsrs	r3, r3, #28
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	019a      	lsls	r2, r3, #6
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	041b      	lsls	r3, r3, #16
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	061b      	lsls	r3, r3, #24
 8005bec:	431a      	orrs	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	071b      	lsls	r3, r3, #28
 8005bf2:	4944      	ldr	r1, [pc, #272]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005bfa:	4b42      	ldr	r3, [pc, #264]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	493d      	ldr	r1, [pc, #244]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d022      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c28:	d11d      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c2a:	4b36      	ldr	r3, [pc, #216]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c30:	0e1b      	lsrs	r3, r3, #24
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c38:	4b32      	ldr	r3, [pc, #200]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	0f1b      	lsrs	r3, r3, #28
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	019a      	lsls	r2, r3, #6
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	431a      	orrs	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	071b      	lsls	r3, r3, #28
 8005c5e:	4929      	ldr	r1, [pc, #164]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d028      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c72:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	0e1b      	lsrs	r3, r3, #24
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c80:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	019a      	lsls	r2, r3, #6
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	061b      	lsls	r3, r3, #24
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	071b      	lsls	r3, r3, #28
 8005ca6:	4917      	ldr	r1, [pc, #92]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4911      	ldr	r1, [pc, #68]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a0e      	ldr	r2, [pc, #56]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fd faee 	bl	80032b0 <HAL_GetTick>
 8005cd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cd8:	f7fd faea 	bl	80032b0 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	; 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e007      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf6:	d1ef      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40023800 	.word	0x40023800

08005d08 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e01c      	b.n	8005d54 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	795b      	ldrb	r3, [r3, #5]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fd f814 	bl	8002d58 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0204 	orr.w	r2, r2, #4
 8005d44:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e049      	b.n	8005e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f841 	bl	8005e0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f000 fa00 	bl	80061a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d001      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e054      	b.n	8005ee2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e62:	d01d      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a22      	ldr	r2, [pc, #136]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a21      	ldr	r2, [pc, #132]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <HAL_TIM_Base_Start_IT+0xdc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1e      	ldr	r2, [pc, #120]	; (8005f00 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1c      	ldr	r2, [pc, #112]	; (8005f04 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIM_Base_Start_IT+0x80>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d115      	bne.n	8005ecc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <HAL_TIM_Base_Start_IT+0xec>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b06      	cmp	r3, #6
 8005eb0:	d015      	beq.n	8005ede <HAL_TIM_Base_Start_IT+0xbe>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	d011      	beq.n	8005ede <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eca:	e008      	b.n	8005ede <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e000      	b.n	8005ee0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800
 8005f0c:	00010007 	.word	0x00010007

08005f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0202 	mvn.w	r2, #2
 8005f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f905 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f8f7 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f908 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0204 	mvn.w	r2, #4
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f8db 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8cd 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8de 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0208 	mvn.w	r2, #8
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8b1 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8a3 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f8b4 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b10      	cmp	r3, #16
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b10      	cmp	r3, #16
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0210 	mvn.w	r2, #16
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2208      	movs	r2, #8
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f887 	bl	8006162 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f879 	bl	800614e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f88a 	bl	8006176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10e      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0201 	mvn.w	r2, #1
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fb f934 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b80      	cmp	r3, #128	; 0x80
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f91a 	bl	80062f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ce:	d10e      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d107      	bne.n	80060ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f90d 	bl	8006308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d10e      	bne.n	800611a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d107      	bne.n	800611a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f838 	bl	800618a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b20      	cmp	r3, #32
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b20      	cmp	r3, #32
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0220 	mvn.w	r2, #32
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f8cd 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a40      	ldr	r2, [pc, #256]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d00f      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a3d      	ldr	r2, [pc, #244]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00b      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a3c      	ldr	r2, [pc, #240]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3b      	ldr	r2, [pc, #236]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3a      	ldr	r2, [pc, #232]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d108      	bne.n	80061f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d02b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006200:	d027      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2c      	ldr	r2, [pc, #176]	; (80062b8 <TIM_Base_SetConfig+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d023      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2b      	ldr	r2, [pc, #172]	; (80062bc <TIM_Base_SetConfig+0x11c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <TIM_Base_SetConfig+0x120>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d017      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <TIM_Base_SetConfig+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a27      	ldr	r2, [pc, #156]	; (80062cc <TIM_Base_SetConfig+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00f      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a26      	ldr	r2, [pc, #152]	; (80062d0 <TIM_Base_SetConfig+0x130>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <TIM_Base_SetConfig+0x134>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <TIM_Base_SetConfig+0x138>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a23      	ldr	r2, [pc, #140]	; (80062dc <TIM_Base_SetConfig+0x13c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d108      	bne.n	8006264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <TIM_Base_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d003      	beq.n	8006298 <TIM_Base_SetConfig+0xf8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0c      	ldr	r2, [pc, #48]	; (80062c4 <TIM_Base_SetConfig+0x124>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	40001800 	.word	0x40001800
 80062d8:	40001c00 	.word	0x40001c00
 80062dc:	40002000 	.word	0x40002000

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e040      	b.n	80063b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fc fd3e 	bl	8002dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	; 0x24
 8006348:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8b0 	bl	80064c0 <UART_SetConfig>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e022      	b.n	80063b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fb08 	bl	8006988 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb8f 	bl	8006acc <UART_CheckIdleState>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d171      	bne.n	80064b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_UART_Transmit+0x24>
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e06a      	b.n	80064b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2221      	movs	r2, #33	; 0x21
 80063ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fc ff5f 	bl	80032b0 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d108      	bne.n	8006420 <HAL_UART_Transmit+0x68>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e003      	b.n	8006428 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006428:	e02c      	b.n	8006484 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2200      	movs	r2, #0
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fb80 	bl	8006b3a <UART_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e038      	b.n	80064b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006458:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	3302      	adds	r3, #2
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	e007      	b.n	8006472 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	781a      	ldrb	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1cc      	bne.n	800642a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2200      	movs	r2, #0
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fb4d 	bl	8006b3a <UART_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e005      	b.n	80064b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4ba6      	ldr	r3, [pc, #664]	; (8006784 <UART_SetConfig+0x2c4>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	430b      	orrs	r3, r1
 80064f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	430a      	orrs	r2, r1
 8006530:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a94      	ldr	r2, [pc, #592]	; (8006788 <UART_SetConfig+0x2c8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d120      	bne.n	800657e <UART_SetConfig+0xbe>
 800653c:	4b93      	ldr	r3, [pc, #588]	; (800678c <UART_SetConfig+0x2cc>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b03      	cmp	r3, #3
 8006548:	d816      	bhi.n	8006578 <UART_SetConfig+0xb8>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <UART_SetConfig+0x90>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006561 	.word	0x08006561
 8006554:	0800656d 	.word	0x0800656d
 8006558:	08006567 	.word	0x08006567
 800655c:	08006573 	.word	0x08006573
 8006560:	2301      	movs	r3, #1
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e150      	b.n	8006808 <UART_SetConfig+0x348>
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e14d      	b.n	8006808 <UART_SetConfig+0x348>
 800656c:	2304      	movs	r3, #4
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e14a      	b.n	8006808 <UART_SetConfig+0x348>
 8006572:	2308      	movs	r3, #8
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e147      	b.n	8006808 <UART_SetConfig+0x348>
 8006578:	2310      	movs	r3, #16
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e144      	b.n	8006808 <UART_SetConfig+0x348>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a83      	ldr	r2, [pc, #524]	; (8006790 <UART_SetConfig+0x2d0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d132      	bne.n	80065ee <UART_SetConfig+0x12e>
 8006588:	4b80      	ldr	r3, [pc, #512]	; (800678c <UART_SetConfig+0x2cc>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b0c      	cmp	r3, #12
 8006594:	d828      	bhi.n	80065e8 <UART_SetConfig+0x128>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0xdc>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065d1 	.word	0x080065d1
 80065a0:	080065e9 	.word	0x080065e9
 80065a4:	080065e9 	.word	0x080065e9
 80065a8:	080065e9 	.word	0x080065e9
 80065ac:	080065dd 	.word	0x080065dd
 80065b0:	080065e9 	.word	0x080065e9
 80065b4:	080065e9 	.word	0x080065e9
 80065b8:	080065e9 	.word	0x080065e9
 80065bc:	080065d7 	.word	0x080065d7
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065e9 	.word	0x080065e9
 80065cc:	080065e3 	.word	0x080065e3
 80065d0:	2300      	movs	r3, #0
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e118      	b.n	8006808 <UART_SetConfig+0x348>
 80065d6:	2302      	movs	r3, #2
 80065d8:	77fb      	strb	r3, [r7, #31]
 80065da:	e115      	b.n	8006808 <UART_SetConfig+0x348>
 80065dc:	2304      	movs	r3, #4
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e112      	b.n	8006808 <UART_SetConfig+0x348>
 80065e2:	2308      	movs	r3, #8
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e10f      	b.n	8006808 <UART_SetConfig+0x348>
 80065e8:	2310      	movs	r3, #16
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e10c      	b.n	8006808 <UART_SetConfig+0x348>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a68      	ldr	r2, [pc, #416]	; (8006794 <UART_SetConfig+0x2d4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d120      	bne.n	800663a <UART_SetConfig+0x17a>
 80065f8:	4b64      	ldr	r3, [pc, #400]	; (800678c <UART_SetConfig+0x2cc>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006602:	2b30      	cmp	r3, #48	; 0x30
 8006604:	d013      	beq.n	800662e <UART_SetConfig+0x16e>
 8006606:	2b30      	cmp	r3, #48	; 0x30
 8006608:	d814      	bhi.n	8006634 <UART_SetConfig+0x174>
 800660a:	2b20      	cmp	r3, #32
 800660c:	d009      	beq.n	8006622 <UART_SetConfig+0x162>
 800660e:	2b20      	cmp	r3, #32
 8006610:	d810      	bhi.n	8006634 <UART_SetConfig+0x174>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <UART_SetConfig+0x15c>
 8006616:	2b10      	cmp	r3, #16
 8006618:	d006      	beq.n	8006628 <UART_SetConfig+0x168>
 800661a:	e00b      	b.n	8006634 <UART_SetConfig+0x174>
 800661c:	2300      	movs	r3, #0
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e0f2      	b.n	8006808 <UART_SetConfig+0x348>
 8006622:	2302      	movs	r3, #2
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e0ef      	b.n	8006808 <UART_SetConfig+0x348>
 8006628:	2304      	movs	r3, #4
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e0ec      	b.n	8006808 <UART_SetConfig+0x348>
 800662e:	2308      	movs	r3, #8
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e0e9      	b.n	8006808 <UART_SetConfig+0x348>
 8006634:	2310      	movs	r3, #16
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e0e6      	b.n	8006808 <UART_SetConfig+0x348>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a56      	ldr	r2, [pc, #344]	; (8006798 <UART_SetConfig+0x2d8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d120      	bne.n	8006686 <UART_SetConfig+0x1c6>
 8006644:	4b51      	ldr	r3, [pc, #324]	; (800678c <UART_SetConfig+0x2cc>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800664e:	2bc0      	cmp	r3, #192	; 0xc0
 8006650:	d013      	beq.n	800667a <UART_SetConfig+0x1ba>
 8006652:	2bc0      	cmp	r3, #192	; 0xc0
 8006654:	d814      	bhi.n	8006680 <UART_SetConfig+0x1c0>
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d009      	beq.n	800666e <UART_SetConfig+0x1ae>
 800665a:	2b80      	cmp	r3, #128	; 0x80
 800665c:	d810      	bhi.n	8006680 <UART_SetConfig+0x1c0>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <UART_SetConfig+0x1a8>
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d006      	beq.n	8006674 <UART_SetConfig+0x1b4>
 8006666:	e00b      	b.n	8006680 <UART_SetConfig+0x1c0>
 8006668:	2300      	movs	r3, #0
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e0cc      	b.n	8006808 <UART_SetConfig+0x348>
 800666e:	2302      	movs	r3, #2
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e0c9      	b.n	8006808 <UART_SetConfig+0x348>
 8006674:	2304      	movs	r3, #4
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e0c6      	b.n	8006808 <UART_SetConfig+0x348>
 800667a:	2308      	movs	r3, #8
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e0c3      	b.n	8006808 <UART_SetConfig+0x348>
 8006680:	2310      	movs	r3, #16
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e0c0      	b.n	8006808 <UART_SetConfig+0x348>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a44      	ldr	r2, [pc, #272]	; (800679c <UART_SetConfig+0x2dc>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d125      	bne.n	80066dc <UART_SetConfig+0x21c>
 8006690:	4b3e      	ldr	r3, [pc, #248]	; (800678c <UART_SetConfig+0x2cc>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669e:	d017      	beq.n	80066d0 <UART_SetConfig+0x210>
 80066a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a4:	d817      	bhi.n	80066d6 <UART_SetConfig+0x216>
 80066a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066aa:	d00b      	beq.n	80066c4 <UART_SetConfig+0x204>
 80066ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b0:	d811      	bhi.n	80066d6 <UART_SetConfig+0x216>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <UART_SetConfig+0x1fe>
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ba:	d006      	beq.n	80066ca <UART_SetConfig+0x20a>
 80066bc:	e00b      	b.n	80066d6 <UART_SetConfig+0x216>
 80066be:	2300      	movs	r3, #0
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e0a1      	b.n	8006808 <UART_SetConfig+0x348>
 80066c4:	2302      	movs	r3, #2
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e09e      	b.n	8006808 <UART_SetConfig+0x348>
 80066ca:	2304      	movs	r3, #4
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e09b      	b.n	8006808 <UART_SetConfig+0x348>
 80066d0:	2308      	movs	r3, #8
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e098      	b.n	8006808 <UART_SetConfig+0x348>
 80066d6:	2310      	movs	r3, #16
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e095      	b.n	8006808 <UART_SetConfig+0x348>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <UART_SetConfig+0x2e0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d125      	bne.n	8006732 <UART_SetConfig+0x272>
 80066e6:	4b29      	ldr	r3, [pc, #164]	; (800678c <UART_SetConfig+0x2cc>)
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f4:	d017      	beq.n	8006726 <UART_SetConfig+0x266>
 80066f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066fa:	d817      	bhi.n	800672c <UART_SetConfig+0x26c>
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006700:	d00b      	beq.n	800671a <UART_SetConfig+0x25a>
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006706:	d811      	bhi.n	800672c <UART_SetConfig+0x26c>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <UART_SetConfig+0x254>
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d006      	beq.n	8006720 <UART_SetConfig+0x260>
 8006712:	e00b      	b.n	800672c <UART_SetConfig+0x26c>
 8006714:	2301      	movs	r3, #1
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e076      	b.n	8006808 <UART_SetConfig+0x348>
 800671a:	2302      	movs	r3, #2
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e073      	b.n	8006808 <UART_SetConfig+0x348>
 8006720:	2304      	movs	r3, #4
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e070      	b.n	8006808 <UART_SetConfig+0x348>
 8006726:	2308      	movs	r3, #8
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e06d      	b.n	8006808 <UART_SetConfig+0x348>
 800672c:	2310      	movs	r3, #16
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e06a      	b.n	8006808 <UART_SetConfig+0x348>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <UART_SetConfig+0x2e4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d138      	bne.n	80067ae <UART_SetConfig+0x2ee>
 800673c:	4b13      	ldr	r3, [pc, #76]	; (800678c <UART_SetConfig+0x2cc>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006742:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006746:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800674a:	d017      	beq.n	800677c <UART_SetConfig+0x2bc>
 800674c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006750:	d82a      	bhi.n	80067a8 <UART_SetConfig+0x2e8>
 8006752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006756:	d00b      	beq.n	8006770 <UART_SetConfig+0x2b0>
 8006758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675c:	d824      	bhi.n	80067a8 <UART_SetConfig+0x2e8>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <UART_SetConfig+0x2aa>
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006766:	d006      	beq.n	8006776 <UART_SetConfig+0x2b6>
 8006768:	e01e      	b.n	80067a8 <UART_SetConfig+0x2e8>
 800676a:	2300      	movs	r3, #0
 800676c:	77fb      	strb	r3, [r7, #31]
 800676e:	e04b      	b.n	8006808 <UART_SetConfig+0x348>
 8006770:	2302      	movs	r3, #2
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e048      	b.n	8006808 <UART_SetConfig+0x348>
 8006776:	2304      	movs	r3, #4
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e045      	b.n	8006808 <UART_SetConfig+0x348>
 800677c:	2308      	movs	r3, #8
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e042      	b.n	8006808 <UART_SetConfig+0x348>
 8006782:	bf00      	nop
 8006784:	efff69f3 	.word	0xefff69f3
 8006788:	40011000 	.word	0x40011000
 800678c:	40023800 	.word	0x40023800
 8006790:	40004400 	.word	0x40004400
 8006794:	40004800 	.word	0x40004800
 8006798:	40004c00 	.word	0x40004c00
 800679c:	40005000 	.word	0x40005000
 80067a0:	40011400 	.word	0x40011400
 80067a4:	40007800 	.word	0x40007800
 80067a8:	2310      	movs	r3, #16
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e02c      	b.n	8006808 <UART_SetConfig+0x348>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a72      	ldr	r2, [pc, #456]	; (800697c <UART_SetConfig+0x4bc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d125      	bne.n	8006804 <UART_SetConfig+0x344>
 80067b8:	4b71      	ldr	r3, [pc, #452]	; (8006980 <UART_SetConfig+0x4c0>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067c6:	d017      	beq.n	80067f8 <UART_SetConfig+0x338>
 80067c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067cc:	d817      	bhi.n	80067fe <UART_SetConfig+0x33e>
 80067ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d2:	d00b      	beq.n	80067ec <UART_SetConfig+0x32c>
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d8:	d811      	bhi.n	80067fe <UART_SetConfig+0x33e>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <UART_SetConfig+0x326>
 80067de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e2:	d006      	beq.n	80067f2 <UART_SetConfig+0x332>
 80067e4:	e00b      	b.n	80067fe <UART_SetConfig+0x33e>
 80067e6:	2300      	movs	r3, #0
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e00d      	b.n	8006808 <UART_SetConfig+0x348>
 80067ec:	2302      	movs	r3, #2
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e00a      	b.n	8006808 <UART_SetConfig+0x348>
 80067f2:	2304      	movs	r3, #4
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e007      	b.n	8006808 <UART_SetConfig+0x348>
 80067f8:	2308      	movs	r3, #8
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e004      	b.n	8006808 <UART_SetConfig+0x348>
 80067fe:	2310      	movs	r3, #16
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e001      	b.n	8006808 <UART_SetConfig+0x348>
 8006804:	2310      	movs	r3, #16
 8006806:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006810:	d15b      	bne.n	80068ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006812:	7ffb      	ldrb	r3, [r7, #31]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d828      	bhi.n	800686a <UART_SetConfig+0x3aa>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <UART_SetConfig+0x360>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	08006845 	.word	0x08006845
 8006824:	0800684d 	.word	0x0800684d
 8006828:	08006855 	.word	0x08006855
 800682c:	0800686b 	.word	0x0800686b
 8006830:	0800685b 	.word	0x0800685b
 8006834:	0800686b 	.word	0x0800686b
 8006838:	0800686b 	.word	0x0800686b
 800683c:	0800686b 	.word	0x0800686b
 8006840:	08006863 	.word	0x08006863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006844:	f7fe fe16 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 8006848:	61b8      	str	r0, [r7, #24]
        break;
 800684a:	e013      	b.n	8006874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800684c:	f7fe fe26 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8006850:	61b8      	str	r0, [r7, #24]
        break;
 8006852:	e00f      	b.n	8006874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006854:	4b4b      	ldr	r3, [pc, #300]	; (8006984 <UART_SetConfig+0x4c4>)
 8006856:	61bb      	str	r3, [r7, #24]
        break;
 8006858:	e00c      	b.n	8006874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685a:	f7fe fcf9 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 800685e:	61b8      	str	r0, [r7, #24]
        break;
 8006860:	e008      	b.n	8006874 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006866:	61bb      	str	r3, [r7, #24]
        break;
 8006868:	e004      	b.n	8006874 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	77bb      	strb	r3, [r7, #30]
        break;
 8006872:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d074      	beq.n	8006964 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	005a      	lsls	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	441a      	add	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	fbb2 f3f3 	udiv	r3, r2, r3
 800688e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	2b0f      	cmp	r3, #15
 8006894:	d916      	bls.n	80068c4 <UART_SetConfig+0x404>
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689c:	d212      	bcs.n	80068c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f023 030f 	bic.w	r3, r3, #15
 80068a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	89fa      	ldrh	r2, [r7, #14]
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	e04f      	b.n	8006964 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	77bb      	strb	r3, [r7, #30]
 80068c8:	e04c      	b.n	8006964 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ca:	7ffb      	ldrb	r3, [r7, #31]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d828      	bhi.n	8006922 <UART_SetConfig+0x462>
 80068d0:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0x418>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	080068fd 	.word	0x080068fd
 80068dc:	08006905 	.word	0x08006905
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	08006923 	.word	0x08006923
 80068e8:	08006913 	.word	0x08006913
 80068ec:	08006923 	.word	0x08006923
 80068f0:	08006923 	.word	0x08006923
 80068f4:	08006923 	.word	0x08006923
 80068f8:	0800691b 	.word	0x0800691b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fe fdba 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 8006900:	61b8      	str	r0, [r7, #24]
        break;
 8006902:	e013      	b.n	800692c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006904:	f7fe fdca 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8006908:	61b8      	str	r0, [r7, #24]
        break;
 800690a:	e00f      	b.n	800692c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800690c:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <UART_SetConfig+0x4c4>)
 800690e:	61bb      	str	r3, [r7, #24]
        break;
 8006910:	e00c      	b.n	800692c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006912:	f7fe fc9d 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 8006916:	61b8      	str	r0, [r7, #24]
        break;
 8006918:	e008      	b.n	800692c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691e:	61bb      	str	r3, [r7, #24]
        break;
 8006920:	e004      	b.n	800692c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	77bb      	strb	r3, [r7, #30]
        break;
 800692a:	bf00      	nop
    }

    if (pclk != 0U)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d018      	beq.n	8006964 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	085a      	lsrs	r2, r3, #1
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	441a      	add	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d909      	bls.n	8006960 <UART_SetConfig+0x4a0>
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006952:	d205      	bcs.n	8006960 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	b29a      	uxth	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60da      	str	r2, [r3, #12]
 800695e:	e001      	b.n	8006964 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006970:	7fbb      	ldrb	r3, [r7, #30]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40007c00 	.word	0x40007c00
 8006980:	40023800 	.word	0x40023800
 8006984:	00f42400 	.word	0x00f42400

08006988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01a      	beq.n	8006a9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a86:	d10a      	bne.n	8006a9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	605a      	str	r2, [r3, #4]
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006adc:	f7fc fbe8 	bl	80032b0 <HAL_GetTick>
 8006ae0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d10e      	bne.n	8006b0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f81b 	bl	8006b3a <UART_WaitOnFlagUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e011      	b.n	8006b32 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b09c      	sub	sp, #112	; 0x70
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4a:	e0a7      	b.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	f000 80a3 	beq.w	8006c9c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b56:	f7fc fbab 	bl	80032b0 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d13f      	bne.n	8006bec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b80:	667b      	str	r3, [r7, #100]	; 0x64
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e6      	bne.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e5      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e068      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d050      	beq.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c08:	d148      	bne.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e6      	bne.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	613b      	str	r3, [r7, #16]
   return(result);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c66:	623a      	str	r2, [r7, #32]
 8006c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	69f9      	ldr	r1, [r7, #28]
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e010      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69da      	ldr	r2, [r3, #28]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	bf0c      	ite	eq
 8006cac:	2301      	moveq	r3, #1
 8006cae:	2300      	movne	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	f43f af48 	beq.w	8006b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3770      	adds	r7, #112	; 0x70
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cc6:	b480      	push	{r7}
 8006cc8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006cca:	bf00      	nop
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cda:	f3ef 8305 	mrs	r3, IPSR
 8006cde:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10f      	bne.n	8006d06 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cea:	607b      	str	r3, [r7, #4]
  return(result);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d105      	bne.n	8006cfe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <osKernelInitialize+0x3a>
 8006cfe:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <osKernelInitialize+0x64>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d103      	bne.n	8006d0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006d06:	f06f 0305 	mvn.w	r3, #5
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e00c      	b.n	8006d28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <osKernelInitialize+0x64>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d105      	bne.n	8006d22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d16:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <osKernelInitialize+0x64>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e002      	b.n	8006d28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295
 8006d26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d28:	68fb      	ldr	r3, [r7, #12]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20001c64 	.word	0x20001c64

08006d3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d42:	f3ef 8305 	mrs	r3, IPSR
 8006d46:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10f      	bne.n	8006d6e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d52:	607b      	str	r3, [r7, #4]
  return(result);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d5e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <osKernelStart+0x3a>
 8006d66:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <osKernelStart+0x68>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d103      	bne.n	8006d76 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006d6e:	f06f 0305 	mvn.w	r3, #5
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	e010      	b.n	8006d98 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <osKernelStart+0x68>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d109      	bne.n	8006d92 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d7e:	f7ff ffa2 	bl	8006cc6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d82:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <osKernelStart+0x68>)
 8006d84:	2202      	movs	r2, #2
 8006d86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d88:	f001 f882 	bl	8007e90 <vTaskStartScheduler>
      stat = osOK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e002      	b.n	8006d98 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006d92:	f04f 33ff 	mov.w	r3, #4294967295
 8006d96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20001c64 	.word	0x20001c64

08006da8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dae:	f3ef 8305 	mrs	r3, IPSR
 8006db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006db4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10f      	bne.n	8006dda <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dba:	f3ef 8310 	mrs	r3, PRIMASK
 8006dbe:	607b      	str	r3, [r7, #4]
  return(result);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d105      	bne.n	8006dd2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dca:	603b      	str	r3, [r7, #0]
  return(result);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <osKernelGetTickCount+0x3a>
 8006dd2:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <osKernelGetTickCount+0x4c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d103      	bne.n	8006de2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006dda:	f001 f981 	bl	80080e0 <xTaskGetTickCountFromISR>
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	e002      	b.n	8006de8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006de2:	f001 f96d 	bl	80080c0 <xTaskGetTickCount>
 8006de6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006de8:	68fb      	ldr	r3, [r7, #12]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20001c64 	.word	0x20001c64

08006df8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8006dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b090      	sub	sp, #64	; 0x40
 8006e10:	af04      	add	r7, sp, #16
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e1c:	f3ef 8305 	mrs	r3, IPSR
 8006e20:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e22:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f040 808f 	bne.w	8006f48 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e36:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3a:	617b      	str	r3, [r7, #20]
  return(result);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <osThreadNew+0x3e>
 8006e42:	4b44      	ldr	r3, [pc, #272]	; (8006f54 <osThreadNew+0x148>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d07e      	beq.n	8006f48 <osThreadNew+0x13c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d07b      	beq.n	8006f48 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006e54:	2318      	movs	r3, #24
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d045      	beq.n	8006ef4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <osThreadNew+0x6a>
        name = attr->name;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <osThreadNew+0x90>
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	2b38      	cmp	r3, #56	; 0x38
 8006e8e:	d805      	bhi.n	8006e9c <osThreadNew+0x90>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <osThreadNew+0x94>
        return (NULL);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e054      	b.n	8006f4a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	089b      	lsrs	r3, r3, #2
 8006eae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00e      	beq.n	8006ed6 <osThreadNew+0xca>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2b5b      	cmp	r3, #91	; 0x5b
 8006ebe:	d90a      	bls.n	8006ed6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d006      	beq.n	8006ed6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <osThreadNew+0xca>
        mem = 1;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	623b      	str	r3, [r7, #32]
 8006ed4:	e010      	b.n	8006ef8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10c      	bne.n	8006ef8 <osThreadNew+0xec>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d108      	bne.n	8006ef8 <osThreadNew+0xec>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <osThreadNew+0xec>
          mem = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	623b      	str	r3, [r7, #32]
 8006ef2:	e001      	b.n	8006ef8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d110      	bne.n	8006f20 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f06:	9202      	str	r2, [sp, #8]
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fe11 	bl	8007b3c <xTaskCreateStatic>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	e013      	b.n	8006f48 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d110      	bne.n	8006f48 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f107 0310 	add.w	r3, r7, #16
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fe62 	bl	8007c02 <xTaskCreate>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d001      	beq.n	8006f48 <osThreadNew+0x13c>
          hTask = NULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f48:	693b      	ldr	r3, [r7, #16]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3730      	adds	r7, #48	; 0x30
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20001c64 	.word	0x20001c64

08006f58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a07      	ldr	r2, [pc, #28]	; (8006f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a06      	ldr	r2, [pc, #24]	; (8006f88 <vApplicationGetIdleTaskMemory+0x30>)
 8006f6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2280      	movs	r2, #128	; 0x80
 8006f74:	601a      	str	r2, [r3, #0]
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20001c68 	.word	0x20001c68
 8006f88:	20001cc4 	.word	0x20001cc4

08006f8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4a06      	ldr	r2, [pc, #24]	; (8006fbc <vApplicationGetTimerTaskMemory+0x30>)
 8006fa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006faa:	601a      	str	r2, [r3, #0]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	20001ec4 	.word	0x20001ec4
 8006fbc:	20001f20 	.word	0x20001f20

08006fc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f103 0208 	add.w	r2, r3, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f103 0208 	add.w	r2, r3, #8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f103 0208 	add.w	r2, r3, #8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007078:	d103      	bne.n	8007082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	e00c      	b.n	800709c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3308      	adds	r3, #8
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e002      	b.n	8007090 <vListInsert+0x2e>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	429a      	cmp	r2, r3
 800709a:	d2f6      	bcs.n	800708a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6892      	ldr	r2, [r2, #8]
 80070ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6852      	ldr	r2, [r2, #4]
 80070f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d103      	bne.n	8007108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	1e5a      	subs	r2, r3, #1
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10c      	bne.n	8007156 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	b672      	cpsid	i
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	b662      	cpsie	i
 8007150:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007156:	f002 f859 	bl	800920c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	441a      	add	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007186:	3b01      	subs	r3, #1
 8007188:	68f9      	ldr	r1, [r7, #12]
 800718a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	441a      	add	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	22ff      	movs	r2, #255	; 0xff
 800719a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	22ff      	movs	r2, #255	; 0xff
 80071a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d114      	bne.n	80071d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01a      	beq.n	80071ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3310      	adds	r3, #16
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 f913 	bl	80083e4 <xTaskRemoveFromEventList>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d012      	beq.n	80071ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071c4:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <xQueueGenericReset+0xd0>)
 80071c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	e009      	b.n	80071ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3310      	adds	r3, #16
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fef0 	bl	8006fc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff feeb 	bl	8006fc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071ea:	f002 f843 	bl	8009274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071ee:	2301      	movs	r3, #1
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08e      	sub	sp, #56	; 0x38
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10c      	bne.n	800722a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	b672      	cpsid	i
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	b662      	cpsie	i
 8007224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10c      	bne.n	800724a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	b672      	cpsid	i
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	b662      	cpsie	i
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <xQueueGenericCreateStatic+0x5a>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <xQueueGenericCreateStatic+0x5e>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueGenericCreateStatic+0x60>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10c      	bne.n	800727a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	623b      	str	r3, [r7, #32]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <xQueueGenericCreateStatic+0x8a>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <xQueueGenericCreateStatic+0x8e>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <xQueueGenericCreateStatic+0x90>
 800728a:	2300      	movs	r3, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10c      	bne.n	80072aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	b672      	cpsid	i
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	b662      	cpsie	i
 80072a4:	61fb      	str	r3, [r7, #28]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072aa:	2350      	movs	r3, #80	; 0x50
 80072ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b50      	cmp	r3, #80	; 0x50
 80072b2:	d00c      	beq.n	80072ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	b672      	cpsid	i
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	b662      	cpsie	i
 80072c8:	61bb      	str	r3, [r7, #24]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00d      	beq.n	80072f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	4613      	mov	r3, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f805 	bl	8007300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3730      	adds	r7, #48	; 0x30
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	e002      	b.n	8007322 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800732e:	2101      	movs	r1, #1
 8007330:	69b8      	ldr	r0, [r7, #24]
 8007332:	f7ff fef9 	bl	8007128 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08e      	sub	sp, #56	; 0x38
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10c      	bne.n	800737e <xQueueGenericSend+0x36>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	b672      	cpsid	i
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	b662      	cpsie	i
 8007378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <xQueueGenericSend+0x44>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueGenericSend+0x48>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueGenericSend+0x4a>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10c      	bne.n	80073b0 <xQueueGenericSend+0x68>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d103      	bne.n	80073be <xQueueGenericSend+0x76>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <xQueueGenericSend+0x7a>
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <xQueueGenericSend+0x7c>
 80073c2:	2300      	movs	r3, #0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10c      	bne.n	80073e2 <xQueueGenericSend+0x9a>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	b672      	cpsid	i
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	b662      	cpsie	i
 80073dc:	623b      	str	r3, [r7, #32]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073e2:	f001 f9c5 	bl	8008770 <xTaskGetSchedulerState>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <xQueueGenericSend+0xaa>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <xQueueGenericSend+0xae>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueGenericSend+0xb0>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <xQueueGenericSend+0xce>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	61fb      	str	r3, [r7, #28]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007416:	f001 fef9 	bl	800920c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <xQueueGenericSend+0xe4>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d129      	bne.n	8007480 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007432:	f000 fa15 	bl	8007860 <prvCopyDataToQueue>
 8007436:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d010      	beq.n	8007462 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	3324      	adds	r3, #36	; 0x24
 8007444:	4618      	mov	r0, r3
 8007446:	f000 ffcd 	bl	80083e4 <xTaskRemoveFromEventList>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d013      	beq.n	8007478 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007450:	4b3f      	ldr	r3, [pc, #252]	; (8007550 <xQueueGenericSend+0x208>)
 8007452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	e00a      	b.n	8007478 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007468:	4b39      	ldr	r3, [pc, #228]	; (8007550 <xQueueGenericSend+0x208>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007478:	f001 fefc 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 800747c:	2301      	movs	r3, #1
 800747e:	e063      	b.n	8007548 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007486:	f001 fef5 	bl	8009274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800748a:	2300      	movs	r3, #0
 800748c:	e05c      	b.n	8007548 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007494:	f107 0314 	add.w	r3, r7, #20
 8007498:	4618      	mov	r0, r3
 800749a:	f001 f809 	bl	80084b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074a2:	f001 fee7 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074a6:	f000 fd5d 	bl	8007f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074aa:	f001 feaf 	bl	800920c <vPortEnterCritical>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ba:	d103      	bne.n	80074c4 <xQueueGenericSend+0x17c>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ca:	b25b      	sxtb	r3, r3
 80074cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d0:	d103      	bne.n	80074da <xQueueGenericSend+0x192>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074da:	f001 fecb 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074de:	1d3a      	adds	r2, r7, #4
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fff8 	bl	80084dc <xTaskCheckForTimeOut>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d124      	bne.n	800753c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f4:	f000 faac 	bl	8007a50 <prvIsQueueFull>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	3310      	adds	r3, #16
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f000 ff18 	bl	800833c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800750c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750e:	f000 fa37 	bl	8007980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007512:	f000 fd35 	bl	8007f80 <xTaskResumeAll>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f af7c 	bne.w	8007416 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <xQueueGenericSend+0x208>)
 8007520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	e772      	b.n	8007416 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007532:	f000 fa25 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007536:	f000 fd23 	bl	8007f80 <xTaskResumeAll>
 800753a:	e76c      	b.n	8007416 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800753c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800753e:	f000 fa1f 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007542:	f000 fd1d 	bl	8007f80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007548:	4618      	mov	r0, r3
 800754a:	3738      	adds	r7, #56	; 0x38
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08e      	sub	sp, #56	; 0x38
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10c      	bne.n	8007586 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	b672      	cpsid	i
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	b662      	cpsie	i
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <xQueueGenericSendFromISR+0x40>
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <xQueueGenericSendFromISR+0x44>
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <xQueueGenericSendFromISR+0x46>
 8007598:	2300      	movs	r3, #0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	b672      	cpsid	i
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	b662      	cpsie	i
 80075b2:	623b      	str	r3, [r7, #32]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d103      	bne.n	80075c6 <xQueueGenericSendFromISR+0x72>
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <xQueueGenericSendFromISR+0x76>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <xQueueGenericSendFromISR+0x78>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10c      	bne.n	80075ea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	b672      	cpsid	i
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	b662      	cpsie	i
 80075e4:	61fb      	str	r3, [r7, #28]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ea:	f001 fef7 	bl	80093dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075ee:	f3ef 8211 	mrs	r2, BASEPRI
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	b672      	cpsid	i
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	b662      	cpsie	i
 8007606:	61ba      	str	r2, [r7, #24]
 8007608:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800760a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <xQueueGenericSendFromISR+0xcc>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d12c      	bne.n	800767a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007630:	f000 f916 	bl	8007860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007634:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d112      	bne.n	8007664 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d016      	beq.n	8007674 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	3324      	adds	r3, #36	; 0x24
 800764a:	4618      	mov	r0, r3
 800764c:	f000 feca 	bl	80083e4 <xTaskRemoveFromEventList>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00e      	beq.n	8007674 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	e007      	b.n	8007674 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007664:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007668:	3301      	adds	r3, #1
 800766a:	b2db      	uxtb	r3, r3
 800766c:	b25a      	sxtb	r2, r3
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007674:	2301      	movs	r3, #1
 8007676:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007678:	e001      	b.n	800767e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800767a:	2300      	movs	r3, #0
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007688:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800768c:	4618      	mov	r0, r3
 800768e:	3738      	adds	r7, #56	; 0x38
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076a0:	2300      	movs	r3, #0
 80076a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10c      	bne.n	80076c8 <xQueueReceive+0x34>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	b672      	cpsid	i
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	b662      	cpsie	i
 80076c2:	623b      	str	r3, [r7, #32]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d103      	bne.n	80076d6 <xQueueReceive+0x42>
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <xQueueReceive+0x46>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <xQueueReceive+0x48>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10c      	bne.n	80076fa <xQueueReceive+0x66>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	b672      	cpsid	i
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	b662      	cpsie	i
 80076f4:	61fb      	str	r3, [r7, #28]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076fa:	f001 f839 	bl	8008770 <xTaskGetSchedulerState>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <xQueueReceive+0x76>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <xQueueReceive+0x7a>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <xQueueReceive+0x7c>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10c      	bne.n	800772e <xQueueReceive+0x9a>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	b672      	cpsid	i
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	b662      	cpsie	i
 8007728:	61bb      	str	r3, [r7, #24]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800772e:	f001 fd6d 	bl	800920c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01f      	beq.n	800777e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007742:	f000 f8f7 	bl	8007934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007748:	1e5a      	subs	r2, r3, #1
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00f      	beq.n	8007776 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	3310      	adds	r3, #16
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fe42 	bl	80083e4 <xTaskRemoveFromEventList>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007766:	4b3d      	ldr	r3, [pc, #244]	; (800785c <xQueueReceive+0x1c8>)
 8007768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007776:	f001 fd7d 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 800777a:	2301      	movs	r3, #1
 800777c:	e069      	b.n	8007852 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007784:	f001 fd76 	bl	8009274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007788:	2300      	movs	r3, #0
 800778a:	e062      	b.n	8007852 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007792:	f107 0310 	add.w	r3, r7, #16
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fe8a 	bl	80084b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779c:	2301      	movs	r3, #1
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077a0:	f001 fd68 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a4:	f000 fbde 	bl	8007f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077a8:	f001 fd30 	bl	800920c <vPortEnterCritical>
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b2:	b25b      	sxtb	r3, r3
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d103      	bne.n	80077c2 <xQueueReceive+0x12e>
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c8:	b25b      	sxtb	r3, r3
 80077ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ce:	d103      	bne.n	80077d8 <xQueueReceive+0x144>
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077d8:	f001 fd4c 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077dc:	1d3a      	adds	r2, r7, #4
 80077de:	f107 0310 	add.w	r3, r7, #16
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 fe79 	bl	80084dc <xTaskCheckForTimeOut>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d123      	bne.n	8007838 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f2:	f000 f917 	bl	8007a24 <prvIsQueueEmpty>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d017      	beq.n	800782c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	3324      	adds	r3, #36	; 0x24
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fd99 	bl	800833c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800780a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780c:	f000 f8b8 	bl	8007980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007810:	f000 fbb6 	bl	8007f80 <xTaskResumeAll>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d189      	bne.n	800772e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800781a:	4b10      	ldr	r3, [pc, #64]	; (800785c <xQueueReceive+0x1c8>)
 800781c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	e780      	b.n	800772e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800782c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800782e:	f000 f8a7 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007832:	f000 fba5 	bl	8007f80 <xTaskResumeAll>
 8007836:	e77a      	b.n	800772e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783a:	f000 f8a1 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800783e:	f000 fb9f 	bl	8007f80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007844:	f000 f8ee 	bl	8007a24 <prvIsQueueEmpty>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	f43f af6f 	beq.w	800772e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007852:	4618      	mov	r0, r3
 8007854:	3730      	adds	r7, #48	; 0x30
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d14d      	bne.n	8007922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 ff8e 	bl	80087ac <xTaskPriorityDisinherit>
 8007890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	609a      	str	r2, [r3, #8]
 8007898:	e043      	b.n	8007922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d119      	bne.n	80078d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6858      	ldr	r0, [r3, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	461a      	mov	r2, r3
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	f002 fa97 	bl	8009dde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d32b      	bcc.n	8007922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	e026      	b.n	8007922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68d8      	ldr	r0, [r3, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	461a      	mov	r2, r3
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	f002 fa7d 	bl	8009dde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	425b      	negs	r3, r3
 80078ee:	441a      	add	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d207      	bcs.n	8007910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	425b      	negs	r3, r3
 800790a:	441a      	add	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d105      	bne.n	8007922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3b01      	subs	r3, #1
 8007920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800792a:	697b      	ldr	r3, [r7, #20]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d018      	beq.n	8007978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	441a      	add	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	d303      	bcc.n	8007968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68d9      	ldr	r1, [r3, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	461a      	mov	r2, r3
 8007972:	6838      	ldr	r0, [r7, #0]
 8007974:	f002 fa33 	bl	8009dde <memcpy>
	}
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007988:	f001 fc40 	bl	800920c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007994:	e011      	b.n	80079ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d012      	beq.n	80079c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3324      	adds	r3, #36	; 0x24
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fd1e 	bl	80083e4 <xTaskRemoveFromEventList>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079ae:	f000 fdfb 	bl	80085a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dce9      	bgt.n	8007996 <prvUnlockQueue+0x16>
 80079c2:	e000      	b.n	80079c6 <prvUnlockQueue+0x46>
					break;
 80079c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	22ff      	movs	r2, #255	; 0xff
 80079ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079ce:	f001 fc51 	bl	8009274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079d2:	f001 fc1b 	bl	800920c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079de:	e011      	b.n	8007a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d012      	beq.n	8007a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3310      	adds	r3, #16
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fcf9 	bl	80083e4 <xTaskRemoveFromEventList>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079f8:	f000 fdd6 	bl	80085a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dce9      	bgt.n	80079e0 <prvUnlockQueue+0x60>
 8007a0c:	e000      	b.n	8007a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	22ff      	movs	r2, #255	; 0xff
 8007a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a18:	f001 fc2c 	bl	8009274 <vPortExitCritical>
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a2c:	f001 fbee 	bl	800920c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e001      	b.n	8007a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a42:	f001 fc17 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a58:	f001 fbd8 	bl	800920c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d102      	bne.n	8007a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	e001      	b.n	8007a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a72:	f001 fbff 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e014      	b.n	8007aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a90:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a9c:	490c      	ldr	r1, [pc, #48]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007aa6:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	4413      	add	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ab2:	e006      	b.n	8007ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	d9e7      	bls.n	8007a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20002320 	.word	0x20002320

08007ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ae4:	f001 fb92 	bl	800920c <vPortEnterCritical>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af4:	d103      	bne.n	8007afe <vQueueWaitForMessageRestricted+0x2a>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d103      	bne.n	8007b14 <vQueueWaitForMessageRestricted+0x40>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b14:	f001 fbae 	bl	8009274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3324      	adds	r3, #36	; 0x24
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fc2d 	bl	8008388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f7ff ff26 	bl	8007980 <prvUnlockQueue>
	}
 8007b34:	bf00      	nop
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08e      	sub	sp, #56	; 0x38
 8007b40:	af04      	add	r7, sp, #16
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10c      	bne.n	8007b6a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	b672      	cpsid	i
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	b662      	cpsie	i
 8007b64:	623b      	str	r3, [r7, #32]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10c      	bne.n	8007b8a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	b672      	cpsid	i
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	b662      	cpsie	i
 8007b84:	61fb      	str	r3, [r7, #28]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b8a:	235c      	movs	r3, #92	; 0x5c
 8007b8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b5c      	cmp	r3, #92	; 0x5c
 8007b92:	d00c      	beq.n	8007bae <xTaskCreateStatic+0x72>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	b672      	cpsid	i
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	b662      	cpsie	i
 8007ba8:	61bb      	str	r3, [r7, #24]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d01e      	beq.n	8007bf4 <xTaskCreateStatic+0xb8>
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01b      	beq.n	8007bf4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9303      	str	r3, [sp, #12]
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	f107 0314 	add.w	r3, r7, #20
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f850 	bl	8007c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bee:	f000 f8df 	bl	8007db0 <prvAddNewTaskToReadyList>
 8007bf2:	e001      	b.n	8007bf8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bf8:	697b      	ldr	r3, [r7, #20]
	}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3728      	adds	r7, #40	; 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b08c      	sub	sp, #48	; 0x30
 8007c06:	af04      	add	r7, sp, #16
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 fc24 	bl	8009464 <pvPortMalloc>
 8007c1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00e      	beq.n	8007c42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c24:	205c      	movs	r0, #92	; 0x5c
 8007c26:	f001 fc1d 	bl	8009464 <pvPortMalloc>
 8007c2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
 8007c38:	e005      	b.n	8007c46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c3a:	6978      	ldr	r0, [r7, #20]
 8007c3c:	f001 fcdc 	bl	80095f8 <vPortFree>
 8007c40:	e001      	b.n	8007c46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d017      	beq.n	8007c7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9303      	str	r3, [sp, #12]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	9302      	str	r3, [sp, #8]
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f80e 	bl	8007c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c70:	69f8      	ldr	r0, [r7, #28]
 8007c72:	f000 f89d 	bl	8007db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	e002      	b.n	8007c82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c82:	69bb      	ldr	r3, [r7, #24]
	}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	21a5      	movs	r1, #165	; 0xa5
 8007ca6:	f001 ffea 	bl	8009c7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007cb4:	440b      	add	r3, r1
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f023 0307 	bic.w	r3, r3, #7
 8007cc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	b672      	cpsid	i
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	b662      	cpsie	i
 8007ce2:	617b      	str	r3, [r7, #20]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d01f      	beq.n	8007d2e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	e012      	b.n	8007d1a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	7819      	ldrb	r1, [r3, #0]
 8007cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	3334      	adds	r3, #52	; 0x34
 8007d04:	460a      	mov	r2, r1
 8007d06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d006      	beq.n	8007d22 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	3301      	adds	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	2b0f      	cmp	r3, #15
 8007d1e:	d9e9      	bls.n	8007cf4 <prvInitialiseNewTask+0x68>
 8007d20:	e000      	b.n	8007d24 <prvInitialiseNewTask+0x98>
			{
				break;
 8007d22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d2c:	e003      	b.n	8007d36 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	2b37      	cmp	r3, #55	; 0x37
 8007d3a:	d901      	bls.n	8007d40 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d3c:	2337      	movs	r3, #55	; 0x37
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	2200      	movs	r2, #0
 8007d50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	3304      	adds	r3, #4
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f952 	bl	8007000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	3318      	adds	r3, #24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff f94d 	bl	8007000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	2200      	movs	r2, #0
 8007d80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	68f9      	ldr	r1, [r7, #12]
 8007d8e:	69b8      	ldr	r0, [r7, #24]
 8007d90:	f001 f92e 	bl	8008ff0 <pxPortInitialiseStack>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da6:	bf00      	nop
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007db8:	f001 fa28 	bl	800920c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dbc:	4b2d      	ldr	r3, [pc, #180]	; (8007e74 <prvAddNewTaskToReadyList+0xc4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <prvAddNewTaskToReadyList+0xc4>)
 8007dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dc6:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <prvAddNewTaskToReadyList+0xc8>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dce:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <prvAddNewTaskToReadyList+0xc8>)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dd4:	4b27      	ldr	r3, [pc, #156]	; (8007e74 <prvAddNewTaskToReadyList+0xc4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d110      	bne.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ddc:	f000 fc08 	bl	80085f0 <prvInitialiseTaskLists>
 8007de0:	e00d      	b.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007de2:	4b26      	ldr	r3, [pc, #152]	; (8007e7c <prvAddNewTaskToReadyList+0xcc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dea:	4b23      	ldr	r3, [pc, #140]	; (8007e78 <prvAddNewTaskToReadyList+0xc8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d802      	bhi.n	8007dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007df8:	4a1f      	ldr	r2, [pc, #124]	; (8007e78 <prvAddNewTaskToReadyList+0xc8>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dfe:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <prvAddNewTaskToReadyList+0xd0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a1e      	ldr	r2, [pc, #120]	; (8007e80 <prvAddNewTaskToReadyList+0xd0>)
 8007e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e08:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <prvAddNewTaskToReadyList+0xd0>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4b1b      	ldr	r3, [pc, #108]	; (8007e84 <prvAddNewTaskToReadyList+0xd4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d903      	bls.n	8007e24 <prvAddNewTaskToReadyList+0x74>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a18      	ldr	r2, [pc, #96]	; (8007e84 <prvAddNewTaskToReadyList+0xd4>)
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <prvAddNewTaskToReadyList+0xd8>)
 8007e32:	441a      	add	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f7ff f8ed 	bl	800701a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e40:	f001 fa18 	bl	8009274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e44:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <prvAddNewTaskToReadyList+0xcc>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00e      	beq.n	8007e6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <prvAddNewTaskToReadyList+0xc8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d207      	bcs.n	8007e6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <prvAddNewTaskToReadyList+0xdc>)
 8007e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20002834 	.word	0x20002834
 8007e78:	20002360 	.word	0x20002360
 8007e7c:	20002840 	.word	0x20002840
 8007e80:	20002850 	.word	0x20002850
 8007e84:	2000283c 	.word	0x2000283c
 8007e88:	20002364 	.word	0x20002364
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e9e:	463a      	mov	r2, r7
 8007ea0:	1d39      	adds	r1, r7, #4
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff f856 	bl	8006f58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	9202      	str	r2, [sp, #8]
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	460a      	mov	r2, r1
 8007ebe:	4923      	ldr	r1, [pc, #140]	; (8007f4c <vTaskStartScheduler+0xbc>)
 8007ec0:	4823      	ldr	r0, [pc, #140]	; (8007f50 <vTaskStartScheduler+0xc0>)
 8007ec2:	f7ff fe3b 	bl	8007b3c <xTaskCreateStatic>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4a22      	ldr	r2, [pc, #136]	; (8007f54 <vTaskStartScheduler+0xc4>)
 8007eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ecc:	4b21      	ldr	r3, [pc, #132]	; (8007f54 <vTaskStartScheduler+0xc4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e001      	b.n	8007ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d102      	bne.n	8007eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ee4:	f000 fd28 	bl	8008938 <xTimerCreateTimerTask>
 8007ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d118      	bne.n	8007f22 <vTaskStartScheduler+0x92>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	b672      	cpsid	i
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	b662      	cpsie	i
 8007f04:	613b      	str	r3, [r7, #16]
}
 8007f06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f08:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <vTaskStartScheduler+0xc8>)
 8007f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <vTaskStartScheduler+0xcc>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f16:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <vTaskStartScheduler+0xd0>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f1c:	f001 f8f8 	bl	8009110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f20:	e010      	b.n	8007f44 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f28:	d10c      	bne.n	8007f44 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	b672      	cpsid	i
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	b662      	cpsie	i
 8007f3e:	60fb      	str	r3, [r7, #12]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <vTaskStartScheduler+0xb2>
}
 8007f44:	bf00      	nop
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	0800c268 	.word	0x0800c268
 8007f50:	080085c1 	.word	0x080085c1
 8007f54:	20002858 	.word	0x20002858
 8007f58:	20002854 	.word	0x20002854
 8007f5c:	20002840 	.word	0x20002840
 8007f60:	20002838 	.word	0x20002838

08007f64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <vTaskSuspendAll+0x18>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	4a03      	ldr	r2, [pc, #12]	; (8007f7c <vTaskSuspendAll+0x18>)
 8007f70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007f72:	bf00      	nop
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	2000285c 	.word	0x2000285c

08007f80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f8e:	4b43      	ldr	r3, [pc, #268]	; (800809c <xTaskResumeAll+0x11c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10c      	bne.n	8007fb0 <xTaskResumeAll+0x30>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	b672      	cpsid	i
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	b662      	cpsie	i
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fb0:	f001 f92c 	bl	800920c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fb4:	4b39      	ldr	r3, [pc, #228]	; (800809c <xTaskResumeAll+0x11c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	4a38      	ldr	r2, [pc, #224]	; (800809c <xTaskResumeAll+0x11c>)
 8007fbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fbe:	4b37      	ldr	r3, [pc, #220]	; (800809c <xTaskResumeAll+0x11c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d162      	bne.n	800808c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fc6:	4b36      	ldr	r3, [pc, #216]	; (80080a0 <xTaskResumeAll+0x120>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d05e      	beq.n	800808c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fce:	e02f      	b.n	8008030 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd0:	4b34      	ldr	r3, [pc, #208]	; (80080a4 <xTaskResumeAll+0x124>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3318      	adds	r3, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff f879 	bl	80070d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff f874 	bl	80070d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	4b2d      	ldr	r3, [pc, #180]	; (80080a8 <xTaskResumeAll+0x128>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d903      	bls.n	8008000 <xTaskResumeAll+0x80>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <xTaskResumeAll+0x128>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a27      	ldr	r2, [pc, #156]	; (80080ac <xTaskResumeAll+0x12c>)
 800800e:	441a      	add	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe ffff 	bl	800701a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <xTaskResumeAll+0x130>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800802a:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <xTaskResumeAll+0x134>)
 800802c:	2201      	movs	r2, #1
 800802e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008030:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <xTaskResumeAll+0x124>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1cb      	bne.n	8007fd0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800803e:	f000 fb77 	bl	8008730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008042:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <xTaskResumeAll+0x138>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800804e:	f000 f859 	bl	8008104 <xTaskIncrementTick>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <xTaskResumeAll+0x134>)
 800805a:	2201      	movs	r2, #1
 800805c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3b01      	subs	r3, #1
 8008062:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f1      	bne.n	800804e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <xTaskResumeAll+0x138>)
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <xTaskResumeAll+0x134>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <xTaskResumeAll+0x13c>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800808c:	f001 f8f2 	bl	8009274 <vPortExitCritical>

	return xAlreadyYielded;
 8008090:	68bb      	ldr	r3, [r7, #8]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	2000285c 	.word	0x2000285c
 80080a0:	20002834 	.word	0x20002834
 80080a4:	200027f4 	.word	0x200027f4
 80080a8:	2000283c 	.word	0x2000283c
 80080ac:	20002364 	.word	0x20002364
 80080b0:	20002360 	.word	0x20002360
 80080b4:	20002848 	.word	0x20002848
 80080b8:	20002844 	.word	0x20002844
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <xTaskGetTickCount+0x1c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080cc:	687b      	ldr	r3, [r7, #4]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20002838 	.word	0x20002838

080080e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080e6:	f001 f979 	bl	80093dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80080ea:	2300      	movs	r3, #0
 80080ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80080ee:	4b04      	ldr	r3, [pc, #16]	; (8008100 <xTaskGetTickCountFromISR+0x20>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080f4:	683b      	ldr	r3, [r7, #0]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20002838 	.word	0x20002838

08008104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800810e:	4b50      	ldr	r3, [pc, #320]	; (8008250 <xTaskIncrementTick+0x14c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f040 808b 	bne.w	800822e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008118:	4b4e      	ldr	r3, [pc, #312]	; (8008254 <xTaskIncrementTick+0x150>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008120:	4a4c      	ldr	r2, [pc, #304]	; (8008254 <xTaskIncrementTick+0x150>)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d122      	bne.n	8008172 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800812c:	4b4a      	ldr	r3, [pc, #296]	; (8008258 <xTaskIncrementTick+0x154>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00c      	beq.n	8008150 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	b672      	cpsid	i
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	b662      	cpsie	i
 800814a:	603b      	str	r3, [r7, #0]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <xTaskIncrementTick+0x4a>
 8008150:	4b41      	ldr	r3, [pc, #260]	; (8008258 <xTaskIncrementTick+0x154>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	4b41      	ldr	r3, [pc, #260]	; (800825c <xTaskIncrementTick+0x158>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a3f      	ldr	r2, [pc, #252]	; (8008258 <xTaskIncrementTick+0x154>)
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	4a3f      	ldr	r2, [pc, #252]	; (800825c <xTaskIncrementTick+0x158>)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	4b3e      	ldr	r3, [pc, #248]	; (8008260 <xTaskIncrementTick+0x15c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	4a3d      	ldr	r2, [pc, #244]	; (8008260 <xTaskIncrementTick+0x15c>)
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	f000 fadf 	bl	8008730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008172:	4b3c      	ldr	r3, [pc, #240]	; (8008264 <xTaskIncrementTick+0x160>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	d349      	bcc.n	8008210 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800817c:	4b36      	ldr	r3, [pc, #216]	; (8008258 <xTaskIncrementTick+0x154>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008186:	4b37      	ldr	r3, [pc, #220]	; (8008264 <xTaskIncrementTick+0x160>)
 8008188:	f04f 32ff 	mov.w	r2, #4294967295
 800818c:	601a      	str	r2, [r3, #0]
					break;
 800818e:	e03f      	b.n	8008210 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008190:	4b31      	ldr	r3, [pc, #196]	; (8008258 <xTaskIncrementTick+0x154>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d203      	bcs.n	80081b0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081a8:	4a2e      	ldr	r2, [pc, #184]	; (8008264 <xTaskIncrementTick+0x160>)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081ae:	e02f      	b.n	8008210 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe ff8d 	bl	80070d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d004      	beq.n	80081cc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3318      	adds	r3, #24
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe ff84 	bl	80070d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	4b25      	ldr	r3, [pc, #148]	; (8008268 <xTaskIncrementTick+0x164>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d903      	bls.n	80081e0 <xTaskIncrementTick+0xdc>
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	4a22      	ldr	r2, [pc, #136]	; (8008268 <xTaskIncrementTick+0x164>)
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4a1f      	ldr	r2, [pc, #124]	; (800826c <xTaskIncrementTick+0x168>)
 80081ee:	441a      	add	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f7fe ff0f 	bl	800701a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008200:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <xTaskIncrementTick+0x16c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	429a      	cmp	r2, r3
 8008208:	d3b8      	bcc.n	800817c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800820e:	e7b5      	b.n	800817c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <xTaskIncrementTick+0x16c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008216:	4915      	ldr	r1, [pc, #84]	; (800826c <xTaskIncrementTick+0x168>)
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	440b      	add	r3, r1
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d907      	bls.n	8008238 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	e004      	b.n	8008238 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800822e:	4b11      	ldr	r3, [pc, #68]	; (8008274 <xTaskIncrementTick+0x170>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a0f      	ldr	r2, [pc, #60]	; (8008274 <xTaskIncrementTick+0x170>)
 8008236:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008238:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <xTaskIncrementTick+0x174>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008244:	697b      	ldr	r3, [r7, #20]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	2000285c 	.word	0x2000285c
 8008254:	20002838 	.word	0x20002838
 8008258:	200027ec 	.word	0x200027ec
 800825c:	200027f0 	.word	0x200027f0
 8008260:	2000284c 	.word	0x2000284c
 8008264:	20002854 	.word	0x20002854
 8008268:	2000283c 	.word	0x2000283c
 800826c:	20002364 	.word	0x20002364
 8008270:	20002360 	.word	0x20002360
 8008274:	20002844 	.word	0x20002844
 8008278:	20002848 	.word	0x20002848

0800827c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008282:	4b29      	ldr	r3, [pc, #164]	; (8008328 <vTaskSwitchContext+0xac>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800828a:	4b28      	ldr	r3, [pc, #160]	; (800832c <vTaskSwitchContext+0xb0>)
 800828c:	2201      	movs	r2, #1
 800828e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008290:	e043      	b.n	800831a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008292:	4b26      	ldr	r3, [pc, #152]	; (800832c <vTaskSwitchContext+0xb0>)
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008298:	4b25      	ldr	r3, [pc, #148]	; (8008330 <vTaskSwitchContext+0xb4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e012      	b.n	80082c6 <vTaskSwitchContext+0x4a>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10c      	bne.n	80082c0 <vTaskSwitchContext+0x44>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	b672      	cpsid	i
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	b662      	cpsie	i
 80082ba:	607b      	str	r3, [r7, #4]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <vTaskSwitchContext+0x42>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	491b      	ldr	r1, [pc, #108]	; (8008334 <vTaskSwitchContext+0xb8>)
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0e2      	beq.n	80082a0 <vTaskSwitchContext+0x24>
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4a13      	ldr	r2, [pc, #76]	; (8008334 <vTaskSwitchContext+0xb8>)
 80082e6:	4413      	add	r3, r2
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	3308      	adds	r3, #8
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d104      	bne.n	800830a <vTaskSwitchContext+0x8e>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4a09      	ldr	r2, [pc, #36]	; (8008338 <vTaskSwitchContext+0xbc>)
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	4a06      	ldr	r2, [pc, #24]	; (8008330 <vTaskSwitchContext+0xb4>)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6013      	str	r3, [r2, #0]
}
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	2000285c 	.word	0x2000285c
 800832c:	20002848 	.word	0x20002848
 8008330:	2000283c 	.word	0x2000283c
 8008334:	20002364 	.word	0x20002364
 8008338:	20002360 	.word	0x20002360

0800833c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10c      	bne.n	8008366 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	b672      	cpsid	i
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	b662      	cpsie	i
 8008360:	60fb      	str	r3, [r7, #12]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008366:	4b07      	ldr	r3, [pc, #28]	; (8008384 <vTaskPlaceOnEventList+0x48>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3318      	adds	r3, #24
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fe fe77 	bl	8007062 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008374:	2101      	movs	r1, #1
 8008376:	6838      	ldr	r0, [r7, #0]
 8008378:	f000 fa8a 	bl	8008890 <prvAddCurrentTaskToDelayedList>
}
 800837c:	bf00      	nop
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20002360 	.word	0x20002360

08008388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10c      	bne.n	80083b4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	b672      	cpsid	i
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	b662      	cpsie	i
 80083ae:	617b      	str	r3, [r7, #20]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083b4:	4b0a      	ldr	r3, [pc, #40]	; (80083e0 <vTaskPlaceOnEventListRestricted+0x58>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3318      	adds	r3, #24
 80083ba:	4619      	mov	r1, r3
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7fe fe2c 	bl	800701a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80083c8:	f04f 33ff 	mov.w	r3, #4294967295
 80083cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	68b8      	ldr	r0, [r7, #8]
 80083d2:	f000 fa5d 	bl	8008890 <prvAddCurrentTaskToDelayedList>
	}
 80083d6:	bf00      	nop
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20002360 	.word	0x20002360

080083e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10c      	bne.n	8008414 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	b672      	cpsid	i
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	b662      	cpsie	i
 800840e:	60fb      	str	r3, [r7, #12]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	3318      	adds	r3, #24
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fe5b 	bl	80070d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800841e:	4b1e      	ldr	r3, [pc, #120]	; (8008498 <xTaskRemoveFromEventList+0xb4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d11d      	bne.n	8008462 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fe52 	bl	80070d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008434:	4b19      	ldr	r3, [pc, #100]	; (800849c <xTaskRemoveFromEventList+0xb8>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d903      	bls.n	8008444 <xTaskRemoveFromEventList+0x60>
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	4a16      	ldr	r2, [pc, #88]	; (800849c <xTaskRemoveFromEventList+0xb8>)
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <xTaskRemoveFromEventList+0xbc>)
 8008452:	441a      	add	r2, r3
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	3304      	adds	r3, #4
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7fe fddd 	bl	800701a <vListInsertEnd>
 8008460:	e005      	b.n	800846e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	3318      	adds	r3, #24
 8008466:	4619      	mov	r1, r3
 8008468:	480e      	ldr	r0, [pc, #56]	; (80084a4 <xTaskRemoveFromEventList+0xc0>)
 800846a:	f7fe fdd6 	bl	800701a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <xTaskRemoveFromEventList+0xc4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008478:	429a      	cmp	r2, r3
 800847a:	d905      	bls.n	8008488 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <xTaskRemoveFromEventList+0xc8>)
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e001      	b.n	800848c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800848c:	697b      	ldr	r3, [r7, #20]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	2000285c 	.word	0x2000285c
 800849c:	2000283c 	.word	0x2000283c
 80084a0:	20002364 	.word	0x20002364
 80084a4:	200027f4 	.word	0x200027f4
 80084a8:	20002360 	.word	0x20002360
 80084ac:	20002848 	.word	0x20002848

080084b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084b8:	4b06      	ldr	r3, [pc, #24]	; (80084d4 <vTaskInternalSetTimeOutState+0x24>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <vTaskInternalSetTimeOutState+0x28>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	605a      	str	r2, [r3, #4]
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	2000284c 	.word	0x2000284c
 80084d8:	20002838 	.word	0x20002838

080084dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10c      	bne.n	8008506 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	b672      	cpsid	i
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	b662      	cpsie	i
 8008500:	613b      	str	r3, [r7, #16]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	b672      	cpsid	i
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	b662      	cpsie	i
 8008520:	60fb      	str	r3, [r7, #12]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008526:	f000 fe71 	bl	800920c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800852a:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <xTaskCheckForTimeOut+0xc4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008542:	d102      	bne.n	800854a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008544:	2300      	movs	r3, #0
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	e023      	b.n	8008592 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <xTaskCheckForTimeOut+0xc8>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d007      	beq.n	8008566 <xTaskCheckForTimeOut+0x8a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	429a      	cmp	r2, r3
 800855e:	d302      	bcc.n	8008566 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008560:	2301      	movs	r3, #1
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	e015      	b.n	8008592 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	429a      	cmp	r2, r3
 800856e:	d20b      	bcs.n	8008588 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff ff97 	bl	80084b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	e004      	b.n	8008592 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800858e:	2301      	movs	r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008592:	f000 fe6f 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8008596:	69fb      	ldr	r3, [r7, #28]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20002838 	.word	0x20002838
 80085a4:	2000284c 	.word	0x2000284c

080085a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085a8:	b480      	push	{r7}
 80085aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085ac:	4b03      	ldr	r3, [pc, #12]	; (80085bc <vTaskMissedYield+0x14>)
 80085ae:	2201      	movs	r2, #1
 80085b0:	601a      	str	r2, [r3, #0]
}
 80085b2:	bf00      	nop
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	20002848 	.word	0x20002848

080085c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085c8:	f000 f852 	bl	8008670 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <prvIdleTask+0x28>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d9f9      	bls.n	80085c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085d4:	4b05      	ldr	r3, [pc, #20]	; (80085ec <prvIdleTask+0x2c>)
 80085d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085e4:	e7f0      	b.n	80085c8 <prvIdleTask+0x8>
 80085e6:	bf00      	nop
 80085e8:	20002364 	.word	0x20002364
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	e00c      	b.n	8008616 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4a12      	ldr	r2, [pc, #72]	; (8008650 <prvInitialiseTaskLists+0x60>)
 8008608:	4413      	add	r3, r2
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fcd8 	bl	8006fc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3301      	adds	r3, #1
 8008614:	607b      	str	r3, [r7, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b37      	cmp	r3, #55	; 0x37
 800861a:	d9ef      	bls.n	80085fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800861c:	480d      	ldr	r0, [pc, #52]	; (8008654 <prvInitialiseTaskLists+0x64>)
 800861e:	f7fe fccf 	bl	8006fc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008622:	480d      	ldr	r0, [pc, #52]	; (8008658 <prvInitialiseTaskLists+0x68>)
 8008624:	f7fe fccc 	bl	8006fc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008628:	480c      	ldr	r0, [pc, #48]	; (800865c <prvInitialiseTaskLists+0x6c>)
 800862a:	f7fe fcc9 	bl	8006fc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800862e:	480c      	ldr	r0, [pc, #48]	; (8008660 <prvInitialiseTaskLists+0x70>)
 8008630:	f7fe fcc6 	bl	8006fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008634:	480b      	ldr	r0, [pc, #44]	; (8008664 <prvInitialiseTaskLists+0x74>)
 8008636:	f7fe fcc3 	bl	8006fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800863a:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <prvInitialiseTaskLists+0x78>)
 800863c:	4a05      	ldr	r2, [pc, #20]	; (8008654 <prvInitialiseTaskLists+0x64>)
 800863e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <prvInitialiseTaskLists+0x7c>)
 8008642:	4a05      	ldr	r2, [pc, #20]	; (8008658 <prvInitialiseTaskLists+0x68>)
 8008644:	601a      	str	r2, [r3, #0]
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20002364 	.word	0x20002364
 8008654:	200027c4 	.word	0x200027c4
 8008658:	200027d8 	.word	0x200027d8
 800865c:	200027f4 	.word	0x200027f4
 8008660:	20002808 	.word	0x20002808
 8008664:	20002820 	.word	0x20002820
 8008668:	200027ec 	.word	0x200027ec
 800866c:	200027f0 	.word	0x200027f0

08008670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008676:	e019      	b.n	80086ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008678:	f000 fdc8 	bl	800920c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867c:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <prvCheckTasksWaitingTermination+0x50>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3304      	adds	r3, #4
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fd23 	bl	80070d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800868e:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <prvCheckTasksWaitingTermination+0x54>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3b01      	subs	r3, #1
 8008694:	4a0b      	ldr	r2, [pc, #44]	; (80086c4 <prvCheckTasksWaitingTermination+0x54>)
 8008696:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008698:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <prvCheckTasksWaitingTermination+0x58>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3b01      	subs	r3, #1
 800869e:	4a0a      	ldr	r2, [pc, #40]	; (80086c8 <prvCheckTasksWaitingTermination+0x58>)
 80086a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086a2:	f000 fde7 	bl	8009274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f810 	bl	80086cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <prvCheckTasksWaitingTermination+0x58>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e1      	bne.n	8008678 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20002808 	.word	0x20002808
 80086c4:	20002834 	.word	0x20002834
 80086c8:	2000281c 	.word	0x2000281c

080086cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d108      	bne.n	80086f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 ff88 	bl	80095f8 <vPortFree>
				vPortFree( pxTCB );
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 ff85 	bl	80095f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086ee:	e01a      	b.n	8008726 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d103      	bne.n	8008702 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 ff7c 	bl	80095f8 <vPortFree>
	}
 8008700:	e011      	b.n	8008726 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008708:	2b02      	cmp	r3, #2
 800870a:	d00c      	beq.n	8008726 <prvDeleteTCB+0x5a>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	b672      	cpsid	i
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	b662      	cpsie	i
 8008720:	60fb      	str	r3, [r7, #12]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <prvDeleteTCB+0x58>
	}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <prvResetNextTaskUnblockTime+0x38>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d104      	bne.n	800874a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <prvResetNextTaskUnblockTime+0x3c>)
 8008742:	f04f 32ff 	mov.w	r2, #4294967295
 8008746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008748:	e008      	b.n	800875c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <prvResetNextTaskUnblockTime+0x38>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a04      	ldr	r2, [pc, #16]	; (800876c <prvResetNextTaskUnblockTime+0x3c>)
 800875a:	6013      	str	r3, [r2, #0]
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	200027ec 	.word	0x200027ec
 800876c:	20002854 	.word	0x20002854

08008770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <xTaskGetSchedulerState+0x34>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800877e:	2301      	movs	r3, #1
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	e008      	b.n	8008796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008784:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <xTaskGetSchedulerState+0x38>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800878c:	2302      	movs	r3, #2
 800878e:	607b      	str	r3, [r7, #4]
 8008790:	e001      	b.n	8008796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008796:	687b      	ldr	r3, [r7, #4]
	}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	20002840 	.word	0x20002840
 80087a8:	2000285c 	.word	0x2000285c

080087ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087b8:	2300      	movs	r3, #0
 80087ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d05a      	beq.n	8008878 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087c2:	4b30      	ldr	r3, [pc, #192]	; (8008884 <xTaskPriorityDisinherit+0xd8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d00c      	beq.n	80087e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	b672      	cpsid	i
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	b662      	cpsie	i
 80087e0:	60fb      	str	r3, [r7, #12]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10c      	bne.n	8008808 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	60bb      	str	r3, [r7, #8]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	1e5a      	subs	r2, r3, #1
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881a:	429a      	cmp	r2, r3
 800881c:	d02c      	beq.n	8008878 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008822:	2b00      	cmp	r3, #0
 8008824:	d128      	bne.n	8008878 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	3304      	adds	r3, #4
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe fc52 	bl	80070d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <xTaskPriorityDisinherit+0xdc>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d903      	bls.n	8008858 <xTaskPriorityDisinherit+0xac>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	4a0c      	ldr	r2, [pc, #48]	; (8008888 <xTaskPriorityDisinherit+0xdc>)
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4a09      	ldr	r2, [pc, #36]	; (800888c <xTaskPriorityDisinherit+0xe0>)
 8008866:	441a      	add	r2, r3
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3304      	adds	r3, #4
 800886c:	4619      	mov	r1, r3
 800886e:	4610      	mov	r0, r2
 8008870:	f7fe fbd3 	bl	800701a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008874:	2301      	movs	r3, #1
 8008876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008878:	697b      	ldr	r3, [r7, #20]
	}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20002360 	.word	0x20002360
 8008888:	2000283c 	.word	0x2000283c
 800888c:	20002364 	.word	0x20002364

08008890 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800889a:	4b21      	ldr	r3, [pc, #132]	; (8008920 <prvAddCurrentTaskToDelayedList+0x90>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088a0:	4b20      	ldr	r3, [pc, #128]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fc14 	bl	80070d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d10a      	bne.n	80088ca <prvAddCurrentTaskToDelayedList+0x3a>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ba:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4819      	ldr	r0, [pc, #100]	; (8008928 <prvAddCurrentTaskToDelayedList+0x98>)
 80088c4:	f7fe fba9 	bl	800701a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088c8:	e026      	b.n	8008918 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4413      	add	r3, r2
 80088d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088d2:	4b14      	ldr	r3, [pc, #80]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d209      	bcs.n	80088f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e2:	4b12      	ldr	r3, [pc, #72]	; (800892c <prvAddCurrentTaskToDelayedList+0x9c>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3304      	adds	r3, #4
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f7fe fbb7 	bl	8007062 <vListInsert>
}
 80088f4:	e010      	b.n	8008918 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f6:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <prvAddCurrentTaskToDelayedList+0x94>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3304      	adds	r3, #4
 8008900:	4619      	mov	r1, r3
 8008902:	4610      	mov	r0, r2
 8008904:	f7fe fbad 	bl	8007062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	d202      	bcs.n	8008918 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008912:	4a08      	ldr	r2, [pc, #32]	; (8008934 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6013      	str	r3, [r2, #0]
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20002838 	.word	0x20002838
 8008924:	20002360 	.word	0x20002360
 8008928:	20002820 	.word	0x20002820
 800892c:	200027f0 	.word	0x200027f0
 8008930:	200027ec 	.word	0x200027ec
 8008934:	20002854 	.word	0x20002854

08008938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008942:	f000 fb15 	bl	8008f70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008946:	4b1d      	ldr	r3, [pc, #116]	; (80089bc <xTimerCreateTimerTask+0x84>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d021      	beq.n	8008992 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008956:	1d3a      	adds	r2, r7, #4
 8008958:	f107 0108 	add.w	r1, r7, #8
 800895c:	f107 030c 	add.w	r3, r7, #12
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fb13 	bl	8006f8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	9202      	str	r2, [sp, #8]
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	2302      	movs	r3, #2
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	460a      	mov	r2, r1
 8008978:	4911      	ldr	r1, [pc, #68]	; (80089c0 <xTimerCreateTimerTask+0x88>)
 800897a:	4812      	ldr	r0, [pc, #72]	; (80089c4 <xTimerCreateTimerTask+0x8c>)
 800897c:	f7ff f8de 	bl	8007b3c <xTaskCreateStatic>
 8008980:	4603      	mov	r3, r0
 8008982:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <xTimerCreateTimerTask+0x90>)
 8008984:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008986:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <xTimerCreateTimerTask+0x90>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800898e:	2301      	movs	r3, #1
 8008990:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10c      	bne.n	80089b2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	b672      	cpsid	i
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	b662      	cpsie	i
 80089ac:	613b      	str	r3, [r7, #16]
}
 80089ae:	bf00      	nop
 80089b0:	e7fe      	b.n	80089b0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80089b2:	697b      	ldr	r3, [r7, #20]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20002890 	.word	0x20002890
 80089c0:	0800c270 	.word	0x0800c270
 80089c4:	08008b09 	.word	0x08008b09
 80089c8:	20002894 	.word	0x20002894

080089cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089da:	2300      	movs	r3, #0
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10c      	bne.n	80089fe <xTimerGenericCommand+0x32>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	b672      	cpsid	i
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	b662      	cpsie	i
 80089f8:	623b      	str	r3, [r7, #32]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d02a      	beq.n	8008a5c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b05      	cmp	r3, #5
 8008a16:	dc18      	bgt.n	8008a4a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a18:	f7ff feaa 	bl	8008770 <xTaskGetSchedulerState>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d109      	bne.n	8008a36 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a22:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	f107 0110 	add.w	r1, r7, #16
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a2e:	f7fe fc8b 	bl	8007348 <xQueueGenericSend>
 8008a32:	6278      	str	r0, [r7, #36]	; 0x24
 8008a34:	e012      	b.n	8008a5c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	f107 0110 	add.w	r1, r7, #16
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2200      	movs	r2, #0
 8008a42:	f7fe fc81 	bl	8007348 <xQueueGenericSend>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24
 8008a48:	e008      	b.n	8008a5c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <xTimerGenericCommand+0x9c>)
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f107 0110 	add.w	r1, r7, #16
 8008a52:	2300      	movs	r3, #0
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	f7fe fd7d 	bl	8007554 <xQueueGenericSendFromISR>
 8008a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3728      	adds	r7, #40	; 0x28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20002890 	.word	0x20002890

08008a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a76:	4b23      	ldr	r3, [pc, #140]	; (8008b04 <prvProcessExpiredTimer+0x98>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe fb25 	bl	80070d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d024      	beq.n	8008ae2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	699a      	ldr	r2, [r3, #24]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	18d1      	adds	r1, r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	6978      	ldr	r0, [r7, #20]
 8008aa6:	f000 f8d3 	bl	8008c50 <prvInsertTimerInActiveList>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d021      	beq.n	8008af4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	6978      	ldr	r0, [r7, #20]
 8008abc:	f7ff ff86 	bl	80089cc <xTimerGenericCommand>
 8008ac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d115      	bne.n	8008af4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	b672      	cpsid	i
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	b662      	cpsie	i
 8008adc:	60fb      	str	r3, [r7, #12]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	6978      	ldr	r0, [r7, #20]
 8008afa:	4798      	blx	r3
}
 8008afc:	bf00      	nop
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20002888 	.word	0x20002888

08008b08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b10:	f107 0308 	add.w	r3, r7, #8
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 f857 	bl	8008bc8 <prvGetNextExpireTime>
 8008b1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f803 	bl	8008b2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b26:	f000 f8d5 	bl	8008cd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b2a:	e7f1      	b.n	8008b10 <prvTimerTask+0x8>

08008b2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b36:	f7ff fa15 	bl	8007f64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b3a:	f107 0308 	add.w	r3, r7, #8
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f866 	bl	8008c10 <prvSampleTimeNow>
 8008b44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d130      	bne.n	8008bae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <prvProcessTimerOrBlockTask+0x3c>
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d806      	bhi.n	8008b68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b5a:	f7ff fa11 	bl	8007f80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ff83 	bl	8008a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b66:	e024      	b.n	8008bb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d008      	beq.n	8008b80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <prvProcessTimerOrBlockTask+0x90>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <prvProcessTimerOrBlockTask+0x50>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <prvProcessTimerOrBlockTask+0x52>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b80:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <prvProcessTimerOrBlockTask+0x94>)
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f7fe ffa1 	bl	8007ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b92:	f7ff f9f5 	bl	8007f80 <xTaskResumeAll>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b9c:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <prvProcessTimerOrBlockTask+0x98>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	f3bf 8f6f 	isb	sy
}
 8008bac:	e001      	b.n	8008bb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bae:	f7ff f9e7 	bl	8007f80 <xTaskResumeAll>
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000288c 	.word	0x2000288c
 8008bc0:	20002890 	.word	0x20002890
 8008bc4:	e000ed04 	.word	0xe000ed04

08008bc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bd0:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <prvGetNextExpireTime+0x44>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <prvGetNextExpireTime+0x16>
 8008bda:	2201      	movs	r2, #1
 8008bdc:	e000      	b.n	8008be0 <prvGetNextExpireTime+0x18>
 8008bde:	2200      	movs	r2, #0
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bec:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <prvGetNextExpireTime+0x44>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e001      	b.n	8008bfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20002888 	.word	0x20002888

08008c10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c18:	f7ff fa52 	bl	80080c0 <xTaskGetTickCount>
 8008c1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <prvSampleTimeNow+0x3c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d205      	bcs.n	8008c34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c28:	f000 f93c 	bl	8008ea4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	e002      	b.n	8008c3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c3a:	4a04      	ldr	r2, [pc, #16]	; (8008c4c <prvSampleTimeNow+0x3c>)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c40:	68fb      	ldr	r3, [r7, #12]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20002898 	.word	0x20002898

08008c50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d812      	bhi.n	8008c9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d302      	bcc.n	8008c8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e01b      	b.n	8008cc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <prvInsertTimerInActiveList+0x7c>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f7fe f9e4 	bl	8007062 <vListInsert>
 8008c9a:	e012      	b.n	8008cc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d206      	bcs.n	8008cb2 <prvInsertTimerInActiveList+0x62>
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d302      	bcc.n	8008cb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	e007      	b.n	8008cc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <prvInsertTimerInActiveList+0x80>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7fe f9d0 	bl	8007062 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cc2:	697b      	ldr	r3, [r7, #20]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	2000288c 	.word	0x2000288c
 8008cd0:	20002888 	.word	0x20002888

08008cd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08e      	sub	sp, #56	; 0x38
 8008cd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cda:	e0d0      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da1a      	bge.n	8008d18 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ce2:	1d3b      	adds	r3, r7, #4
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10c      	bne.n	8008d08 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	b672      	cpsid	i
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	b662      	cpsie	i
 8008d02:	61fb      	str	r3, [r7, #28]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d0e:	6850      	ldr	r0, [r2, #4]
 8008d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d12:	6892      	ldr	r2, [r2, #8]
 8008d14:	4611      	mov	r1, r2
 8008d16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f2c0 80af 	blt.w	8008e7e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe f9cf 	bl	80070d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d36:	463b      	mov	r3, r7
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff ff69 	bl	8008c10 <prvSampleTimeNow>
 8008d3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b09      	cmp	r3, #9
 8008d44:	f200 809a 	bhi.w	8008e7c <prvProcessReceivedCommands+0x1a8>
 8008d48:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <prvProcessReceivedCommands+0x7c>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008d79 	.word	0x08008d79
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d79 	.word	0x08008d79
 8008d5c:	08008df1 	.word	0x08008df1
 8008d60:	08008e05 	.word	0x08008e05
 8008d64:	08008e53 	.word	0x08008e53
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008d79 	.word	0x08008d79
 8008d70:	08008df1 	.word	0x08008df1
 8008d74:	08008e05 	.word	0x08008e05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	18d1      	adds	r1, r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d98:	f7ff ff5a 	bl	8008c50 <prvInsertTimerInActiveList>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d06d      	beq.n	8008e7e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d062      	beq.n	8008e7e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	441a      	add	r2, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dca:	f7ff fdff 	bl	80089cc <xTimerGenericCommand>
 8008dce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d153      	bne.n	8008e7e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	b672      	cpsid	i
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	b662      	cpsie	i
 8008dea:	61bb      	str	r3, [r7, #24]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e02:	e03c      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10c      	bne.n	8008e3e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	b672      	cpsid	i
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	b662      	cpsie	i
 8008e38:	617b      	str	r3, [r7, #20]
}
 8008e3a:	bf00      	nop
 8008e3c:	e7fe      	b.n	8008e3c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	699a      	ldr	r2, [r3, #24]
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	18d1      	adds	r1, r2, r3
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4c:	f7ff ff00 	bl	8008c50 <prvInsertTimerInActiveList>
					break;
 8008e50:	e015      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d103      	bne.n	8008e68 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e62:	f000 fbc9 	bl	80095f8 <vPortFree>
 8008e66:	e00a      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e6e:	f023 0301 	bic.w	r3, r3, #1
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e7a:	e000      	b.n	8008e7e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8008e7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <prvProcessReceivedCommands+0x1cc>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	1d39      	adds	r1, r7, #4
 8008e84:	2200      	movs	r2, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fc04 	bl	8007694 <xQueueReceive>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f47f af24 	bne.w	8008cdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	3730      	adds	r7, #48	; 0x30
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20002890 	.word	0x20002890

08008ea4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eaa:	e04a      	b.n	8008f42 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eac:	4b2e      	ldr	r3, [pc, #184]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb6:	4b2c      	ldr	r3, [pc, #176]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe f905 	bl	80070d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d030      	beq.n	8008f42 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d90e      	bls.n	8008f10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008efe:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fe f8aa 	bl	8007062 <vListInsert>
 8008f0e:	e018      	b.n	8008f42 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f10:	2300      	movs	r3, #0
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	2300      	movs	r3, #0
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	2100      	movs	r1, #0
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff fd56 	bl	80089cc <xTimerGenericCommand>
 8008f20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10c      	bne.n	8008f42 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2c:	b672      	cpsid	i
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	b662      	cpsie	i
 8008f3c:	603b      	str	r3, [r7, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1af      	bne.n	8008eac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f52:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <prvSwitchTimerLists+0xc8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <prvSwitchTimerLists+0xc4>)
 8008f58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f5a:	4a04      	ldr	r2, [pc, #16]	; (8008f6c <prvSwitchTimerLists+0xc8>)
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	6013      	str	r3, [r2, #0]
}
 8008f60:	bf00      	nop
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20002888 	.word	0x20002888
 8008f6c:	2000288c 	.word	0x2000288c

08008f70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f76:	f000 f949 	bl	800920c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f7a:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d120      	bne.n	8008fc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f82:	4814      	ldr	r0, [pc, #80]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008f84:	f7fe f81c 	bl	8006fc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f88:	4813      	ldr	r0, [pc, #76]	; (8008fd8 <prvCheckForValidListAndQueue+0x68>)
 8008f8a:	f7fe f819 	bl	8006fc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f8e:	4b13      	ldr	r3, [pc, #76]	; (8008fdc <prvCheckForValidListAndQueue+0x6c>)
 8008f90:	4a10      	ldr	r2, [pc, #64]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008f92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <prvCheckForValidListAndQueue+0x70>)
 8008f96:	4a10      	ldr	r2, [pc, #64]	; (8008fd8 <prvCheckForValidListAndQueue+0x68>)
 8008f98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <prvCheckForValidListAndQueue+0x74>)
 8008fa0:	4a11      	ldr	r2, [pc, #68]	; (8008fe8 <prvCheckForValidListAndQueue+0x78>)
 8008fa2:	2110      	movs	r1, #16
 8008fa4:	200a      	movs	r0, #10
 8008fa6:	f7fe f929 	bl	80071fc <xQueueGenericCreateStatic>
 8008faa:	4603      	mov	r3, r0
 8008fac:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008fae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fb0:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <prvCheckForValidListAndQueue+0x60>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	490b      	ldr	r1, [pc, #44]	; (8008fec <prvCheckForValidListAndQueue+0x7c>)
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fd5e 	bl	8007a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fc4:	f000 f956 	bl	8009274 <vPortExitCritical>
}
 8008fc8:	bf00      	nop
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20002890 	.word	0x20002890
 8008fd4:	20002860 	.word	0x20002860
 8008fd8:	20002874 	.word	0x20002874
 8008fdc:	20002888 	.word	0x20002888
 8008fe0:	2000288c 	.word	0x2000288c
 8008fe4:	2000293c 	.word	0x2000293c
 8008fe8:	2000289c 	.word	0x2000289c
 8008fec:	0800c278 	.word	0x0800c278

08008ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3b04      	subs	r3, #4
 8009000:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3b04      	subs	r3, #4
 800900e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f023 0201 	bic.w	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3b04      	subs	r3, #4
 800901e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009020:	4a0c      	ldr	r2, [pc, #48]	; (8009054 <pxPortInitialiseStack+0x64>)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3b14      	subs	r3, #20
 800902a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3b04      	subs	r3, #4
 8009036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f06f 0202 	mvn.w	r2, #2
 800903e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3b20      	subs	r3, #32
 8009044:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009046:	68fb      	ldr	r3, [r7, #12]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	08009059 	.word	0x08009059

08009058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <prvTaskExitError+0x5c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906a:	d00c      	beq.n	8009086 <prvTaskExitError+0x2e>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	b672      	cpsid	i
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	b662      	cpsie	i
 8009080:	60fb      	str	r3, [r7, #12]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <prvTaskExitError+0x2c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	b672      	cpsid	i
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	b662      	cpsie	i
 800909a:	60bb      	str	r3, [r7, #8]
}
 800909c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800909e:	bf00      	nop
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0fc      	beq.n	80090a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090a6:	bf00      	nop
 80090a8:	bf00      	nop
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	20000014 	.word	0x20000014
	...

080090c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090c0:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <pxCurrentTCBConst2>)
 80090c2:	6819      	ldr	r1, [r3, #0]
 80090c4:	6808      	ldr	r0, [r1, #0]
 80090c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	f380 8809 	msr	PSP, r0
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f04f 0000 	mov.w	r0, #0
 80090d6:	f380 8811 	msr	BASEPRI, r0
 80090da:	4770      	bx	lr
 80090dc:	f3af 8000 	nop.w

080090e0 <pxCurrentTCBConst2>:
 80090e0:	20002360 	.word	0x20002360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop

080090e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090e8:	4808      	ldr	r0, [pc, #32]	; (800910c <prvPortStartFirstTask+0x24>)
 80090ea:	6800      	ldr	r0, [r0, #0]
 80090ec:	6800      	ldr	r0, [r0, #0]
 80090ee:	f380 8808 	msr	MSP, r0
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f380 8814 	msr	CONTROL, r0
 80090fa:	b662      	cpsie	i
 80090fc:	b661      	cpsie	f
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	df00      	svc	0
 8009108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800910a:	bf00      	nop
 800910c:	e000ed08 	.word	0xe000ed08

08009110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009116:	4b37      	ldr	r3, [pc, #220]	; (80091f4 <xPortStartScheduler+0xe4>)
 8009118:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009138:	b2da      	uxtb	r2, r3
 800913a:	4b2f      	ldr	r3, [pc, #188]	; (80091f8 <xPortStartScheduler+0xe8>)
 800913c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800913e:	4b2f      	ldr	r3, [pc, #188]	; (80091fc <xPortStartScheduler+0xec>)
 8009140:	2207      	movs	r2, #7
 8009142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009144:	e009      	b.n	800915a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009146:	4b2d      	ldr	r3, [pc, #180]	; (80091fc <xPortStartScheduler+0xec>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3b01      	subs	r3, #1
 800914c:	4a2b      	ldr	r2, [pc, #172]	; (80091fc <xPortStartScheduler+0xec>)
 800914e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	b2db      	uxtb	r3, r3
 8009158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d0ef      	beq.n	8009146 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009166:	4b25      	ldr	r3, [pc, #148]	; (80091fc <xPortStartScheduler+0xec>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1c3 0307 	rsb	r3, r3, #7
 800916e:	2b04      	cmp	r3, #4
 8009170:	d00c      	beq.n	800918c <xPortStartScheduler+0x7c>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	b672      	cpsid	i
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	b662      	cpsie	i
 8009186:	60bb      	str	r3, [r7, #8]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800918c:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <xPortStartScheduler+0xec>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	4a1a      	ldr	r2, [pc, #104]	; (80091fc <xPortStartScheduler+0xec>)
 8009194:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009196:	4b19      	ldr	r3, [pc, #100]	; (80091fc <xPortStartScheduler+0xec>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800919e:	4a17      	ldr	r2, [pc, #92]	; (80091fc <xPortStartScheduler+0xec>)
 80091a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <xPortStartScheduler+0xf0>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a14      	ldr	r2, [pc, #80]	; (8009200 <xPortStartScheduler+0xf0>)
 80091b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091b6:	4b12      	ldr	r3, [pc, #72]	; (8009200 <xPortStartScheduler+0xf0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a11      	ldr	r2, [pc, #68]	; (8009200 <xPortStartScheduler+0xf0>)
 80091bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80091c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091c2:	f000 f8dd 	bl	8009380 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <xPortStartScheduler+0xf4>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091cc:	f000 f8fc 	bl	80093c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091d0:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <xPortStartScheduler+0xf8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a0c      	ldr	r2, [pc, #48]	; (8009208 <xPortStartScheduler+0xf8>)
 80091d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80091da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091dc:	f7ff ff84 	bl	80090e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091e0:	f7ff f84c 	bl	800827c <vTaskSwitchContext>
	prvTaskExitError();
 80091e4:	f7ff ff38 	bl	8009058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	e000e400 	.word	0xe000e400
 80091f8:	2000298c 	.word	0x2000298c
 80091fc:	20002990 	.word	0x20002990
 8009200:	e000ed20 	.word	0xe000ed20
 8009204:	20000014 	.word	0x20000014
 8009208:	e000ef34 	.word	0xe000ef34

0800920c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	b672      	cpsid	i
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	b662      	cpsie	i
 8009226:	607b      	str	r3, [r7, #4]
}
 8009228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800922a:	4b10      	ldr	r3, [pc, #64]	; (800926c <vPortEnterCritical+0x60>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3301      	adds	r3, #1
 8009230:	4a0e      	ldr	r2, [pc, #56]	; (800926c <vPortEnterCritical+0x60>)
 8009232:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009234:	4b0d      	ldr	r3, [pc, #52]	; (800926c <vPortEnterCritical+0x60>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d111      	bne.n	8009260 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <vPortEnterCritical+0x64>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00c      	beq.n	8009260 <vPortEnterCritical+0x54>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	b672      	cpsid	i
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	b662      	cpsie	i
 800925a:	603b      	str	r3, [r7, #0]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <vPortEnterCritical+0x52>
	}
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	20000014 	.word	0x20000014
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800927a:	4b13      	ldr	r3, [pc, #76]	; (80092c8 <vPortExitCritical+0x54>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10c      	bne.n	800929c <vPortExitCritical+0x28>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	b672      	cpsid	i
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	b662      	cpsie	i
 8009296:	607b      	str	r3, [r7, #4]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800929c:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <vPortExitCritical+0x54>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	4a09      	ldr	r2, [pc, #36]	; (80092c8 <vPortExitCritical+0x54>)
 80092a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092a6:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <vPortExitCritical+0x54>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d105      	bne.n	80092ba <vPortExitCritical+0x46>
 80092ae:	2300      	movs	r3, #0
 80092b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f383 8811 	msr	BASEPRI, r3
}
 80092b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	20000014 	.word	0x20000014
 80092cc:	00000000 	.word	0x00000000

080092d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092d0:	f3ef 8009 	mrs	r0, PSP
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <pxCurrentTCBConst>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	f01e 0f10 	tst.w	lr, #16
 80092e0:	bf08      	it	eq
 80092e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	6010      	str	r0, [r2, #0]
 80092ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f380 8811 	msr	BASEPRI, r0
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	b662      	cpsie	i
 8009304:	f7fe ffba 	bl	800827c <vTaskSwitchContext>
 8009308:	f04f 0000 	mov.w	r0, #0
 800930c:	f380 8811 	msr	BASEPRI, r0
 8009310:	bc09      	pop	{r0, r3}
 8009312:	6819      	ldr	r1, [r3, #0]
 8009314:	6808      	ldr	r0, [r1, #0]
 8009316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931a:	f01e 0f10 	tst.w	lr, #16
 800931e:	bf08      	it	eq
 8009320:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009324:	f380 8809 	msr	PSP, r0
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop

08009330 <pxCurrentTCBConst>:
 8009330:	20002360 	.word	0x20002360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop

08009338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	b672      	cpsid	i
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	b662      	cpsie	i
 8009352:	607b      	str	r3, [r7, #4]
}
 8009354:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009356:	f7fe fed5 	bl	8008104 <xTaskIncrementTick>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <SysTick_Handler+0x44>)
 8009362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	2300      	movs	r3, #0
 800936a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	f383 8811 	msr	BASEPRI, r3
}
 8009372:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	e000ed04 	.word	0xe000ed04

08009380 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <vPortSetupTimerInterrupt+0x34>)
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800938a:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <vPortSetupTimerInterrupt+0x38>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <vPortSetupTimerInterrupt+0x3c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a0a      	ldr	r2, [pc, #40]	; (80093c0 <vPortSetupTimerInterrupt+0x40>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	099b      	lsrs	r3, r3, #6
 800939c:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <vPortSetupTimerInterrupt+0x44>)
 800939e:	3b01      	subs	r3, #1
 80093a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093a2:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <vPortSetupTimerInterrupt+0x34>)
 80093a4:	2207      	movs	r2, #7
 80093a6:	601a      	str	r2, [r3, #0]
}
 80093a8:	bf00      	nop
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	e000e010 	.word	0xe000e010
 80093b8:	e000e018 	.word	0xe000e018
 80093bc:	20000008 	.word	0x20000008
 80093c0:	10624dd3 	.word	0x10624dd3
 80093c4:	e000e014 	.word	0xe000e014

080093c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80093d8 <vPortEnableVFP+0x10>
 80093cc:	6801      	ldr	r1, [r0, #0]
 80093ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093d2:	6001      	str	r1, [r0, #0]
 80093d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093d6:	bf00      	nop
 80093d8:	e000ed88 	.word	0xe000ed88

080093dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093e2:	f3ef 8305 	mrs	r3, IPSR
 80093e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b0f      	cmp	r3, #15
 80093ec:	d916      	bls.n	800941c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093ee:	4a19      	ldr	r2, [pc, #100]	; (8009454 <vPortValidateInterruptPriority+0x78>)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093f8:	4b17      	ldr	r3, [pc, #92]	; (8009458 <vPortValidateInterruptPriority+0x7c>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	7afa      	ldrb	r2, [r7, #11]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d20c      	bcs.n	800941c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	b672      	cpsid	i
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	b662      	cpsie	i
 8009416:	607b      	str	r3, [r7, #4]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800941c:	4b0f      	ldr	r3, [pc, #60]	; (800945c <vPortValidateInterruptPriority+0x80>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <vPortValidateInterruptPriority+0x84>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d90c      	bls.n	8009446 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	b672      	cpsid	i
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	b662      	cpsie	i
 8009440:	603b      	str	r3, [r7, #0]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <vPortValidateInterruptPriority+0x68>
	}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	e000e3f0 	.word	0xe000e3f0
 8009458:	2000298c 	.word	0x2000298c
 800945c:	e000ed0c 	.word	0xe000ed0c
 8009460:	20002990 	.word	0x20002990

08009464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08a      	sub	sp, #40	; 0x28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800946c:	2300      	movs	r3, #0
 800946e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009470:	f7fe fd78 	bl	8007f64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009474:	4b5b      	ldr	r3, [pc, #364]	; (80095e4 <pvPortMalloc+0x180>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800947c:	f000 f91a 	bl	80096b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009480:	4b59      	ldr	r3, [pc, #356]	; (80095e8 <pvPortMalloc+0x184>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4013      	ands	r3, r2
 8009488:	2b00      	cmp	r3, #0
 800948a:	f040 8092 	bne.w	80095b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01f      	beq.n	80094d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009494:	2208      	movs	r2, #8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4413      	add	r3, r2
 800949a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d016      	beq.n	80094d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	3308      	adds	r3, #8
 80094ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00c      	beq.n	80094d4 <pvPortMalloc+0x70>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	b672      	cpsid	i
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	b662      	cpsie	i
 80094ce:	617b      	str	r3, [r7, #20]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d06b      	beq.n	80095b2 <pvPortMalloc+0x14e>
 80094da:	4b44      	ldr	r3, [pc, #272]	; (80095ec <pvPortMalloc+0x188>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d866      	bhi.n	80095b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094e4:	4b42      	ldr	r3, [pc, #264]	; (80095f0 <pvPortMalloc+0x18c>)
 80094e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094e8:	4b41      	ldr	r3, [pc, #260]	; (80095f0 <pvPortMalloc+0x18c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094ee:	e004      	b.n	80094fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d903      	bls.n	800950c <pvPortMalloc+0xa8>
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1f1      	bne.n	80094f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800950c:	4b35      	ldr	r3, [pc, #212]	; (80095e4 <pvPortMalloc+0x180>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009512:	429a      	cmp	r2, r3
 8009514:	d04d      	beq.n	80095b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2208      	movs	r2, #8
 800951c:	4413      	add	r3, r2
 800951e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	2308      	movs	r3, #8
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	429a      	cmp	r2, r3
 8009536:	d921      	bls.n	800957c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00c      	beq.n	8009564 <pvPortMalloc+0x100>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	b672      	cpsid	i
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	b662      	cpsie	i
 800955e:	613b      	str	r3, [r7, #16]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	1ad2      	subs	r2, r2, r3
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009576:	69b8      	ldr	r0, [r7, #24]
 8009578:	f000 f8fe 	bl	8009778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800957c:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <pvPortMalloc+0x188>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	4a19      	ldr	r2, [pc, #100]	; (80095ec <pvPortMalloc+0x188>)
 8009588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800958a:	4b18      	ldr	r3, [pc, #96]	; (80095ec <pvPortMalloc+0x188>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b19      	ldr	r3, [pc, #100]	; (80095f4 <pvPortMalloc+0x190>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d203      	bcs.n	800959e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009596:	4b15      	ldr	r3, [pc, #84]	; (80095ec <pvPortMalloc+0x188>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a16      	ldr	r2, [pc, #88]	; (80095f4 <pvPortMalloc+0x190>)
 800959c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	4b11      	ldr	r3, [pc, #68]	; (80095e8 <pvPortMalloc+0x184>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095b2:	f7fe fce5 	bl	8007f80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00c      	beq.n	80095da <pvPortMalloc+0x176>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	b672      	cpsid	i
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	b662      	cpsie	i
 80095d4:	60fb      	str	r3, [r7, #12]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <pvPortMalloc+0x174>
	return pvReturn;
 80095da:	69fb      	ldr	r3, [r7, #28]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3728      	adds	r7, #40	; 0x28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	2000659c 	.word	0x2000659c
 80095e8:	200065a8 	.word	0x200065a8
 80095ec:	200065a0 	.word	0x200065a0
 80095f0:	20006594 	.word	0x20006594
 80095f4:	200065a4 	.word	0x200065a4

080095f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d04c      	beq.n	80096a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800960a:	2308      	movs	r3, #8
 800960c:	425b      	negs	r3, r3
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	4413      	add	r3, r2
 8009612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	4b23      	ldr	r3, [pc, #140]	; (80096ac <vPortFree+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4013      	ands	r3, r2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10c      	bne.n	8009640 <vPortFree+0x48>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	b672      	cpsid	i
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	b662      	cpsie	i
 800963a:	60fb      	str	r3, [r7, #12]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00c      	beq.n	8009662 <vPortFree+0x6a>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	b672      	cpsid	i
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	b662      	cpsie	i
 800965c:	60bb      	str	r3, [r7, #8]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	4b11      	ldr	r3, [pc, #68]	; (80096ac <vPortFree+0xb4>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4013      	ands	r3, r2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d019      	beq.n	80096a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d115      	bne.n	80096a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <vPortFree+0xb4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	43db      	mvns	r3, r3
 8009682:	401a      	ands	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009688:	f7fe fc6c 	bl	8007f64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <vPortFree+0xb8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4413      	add	r3, r2
 8009696:	4a06      	ldr	r2, [pc, #24]	; (80096b0 <vPortFree+0xb8>)
 8009698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800969a:	6938      	ldr	r0, [r7, #16]
 800969c:	f000 f86c 	bl	8009778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80096a0:	f7fe fc6e 	bl	8007f80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	200065a8 	.word	0x200065a8
 80096b0:	200065a0 	.word	0x200065a0

080096b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80096be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096c0:	4b27      	ldr	r3, [pc, #156]	; (8009760 <prvHeapInit+0xac>)
 80096c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00c      	beq.n	80096e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0307 	bic.w	r3, r3, #7
 80096da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	4a1f      	ldr	r2, [pc, #124]	; (8009760 <prvHeapInit+0xac>)
 80096e4:	4413      	add	r3, r2
 80096e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096ec:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <prvHeapInit+0xb0>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096f2:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <prvHeapInit+0xb0>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	4413      	add	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009700:	2208      	movs	r2, #8
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a15      	ldr	r2, [pc, #84]	; (8009768 <prvHeapInit+0xb4>)
 8009714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <prvHeapInit+0xb4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800971e:	4b12      	ldr	r3, [pc, #72]	; (8009768 <prvHeapInit+0xb4>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <prvHeapInit+0xb4>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4a0a      	ldr	r2, [pc, #40]	; (800976c <prvHeapInit+0xb8>)
 8009742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	4a09      	ldr	r2, [pc, #36]	; (8009770 <prvHeapInit+0xbc>)
 800974a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <prvHeapInit+0xc0>)
 800974e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009752:	601a      	str	r2, [r3, #0]
}
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20002994 	.word	0x20002994
 8009764:	20006594 	.word	0x20006594
 8009768:	2000659c 	.word	0x2000659c
 800976c:	200065a4 	.word	0x200065a4
 8009770:	200065a0 	.word	0x200065a0
 8009774:	200065a8 	.word	0x200065a8

08009778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009780:	4b28      	ldr	r3, [pc, #160]	; (8009824 <prvInsertBlockIntoFreeList+0xac>)
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	e002      	b.n	800978c <prvInsertBlockIntoFreeList+0x14>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	429a      	cmp	r2, r3
 8009794:	d8f7      	bhi.n	8009786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4413      	add	r3, r2
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d108      	bne.n	80097ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	441a      	add	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d118      	bne.n	8009800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <prvInsertBlockIntoFreeList+0xb0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d00d      	beq.n	80097f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	441a      	add	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e008      	b.n	8009808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <prvInsertBlockIntoFreeList+0xb0>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e003      	b.n	8009808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	429a      	cmp	r2, r3
 800980e:	d002      	beq.n	8009816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009816:	bf00      	nop
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20006594 	.word	0x20006594
 8009828:	2000659c 	.word	0x2000659c

0800982c <__assert_func>:
 800982c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800982e:	4614      	mov	r4, r2
 8009830:	461a      	mov	r2, r3
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <__assert_func+0x2c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4605      	mov	r5, r0
 8009838:	68d8      	ldr	r0, [r3, #12]
 800983a:	b14c      	cbz	r4, 8009850 <__assert_func+0x24>
 800983c:	4b07      	ldr	r3, [pc, #28]	; (800985c <__assert_func+0x30>)
 800983e:	9100      	str	r1, [sp, #0]
 8009840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009844:	4906      	ldr	r1, [pc, #24]	; (8009860 <__assert_func+0x34>)
 8009846:	462b      	mov	r3, r5
 8009848:	f000 f984 	bl	8009b54 <fiprintf>
 800984c:	f000 fad5 	bl	8009dfa <abort>
 8009850:	4b04      	ldr	r3, [pc, #16]	; (8009864 <__assert_func+0x38>)
 8009852:	461c      	mov	r4, r3
 8009854:	e7f3      	b.n	800983e <__assert_func+0x12>
 8009856:	bf00      	nop
 8009858:	20000070 	.word	0x20000070
 800985c:	0800c2e4 	.word	0x0800c2e4
 8009860:	0800c2f1 	.word	0x0800c2f1
 8009864:	0800c31f 	.word	0x0800c31f

08009868 <calloc>:
 8009868:	4b02      	ldr	r3, [pc, #8]	; (8009874 <calloc+0xc>)
 800986a:	460a      	mov	r2, r1
 800986c:	4601      	mov	r1, r0
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	f000 b802 	b.w	8009878 <_calloc_r>
 8009874:	20000070 	.word	0x20000070

08009878 <_calloc_r>:
 8009878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800987a:	fba1 2402 	umull	r2, r4, r1, r2
 800987e:	b94c      	cbnz	r4, 8009894 <_calloc_r+0x1c>
 8009880:	4611      	mov	r1, r2
 8009882:	9201      	str	r2, [sp, #4]
 8009884:	f000 f836 	bl	80098f4 <_malloc_r>
 8009888:	9a01      	ldr	r2, [sp, #4]
 800988a:	4605      	mov	r5, r0
 800988c:	b930      	cbnz	r0, 800989c <_calloc_r+0x24>
 800988e:	4628      	mov	r0, r5
 8009890:	b003      	add	sp, #12
 8009892:	bd30      	pop	{r4, r5, pc}
 8009894:	220c      	movs	r2, #12
 8009896:	6002      	str	r2, [r0, #0]
 8009898:	2500      	movs	r5, #0
 800989a:	e7f8      	b.n	800988e <_calloc_r+0x16>
 800989c:	4621      	mov	r1, r4
 800989e:	f000 f9ee 	bl	8009c7e <memset>
 80098a2:	e7f4      	b.n	800988e <_calloc_r+0x16>

080098a4 <free>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	; (80098b0 <free+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f000 baad 	b.w	8009e08 <_free_r>
 80098ae:	bf00      	nop
 80098b0:	20000070 	.word	0x20000070

080098b4 <sbrk_aligned>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	4e0e      	ldr	r6, [pc, #56]	; (80098f0 <sbrk_aligned+0x3c>)
 80098b8:	460c      	mov	r4, r1
 80098ba:	6831      	ldr	r1, [r6, #0]
 80098bc:	4605      	mov	r5, r0
 80098be:	b911      	cbnz	r1, 80098c6 <sbrk_aligned+0x12>
 80098c0:	f000 fa3e 	bl	8009d40 <_sbrk_r>
 80098c4:	6030      	str	r0, [r6, #0]
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 fa39 	bl	8009d40 <_sbrk_r>
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	d00a      	beq.n	80098e8 <sbrk_aligned+0x34>
 80098d2:	1cc4      	adds	r4, r0, #3
 80098d4:	f024 0403 	bic.w	r4, r4, #3
 80098d8:	42a0      	cmp	r0, r4
 80098da:	d007      	beq.n	80098ec <sbrk_aligned+0x38>
 80098dc:	1a21      	subs	r1, r4, r0
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 fa2e 	bl	8009d40 <_sbrk_r>
 80098e4:	3001      	adds	r0, #1
 80098e6:	d101      	bne.n	80098ec <sbrk_aligned+0x38>
 80098e8:	f04f 34ff 	mov.w	r4, #4294967295
 80098ec:	4620      	mov	r0, r4
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	200065b0 	.word	0x200065b0

080098f4 <_malloc_r>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	1ccd      	adds	r5, r1, #3
 80098fa:	f025 0503 	bic.w	r5, r5, #3
 80098fe:	3508      	adds	r5, #8
 8009900:	2d0c      	cmp	r5, #12
 8009902:	bf38      	it	cc
 8009904:	250c      	movcc	r5, #12
 8009906:	2d00      	cmp	r5, #0
 8009908:	4607      	mov	r7, r0
 800990a:	db01      	blt.n	8009910 <_malloc_r+0x1c>
 800990c:	42a9      	cmp	r1, r5
 800990e:	d905      	bls.n	800991c <_malloc_r+0x28>
 8009910:	230c      	movs	r3, #12
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	2600      	movs	r6, #0
 8009916:	4630      	mov	r0, r6
 8009918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80099f0 <_malloc_r+0xfc>
 8009920:	f000 f868 	bl	80099f4 <__malloc_lock>
 8009924:	f8d8 3000 	ldr.w	r3, [r8]
 8009928:	461c      	mov	r4, r3
 800992a:	bb5c      	cbnz	r4, 8009984 <_malloc_r+0x90>
 800992c:	4629      	mov	r1, r5
 800992e:	4638      	mov	r0, r7
 8009930:	f7ff ffc0 	bl	80098b4 <sbrk_aligned>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	4604      	mov	r4, r0
 8009938:	d155      	bne.n	80099e6 <_malloc_r+0xf2>
 800993a:	f8d8 4000 	ldr.w	r4, [r8]
 800993e:	4626      	mov	r6, r4
 8009940:	2e00      	cmp	r6, #0
 8009942:	d145      	bne.n	80099d0 <_malloc_r+0xdc>
 8009944:	2c00      	cmp	r4, #0
 8009946:	d048      	beq.n	80099da <_malloc_r+0xe6>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	4631      	mov	r1, r6
 800994c:	4638      	mov	r0, r7
 800994e:	eb04 0903 	add.w	r9, r4, r3
 8009952:	f000 f9f5 	bl	8009d40 <_sbrk_r>
 8009956:	4581      	cmp	r9, r0
 8009958:	d13f      	bne.n	80099da <_malloc_r+0xe6>
 800995a:	6821      	ldr	r1, [r4, #0]
 800995c:	1a6d      	subs	r5, r5, r1
 800995e:	4629      	mov	r1, r5
 8009960:	4638      	mov	r0, r7
 8009962:	f7ff ffa7 	bl	80098b4 <sbrk_aligned>
 8009966:	3001      	adds	r0, #1
 8009968:	d037      	beq.n	80099da <_malloc_r+0xe6>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	442b      	add	r3, r5
 800996e:	6023      	str	r3, [r4, #0]
 8009970:	f8d8 3000 	ldr.w	r3, [r8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d038      	beq.n	80099ea <_malloc_r+0xf6>
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	42a2      	cmp	r2, r4
 800997c:	d12b      	bne.n	80099d6 <_malloc_r+0xe2>
 800997e:	2200      	movs	r2, #0
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	e00f      	b.n	80099a4 <_malloc_r+0xb0>
 8009984:	6822      	ldr	r2, [r4, #0]
 8009986:	1b52      	subs	r2, r2, r5
 8009988:	d41f      	bmi.n	80099ca <_malloc_r+0xd6>
 800998a:	2a0b      	cmp	r2, #11
 800998c:	d917      	bls.n	80099be <_malloc_r+0xca>
 800998e:	1961      	adds	r1, r4, r5
 8009990:	42a3      	cmp	r3, r4
 8009992:	6025      	str	r5, [r4, #0]
 8009994:	bf18      	it	ne
 8009996:	6059      	strne	r1, [r3, #4]
 8009998:	6863      	ldr	r3, [r4, #4]
 800999a:	bf08      	it	eq
 800999c:	f8c8 1000 	streq.w	r1, [r8]
 80099a0:	5162      	str	r2, [r4, r5]
 80099a2:	604b      	str	r3, [r1, #4]
 80099a4:	4638      	mov	r0, r7
 80099a6:	f104 060b 	add.w	r6, r4, #11
 80099aa:	f000 f829 	bl	8009a00 <__malloc_unlock>
 80099ae:	f026 0607 	bic.w	r6, r6, #7
 80099b2:	1d23      	adds	r3, r4, #4
 80099b4:	1af2      	subs	r2, r6, r3
 80099b6:	d0ae      	beq.n	8009916 <_malloc_r+0x22>
 80099b8:	1b9b      	subs	r3, r3, r6
 80099ba:	50a3      	str	r3, [r4, r2]
 80099bc:	e7ab      	b.n	8009916 <_malloc_r+0x22>
 80099be:	42a3      	cmp	r3, r4
 80099c0:	6862      	ldr	r2, [r4, #4]
 80099c2:	d1dd      	bne.n	8009980 <_malloc_r+0x8c>
 80099c4:	f8c8 2000 	str.w	r2, [r8]
 80099c8:	e7ec      	b.n	80099a4 <_malloc_r+0xb0>
 80099ca:	4623      	mov	r3, r4
 80099cc:	6864      	ldr	r4, [r4, #4]
 80099ce:	e7ac      	b.n	800992a <_malloc_r+0x36>
 80099d0:	4634      	mov	r4, r6
 80099d2:	6876      	ldr	r6, [r6, #4]
 80099d4:	e7b4      	b.n	8009940 <_malloc_r+0x4c>
 80099d6:	4613      	mov	r3, r2
 80099d8:	e7cc      	b.n	8009974 <_malloc_r+0x80>
 80099da:	230c      	movs	r3, #12
 80099dc:	603b      	str	r3, [r7, #0]
 80099de:	4638      	mov	r0, r7
 80099e0:	f000 f80e 	bl	8009a00 <__malloc_unlock>
 80099e4:	e797      	b.n	8009916 <_malloc_r+0x22>
 80099e6:	6025      	str	r5, [r4, #0]
 80099e8:	e7dc      	b.n	80099a4 <_malloc_r+0xb0>
 80099ea:	605b      	str	r3, [r3, #4]
 80099ec:	deff      	udf	#255	; 0xff
 80099ee:	bf00      	nop
 80099f0:	200065ac 	.word	0x200065ac

080099f4 <__malloc_lock>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__malloc_lock+0x8>)
 80099f6:	f000 b9f0 	b.w	8009dda <__retarget_lock_acquire_recursive>
 80099fa:	bf00      	nop
 80099fc:	200066f4 	.word	0x200066f4

08009a00 <__malloc_unlock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	; (8009a08 <__malloc_unlock+0x8>)
 8009a02:	f000 b9eb 	b.w	8009ddc <__retarget_lock_release_recursive>
 8009a06:	bf00      	nop
 8009a08:	200066f4 	.word	0x200066f4

08009a0c <std>:
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	4604      	mov	r4, r0
 8009a12:	e9c0 3300 	strd	r3, r3, [r0]
 8009a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a1a:	6083      	str	r3, [r0, #8]
 8009a1c:	8181      	strh	r1, [r0, #12]
 8009a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009a20:	81c2      	strh	r2, [r0, #14]
 8009a22:	6183      	str	r3, [r0, #24]
 8009a24:	4619      	mov	r1, r3
 8009a26:	2208      	movs	r2, #8
 8009a28:	305c      	adds	r0, #92	; 0x5c
 8009a2a:	f000 f928 	bl	8009c7e <memset>
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <std+0x58>)
 8009a30:	6263      	str	r3, [r4, #36]	; 0x24
 8009a32:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <std+0x5c>)
 8009a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a36:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <std+0x60>)
 8009a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <std+0x64>)
 8009a3c:	6323      	str	r3, [r4, #48]	; 0x30
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <std+0x68>)
 8009a40:	6224      	str	r4, [r4, #32]
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d006      	beq.n	8009a54 <std+0x48>
 8009a46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a4a:	4294      	cmp	r4, r2
 8009a4c:	d002      	beq.n	8009a54 <std+0x48>
 8009a4e:	33d0      	adds	r3, #208	; 0xd0
 8009a50:	429c      	cmp	r4, r3
 8009a52:	d105      	bne.n	8009a60 <std+0x54>
 8009a54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5c:	f000 b9bc 	b.w	8009dd8 <__retarget_lock_init_recursive>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	bf00      	nop
 8009a64:	08009bc5 	.word	0x08009bc5
 8009a68:	08009be7 	.word	0x08009be7
 8009a6c:	08009c1f 	.word	0x08009c1f
 8009a70:	08009c43 	.word	0x08009c43
 8009a74:	200065b4 	.word	0x200065b4

08009a78 <stdio_exit_handler>:
 8009a78:	4a02      	ldr	r2, [pc, #8]	; (8009a84 <stdio_exit_handler+0xc>)
 8009a7a:	4903      	ldr	r1, [pc, #12]	; (8009a88 <stdio_exit_handler+0x10>)
 8009a7c:	4803      	ldr	r0, [pc, #12]	; (8009a8c <stdio_exit_handler+0x14>)
 8009a7e:	f000 b87b 	b.w	8009b78 <_fwalk_sglue>
 8009a82:	bf00      	nop
 8009a84:	20000018 	.word	0x20000018
 8009a88:	0800a555 	.word	0x0800a555
 8009a8c:	20000024 	.word	0x20000024

08009a90 <cleanup_stdio>:
 8009a90:	6841      	ldr	r1, [r0, #4]
 8009a92:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <cleanup_stdio+0x34>)
 8009a94:	4299      	cmp	r1, r3
 8009a96:	b510      	push	{r4, lr}
 8009a98:	4604      	mov	r4, r0
 8009a9a:	d001      	beq.n	8009aa0 <cleanup_stdio+0x10>
 8009a9c:	f000 fd5a 	bl	800a554 <_fflush_r>
 8009aa0:	68a1      	ldr	r1, [r4, #8]
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <cleanup_stdio+0x38>)
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	d002      	beq.n	8009aae <cleanup_stdio+0x1e>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fd53 	bl	800a554 <_fflush_r>
 8009aae:	68e1      	ldr	r1, [r4, #12]
 8009ab0:	4b06      	ldr	r3, [pc, #24]	; (8009acc <cleanup_stdio+0x3c>)
 8009ab2:	4299      	cmp	r1, r3
 8009ab4:	d004      	beq.n	8009ac0 <cleanup_stdio+0x30>
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009abc:	f000 bd4a 	b.w	800a554 <_fflush_r>
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	bf00      	nop
 8009ac4:	200065b4 	.word	0x200065b4
 8009ac8:	2000661c 	.word	0x2000661c
 8009acc:	20006684 	.word	0x20006684

08009ad0 <global_stdio_init.part.0>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <global_stdio_init.part.0+0x30>)
 8009ad4:	4c0b      	ldr	r4, [pc, #44]	; (8009b04 <global_stdio_init.part.0+0x34>)
 8009ad6:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <global_stdio_init.part.0+0x38>)
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	4620      	mov	r0, r4
 8009adc:	2200      	movs	r2, #0
 8009ade:	2104      	movs	r1, #4
 8009ae0:	f7ff ff94 	bl	8009a0c <std>
 8009ae4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ae8:	2201      	movs	r2, #1
 8009aea:	2109      	movs	r1, #9
 8009aec:	f7ff ff8e 	bl	8009a0c <std>
 8009af0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009af4:	2202      	movs	r2, #2
 8009af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afa:	2112      	movs	r1, #18
 8009afc:	f7ff bf86 	b.w	8009a0c <std>
 8009b00:	200066ec 	.word	0x200066ec
 8009b04:	200065b4 	.word	0x200065b4
 8009b08:	08009a79 	.word	0x08009a79

08009b0c <__sfp_lock_acquire>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	; (8009b14 <__sfp_lock_acquire+0x8>)
 8009b0e:	f000 b964 	b.w	8009dda <__retarget_lock_acquire_recursive>
 8009b12:	bf00      	nop
 8009b14:	200066f5 	.word	0x200066f5

08009b18 <__sfp_lock_release>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__sfp_lock_release+0x8>)
 8009b1a:	f000 b95f 	b.w	8009ddc <__retarget_lock_release_recursive>
 8009b1e:	bf00      	nop
 8009b20:	200066f5 	.word	0x200066f5

08009b24 <__sinit>:
 8009b24:	b510      	push	{r4, lr}
 8009b26:	4604      	mov	r4, r0
 8009b28:	f7ff fff0 	bl	8009b0c <__sfp_lock_acquire>
 8009b2c:	6a23      	ldr	r3, [r4, #32]
 8009b2e:	b11b      	cbz	r3, 8009b38 <__sinit+0x14>
 8009b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b34:	f7ff bff0 	b.w	8009b18 <__sfp_lock_release>
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <__sinit+0x28>)
 8009b3a:	6223      	str	r3, [r4, #32]
 8009b3c:	4b04      	ldr	r3, [pc, #16]	; (8009b50 <__sinit+0x2c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1f5      	bne.n	8009b30 <__sinit+0xc>
 8009b44:	f7ff ffc4 	bl	8009ad0 <global_stdio_init.part.0>
 8009b48:	e7f2      	b.n	8009b30 <__sinit+0xc>
 8009b4a:	bf00      	nop
 8009b4c:	08009a91 	.word	0x08009a91
 8009b50:	200066ec 	.word	0x200066ec

08009b54 <fiprintf>:
 8009b54:	b40e      	push	{r1, r2, r3}
 8009b56:	b503      	push	{r0, r1, lr}
 8009b58:	4601      	mov	r1, r0
 8009b5a:	ab03      	add	r3, sp, #12
 8009b5c:	4805      	ldr	r0, [pc, #20]	; (8009b74 <fiprintf+0x20>)
 8009b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b62:	6800      	ldr	r0, [r0, #0]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	f000 f9c5 	bl	8009ef4 <_vfiprintf_r>
 8009b6a:	b002      	add	sp, #8
 8009b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b70:	b003      	add	sp, #12
 8009b72:	4770      	bx	lr
 8009b74:	20000070 	.word	0x20000070

08009b78 <_fwalk_sglue>:
 8009b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	4688      	mov	r8, r1
 8009b80:	4614      	mov	r4, r2
 8009b82:	2600      	movs	r6, #0
 8009b84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b88:	f1b9 0901 	subs.w	r9, r9, #1
 8009b8c:	d505      	bpl.n	8009b9a <_fwalk_sglue+0x22>
 8009b8e:	6824      	ldr	r4, [r4, #0]
 8009b90:	2c00      	cmp	r4, #0
 8009b92:	d1f7      	bne.n	8009b84 <_fwalk_sglue+0xc>
 8009b94:	4630      	mov	r0, r6
 8009b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b9a:	89ab      	ldrh	r3, [r5, #12]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d907      	bls.n	8009bb0 <_fwalk_sglue+0x38>
 8009ba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	d003      	beq.n	8009bb0 <_fwalk_sglue+0x38>
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c0      	blx	r8
 8009bae:	4306      	orrs	r6, r0
 8009bb0:	3568      	adds	r5, #104	; 0x68
 8009bb2:	e7e9      	b.n	8009b88 <_fwalk_sglue+0x10>

08009bb4 <putchar>:
 8009bb4:	4b02      	ldr	r3, [pc, #8]	; (8009bc0 <putchar+0xc>)
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	6882      	ldr	r2, [r0, #8]
 8009bbc:	f000 bcf2 	b.w	800a5a4 <_putc_r>
 8009bc0:	20000070 	.word	0x20000070

08009bc4 <__sread>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bcc:	f000 f8a6 	bl	8009d1c <_read_r>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	bfab      	itete	ge
 8009bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8009bd8:	181b      	addge	r3, r3, r0
 8009bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bde:	bfac      	ite	ge
 8009be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009be2:	81a3      	strhlt	r3, [r4, #12]
 8009be4:	bd10      	pop	{r4, pc}

08009be6 <__swrite>:
 8009be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bea:	461f      	mov	r7, r3
 8009bec:	898b      	ldrh	r3, [r1, #12]
 8009bee:	05db      	lsls	r3, r3, #23
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	d505      	bpl.n	8009c04 <__swrite+0x1e>
 8009bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f000 f87a 	bl	8009cf8 <_lseek_r>
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	4632      	mov	r2, r6
 8009c12:	463b      	mov	r3, r7
 8009c14:	4628      	mov	r0, r5
 8009c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1a:	f000 b8a1 	b.w	8009d60 <_write_r>

08009c1e <__sseek>:
 8009c1e:	b510      	push	{r4, lr}
 8009c20:	460c      	mov	r4, r1
 8009c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c26:	f000 f867 	bl	8009cf8 <_lseek_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	bf15      	itete	ne
 8009c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c3a:	81a3      	strheq	r3, [r4, #12]
 8009c3c:	bf18      	it	ne
 8009c3e:	81a3      	strhne	r3, [r4, #12]
 8009c40:	bd10      	pop	{r4, pc}

08009c42 <__sclose>:
 8009c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c46:	f000 b847 	b.w	8009cd8 <_close_r>

08009c4a <memmove>:
 8009c4a:	4288      	cmp	r0, r1
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	eb01 0402 	add.w	r4, r1, r2
 8009c52:	d902      	bls.n	8009c5a <memmove+0x10>
 8009c54:	4284      	cmp	r4, r0
 8009c56:	4623      	mov	r3, r4
 8009c58:	d807      	bhi.n	8009c6a <memmove+0x20>
 8009c5a:	1e43      	subs	r3, r0, #1
 8009c5c:	42a1      	cmp	r1, r4
 8009c5e:	d008      	beq.n	8009c72 <memmove+0x28>
 8009c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c68:	e7f8      	b.n	8009c5c <memmove+0x12>
 8009c6a:	4402      	add	r2, r0
 8009c6c:	4601      	mov	r1, r0
 8009c6e:	428a      	cmp	r2, r1
 8009c70:	d100      	bne.n	8009c74 <memmove+0x2a>
 8009c72:	bd10      	pop	{r4, pc}
 8009c74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c7c:	e7f7      	b.n	8009c6e <memmove+0x24>

08009c7e <memset>:
 8009c7e:	4402      	add	r2, r0
 8009c80:	4603      	mov	r3, r0
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d100      	bne.n	8009c88 <memset+0xa>
 8009c86:	4770      	bx	lr
 8009c88:	f803 1b01 	strb.w	r1, [r3], #1
 8009c8c:	e7f9      	b.n	8009c82 <memset+0x4>

08009c8e <strchr>:
 8009c8e:	b2c9      	uxtb	r1, r1
 8009c90:	4603      	mov	r3, r0
 8009c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c96:	b11a      	cbz	r2, 8009ca0 <strchr+0x12>
 8009c98:	428a      	cmp	r2, r1
 8009c9a:	d1f9      	bne.n	8009c90 <strchr+0x2>
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	4770      	bx	lr
 8009ca0:	2900      	cmp	r1, #0
 8009ca2:	bf18      	it	ne
 8009ca4:	2300      	movne	r3, #0
 8009ca6:	e7f9      	b.n	8009c9c <strchr+0xe>

08009ca8 <strrchr>:
 8009ca8:	b513      	push	{r0, r1, r4, lr}
 8009caa:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009cae:	4603      	mov	r3, r0
 8009cb0:	d110      	bne.n	8009cd4 <strrchr+0x2c>
 8009cb2:	b002      	add	sp, #8
 8009cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb8:	f7ff bfe9 	b.w	8009c8e <strchr>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	9101      	str	r1, [sp, #4]
 8009cc4:	f7ff ffe3 	bl	8009c8e <strchr>
 8009cc8:	9901      	ldr	r1, [sp, #4]
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d1f6      	bne.n	8009cbc <strrchr+0x14>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	b002      	add	sp, #8
 8009cd2:	bd10      	pop	{r4, pc}
 8009cd4:	2400      	movs	r4, #0
 8009cd6:	e7f3      	b.n	8009cc0 <strrchr+0x18>

08009cd8 <_close_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d06      	ldr	r5, [pc, #24]	; (8009cf4 <_close_r+0x1c>)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	602b      	str	r3, [r5, #0]
 8009ce4:	f7f9 fa1e 	bl	8003124 <_close>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_close_r+0x1a>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_close_r+0x1a>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	200066f0 	.word	0x200066f0

08009cf8 <_lseek_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d07      	ldr	r5, [pc, #28]	; (8009d18 <_lseek_r+0x20>)
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	4608      	mov	r0, r1
 8009d00:	4611      	mov	r1, r2
 8009d02:	2200      	movs	r2, #0
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	f7f9 fa33 	bl	8003172 <_lseek>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d102      	bne.n	8009d16 <_lseek_r+0x1e>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	b103      	cbz	r3, 8009d16 <_lseek_r+0x1e>
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	200066f0 	.word	0x200066f0

08009d1c <_read_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d07      	ldr	r5, [pc, #28]	; (8009d3c <_read_r+0x20>)
 8009d20:	4604      	mov	r4, r0
 8009d22:	4608      	mov	r0, r1
 8009d24:	4611      	mov	r1, r2
 8009d26:	2200      	movs	r2, #0
 8009d28:	602a      	str	r2, [r5, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f7f9 f9c4 	bl	80030b8 <_read>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_read_r+0x1e>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_read_r+0x1e>
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	200066f0 	.word	0x200066f0

08009d40 <_sbrk_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d06      	ldr	r5, [pc, #24]	; (8009d5c <_sbrk_r+0x1c>)
 8009d44:	2300      	movs	r3, #0
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	602b      	str	r3, [r5, #0]
 8009d4c:	f7f9 fa1e 	bl	800318c <_sbrk>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_sbrk_r+0x1a>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_sbrk_r+0x1a>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	200066f0 	.word	0x200066f0

08009d60 <_write_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d07      	ldr	r5, [pc, #28]	; (8009d80 <_write_r+0x20>)
 8009d64:	4604      	mov	r4, r0
 8009d66:	4608      	mov	r0, r1
 8009d68:	4611      	mov	r1, r2
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	602a      	str	r2, [r5, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f7f9 f9c0 	bl	80030f4 <_write>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d102      	bne.n	8009d7e <_write_r+0x1e>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	b103      	cbz	r3, 8009d7e <_write_r+0x1e>
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	200066f0 	.word	0x200066f0

08009d84 <__errno>:
 8009d84:	4b01      	ldr	r3, [pc, #4]	; (8009d8c <__errno+0x8>)
 8009d86:	6818      	ldr	r0, [r3, #0]
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000070 	.word	0x20000070

08009d90 <__libc_init_array>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	4d0d      	ldr	r5, [pc, #52]	; (8009dc8 <__libc_init_array+0x38>)
 8009d94:	4c0d      	ldr	r4, [pc, #52]	; (8009dcc <__libc_init_array+0x3c>)
 8009d96:	1b64      	subs	r4, r4, r5
 8009d98:	10a4      	asrs	r4, r4, #2
 8009d9a:	2600      	movs	r6, #0
 8009d9c:	42a6      	cmp	r6, r4
 8009d9e:	d109      	bne.n	8009db4 <__libc_init_array+0x24>
 8009da0:	4d0b      	ldr	r5, [pc, #44]	; (8009dd0 <__libc_init_array+0x40>)
 8009da2:	4c0c      	ldr	r4, [pc, #48]	; (8009dd4 <__libc_init_array+0x44>)
 8009da4:	f000 fd90 	bl	800a8c8 <_init>
 8009da8:	1b64      	subs	r4, r4, r5
 8009daa:	10a4      	asrs	r4, r4, #2
 8009dac:	2600      	movs	r6, #0
 8009dae:	42a6      	cmp	r6, r4
 8009db0:	d105      	bne.n	8009dbe <__libc_init_array+0x2e>
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db8:	4798      	blx	r3
 8009dba:	3601      	adds	r6, #1
 8009dbc:	e7ee      	b.n	8009d9c <__libc_init_array+0xc>
 8009dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dc2:	4798      	blx	r3
 8009dc4:	3601      	adds	r6, #1
 8009dc6:	e7f2      	b.n	8009dae <__libc_init_array+0x1e>
 8009dc8:	0800c35c 	.word	0x0800c35c
 8009dcc:	0800c35c 	.word	0x0800c35c
 8009dd0:	0800c35c 	.word	0x0800c35c
 8009dd4:	0800c360 	.word	0x0800c360

08009dd8 <__retarget_lock_init_recursive>:
 8009dd8:	4770      	bx	lr

08009dda <__retarget_lock_acquire_recursive>:
 8009dda:	4770      	bx	lr

08009ddc <__retarget_lock_release_recursive>:
 8009ddc:	4770      	bx	lr

08009dde <memcpy>:
 8009dde:	440a      	add	r2, r1
 8009de0:	4291      	cmp	r1, r2
 8009de2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009de6:	d100      	bne.n	8009dea <memcpy+0xc>
 8009de8:	4770      	bx	lr
 8009dea:	b510      	push	{r4, lr}
 8009dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009df4:	4291      	cmp	r1, r2
 8009df6:	d1f9      	bne.n	8009dec <memcpy+0xe>
 8009df8:	bd10      	pop	{r4, pc}

08009dfa <abort>:
 8009dfa:	b508      	push	{r3, lr}
 8009dfc:	2006      	movs	r0, #6
 8009dfe:	f000 fcc3 	bl	800a788 <raise>
 8009e02:	2001      	movs	r0, #1
 8009e04:	f7f9 f94e 	bl	80030a4 <_exit>

08009e08 <_free_r>:
 8009e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e0a:	2900      	cmp	r1, #0
 8009e0c:	d044      	beq.n	8009e98 <_free_r+0x90>
 8009e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e12:	9001      	str	r0, [sp, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f1a1 0404 	sub.w	r4, r1, #4
 8009e1a:	bfb8      	it	lt
 8009e1c:	18e4      	addlt	r4, r4, r3
 8009e1e:	f7ff fde9 	bl	80099f4 <__malloc_lock>
 8009e22:	4a1e      	ldr	r2, [pc, #120]	; (8009e9c <_free_r+0x94>)
 8009e24:	9801      	ldr	r0, [sp, #4]
 8009e26:	6813      	ldr	r3, [r2, #0]
 8009e28:	b933      	cbnz	r3, 8009e38 <_free_r+0x30>
 8009e2a:	6063      	str	r3, [r4, #4]
 8009e2c:	6014      	str	r4, [r2, #0]
 8009e2e:	b003      	add	sp, #12
 8009e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e34:	f7ff bde4 	b.w	8009a00 <__malloc_unlock>
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	d908      	bls.n	8009e4e <_free_r+0x46>
 8009e3c:	6825      	ldr	r5, [r4, #0]
 8009e3e:	1961      	adds	r1, r4, r5
 8009e40:	428b      	cmp	r3, r1
 8009e42:	bf01      	itttt	eq
 8009e44:	6819      	ldreq	r1, [r3, #0]
 8009e46:	685b      	ldreq	r3, [r3, #4]
 8009e48:	1949      	addeq	r1, r1, r5
 8009e4a:	6021      	streq	r1, [r4, #0]
 8009e4c:	e7ed      	b.n	8009e2a <_free_r+0x22>
 8009e4e:	461a      	mov	r2, r3
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	b10b      	cbz	r3, 8009e58 <_free_r+0x50>
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	d9fa      	bls.n	8009e4e <_free_r+0x46>
 8009e58:	6811      	ldr	r1, [r2, #0]
 8009e5a:	1855      	adds	r5, r2, r1
 8009e5c:	42a5      	cmp	r5, r4
 8009e5e:	d10b      	bne.n	8009e78 <_free_r+0x70>
 8009e60:	6824      	ldr	r4, [r4, #0]
 8009e62:	4421      	add	r1, r4
 8009e64:	1854      	adds	r4, r2, r1
 8009e66:	42a3      	cmp	r3, r4
 8009e68:	6011      	str	r1, [r2, #0]
 8009e6a:	d1e0      	bne.n	8009e2e <_free_r+0x26>
 8009e6c:	681c      	ldr	r4, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	6053      	str	r3, [r2, #4]
 8009e72:	440c      	add	r4, r1
 8009e74:	6014      	str	r4, [r2, #0]
 8009e76:	e7da      	b.n	8009e2e <_free_r+0x26>
 8009e78:	d902      	bls.n	8009e80 <_free_r+0x78>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	e7d6      	b.n	8009e2e <_free_r+0x26>
 8009e80:	6825      	ldr	r5, [r4, #0]
 8009e82:	1961      	adds	r1, r4, r5
 8009e84:	428b      	cmp	r3, r1
 8009e86:	bf04      	itt	eq
 8009e88:	6819      	ldreq	r1, [r3, #0]
 8009e8a:	685b      	ldreq	r3, [r3, #4]
 8009e8c:	6063      	str	r3, [r4, #4]
 8009e8e:	bf04      	itt	eq
 8009e90:	1949      	addeq	r1, r1, r5
 8009e92:	6021      	streq	r1, [r4, #0]
 8009e94:	6054      	str	r4, [r2, #4]
 8009e96:	e7ca      	b.n	8009e2e <_free_r+0x26>
 8009e98:	b003      	add	sp, #12
 8009e9a:	bd30      	pop	{r4, r5, pc}
 8009e9c:	200065ac 	.word	0x200065ac

08009ea0 <__sfputc_r>:
 8009ea0:	6893      	ldr	r3, [r2, #8]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	b410      	push	{r4}
 8009ea8:	6093      	str	r3, [r2, #8]
 8009eaa:	da08      	bge.n	8009ebe <__sfputc_r+0x1e>
 8009eac:	6994      	ldr	r4, [r2, #24]
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	db01      	blt.n	8009eb6 <__sfputc_r+0x16>
 8009eb2:	290a      	cmp	r1, #10
 8009eb4:	d103      	bne.n	8009ebe <__sfputc_r+0x1e>
 8009eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eba:	f000 bba7 	b.w	800a60c <__swbuf_r>
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	1c58      	adds	r0, r3, #1
 8009ec2:	6010      	str	r0, [r2, #0]
 8009ec4:	7019      	strb	r1, [r3, #0]
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <__sfputs_r>:
 8009ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	18d5      	adds	r5, r2, r3
 8009ed8:	42ac      	cmp	r4, r5
 8009eda:	d101      	bne.n	8009ee0 <__sfputs_r+0x12>
 8009edc:	2000      	movs	r0, #0
 8009ede:	e007      	b.n	8009ef0 <__sfputs_r+0x22>
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	463a      	mov	r2, r7
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ffda 	bl	8009ea0 <__sfputc_r>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d1f3      	bne.n	8009ed8 <__sfputs_r+0xa>
 8009ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef4 <_vfiprintf_r>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	460d      	mov	r5, r1
 8009efa:	b09d      	sub	sp, #116	; 0x74
 8009efc:	4614      	mov	r4, r2
 8009efe:	4698      	mov	r8, r3
 8009f00:	4606      	mov	r6, r0
 8009f02:	b118      	cbz	r0, 8009f0c <_vfiprintf_r+0x18>
 8009f04:	6a03      	ldr	r3, [r0, #32]
 8009f06:	b90b      	cbnz	r3, 8009f0c <_vfiprintf_r+0x18>
 8009f08:	f7ff fe0c 	bl	8009b24 <__sinit>
 8009f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f0e:	07d9      	lsls	r1, r3, #31
 8009f10:	d405      	bmi.n	8009f1e <_vfiprintf_r+0x2a>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	059a      	lsls	r2, r3, #22
 8009f16:	d402      	bmi.n	8009f1e <_vfiprintf_r+0x2a>
 8009f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1a:	f7ff ff5e 	bl	8009dda <__retarget_lock_acquire_recursive>
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	071b      	lsls	r3, r3, #28
 8009f22:	d501      	bpl.n	8009f28 <_vfiprintf_r+0x34>
 8009f24:	692b      	ldr	r3, [r5, #16]
 8009f26:	b99b      	cbnz	r3, 8009f50 <_vfiprintf_r+0x5c>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 fbac 	bl	800a688 <__swsetup_r>
 8009f30:	b170      	cbz	r0, 8009f50 <_vfiprintf_r+0x5c>
 8009f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f34:	07dc      	lsls	r4, r3, #31
 8009f36:	d504      	bpl.n	8009f42 <_vfiprintf_r+0x4e>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	b01d      	add	sp, #116	; 0x74
 8009f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	0598      	lsls	r0, r3, #22
 8009f46:	d4f7      	bmi.n	8009f38 <_vfiprintf_r+0x44>
 8009f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4a:	f7ff ff47 	bl	8009ddc <__retarget_lock_release_recursive>
 8009f4e:	e7f3      	b.n	8009f38 <_vfiprintf_r+0x44>
 8009f50:	2300      	movs	r3, #0
 8009f52:	9309      	str	r3, [sp, #36]	; 0x24
 8009f54:	2320      	movs	r3, #32
 8009f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f5e:	2330      	movs	r3, #48	; 0x30
 8009f60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a114 <_vfiprintf_r+0x220>
 8009f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f68:	f04f 0901 	mov.w	r9, #1
 8009f6c:	4623      	mov	r3, r4
 8009f6e:	469a      	mov	sl, r3
 8009f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f74:	b10a      	cbz	r2, 8009f7a <_vfiprintf_r+0x86>
 8009f76:	2a25      	cmp	r2, #37	; 0x25
 8009f78:	d1f9      	bne.n	8009f6e <_vfiprintf_r+0x7a>
 8009f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f7e:	d00b      	beq.n	8009f98 <_vfiprintf_r+0xa4>
 8009f80:	465b      	mov	r3, fp
 8009f82:	4622      	mov	r2, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7ff ffa1 	bl	8009ece <__sfputs_r>
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f000 80a9 	beq.w	800a0e4 <_vfiprintf_r+0x1f0>
 8009f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f94:	445a      	add	r2, fp
 8009f96:	9209      	str	r2, [sp, #36]	; 0x24
 8009f98:	f89a 3000 	ldrb.w	r3, [sl]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 80a1 	beq.w	800a0e4 <_vfiprintf_r+0x1f0>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fac:	f10a 0a01 	add.w	sl, sl, #1
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	9307      	str	r3, [sp, #28]
 8009fb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fb8:	931a      	str	r3, [sp, #104]	; 0x68
 8009fba:	4654      	mov	r4, sl
 8009fbc:	2205      	movs	r2, #5
 8009fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc2:	4854      	ldr	r0, [pc, #336]	; (800a114 <_vfiprintf_r+0x220>)
 8009fc4:	f7f6 f924 	bl	8000210 <memchr>
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	b9d8      	cbnz	r0, 800a004 <_vfiprintf_r+0x110>
 8009fcc:	06d1      	lsls	r1, r2, #27
 8009fce:	bf44      	itt	mi
 8009fd0:	2320      	movmi	r3, #32
 8009fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd6:	0713      	lsls	r3, r2, #28
 8009fd8:	bf44      	itt	mi
 8009fda:	232b      	movmi	r3, #43	; 0x2b
 8009fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe6:	d015      	beq.n	800a014 <_vfiprintf_r+0x120>
 8009fe8:	9a07      	ldr	r2, [sp, #28]
 8009fea:	4654      	mov	r4, sl
 8009fec:	2000      	movs	r0, #0
 8009fee:	f04f 0c0a 	mov.w	ip, #10
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ff8:	3b30      	subs	r3, #48	; 0x30
 8009ffa:	2b09      	cmp	r3, #9
 8009ffc:	d94d      	bls.n	800a09a <_vfiprintf_r+0x1a6>
 8009ffe:	b1b0      	cbz	r0, 800a02e <_vfiprintf_r+0x13a>
 800a000:	9207      	str	r2, [sp, #28]
 800a002:	e014      	b.n	800a02e <_vfiprintf_r+0x13a>
 800a004:	eba0 0308 	sub.w	r3, r0, r8
 800a008:	fa09 f303 	lsl.w	r3, r9, r3
 800a00c:	4313      	orrs	r3, r2
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	46a2      	mov	sl, r4
 800a012:	e7d2      	b.n	8009fba <_vfiprintf_r+0xc6>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	1d19      	adds	r1, r3, #4
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	9103      	str	r1, [sp, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	bfbb      	ittet	lt
 800a020:	425b      	neglt	r3, r3
 800a022:	f042 0202 	orrlt.w	r2, r2, #2
 800a026:	9307      	strge	r3, [sp, #28]
 800a028:	9307      	strlt	r3, [sp, #28]
 800a02a:	bfb8      	it	lt
 800a02c:	9204      	strlt	r2, [sp, #16]
 800a02e:	7823      	ldrb	r3, [r4, #0]
 800a030:	2b2e      	cmp	r3, #46	; 0x2e
 800a032:	d10c      	bne.n	800a04e <_vfiprintf_r+0x15a>
 800a034:	7863      	ldrb	r3, [r4, #1]
 800a036:	2b2a      	cmp	r3, #42	; 0x2a
 800a038:	d134      	bne.n	800a0a4 <_vfiprintf_r+0x1b0>
 800a03a:	9b03      	ldr	r3, [sp, #12]
 800a03c:	1d1a      	adds	r2, r3, #4
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	9203      	str	r2, [sp, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	bfb8      	it	lt
 800a046:	f04f 33ff 	movlt.w	r3, #4294967295
 800a04a:	3402      	adds	r4, #2
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a124 <_vfiprintf_r+0x230>
 800a052:	7821      	ldrb	r1, [r4, #0]
 800a054:	2203      	movs	r2, #3
 800a056:	4650      	mov	r0, sl
 800a058:	f7f6 f8da 	bl	8000210 <memchr>
 800a05c:	b138      	cbz	r0, 800a06e <_vfiprintf_r+0x17a>
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	eba0 000a 	sub.w	r0, r0, sl
 800a064:	2240      	movs	r2, #64	; 0x40
 800a066:	4082      	lsls	r2, r0
 800a068:	4313      	orrs	r3, r2
 800a06a:	3401      	adds	r4, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a072:	4829      	ldr	r0, [pc, #164]	; (800a118 <_vfiprintf_r+0x224>)
 800a074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a078:	2206      	movs	r2, #6
 800a07a:	f7f6 f8c9 	bl	8000210 <memchr>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d03f      	beq.n	800a102 <_vfiprintf_r+0x20e>
 800a082:	4b26      	ldr	r3, [pc, #152]	; (800a11c <_vfiprintf_r+0x228>)
 800a084:	bb1b      	cbnz	r3, 800a0ce <_vfiprintf_r+0x1da>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	3307      	adds	r3, #7
 800a08a:	f023 0307 	bic.w	r3, r3, #7
 800a08e:	3308      	adds	r3, #8
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	443b      	add	r3, r7
 800a096:	9309      	str	r3, [sp, #36]	; 0x24
 800a098:	e768      	b.n	8009f6c <_vfiprintf_r+0x78>
 800a09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09e:	460c      	mov	r4, r1
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	e7a6      	b.n	8009ff2 <_vfiprintf_r+0xfe>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b6:	3a30      	subs	r2, #48	; 0x30
 800a0b8:	2a09      	cmp	r2, #9
 800a0ba:	d903      	bls.n	800a0c4 <_vfiprintf_r+0x1d0>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c6      	beq.n	800a04e <_vfiprintf_r+0x15a>
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	e7c4      	b.n	800a04e <_vfiprintf_r+0x15a>
 800a0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f0      	b.n	800a0b0 <_vfiprintf_r+0x1bc>
 800a0ce:	ab03      	add	r3, sp, #12
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4b12      	ldr	r3, [pc, #72]	; (800a120 <_vfiprintf_r+0x22c>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f3af 8000 	nop.w
 800a0de:	4607      	mov	r7, r0
 800a0e0:	1c78      	adds	r0, r7, #1
 800a0e2:	d1d6      	bne.n	800a092 <_vfiprintf_r+0x19e>
 800a0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_vfiprintf_r+0x202>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_vfiprintf_r+0x202>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0f2:	f7ff fe73 	bl	8009ddc <__retarget_lock_release_recursive>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	065b      	lsls	r3, r3, #25
 800a0fa:	f53f af1d 	bmi.w	8009f38 <_vfiprintf_r+0x44>
 800a0fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a100:	e71c      	b.n	8009f3c <_vfiprintf_r+0x48>
 800a102:	ab03      	add	r3, sp, #12
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	462a      	mov	r2, r5
 800a108:	4b05      	ldr	r3, [pc, #20]	; (800a120 <_vfiprintf_r+0x22c>)
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 f879 	bl	800a204 <_printf_i>
 800a112:	e7e4      	b.n	800a0de <_vfiprintf_r+0x1ea>
 800a114:	0800c320 	.word	0x0800c320
 800a118:	0800c32a 	.word	0x0800c32a
 800a11c:	00000000 	.word	0x00000000
 800a120:	08009ecf 	.word	0x08009ecf
 800a124:	0800c326 	.word	0x0800c326

0800a128 <_printf_common>:
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a12c:	4616      	mov	r6, r2
 800a12e:	4699      	mov	r9, r3
 800a130:	688a      	ldr	r2, [r1, #8]
 800a132:	690b      	ldr	r3, [r1, #16]
 800a134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfb8      	it	lt
 800a13c:	4613      	movlt	r3, r2
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a144:	4607      	mov	r7, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b10a      	cbz	r2, 800a14e <_printf_common+0x26>
 800a14a:	3301      	adds	r3, #1
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	0699      	lsls	r1, r3, #26
 800a152:	bf42      	ittt	mi
 800a154:	6833      	ldrmi	r3, [r6, #0]
 800a156:	3302      	addmi	r3, #2
 800a158:	6033      	strmi	r3, [r6, #0]
 800a15a:	6825      	ldr	r5, [r4, #0]
 800a15c:	f015 0506 	ands.w	r5, r5, #6
 800a160:	d106      	bne.n	800a170 <_printf_common+0x48>
 800a162:	f104 0a19 	add.w	sl, r4, #25
 800a166:	68e3      	ldr	r3, [r4, #12]
 800a168:	6832      	ldr	r2, [r6, #0]
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	dc26      	bgt.n	800a1be <_printf_common+0x96>
 800a170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a174:	1e13      	subs	r3, r2, #0
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	bf18      	it	ne
 800a17a:	2301      	movne	r3, #1
 800a17c:	0692      	lsls	r2, r2, #26
 800a17e:	d42b      	bmi.n	800a1d8 <_printf_common+0xb0>
 800a180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a184:	4649      	mov	r1, r9
 800a186:	4638      	mov	r0, r7
 800a188:	47c0      	blx	r8
 800a18a:	3001      	adds	r0, #1
 800a18c:	d01e      	beq.n	800a1cc <_printf_common+0xa4>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	f003 0306 	and.w	r3, r3, #6
 800a196:	2b04      	cmp	r3, #4
 800a198:	bf02      	ittt	eq
 800a19a:	68e5      	ldreq	r5, [r4, #12]
 800a19c:	6833      	ldreq	r3, [r6, #0]
 800a19e:	1aed      	subeq	r5, r5, r3
 800a1a0:	68a3      	ldr	r3, [r4, #8]
 800a1a2:	bf0c      	ite	eq
 800a1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a8:	2500      	movne	r5, #0
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bfc4      	itt	gt
 800a1ae:	1a9b      	subgt	r3, r3, r2
 800a1b0:	18ed      	addgt	r5, r5, r3
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	341a      	adds	r4, #26
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	d11a      	bne.n	800a1f0 <_printf_common+0xc8>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e008      	b.n	800a1d0 <_printf_common+0xa8>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	47c0      	blx	r8
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d103      	bne.n	800a1d4 <_printf_common+0xac>
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	e7c6      	b.n	800a166 <_printf_common+0x3e>
 800a1d8:	18e1      	adds	r1, r4, r3
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	2030      	movs	r0, #48	; 0x30
 800a1de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1e2:	4422      	add	r2, r4
 800a1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7c7      	b.n	800a180 <_printf_common+0x58>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	47c0      	blx	r8
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	d0e6      	beq.n	800a1cc <_printf_common+0xa4>
 800a1fe:	3601      	adds	r6, #1
 800a200:	e7d9      	b.n	800a1b6 <_printf_common+0x8e>
	...

0800a204 <_printf_i>:
 800a204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	7e0f      	ldrb	r7, [r1, #24]
 800a20a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a20c:	2f78      	cmp	r7, #120	; 0x78
 800a20e:	4691      	mov	r9, r2
 800a210:	4680      	mov	r8, r0
 800a212:	460c      	mov	r4, r1
 800a214:	469a      	mov	sl, r3
 800a216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a21a:	d807      	bhi.n	800a22c <_printf_i+0x28>
 800a21c:	2f62      	cmp	r7, #98	; 0x62
 800a21e:	d80a      	bhi.n	800a236 <_printf_i+0x32>
 800a220:	2f00      	cmp	r7, #0
 800a222:	f000 80d4 	beq.w	800a3ce <_printf_i+0x1ca>
 800a226:	2f58      	cmp	r7, #88	; 0x58
 800a228:	f000 80c0 	beq.w	800a3ac <_printf_i+0x1a8>
 800a22c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a234:	e03a      	b.n	800a2ac <_printf_i+0xa8>
 800a236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a23a:	2b15      	cmp	r3, #21
 800a23c:	d8f6      	bhi.n	800a22c <_printf_i+0x28>
 800a23e:	a101      	add	r1, pc, #4	; (adr r1, 800a244 <_printf_i+0x40>)
 800a240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a244:	0800a29d 	.word	0x0800a29d
 800a248:	0800a2b1 	.word	0x0800a2b1
 800a24c:	0800a22d 	.word	0x0800a22d
 800a250:	0800a22d 	.word	0x0800a22d
 800a254:	0800a22d 	.word	0x0800a22d
 800a258:	0800a22d 	.word	0x0800a22d
 800a25c:	0800a2b1 	.word	0x0800a2b1
 800a260:	0800a22d 	.word	0x0800a22d
 800a264:	0800a22d 	.word	0x0800a22d
 800a268:	0800a22d 	.word	0x0800a22d
 800a26c:	0800a22d 	.word	0x0800a22d
 800a270:	0800a3b5 	.word	0x0800a3b5
 800a274:	0800a2dd 	.word	0x0800a2dd
 800a278:	0800a36f 	.word	0x0800a36f
 800a27c:	0800a22d 	.word	0x0800a22d
 800a280:	0800a22d 	.word	0x0800a22d
 800a284:	0800a3d7 	.word	0x0800a3d7
 800a288:	0800a22d 	.word	0x0800a22d
 800a28c:	0800a2dd 	.word	0x0800a2dd
 800a290:	0800a22d 	.word	0x0800a22d
 800a294:	0800a22d 	.word	0x0800a22d
 800a298:	0800a377 	.word	0x0800a377
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	602a      	str	r2, [r5, #0]
 800a2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e09f      	b.n	800a3f0 <_printf_i+0x1ec>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	0607      	lsls	r7, r0, #24
 800a2b6:	f103 0104 	add.w	r1, r3, #4
 800a2ba:	6029      	str	r1, [r5, #0]
 800a2bc:	d501      	bpl.n	800a2c2 <_printf_i+0xbe>
 800a2be:	681e      	ldr	r6, [r3, #0]
 800a2c0:	e003      	b.n	800a2ca <_printf_i+0xc6>
 800a2c2:	0646      	lsls	r6, r0, #25
 800a2c4:	d5fb      	bpl.n	800a2be <_printf_i+0xba>
 800a2c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	da03      	bge.n	800a2d6 <_printf_i+0xd2>
 800a2ce:	232d      	movs	r3, #45	; 0x2d
 800a2d0:	4276      	negs	r6, r6
 800a2d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d6:	485a      	ldr	r0, [pc, #360]	; (800a440 <_printf_i+0x23c>)
 800a2d8:	230a      	movs	r3, #10
 800a2da:	e012      	b.n	800a302 <_printf_i+0xfe>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	6820      	ldr	r0, [r4, #0]
 800a2e0:	1d19      	adds	r1, r3, #4
 800a2e2:	6029      	str	r1, [r5, #0]
 800a2e4:	0605      	lsls	r5, r0, #24
 800a2e6:	d501      	bpl.n	800a2ec <_printf_i+0xe8>
 800a2e8:	681e      	ldr	r6, [r3, #0]
 800a2ea:	e002      	b.n	800a2f2 <_printf_i+0xee>
 800a2ec:	0641      	lsls	r1, r0, #25
 800a2ee:	d5fb      	bpl.n	800a2e8 <_printf_i+0xe4>
 800a2f0:	881e      	ldrh	r6, [r3, #0]
 800a2f2:	4853      	ldr	r0, [pc, #332]	; (800a440 <_printf_i+0x23c>)
 800a2f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a2f6:	bf0c      	ite	eq
 800a2f8:	2308      	moveq	r3, #8
 800a2fa:	230a      	movne	r3, #10
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a302:	6865      	ldr	r5, [r4, #4]
 800a304:	60a5      	str	r5, [r4, #8]
 800a306:	2d00      	cmp	r5, #0
 800a308:	bfa2      	ittt	ge
 800a30a:	6821      	ldrge	r1, [r4, #0]
 800a30c:	f021 0104 	bicge.w	r1, r1, #4
 800a310:	6021      	strge	r1, [r4, #0]
 800a312:	b90e      	cbnz	r6, 800a318 <_printf_i+0x114>
 800a314:	2d00      	cmp	r5, #0
 800a316:	d04b      	beq.n	800a3b0 <_printf_i+0x1ac>
 800a318:	4615      	mov	r5, r2
 800a31a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a31e:	fb03 6711 	mls	r7, r3, r1, r6
 800a322:	5dc7      	ldrb	r7, [r0, r7]
 800a324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a328:	4637      	mov	r7, r6
 800a32a:	42bb      	cmp	r3, r7
 800a32c:	460e      	mov	r6, r1
 800a32e:	d9f4      	bls.n	800a31a <_printf_i+0x116>
 800a330:	2b08      	cmp	r3, #8
 800a332:	d10b      	bne.n	800a34c <_printf_i+0x148>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	07de      	lsls	r6, r3, #31
 800a338:	d508      	bpl.n	800a34c <_printf_i+0x148>
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	6861      	ldr	r1, [r4, #4]
 800a33e:	4299      	cmp	r1, r3
 800a340:	bfde      	ittt	le
 800a342:	2330      	movle	r3, #48	; 0x30
 800a344:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a348:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a34c:	1b52      	subs	r2, r2, r5
 800a34e:	6122      	str	r2, [r4, #16]
 800a350:	f8cd a000 	str.w	sl, [sp]
 800a354:	464b      	mov	r3, r9
 800a356:	aa03      	add	r2, sp, #12
 800a358:	4621      	mov	r1, r4
 800a35a:	4640      	mov	r0, r8
 800a35c:	f7ff fee4 	bl	800a128 <_printf_common>
 800a360:	3001      	adds	r0, #1
 800a362:	d14a      	bne.n	800a3fa <_printf_i+0x1f6>
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	b004      	add	sp, #16
 800a36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f043 0320 	orr.w	r3, r3, #32
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	4833      	ldr	r0, [pc, #204]	; (800a444 <_printf_i+0x240>)
 800a378:	2778      	movs	r7, #120	; 0x78
 800a37a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	6829      	ldr	r1, [r5, #0]
 800a382:	061f      	lsls	r7, r3, #24
 800a384:	f851 6b04 	ldr.w	r6, [r1], #4
 800a388:	d402      	bmi.n	800a390 <_printf_i+0x18c>
 800a38a:	065f      	lsls	r7, r3, #25
 800a38c:	bf48      	it	mi
 800a38e:	b2b6      	uxthmi	r6, r6
 800a390:	07df      	lsls	r7, r3, #31
 800a392:	bf48      	it	mi
 800a394:	f043 0320 	orrmi.w	r3, r3, #32
 800a398:	6029      	str	r1, [r5, #0]
 800a39a:	bf48      	it	mi
 800a39c:	6023      	strmi	r3, [r4, #0]
 800a39e:	b91e      	cbnz	r6, 800a3a8 <_printf_i+0x1a4>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	f023 0320 	bic.w	r3, r3, #32
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	e7a7      	b.n	800a2fc <_printf_i+0xf8>
 800a3ac:	4824      	ldr	r0, [pc, #144]	; (800a440 <_printf_i+0x23c>)
 800a3ae:	e7e4      	b.n	800a37a <_printf_i+0x176>
 800a3b0:	4615      	mov	r5, r2
 800a3b2:	e7bd      	b.n	800a330 <_printf_i+0x12c>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	6826      	ldr	r6, [r4, #0]
 800a3b8:	6961      	ldr	r1, [r4, #20]
 800a3ba:	1d18      	adds	r0, r3, #4
 800a3bc:	6028      	str	r0, [r5, #0]
 800a3be:	0635      	lsls	r5, r6, #24
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	d501      	bpl.n	800a3c8 <_printf_i+0x1c4>
 800a3c4:	6019      	str	r1, [r3, #0]
 800a3c6:	e002      	b.n	800a3ce <_printf_i+0x1ca>
 800a3c8:	0670      	lsls	r0, r6, #25
 800a3ca:	d5fb      	bpl.n	800a3c4 <_printf_i+0x1c0>
 800a3cc:	8019      	strh	r1, [r3, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	4615      	mov	r5, r2
 800a3d4:	e7bc      	b.n	800a350 <_printf_i+0x14c>
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	1d1a      	adds	r2, r3, #4
 800a3da:	602a      	str	r2, [r5, #0]
 800a3dc:	681d      	ldr	r5, [r3, #0]
 800a3de:	6862      	ldr	r2, [r4, #4]
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f7f5 ff14 	bl	8000210 <memchr>
 800a3e8:	b108      	cbz	r0, 800a3ee <_printf_i+0x1ea>
 800a3ea:	1b40      	subs	r0, r0, r5
 800a3ec:	6060      	str	r0, [r4, #4]
 800a3ee:	6863      	ldr	r3, [r4, #4]
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f8:	e7aa      	b.n	800a350 <_printf_i+0x14c>
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	4649      	mov	r1, r9
 800a400:	4640      	mov	r0, r8
 800a402:	47d0      	blx	sl
 800a404:	3001      	adds	r0, #1
 800a406:	d0ad      	beq.n	800a364 <_printf_i+0x160>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	079b      	lsls	r3, r3, #30
 800a40c:	d413      	bmi.n	800a436 <_printf_i+0x232>
 800a40e:	68e0      	ldr	r0, [r4, #12]
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	4298      	cmp	r0, r3
 800a414:	bfb8      	it	lt
 800a416:	4618      	movlt	r0, r3
 800a418:	e7a6      	b.n	800a368 <_printf_i+0x164>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4632      	mov	r2, r6
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	47d0      	blx	sl
 800a424:	3001      	adds	r0, #1
 800a426:	d09d      	beq.n	800a364 <_printf_i+0x160>
 800a428:	3501      	adds	r5, #1
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	9903      	ldr	r1, [sp, #12]
 800a42e:	1a5b      	subs	r3, r3, r1
 800a430:	42ab      	cmp	r3, r5
 800a432:	dcf2      	bgt.n	800a41a <_printf_i+0x216>
 800a434:	e7eb      	b.n	800a40e <_printf_i+0x20a>
 800a436:	2500      	movs	r5, #0
 800a438:	f104 0619 	add.w	r6, r4, #25
 800a43c:	e7f5      	b.n	800a42a <_printf_i+0x226>
 800a43e:	bf00      	nop
 800a440:	0800c331 	.word	0x0800c331
 800a444:	0800c342 	.word	0x0800c342

0800a448 <__sflush_r>:
 800a448:	898a      	ldrh	r2, [r1, #12]
 800a44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	4605      	mov	r5, r0
 800a450:	0710      	lsls	r0, r2, #28
 800a452:	460c      	mov	r4, r1
 800a454:	d458      	bmi.n	800a508 <__sflush_r+0xc0>
 800a456:	684b      	ldr	r3, [r1, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dc05      	bgt.n	800a468 <__sflush_r+0x20>
 800a45c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dc02      	bgt.n	800a468 <__sflush_r+0x20>
 800a462:	2000      	movs	r0, #0
 800a464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	d0f9      	beq.n	800a462 <__sflush_r+0x1a>
 800a46e:	2300      	movs	r3, #0
 800a470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a474:	682f      	ldr	r7, [r5, #0]
 800a476:	6a21      	ldr	r1, [r4, #32]
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	d032      	beq.n	800a4e2 <__sflush_r+0x9a>
 800a47c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	075a      	lsls	r2, r3, #29
 800a482:	d505      	bpl.n	800a490 <__sflush_r+0x48>
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	1ac0      	subs	r0, r0, r3
 800a488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a48a:	b10b      	cbz	r3, 800a490 <__sflush_r+0x48>
 800a48c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a48e:	1ac0      	subs	r0, r0, r3
 800a490:	2300      	movs	r3, #0
 800a492:	4602      	mov	r2, r0
 800a494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a496:	6a21      	ldr	r1, [r4, #32]
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	d106      	bne.n	800a4b0 <__sflush_r+0x68>
 800a4a2:	6829      	ldr	r1, [r5, #0]
 800a4a4:	291d      	cmp	r1, #29
 800a4a6:	d82b      	bhi.n	800a500 <__sflush_r+0xb8>
 800a4a8:	4a29      	ldr	r2, [pc, #164]	; (800a550 <__sflush_r+0x108>)
 800a4aa:	410a      	asrs	r2, r1
 800a4ac:	07d6      	lsls	r6, r2, #31
 800a4ae:	d427      	bmi.n	800a500 <__sflush_r+0xb8>
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	6062      	str	r2, [r4, #4]
 800a4b4:	04d9      	lsls	r1, r3, #19
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	6022      	str	r2, [r4, #0]
 800a4ba:	d504      	bpl.n	800a4c6 <__sflush_r+0x7e>
 800a4bc:	1c42      	adds	r2, r0, #1
 800a4be:	d101      	bne.n	800a4c4 <__sflush_r+0x7c>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b903      	cbnz	r3, 800a4c6 <__sflush_r+0x7e>
 800a4c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a4c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4c8:	602f      	str	r7, [r5, #0]
 800a4ca:	2900      	cmp	r1, #0
 800a4cc:	d0c9      	beq.n	800a462 <__sflush_r+0x1a>
 800a4ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4d2:	4299      	cmp	r1, r3
 800a4d4:	d002      	beq.n	800a4dc <__sflush_r+0x94>
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7ff fc96 	bl	8009e08 <_free_r>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	6360      	str	r0, [r4, #52]	; 0x34
 800a4e0:	e7c0      	b.n	800a464 <__sflush_r+0x1c>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b0      	blx	r6
 800a4e8:	1c41      	adds	r1, r0, #1
 800a4ea:	d1c8      	bne.n	800a47e <__sflush_r+0x36>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0c5      	beq.n	800a47e <__sflush_r+0x36>
 800a4f2:	2b1d      	cmp	r3, #29
 800a4f4:	d001      	beq.n	800a4fa <__sflush_r+0xb2>
 800a4f6:	2b16      	cmp	r3, #22
 800a4f8:	d101      	bne.n	800a4fe <__sflush_r+0xb6>
 800a4fa:	602f      	str	r7, [r5, #0]
 800a4fc:	e7b1      	b.n	800a462 <__sflush_r+0x1a>
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	e7ad      	b.n	800a464 <__sflush_r+0x1c>
 800a508:	690f      	ldr	r7, [r1, #16]
 800a50a:	2f00      	cmp	r7, #0
 800a50c:	d0a9      	beq.n	800a462 <__sflush_r+0x1a>
 800a50e:	0793      	lsls	r3, r2, #30
 800a510:	680e      	ldr	r6, [r1, #0]
 800a512:	bf08      	it	eq
 800a514:	694b      	ldreq	r3, [r1, #20]
 800a516:	600f      	str	r7, [r1, #0]
 800a518:	bf18      	it	ne
 800a51a:	2300      	movne	r3, #0
 800a51c:	eba6 0807 	sub.w	r8, r6, r7
 800a520:	608b      	str	r3, [r1, #8]
 800a522:	f1b8 0f00 	cmp.w	r8, #0
 800a526:	dd9c      	ble.n	800a462 <__sflush_r+0x1a>
 800a528:	6a21      	ldr	r1, [r4, #32]
 800a52a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a52c:	4643      	mov	r3, r8
 800a52e:	463a      	mov	r2, r7
 800a530:	4628      	mov	r0, r5
 800a532:	47b0      	blx	r6
 800a534:	2800      	cmp	r0, #0
 800a536:	dc06      	bgt.n	800a546 <__sflush_r+0xfe>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53e:	81a3      	strh	r3, [r4, #12]
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	e78e      	b.n	800a464 <__sflush_r+0x1c>
 800a546:	4407      	add	r7, r0
 800a548:	eba8 0800 	sub.w	r8, r8, r0
 800a54c:	e7e9      	b.n	800a522 <__sflush_r+0xda>
 800a54e:	bf00      	nop
 800a550:	dfbffffe 	.word	0xdfbffffe

0800a554 <_fflush_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	690b      	ldr	r3, [r1, #16]
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	b913      	cbnz	r3, 800a564 <_fflush_r+0x10>
 800a55e:	2500      	movs	r5, #0
 800a560:	4628      	mov	r0, r5
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	b118      	cbz	r0, 800a56e <_fflush_r+0x1a>
 800a566:	6a03      	ldr	r3, [r0, #32]
 800a568:	b90b      	cbnz	r3, 800a56e <_fflush_r+0x1a>
 800a56a:	f7ff fadb 	bl	8009b24 <__sinit>
 800a56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0f3      	beq.n	800a55e <_fflush_r+0xa>
 800a576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a578:	07d0      	lsls	r0, r2, #31
 800a57a:	d404      	bmi.n	800a586 <_fflush_r+0x32>
 800a57c:	0599      	lsls	r1, r3, #22
 800a57e:	d402      	bmi.n	800a586 <_fflush_r+0x32>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f7ff fc2a 	bl	8009dda <__retarget_lock_acquire_recursive>
 800a586:	4628      	mov	r0, r5
 800a588:	4621      	mov	r1, r4
 800a58a:	f7ff ff5d 	bl	800a448 <__sflush_r>
 800a58e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a590:	07da      	lsls	r2, r3, #31
 800a592:	4605      	mov	r5, r0
 800a594:	d4e4      	bmi.n	800a560 <_fflush_r+0xc>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	059b      	lsls	r3, r3, #22
 800a59a:	d4e1      	bmi.n	800a560 <_fflush_r+0xc>
 800a59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a59e:	f7ff fc1d 	bl	8009ddc <__retarget_lock_release_recursive>
 800a5a2:	e7dd      	b.n	800a560 <_fflush_r+0xc>

0800a5a4 <_putc_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	460d      	mov	r5, r1
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	b118      	cbz	r0, 800a5b6 <_putc_r+0x12>
 800a5ae:	6a03      	ldr	r3, [r0, #32]
 800a5b0:	b90b      	cbnz	r3, 800a5b6 <_putc_r+0x12>
 800a5b2:	f7ff fab7 	bl	8009b24 <__sinit>
 800a5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b8:	07d8      	lsls	r0, r3, #31
 800a5ba:	d405      	bmi.n	800a5c8 <_putc_r+0x24>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	0599      	lsls	r1, r3, #22
 800a5c0:	d402      	bmi.n	800a5c8 <_putc_r+0x24>
 800a5c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5c4:	f7ff fc09 	bl	8009dda <__retarget_lock_acquire_recursive>
 800a5c8:	68a3      	ldr	r3, [r4, #8]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	60a3      	str	r3, [r4, #8]
 800a5d0:	da05      	bge.n	800a5de <_putc_r+0x3a>
 800a5d2:	69a2      	ldr	r2, [r4, #24]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	db12      	blt.n	800a5fe <_putc_r+0x5a>
 800a5d8:	b2eb      	uxtb	r3, r5
 800a5da:	2b0a      	cmp	r3, #10
 800a5dc:	d00f      	beq.n	800a5fe <_putc_r+0x5a>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	701d      	strb	r5, [r3, #0]
 800a5e6:	b2ed      	uxtb	r5, r5
 800a5e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5ea:	07da      	lsls	r2, r3, #31
 800a5ec:	d405      	bmi.n	800a5fa <_putc_r+0x56>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	059b      	lsls	r3, r3, #22
 800a5f2:	d402      	bmi.n	800a5fa <_putc_r+0x56>
 800a5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5f6:	f7ff fbf1 	bl	8009ddc <__retarget_lock_release_recursive>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
 800a5fe:	4629      	mov	r1, r5
 800a600:	4622      	mov	r2, r4
 800a602:	4630      	mov	r0, r6
 800a604:	f000 f802 	bl	800a60c <__swbuf_r>
 800a608:	4605      	mov	r5, r0
 800a60a:	e7ed      	b.n	800a5e8 <_putc_r+0x44>

0800a60c <__swbuf_r>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	460e      	mov	r6, r1
 800a610:	4614      	mov	r4, r2
 800a612:	4605      	mov	r5, r0
 800a614:	b118      	cbz	r0, 800a61e <__swbuf_r+0x12>
 800a616:	6a03      	ldr	r3, [r0, #32]
 800a618:	b90b      	cbnz	r3, 800a61e <__swbuf_r+0x12>
 800a61a:	f7ff fa83 	bl	8009b24 <__sinit>
 800a61e:	69a3      	ldr	r3, [r4, #24]
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	071a      	lsls	r2, r3, #28
 800a626:	d525      	bpl.n	800a674 <__swbuf_r+0x68>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	b31b      	cbz	r3, 800a674 <__swbuf_r+0x68>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	6922      	ldr	r2, [r4, #16]
 800a630:	1a98      	subs	r0, r3, r2
 800a632:	6963      	ldr	r3, [r4, #20]
 800a634:	b2f6      	uxtb	r6, r6
 800a636:	4283      	cmp	r3, r0
 800a638:	4637      	mov	r7, r6
 800a63a:	dc04      	bgt.n	800a646 <__swbuf_r+0x3a>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f7ff ff88 	bl	800a554 <_fflush_r>
 800a644:	b9e0      	cbnz	r0, 800a680 <__swbuf_r+0x74>
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	3b01      	subs	r3, #1
 800a64a:	60a3      	str	r3, [r4, #8]
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	6022      	str	r2, [r4, #0]
 800a652:	701e      	strb	r6, [r3, #0]
 800a654:	6962      	ldr	r2, [r4, #20]
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	429a      	cmp	r2, r3
 800a65a:	d004      	beq.n	800a666 <__swbuf_r+0x5a>
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	07db      	lsls	r3, r3, #31
 800a660:	d506      	bpl.n	800a670 <__swbuf_r+0x64>
 800a662:	2e0a      	cmp	r6, #10
 800a664:	d104      	bne.n	800a670 <__swbuf_r+0x64>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f7ff ff73 	bl	800a554 <_fflush_r>
 800a66e:	b938      	cbnz	r0, 800a680 <__swbuf_r+0x74>
 800a670:	4638      	mov	r0, r7
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	4621      	mov	r1, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 f806 	bl	800a688 <__swsetup_r>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d0d5      	beq.n	800a62c <__swbuf_r+0x20>
 800a680:	f04f 37ff 	mov.w	r7, #4294967295
 800a684:	e7f4      	b.n	800a670 <__swbuf_r+0x64>
	...

0800a688 <__swsetup_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4b2a      	ldr	r3, [pc, #168]	; (800a734 <__swsetup_r+0xac>)
 800a68c:	4605      	mov	r5, r0
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	460c      	mov	r4, r1
 800a692:	b118      	cbz	r0, 800a69c <__swsetup_r+0x14>
 800a694:	6a03      	ldr	r3, [r0, #32]
 800a696:	b90b      	cbnz	r3, 800a69c <__swsetup_r+0x14>
 800a698:	f7ff fa44 	bl	8009b24 <__sinit>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6a2:	0718      	lsls	r0, r3, #28
 800a6a4:	d422      	bmi.n	800a6ec <__swsetup_r+0x64>
 800a6a6:	06d9      	lsls	r1, r3, #27
 800a6a8:	d407      	bmi.n	800a6ba <__swsetup_r+0x32>
 800a6aa:	2309      	movs	r3, #9
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b8:	e034      	b.n	800a724 <__swsetup_r+0x9c>
 800a6ba:	0758      	lsls	r0, r3, #29
 800a6bc:	d512      	bpl.n	800a6e4 <__swsetup_r+0x5c>
 800a6be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6c0:	b141      	cbz	r1, 800a6d4 <__swsetup_r+0x4c>
 800a6c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	d002      	beq.n	800a6d0 <__swsetup_r+0x48>
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7ff fb9c 	bl	8009e08 <_free_r>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6363      	str	r3, [r4, #52]	; 0x34
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	6063      	str	r3, [r4, #4]
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	f043 0308 	orr.w	r3, r3, #8
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	6923      	ldr	r3, [r4, #16]
 800a6ee:	b94b      	cbnz	r3, 800a704 <__swsetup_r+0x7c>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fa:	d003      	beq.n	800a704 <__swsetup_r+0x7c>
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4628      	mov	r0, r5
 800a700:	f000 f884 	bl	800a80c <__smakebuf_r>
 800a704:	89a0      	ldrh	r0, [r4, #12]
 800a706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a70a:	f010 0301 	ands.w	r3, r0, #1
 800a70e:	d00a      	beq.n	800a726 <__swsetup_r+0x9e>
 800a710:	2300      	movs	r3, #0
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	6963      	ldr	r3, [r4, #20]
 800a716:	425b      	negs	r3, r3
 800a718:	61a3      	str	r3, [r4, #24]
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	b943      	cbnz	r3, 800a730 <__swsetup_r+0xa8>
 800a71e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a722:	d1c4      	bne.n	800a6ae <__swsetup_r+0x26>
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	0781      	lsls	r1, r0, #30
 800a728:	bf58      	it	pl
 800a72a:	6963      	ldrpl	r3, [r4, #20]
 800a72c:	60a3      	str	r3, [r4, #8]
 800a72e:	e7f4      	b.n	800a71a <__swsetup_r+0x92>
 800a730:	2000      	movs	r0, #0
 800a732:	e7f7      	b.n	800a724 <__swsetup_r+0x9c>
 800a734:	20000070 	.word	0x20000070

0800a738 <_raise_r>:
 800a738:	291f      	cmp	r1, #31
 800a73a:	b538      	push	{r3, r4, r5, lr}
 800a73c:	4604      	mov	r4, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	d904      	bls.n	800a74c <_raise_r+0x14>
 800a742:	2316      	movs	r3, #22
 800a744:	6003      	str	r3, [r0, #0]
 800a746:	f04f 30ff 	mov.w	r0, #4294967295
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a74e:	b112      	cbz	r2, 800a756 <_raise_r+0x1e>
 800a750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a754:	b94b      	cbnz	r3, 800a76a <_raise_r+0x32>
 800a756:	4620      	mov	r0, r4
 800a758:	f000 f830 	bl	800a7bc <_getpid_r>
 800a75c:	462a      	mov	r2, r5
 800a75e:	4601      	mov	r1, r0
 800a760:	4620      	mov	r0, r4
 800a762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a766:	f000 b817 	b.w	800a798 <_kill_r>
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d00a      	beq.n	800a784 <_raise_r+0x4c>
 800a76e:	1c59      	adds	r1, r3, #1
 800a770:	d103      	bne.n	800a77a <_raise_r+0x42>
 800a772:	2316      	movs	r3, #22
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	2001      	movs	r0, #1
 800a778:	e7e7      	b.n	800a74a <_raise_r+0x12>
 800a77a:	2400      	movs	r4, #0
 800a77c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a780:	4628      	mov	r0, r5
 800a782:	4798      	blx	r3
 800a784:	2000      	movs	r0, #0
 800a786:	e7e0      	b.n	800a74a <_raise_r+0x12>

0800a788 <raise>:
 800a788:	4b02      	ldr	r3, [pc, #8]	; (800a794 <raise+0xc>)
 800a78a:	4601      	mov	r1, r0
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	f7ff bfd3 	b.w	800a738 <_raise_r>
 800a792:	bf00      	nop
 800a794:	20000070 	.word	0x20000070

0800a798 <_kill_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	; (800a7b8 <_kill_r+0x20>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	f7f8 fc6d 	bl	8003084 <_kill>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d102      	bne.n	800a7b4 <_kill_r+0x1c>
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	b103      	cbz	r3, 800a7b4 <_kill_r+0x1c>
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	bd38      	pop	{r3, r4, r5, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200066f0 	.word	0x200066f0

0800a7bc <_getpid_r>:
 800a7bc:	f7f8 bc5a 	b.w	8003074 <_getpid>

0800a7c0 <__swhatbuf_r>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c8:	2900      	cmp	r1, #0
 800a7ca:	b096      	sub	sp, #88	; 0x58
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	461e      	mov	r6, r3
 800a7d0:	da0d      	bge.n	800a7ee <__swhatbuf_r+0x2e>
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7d8:	f04f 0100 	mov.w	r1, #0
 800a7dc:	bf0c      	ite	eq
 800a7de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7e2:	2340      	movne	r3, #64	; 0x40
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	6031      	str	r1, [r6, #0]
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	b016      	add	sp, #88	; 0x58
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	466a      	mov	r2, sp
 800a7f0:	f000 f848 	bl	800a884 <_fstat_r>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	dbec      	blt.n	800a7d2 <__swhatbuf_r+0x12>
 800a7f8:	9901      	ldr	r1, [sp, #4]
 800a7fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a802:	4259      	negs	r1, r3
 800a804:	4159      	adcs	r1, r3
 800a806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a80a:	e7eb      	b.n	800a7e4 <__swhatbuf_r+0x24>

0800a80c <__smakebuf_r>:
 800a80c:	898b      	ldrh	r3, [r1, #12]
 800a80e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a810:	079d      	lsls	r5, r3, #30
 800a812:	4606      	mov	r6, r0
 800a814:	460c      	mov	r4, r1
 800a816:	d507      	bpl.n	800a828 <__smakebuf_r+0x1c>
 800a818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	2301      	movs	r3, #1
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	b002      	add	sp, #8
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	ab01      	add	r3, sp, #4
 800a82a:	466a      	mov	r2, sp
 800a82c:	f7ff ffc8 	bl	800a7c0 <__swhatbuf_r>
 800a830:	9900      	ldr	r1, [sp, #0]
 800a832:	4605      	mov	r5, r0
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff f85d 	bl	80098f4 <_malloc_r>
 800a83a:	b948      	cbnz	r0, 800a850 <__smakebuf_r+0x44>
 800a83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a840:	059a      	lsls	r2, r3, #22
 800a842:	d4ef      	bmi.n	800a824 <__smakebuf_r+0x18>
 800a844:	f023 0303 	bic.w	r3, r3, #3
 800a848:	f043 0302 	orr.w	r3, r3, #2
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	e7e3      	b.n	800a818 <__smakebuf_r+0xc>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	6020      	str	r0, [r4, #0]
 800a854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	9b00      	ldr	r3, [sp, #0]
 800a85c:	6163      	str	r3, [r4, #20]
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	6120      	str	r0, [r4, #16]
 800a862:	b15b      	cbz	r3, 800a87c <__smakebuf_r+0x70>
 800a864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f81d 	bl	800a8a8 <_isatty_r>
 800a86e:	b128      	cbz	r0, 800a87c <__smakebuf_r+0x70>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	f023 0303 	bic.w	r3, r3, #3
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	81a3      	strh	r3, [r4, #12]
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	431d      	orrs	r5, r3
 800a880:	81a5      	strh	r5, [r4, #12]
 800a882:	e7cf      	b.n	800a824 <__smakebuf_r+0x18>

0800a884 <_fstat_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d07      	ldr	r5, [pc, #28]	; (800a8a4 <_fstat_r+0x20>)
 800a888:	2300      	movs	r3, #0
 800a88a:	4604      	mov	r4, r0
 800a88c:	4608      	mov	r0, r1
 800a88e:	4611      	mov	r1, r2
 800a890:	602b      	str	r3, [r5, #0]
 800a892:	f7f8 fc53 	bl	800313c <_fstat>
 800a896:	1c43      	adds	r3, r0, #1
 800a898:	d102      	bne.n	800a8a0 <_fstat_r+0x1c>
 800a89a:	682b      	ldr	r3, [r5, #0]
 800a89c:	b103      	cbz	r3, 800a8a0 <_fstat_r+0x1c>
 800a89e:	6023      	str	r3, [r4, #0]
 800a8a0:	bd38      	pop	{r3, r4, r5, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200066f0 	.word	0x200066f0

0800a8a8 <_isatty_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d06      	ldr	r5, [pc, #24]	; (800a8c4 <_isatty_r+0x1c>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7f8 fc52 	bl	800315c <_isatty>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <_isatty_r+0x1a>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	b103      	cbz	r3, 800a8c2 <_isatty_r+0x1a>
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	200066f0 	.word	0x200066f0

0800a8c8 <_init>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	bf00      	nop
 800a8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ce:	bc08      	pop	{r3}
 800a8d0:	469e      	mov	lr, r3
 800a8d2:	4770      	bx	lr

0800a8d4 <_fini>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	bf00      	nop
 800a8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8da:	bc08      	pop	{r3}
 800a8dc:	469e      	mov	lr, r3
 800a8de:	4770      	bx	lr
