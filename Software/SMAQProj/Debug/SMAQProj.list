
SMAQProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012fd0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002288  080131a0  080131a0  000231a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015428  08015428  000303fc  2**0
                  CONTENTS
  4 .ARM          00000008  08015428  08015428  00025428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015430  08015430  000303fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015430  08015430  00025430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015434  08015434  00025434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  08015438  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002bc  080156f4  000302bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000035c  08015794  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007db4  20000400  08015834  00030400  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200081b4  08015834  000381b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303fc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002bad9  00000000  00000000  0003046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004714  00000000  00000000  0005bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002578  00000000  00000000  00060660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e55  00000000  00000000  00062bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00006574  00000000  00000000  00064a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002abe1  00000000  00000000  0006afa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010a005  00000000  00000000  00095b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b398  00000000  00000000  0019fb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001aaf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000400 	.word	0x20000400
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013188 	.word	0x08013188

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000404 	.word	0x20000404
 800020c:	08013188 	.word	0x08013188

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
static uint32_t Hum;  // Humidity readings from SCD-40-2
static uint32_t Carb; // C02 readings from SCD-40-2
static uint32_t Pm;  // PM 2.5 readings from SNJGAC5
static double aqi = 0;
//static char *str;
int main(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000edc:	f00a fc5b 	bl	800b796 <HAL_Init>

  /* Configure the system clock */
    SystemClock_Config();
 8000ee0:	f000 f83a 	bl	8000f58 <SystemClock_Config>

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ee4:	f000 f974 	bl	80011d0 <MX_GPIO_Init>
    MX_ETH_Init();
 8000ee8:	f000 f8e2 	bl	80010b0 <MX_ETH_Init>
    MX_RNG_Init();
 8000eec:	f000 f92c 	bl	8001148 <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000ef0:	f000 f93e 	bl	8001170 <MX_USART3_UART_Init>
    MX_I2C1_Init();
 8000ef4:	f000 f89c 	bl	8001030 <MX_I2C1_Init>

    osKernelInitialize();
 8000ef8:	f00e f9f8 	bl	800f2ec <osKernelInitialize>

    ServerHandle = osThreadNew(server, NULL, &Server_attributes);
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <main+0x5c>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <main+0x60>)
 8000f02:	f00e fa8f 	bl	800f424 <osThreadNew>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <main+0x64>)
 8000f0a:	6013      	str	r3, [r2, #0]
    BlinkerHandle = osThreadNew(blinker, NULL, &Blinker_attributes);
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <main+0x68>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <main+0x6c>)
 8000f12:	f00e fa87 	bl	800f424 <osThreadNew>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <main+0x70>)
 8000f1a:	6013      	str	r3, [r2, #0]
    SCDHandle = osThreadNew(sensor1, NULL, &SCD_attributes);
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <main+0x74>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <main+0x78>)
 8000f22:	f00e fa7f 	bl	800f424 <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <main+0x7c>)
 8000f2a:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8000f2c:	f00e fa12 	bl	800f354 <osKernelStart>

    while (1)
 8000f30:	e7fe      	b.n	8000f30 <main+0x58>
 8000f32:	bf00      	nop
 8000f34:	08014c00 	.word	0x08014c00
 8000f38:	080016c9 	.word	0x080016c9
 8000f3c:	200005f4 	.word	0x200005f4
 8000f40:	08014bdc 	.word	0x08014bdc
 8000f44:	08001505 	.word	0x08001505
 8000f48:	200005f0 	.word	0x200005f0
 8000f4c:	08014c24 	.word	0x08014c24
 8000f50:	08001459 	.word	0x08001459
 8000f54:	200005f8 	.word	0x200005f8

08000f58 <SystemClock_Config>:
    }

}

void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f011 facf 	bl	801250a <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <SystemClock_Config+0xd0>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a29      	ldr	r2, [pc, #164]	; (8001028 <SystemClock_Config+0xd0>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <SystemClock_Config+0xd0>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <SystemClock_Config+0xd4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a24      	ldr	r2, [pc, #144]	; (800102c <SystemClock_Config+0xd4>)
 8000f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <SystemClock_Config+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fc4:	23d8      	movs	r3, #216	; 0xd8
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fcc:	2309      	movs	r3, #9
 8000fce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00c f861 	bl	800d09c <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x8c>
	  {
	    Error_Handler();
 8000fe0:	f000 fc54 	bl	800188c <Error_Handler>
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe4:	f00c f80a 	bl	800cffc <HAL_PWREx_EnableOverDrive>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000fee:	f000 fc4d 	bl	800188c <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001002:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2107      	movs	r1, #7
 8001010:	4618      	mov	r0, r3
 8001012:	f00c fae7 	bl	800d5e4 <HAL_RCC_ClockConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xc8>
	  {
	    Error_Handler();
 800101c:	f000 fc36 	bl	800188c <Error_Handler>
	  }
	}
 8001020:	bf00      	nop
 8001022:	3750      	adds	r7, #80	; 0x50
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <MX_I2C1_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_I2C1_Init+0x74>)
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <MX_I2C1_Init+0x7c>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001048:	2201      	movs	r2, #1
 800104a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_I2C1_Init+0x74>)
 800106c:	f00b f9cc 	bl	800c408 <HAL_I2C_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001076:	f000 fc09 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <MX_I2C1_Init+0x74>)
 800107e:	f00b ff25 	bl	800cecc <HAL_I2CEx_ConfigAnalogFilter>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001088:	f000 fc00 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_I2C1_Init+0x74>)
 8001090:	f00b ff67 	bl	800cf62 <HAL_I2CEx_ConfigDigitalFilter>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 fbf7 	bl	800188c <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000059c 	.word	0x2000059c
 80010a8:	40005400 	.word	0x40005400
 80010ac:	6000030d 	.word	0x6000030d

080010b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ETH_Init+0x80>)
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <MX_ETH_Init+0x84>)
 80010b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_ETH_Init+0x88>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_ETH_Init+0x88>)
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_ETH_Init+0x88>)
 80010c8:	22e1      	movs	r2, #225	; 0xe1
 80010ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_ETH_Init+0x88>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_ETH_Init+0x88>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_ETH_Init+0x88>)
 80010da:	2200      	movs	r2, #0
 80010dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_ETH_Init+0x80>)
 80010e0:	4a15      	ldr	r2, [pc, #84]	; (8001138 <MX_ETH_Init+0x88>)
 80010e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_ETH_Init+0x80>)
 80010e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_ETH_Init+0x80>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_ETH_Init+0x8c>)
 80010f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_ETH_Init+0x80>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_ETH_Init+0x90>)
 80010f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 0;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_ETH_Init+0x80>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_ETH_Init+0x80>)
 8001100:	f00a fc7c 	bl	800b9fc <HAL_ETH_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800110a:	f000 fbbf 	bl	800188c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800110e:	2238      	movs	r2, #56	; 0x38
 8001110:	2100      	movs	r1, #0
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <MX_ETH_Init+0x94>)
 8001114:	f011 f9f9 	bl	801250a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_ETH_Init+0x94>)
 800111a:	2221      	movs	r2, #33	; 0x21
 800111c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_ETH_Init+0x94>)
 8001120:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001124:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_ETH_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000454 	.word	0x20000454
 8001134:	40028000 	.word	0x40028000
 8001138:	20000618 	.word	0x20000618
 800113c:	2000035c 	.word	0x2000035c
 8001140:	200002bc 	.word	0x200002bc
 8001144:	2000041c 	.word	0x2000041c

08001148 <MX_RNG_Init>:


static void MX_RNG_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_RNG_Init+0x20>)
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <MX_RNG_Init+0x24>)
 8001150:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_RNG_Init+0x20>)
 8001154:	f00d f88e 	bl	800e274 <HAL_RNG_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800115e:	f000 fb95 	bl	800188c <Error_Handler>
  }

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000504 	.word	0x20000504
 800116c:	50060800 	.word	0x50060800

08001170 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <MX_USART3_UART_Init+0x5c>)
 8001178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART3_UART_Init+0x58>)
 80011b4:	f00d fbbe 	bl	800e934 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011be:	f000 fb65 	bl	800188c <Error_Handler>
  }

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000514 	.word	0x20000514
 80011cc:	40004800 	.word	0x40004800

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b56      	ldr	r3, [pc, #344]	; (8001340 <MX_GPIO_Init+0x170>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a55      	ldr	r2, [pc, #340]	; (8001340 <MX_GPIO_Init+0x170>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b53      	ldr	r3, [pc, #332]	; (8001340 <MX_GPIO_Init+0x170>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <MX_GPIO_Init+0x170>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <MX_GPIO_Init+0x170>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <MX_GPIO_Init+0x170>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <MX_GPIO_Init+0x170>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a49      	ldr	r2, [pc, #292]	; (8001340 <MX_GPIO_Init+0x170>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <MX_GPIO_Init+0x170>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <MX_GPIO_Init+0x170>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a43      	ldr	r2, [pc, #268]	; (8001340 <MX_GPIO_Init+0x170>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <MX_GPIO_Init+0x170>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <MX_GPIO_Init+0x170>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a3d      	ldr	r2, [pc, #244]	; (8001340 <MX_GPIO_Init+0x170>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_GPIO_Init+0x170>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <MX_GPIO_Init+0x170>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a37      	ldr	r2, [pc, #220]	; (8001340 <MX_GPIO_Init+0x170>)
 8001264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <MX_GPIO_Init+0x170>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f244 0181 	movw	r1, #16513	; 0x4081
 800127c:	4831      	ldr	r0, [pc, #196]	; (8001344 <MX_GPIO_Init+0x174>)
 800127e:	f00b f88f 	bl	800c3a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	4830      	ldr	r0, [pc, #192]	; (8001348 <MX_GPIO_Init+0x178>)
 8001288:	f00b f88a 	bl	800c3a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	482a      	ldr	r0, [pc, #168]	; (800134c <MX_GPIO_Init+0x17c>)
 80012a4:	f00a fed0 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4820      	ldr	r0, [pc, #128]	; (8001344 <MX_GPIO_Init+0x174>)
 80012c2:	f00a fec1 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012c6:	2340      	movs	r3, #64	; 0x40
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <MX_GPIO_Init+0x178>)
 80012de:	f00a feb3 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_GPIO_Init+0x178>)
 80012f6:	f00a fea7 	bl	800c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
   GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012fa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012fe:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800130c:	230a      	movs	r3, #10
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <MX_GPIO_Init+0x180>)
 8001318:	f00a fe96 	bl	800c048 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_VBUS_Pin */
     GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800131c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001320:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_GPIO_Init+0x180>)
 8001332:	f00a fe89 	bl	800c048 <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	; 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400
 8001348:	40021800 	.word	0x40021800
 800134c:	40020800 	.word	0x40020800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001366:	f00a fa23 	bl	800b7b0 <HAL_IncTick>
  }
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40001000 	.word	0x40001000

08001378 <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e01a      	b.n	80013be <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4619      	mov	r1, r3
 800138e:	4810      	ldr	r0, [pc, #64]	; (80013d0 <mg_random+0x58>)
 8001390:	f00c ff9a 	bl	800e2c8 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	18d0      	adds	r0, r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3304      	adds	r3, #4
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d203      	bcs.n	80013ac <mg_random+0x34>
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	e000      	b.n	80013ae <mg_random+0x36>
 80013ac:	2304      	movs	r3, #4
 80013ae:	f107 0108 	add.w	r1, r7, #8
 80013b2:	461a      	mov	r2, r3
 80013b4:	f011 f973 	bl	801269e <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3304      	adds	r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3e0      	bcc.n	8001388 <mg_random+0x10>
  }
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000504 	.word	0x20000504

080013d4 <timer_fn>:

static void timer_fn(void *arg) {
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = arg;                  // And show
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	61fb      	str	r3, [r7, #28]
  const char *names[] = {"down", "up", "req", "ready"};  // network stats
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <timer_fn+0x70>)
 80013e2:	f107 040c 	add.w	r4, r7, #12
 80013e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <timer_fn+0x74>)
 80013ee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80013f2:	4916      	ldr	r1, [pc, #88]	; (800144c <timer_fn+0x78>)
 80013f4:	2002      	movs	r0, #2
 80013f6:	f004 ffef 	bl	80063d8 <mg_log_prefix>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01c      	beq.n	800143a <timer_fn+0x66>
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	3320      	adds	r3, #32
 800140a:	443b      	add	r3, r7
 800140c:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f103 0508 	add.w	r5, r3, #8
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800141e:	69f9      	ldr	r1, [r7, #28]
 8001420:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8001422:	69f8      	ldr	r0, [r7, #28]
 8001424:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8001426:	9003      	str	r0, [sp, #12]
 8001428:	9102      	str	r1, [sp, #8]
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	462b      	mov	r3, r5
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <timer_fn+0x7c>)
 8001432:	4621      	mov	r1, r4
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <timer_fn+0x80>)
 8001436:	f005 f829 	bl	800648c <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	bf00      	nop
 8001444:	0801321c 	.word	0x0801321c
 8001448:	08014c48 	.word	0x08014c48
 800144c:	080131bc 	.word	0x080131bc
 8001450:	08006c29 	.word	0x08006c29
 8001454:	080131d0 	.word	0x080131d0

08001458 <sensor1>:

void sensor1(void *argument) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af04      	add	r7, sp, #16
 800145e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t read_buf[9];
		Temp = 15;
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <sensor1+0x94>)
 8001462:	220f      	movs	r2, #15
 8001464:	601a      	str	r2, [r3, #0]
		 //start_periodic_measurments
		status = HAL_I2C_Mem_Write(&hi2c1, SCD40_ADDR, (uint16_t) 0x21b1, 2, 0, 0, 5000);
 8001466:	f241 3388 	movw	r3, #5000	; 0x1388
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2300      	movs	r3, #0
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	2300      	movs	r3, #0
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2302      	movs	r3, #2
 8001476:	f242 12b1 	movw	r2, #8625	; 0x21b1
 800147a:	2162      	movs	r1, #98	; 0x62
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <sensor1+0x98>)
 800147e:	f00b f85d 	bl	800c53c <HAL_I2C_Mem_Write>
 8001482:	4603      	mov	r3, r0
 8001484:	75fb      	strb	r3, [r7, #23]

		// Read Measurement
		status = HAL_I2C_Mem_Read(&hi2c1, SCD40_ADDR, (uint16_t) 0xec05, (uint16_t) 2, read_buf,(uint16_t) 9, 500000);
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <sensor1+0x9c>)
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2309      	movs	r3, #9
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2302      	movs	r3, #2
 8001496:	f64e 4205 	movw	r2, #60421	; 0xec05
 800149a:	2162      	movs	r1, #98	; 0x62
 800149c:	4814      	ldr	r0, [pc, #80]	; (80014f0 <sensor1+0x98>)
 800149e:	f00b f961 	bl	800c764 <HAL_I2C_Mem_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	75fb      	strb	r3, [r7, #23]

		// stop_periodic_measurments
		status = HAL_I2C_Mem_Read(&hi2c1, SCD40_ADDR, (uint16_t) 0x3f86, 2, 0,0, 5000);
 80014a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2300      	movs	r3, #0
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	2300      	movs	r3, #0
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2302      	movs	r3, #2
 80014b6:	f643 7286 	movw	r2, #16262	; 0x3f86
 80014ba:	2162      	movs	r1, #98	; 0x62
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <sensor1+0x98>)
 80014be:	f00b f951 	bl	800c764 <HAL_I2C_Mem_Read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	75fb      	strb	r3, [r7, #23]
		MG_INFO(("status: %d", status));
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <sensor1+0xa0>)
 80014c8:	f240 12af 	movw	r2, #431	; 0x1af
 80014cc:	490b      	ldr	r1, [pc, #44]	; (80014fc <sensor1+0xa4>)
 80014ce:	2002      	movs	r0, #2
 80014d0:	f004 ff82 	bl	80063d8 <mg_log_prefix>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <sensor1+0x8c>
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	4619      	mov	r1, r3
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <sensor1+0xa8>)
 80014e0:	f004 ffd4 	bl	800648c <mg_log>
	(void) argument;

}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200005fc 	.word	0x200005fc
 80014f0:	2000059c 	.word	0x2000059c
 80014f4:	0007a120 	.word	0x0007a120
 80014f8:	08014c54 	.word	0x08014c54
 80014fc:	080131bc 	.word	0x080131bc
 8001500:	0801322c 	.word	0x0801322c

08001504 <blinker>:

void blinker(void *argument) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	for (;;) {
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <blinker+0x30>)
 8001510:	f00a ff5f 	bl	800c3d2 <HAL_GPIO_TogglePin>
	    osDelay((osKernelGetTickFreq() * BLINK_PERIOD_MS) / 1000U);
 8001514:	f00d ff7c 	bl	800f410 <osKernelGetTickFreq>
 8001518:	4603      	mov	r3, r0
 800151a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <blinker+0x34>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	4618      	mov	r0, r3
 800152c:	f00e f820 	bl	800f570 <osDelay>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 8001530:	e7ec      	b.n	800150c <blinker+0x8>
 8001532:	bf00      	nop
 8001534:	40020400 	.word	0x40020400
 8001538:	10624dd3 	.word	0x10624dd3

0800153c <fn>:
 * 	accepts the HTTP requests and feeds sensor *
 * 	values back in JSON format for the client  *
 * 	to receive then the javascript code takes  *
 *  over and displays the values on our UI.    *
 ***********************************************/
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b09e      	sub	sp, #120	; 0x78
 8001540:	af10      	add	r7, sp, #64	; 0x40
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]


	if (ev == MG_EV_HTTP_MSG) {
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b0a      	cmp	r3, #10
 800154e:	f040 8089 	bne.w	8001664 <fn+0x128>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
		if (mg_http_match_uri(hm, "/api/dispAQI")){
 8001556:	4945      	ldr	r1, [pc, #276]	; (800166c <fn+0x130>)
 8001558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800155a:	f003 fd4b 	bl	8004ff4 <mg_http_match_uri>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d010      	beq.n	8001586 <fn+0x4a>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 8001564:	4b42      	ldr	r3, [pc, #264]	; (8001670 <fn+0x134>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <fn+0x138>)
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	2300      	movs	r3, #0
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	4b40      	ldr	r3, [pc, #256]	; (8001678 <fn+0x13c>)
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <fn+0x140>)
 800157c:	4a40      	ldr	r2, [pc, #256]	; (8001680 <fn+0x144>)
 800157e:	21c8      	movs	r1, #200	; 0xc8
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f002 fe31 	bl	80041e8 <mg_http_reply>
					"{%m:%f}\n", MG_ESC("aqi"), aqi);
		}
		if(mg_http_match_uri(hm, "/api/AQI")){
 8001586:	493f      	ldr	r1, [pc, #252]	; (8001684 <fn+0x148>)
 8001588:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800158a:	f003 fd33 	bl	8004ff4 <mg_http_match_uri>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d015      	beq.n	80015c0 <fn+0x84>
			struct mg_str json = hm -> body;
 8001594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800159e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_json_get_num(json, "$.aqi", &aqi);
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <fn+0x134>)
 80015a8:	4a37      	ldr	r2, [pc, #220]	; (8001688 <fn+0x14c>)
 80015aa:	f107 0114 	add.w	r1, r7, #20
 80015ae:	c903      	ldmia	r1, {r0, r1}
 80015b0:	f004 fe78 	bl	80062a4 <mg_json_get_num>
//			str = mg_json_get_str(json, "&.health_level");
			mg_http_reply(c, 200, NULL, NULL);
 80015b4:	2300      	movs	r3, #0
 80015b6:	2200      	movs	r2, #0
 80015b8:	21c8      	movs	r1, #200	; 0xc8
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f002 fe14 	bl	80041e8 <mg_http_reply>
		}
		if(mg_http_match_uri(hm, "/api/sensors")){
 80015c0:	4932      	ldr	r1, [pc, #200]	; (800168c <fn+0x150>)
 80015c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015c4:	f003 fd16 	bl	8004ff4 <mg_http_match_uri>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d029      	beq.n	8001622 <fn+0xe6>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <fn+0x154>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a30      	ldr	r2, [pc, #192]	; (8001694 <fn+0x158>)
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	4930      	ldr	r1, [pc, #192]	; (8001698 <fn+0x15c>)
 80015d8:	6809      	ldr	r1, [r1, #0]
 80015da:	4830      	ldr	r0, [pc, #192]	; (800169c <fn+0x160>)
 80015dc:	6800      	ldr	r0, [r0, #0]
 80015de:	900f      	str	r0, [sp, #60]	; 0x3c
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <fn+0x164>)
 80015e2:	900e      	str	r0, [sp, #56]	; 0x38
 80015e4:	2000      	movs	r0, #0
 80015e6:	900d      	str	r0, [sp, #52]	; 0x34
 80015e8:	4823      	ldr	r0, [pc, #140]	; (8001678 <fn+0x13c>)
 80015ea:	900c      	str	r0, [sp, #48]	; 0x30
 80015ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80015ee:	492d      	ldr	r1, [pc, #180]	; (80016a4 <fn+0x168>)
 80015f0:	910a      	str	r1, [sp, #40]	; 0x28
 80015f2:	2100      	movs	r1, #0
 80015f4:	9109      	str	r1, [sp, #36]	; 0x24
 80015f6:	4920      	ldr	r1, [pc, #128]	; (8001678 <fn+0x13c>)
 80015f8:	9108      	str	r1, [sp, #32]
 80015fa:	9207      	str	r2, [sp, #28]
 80015fc:	4a2a      	ldr	r2, [pc, #168]	; (80016a8 <fn+0x16c>)
 80015fe:	9206      	str	r2, [sp, #24]
 8001600:	2200      	movs	r2, #0
 8001602:	9205      	str	r2, [sp, #20]
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <fn+0x13c>)
 8001606:	9204      	str	r2, [sp, #16]
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <fn+0x170>)
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2300      	movs	r3, #0
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <fn+0x13c>)
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <fn+0x174>)
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <fn+0x144>)
 800161a:	21c8      	movs	r1, #200	; 0xc8
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f002 fde3 	bl	80041e8 <mg_http_reply>
					"{%m:%u,%m:%u,%m:%u,%m:%u}\n", MG_ESC("temperature"), Temp,
												   MG_ESC("humidity"), Hum,
												   MG_ESC("pm25"), Pm,
												   MG_ESC("co2"), Carb);
		}
		MG_INFO(("connection established"));
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <fn+0x178>)
 8001624:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8001628:	4923      	ldr	r1, [pc, #140]	; (80016b8 <fn+0x17c>)
 800162a:	2002      	movs	r0, #2
 800162c:	f004 fed4 	bl	80063d8 <mg_log_prefix>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <fn+0x100>
 8001636:	4821      	ldr	r0, [pc, #132]	; (80016bc <fn+0x180>)
 8001638:	f004 ff28 	bl	800648c <mg_log>
	    struct mg_http_serve_opts opts = {
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <fn+0x184>)
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <fn+0x188>)
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
	        .root_dir = "/web_root",
	        .fs = &mg_fs_packed
	      };
	    mg_http_serve_dir(c, ev_data, &opts);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	461a      	mov	r2, r3
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f003 fc6c 	bl	8004f3c <mg_http_serve_dir>
	  }
	  (void) fn_data;
}
 8001664:	bf00      	nop
 8001666:	3738      	adds	r7, #56	; 0x38
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	08013238 	.word	0x08013238
 8001670:	20000610 	.word	0x20000610
 8001674:	08013278 	.word	0x08013278
 8001678:	08006e75 	.word	0x08006e75
 800167c:	08013248 	.word	0x08013248
 8001680:	08013254 	.word	0x08013254
 8001684:	0801327c 	.word	0x0801327c
 8001688:	08013288 	.word	0x08013288
 800168c:	08013290 	.word	0x08013290
 8001690:	200005fc 	.word	0x200005fc
 8001694:	20000600 	.word	0x20000600
 8001698:	20000608 	.word	0x20000608
 800169c:	20000604 	.word	0x20000604
 80016a0:	080132bc 	.word	0x080132bc
 80016a4:	080132c0 	.word	0x080132c0
 80016a8:	080132c8 	.word	0x080132c8
 80016ac:	080132d4 	.word	0x080132d4
 80016b0:	080132a0 	.word	0x080132a0
 80016b4:	08014c5c 	.word	0x08014c5c
 80016b8:	080131bc 	.word	0x080131bc
 80016bc:	080132e0 	.word	0x080132e0
 80016c0:	080132f8 	.word	0x080132f8
 80016c4:	20000000 	.word	0x20000000

080016c8 <server>:

void server(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0b6      	sub	sp, #216	; 0xd8
 80016cc:	af04      	add	r7, sp, #16
 80016ce:	6078      	str	r0, [r7, #4]
	Temp = 20;
 80016d0:	4b54      	ldr	r3, [pc, #336]	; (8001824 <server+0x15c>)
 80016d2:	2214      	movs	r2, #20
 80016d4:	601a      	str	r2, [r3, #0]
	Hum = 30;
 80016d6:	4b54      	ldr	r3, [pc, #336]	; (8001828 <server+0x160>)
 80016d8:	221e      	movs	r2, #30
 80016da:	601a      	str	r2, [r3, #0]
	Carb = 800;
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <server+0x164>)
 80016de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016e2:	601a      	str	r2, [r3, #0]
	Pm = 12;
 80016e4:	4b52      	ldr	r3, [pc, #328]	; (8001830 <server+0x168>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]

	struct mg_mgr mgr;        // Initialise Mongoose event manager
	mg_mgr_init(&mgr);        // and attach it to the interface
 80016ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 f940 	bl	8006974 <mg_mgr_init>
	mg_log_set(MG_LL_DEBUG);  // Set log level
 80016f4:	2003      	movs	r0, #3
 80016f6:	f004 fe4d 	bl	8006394 <mg_log_set>

		// Initialise Mongoose network stack
	  struct mg_tcpip_driver_stm32_data driver_data = {.mdc_cr = 4};
 80016fa:	2304      	movs	r3, #4
 80016fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	2278      	movs	r2, #120	; 0x78
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f010 fefe 	bl	801250a <memset>
 800170e:	2302      	movs	r3, #2
 8001710:	723b      	strb	r3, [r7, #8]
 8001712:	4b48      	ldr	r3, [pc, #288]	; (8001834 <server+0x16c>)
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b48      	ldr	r3, [pc, #288]	; (8001838 <server+0x170>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4053      	eors	r3, r2
 800171c:	b2db      	uxtb	r3, r3
 800171e:	727b      	strb	r3, [r7, #9]
 8001720:	4b46      	ldr	r3, [pc, #280]	; (800183c <server+0x174>)
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <server+0x178>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4053      	eors	r3, r2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	72bb      	strb	r3, [r7, #10]
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <server+0x17c>)
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	4b45      	ldr	r3, [pc, #276]	; (8001848 <server+0x180>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4053      	eors	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	72fb      	strb	r3, [r7, #11]
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <server+0x184>)
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <server+0x188>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4053      	eors	r3, r2
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <server+0x18c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4053      	eors	r3, r2
 800174e:	b2db      	uxtb	r3, r3
 8001750:	733b      	strb	r3, [r7, #12]
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <server+0x190>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <server+0x194>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4053      	eors	r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b40      	ldr	r3, [pc, #256]	; (8001860 <server+0x198>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4053      	eors	r3, r2
 8001764:	b2db      	uxtb	r3, r3
 8001766:	737b      	strb	r3, [r7, #13]
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <server+0x19c>)
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
 800176c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
		                          .driver = &mg_tcpip_driver_stm32,
		                          .driver_data = &driver_data};
		mg_tcpip_init(&mgr, &mif);
 8001772:	f107 0208 	add.w	r2, r7, #8
 8001776:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f009 fa35 	bl	800abec <mg_tcpip_init>
		mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 8001782:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <server+0x1a0>)
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2301      	movs	r3, #1
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	4608      	mov	r0, r1
 800179e:	f005 f8bf 	bl	8006920 <mg_timer_add>
		MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <server+0x1a4>)
 80017a4:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80017a8:	4931      	ldr	r1, [pc, #196]	; (8001870 <server+0x1a8>)
 80017aa:	2002      	movs	r0, #2
 80017ac:	f004 fe14 	bl	80063d8 <mg_log_prefix>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <server+0x10a>
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	461a      	mov	r2, r3
 80017bc:	492d      	ldr	r1, [pc, #180]	; (8001874 <server+0x1ac>)
 80017be:	482e      	ldr	r0, [pc, #184]	; (8001878 <server+0x1b0>)
 80017c0:	f004 fe64 	bl	800648c <mg_log>
		while (mif.state != MG_TCPIP_STATE_READY) {
 80017c4:	e005      	b.n	80017d2 <server+0x10a>
		    mg_mgr_poll(&mgr, 0);
 80017c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f009 fbab 	bl	800af28 <mg_mgr_poll>
		while (mif.state != MG_TCPIP_STATE_READY) {
 80017d2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d1f5      	bne.n	80017c6 <server+0xfe>
		}

		MG_INFO(("Initialising application..."));
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <server+0x1a4>)
 80017dc:	f240 12fb 	movw	r2, #507	; 0x1fb
 80017e0:	4923      	ldr	r1, [pc, #140]	; (8001870 <server+0x1a8>)
 80017e2:	2002      	movs	r0, #2
 80017e4:	f004 fdf8 	bl	80063d8 <mg_log_prefix>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <server+0x12c>
 80017ee:	4823      	ldr	r0, [pc, #140]	; (800187c <server+0x1b4>)
 80017f0:	f004 fe4c 	bl	800648c <mg_log>
		mg_http_listen(&mgr, HTTP_URL, fn, &mgr);
 80017f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017f8:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80017fc:	4a20      	ldr	r2, [pc, #128]	; (8001880 <server+0x1b8>)
 80017fe:	4921      	ldr	r1, [pc, #132]	; (8001884 <server+0x1bc>)
 8001800:	f003 ff18 	bl	8005634 <mg_http_listen>
		mg_http_listen(&mgr, HTTPS_URL, fn, &mgr);
 8001804:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001808:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <server+0x1b8>)
 800180e:	491e      	ldr	r1, [pc, #120]	; (8001888 <server+0x1c0>)
 8001810:	f003 ff10 	bl	8005634 <mg_http_listen>
		for (;;) {
			mg_mgr_poll(&mgr, 1);
 8001814:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001818:	2101      	movs	r1, #1
 800181a:	4618      	mov	r0, r3
 800181c:	f009 fb84 	bl	800af28 <mg_mgr_poll>
 8001820:	e7f8      	b.n	8001814 <server+0x14c>
 8001822:	bf00      	nop
 8001824:	200005fc 	.word	0x200005fc
 8001828:	20000600 	.word	0x20000600
 800182c:	20000604 	.word	0x20000604
 8001830:	20000608 	.word	0x20000608
 8001834:	1ff0f420 	.word	0x1ff0f420
 8001838:	1ff0f421 	.word	0x1ff0f421
 800183c:	1ff0f422 	.word	0x1ff0f422
 8001840:	1ff0f423 	.word	0x1ff0f423
 8001844:	1ff0f424 	.word	0x1ff0f424
 8001848:	1ff0f425 	.word	0x1ff0f425
 800184c:	1ff0f426 	.word	0x1ff0f426
 8001850:	1ff0f427 	.word	0x1ff0f427
 8001854:	1ff0f428 	.word	0x1ff0f428
 8001858:	1ff0f429 	.word	0x1ff0f429
 800185c:	1ff0f42a 	.word	0x1ff0f42a
 8001860:	1ff0f42b 	.word	0x1ff0f42b
 8001864:	20000240 	.word	0x20000240
 8001868:	080013d5 	.word	0x080013d5
 800186c:	08014c60 	.word	0x08014c60
 8001870:	080131bc 	.word	0x080131bc
 8001874:	08006ced 	.word	0x08006ced
 8001878:	08013304 	.word	0x08013304
 800187c:	08013320 	.word	0x08013320
 8001880:	0800153d 	.word	0x0800153d
 8001884:	0801333c 	.word	0x0801333c
 8001888:	08013350 	.word	0x08013350

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>

08001896 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	3330      	adds	r3, #48	; 0x30
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e002      	b.n	80018b0 <mg_dns_free+0x1a>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d1f7      	bne.n	80018aa <mg_dns_free+0x14>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f010 fb6a 	bl	8011f9c <free>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 80018e0:	e00d      	b.n	80018fe <mg_resolve_cancel+0x2e>
    tmp = d->next;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d103      	bne.n	80018fa <mg_resolve_cancel+0x2a>
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffce 	bl	8001896 <mg_dns_free>
  for (; d != NULL; d = tmp) {
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ee      	bne.n	80018e2 <mg_resolve_cancel+0x12>
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 800190e:	b590      	push	{r4, r7, lr}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <mg_call+0x24>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <mg_call+0x3c>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	47a0      	blx	r4
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}
	...

08001954 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8001954:	b40e      	push	{r1, r2, r3}
 8001956:	b580      	push	{r7, lr}
 8001958:	b095      	sub	sp, #84	; 0x54
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 800195e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001962:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	f107 0010 	add.w	r0, r7, #16
 800196c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800196e:	2140      	movs	r1, #64	; 0x40
 8001970:	f005 f888 	bl	8006a84 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <mg_error+0x70>)
 8001976:	f240 1293 	movw	r2, #403	; 0x193
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <mg_error+0x74>)
 800197c:	2001      	movs	r0, #1
 800197e:	f004 fd2b 	bl	80063d8 <mg_log_prefix>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <mg_error+0x46>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <mg_error+0x78>)
 8001996:	f004 fd79 	bl	800648c <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	461a      	mov	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffac 	bl	800190e <mg_call>
}
 80019b6:	bf00      	nop
 80019b8:	3754      	adds	r7, #84	; 0x54
 80019ba:	46bd      	mov	sp, r7
 80019bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019c0:	b003      	add	sp, #12
 80019c2:	4770      	bx	lr
 80019c4:	08014c70 	.word	0x08014c70
 80019c8:	08013374 	.word	0x08013374
 80019cc:	08013480 	.word	0x08013480

080019d0 <is_digit>:
#endif




static bool is_digit(int c) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b2f      	cmp	r3, #47	; 0x2f
 80019dc:	dd04      	ble.n	80019e8 <is_digit+0x18>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b39      	cmp	r3, #57	; 0x39
 80019e2:	dc01      	bgt.n	80019e8 <is_digit+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <is_digit+0x1a>
 80019e8:	2300      	movs	r3, #0
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <addexp>:

static int addexp(char *buf, int e, int sign) {
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  int n = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	617a      	str	r2, [r7, #20]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	2265      	movs	r2, #101	; 0x65
 8001a1a:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	617a      	str	r2, [r7, #20]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a34:	dd01      	ble.n	8001a3a <addexp+0x3e>
 8001a36:	2300      	movs	r3, #0
 8001a38:	e057      	b.n	8001aea <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	dc07      	bgt.n	8001a50 <addexp+0x54>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	617a      	str	r2, [r7, #20]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	2230      	movs	r2, #48	; 0x30
 8001a4e:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b63      	cmp	r3, #99	; 0x63
 8001a54:	dd1c      	ble.n	8001a90 <addexp+0x94>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <addexp+0xfc>)
 8001a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5e:	1152      	asrs	r2, r2, #5
 8001a60:	17db      	asrs	r3, r3, #31
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	1c59      	adds	r1, r3, #1
 8001a6a:	6179      	str	r1, [r7, #20]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	440b      	add	r3, r1
 8001a72:	3230      	adds	r2, #48	; 0x30
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <addexp+0xfc>)
 8001a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a80:	1151      	asrs	r1, r2, #5
 8001a82:	17da      	asrs	r2, r3, #31
 8001a84:	1a8a      	subs	r2, r1, r2
 8001a86:	2164      	movs	r1, #100	; 0x64
 8001a88:	fb01 f202 	mul.w	r2, r1, r2
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	dd1d      	ble.n	8001ad2 <addexp+0xd6>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <addexp+0x100>)
 8001a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9e:	1092      	asrs	r2, r2, #2
 8001aa0:	17db      	asrs	r3, r3, #31
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	1c59      	adds	r1, r3, #1
 8001aaa:	6179      	str	r1, [r7, #20]
 8001aac:	4619      	mov	r1, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3230      	adds	r2, #48	; 0x30
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <addexp+0x100>)
 8001abc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ac0:	1099      	asrs	r1, r3, #2
 8001ac2:	17d3      	asrs	r3, r2, #31
 8001ac4:	1ac9      	subs	r1, r1, r3
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	1c59      	adds	r1, r3, #1
 8001ada:	6179      	str	r1, [r7, #20]
 8001adc:	4619      	mov	r1, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3230      	adds	r2, #48	; 0x30
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
  return n;
 8001ae8:	697b      	ldr	r3, [r7, #20]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	51eb851f 	.word	0x51eb851f
 8001afc:	66666667 	.word	0x66666667

08001b00 <xisinf>:

static int xisinf(double x) {
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	000a      	movs	r2, r1
 8001b20:	2300      	movs	r3, #0
 8001b22:	4613      	mov	r3, r2
 8001b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <xisinf+0x4c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d106      	bne.n	8001b3c <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8001b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b32:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <xisinf+0x3c>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <xisinf+0x3e>
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	7ff00000 	.word	0x7ff00000

08001b50 <xisnan>:

static int xisnan(double x) {
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	000a      	movs	r2, r1
 8001b70:	2300      	movs	r3, #0
 8001b72:	4613      	mov	r3, r2
 8001b74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001b88:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001b8a:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <xisnan+0x54>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bf8c      	ite	hi
 8001b90:	2301      	movhi	r3, #1
 8001b92:	2300      	movls	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	7ff00000 	.word	0x7ff00000

08001ba8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b09e      	sub	sp, #120	; 0x78
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	6178      	str	r0, [r7, #20]
 8001bb0:	6139      	str	r1, [r7, #16]
 8001bb2:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd2:	f7fe ffa9 	bl	8000b28 <__aeabi_dcmpeq>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <mg_dtoa+0x44>
 8001bdc:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <mg_dtoa+0x234>)
 8001bde:	4a80      	ldr	r2, [pc, #512]	; (8001de0 <mg_dtoa+0x238>)
 8001be0:	6939      	ldr	r1, [r7, #16]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f004 ff76 	bl	8006ad4 <mg_snprintf>
 8001be8:	4603      	mov	r3, r0
 8001bea:	e2c9      	b.n	8002180 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8001bec:	ed97 0b02 	vldr	d0, [r7, #8]
 8001bf0:	f7ff ff86 	bl	8001b00 <xisinf>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d014      	beq.n	8001c24 <mg_dtoa+0x7c>
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c06:	f7fe ffb7 	bl	8000b78 <__aeabi_dcmpgt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <mg_dtoa+0x6c>
 8001c10:	4b74      	ldr	r3, [pc, #464]	; (8001de4 <mg_dtoa+0x23c>)
 8001c12:	e000      	b.n	8001c16 <mg_dtoa+0x6e>
 8001c14:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <mg_dtoa+0x240>)
 8001c16:	4a72      	ldr	r2, [pc, #456]	; (8001de0 <mg_dtoa+0x238>)
 8001c18:	6939      	ldr	r1, [r7, #16]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f004 ff5a 	bl	8006ad4 <mg_snprintf>
 8001c20:	4603      	mov	r3, r0
 8001c22:	e2ad      	b.n	8002180 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8001c24:	ed97 0b02 	vldr	d0, [r7, #8]
 8001c28:	f7ff ff92 	bl	8001b50 <xisnan>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <mg_dtoa+0x9a>
 8001c32:	4b6e      	ldr	r3, [pc, #440]	; (8001dec <mg_dtoa+0x244>)
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <mg_dtoa+0x238>)
 8001c36:	6939      	ldr	r1, [r7, #16]
 8001c38:	6978      	ldr	r0, [r7, #20]
 8001c3a:	f004 ff4b 	bl	8006ad4 <mg_snprintf>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	e29e      	b.n	8002180 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c4e:	f7fe ff75 	bl	8000b3c <__aeabi_dcmplt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00d      	beq.n	8001c74 <mg_dtoa+0xcc>
 8001c58:	68bc      	ldr	r4, [r7, #8]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c60:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8001c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	66ba      	str	r2, [r7, #104]	; 0x68
 8001c6a:	3370      	adds	r3, #112	; 0x70
 8001c6c:	443b      	add	r3, r7
 8001c6e:	222d      	movs	r2, #45	; 0x2d
 8001c70:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8001c74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c78:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <mg_dtoa+0x248>)
 8001c82:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001c86:	e00a      	b.n	8001c9e <mg_dtoa+0xf6>
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <mg_dtoa+0x24c>)
 8001c8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c92:	f7fe fce1 	bl	8000658 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <mg_dtoa+0x24c>)
 8001ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ca8:	f7fe ff5c 	bl	8000b64 <__aeabi_dcmpge>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d011      	beq.n	8001cd6 <mg_dtoa+0x12e>
 8001cb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cba:	f7fe fdf7 	bl	80008ac <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <mg_dtoa+0x24c>)
 8001ccc:	f7fe ff4a 	bl	8000b64 <__aeabi_dcmpge>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1d8      	bne.n	8001c88 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8001cd6:	e00a      	b.n	8001cee <mg_dtoa+0x146>
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <mg_dtoa+0x24c>)
 8001cde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ce2:	f7fe fde3 	bl	80008ac <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <mg_dtoa+0x248>)
 8001cf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cf8:	f7fe ff2a 	bl	8000b50 <__aeabi_dcmple>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d011      	beq.n	8001d26 <mg_dtoa+0x17e>
 8001d02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d0a:	f7fe fdcf 	bl	80008ac <__aeabi_ddiv>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <mg_dtoa+0x248>)
 8001d1c:	f7fe ff18 	bl	8000b50 <__aeabi_dcmple>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1d8      	bne.n	8001cd8 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <mg_dtoa+0x250>)
 8001d30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d34:	f7fe fc90 	bl	8000658 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001d40:	e00d      	b.n	8001d5e <mg_dtoa+0x1b6>
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <mg_dtoa+0x24c>)
 8001d48:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001d4c:	f7fe fdae 	bl	80008ac <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbed      	blt.n	8001d42 <mg_dtoa+0x19a>
  d += t;
 8001d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6e:	f7fe fabd 	bl	80002ec <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <mg_dtoa+0x248>)
 8001d80:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8001d84:	e00d      	b.n	8001da2 <mg_dtoa+0x1fa>
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <mg_dtoa+0x24c>)
 8001d8c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d90:	f7fe fc62 	bl	8000658 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d9e:	3301      	adds	r3, #1
 8001da0:	663b      	str	r3, [r7, #96]	; 0x60
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <mg_dtoa+0x24c>)
 8001da8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dac:	f7fe feda 	bl	8000b64 <__aeabi_dcmpge>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d011      	beq.n	8001dda <mg_dtoa+0x232>
 8001db6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dbe:	f7fe fd75 	bl	80008ac <__aeabi_ddiv>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <mg_dtoa+0x24c>)
 8001dd0:	f7fe fec8 	bl	8000b64 <__aeabi_dcmpge>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1d5      	bne.n	8001d86 <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8001dda:	e01d      	b.n	8001e18 <mg_dtoa+0x270>
 8001ddc:	0801348c 	.word	0x0801348c
 8001de0:	08013490 	.word	0x08013490
 8001de4:	08013494 	.word	0x08013494
 8001de8:	08013498 	.word	0x08013498
 8001dec:	080134a0 	.word	0x080134a0
 8001df0:	3ff00000 	.word	0x3ff00000
 8001df4:	40240000 	.word	0x40240000
 8001df8:	40140000 	.word	0x40140000
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b9d      	ldr	r3, [pc, #628]	; (8002078 <mg_dtoa+0x4d0>)
 8001e02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e06:	f7fe fd51 	bl	80008ac <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e14:	3b01      	subs	r3, #1
 8001e16:	663b      	str	r3, [r7, #96]	; 0x60
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b97      	ldr	r3, [pc, #604]	; (800207c <mg_dtoa+0x4d4>)
 8001e1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e22:	f7fe fe8b 	bl	8000b3c <__aeabi_dcmplt>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d011      	beq.n	8001e50 <mg_dtoa+0x2a8>
 8001e2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e34:	f7fe fd3a 	bl	80008ac <__aeabi_ddiv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b8d      	ldr	r3, [pc, #564]	; (800207c <mg_dtoa+0x4d4>)
 8001e46:	f7fe fe79 	bl	8000b3c <__aeabi_dcmplt>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1d5      	bne.n	8001dfc <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8001e50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	db33      	blt.n	8001ec0 <mg_dtoa+0x318>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	dd30      	ble.n	8001ec0 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001e5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001e66:	f7fe fd21 	bl	80008ac <__aeabi_ddiv>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ec43 2b17 	vmov	d7, r2, r3
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f107 0018 	add.w	r0, r7, #24
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e7e:	eef0 0a67 	vmov.f32	s1, s15
 8001e82:	2128      	movs	r1, #40	; 0x28
 8001e84:	f7ff fe90 	bl	8001ba8 <mg_dtoa>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8001e8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e90:	4413      	add	r3, r2
 8001e92:	f107 0218 	add.w	r2, r7, #24
 8001e96:	4413      	add	r3, r2
 8001e98:	222b      	movs	r2, #43	; 0x2b
 8001e9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fdad 	bl	80019fc <addexp>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ea6:	4413      	add	r3, r2
 8001ea8:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb2:	4a73      	ldr	r2, [pc, #460]	; (8002080 <mg_dtoa+0x4d8>)
 8001eb4:	6939      	ldr	r1, [r7, #16]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f004 fe0c 	bl	8006ad4 <mg_snprintf>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	e15f      	b.n	8002180 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	425b      	negs	r3, r3
 8001ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dc34      	bgt.n	8001f34 <mg_dtoa+0x38c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	dd31      	ble.n	8001f34 <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001ed0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ed4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ed8:	f7fe fce8 	bl	80008ac <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	ec43 2b17 	vmov	d7, r2, r3
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f107 0018 	add.w	r0, r7, #24
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef0:	eef0 0a67 	vmov.f32	s1, s15
 8001ef4:	2128      	movs	r1, #40	; 0x28
 8001ef6:	f7ff fe57 	bl	8001ba8 <mg_dtoa>
 8001efa:	4603      	mov	r3, r0
 8001efc:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8001efe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f02:	4413      	add	r3, r2
 8001f04:	f107 0218 	add.w	r2, r7, #24
 8001f08:	18d0      	adds	r0, r2, r3
 8001f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	222d      	movs	r2, #45	; 0x2d
 8001f10:	4619      	mov	r1, r3
 8001f12:	f7ff fd73 	bl	80019fc <addexp>
 8001f16:	4602      	mov	r2, r0
 8001f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f1a:	4413      	add	r3, r2
 8001f1c:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001f1e:	f107 0318 	add.w	r3, r7, #24
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f26:	4a56      	ldr	r2, [pc, #344]	; (8002080 <mg_dtoa+0x4d8>)
 8001f28:	6939      	ldr	r1, [r7, #16]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f004 fdd2 	bl	8006ad4 <mg_snprintf>
 8001f30:	4603      	mov	r3, r0
 8001f32:	e125      	b.n	8002180 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001f34:	2300      	movs	r3, #0
 8001f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f40:	e03f      	b.n	8001fc2 <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8001f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f4a:	f7fe fcaf 	bl	80008ac <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fe19 	bl	8000b8c <__aeabi_d2iz>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8001f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	dc02      	bgt.n	8001f6a <mg_dtoa+0x3c2>
 8001f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	dd0c      	ble.n	8001f84 <mg_dtoa+0x3dc>
 8001f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f70:	1c59      	adds	r1, r3, #1
 8001f72:	6679      	str	r1, [r7, #100]	; 0x64
 8001f74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f76:	440b      	add	r3, r1
 8001f78:	3230      	adds	r2, #48	; 0x30
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	3370      	adds	r3, #112	; 0x70
 8001f7e:	443b      	add	r3, r7
 8001f80:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001f84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001f86:	f7fe fafd 	bl	8000584 <__aeabi_i2d>
 8001f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f8e:	f7fe fb63 	bl	8000658 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9a:	f7fe f9a5 	bl	80002e8 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <mg_dtoa+0x4d0>)
 8001fac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fb0:	f7fe fc7c 	bl	80008ac <__aeabi_ddiv>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	; (800207c <mg_dtoa+0x4d4>)
 8001fc8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fcc:	f7fe fdca 	bl	8000b64 <__aeabi_dcmpge>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d004      	beq.n	8001fe0 <mg_dtoa+0x438>
 8001fd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fda:	4413      	add	r3, r2
 8001fdc:	2b27      	cmp	r3, #39	; 0x27
 8001fde:	ddb0      	ble.n	8001f42 <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8001fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11b      	bne.n	800201e <mg_dtoa+0x476>
 8001fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	66ba      	str	r2, [r7, #104]	; 0x68
 8001fec:	3370      	adds	r3, #112	; 0x70
 8001fee:	443b      	add	r3, r7
 8001ff0:	2230      	movs	r2, #48	; 0x30
 8001ff2:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8001ff6:	e012      	b.n	800201e <mg_dtoa+0x476>
 8001ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	667a      	str	r2, [r7, #100]	; 0x64
 8001ffe:	3370      	adds	r3, #112	; 0x70
 8002000:	443b      	add	r3, r7
 8002002:	2230      	movs	r2, #48	; 0x30
 8002004:	f803 2c58 	strb.w	r2, [r3, #-88]
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <mg_dtoa+0x4d0>)
 800200e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002012:	f7fe fc4b 	bl	80008ac <__aeabi_ddiv>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <mg_dtoa+0x4d4>)
 8002024:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002028:	f7fe fd9c 	bl	8000b64 <__aeabi_dcmpge>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <mg_dtoa+0x494>
 8002032:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002036:	4413      	add	r3, r2
 8002038:	2b27      	cmp	r3, #39	; 0x27
 800203a:	dddd      	ble.n	8001ff8 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 800203c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800203e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002040:	4413      	add	r3, r2
 8002042:	2b27      	cmp	r3, #39	; 0x27
 8002044:	dc09      	bgt.n	800205a <mg_dtoa+0x4b2>
 8002046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	66ba      	str	r2, [r7, #104]	; 0x68
 800204c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800204e:	4413      	add	r3, r2
 8002050:	3370      	adds	r3, #112	; 0x70
 8002052:	443b      	add	r3, r7
 8002054:	222e      	movs	r2, #46	; 0x2e
 8002056:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 800205a:	2300      	movs	r3, #0
 800205c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800205e:	a304      	add	r3, pc, #16	; (adr r3, 8002070 <mg_dtoa+0x4c8>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002068:	e046      	b.n	80020f8 <mg_dtoa+0x550>
 800206a:	bf00      	nop
 800206c:	f3af 8000 	nop.w
 8002070:	9999999a 	.word	0x9999999a
 8002074:	3fb99999 	.word	0x3fb99999
 8002078:	40240000 	.word	0x40240000
 800207c:	3ff00000 	.word	0x3ff00000
 8002080:	080134a4 	.word	0x080134a4
      int ch = (int) (d / t);
 8002084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800208c:	f7fe fc0e 	bl	80008ac <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd78 	bl	8000b8c <__aeabi_d2iz>
 800209c:	4603      	mov	r3, r0
 800209e:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 80020a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	6679      	str	r1, [r7, #100]	; 0x64
 80020aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020ac:	440b      	add	r3, r1
 80020ae:	3230      	adds	r2, #48	; 0x30
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	3370      	adds	r3, #112	; 0x70
 80020b4:	443b      	add	r3, r7
 80020b6:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80020ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020bc:	f7fe fa62 	bl	8000584 <__aeabi_i2d>
 80020c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020c4:	f7fe fac8 	bl	8000658 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020d0:	f7fe f90a 	bl	80002e8 <__aeabi_dsub>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b29      	ldr	r3, [pc, #164]	; (8002188 <mg_dtoa+0x5e0>)
 80020e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80020e6:	f7fe fbe1 	bl	80008ac <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80020f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f4:	3301      	adds	r3, #1
 80020f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020fc:	4413      	add	r3, r2
 80020fe:	2b27      	cmp	r3, #39	; 0x27
 8002100:	dc07      	bgt.n	8002112 <mg_dtoa+0x56a>
 8002102:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	dbbc      	blt.n	8002084 <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 800210a:	e002      	b.n	8002112 <mg_dtoa+0x56a>
 800210c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800210e:	3b01      	subs	r3, #1
 8002110:	667b      	str	r3, [r7, #100]	; 0x64
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <mg_dtoa+0x58a>
 8002118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800211a:	2b00      	cmp	r3, #0
 800211c:	dd09      	ble.n	8002132 <mg_dtoa+0x58a>
 800211e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002122:	4413      	add	r3, r2
 8002124:	3b01      	subs	r3, #1
 8002126:	3370      	adds	r3, #112	; 0x70
 8002128:	443b      	add	r3, r7
 800212a:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800212e:	2b30      	cmp	r3, #48	; 0x30
 8002130:	d0ec      	beq.n	800210c <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8002132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002134:	2b00      	cmp	r3, #0
 8002136:	dd0c      	ble.n	8002152 <mg_dtoa+0x5aa>
 8002138:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800213a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800213c:	4413      	add	r3, r2
 800213e:	3b01      	subs	r3, #1
 8002140:	3370      	adds	r3, #112	; 0x70
 8002142:	443b      	add	r3, r7
 8002144:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002148:	2b2e      	cmp	r3, #46	; 0x2e
 800214a:	d102      	bne.n	8002152 <mg_dtoa+0x5aa>
 800214c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800214e:	3b01      	subs	r3, #1
 8002150:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 8002152:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002156:	4413      	add	r3, r2
 8002158:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800215a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800215c:	2b27      	cmp	r3, #39	; 0x27
 800215e:	dd01      	ble.n	8002164 <mg_dtoa+0x5bc>
 8002160:	2327      	movs	r3, #39	; 0x27
 8002162:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 8002164:	f107 0218 	add.w	r2, r7, #24
 8002168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216a:	4413      	add	r3, r2
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	4a05      	ldr	r2, [pc, #20]	; (800218c <mg_dtoa+0x5e4>)
 8002176:	6939      	ldr	r1, [r7, #16]
 8002178:	6978      	ldr	r0, [r7, #20]
 800217a:	f004 fcab 	bl	8006ad4 <mg_snprintf>
 800217e:	4603      	mov	r3, r0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3770      	adds	r7, #112	; 0x70
 8002184:	46bd      	mov	sp, r7
 8002186:	bdb0      	pop	{r4, r5, r7, pc}
 8002188:	40240000 	.word	0x40240000
 800218c:	08013490 	.word	0x08013490

08002190 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <mg_lld+0x15c>)
 800219e:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80021a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80021ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d012      	beq.n	80021da <mg_lld+0x4a>
 80021b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0e      	bge.n	80021da <mg_lld+0x4a>
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	627a      	str	r2, [r7, #36]	; 0x24
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	222d      	movs	r2, #45	; 0x2d
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021ce:	2100      	movs	r1, #0
 80021d0:	4254      	negs	r4, r2
 80021d2:	eb61 0503 	sbc.w	r5, r1, r3
 80021d6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 80021da:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d021      	beq.n	8002226 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
 80021e6:	e019      	b.n	800221c <mg_lld+0x8c>
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	441a      	add	r2, r3
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	1c59      	adds	r1, r3, #1
 80021f6:	6239      	str	r1, [r7, #32]
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fa:	440b      	add	r3, r1
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	440b      	add	r3, r1
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	0902      	lsrs	r2, r0, #4
 8002212:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002216:	090b      	lsrs	r3, r1, #4
 8002218:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800221c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002220:	4313      	orrs	r3, r2
 8002222:	d1e1      	bne.n	80021e8 <mg_lld+0x58>
 8002224:	e025      	b.n	8002272 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
 800222a:	e01e      	b.n	800226a <mg_lld+0xda>
 800222c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002230:	f04f 020a 	mov.w	r2, #10
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f7fe fcd0 	bl	8000bdc <__aeabi_uldivmod>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	441a      	add	r2, r3
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	1c59      	adds	r1, r3, #1
 8002244:	6239      	str	r1, [r7, #32]
 8002246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002248:	440b      	add	r3, r1
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	440b      	add	r3, r1
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002256:	f04f 020a 	mov.w	r2, #10
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	f7fe fcbd 	bl	8000bdc <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800226a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800226e:	4313      	orrs	r3, r2
 8002270:	d1dc      	bne.n	800222c <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e022      	b.n	80022be <mg_lld+0x12e>
    char t = buf[s + i];
 8002278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	441a      	add	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	441a      	add	r2, r3
 8002296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	440b      	add	r3, r1
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	440b      	add	r3, r1
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	441a      	add	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	7dfa      	ldrb	r2, [r7, #23]
 80022b6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3d7      	bcc.n	8002278 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 80022c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	d106      	bne.n	80022de <mg_lld+0x14e>
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	623a      	str	r2, [r7, #32]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	2230      	movs	r2, #48	; 0x30
 80022dc:	701a      	strb	r2, [r3, #0]
  return n + s;
 80022de:	6a3a      	ldr	r2, [r7, #32]
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	4413      	add	r3, r2
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	080134ac 	.word	0x080134ac

080022f0 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8002302:	e009      	b.n	8002318 <scpy+0x28>
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	617a      	str	r2, [r7, #20]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	4610      	mov	r0, r2
 8002316:	4798      	blx	r3
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d205      	bcs.n	800232c <scpy+0x3c>
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1eb      	bne.n	8002304 <scpy+0x14>
  return i;
 800232c:	697b      	ldr	r3, [r7, #20]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8002336:	b40c      	push	{r2, r3}
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f809 	bl	800236c <mg_vxprintf>
 800235a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002368:	b002      	add	sp, #8
 800236a:	4770      	bx	lr

0800236c <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 800236c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002370:	b0a6      	sub	sp, #152	; 0x98
 8002372:	af02      	add	r7, sp, #8
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8002388:	e383      	b.n	8002a92 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b25      	cmp	r3, #37	; 0x25
 8002396:	f040 8369 	bne.w	8002a6c <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 800239a:	2300      	movs	r3, #0
 800239c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800239e:	2300      	movs	r3, #0
 80023a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80023a2:	2300      	movs	r3, #0
 80023a4:	677b      	str	r3, [r7, #116]	; 0x74
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80023ac:	2320      	movs	r3, #32
 80023ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80023b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023bc:	3301      	adds	r3, #1
 80023be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 80023d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023d4:	2b23      	cmp	r3, #35	; 0x23
 80023d6:	d10e      	bne.n	80023f6 <mg_vxprintf+0x8a>
 80023d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023da:	3301      	adds	r3, #1
 80023dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80023f6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023fa:	2b2d      	cmp	r3, #45	; 0x2d
 80023fc:	d110      	bne.n	8002420 <mg_vxprintf+0xb4>
 80023fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002402:	3301      	adds	r3, #1
 8002404:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240c:	3301      	adds	r3, #1
 800240e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8002420:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002424:	2b30      	cmp	r3, #48	; 0x30
 8002426:	d127      	bne.n	8002478 <mg_vxprintf+0x10c>
 8002428:	2330      	movs	r3, #48	; 0x30
 800242a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002432:	3301      	adds	r3, #1
 8002434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8002446:	e017      	b.n	8002478 <mg_vxprintf+0x10c>
 8002448:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	677b      	str	r3, [r7, #116]	; 0x74
 8002454:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245a:	4413      	add	r3, r2
 800245c:	3b30      	subs	r3, #48	; 0x30
 800245e:	677b      	str	r3, [r7, #116]	; 0x74
 8002460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002464:	3301      	adds	r3, #1
 8002466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002470:	4413      	add	r3, r2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002478:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff faa7 	bl	80019d0 <is_digit>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1df      	bne.n	8002448 <mg_vxprintf+0xdc>
      if (c == '.') {
 8002488:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800248c:	2b2e      	cmp	r3, #46	; 0x2e
 800248e:	d153      	bne.n	8002538 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002494:	3301      	adds	r3, #1
 8002496:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a0:	4413      	add	r3, r2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 80024a8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024ac:	2b2a      	cmp	r3, #42	; 0x2a
 80024ae:	d113      	bne.n	80024d8 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	1d19      	adds	r1, r3, #4
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6011      	str	r1, [r2, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 80024be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c2:	3301      	adds	r3, #1
 80024c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80024d6:	e02f      	b.n	8002538 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80024dc:	e017      	b.n	800250e <mg_vxprintf+0x1a2>
 80024de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
 80024ea:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80024ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f0:	4413      	add	r3, r2
 80024f2:	3b30      	subs	r3, #48	; 0x30
 80024f4:	673b      	str	r3, [r7, #112]	; 0x70
 80024f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fa:	3301      	adds	r3, #1
 80024fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800250e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fa5c 	bl	80019d0 <is_digit>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1df      	bne.n	80024de <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 800251e:	e00b      	b.n	8002538 <mg_vxprintf+0x1cc>
 8002520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002524:	3301      	adds	r3, #1
 8002526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002530:	4413      	add	r3, r2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002538:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800253c:	2b68      	cmp	r3, #104	; 0x68
 800253e:	d0ef      	beq.n	8002520 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8002540:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002544:	2b6c      	cmp	r3, #108	; 0x6c
 8002546:	d121      	bne.n	800258c <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8002548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254a:	3301      	adds	r3, #1
 800254c:	67bb      	str	r3, [r7, #120]	; 0x78
 800254e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002552:	3301      	adds	r3, #1
 8002554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8002566:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800256a:	2b6c      	cmp	r3, #108	; 0x6c
 800256c:	d10e      	bne.n	800258c <mg_vxprintf+0x220>
 800256e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002570:	3301      	adds	r3, #1
 8002572:	67bb      	str	r3, [r7, #120]	; 0x78
 8002574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002578:	3301      	adds	r3, #1
 800257a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 800258c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d103      	bne.n	800259c <mg_vxprintf+0x230>
 8002594:	2301      	movs	r3, #1
 8002596:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002598:	2301      	movs	r3, #1
 800259a:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 800259c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025a0:	2b64      	cmp	r3, #100	; 0x64
 80025a2:	d018      	beq.n	80025d6 <mg_vxprintf+0x26a>
 80025a4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025a8:	2b75      	cmp	r3, #117	; 0x75
 80025aa:	d014      	beq.n	80025d6 <mg_vxprintf+0x26a>
 80025ac:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025b0:	2b78      	cmp	r3, #120	; 0x78
 80025b2:	d010      	beq.n	80025d6 <mg_vxprintf+0x26a>
 80025b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025b8:	2b58      	cmp	r3, #88	; 0x58
 80025ba:	d00c      	beq.n	80025d6 <mg_vxprintf+0x26a>
 80025bc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d008      	beq.n	80025d6 <mg_vxprintf+0x26a>
 80025c4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025c8:	2b67      	cmp	r3, #103	; 0x67
 80025ca:	d004      	beq.n	80025d6 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 80025cc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025d0:	2b66      	cmp	r3, #102	; 0x66
 80025d2:	f040 816c 	bne.w	80028ae <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80025d6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	bf0c      	ite	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	2300      	movne	r3, #0
 80025e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80025e6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025ea:	2b78      	cmp	r3, #120	; 0x78
 80025ec:	d007      	beq.n	80025fe <mg_vxprintf+0x292>
 80025ee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025f2:	2b58      	cmp	r3, #88	; 0x58
 80025f4:	d003      	beq.n	80025fe <mg_vxprintf+0x292>
 80025f6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025fa:	2b70      	cmp	r3, #112	; 0x70
 80025fc:	d101      	bne.n	8002602 <mg_vxprintf+0x296>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <mg_vxprintf+0x298>
 8002602:	2300      	movs	r3, #0
 8002604:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8002608:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8002614:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <mg_vxprintf+0x2b2>
 800261a:	2302      	movs	r3, #2
 800261c:	e000      	b.n	8002620 <mg_vxprintf+0x2b4>
 800261e:	2300      	movs	r3, #0
 8002620:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 8002622:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002626:	2b67      	cmp	r3, #103	; 0x67
 8002628:	d003      	beq.n	8002632 <mg_vxprintf+0x2c6>
 800262a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800262e:	2b66      	cmp	r3, #102	; 0x66
 8002630:	d124      	bne.n	800267c <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3307      	adds	r3, #7
 8002638:	f023 0307 	bic.w	r3, r3, #7
 800263c:	f103 0108 	add.w	r1, r3, #8
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	6011      	str	r1, [r2, #0]
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 800264c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d101      	bne.n	8002658 <mg_vxprintf+0x2ec>
 8002654:	2306      	movs	r3, #6
 8002656:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002658:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800265a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800265e:	2b67      	cmp	r3, #103	; 0x67
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f107 0014 	add.w	r0, r7, #20
 800266c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002670:	2128      	movs	r1, #40	; 0x28
 8002672:	f7ff fa99 	bl	8001ba8 <mg_dtoa>
 8002676:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 800267a:	e069      	b.n	8002750 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 800267c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267e:	2b02      	cmp	r3, #2
 8002680:	d11c      	bne.n	80026bc <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3307      	adds	r3, #7
 8002688:	f023 0307 	bic.w	r3, r3, #7
 800268c:	f103 0108 	add.w	r1, r3, #8
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	6011      	str	r1, [r2, #0]
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 800269c:	f107 0114 	add.w	r1, r7, #20
 80026a0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026b0:	4608      	mov	r0, r1
 80026b2:	f7ff fd6d 	bl	8002190 <mg_lld>
 80026b6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80026ba:	e049      	b.n	8002750 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 80026bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d123      	bne.n	800270a <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1d19      	adds	r1, r3, #4
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	6011      	str	r1, [r2, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 80026d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <mg_vxprintf+0x376>
 80026d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026da:	17da      	asrs	r2, r3, #31
 80026dc:	461c      	mov	r4, r3
 80026de:	4615      	mov	r5, r2
 80026e0:	e003      	b.n	80026ea <mg_vxprintf+0x37e>
 80026e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e4:	2200      	movs	r2, #0
 80026e6:	461c      	mov	r4, r3
 80026e8:	4615      	mov	r5, r2
 80026ea:	f107 0114 	add.w	r1, r7, #20
 80026ee:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	4608      	mov	r0, r1
 8002700:	f7ff fd46 	bl	8002190 <mg_lld>
 8002704:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002708:	e022      	b.n	8002750 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	1d19      	adds	r1, r3, #4
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	6011      	str	r1, [r2, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8002718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <mg_vxprintf+0x3be>
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	17da      	asrs	r2, r3, #31
 8002724:	4698      	mov	r8, r3
 8002726:	4691      	mov	r9, r2
 8002728:	e003      	b.n	8002732 <mg_vxprintf+0x3c6>
 800272a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272c:	2200      	movs	r2, #0
 800272e:	4698      	mov	r8, r3
 8002730:	4691      	mov	r9, r2
 8002732:	f107 0114 	add.w	r1, r7, #20
 8002736:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	4642      	mov	r2, r8
 8002744:	464b      	mov	r3, r9
 8002746:	4608      	mov	r0, r1
 8002748:	f7ff fd22 	bl	8002190 <mg_lld>
 800274c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002756:	e007      	b.n	8002768 <mg_vxprintf+0x3fc>
 8002758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275a:	3b01      	subs	r3, #1
 800275c:	677b      	str	r3, [r7, #116]	; 0x74
 800275e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002762:	3301      	adds	r3, #1
 8002764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002768:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800276c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276e:	429a      	cmp	r2, r3
 8002770:	d202      	bcs.n	8002778 <mg_vxprintf+0x40c>
 8002772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ef      	bne.n	8002758 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800277e:	e011      	b.n	80027a4 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002780:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002784:	2301      	movs	r3, #1
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fdb1 	bl	80022f0 <scpy>
 800278e:	4602      	mov	r2, r0
 8002790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002794:	4413      	add	r3, r2
 8002796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 800279a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800279e:	3301      	adds	r3, #1
 80027a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d110      	bne.n	80027ce <mg_vxprintf+0x462>
 80027ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10c      	bne.n	80027ce <mg_vxprintf+0x462>
 80027b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d207      	bcs.n	80027ce <mg_vxprintf+0x462>
 80027be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80027c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027c6:	4413      	add	r3, r2
 80027c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d8d8      	bhi.n	8002780 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 80027ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d0:	4ab7      	ldr	r2, [pc, #732]	; (8002ab0 <mg_vxprintf+0x744>)
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fd8b 	bl	80022f0 <scpy>
 80027da:	4602      	mov	r2, r0
 80027dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027e0:	4413      	add	r3, r2
 80027e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027ec:	e011      	b.n	8002812 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 80027ee:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80027f2:	2301      	movs	r3, #1
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fd7a 	bl	80022f0 <scpy>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002802:	4413      	add	r3, r2
 8002804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800280c:	3301      	adds	r3, #1
 800280e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002816:	2b30      	cmp	r3, #48	; 0x30
 8002818:	d10c      	bne.n	8002834 <mg_vxprintf+0x4c8>
 800281a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <mg_vxprintf+0x4c8>
 8002824:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800282c:	4413      	add	r3, r2
 800282e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002830:	429a      	cmp	r2, r3
 8002832:	d8dc      	bhi.n	80027ee <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8002834:	f107 0214 	add.w	r2, r7, #20
 8002838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fd56 	bl	80022f0 <scpy>
 8002844:	4602      	mov	r2, r0
 8002846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800284a:	4413      	add	r3, r2
 800284c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002856:	e011      	b.n	800287c <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002858:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800285c:	2301      	movs	r3, #1
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fd45 	bl	80022f0 <scpy>
 8002866:	4602      	mov	r2, r0
 8002868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800286c:	4413      	add	r3, r2
 800286e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002872:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002876:	3301      	adds	r3, #1
 8002878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800287c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002880:	2b20      	cmp	r3, #32
 8002882:	f040 80ea 	bne.w	8002a5a <mg_vxprintf+0x6ee>
 8002886:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80e5 	beq.w	8002a5a <mg_vxprintf+0x6ee>
 8002890:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002896:	429a      	cmp	r2, r3
 8002898:	f080 80df 	bcs.w	8002a5a <mg_vxprintf+0x6ee>
 800289c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80028a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a4:	4413      	add	r3, r2
 80028a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d8d5      	bhi.n	8002858 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 80028ac:	e0d5      	b.n	8002a5a <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 80028ae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028b2:	2b6d      	cmp	r3, #109	; 0x6d
 80028b4:	d003      	beq.n	80028be <mg_vxprintf+0x552>
 80028b6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028ba:	2b4d      	cmp	r3, #77	; 0x4d
 80028bc:	d128      	bne.n	8002910 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1d19      	adds	r1, r3, #4
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	6011      	str	r1, [r2, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 80028cc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028d0:	2b6d      	cmp	r3, #109	; 0x6d
 80028d2:	d103      	bne.n	80028dc <mg_vxprintf+0x570>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	2022      	movs	r0, #34	; 0x22
 80028da:	4798      	blx	r3
        n += f(out, param, ap);
 80028dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	4798      	blx	r3
 80028e6:	4602      	mov	r2, r0
 80028e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ec:	4413      	add	r3, r2
 80028ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 80028f2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028f6:	2b6d      	cmp	r3, #109	; 0x6d
 80028f8:	f040 80b1 	bne.w	8002a5e <mg_vxprintf+0x6f2>
 80028fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002900:	3302      	adds	r3, #2
 8002902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	2022      	movs	r0, #34	; 0x22
 800290c:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 800290e:	e0a6      	b.n	8002a5e <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8002910:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002914:	2b63      	cmp	r3, #99	; 0x63
 8002916:	d112      	bne.n	800293e <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1d19      	adds	r1, r3, #4
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	6011      	str	r1, [r2, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 8002926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4610      	mov	r0, r2
 8002930:	4798      	blx	r3
        n++;
 8002932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002936:	3301      	adds	r3, #1
 8002938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800293c:	e090      	b.n	8002a60 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 800293e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002942:	2b73      	cmp	r3, #115	; 0x73
 8002944:	d16b      	bne.n	8002a1e <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1d19      	adds	r1, r3, #4
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	6011      	str	r1, [r2, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8002954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d109      	bne.n	8002970 <mg_vxprintf+0x604>
 800295c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295e:	2b00      	cmp	r3, #0
 8002960:	d004      	beq.n	800296c <mg_vxprintf+0x600>
 8002962:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002964:	f7fd fcb4 	bl	80002d0 <strlen>
 8002968:	4603      	mov	r3, r0
 800296a:	e000      	b.n	800296e <mg_vxprintf+0x602>
 800296c:	2300      	movs	r3, #0
 800296e:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002976:	e011      	b.n	800299c <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002978:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800297c:	2301      	movs	r3, #1
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff fcb5 	bl	80022f0 <scpy>
 8002986:	4602      	mov	r2, r0
 8002988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800298c:	4413      	add	r3, r2
 800298e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002996:	3301      	adds	r3, #1
 8002998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800299c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10a      	bne.n	80029ba <mg_vxprintf+0x64e>
 80029a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80029a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d206      	bcs.n	80029ba <mg_vxprintf+0x64e>
 80029ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80029b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b2:	4413      	add	r3, r2
 80029b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d8de      	bhi.n	8002978 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 80029ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff fc95 	bl	80022f0 <scpy>
 80029c6:	4602      	mov	r2, r0
 80029c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029cc:	4413      	add	r3, r2
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029d8:	e011      	b.n	80029fe <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 80029da:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80029de:	2301      	movs	r3, #1
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff fc84 	bl	80022f0 <scpy>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ee:	4413      	add	r3, r2
 80029f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80029f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02c      	beq.n	8002a60 <mg_vxprintf+0x6f4>
 8002a06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d228      	bcs.n	8002a60 <mg_vxprintf+0x6f4>
 8002a0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a14:	4413      	add	r3, r2
 8002a16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d8de      	bhi.n	80029da <mg_vxprintf+0x66e>
 8002a1c:	e020      	b.n	8002a60 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8002a1e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002a22:	2b25      	cmp	r3, #37	; 0x25
 8002a24:	d109      	bne.n	8002a3a <mg_vxprintf+0x6ce>
        out('%', param);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	2025      	movs	r0, #37	; 0x25
 8002a2c:	4798      	blx	r3
        n++;
 8002a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a32:	3301      	adds	r3, #1
 8002a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a38:	e012      	b.n	8002a60 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	2025      	movs	r0, #37	; 0x25
 8002a40:	4798      	blx	r3
        out(c, param);
 8002a42:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4798      	blx	r3
        n += 2;
 8002a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a52:	3302      	adds	r3, #2
 8002a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a58:	e002      	b.n	8002a60 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8002a5e:	bf00      	nop
      }
      i++;
 8002a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a64:	3301      	adds	r3, #1
 8002a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a6a:	e012      	b.n	8002a92 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a72:	4413      	add	r3, r2
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4798      	blx	r3
 8002a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a98:	4413      	add	r3, r2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f ac74 	bne.w	800238a <mg_vxprintf+0x1e>
    }
  }
  return n;
 8002aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3790      	adds	r7, #144	; 0x90
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ab0:	080134c0 	.word	0x080134c0

08002ab4 <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8002ac0:	2108      	movs	r1, #8
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f00f fa44 	bl	8011f50 <calloc>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d013      	beq.n	8002afa <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68b8      	ldr	r0, [r7, #8]
 8002ada:	4798      	blx	r3
 8002adc:	4602      	mov	r2, r0
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <mg_fs_open+0x46>
      free(fd);
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	f00f fa53 	bl	8011f9c <free>
      fd = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8002afa:	697b      	ldr	r3, [r7, #20]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4798      	blx	r3
    free(fd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f00f fa3b 	bl	8011f9c <free>
  }
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd fbc8 	bl	80002d0 <strlen>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d219      	bcs.n	8002b7c <is_dir_prefix+0x4e>
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f00f fcf1 	bl	8012534 <strncmp>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d111      	bne.n	8002b7c <is_dir_prefix+0x4e>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b2f      	cmp	r3, #47	; 0x2f
 8002b68:	d006      	beq.n	8002b78 <is_dir_prefix+0x4a>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b2f      	cmp	r3, #47	; 0x2f
 8002b76:	d101      	bne.n	8002b7c <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <is_dir_prefix+0x50>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b088      	sub	sp, #32
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7fd fb9c 	bl	80002d0 <strlen>
 8002b98:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f008 fab0 	bl	800b104 <mg_unpack>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <packed_stat+0x28>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e017      	b.n	8002bde <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e00c      	b.n	8002bce <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff ffb8 	bl	8002b2e <is_dir_prefix>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <packed_stat+0x42>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	e00a      	b.n	8002bde <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	69f8      	ldr	r0, [r7, #28]
 8002bd0:	f008 fa84 	bl	800b0dc <mg_unlist>
 8002bd4:	6178      	str	r0, [r7, #20]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1eb      	bne.n	8002bb4 <packed_stat+0x2e>
  }
  return 0;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b0cc      	sub	sp, #304	; 0x130
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bf2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002bf6:	6018      	str	r0, [r3, #0]
 8002bf8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bfc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c00:	6019      	str	r1, [r3, #0]
 8002c02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c06:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c0a:	601a      	str	r2, [r3, #0]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8002c0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	f7fd fb5b 	bl	80002d0 <strlen>
 8002c1a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  tmp[0] = '\0';  // Previously listed entry
 8002c1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c30:	e065      	b.n	8002cfe <packed_list+0x116>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002c32:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002c36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c3e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f7ff ff73 	bl	8002b2e <is_dir_prefix>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d04f      	beq.n	8002cee <packed_list+0x106>
    begin = &path[n + 1];
 8002c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c52:	3301      	adds	r3, #1
 8002c54:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c58:	4413      	add	r3, r2
 8002c5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    end = strchr(begin, '/');
 8002c5e:	212f      	movs	r1, #47	; 0x2f
 8002c60:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002c64:	f00f fc59 	bl	801251a <strchr>
 8002c68:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (end == NULL) end = begin + strlen(begin);
 8002c6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <packed_list+0xa0>
 8002c74:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002c78:	f7fd fb2a 	bl	80002d0 <strlen>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c82:	4413      	add	r3, r2
 8002c84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8002c88:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c90:	1ad2      	subs	r2, r2, r3
 8002c92:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <packed_list+0x138>)
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	f003 ff17 	bl	8006ad4 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8002cac:	f107 0214 	add.w	r2, r7, #20
 8002cb0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd faaa 	bl	8000210 <strcmp>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <packed_list+0x10a>
    fn(buf, userdata);  // Not yet listed, call user function
 8002cc2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002cc6:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8002cca:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002cce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002cd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8002cdc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f00f fcd1 	bl	801268e <strcpy>
 8002cec:	e002      	b.n	8002cf4 <packed_list+0x10c>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <packed_list+0x10c>
    if (strcmp(buf, tmp) == 0) continue;
 8002cf2:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002cf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002cfe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002d02:	f008 f9eb 	bl	800b0dc <mg_unlist>
 8002d06:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8002d0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d18f      	bne.n	8002c32 <packed_list+0x4a>
  }
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	080134a4 	.word	0x080134a4

08002d24 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2200      	movs	r2, #0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f008 f9e2 	bl	800b104 <mg_unpack>
 8002d40:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <packed_open+0x2c>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e016      	b.n	8002d7e <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <packed_open+0x3a>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e00f      	b.n	8002d7e <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8002d5e:	210c      	movs	r1, #12
 8002d60:	2001      	movs	r0, #1
 8002d62:	f00f f8f5 	bl	8011f50 <calloc>
 8002d66:	4603      	mov	r3, r0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <packed_open+0x58>
    fp->size = size;
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8002d7c:	693b      	ldr	r3, [r7, #16]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <packed_close>:

static void packed_close(void *fp) {
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <packed_close+0x14>
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f00f f901 	bl	8011f9c <free>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	441a      	add	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d905      	bls.n	8002dce <packed_read+0x2c>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	68b8      	ldr	r0, [r7, #8]
 8002dde:	f00f fc5e 	bl	801269e <memcpy>
  fp->pos += len;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	441a      	add	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	609a      	str	r2, [r3, #8]
  return len;
 8002dee:	687b      	ldr	r3, [r7, #4]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d903      	bls.n	8002e3a <packed_seek+0x28>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <packed_remove>:

static bool packed_remove(const char *path) {
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <p_open>:
static void *p_open(const char *path, int flags) {
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <p_close>:
static void p_close(void *fp) {
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <p_remove>:
static bool p_remove(const char *path) {
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8002f80:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f84:	b08f      	sub	sp, #60	; 0x3c
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	f107 0318 	add.w	r3, r7, #24
 8002f8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f90:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002f9e:	a340      	add	r3, pc, #256	; (adr r3, 80030a0 <mg_to_size_t+0x120>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 8002fac:	e002      	b.n	8002fb4 <mg_to_size_t+0x34>
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d20b      	bcs.n	8002fd4 <mg_to_size_t+0x54>
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	4413      	add	r3, r2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d0f2      	beq.n	8002fae <mg_to_size_t+0x2e>
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d0ec      	beq.n	8002fae <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d244      	bcs.n	8003066 <mg_to_size_t+0xe6>
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8002fe6:	d13e      	bne.n	8003066 <mg_to_size_t+0xe6>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e050      	b.n	800308e <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 8002fec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ff0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ff4:	4290      	cmp	r0, r2
 8002ff6:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ffa:	d201      	bcs.n	8003000 <mg_to_size_t+0x80>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e046      	b.n	800308e <mg_to_size_t+0x10e>
    result *= 10;
 8003000:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8003004:	4642      	mov	r2, r8
 8003006:	464b      	mov	r3, r9
 8003008:	f04f 0000 	mov.w	r0, #0
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	0099      	lsls	r1, r3, #2
 8003012:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003016:	0090      	lsls	r0, r2, #2
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	eb12 0408 	adds.w	r4, r2, r8
 8003020:	eb43 0509 	adc.w	r5, r3, r9
 8003024:	1923      	adds	r3, r4, r4
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	eb45 0305 	adc.w	r3, r5, r5
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003032:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	3b30      	subs	r3, #48	; 0x30
 8003040:	461a      	mov	r2, r3
 8003042:	2300      	movs	r3, #0
 8003044:	4692      	mov	sl, r2
 8003046:	469b      	mov	fp, r3
 8003048:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800304c:	eb12 010a 	adds.w	r1, r2, sl
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	eb43 030b 	adc.w	r3, r3, fp
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800305c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	3301      	adds	r3, #1
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306a:	429a      	cmp	r2, r3
 800306c:	d20b      	bcs.n	8003086 <mg_to_size_t+0x106>
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	4413      	add	r3, r2
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b2f      	cmp	r3, #47	; 0x2f
 8003078:	d905      	bls.n	8003086 <mg_to_size_t+0x106>
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	4413      	add	r3, r2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b39      	cmp	r3, #57	; 0x39
 8003084:	d9b2      	bls.n	8002fec <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 8003086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	601a      	str	r2, [r3, #0]
  return true;
 800308c:	2301      	movs	r3, #1
}
 800308e:	4618      	mov	r0, r3
 8003090:	373c      	adds	r7, #60	; 0x3c
 8003092:	46bd      	mov	sp, r7
 8003094:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	f3af 8000 	nop.w
 80030a0:	99999998 	.word	0x99999998
 80030a4:	19999999 	.word	0x19999999

080030a8 <isx>:
    }
  }
  return len;
}

static bool isx(int c) {
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b2f      	cmp	r3, #47	; 0x2f
 80030b4:	dd02      	ble.n	80030bc <isx+0x14>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b39      	cmp	r3, #57	; 0x39
 80030ba:	dd0b      	ble.n	80030d4 <isx+0x2c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b60      	cmp	r3, #96	; 0x60
 80030c0:	dd02      	ble.n	80030c8 <isx+0x20>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b66      	cmp	r3, #102	; 0x66
 80030c6:	dd05      	ble.n	80030d4 <isx+0x2c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	dd04      	ble.n	80030d8 <isx+0x30>
         (c >= 'A' && c <= 'F');
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b46      	cmp	r3, #70	; 0x46
 80030d2:	dc01      	bgt.n	80030d8 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <isx+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e04f      	b.n	80031a4 <mg_url_decode+0xb8>
    if (src[i] == '%') {
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	4413      	add	r3, r2
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b25      	cmp	r3, #37	; 0x25
 800310e:	d12c      	bne.n	800316a <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3302      	adds	r3, #2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d924      	bls.n	8003164 <mg_url_decode+0x78>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ffbf 	bl	80030a8 <isx>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d019      	beq.n	8003164 <mg_url_decode+0x78>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3302      	adds	r3, #2
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffb4 	bl	80030a8 <isx>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00e      	beq.n	8003164 <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3301      	adds	r3, #1
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	18d0      	adds	r0, r2, r3
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	461a      	mov	r2, r3
 8003156:	2102      	movs	r1, #2
 8003158:	f004 fb81 	bl	800785e <mg_unhex>
        i += 2;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3302      	adds	r3, #2
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e019      	b.n	8003198 <mg_url_decode+0xac>
      } else {
        return -1;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
 8003168:	e03a      	b.n	80031e0 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00b      	beq.n	8003188 <mg_url_decode+0x9c>
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4413      	add	r3, r2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b2b      	cmp	r3, #43	; 0x2b
 800317a:	d105      	bne.n	8003188 <mg_url_decode+0x9c>
      dst[j] = ' ';
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	2220      	movs	r2, #32
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e007      	b.n	8003198 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	441a      	add	r2, r3
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	440b      	add	r3, r1
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3301      	adds	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3301      	adds	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d204      	bcs.n	80031b6 <mg_url_decode+0xca>
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	3301      	adds	r3, #1
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d8a6      	bhi.n	8003104 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d204      	bcs.n	80031c8 <mg_url_decode+0xdc>
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d305      	bcc.n	80031dc <mg_url_decode+0xf0>
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d201      	bcs.n	80031dc <mg_url_decode+0xf0>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	e001      	b.n	80031e0 <mg_url_decode+0xf4>
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <isok>:

static bool isok(uint8_t c) {
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	2b0a      	cmp	r3, #10
 80031f6:	d005      	beq.n	8003204 <isok+0x1c>
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	2b0d      	cmp	r3, #13
 80031fc:	d002      	beq.n	8003204 <isok+0x1c>
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	2b1f      	cmp	r3, #31
 8003202:	d901      	bls.n	8003208 <isok+0x20>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <isok+0x22>
 8003208:	2300      	movs	r3, #0
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e03c      	b.n	80032a6 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ffd7 	bl	80031e8 <isok>
 800323a:	4603      	mov	r3, r0
 800323c:	f083 0301 	eor.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <mg_http_get_request_len+0x30>
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	e031      	b.n	80032b0 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <mg_http_get_request_len+0x50>
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b0a      	cmp	r3, #10
 800325c:	d106      	bne.n	800326c <mg_http_get_request_len+0x50>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3b01      	subs	r3, #1
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b0a      	cmp	r3, #10
 800326a:	d016      	beq.n	800329a <mg_http_get_request_len+0x7e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d916      	bls.n	80032a0 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b0a      	cmp	r3, #10
 800327c:	d110      	bne.n	80032a0 <mg_http_get_request_len+0x84>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3b01      	subs	r3, #1
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b0d      	cmp	r3, #13
 800328a:	d109      	bne.n	80032a0 <mg_http_get_request_len+0x84>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b02      	subs	r3, #2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b0a      	cmp	r3, #10
 8003298:	d102      	bne.n	80032a0 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3301      	adds	r3, #1
 800329e:	e007      	b.n	80032b0 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d3be      	bcc.n	800322c <mg_http_get_request_len+0x10>
  }
  return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	f7fd f804 	bl	80002d0 <strlen>
 80032c8:	61b8      	str	r0, [r7, #24]
 80032ca:	231e      	movs	r3, #30
 80032cc:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e01f      	b.n	8003314 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3302      	adds	r3, #2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	3328      	adds	r3, #40	; 0x28
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10b      	bne.n	800330e <mg_http_get_header+0x56>
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	6839      	ldr	r1, [r7, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f003 ff7e 	bl	8007200 <mg_ncasecmp>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <mg_http_get_header+0x56>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	e010      	b.n	8003330 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	429a      	cmp	r2, r3
 800331a:	d208      	bcs.n	800332e <mg_http_get_header+0x76>
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3302      	adds	r3, #2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1d2      	bne.n	80032d4 <mg_http_get_header+0x1c>
  }
  return NULL;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <clen>:

// Get character length. Used to parse method, URI, headers
static size_t clen(const char *s) {
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint8_t c = *(uint8_t *) s;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	73fb      	strb	r3, [r7, #15]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b20      	cmp	r3, #32
 800334a:	d904      	bls.n	8003356 <clen+0x1e>
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b7d      	cmp	r3, #125	; 0x7d
 8003350:	d801      	bhi.n	8003356 <clen+0x1e>
 8003352:	2301      	movs	r3, #1
 8003354:	e015      	b.n	8003382 <clen+0x4a>
  if ((c & 0xe0) == 0xc0) return 2;  // 2-byte UTF8
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800335c:	2bc0      	cmp	r3, #192	; 0xc0
 800335e:	d101      	bne.n	8003364 <clen+0x2c>
 8003360:	2302      	movs	r3, #2
 8003362:	e00e      	b.n	8003382 <clen+0x4a>
  if ((c & 0xf0) == 0xe0) return 3;  // 3-byte UTF8
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336a:	2be0      	cmp	r3, #224	; 0xe0
 800336c:	d101      	bne.n	8003372 <clen+0x3a>
 800336e:	2303      	movs	r3, #3
 8003370:	e007      	b.n	8003382 <clen+0x4a>
  if ((c & 0xf8) == 0xf0) return 4;  // 4-byte UTF8
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003378:	2bf0      	cmp	r3, #240	; 0xf0
 800337a:	d101      	bne.n	8003380 <clen+0x48>
 800337c:	2304      	movs	r3, #4
 800337e:	e000      	b.n	8003382 <clen+0x4a>
  return 0;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
  v->ptr = s;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80033a0:	e007      	b.n	80033b2 <skiptorn+0x24>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3301      	adds	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d207      	bcs.n	80033ca <skiptorn+0x3c>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b0a      	cmp	r3, #10
 80033c0:	d003      	beq.n	80033ca <skiptorn+0x3c>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b0d      	cmp	r3, #13
 80033c8:	d1eb      	bne.n	80033a2 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d208      	bcs.n	80033e4 <skiptorn+0x56>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b0d      	cmp	r3, #13
 80033d8:	d106      	bne.n	80033e8 <skiptorn+0x5a>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3301      	adds	r3, #1
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b0a      	cmp	r3, #10
 80033e2:	d001      	beq.n	80033e8 <skiptorn+0x5a>
 80033e4:	2300      	movs	r3, #0
 80033e6:	e017      	b.n	8003418 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d206      	bcs.n	80033fe <skiptorn+0x70>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b0d      	cmp	r3, #13
 80033f6:	d102      	bne.n	80033fe <skiptorn+0x70>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	429a      	cmp	r2, r3
 8003404:	d205      	bcs.n	8003412 <skiptorn+0x84>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	60fa      	str	r2, [r7, #12]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d001      	beq.n	8003416 <skiptorn+0x88>
 8003412:	2300      	movs	r3, #0
 8003414:	e000      	b.n	8003418 <skiptorn+0x8a>
  return s;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e083      	b.n	8003540 <mg_http_parse_headers+0x11c>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d301      	bcc.n	8003454 <mg_http_parse_headers+0x30>
 8003450:	2300      	movs	r3, #0
 8003452:	e07b      	b.n	800354c <mg_http_parse_headers+0x128>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b0a      	cmp	r3, #10
 800345a:	d076      	beq.n	800354a <mg_http_parse_headers+0x126>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b0d      	cmp	r3, #13
 8003462:	d104      	bne.n	800346e <mg_http_parse_headers+0x4a>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3301      	adds	r3, #1
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b0a      	cmp	r3, #10
 800346c:	d06d      	beq.n	800354a <mg_http_parse_headers+0x126>
    k.ptr = s;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s)) > 0) s += n, k.len += n;
 8003472:	e007      	b.n	8003484 <mg_http_parse_headers+0x60>
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	4413      	add	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	4413      	add	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	d20a      	bcs.n	80034a2 <mg_http_parse_headers+0x7e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b3a      	cmp	r3, #58	; 0x3a
 8003492:	d006      	beq.n	80034a2 <mg_http_parse_headers+0x7e>
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff ff4f 	bl	8003338 <clen>
 800349a:	6238      	str	r0, [r7, #32]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e8      	bne.n	8003474 <mg_http_parse_headers+0x50>
    if (k.len == 0) return false;               // Empty name
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <mg_http_parse_headers+0x88>
 80034a8:	2300      	movs	r3, #0
 80034aa:	e04f      	b.n	800354c <mg_http_parse_headers+0x128>
    if (s >= end || *s++ != ':') return false;  // Invalid, not followed by :
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d205      	bcs.n	80034c0 <mg_http_parse_headers+0x9c>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	60fa      	str	r2, [r7, #12]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b3a      	cmp	r3, #58	; 0x3a
 80034be:	d004      	beq.n	80034ca <mg_http_parse_headers+0xa6>
 80034c0:	2300      	movs	r3, #0
 80034c2:	e043      	b.n	800354c <mg_http_parse_headers+0x128>
    while (s < end && s[0] == ' ') s++;         // Skip spaces
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d203      	bcs.n	80034da <mg_http_parse_headers+0xb6>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d0f4      	beq.n	80034c4 <mg_http_parse_headers+0xa0>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 80034da:	f107 0310 	add.w	r3, r7, #16
 80034de:	461a      	mov	r2, r3
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ff53 	bl	800338e <skiptorn>
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <mg_http_parse_headers+0xd6>
 80034f0:	2300      	movs	r3, #0
 80034f2:	e02b      	b.n	800354c <mg_http_parse_headers+0x128>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <mg_http_parse_headers+0xea>
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3b01      	subs	r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b20      	cmp	r3, #32
 800350c:	d0f2      	beq.n	80034f4 <mg_http_parse_headers+0xd0>
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	461a      	mov	r2, r3
 8003518:	f107 0318 	add.w	r3, r7, #24
 800351c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003520:	e882 0003 	stmia.w	r2, {r0, r1}
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	3308      	adds	r3, #8
 800352e:	f107 0210 	add.w	r2, r7, #16
 8003532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003536:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	3301      	adds	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	f4ff af77 	bcc.w	8003438 <mg_http_parse_headers+0x14>
  }
  return true;
 800354a:	2301      	movs	r3, #1
}
 800354c:	4618      	mov	r0, r3
 800354e:	3728      	adds	r7, #40	; 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fe5a 	bl	800321c <mg_http_get_request_len>
 8003568:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <mg_http_parse+0x24>
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	e000      	b.n	800357a <mg_http_parse+0x26>
 8003578:	2300      	movs	r3, #0
 800357a:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 800357c:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003580:	2100      	movs	r1, #0
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f00e ffc1 	bl	801250a <memset>
  if (req_len <= 0) return req_len;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	2b00      	cmp	r3, #0
 800358c:	dc01      	bgt.n	8003592 <mg_http_parse+0x3e>
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	e120      	b.n	80037d4 <mg_http_parse+0x280>

  hm->message.ptr = hm->head.ptr = s;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  hm->method.ptr = s;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s)) > 0) s += n, hm->method.len += n;
 80035da:	e009      	b.n	80035f0 <mg_http_parse+0x9c>
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d20a      	bcs.n	800360e <mg_http_parse+0xba>
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fe9d 	bl	8003338 <clen>
 80035fe:	61f8      	str	r0, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ea      	bne.n	80035dc <mg_http_parse+0x88>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8003606:	e002      	b.n	800360e <mg_http_parse+0xba>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	429a      	cmp	r2, r3
 8003614:	d203      	bcs.n	800361e <mg_http_parse+0xca>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b20      	cmp	r3, #32
 800361c:	d0f4      	beq.n	8003608 <mg_http_parse+0xb4>
  hm->uri.ptr = s;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s)) > 0) s += n, hm->uri.len += n;
 8003624:	e009      	b.n	800363a <mg_http_parse+0xe6>
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	429a      	cmp	r2, r3
 8003640:	d20a      	bcs.n	8003658 <mg_http_parse+0x104>
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fe78 	bl	8003338 <clen>
 8003648:	61f8      	str	r0, [r7, #28]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ea      	bne.n	8003626 <mg_http_parse+0xd2>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8003650:	e002      	b.n	8003658 <mg_http_parse+0x104>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3301      	adds	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d203      	bcs.n	8003668 <mg_http_parse+0x114>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b20      	cmp	r3, #32
 8003666:	d0f4      	beq.n	8003652 <mg_http_parse+0xfe>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3318      	adds	r3, #24
 800366c:	461a      	mov	r2, r3
 800366e:	6a39      	ldr	r1, [r7, #32]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fe8c 	bl	800338e <skiptorn>
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <mg_http_parse+0x12e>
 800367e:	2300      	movs	r3, #0
 8003680:	e0a8      	b.n	80037d4 <mg_http_parse+0x280>

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <mg_http_parse+0x13e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <mg_http_parse+0x144>
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	e09d      	b.n	80037d4 <mg_http_parse+0x280>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6898      	ldr	r0, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	461a      	mov	r2, r3
 80036a2:	213f      	movs	r1, #63	; 0x3f
 80036a4:	f7fc fdc4 	bl	8000230 <memchr>
 80036a8:	61b8      	str	r0, [r7, #24]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d015      	beq.n	80036dc <mg_http_parse+0x188>
    hm->query.ptr = qs + 1;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	441a      	add	r2, r3
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	3301      	adds	r3, #1
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f103 0220 	add.w	r2, r3, #32
 80036e2:	231e      	movs	r3, #30
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fe9c 	bl	8003424 <mg_http_parse_headers>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f083 0301 	eor.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <mg_http_parse+0x1aa>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
 80036fc:	e06a      	b.n	80037d4 <mg_http_parse+0x280>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80036fe:	4937      	ldr	r1, [pc, #220]	; (80037dc <mg_http_parse+0x288>)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fdd9 	bl	80032b8 <mg_http_get_header>
 8003706:	6178      	str	r0, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <mg_http_parse+0x1ec>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	e893 0003 	ldmia.w	r3, {r0, r1}
 800371a:	f7ff fc31 	bl	8002f80 <mg_to_size_t>
 800371e:	4603      	mov	r3, r0
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <mg_http_parse+0x1dc>
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	e051      	b.n	80037d4 <mg_http_parse+0x280>
    hm->message.len = (size_t) req_len + hm->body.len;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2205      	movs	r2, #5
 8003746:	4926      	ldr	r1, [pc, #152]	; (80037e0 <mg_http_parse+0x28c>)
 8003748:	4618      	mov	r0, r3
 800374a:	f003 fd59 	bl	8007200 <mg_ncasecmp>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	613b      	str	r3, [r7, #16]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d11a      	bne.n	800379e <mg_http_parse+0x24a>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d117      	bne.n	800379e <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	491c      	ldr	r1, [pc, #112]	; (80037e4 <mg_http_parse+0x290>)
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fd96 	bl	80072a4 <mg_vcasecmp>
 8003778:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00f      	beq.n	800379e <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4919      	ldr	r1, [pc, #100]	; (80037e8 <mg_http_parse+0x294>)
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fd8e 	bl	80072a4 <mg_vcasecmp>
 8003788:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <mg_http_parse+0x24a>
    hm->body.len = 0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d113      	bne.n	80037d2 <mg_http_parse+0x27e>
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d010      	beq.n	80037d2 <mg_http_parse+0x27e>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3308      	adds	r3, #8
 80037b4:	490d      	ldr	r1, [pc, #52]	; (80037ec <mg_http_parse+0x298>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fd74 	bl	80072a4 <mg_vcasecmp>
 80037bc:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d107      	bne.n	80037d2 <mg_http_parse+0x27e>
    hm->body.len = 0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3728      	adds	r7, #40	; 0x28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	08013520 	.word	0x08013520
 80037e0:	08013530 	.word	0x08013530
 80037e4:	08013538 	.word	0x08013538
 80037e8:	0801353c 	.word	0x0801353c
 80037ec:	08013544 	.word	0x08013544

080037f0 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b64      	subs	r3, #100	; 0x64
 80037fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003800:	4293      	cmp	r3, r2
 8003802:	f200 8469 	bhi.w	80040d8 <mg_http_status_code_str+0x8e8>
 8003806:	a101      	add	r1, pc, #4	; (adr r1, 800380c <mg_http_status_code_str+0x1c>)
 8003808:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800380c:	08003fdd 	.word	0x08003fdd
 8003810:	08003fe1 	.word	0x08003fe1
 8003814:	08003fe5 	.word	0x08003fe5
 8003818:	080040d9 	.word	0x080040d9
 800381c:	080040d9 	.word	0x080040d9
 8003820:	080040d9 	.word	0x080040d9
 8003824:	080040d9 	.word	0x080040d9
 8003828:	080040d9 	.word	0x080040d9
 800382c:	080040d9 	.word	0x080040d9
 8003830:	080040d9 	.word	0x080040d9
 8003834:	080040d9 	.word	0x080040d9
 8003838:	080040d9 	.word	0x080040d9
 800383c:	080040d9 	.word	0x080040d9
 8003840:	080040d9 	.word	0x080040d9
 8003844:	080040d9 	.word	0x080040d9
 8003848:	080040d9 	.word	0x080040d9
 800384c:	080040d9 	.word	0x080040d9
 8003850:	080040d9 	.word	0x080040d9
 8003854:	080040d9 	.word	0x080040d9
 8003858:	080040d9 	.word	0x080040d9
 800385c:	080040d9 	.word	0x080040d9
 8003860:	080040d9 	.word	0x080040d9
 8003864:	080040d9 	.word	0x080040d9
 8003868:	080040d9 	.word	0x080040d9
 800386c:	080040d9 	.word	0x080040d9
 8003870:	080040d9 	.word	0x080040d9
 8003874:	080040d9 	.word	0x080040d9
 8003878:	080040d9 	.word	0x080040d9
 800387c:	080040d9 	.word	0x080040d9
 8003880:	080040d9 	.word	0x080040d9
 8003884:	080040d9 	.word	0x080040d9
 8003888:	080040d9 	.word	0x080040d9
 800388c:	080040d9 	.word	0x080040d9
 8003890:	080040d9 	.word	0x080040d9
 8003894:	080040d9 	.word	0x080040d9
 8003898:	080040d9 	.word	0x080040d9
 800389c:	080040d9 	.word	0x080040d9
 80038a0:	080040d9 	.word	0x080040d9
 80038a4:	080040d9 	.word	0x080040d9
 80038a8:	080040d9 	.word	0x080040d9
 80038ac:	080040d9 	.word	0x080040d9
 80038b0:	080040d9 	.word	0x080040d9
 80038b4:	080040d9 	.word	0x080040d9
 80038b8:	080040d9 	.word	0x080040d9
 80038bc:	080040d9 	.word	0x080040d9
 80038c0:	080040d9 	.word	0x080040d9
 80038c4:	080040d9 	.word	0x080040d9
 80038c8:	080040d9 	.word	0x080040d9
 80038cc:	080040d9 	.word	0x080040d9
 80038d0:	080040d9 	.word	0x080040d9
 80038d4:	080040d9 	.word	0x080040d9
 80038d8:	080040d9 	.word	0x080040d9
 80038dc:	080040d9 	.word	0x080040d9
 80038e0:	080040d9 	.word	0x080040d9
 80038e4:	080040d9 	.word	0x080040d9
 80038e8:	080040d9 	.word	0x080040d9
 80038ec:	080040d9 	.word	0x080040d9
 80038f0:	080040d9 	.word	0x080040d9
 80038f4:	080040d9 	.word	0x080040d9
 80038f8:	080040d9 	.word	0x080040d9
 80038fc:	080040d9 	.word	0x080040d9
 8003900:	080040d9 	.word	0x080040d9
 8003904:	080040d9 	.word	0x080040d9
 8003908:	080040d9 	.word	0x080040d9
 800390c:	080040d9 	.word	0x080040d9
 8003910:	080040d9 	.word	0x080040d9
 8003914:	080040d9 	.word	0x080040d9
 8003918:	080040d9 	.word	0x080040d9
 800391c:	080040d9 	.word	0x080040d9
 8003920:	080040d9 	.word	0x080040d9
 8003924:	080040d9 	.word	0x080040d9
 8003928:	080040d9 	.word	0x080040d9
 800392c:	080040d9 	.word	0x080040d9
 8003930:	080040d9 	.word	0x080040d9
 8003934:	080040d9 	.word	0x080040d9
 8003938:	080040d9 	.word	0x080040d9
 800393c:	080040d9 	.word	0x080040d9
 8003940:	080040d9 	.word	0x080040d9
 8003944:	080040d9 	.word	0x080040d9
 8003948:	080040d9 	.word	0x080040d9
 800394c:	080040d9 	.word	0x080040d9
 8003950:	080040d9 	.word	0x080040d9
 8003954:	080040d9 	.word	0x080040d9
 8003958:	080040d9 	.word	0x080040d9
 800395c:	080040d9 	.word	0x080040d9
 8003960:	080040d9 	.word	0x080040d9
 8003964:	080040d9 	.word	0x080040d9
 8003968:	080040d9 	.word	0x080040d9
 800396c:	080040d9 	.word	0x080040d9
 8003970:	080040d9 	.word	0x080040d9
 8003974:	080040d9 	.word	0x080040d9
 8003978:	080040d9 	.word	0x080040d9
 800397c:	080040d9 	.word	0x080040d9
 8003980:	080040d9 	.word	0x080040d9
 8003984:	080040d9 	.word	0x080040d9
 8003988:	080040d9 	.word	0x080040d9
 800398c:	080040d9 	.word	0x080040d9
 8003990:	080040d9 	.word	0x080040d9
 8003994:	080040d9 	.word	0x080040d9
 8003998:	080040d9 	.word	0x080040d9
 800399c:	08003fe9 	.word	0x08003fe9
 80039a0:	08003fed 	.word	0x08003fed
 80039a4:	08003ff1 	.word	0x08003ff1
 80039a8:	08003ff5 	.word	0x08003ff5
 80039ac:	08003ff9 	.word	0x08003ff9
 80039b0:	08003ffd 	.word	0x08003ffd
 80039b4:	08004001 	.word	0x08004001
 80039b8:	08004005 	.word	0x08004005
 80039bc:	08004009 	.word	0x08004009
 80039c0:	080040d9 	.word	0x080040d9
 80039c4:	080040d9 	.word	0x080040d9
 80039c8:	080040d9 	.word	0x080040d9
 80039cc:	080040d9 	.word	0x080040d9
 80039d0:	080040d9 	.word	0x080040d9
 80039d4:	080040d9 	.word	0x080040d9
 80039d8:	080040d9 	.word	0x080040d9
 80039dc:	080040d9 	.word	0x080040d9
 80039e0:	080040d9 	.word	0x080040d9
 80039e4:	080040d9 	.word	0x080040d9
 80039e8:	080040d9 	.word	0x080040d9
 80039ec:	080040d9 	.word	0x080040d9
 80039f0:	080040d9 	.word	0x080040d9
 80039f4:	080040d9 	.word	0x080040d9
 80039f8:	080040d9 	.word	0x080040d9
 80039fc:	080040d9 	.word	0x080040d9
 8003a00:	080040d9 	.word	0x080040d9
 8003a04:	0800400d 	.word	0x0800400d
 8003a08:	080040d9 	.word	0x080040d9
 8003a0c:	080040d9 	.word	0x080040d9
 8003a10:	080040d9 	.word	0x080040d9
 8003a14:	080040d9 	.word	0x080040d9
 8003a18:	080040d9 	.word	0x080040d9
 8003a1c:	080040d9 	.word	0x080040d9
 8003a20:	080040d9 	.word	0x080040d9
 8003a24:	080040d9 	.word	0x080040d9
 8003a28:	080040d9 	.word	0x080040d9
 8003a2c:	080040d9 	.word	0x080040d9
 8003a30:	080040d9 	.word	0x080040d9
 8003a34:	080040d9 	.word	0x080040d9
 8003a38:	080040d9 	.word	0x080040d9
 8003a3c:	080040d9 	.word	0x080040d9
 8003a40:	080040d9 	.word	0x080040d9
 8003a44:	080040d9 	.word	0x080040d9
 8003a48:	080040d9 	.word	0x080040d9
 8003a4c:	080040d9 	.word	0x080040d9
 8003a50:	080040d9 	.word	0x080040d9
 8003a54:	080040d9 	.word	0x080040d9
 8003a58:	080040d9 	.word	0x080040d9
 8003a5c:	080040d9 	.word	0x080040d9
 8003a60:	080040d9 	.word	0x080040d9
 8003a64:	080040d9 	.word	0x080040d9
 8003a68:	080040d9 	.word	0x080040d9
 8003a6c:	080040d9 	.word	0x080040d9
 8003a70:	080040d9 	.word	0x080040d9
 8003a74:	080040d9 	.word	0x080040d9
 8003a78:	080040d9 	.word	0x080040d9
 8003a7c:	080040d9 	.word	0x080040d9
 8003a80:	080040d9 	.word	0x080040d9
 8003a84:	080040d9 	.word	0x080040d9
 8003a88:	080040d9 	.word	0x080040d9
 8003a8c:	080040d9 	.word	0x080040d9
 8003a90:	080040d9 	.word	0x080040d9
 8003a94:	080040d9 	.word	0x080040d9
 8003a98:	080040d9 	.word	0x080040d9
 8003a9c:	080040d9 	.word	0x080040d9
 8003aa0:	080040d9 	.word	0x080040d9
 8003aa4:	080040d9 	.word	0x080040d9
 8003aa8:	080040d9 	.word	0x080040d9
 8003aac:	080040d9 	.word	0x080040d9
 8003ab0:	080040d9 	.word	0x080040d9
 8003ab4:	080040d9 	.word	0x080040d9
 8003ab8:	080040d9 	.word	0x080040d9
 8003abc:	080040d9 	.word	0x080040d9
 8003ac0:	080040d9 	.word	0x080040d9
 8003ac4:	080040d9 	.word	0x080040d9
 8003ac8:	080040d9 	.word	0x080040d9
 8003acc:	080040d9 	.word	0x080040d9
 8003ad0:	080040d9 	.word	0x080040d9
 8003ad4:	080040d9 	.word	0x080040d9
 8003ad8:	080040d9 	.word	0x080040d9
 8003adc:	080040d9 	.word	0x080040d9
 8003ae0:	080040d9 	.word	0x080040d9
 8003ae4:	080040d9 	.word	0x080040d9
 8003ae8:	080040d9 	.word	0x080040d9
 8003aec:	080040d9 	.word	0x080040d9
 8003af0:	080040d9 	.word	0x080040d9
 8003af4:	080040d9 	.word	0x080040d9
 8003af8:	080040d9 	.word	0x080040d9
 8003afc:	080040d9 	.word	0x080040d9
 8003b00:	080040d9 	.word	0x080040d9
 8003b04:	080040d9 	.word	0x080040d9
 8003b08:	080040d9 	.word	0x080040d9
 8003b0c:	080040d9 	.word	0x080040d9
 8003b10:	080040d9 	.word	0x080040d9
 8003b14:	080040d9 	.word	0x080040d9
 8003b18:	080040d9 	.word	0x080040d9
 8003b1c:	080040d9 	.word	0x080040d9
 8003b20:	080040d9 	.word	0x080040d9
 8003b24:	080040d9 	.word	0x080040d9
 8003b28:	080040d9 	.word	0x080040d9
 8003b2c:	08004011 	.word	0x08004011
 8003b30:	08004015 	.word	0x08004015
 8003b34:	08004019 	.word	0x08004019
 8003b38:	0800401d 	.word	0x0800401d
 8003b3c:	08004021 	.word	0x08004021
 8003b40:	08004025 	.word	0x08004025
 8003b44:	080040d9 	.word	0x080040d9
 8003b48:	08004029 	.word	0x08004029
 8003b4c:	0800402d 	.word	0x0800402d
 8003b50:	080040d9 	.word	0x080040d9
 8003b54:	080040d9 	.word	0x080040d9
 8003b58:	080040d9 	.word	0x080040d9
 8003b5c:	080040d9 	.word	0x080040d9
 8003b60:	080040d9 	.word	0x080040d9
 8003b64:	080040d9 	.word	0x080040d9
 8003b68:	080040d9 	.word	0x080040d9
 8003b6c:	080040d9 	.word	0x080040d9
 8003b70:	080040d9 	.word	0x080040d9
 8003b74:	080040d9 	.word	0x080040d9
 8003b78:	080040d9 	.word	0x080040d9
 8003b7c:	080040d9 	.word	0x080040d9
 8003b80:	080040d9 	.word	0x080040d9
 8003b84:	080040d9 	.word	0x080040d9
 8003b88:	080040d9 	.word	0x080040d9
 8003b8c:	080040d9 	.word	0x080040d9
 8003b90:	080040d9 	.word	0x080040d9
 8003b94:	080040d9 	.word	0x080040d9
 8003b98:	080040d9 	.word	0x080040d9
 8003b9c:	080040d9 	.word	0x080040d9
 8003ba0:	080040d9 	.word	0x080040d9
 8003ba4:	080040d9 	.word	0x080040d9
 8003ba8:	080040d9 	.word	0x080040d9
 8003bac:	080040d9 	.word	0x080040d9
 8003bb0:	080040d9 	.word	0x080040d9
 8003bb4:	080040d9 	.word	0x080040d9
 8003bb8:	080040d9 	.word	0x080040d9
 8003bbc:	080040d9 	.word	0x080040d9
 8003bc0:	080040d9 	.word	0x080040d9
 8003bc4:	080040d9 	.word	0x080040d9
 8003bc8:	080040d9 	.word	0x080040d9
 8003bcc:	080040d9 	.word	0x080040d9
 8003bd0:	080040d9 	.word	0x080040d9
 8003bd4:	080040d9 	.word	0x080040d9
 8003bd8:	080040d9 	.word	0x080040d9
 8003bdc:	080040d9 	.word	0x080040d9
 8003be0:	080040d9 	.word	0x080040d9
 8003be4:	080040d9 	.word	0x080040d9
 8003be8:	080040d9 	.word	0x080040d9
 8003bec:	080040d9 	.word	0x080040d9
 8003bf0:	080040d9 	.word	0x080040d9
 8003bf4:	080040d9 	.word	0x080040d9
 8003bf8:	080040d9 	.word	0x080040d9
 8003bfc:	080040d9 	.word	0x080040d9
 8003c00:	080040d9 	.word	0x080040d9
 8003c04:	080040d9 	.word	0x080040d9
 8003c08:	080040d9 	.word	0x080040d9
 8003c0c:	080040d9 	.word	0x080040d9
 8003c10:	080040d9 	.word	0x080040d9
 8003c14:	080040d9 	.word	0x080040d9
 8003c18:	080040d9 	.word	0x080040d9
 8003c1c:	080040d9 	.word	0x080040d9
 8003c20:	080040d9 	.word	0x080040d9
 8003c24:	080040d9 	.word	0x080040d9
 8003c28:	080040d9 	.word	0x080040d9
 8003c2c:	080040d9 	.word	0x080040d9
 8003c30:	080040d9 	.word	0x080040d9
 8003c34:	080040d9 	.word	0x080040d9
 8003c38:	080040d9 	.word	0x080040d9
 8003c3c:	080040d9 	.word	0x080040d9
 8003c40:	080040d9 	.word	0x080040d9
 8003c44:	080040d9 	.word	0x080040d9
 8003c48:	080040d9 	.word	0x080040d9
 8003c4c:	080040d9 	.word	0x080040d9
 8003c50:	080040d9 	.word	0x080040d9
 8003c54:	080040d9 	.word	0x080040d9
 8003c58:	080040d9 	.word	0x080040d9
 8003c5c:	080040d9 	.word	0x080040d9
 8003c60:	080040d9 	.word	0x080040d9
 8003c64:	080040d9 	.word	0x080040d9
 8003c68:	080040d9 	.word	0x080040d9
 8003c6c:	080040d9 	.word	0x080040d9
 8003c70:	080040d9 	.word	0x080040d9
 8003c74:	080040d9 	.word	0x080040d9
 8003c78:	080040d9 	.word	0x080040d9
 8003c7c:	080040d9 	.word	0x080040d9
 8003c80:	080040d9 	.word	0x080040d9
 8003c84:	080040d9 	.word	0x080040d9
 8003c88:	080040d9 	.word	0x080040d9
 8003c8c:	080040d9 	.word	0x080040d9
 8003c90:	080040d9 	.word	0x080040d9
 8003c94:	080040d9 	.word	0x080040d9
 8003c98:	080040d9 	.word	0x080040d9
 8003c9c:	080040d9 	.word	0x080040d9
 8003ca0:	080040d9 	.word	0x080040d9
 8003ca4:	080040d9 	.word	0x080040d9
 8003ca8:	080040d9 	.word	0x080040d9
 8003cac:	080040d9 	.word	0x080040d9
 8003cb0:	080040d9 	.word	0x080040d9
 8003cb4:	080040d9 	.word	0x080040d9
 8003cb8:	080040d9 	.word	0x080040d9
 8003cbc:	08004031 	.word	0x08004031
 8003cc0:	08004035 	.word	0x08004035
 8003cc4:	08004039 	.word	0x08004039
 8003cc8:	0800403d 	.word	0x0800403d
 8003ccc:	08004041 	.word	0x08004041
 8003cd0:	08004045 	.word	0x08004045
 8003cd4:	08004049 	.word	0x08004049
 8003cd8:	0800404d 	.word	0x0800404d
 8003cdc:	08004051 	.word	0x08004051
 8003ce0:	08004055 	.word	0x08004055
 8003ce4:	08004059 	.word	0x08004059
 8003ce8:	0800405d 	.word	0x0800405d
 8003cec:	08004061 	.word	0x08004061
 8003cf0:	08004065 	.word	0x08004065
 8003cf4:	08004069 	.word	0x08004069
 8003cf8:	0800406d 	.word	0x0800406d
 8003cfc:	08004071 	.word	0x08004071
 8003d00:	08004075 	.word	0x08004075
 8003d04:	08004079 	.word	0x08004079
 8003d08:	080040d9 	.word	0x080040d9
 8003d0c:	080040d9 	.word	0x080040d9
 8003d10:	0800407d 	.word	0x0800407d
 8003d14:	08004081 	.word	0x08004081
 8003d18:	08004085 	.word	0x08004085
 8003d1c:	08004089 	.word	0x08004089
 8003d20:	080040d9 	.word	0x080040d9
 8003d24:	0800408d 	.word	0x0800408d
 8003d28:	080040d9 	.word	0x080040d9
 8003d2c:	08004091 	.word	0x08004091
 8003d30:	08004095 	.word	0x08004095
 8003d34:	080040d9 	.word	0x080040d9
 8003d38:	08004099 	.word	0x08004099
 8003d3c:	080040d9 	.word	0x080040d9
 8003d40:	080040d9 	.word	0x080040d9
 8003d44:	080040d9 	.word	0x080040d9
 8003d48:	080040d9 	.word	0x080040d9
 8003d4c:	080040d9 	.word	0x080040d9
 8003d50:	080040d9 	.word	0x080040d9
 8003d54:	080040d9 	.word	0x080040d9
 8003d58:	080040d9 	.word	0x080040d9
 8003d5c:	080040d9 	.word	0x080040d9
 8003d60:	080040d9 	.word	0x080040d9
 8003d64:	080040d9 	.word	0x080040d9
 8003d68:	080040d9 	.word	0x080040d9
 8003d6c:	0800409d 	.word	0x0800409d
 8003d70:	080040d9 	.word	0x080040d9
 8003d74:	080040d9 	.word	0x080040d9
 8003d78:	080040d9 	.word	0x080040d9
 8003d7c:	080040d9 	.word	0x080040d9
 8003d80:	080040d9 	.word	0x080040d9
 8003d84:	080040d9 	.word	0x080040d9
 8003d88:	080040a1 	.word	0x080040a1
 8003d8c:	080040d9 	.word	0x080040d9
 8003d90:	080040d9 	.word	0x080040d9
 8003d94:	080040d9 	.word	0x080040d9
 8003d98:	080040d9 	.word	0x080040d9
 8003d9c:	080040d9 	.word	0x080040d9
 8003da0:	080040d9 	.word	0x080040d9
 8003da4:	080040d9 	.word	0x080040d9
 8003da8:	080040d9 	.word	0x080040d9
 8003dac:	080040d9 	.word	0x080040d9
 8003db0:	080040d9 	.word	0x080040d9
 8003db4:	080040d9 	.word	0x080040d9
 8003db8:	080040d9 	.word	0x080040d9
 8003dbc:	080040d9 	.word	0x080040d9
 8003dc0:	080040d9 	.word	0x080040d9
 8003dc4:	080040d9 	.word	0x080040d9
 8003dc8:	080040d9 	.word	0x080040d9
 8003dcc:	080040d9 	.word	0x080040d9
 8003dd0:	080040d9 	.word	0x080040d9
 8003dd4:	080040d9 	.word	0x080040d9
 8003dd8:	080040d9 	.word	0x080040d9
 8003ddc:	080040d9 	.word	0x080040d9
 8003de0:	080040d9 	.word	0x080040d9
 8003de4:	080040d9 	.word	0x080040d9
 8003de8:	080040d9 	.word	0x080040d9
 8003dec:	080040d9 	.word	0x080040d9
 8003df0:	080040d9 	.word	0x080040d9
 8003df4:	080040d9 	.word	0x080040d9
 8003df8:	080040d9 	.word	0x080040d9
 8003dfc:	080040d9 	.word	0x080040d9
 8003e00:	080040d9 	.word	0x080040d9
 8003e04:	080040d9 	.word	0x080040d9
 8003e08:	080040d9 	.word	0x080040d9
 8003e0c:	080040d9 	.word	0x080040d9
 8003e10:	080040d9 	.word	0x080040d9
 8003e14:	080040d9 	.word	0x080040d9
 8003e18:	080040d9 	.word	0x080040d9
 8003e1c:	080040d9 	.word	0x080040d9
 8003e20:	080040d9 	.word	0x080040d9
 8003e24:	080040d9 	.word	0x080040d9
 8003e28:	080040d9 	.word	0x080040d9
 8003e2c:	080040d9 	.word	0x080040d9
 8003e30:	080040d9 	.word	0x080040d9
 8003e34:	080040d9 	.word	0x080040d9
 8003e38:	080040d9 	.word	0x080040d9
 8003e3c:	080040d9 	.word	0x080040d9
 8003e40:	080040d9 	.word	0x080040d9
 8003e44:	080040d9 	.word	0x080040d9
 8003e48:	080040a5 	.word	0x080040a5
 8003e4c:	080040a9 	.word	0x080040a9
 8003e50:	080040ad 	.word	0x080040ad
 8003e54:	080040b1 	.word	0x080040b1
 8003e58:	080040b5 	.word	0x080040b5
 8003e5c:	080040b9 	.word	0x080040b9
 8003e60:	080040bd 	.word	0x080040bd
 8003e64:	080040c1 	.word	0x080040c1
 8003e68:	080040c5 	.word	0x080040c5
 8003e6c:	080040c9 	.word	0x080040c9
 8003e70:	080040d9 	.word	0x080040d9
 8003e74:	080040cd 	.word	0x080040cd
 8003e78:	080040d1 	.word	0x080040d1
 8003e7c:	080040d9 	.word	0x080040d9
 8003e80:	080040d9 	.word	0x080040d9
 8003e84:	080040d9 	.word	0x080040d9
 8003e88:	080040d9 	.word	0x080040d9
 8003e8c:	080040d9 	.word	0x080040d9
 8003e90:	080040d9 	.word	0x080040d9
 8003e94:	080040d9 	.word	0x080040d9
 8003e98:	080040d9 	.word	0x080040d9
 8003e9c:	080040d9 	.word	0x080040d9
 8003ea0:	080040d9 	.word	0x080040d9
 8003ea4:	080040d9 	.word	0x080040d9
 8003ea8:	080040d9 	.word	0x080040d9
 8003eac:	080040d9 	.word	0x080040d9
 8003eb0:	080040d9 	.word	0x080040d9
 8003eb4:	080040d9 	.word	0x080040d9
 8003eb8:	080040d9 	.word	0x080040d9
 8003ebc:	080040d9 	.word	0x080040d9
 8003ec0:	080040d9 	.word	0x080040d9
 8003ec4:	080040d9 	.word	0x080040d9
 8003ec8:	080040d9 	.word	0x080040d9
 8003ecc:	080040d9 	.word	0x080040d9
 8003ed0:	080040d9 	.word	0x080040d9
 8003ed4:	080040d9 	.word	0x080040d9
 8003ed8:	080040d9 	.word	0x080040d9
 8003edc:	080040d9 	.word	0x080040d9
 8003ee0:	080040d9 	.word	0x080040d9
 8003ee4:	080040d9 	.word	0x080040d9
 8003ee8:	080040d9 	.word	0x080040d9
 8003eec:	080040d9 	.word	0x080040d9
 8003ef0:	080040d9 	.word	0x080040d9
 8003ef4:	080040d9 	.word	0x080040d9
 8003ef8:	080040d9 	.word	0x080040d9
 8003efc:	080040d9 	.word	0x080040d9
 8003f00:	080040d9 	.word	0x080040d9
 8003f04:	080040d9 	.word	0x080040d9
 8003f08:	080040d9 	.word	0x080040d9
 8003f0c:	080040d9 	.word	0x080040d9
 8003f10:	080040d9 	.word	0x080040d9
 8003f14:	080040d9 	.word	0x080040d9
 8003f18:	080040d9 	.word	0x080040d9
 8003f1c:	080040d9 	.word	0x080040d9
 8003f20:	080040d9 	.word	0x080040d9
 8003f24:	080040d9 	.word	0x080040d9
 8003f28:	080040d9 	.word	0x080040d9
 8003f2c:	080040d9 	.word	0x080040d9
 8003f30:	080040d9 	.word	0x080040d9
 8003f34:	080040d9 	.word	0x080040d9
 8003f38:	080040d9 	.word	0x080040d9
 8003f3c:	080040d9 	.word	0x080040d9
 8003f40:	080040d9 	.word	0x080040d9
 8003f44:	080040d9 	.word	0x080040d9
 8003f48:	080040d9 	.word	0x080040d9
 8003f4c:	080040d9 	.word	0x080040d9
 8003f50:	080040d9 	.word	0x080040d9
 8003f54:	080040d9 	.word	0x080040d9
 8003f58:	080040d9 	.word	0x080040d9
 8003f5c:	080040d9 	.word	0x080040d9
 8003f60:	080040d9 	.word	0x080040d9
 8003f64:	080040d9 	.word	0x080040d9
 8003f68:	080040d9 	.word	0x080040d9
 8003f6c:	080040d9 	.word	0x080040d9
 8003f70:	080040d9 	.word	0x080040d9
 8003f74:	080040d9 	.word	0x080040d9
 8003f78:	080040d9 	.word	0x080040d9
 8003f7c:	080040d9 	.word	0x080040d9
 8003f80:	080040d9 	.word	0x080040d9
 8003f84:	080040d9 	.word	0x080040d9
 8003f88:	080040d9 	.word	0x080040d9
 8003f8c:	080040d9 	.word	0x080040d9
 8003f90:	080040d9 	.word	0x080040d9
 8003f94:	080040d9 	.word	0x080040d9
 8003f98:	080040d9 	.word	0x080040d9
 8003f9c:	080040d9 	.word	0x080040d9
 8003fa0:	080040d9 	.word	0x080040d9
 8003fa4:	080040d9 	.word	0x080040d9
 8003fa8:	080040d9 	.word	0x080040d9
 8003fac:	080040d9 	.word	0x080040d9
 8003fb0:	080040d9 	.word	0x080040d9
 8003fb4:	080040d9 	.word	0x080040d9
 8003fb8:	080040d9 	.word	0x080040d9
 8003fbc:	080040d9 	.word	0x080040d9
 8003fc0:	080040d9 	.word	0x080040d9
 8003fc4:	080040d9 	.word	0x080040d9
 8003fc8:	080040d9 	.word	0x080040d9
 8003fcc:	080040d9 	.word	0x080040d9
 8003fd0:	080040d9 	.word	0x080040d9
 8003fd4:	080040d9 	.word	0x080040d9
 8003fd8:	080040d5 	.word	0x080040d5
    case 100: return "Continue";
 8003fdc:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <mg_http_status_code_str+0x8f8>)
 8003fde:	e07c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8003fe0:	4b42      	ldr	r3, [pc, #264]	; (80040ec <mg_http_status_code_str+0x8fc>)
 8003fe2:	e07a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8003fe4:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <mg_http_status_code_str+0x900>)
 8003fe6:	e078      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8003fe8:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <mg_http_status_code_str+0x904>)
 8003fea:	e076      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <mg_http_status_code_str+0x908>)
 8003fee:	e074      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8003ff0:	4b42      	ldr	r3, [pc, #264]	; (80040fc <mg_http_status_code_str+0x90c>)
 8003ff2:	e072      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8003ff4:	4b42      	ldr	r3, [pc, #264]	; (8004100 <mg_http_status_code_str+0x910>)
 8003ff6:	e070      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8003ff8:	4b42      	ldr	r3, [pc, #264]	; (8004104 <mg_http_status_code_str+0x914>)
 8003ffa:	e06e      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8003ffc:	4b42      	ldr	r3, [pc, #264]	; (8004108 <mg_http_status_code_str+0x918>)
 8003ffe:	e06c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8004000:	4b42      	ldr	r3, [pc, #264]	; (800410c <mg_http_status_code_str+0x91c>)
 8004002:	e06a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8004004:	4b42      	ldr	r3, [pc, #264]	; (8004110 <mg_http_status_code_str+0x920>)
 8004006:	e068      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8004008:	4b42      	ldr	r3, [pc, #264]	; (8004114 <mg_http_status_code_str+0x924>)
 800400a:	e066      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 800400c:	4b42      	ldr	r3, [pc, #264]	; (8004118 <mg_http_status_code_str+0x928>)
 800400e:	e064      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8004010:	4b42      	ldr	r3, [pc, #264]	; (800411c <mg_http_status_code_str+0x92c>)
 8004012:	e062      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8004014:	4b42      	ldr	r3, [pc, #264]	; (8004120 <mg_http_status_code_str+0x930>)
 8004016:	e060      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8004018:	4b42      	ldr	r3, [pc, #264]	; (8004124 <mg_http_status_code_str+0x934>)
 800401a:	e05e      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 800401c:	4b42      	ldr	r3, [pc, #264]	; (8004128 <mg_http_status_code_str+0x938>)
 800401e:	e05c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8004020:	4b42      	ldr	r3, [pc, #264]	; (800412c <mg_http_status_code_str+0x93c>)
 8004022:	e05a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8004024:	4b42      	ldr	r3, [pc, #264]	; (8004130 <mg_http_status_code_str+0x940>)
 8004026:	e058      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <mg_http_status_code_str+0x944>)
 800402a:	e056      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 800402c:	4b42      	ldr	r3, [pc, #264]	; (8004138 <mg_http_status_code_str+0x948>)
 800402e:	e054      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8004030:	4b42      	ldr	r3, [pc, #264]	; (800413c <mg_http_status_code_str+0x94c>)
 8004032:	e052      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8004034:	4b42      	ldr	r3, [pc, #264]	; (8004140 <mg_http_status_code_str+0x950>)
 8004036:	e050      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <mg_http_status_code_str+0x954>)
 800403a:	e04e      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 800403c:	4b42      	ldr	r3, [pc, #264]	; (8004148 <mg_http_status_code_str+0x958>)
 800403e:	e04c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8004040:	4b42      	ldr	r3, [pc, #264]	; (800414c <mg_http_status_code_str+0x95c>)
 8004042:	e04a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8004044:	4b42      	ldr	r3, [pc, #264]	; (8004150 <mg_http_status_code_str+0x960>)
 8004046:	e048      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8004048:	4b42      	ldr	r3, [pc, #264]	; (8004154 <mg_http_status_code_str+0x964>)
 800404a:	e046      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 800404c:	4b42      	ldr	r3, [pc, #264]	; (8004158 <mg_http_status_code_str+0x968>)
 800404e:	e044      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8004050:	4b42      	ldr	r3, [pc, #264]	; (800415c <mg_http_status_code_str+0x96c>)
 8004052:	e042      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8004054:	4b42      	ldr	r3, [pc, #264]	; (8004160 <mg_http_status_code_str+0x970>)
 8004056:	e040      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8004058:	4b42      	ldr	r3, [pc, #264]	; (8004164 <mg_http_status_code_str+0x974>)
 800405a:	e03e      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 800405c:	4b42      	ldr	r3, [pc, #264]	; (8004168 <mg_http_status_code_str+0x978>)
 800405e:	e03c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <mg_http_status_code_str+0x97c>)
 8004062:	e03a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <mg_http_status_code_str+0x980>)
 8004066:	e038      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8004068:	4b42      	ldr	r3, [pc, #264]	; (8004174 <mg_http_status_code_str+0x984>)
 800406a:	e036      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 800406c:	4b42      	ldr	r3, [pc, #264]	; (8004178 <mg_http_status_code_str+0x988>)
 800406e:	e034      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8004070:	4b42      	ldr	r3, [pc, #264]	; (800417c <mg_http_status_code_str+0x98c>)
 8004072:	e032      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8004074:	4b42      	ldr	r3, [pc, #264]	; (8004180 <mg_http_status_code_str+0x990>)
 8004076:	e030      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8004078:	4b42      	ldr	r3, [pc, #264]	; (8004184 <mg_http_status_code_str+0x994>)
 800407a:	e02e      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 800407c:	4b42      	ldr	r3, [pc, #264]	; (8004188 <mg_http_status_code_str+0x998>)
 800407e:	e02c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8004080:	4b42      	ldr	r3, [pc, #264]	; (800418c <mg_http_status_code_str+0x99c>)
 8004082:	e02a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8004084:	4b42      	ldr	r3, [pc, #264]	; (8004190 <mg_http_status_code_str+0x9a0>)
 8004086:	e028      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <mg_http_status_code_str+0x9a4>)
 800408a:	e026      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <mg_http_status_code_str+0x9a8>)
 800408e:	e024      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8004090:	4b42      	ldr	r3, [pc, #264]	; (800419c <mg_http_status_code_str+0x9ac>)
 8004092:	e022      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8004094:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <mg_http_status_code_str+0x9b0>)
 8004096:	e020      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8004098:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <mg_http_status_code_str+0x9b4>)
 800409a:	e01e      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <mg_http_status_code_str+0x9b8>)
 800409e:	e01c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80040a0:	4b42      	ldr	r3, [pc, #264]	; (80041ac <mg_http_status_code_str+0x9bc>)
 80040a2:	e01a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <mg_http_status_code_str+0x9c0>)
 80040a6:	e018      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <mg_http_status_code_str+0x9c4>)
 80040aa:	e016      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80040ac:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <mg_http_status_code_str+0x9c8>)
 80040ae:	e014      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80040b0:	4b42      	ldr	r3, [pc, #264]	; (80041bc <mg_http_status_code_str+0x9cc>)
 80040b2:	e012      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80040b4:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <mg_http_status_code_str+0x9d0>)
 80040b6:	e010      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80040b8:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <mg_http_status_code_str+0x9d4>)
 80040ba:	e00e      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80040bc:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <mg_http_status_code_str+0x9d8>)
 80040be:	e00c      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80040c0:	4b42      	ldr	r3, [pc, #264]	; (80041cc <mg_http_status_code_str+0x9dc>)
 80040c2:	e00a      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80040c4:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <mg_http_status_code_str+0x9e0>)
 80040c6:	e008      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80040c8:	4b42      	ldr	r3, [pc, #264]	; (80041d4 <mg_http_status_code_str+0x9e4>)
 80040ca:	e006      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80040cc:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <mg_http_status_code_str+0x9e8>)
 80040ce:	e004      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80040d0:	4b42      	ldr	r3, [pc, #264]	; (80041dc <mg_http_status_code_str+0x9ec>)
 80040d2:	e002      	b.n	80040da <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <mg_http_status_code_str+0x9f0>)
 80040d6:	e000      	b.n	80040da <mg_http_status_code_str+0x8ea>
    default: return "";
 80040d8:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <mg_http_status_code_str+0x9f4>)
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	08013564 	.word	0x08013564
 80040ec:	08013570 	.word	0x08013570
 80040f0:	08013584 	.word	0x08013584
 80040f4:	08013590 	.word	0x08013590
 80040f8:	08013594 	.word	0x08013594
 80040fc:	0801359c 	.word	0x0801359c
 8004100:	080135a8 	.word	0x080135a8
 8004104:	080135c8 	.word	0x080135c8
 8004108:	080135d4 	.word	0x080135d4
 800410c:	080135e4 	.word	0x080135e4
 8004110:	080135f4 	.word	0x080135f4
 8004114:	08013604 	.word	0x08013604
 8004118:	08013618 	.word	0x08013618
 800411c:	08013620 	.word	0x08013620
 8004120:	08013634 	.word	0x08013634
 8004124:	08013648 	.word	0x08013648
 8004128:	08013650 	.word	0x08013650
 800412c:	0801365c 	.word	0x0801365c
 8004130:	0801366c 	.word	0x0801366c
 8004134:	08013678 	.word	0x08013678
 8004138:	0801368c 	.word	0x0801368c
 800413c:	080136a0 	.word	0x080136a0
 8004140:	080136ac 	.word	0x080136ac
 8004144:	080136bc 	.word	0x080136bc
 8004148:	080136d0 	.word	0x080136d0
 800414c:	080136dc 	.word	0x080136dc
 8004150:	080136e8 	.word	0x080136e8
 8004154:	080136fc 	.word	0x080136fc
 8004158:	0801370c 	.word	0x0801370c
 800415c:	0801372c 	.word	0x0801372c
 8004160:	0801373c 	.word	0x0801373c
 8004164:	08013748 	.word	0x08013748
 8004168:	08013750 	.word	0x08013750
 800416c:	08013760 	.word	0x08013760
 8004170:	08013774 	.word	0x08013774
 8004174:	08013788 	.word	0x08013788
 8004178:	080137a0 	.word	0x080137a0
 800417c:	080137b8 	.word	0x080137b8
 8004180:	080137d8 	.word	0x080137d8
 8004184:	080137ec 	.word	0x080137ec
 8004188:	080137fc 	.word	0x080137fc
 800418c:	08013810 	.word	0x08013810
 8004190:	08013828 	.word	0x08013828
 8004194:	08013830 	.word	0x08013830
 8004198:	08013844 	.word	0x08013844
 800419c:	08013858 	.word	0x08013858
 80041a0:	08013870 	.word	0x08013870
 80041a4:	08013884 	.word	0x08013884
 80041a8:	080138a4 	.word	0x080138a4
 80041ac:	080138c8 	.word	0x080138c8
 80041b0:	080138e8 	.word	0x080138e8
 80041b4:	08013900 	.word	0x08013900
 80041b8:	08013918 	.word	0x08013918
 80041bc:	08013928 	.word	0x08013928
 80041c0:	08013934 	.word	0x08013934
 80041c4:	08013948 	.word	0x08013948
 80041c8:	08013958 	.word	0x08013958
 80041cc:	08013974 	.word	0x08013974
 80041d0:	0801398c 	.word	0x0801398c
 80041d4:	080139a4 	.word	0x080139a4
 80041d8:	080139b4 	.word	0x080139b4
 80041dc:	080139c4 	.word	0x080139c4
 80041e0:	080139e4 	.word	0x080139e4
 80041e4:	08013a04 	.word	0x08013a04

080041e8 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80041e8:	b408      	push	{r3}
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b08b      	sub	sp, #44	; 0x2c
 80041ee:	af02      	add	r7, sp, #8
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80041f6:	68b8      	ldr	r0, [r7, #8]
 80041f8:	f7ff fafa 	bl	80037f0 <mg_http_status_code_str>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <mg_http_reply+0x20>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	e000      	b.n	800420a <mg_http_reply+0x22>
 8004208:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <mg_http_reply+0xa0>)
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	491e      	ldr	r1, [pc, #120]	; (800428c <mg_http_reply+0xa4>)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f002 fa40 	bl	8006698 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800421e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004222:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004230:	4817      	ldr	r0, [pc, #92]	; (8004290 <mg_http_reply+0xa8>)
 8004232:	f7fe f89b 	bl	800236c <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423a:	2b10      	cmp	r3, #16
 800423c:	d916      	bls.n	800426c <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3b0f      	subs	r3, #15
 8004246:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004250:	4a10      	ldr	r2, [pc, #64]	; (8004294 <mg_http_reply+0xac>)
 8004252:	210b      	movs	r1, #11
 8004254:	f002 fc3e 	bl	8006ad4 <mg_snprintf>
 8004258:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800425e:	69f9      	ldr	r1, [r7, #28]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	440b      	add	r3, r1
 8004264:	3b0f      	subs	r3, #15
 8004266:	4413      	add	r3, r2
 8004268:	2220      	movs	r2, #32
 800426a:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004272:	f36f 13c7 	bfc	r3, #7, #1
 8004276:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800427a:	bf00      	nop
 800427c:	3724      	adds	r7, #36	; 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004284:	b001      	add	sp, #4
 8004286:	4770      	bx	lr
 8004288:	08013a04 	.word	0x08013a04
 800428c:	08013a08 	.word	0x08013a08
 8004290:	08006a65 	.word	0x08006a65
 8004294:	08013a3c 	.word	0x08013a3c

08004298 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fc2d 	bl	8002b04 <mg_fs_close>
  c->pfn_data = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a06      	ldr	r2, [pc, #24]	; (80042cc <restore_http_cb+0x34>)
 80042b4:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80042bc:	f36f 13c7 	bfc	r3, #7, #1
 80042c0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	080053f1 	.word	0x080053f1

080042d0 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80042d0:	b5b0      	push	{r4, r5, r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af04      	add	r7, sp, #16
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	461c      	mov	r4, r3
 80042e2:	4615      	mov	r5, r2
 80042e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80042e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ec:	e9cd 2300 	strd	r2, r3, [sp]
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <mg_http_etag+0x34>)
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f002 fbed 	bl	8006ad4 <mg_snprintf>
  return buf;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bdb0      	pop	{r4, r5, r7, pc}
 8004304:	08013a44 	.word	0x08013a44

08004308 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d002      	beq.n	8004322 <static_cb+0x1a>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d146      	bne.n	80043b0 <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8004326:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800432a:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3384      	adds	r3, #132	; 0x84
 8004330:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d905      	bls.n	8004348 <static_cb+0x40>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3348      	adds	r3, #72	; 0x48
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f9c6 	bl	80056d4 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004350:	429a      	cmp	r2, r3
 8004352:	d234      	bcs.n	80043be <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004366:	429a      	cmp	r2, r3
 8004368:	d902      	bls.n	8004370 <static_cb+0x68>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	6a3a      	ldr	r2, [r7, #32]
 8004378:	6810      	ldr	r0, [r2, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004382:	4411      	add	r1, r2
 8004384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004386:	4798      	blx	r3
 8004388:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	441a      	add	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	1ad2      	subs	r2, r2, r3
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10c      	bne.n	80043c2 <static_cb+0xba>
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f7ff ff75 	bl	8004298 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80043ae:	e008      	b.n	80043c2 <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b09      	cmp	r3, #9
 80043b4:	d106      	bne.n	80043c4 <static_cb+0xbc>
    restore_http_cb(c);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff ff6e 	bl	8004298 <restore_http_cb>
 80043bc:	e002      	b.n	80043c4 <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80043be:	bf00      	nop
 80043c0:	e000      	b.n	80043c4 <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80043c2:	bf00      	nop
  }
  (void) ev_data;
}
 80043c4:	3728      	adds	r7, #40	; 0x28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b08d      	sub	sp, #52	; 0x34
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	1d38      	adds	r0, r7, #4
 80043d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80043da:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f002 fec0 	bl	8007168 <mg_str_s>
  size_t i = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 80043ec:	e002      	b.n	80043f4 <guess_content_type+0x28>
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	3301      	adds	r3, #1
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d208      	bcs.n	800440e <guess_content_type+0x42>
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	1acb      	subs	r3, r1, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b2e      	cmp	r3, #46	; 0x2e
 800440c:	d1ef      	bne.n	80043ee <guess_content_type+0x22>
  path.ptr += path.len - i;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	1acb      	subs	r3, r1, r3
 8004416:	4413      	add	r3, r2
 8004418:	607b      	str	r3, [r7, #4]
  path.len = i;
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 800441e:	e012      	b.n	8004446 <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 8004420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004424:	cb0c      	ldmia	r3, {r2, r3}
 8004426:	1d39      	adds	r1, r7, #4
 8004428:	c903      	ldmia	r1, {r0, r1}
 800442a:	f002 ff5f 	bl	80072ec <mg_strcmp>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d108      	bne.n	8004446 <guess_content_type+0x7a>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	461a      	mov	r2, r3
 8004438:	f107 031c 	add.w	r3, r7, #28
 800443c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004440:	e882 0003 	stmia.w	r2, {r0, r1}
 8004444:	e034      	b.n	80044b0 <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 8004446:	f107 021c 	add.w	r2, r7, #28
 800444a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800444e:	f107 0314 	add.w	r3, r7, #20
 8004452:	4618      	mov	r0, r3
 8004454:	f003 f9a9 	bl	80077aa <mg_commalist>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e0      	bne.n	8004420 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 800445e:	2300      	movs	r3, #0
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004462:	e01a      	b.n	800449a <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <guess_content_type+0xec>)
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	cb0c      	ldmia	r3, {r2, r3}
 800446e:	1d39      	adds	r1, r7, #4
 8004470:	c903      	ldmia	r1, {r0, r1}
 8004472:	f002 ff3b 	bl	80072ec <mg_strcmp>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <guess_content_type+0xc8>
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	3301      	adds	r3, #1
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <guess_content_type+0xec>)
 8004484:	460c      	mov	r4, r1
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800448e:	e884 0003 	stmia.w	r4, {r0, r1}
 8004492:	e00d      	b.n	80044b0 <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	3302      	adds	r3, #2
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <guess_content_type+0xec>)
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1de      	bne.n	8004464 <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4904      	ldr	r1, [pc, #16]	; (80044bc <guess_content_type+0xf0>)
 80044aa:	4618      	mov	r0, r3
 80044ac:	f002 fe5c 	bl	8007168 <mg_str_s>
}
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	3734      	adds	r7, #52	; 0x34
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd90      	pop	{r4, r7, pc}
 80044b8:	20000050 	.word	0x20000050
 80044bc:	08013b2c 	.word	0x08013b2c

080044c0 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e076      	b.n	80045c4 <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	2206      	movs	r2, #6
 80044e0:	493f      	ldr	r1, [pc, #252]	; (80045e0 <getrange+0x120>)
 80044e2:	4618      	mov	r0, r3
 80044e4:	f00d ffe7 	bl	80124b6 <memcmp>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d167      	bne.n	80045be <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3306      	adds	r3, #6
 80044f6:	18d1      	adds	r1, r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	1f9a      	subs	r2, r3, #6
 8004502:	f107 0310 	add.w	r3, r7, #16
 8004506:	4618      	mov	r0, r3
 8004508:	f002 fe4b 	bl	80071a2 <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <getrange+0x68>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b2f      	cmp	r3, #47	; 0x2f
 8004518:	d906      	bls.n	8004528 <getrange+0x68>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b39      	cmp	r3, #57	; 0x39
 8004520:	d802      	bhi.n	8004528 <getrange+0x68>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3301      	adds	r3, #1
 8004526:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	f107 0310 	add.w	r3, r7, #16
 800452e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004532:	f7fe fd25 	bl	8002f80 <mg_to_size_t>
 8004536:	4603      	mov	r3, r0
 8004538:	f083 0301 	eor.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <getrange+0x92>
 8004542:	2300      	movs	r3, #0
 8004544:	e047      	b.n	80045d6 <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3301      	adds	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3b01      	subs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <getrange+0xa8>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b2f      	cmp	r3, #47	; 0x2f
 800455e:	d903      	bls.n	8004568 <getrange+0xa8>
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b39      	cmp	r3, #57	; 0x39
 8004566:	d9ee      	bls.n	8004546 <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <getrange+0xc2>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b2d      	cmp	r3, #45	; 0x2d
 8004574:	d105      	bne.n	8004582 <getrange+0xc2>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3301      	adds	r3, #1
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3b01      	subs	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	f107 0310 	add.w	r3, r7, #16
 8004588:	e893 0003 	ldmia.w	r3, {r0, r1}
 800458c:	f7fe fcf8 	bl	8002f80 <mg_to_size_t>
 8004590:	4603      	mov	r3, r0
 8004592:	f083 0301 	eor.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <getrange+0xe0>
 800459c:	2300      	movs	r3, #0
 800459e:	e01a      	b.n	80045d6 <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d015      	beq.n	80045d2 <getrange+0x112>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b2f      	cmp	r3, #47	; 0x2f
 80045ac:	d911      	bls.n	80045d2 <getrange+0x112>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b39      	cmp	r3, #57	; 0x39
 80045b4:	d80d      	bhi.n	80045d2 <getrange+0x112>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	e00a      	b.n	80045d4 <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	1d9a      	adds	r2, r3, #6
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d382      	bcc.n	80044d6 <getrange+0x16>
 80045d0:	e000      	b.n	80045d4 <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 80045d2:	bf00      	nop
    }
  }
  return (int) numparsed;
 80045d4:	69bb      	ldr	r3, [r7, #24]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	08013cb0 	.word	0x08013cb0

080045e4 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 80045e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e8:	b0f7      	sub	sp, #476	; 0x1dc
 80045ea:	af0a      	add	r7, sp, #40	; 0x28
 80045ec:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 80045f0:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 80045f4:	6020      	str	r0, [r4, #0]
 80045f6:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 80045fa:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 80045fe:	6001      	str	r1, [r0, #0]
 8004600:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8004604:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 8004608:	600a      	str	r2, [r1, #0]
 800460a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800460e:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8004612:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004614:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004618:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d006      	beq.n	8004632 <mg_http_serve_file+0x4e>
 8004624:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004628:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	e000      	b.n	8004634 <mg_http_serve_file+0x50>
 8004632:	4b9d      	ldr	r3, [pc, #628]	; (80048a8 <mg_http_serve_file+0x2c4>)
 8004634:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  struct mg_fd *fd = NULL;
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  size_t size = 0;
 800463e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 800465c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004660:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004664:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	4610      	mov	r0, r2
 800466c:	f002 fd7c 	bl	8007168 <mg_str_s>
 8004670:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004674:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004680:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 8004684:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004688:	ca06      	ldmia	r2, {r1, r2}
 800468a:	f7ff fe9f 	bl	80043cc <guess_content_type>
  bool gzip = false;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

  if (path != NULL) {
 8004694:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004698:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d051      	beq.n	8004746 <mg_http_serve_file+0x162>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 80046a2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046aa:	4980      	ldr	r1, [pc, #512]	; (80048ac <mg_http_serve_file+0x2c8>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f7fe fe03 	bl	80032b8 <mg_http_get_header>
 80046b2:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 80046b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d033      	beq.n	8004726 <mg_http_serve_file+0x142>
 80046be:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80046c2:	497b      	ldr	r1, [pc, #492]	; (80048b0 <mg_http_serve_file+0x2cc>)
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 fd4f 	bl	8007168 <mg_str_s>
 80046ca:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80046ce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80046d2:	cb0c      	ldmia	r3, {r2, r3}
 80046d4:	c903      	ldmia	r1, {r0, r1}
 80046d6:	f002 fe4b 	bl	8007370 <mg_strstr>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d022      	beq.n	8004726 <mg_http_serve_file+0x142>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80046e0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046e4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046e8:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a71      	ldr	r2, [pc, #452]	; (80048b4 <mg_http_serve_file+0x2d0>)
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	f002 f9ef 	bl	8006ad4 <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80046f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80046fa:	2201      	movs	r2, #1
 80046fc:	4619      	mov	r1, r3
 80046fe:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8004702:	f7fe f9d7 	bl	8002ab4 <mg_fs_open>
 8004706:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
      if (fd != NULL) gzip = true, path = tmp;
 800470a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <mg_http_serve_file+0x142>
 8004712:	2301      	movs	r3, #1
 8004714:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8004718:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800471c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004720:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8004724:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8004726:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <mg_http_serve_file+0x162>
 800472e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004732:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004736:	2201      	movs	r2, #1
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800473e:	f7fe f9b9 	bl	8002ab4 <mg_fs_open>
 8004742:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8004746:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800474a:	2b00      	cmp	r3, #0
 800474c:	d144      	bne.n	80047d8 <mg_http_serve_file+0x1f4>
 800474e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004752:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03c      	beq.n	80047d8 <mg_http_serve_file+0x1f4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800475e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004762:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2201      	movs	r2, #1
 800476c:	4619      	mov	r1, r3
 800476e:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8004772:	f7fe f99f 	bl	8002ab4 <mg_fs_open>
 8004776:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    mime = guess_content_type(mg_str(path), opts->mime_types);
 800477a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 800477e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004782:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	4610      	mov	r0, r2
 800478a:	f002 fced 	bl	8007168 <mg_str_s>
 800478e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004792:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 800479e:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 80047a2:	f107 0010 	add.w	r0, r7, #16
 80047a6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80047aa:	ca06      	ldmia	r2, {r1, r2}
 80047ac:	f7ff fe0e 	bl	80043cc <guess_content_type>
 80047b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047b4:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80047b8:	4623      	mov	r3, r4
 80047ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047be:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 80047c2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80047ca:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80047ce:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	6912      	ldr	r2, [r2, #16]
 80047d6:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80047d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00f      	beq.n	8004800 <mg_http_serve_file+0x21c>
 80047e0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80047ea:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80047ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	47a0      	blx	r4
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d114      	bne.n	800482a <mg_http_serve_file+0x246>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8004800:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004804:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004810:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <mg_http_serve_file+0x2d4>)
 8004816:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	f7ff fce4 	bl	80041e8 <mg_http_reply>
    mg_fs_close(fd);
 8004820:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004824:	f7fe f96e 	bl	8002b04 <mg_fs_close>
 8004828:	e193      	b.n	8004b52 <mg_http_serve_file+0x56e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800482a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800482e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004838:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800483c:	e9cd 2300 	strd	r2, r3, [sp]
 8004840:	460a      	mov	r2, r1
 8004842:	2140      	movs	r1, #64	; 0x40
 8004844:	f7ff fd44 	bl	80042d0 <mg_http_etag>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d03a      	beq.n	80048c4 <mg_http_serve_file+0x2e0>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800484e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004852:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004856:	4919      	ldr	r1, [pc, #100]	; (80048bc <mg_http_serve_file+0x2d8>)
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	f7fe fd2d 	bl	80032b8 <mg_http_get_header>
 800485e:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004862:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02c      	beq.n	80048c4 <mg_http_serve_file+0x2e0>
             mg_vcasecmp(inm, etag) == 0) {
 800486a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486e:	4619      	mov	r1, r3
 8004870:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8004874:	f002 fd16 	bl	80072a4 <mg_vcasecmp>
 8004878:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800487a:	2b00      	cmp	r3, #0
 800487c:	d122      	bne.n	80048c4 <mg_http_serve_file+0x2e0>
    mg_fs_close(fd);
 800487e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004882:	f7fe f93f 	bl	8002b04 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8004886:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800488a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004896:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <mg_http_serve_file+0x2dc>)
 800489c:	f44f 7198 	mov.w	r1, #304	; 0x130
 80048a0:	6800      	ldr	r0, [r0, #0]
 80048a2:	f7ff fca1 	bl	80041e8 <mg_http_reply>
 80048a6:	e154      	b.n	8004b52 <mg_http_serve_file+0x56e>
 80048a8:	20000028 	.word	0x20000028
 80048ac:	08013cb8 	.word	0x08013cb8
 80048b0:	08013cc8 	.word	0x08013cc8
 80048b4:	08013cd0 	.word	0x08013cd0
 80048b8:	08013cd8 	.word	0x08013cd8
 80048bc:	08013ce4 	.word	0x08013ce4
 80048c0:	08013a04 	.word	0x08013a04
  } else {
    int n, status = 200;
 80048c4:	23c8      	movs	r3, #200	; 0xc8
 80048c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 80048ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80048f0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048f8:	4999      	ldr	r1, [pc, #612]	; (8004b60 <mg_http_serve_file+0x57c>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	f7fe fcdc 	bl	80032b8 <mg_http_get_header>
 8004900:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    range[0] = '\0';
 8004904:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004908:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8004910:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8095 	beq.w	8004a44 <mg_http_serve_file+0x460>
 800491a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800491e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004922:	4619      	mov	r1, r3
 8004924:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8004928:	f7ff fdca 	bl	80044c0 <getrange>
 800492c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8004930:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004934:	2b00      	cmp	r3, #0
 8004936:	f340 8085 	ble.w	8004a44 <mg_http_serve_file+0x460>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 800493a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800493e:	2b01      	cmp	r3, #1
 8004940:	d107      	bne.n	8004952 <mg_http_serve_file+0x36e>
 8004942:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800494c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004950:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8004952:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004956:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004960:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d808      	bhi.n	800497c <mg_http_serve_file+0x398>
 800496a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800496e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004978:	429a      	cmp	r2, r3
 800497a:	d81a      	bhi.n	80049b2 <mg_http_serve_file+0x3ce>
        status = 416;
 800497c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004980:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800498a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800498e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2200      	movs	r2, #0
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	60fa      	str	r2, [r7, #12]
 800499a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800499e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049a2:	e9cd 1200 	strd	r1, r2, [sp]
 80049a6:	4a6f      	ldr	r2, [pc, #444]	; (8004b64 <mg_http_serve_file+0x580>)
 80049a8:	2164      	movs	r1, #100	; 0x64
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 f892 	bl	8006ad4 <mg_snprintf>
 80049b0:	e048      	b.n	8004a44 <mg_http_serve_file+0x460>
                    (int64_t) size);
      } else {
        status = 206;
 80049b2:	23ce      	movs	r3, #206	; 0xce
 80049b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = r2 - r1 + 1;
 80049b8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	3301      	adds	r3, #1
 80049d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range),
 80049d4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	469a      	mov	sl, r3
 80049e2:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 80049e4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80049f2:	4413      	add	r3, r2
 80049f4:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 80049f6:	2200      	movs	r2, #0
 80049f8:	461d      	mov	r5, r3
 80049fa:	4616      	mov	r6, r2
 80049fc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2200      	movs	r2, #0
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a14:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004a18:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8004a1c:	e9cd ab00 	strd	sl, fp, [sp]
 8004a20:	4a51      	ldr	r2, [pc, #324]	; (8004b68 <mg_http_serve_file+0x584>)
 8004a22:	2164      	movs	r1, #100	; 0x64
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 f855 	bl	8006ad4 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8004a2a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8004a34:	6810      	ldr	r0, [r2, #0]
 8004a36:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004a3a:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	4611      	mov	r1, r2
 8004a42:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8004a44:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8004a48:	f7fe fed2 	bl	80037f0 <mg_http_status_code_str>
 8004a4c:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 8004a4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a56:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8004a58:	461d      	mov	r5, r3
 8004a5a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4698      	mov	r8, r3
 8004a6c:	4689      	mov	r9, r1
 8004a6e:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <mg_http_serve_file+0x496>
 8004a76:	493d      	ldr	r1, [pc, #244]	; (8004b6c <mg_http_serve_file+0x588>)
 8004a78:	e000      	b.n	8004a7c <mg_http_serve_file+0x498>
 8004a7a:	493d      	ldr	r1, [pc, #244]	; (8004b70 <mg_http_serve_file+0x58c>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8004a7c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d006      	beq.n	8004a9a <mg_http_serve_file+0x4b6>
 8004a8c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a90:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	e000      	b.n	8004a9c <mg_http_serve_file+0x4b8>
 8004a9a:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <mg_http_serve_file+0x58c>)
 8004a9c:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004aa0:	f5a0 70c6 	sub.w	r0, r0, #396	; 0x18c
 8004aa4:	9308      	str	r3, [sp, #32]
 8004aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aaa:	9307      	str	r3, [sp, #28]
 8004aac:	9106      	str	r1, [sp, #24]
 8004aae:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab6:	9302      	str	r3, [sp, #8]
 8004ab8:	9201      	str	r2, [sp, #4]
 8004aba:	9500      	str	r5, [sp, #0]
 8004abc:	4623      	mov	r3, r4
 8004abe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004ac2:	492c      	ldr	r1, [pc, #176]	; (8004b74 <mg_http_serve_file+0x590>)
 8004ac4:	6800      	ldr	r0, [r0, #0]
 8004ac6:	f001 fde7 	bl	8006698 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8004aca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ace:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4928      	ldr	r1, [pc, #160]	; (8004b78 <mg_http_serve_file+0x594>)
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 fbe4 	bl	80072a4 <mg_vcasecmp>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11a      	bne.n	8004b18 <mg_http_serve_file+0x534>
      c->is_draining = 1;
 8004ae2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ae6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004af0:	f043 0310 	orr.w	r3, r3, #16
 8004af4:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 8004af8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004afc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004b06:	f36f 13c7 	bfc	r3, #7, #1
 8004b0a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 8004b0e:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004b12:	f7fd fff7 	bl	8002b04 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8004b16:	e01c      	b.n	8004b52 <mg_http_serve_file+0x56e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004b18:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3384      	adds	r3, #132	; 0x84
 8004b24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      c->pfn = static_cb;
 8004b28:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <mg_http_serve_file+0x598>)
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 8004b36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 8004b46:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b4a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	e7ff      	b.n	8004b52 <mg_http_serve_file+0x56e>
 8004b52:	bf00      	nop
 8004b54:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5e:	bf00      	nop
 8004b60:	08013cf4 	.word	0x08013cf4
 8004b64:	08013cfc 	.word	0x08013cfc
 8004b68:	08013d1c 	.word	0x08013d1c
 8004b6c:	08013d44 	.word	0x08013d44
 8004b70:	08013a04 	.word	0x08013a04
 8004b74:	08013d60 	.word	0x08013d60
 8004b78:	08013db0 	.word	0x08013db0
 8004b7c:	08004309 	.word	0x08004309

08004b80 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8004b80:	b082      	sub	sp, #8
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b08b      	sub	sp, #44	; 0x2c
 8004b86:	af02      	add	r7, sp, #8
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 8004b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b92:	461a      	mov	r2, r3
 8004b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	4a97      	ldr	r2, [pc, #604]	; (8004df8 <uri_to_path2+0x278>)
 8004b9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004ba0:	f001 ff98 	bl	8006ad4 <mg_snprintf>
 8004ba4:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d909      	bls.n	8004bc2 <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8004bae:	4b93      	ldr	r3, [pc, #588]	; (8004dfc <uri_to_path2+0x27c>)
 8004bb0:	4a93      	ldr	r2, [pc, #588]	; (8004e00 <uri_to_path2+0x280>)
 8004bb2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7ff fb16 	bl	80041e8 <mg_http_reply>
    return -1;
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc0:	e113      	b.n	8004dea <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bc8:	4413      	add	r3, r2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d912      	bls.n	8004bfe <uri_to_path2+0x7e>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bde:	4413      	add	r3, r2
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b2f      	cmp	r3, #47	; 0x2f
 8004be4:	d00b      	beq.n	8004bfe <uri_to_path2+0x7e>
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	617a      	str	r2, [r7, #20]
 8004bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bee:	4413      	add	r3, r2
 8004bf0:	222f      	movs	r2, #47	; 0x2f
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	18d0      	adds	r0, r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	1ad1      	subs	r1, r2, r3
 8004c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	18d4      	adds	r4, r2, r3
 8004c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	9200      	str	r2, [sp, #0]
 8004c1e:	4622      	mov	r2, r4
 8004c20:	f7fe fa64 	bl	80030ec <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 8004c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c26:	3b01      	subs	r3, #1
 8004c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c2a:	4413      	add	r3, r2
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 8004c30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c32:	f002 fe37 	bl	80078a4 <mg_path_is_sane>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f083 0301 	eor.w	r3, r3, #1
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 8004c42:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <uri_to_path2+0x284>)
 8004c44:	4a6e      	ldr	r2, [pc, #440]	; (8004e00 <uri_to_path2+0x280>)
 8004c46:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff facc 	bl	80041e8 <mg_http_reply>
    return -1;
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
 8004c54:	e0c9      	b.n	8004dea <uri_to_path2+0x26a>
  }
  n = strlen(path);
 8004c56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c58:	f7fb fb3a 	bl	80002d0 <strlen>
 8004c5c:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8004c5e:	e007      	b.n	8004c70 <uri_to_path2+0xf0>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d906      	bls.n	8004c84 <uri_to_path2+0x104>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c7c:	4413      	add	r3, r2
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b2f      	cmp	r3, #47	; 0x2f
 8004c82:	d0ed      	beq.n	8004c60 <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3308      	adds	r3, #8
 8004c88:	495f      	ldr	r1, [pc, #380]	; (8004e08 <uri_to_path2+0x288>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f002 fae6 	bl	800725c <mg_vcmp>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <uri_to_path2+0x126>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004ca0:	4798      	blx	r3
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	e000      	b.n	8004ca8 <uri_to_path2+0x128>
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 8004caa:	4b58      	ldr	r3, [pc, #352]	; (8004e0c <uri_to_path2+0x28c>)
 8004cac:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8004cb0:	4957      	ldr	r1, [pc, #348]	; (8004e10 <uri_to_path2+0x290>)
 8004cb2:	2004      	movs	r0, #4
 8004cb4:	f001 fb90 	bl	80063d8 <mg_log_prefix>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00f      	beq.n	8004cde <uri_to_path2+0x15e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	484e      	ldr	r0, [pc, #312]	; (8004e14 <uri_to_path2+0x294>)
 8004cda:	f001 fbd7 	bl	800648c <mg_log>
              flags));
  if (flags == 0) {
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8081 	beq.w	8004de8 <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d020      	beq.n	8004d32 <uri_to_path2+0x1b2>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01c      	beq.n	8004d32 <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004d06:	2b2f      	cmp	r3, #47	; 0x2f
 8004d08:	d013      	beq.n	8004d32 <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4940      	ldr	r1, [pc, #256]	; (8004e18 <uri_to_path2+0x298>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f001 fcbe 	bl	8006698 <mg_printf>
    c->is_resp = 0;
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004d22:	f36f 13c7 	bfc	r3, #7, #1
 8004d26:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e05a      	b.n	8004de8 <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d055      	beq.n	8004de8 <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	18d0      	adds	r0, r2, r3
 8004d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	4a34      	ldr	r2, [pc, #208]	; (8004e1c <uri_to_path2+0x29c>)
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f001 fec2 	bl	8006ad4 <mg_snprintf>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d60:	4798      	blx	r3
 8004d62:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d116      	bne.n	8004d98 <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	18d0      	adds	r0, r2, r3
 8004d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <uri_to_path2+0x2a0>)
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f001 feab 	bl	8006ad4 <mg_snprintf>
 8004d7e:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004d8e:	4798      	blx	r3
 8004d90:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <uri_to_path2+0x21e>
      flags = tmp;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e024      	b.n	8004de8 <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8004d9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	18d0      	adds	r0, r2, r3
 8004da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <uri_to_path2+0x2a4>)
 8004dac:	4619      	mov	r1, r3
 8004dae:	f001 fe91 	bl	8006ad4 <mg_snprintf>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004dc2:	4798      	blx	r3
 8004dc4:	61b8      	str	r0, [r7, #24]
                    0 &&
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	330b      	adds	r3, #11
 8004dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd6:	4413      	add	r3, r2
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e004      	b.n	8004de8 <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8004dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8004de8:	69fb      	ldr	r3, [r7, #28]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3724      	adds	r7, #36	; 0x24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004df4:	b002      	add	sp, #8
 8004df6:	4770      	bx	lr
 8004df8:	080134a4 	.word	0x080134a4
 8004dfc:	08013db8 	.word	0x08013db8
 8004e00:	08013a04 	.word	0x08013a04
 8004e04:	08013dcc 	.word	0x08013dcc
 8004e08:	08013ddc 	.word	0x08013ddc
 8004e0c:	08014c7c 	.word	0x08014c7c
 8004e10:	08013374 	.word	0x08013374
 8004e14:	08013de0 	.word	0x08013de0
 8004e18:	08013df4 	.word	0x08013df4
 8004e1c:	08013e30 	.word	0x08013e30
 8004e20:	08013e3c 	.word	0x08013e3c
 8004e24:	08013e4c 	.word	0x08013e4c

08004e28 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b09a      	sub	sp, #104	; 0x68
 8004e2c:	af06      	add	r7, sp, #24
 8004e2e:	6178      	str	r0, [r7, #20]
 8004e30:	6139      	str	r1, [r7, #16]
 8004e32:	60fa      	str	r2, [r7, #12]
 8004e34:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <uri_to_path+0x1c>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	e000      	b.n	8004e46 <uri_to_path+0x1e>
 8004e44:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <uri_to_path+0x10c>)
 8004e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 f988 	bl	8007168 <mg_str_s>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	2300      	movs	r3, #0
 8004e66:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 8004e68:	e040      	b.n	8004eec <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d113      	bne.n	8004e98 <uri_to_path+0x70>
 8004e70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e74:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e80:	463b      	mov	r3, r7
 8004e82:	492d      	ldr	r1, [pc, #180]	; (8004f38 <uri_to_path+0x110>)
 8004e84:	4618      	mov	r0, r3
 8004e86:	f002 f96f 	bl	8007168 <mg_str_s>
 8004e8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e8e:	463a      	mov	r2, r7
 8004e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e94:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d200      	bcs.n	8004ea4 <uri_to_path+0x7c>
 8004ea2:	e023      	b.n	8004eec <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6899      	ldr	r1, [r3, #8]
 8004ea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eaa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f002 f977 	bl	80071a2 <mg_str_n>
 8004eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004eb8:	cb0c      	ldmia	r3, {r2, r3}
 8004eba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004ebe:	c903      	ldmia	r1, {r0, r1}
 8004ec0:	f002 fa14 	bl	80072ec <mg_strcmp>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d000      	beq.n	8004ecc <uri_to_path+0xa4>
 8004eca:	e00f      	b.n	8004eec <uri_to_path+0xc4>
    u = k, p = v;
 8004ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ed8:	e883 0003 	stmia.w	r3, {r0, r1}
 8004edc:	f107 031c 	add.w	r3, r7, #28
 8004ee0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 8004eec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ef0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f002 fc56 	bl	80077aa <mg_commalist>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1b2      	bne.n	8004e6a <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8004f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	9303      	str	r3, [sp, #12]
 8004f0c:	aa01      	add	r2, sp, #4
 8004f0e:	f107 031c 	add.w	r3, r7, #28
 8004f12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f16:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f22:	6939      	ldr	r1, [r7, #16]
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f7ff fe2b 	bl	8004b80 <uri_to_path2>
 8004f2a:	4603      	mov	r3, r0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3750      	adds	r7, #80	; 0x50
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000028 	.word	0x20000028
 8004f38:	08013ddc 	.word	0x08013ddc

08004f3c <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b0a9      	sub	sp, #164	; 0xa4
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	9200      	str	r2, [sp, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7ff ff63 	bl	8004e28 <uri_to_path>
 8004f62:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (flags < 0) {
 8004f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	db3a      	blt.n	8004fe4 <mg_http_serve_dir+0xa8>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8004f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <mg_http_serve_dir+0xb0>)
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <mg_http_serve_dir+0xb4>)
 8004f7e:	f240 1193 	movw	r1, #403	; 0x193
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff f930 	bl	80041e8 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8004f88:	e02c      	b.n	8004fe4 <mg_http_serve_dir+0xa8>
  } else if (flags && sp != NULL &&
 8004f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d021      	beq.n	8004fd6 <mg_http_serve_dir+0x9a>
 8004f92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01d      	beq.n	8004fd6 <mg_http_serve_dir+0x9a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 8004f9a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004f9e:	f7fb f997 	bl	80002d0 <strlen>
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	f107 0310 	add.w	r3, r7, #16
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fb f991 	bl	80002d0 <strlen>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f107 0210 	add.w	r2, r7, #16
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004fba:	f002 faf5 	bl	80075a8 <mg_globmatch>
 8004fbe:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <mg_http_serve_dir+0x9a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f107 0210 	add.w	r2, r7, #16
 8004fcc:	4619      	mov	r1, r3
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f002 f8b6 	bl	8007140 <mg_http_serve_ssi>
}
 8004fd4:	e006      	b.n	8004fe4 <mg_http_serve_dir+0xa8>
    mg_http_serve_file(c, hm, path, opts);
 8004fd6:	f107 0210 	add.w	r2, r7, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff fb00 	bl	80045e4 <mg_http_serve_file>
}
 8004fe4:	bf00      	nop
 8004fe6:	379c      	adds	r7, #156	; 0x9c
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd90      	pop	{r4, r7, pc}
 8004fec:	08013e5c 	.word	0x08013e5c
 8004ff0:	08013a04 	.word	0x08013a04

08004ff4 <mg_http_match_uri>:
    }
  }
  return mg_str_n(NULL, 0);
}

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f002 f8af 	bl	8007168 <mg_str_s>
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	2300      	movs	r3, #0
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	f107 0308 	add.w	r3, r7, #8
 8005014:	cb0c      	ldmia	r3, {r2, r3}
 8005016:	3108      	adds	r1, #8
 8005018:	c903      	ldmia	r1, {r0, r1}
 800501a:	f002 f9de 	bl	80073da <mg_match>
 800501e:	4603      	mov	r3, r0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	f107 0408 	add.w	r4, r7, #8
 8005032:	e884 0003 	stmia.w	r4, {r0, r1}
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 800503e:	e002      	b.n	8005046 <getchunk+0x1e>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3301      	adds	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	429a      	cmp	r2, r3
 800504c:	d20b      	bcs.n	8005066 <getchunk+0x3e>
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b0d      	cmp	r3, #13
 8005058:	d005      	beq.n	8005066 <getchunk+0x3e>
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b0a      	cmp	r3, #10
 8005064:	d1ec      	bne.n	8005040 <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	4618      	mov	r0, r3
 800506c:	f002 fbd0 	bl	8007810 <mg_unhexn>
 8005070:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	6979      	ldr	r1, [r7, #20]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	440b      	add	r3, r1
 800507a:	3304      	adds	r3, #4
 800507c:	429a      	cmp	r2, r3
 800507e:	d201      	bcs.n	8005084 <getchunk+0x5c>
 8005080:	2300      	movs	r3, #0
 8005082:	e02a      	b.n	80050da <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b0d      	cmp	r3, #13
 800508e:	d106      	bne.n	800509e <getchunk+0x76>
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	3301      	adds	r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b0a      	cmp	r3, #10
 800509c:	d001      	beq.n	80050a2 <getchunk+0x7a>
 800509e:	2300      	movs	r3, #0
 80050a0:	e01b      	b.n	80050da <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	6979      	ldr	r1, [r7, #20]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	440b      	add	r3, r1
 80050aa:	3302      	adds	r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b0d      	cmp	r3, #13
 80050b2:	d108      	bne.n	80050c6 <getchunk+0x9e>
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	440b      	add	r3, r1
 80050bc:	3303      	adds	r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b0a      	cmp	r3, #10
 80050c4:	d001      	beq.n	80050ca <getchunk+0xa2>
 80050c6:	2300      	movs	r3, #0
 80050c8:	e007      	b.n	80050da <getchunk+0xb2>
  *prefixlen = i + 2;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
  *datalen = n;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	601a      	str	r2, [r3, #0]
  return true;
 80050d8:	2301      	movs	r3, #1
}
 80050da:	4618      	mov	r0, r3
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd90      	pop	{r4, r7, pc}
	...

080050e4 <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <mg_is_chunked+0x40>)
 80050ee:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 80050f0:	490d      	ldr	r1, [pc, #52]	; (8005128 <mg_is_chunked+0x44>)
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fe f8e0 	bl	80032b8 <mg_http_get_header>
 80050f8:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <mg_is_chunked+0x2e>
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	68b8      	ldr	r0, [r7, #8]
 8005104:	f002 f8ce 	bl	80072a4 <mg_vcasecmp>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <mg_is_chunked+0x2e>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <mg_is_chunked+0x30>
 8005112:	2300      	movs	r3, #0
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	08013f14 	.word	0x08013f14
 8005128:	08013f1c 	.word	0x08013f1c

0800512c <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b095      	sub	sp, #84	; 0x54
 8005130:	af00      	add	r7, sp, #0
 8005132:	6178      	str	r0, [r7, #20]
 8005134:	6139      	str	r1, [r7, #16]
 8005136:	60fa      	str	r2, [r7, #12]
 8005138:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005146:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800515a:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	643b      	str	r3, [r7, #64]	; 0x40
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 8005164:	2300      	movs	r3, #0
 8005166:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 800516a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800516c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516e:	429a      	cmp	r2, r3
 8005170:	d851      	bhi.n	8005216 <deliver_chunked_chunks+0xea>
 8005172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
 800517a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800517c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517e:	4413      	add	r3, r2
 8005180:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005182:	e048      	b.n	8005216 <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 800518a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800518c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518e:	18d0      	adds	r0, r2, r3
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005194:	4413      	add	r3, r2
 8005196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005198:	4413      	add	r3, r2
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	4619      	mov	r1, r3
 800519e:	f00d f99a 	bl	80124d6 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 80051a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a6:	18d1      	adds	r1, r2, r3
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	68fc      	ldr	r4, [r7, #12]
 80051ac:	463b      	mov	r3, r7
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 fff7 	bl	80071a2 <mg_str_n>
 80051b4:	f504 7304 	add.w	r3, r4, #528	; 0x210
 80051b8:	463a      	mov	r2, r7
 80051ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051be:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	210b      	movs	r1, #11
 80051c6:	6978      	ldr	r0, [r7, #20]
 80051c8:	f7fc fba1 	bl	800190e <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 80051cc:	6a3a      	ldr	r2, [r7, #32]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	441a      	add	r2, r3
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	4413      	add	r3, r2
 80051d6:	3302      	adds	r3, #2
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051de:	4413      	add	r3, r2
 80051e0:	3302      	adds	r3, #2
 80051e2:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e8:	4413      	add	r3, r2
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d008      	beq.n	8005208 <deliver_chunked_chunks+0xdc>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	425b      	negs	r3, r3
 8005202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005204:	4413      	add	r3, r2
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005216:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800521a:	f083 0301 	eor.w	r3, r3, #1
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d016      	beq.n	8005252 <deliver_chunked_chunks+0x126>
 8005224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005228:	18d1      	adds	r1, r2, r3
 800522a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800522c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005234:	4618      	mov	r0, r3
 8005236:	f001 ffb4 	bl	80071a2 <mg_str_n>
 800523a:	f107 031c 	add.w	r3, r7, #28
 800523e:	f107 0220 	add.w	r2, r7, #32
 8005242:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005246:	c903      	ldmia	r1, {r0, r1}
 8005248:	f7ff feee 	bl	8005028 <getchunk>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d198      	bne.n	8005184 <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525c:	4413      	add	r3, r2
 800525e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005260:	4619      	mov	r1, r3
 8005262:	f000 fac1 	bl	80057e8 <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800526a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	4313      	orrs	r3, r2
 8005276:	461a      	mov	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 800527c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005280:	2b00      	cmp	r3, #0
 8005282:	d019      	beq.n	80052b8 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005288:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005290:	441a      	add	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <deliver_chunked_chunks+0x18c>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	3338      	adds	r3, #56	; 0x38
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fa9b 	bl	80057e8 <mg_iobuf_del>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 80052b8:	bf00      	nop
 80052ba:	3754      	adds	r7, #84	; 0x54
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}

080052c0 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b08b      	sub	sp, #44	; 0x2c
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6178      	str	r0, [r7, #20]
 80052c8:	6139      	str	r1, [r7, #16]
 80052ca:	60fa      	str	r2, [r7, #12]
 80052cc:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e0:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	18d1      	adds	r1, r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	68fc      	ldr	r4, [r7, #12]
 80052f4:	463b      	mov	r3, r7
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 ff53 	bl	80071a2 <mg_str_n>
 80052fc:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005300:	463a      	mov	r2, r7
 8005302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005306:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005312:	429a      	cmp	r2, r3
 8005314:	d812      	bhi.n	800533c <deliver_normal_chunks+0x7c>
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10f      	bne.n	800533c <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1ad2      	subs	r2, r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	441a      	add	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005344:	429a      	cmp	r2, r3
 8005346:	d805      	bhi.n	8005354 <deliver_normal_chunks+0x94>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	e000      	b.n	8005356 <deliver_normal_chunks+0x96>
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	429a      	cmp	r2, r3
 8005362:	d203      	bcs.n	800536c <deliver_normal_chunks+0xac>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <deliver_normal_chunks+0xc0>
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	210b      	movs	r1, #11
 800537a:	6978      	ldr	r0, [r7, #20]
 800537c:	f7fc fac7 	bl	800190e <mg_call>
  processed += hm->chunk.len;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	4413      	add	r3, r2
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005394:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	429a      	cmp	r2, r3
 80053a0:	d31c      	bcc.n	80053dc <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	210b      	movs	r1, #11
 80053ae:	6978      	ldr	r0, [r7, #20]
 80053b0:	f7fc faad 	bl	800190e <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2200      	movs	r2, #0
 80053b8:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <deliver_normal_chunks+0x128>
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <deliver_normal_chunks+0x128>
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	3338      	adds	r3, #56	; 0x38
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fa0a 	bl	80057e8 <mg_iobuf_del>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 80053da:	e005      	b.n	80053e8 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 80053dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	461a      	mov	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80053e8:	bf00      	nop
 80053ea:	372c      	adds	r7, #44	; 0x2c
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd90      	pop	{r4, r7, pc}

080053f0 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	f507 740e 	add.w	r4, r7, #568	; 0x238
 80053fc:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8005400:	6020      	str	r0, [r4, #0]
 8005402:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005406:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 800540a:	6001      	str	r1, [r0, #0]
 800540c:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8005410:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 8005414:	600a      	str	r2, [r1, #0]
 8005416:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800541a:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 800541e:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 8005420:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005424:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b07      	cmp	r3, #7
 800542c:	f000 80e9 	beq.w	8005602 <http_cb+0x212>
 8005430:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005434:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b09      	cmp	r3, #9
 800543c:	f040 80f2 	bne.w	8005624 <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005440:	e0df      	b.n	8005602 <http_cb+0x212>
      bool next = false;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 8005448:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800544c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005454:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005458:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f107 0210 	add.w	r2, r7, #16
 8005464:	4619      	mov	r1, r3
 8005466:	f7fe f875 	bl	8003554 <mg_http_parse>
 800546a:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 800546e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005472:	2b00      	cmp	r3, #0
 8005474:	da17      	bge.n	80054a6 <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 8005476:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800547a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4619      	mov	r1, r3
 8005484:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005488:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005494:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8005498:	460a      	mov	r2, r1
 800549a:	4965      	ldr	r1, [pc, #404]	; (8005630 <http_cb+0x240>)
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f7fc fa59 	bl	8001954 <mg_error>
        break;
 80054a2:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 80054a4:	e0be      	b.n	8005624 <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 80054a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054aa:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80054b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f040 809b 	bne.w	80055f6 <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 80054c0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8098 	beq.w	80055fa <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 80054ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b09      	cmp	r3, #9
 80054d6:	d125      	bne.n	8005524 <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 80054d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054dc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054e4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054e8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80054ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 80054f0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054f4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80054f8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80054fc:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005500:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8005504:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8005508:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800550c:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8005510:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 8005514:	1a8a      	subs	r2, r1, r2
 8005516:	1a9a      	subs	r2, r3, r2
 8005518:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800551c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005520:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 8005524:	f107 0310 	add.w	r3, r7, #16
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fddb 	bl	80050e4 <mg_is_chunked>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 8005534:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005538:	f207 2333 	addw	r3, r7, #563	; 0x233
 800553c:	f107 0210 	add.w	r2, r7, #16
 8005540:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005544:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005548:	6800      	ldr	r0, [r0, #0]
 800554a:	f7ff fdef 	bl	800512c <deliver_chunked_chunks>
 800554e:	e00c      	b.n	800556a <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 8005550:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005554:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005558:	f107 0210 	add.w	r2, r7, #16
 800555c:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005560:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005564:	6800      	ldr	r0, [r0, #0]
 8005566:	f7ff feab 	bl	80052c0 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 800556a:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 800556e:	2b00      	cmp	r3, #0
 8005570:	d000      	beq.n	8005574 <http_cb+0x184>
 8005572:	e046      	b.n	8005602 <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 8005574:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005578:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005580:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005584:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005588:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800558c:	429a      	cmp	r2, r3
 800558e:	d336      	bcc.n	80055fe <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8005590:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005594:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <http_cb+0x1ce>
 80055a8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055ac:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80055b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ba:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80055be:	f107 0210 	add.w	r2, r7, #16
 80055c2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055c6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80055ca:	210a      	movs	r1, #10
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	f7fc f99e 	bl	800190e <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 80055d2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055d6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80055e0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055e4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80055e8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055ec:	461a      	mov	r2, r3
 80055ee:	2100      	movs	r1, #0
 80055f0:	f000 f8fa 	bl	80057e8 <mg_iobuf_del>
 80055f4:	e005      	b.n	8005602 <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 80055f6:	bf00      	nop
 80055f8:	e014      	b.n	8005624 <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 80055fa:	bf00      	nop
 80055fc:	e012      	b.n	8005624 <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 80055fe:	bf00      	nop
}
 8005600:	e010      	b.n	8005624 <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005602:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005606:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	2b00      	cmp	r3, #0
 8005610:	d008      	beq.n	8005624 <http_cb+0x234>
 8005612:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005616:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	f47f af0f 	bne.w	8005442 <http_cb+0x52>
}
 8005624:	bf00      	nop
 8005626:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 800562a:	46bd      	mov	sp, r7
 800562c:	bd90      	pop	{r4, r7, pc}
 800562e:	bf00      	nop
 8005630:	08013f30 	.word	0x08013f30

08005634 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f001 f8cb 	bl	80067e4 <mg_listen>
 800564e:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <mg_http_listen+0x28>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4a03      	ldr	r2, [pc, #12]	; (8005668 <mg_http_listen+0x34>)
 800565a:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 800565c:	697b      	ldr	r3, [r7, #20]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	080053f1 	.word	0x080053f1

0800566c <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <zeromem+0x26>
    while (len--) *buf++ = 0;
 800567c:	e004      	b.n	8005688 <zeromem+0x1c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	1e5a      	subs	r2, r3, #1
 800568c:	603a      	str	r2, [r7, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f5      	bne.n	800567e <zeromem+0x12>
  }
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <roundup>:

static size_t roundup(size_t size, size_t align) {
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <roundup+0x26>
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4413      	add	r3, r2
 80056b4:	1e5a      	subs	r2, r3, #1
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	e000      	b.n	80056c6 <roundup+0x28>
 80056c4:	687b      	ldr	r3, [r7, #4]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 80056d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056d8:	b088      	sub	sp, #32
 80056da:	af02      	add	r7, sp, #8
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  int ok = 1;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6838      	ldr	r0, [r7, #0]
 80056ec:	f7ff ffd7 	bl	800569e <roundup>
 80056f0:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d117      	bne.n	8005728 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7ff ffb2 	bl	800566c <zeromem>
    free(io->buf);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f00c fc45 	bl	8011f9c <free>
    io->buf = NULL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]
 8005726:	e052      	b.n	80057ce <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d04d      	beq.n	80057ce <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	2001      	movs	r0, #1
 8005736:	f00c fc0b 	bl	8011f50 <calloc>
 800573a:	4603      	mov	r3, r0
 800573c:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d028      	beq.n	8005796 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	4293      	cmp	r3, r2
 800574c:	bf28      	it	cs
 800574e:	4613      	movcs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <mg_iobuf_resize+0x9a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d006      	beq.n	800576e <mg_iobuf_resize+0x9a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4619      	mov	r1, r3
 8005768:	6938      	ldr	r0, [r7, #16]
 800576a:	f00c feb4 	bl	80124d6 <memmove>
      zeromem(io->buf, io->size);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7ff ff77 	bl	800566c <zeromem>
      free(io->buf);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f00c fc0a 	bl	8011f9c <free>
      io->buf = (unsigned char *) p;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	e01b      	b.n	80057ce <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <mg_iobuf_resize+0x108>)
 800579c:	f640 1255 	movw	r2, #2389	; 0x955
 80057a0:	490f      	ldr	r1, [pc, #60]	; (80057e0 <mg_iobuf_resize+0x10c>)
 80057a2:	2001      	movs	r0, #1
 80057a4:	f000 fe18 	bl	80063d8 <mg_log_prefix>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00f      	beq.n	80057ce <mg_iobuf_resize+0xfa>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	4698      	mov	r8, r3
 80057b6:	4691      	mov	r9, r2
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	461c      	mov	r4, r3
 80057be:	4615      	mov	r5, r2
 80057c0:	e9cd 4500 	strd	r4, r5, [sp]
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	4806      	ldr	r0, [pc, #24]	; (80057e4 <mg_iobuf_resize+0x110>)
 80057ca:	f000 fe5f 	bl	800648c <mg_log>
    }
  }
  return ok;
 80057ce:	697b      	ldr	r3, [r7, #20]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057da:	bf00      	nop
 80057dc:	08014c8c 	.word	0x08014c8c
 80057e0:	08013374 	.word	0x08013374
 80057e4:	08013f7c 	.word	0x08013f7c

080057e8 <mg_iobuf_del>:
  if (ofs > io->len) io->len += ofs - io->len;
  io->len += len;
  return len;
}

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d902      	bls.n	8005804 <mg_iobuf_del+0x1c>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	d904      	bls.n	800581c <mg_iobuf_del+0x34>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <mg_iobuf_del+0x62>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	18d0      	adds	r0, r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	440b      	add	r3, r1
 8005836:	18d1      	adds	r1, r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	461a      	mov	r2, r3
 8005846:	f00c fe46 	bl	80124d6 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <mg_iobuf_del+0x80>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6899      	ldr	r1, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	1acb      	subs	r3, r1, r3
 800585e:	4413      	add	r3, r2
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff ff02 	bl	800566c <zeromem>
  io->len -= len;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
  return len;
 8005874:	687b      	ldr	r3, [r7, #4]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8005886:	2100      	movs	r1, #0
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ff23 	bl	80056d4 <mg_iobuf_resize>
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <escapeseq+0x12>
 80058a6:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <escapeseq+0x20>)
 80058a8:	e000      	b.n	80058ac <escapeseq+0x14>
 80058aa:	4b04      	ldr	r3, [pc, #16]	; (80058bc <escapeseq+0x24>)
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	08013f88 	.word	0x08013f88
 80058bc:	08013f90 	.word	0x08013f90

080058c0 <json_esc>:

static char json_esc(int c, int esc) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 80058ca:	6838      	ldr	r0, [r7, #0]
 80058cc:	f7ff ffe4 	bl	8005898 <escapeseq>
 80058d0:	6138      	str	r0, [r7, #16]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ffda 	bl	8005898 <escapeseq>
 80058e4:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e010      	b.n	800590e <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d107      	bne.n	8005908 <json_esc+0x48>
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	e007      	b.n	8005918 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3301      	adds	r3, #1
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1ea      	bne.n	80058ec <json_esc+0x2c>
  }
  return 0;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e02e      	b.n	800598e <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b5c      	cmp	r3, #92	; 0x5c
 800593a:	d114      	bne.n	8005966 <mg_pass_string+0x46>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3301      	adds	r3, #1
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	dd0f      	ble.n	8005966 <mg_pass_string+0x46>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2101      	movs	r1, #1
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ffb4 	bl	80058c0 <json_esc>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <mg_pass_string+0x46>
      i++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e010      	b.n	8005988 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 8005972:	f06f 0301 	mvn.w	r3, #1
 8005976:	e010      	b.n	800599a <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b22      	cmp	r3, #34	; 0x22
 8005982:	d101      	bne.n	8005988 <mg_pass_string+0x68>
      return i;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	e008      	b.n	800599a <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	dbcc      	blt.n	8005930 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 8005996:	f06f 0301 	mvn.w	r3, #1
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	0000      	movs	r0, r0
 80059a4:	0000      	movs	r0, r0
	...

080059a8 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b090      	sub	sp, #64	; 0x40
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 80059c0:	2300      	movs	r3, #0
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
 80059c4:	2301      	movs	r3, #1
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 80059c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	da0a      	bge.n	80059e6 <mg_atod+0x3e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b2d      	cmp	r3, #45	; 0x2d
 80059d6:	d106      	bne.n	80059e6 <mg_atod+0x3e>
    sign = -1, i++;
 80059d8:	f04f 33ff 	mov.w	r3, #4294967295
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	3301      	adds	r3, #1
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	e00a      	b.n	80059fc <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 80059e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	da27      	bge.n	8005a3e <mg_atod+0x96>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b2b      	cmp	r3, #43	; 0x2b
 80059f4:	d123      	bne.n	8005a3e <mg_atod+0x96>
    i++;
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	3301      	adds	r3, #1
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80059fc:	e01f      	b.n	8005a3e <mg_atod+0x96>
    d *= 10.0;
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	4b9d      	ldr	r3, [pc, #628]	; (8005c78 <mg_atod+0x2d0>)
 8005a04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a08:	f7fa fe26 	bl	8000658 <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    d += p[i] - '0';
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	3b30      	subs	r3, #48	; 0x30
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fa fdb0 	bl	8000584 <__aeabi_i2d>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a2c:	f7fa fc5e 	bl	80002ec <__adddf3>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	da0b      	bge.n	8005a5e <mg_atod+0xb6>
 8005a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b2f      	cmp	r3, #47	; 0x2f
 8005a50:	d905      	bls.n	8005a5e <mg_atod+0xb6>
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b39      	cmp	r3, #57	; 0x39
 8005a5c:	d9cf      	bls.n	80059fe <mg_atod+0x56>
  }
  d *= sign;
 8005a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a60:	f7fa fd90 	bl	8000584 <__aeabi_i2d>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a6c:	f7fa fdf4 	bl	8000658 <__aeabi_dmul>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8005a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	da59      	bge.n	8005b34 <mg_atod+0x18c>
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b2e      	cmp	r3, #46	; 0x2e
 8005a8a:	d153      	bne.n	8005b34 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005a98:	a375      	add	r3, pc, #468	; (adr r3, 8005c70 <mg_atod+0x2c8>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005aa8:	e023      	b.n	8005af2 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	3b30      	subs	r3, #48	; 0x30
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fd65 	bl	8000584 <__aeabi_i2d>
 8005aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005abe:	f7fa fdcb 	bl	8000658 <__aeabi_dmul>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005aca:	f7fa fc0f 	bl	80002ec <__adddf3>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      base /= 10.0;
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <mg_atod+0x2d0>)
 8005adc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005ae0:	f7fa fee4 	bl	80008ac <__aeabi_ddiv>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	3301      	adds	r3, #1
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
 8005af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	da0b      	bge.n	8005b12 <mg_atod+0x16a>
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b2f      	cmp	r3, #47	; 0x2f
 8005b04:	d905      	bls.n	8005b12 <mg_atod+0x16a>
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b39      	cmp	r3, #57	; 0x39
 8005b10:	d9cb      	bls.n	8005aaa <mg_atod+0x102>
    }
    d += frac * sign;
 8005b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b14:	f7fa fd36 	bl	8000584 <__aeabi_i2d>
 8005b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b1c:	f7fa fd9c 	bl	8000658 <__aeabi_dmul>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b28:	f7fa fbe0 	bl	80002ec <__adddf3>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8005b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	f280 8085 	bge.w	8005c48 <mg_atod+0x2a0>
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b65      	cmp	r3, #101	; 0x65
 8005b48:	d005      	beq.n	8005b56 <mg_atod+0x1ae>
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b45      	cmp	r3, #69	; 0x45
 8005b54:	d178      	bne.n	8005c48 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
    i++;
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	3301      	adds	r3, #1
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 8005b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	da0a      	bge.n	8005b82 <mg_atod+0x1da>
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b2d      	cmp	r3, #45	; 0x2d
 8005b76:	d104      	bne.n	8005b82 <mg_atod+0x1da>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	3301      	adds	r3, #1
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8005b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	da19      	bge.n	8005bbe <mg_atod+0x216>
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b2b      	cmp	r3, #43	; 0x2b
 8005b94:	d113      	bne.n	8005bbe <mg_atod+0x216>
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	3301      	adds	r3, #1
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005b9c:	e00f      	b.n	8005bbe <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	637a      	str	r2, [r7, #52]	; 0x34
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	3b30      	subs	r3, #48	; 0x30
 8005bba:	440b      	add	r3, r1
 8005bbc:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	da0f      	bge.n	8005be6 <mg_atod+0x23e>
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b2f      	cmp	r3, #47	; 0x2f
 8005bd0:	d909      	bls.n	8005be6 <mg_atod+0x23e>
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b39      	cmp	r3, #57	; 0x39
 8005bdc:	d803      	bhi.n	8005be6 <mg_atod+0x23e>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005be4:	dbdb      	blt.n	8005b9e <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <mg_atod+0x24a>
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	425b      	negs	r3, r3
 8005bf0:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	e00d      	b.n	8005c14 <mg_atod+0x26c>
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <mg_atod+0x2d0>)
 8005bfe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005c02:	f7fa fd29 	bl	8000658 <__aeabi_dmul>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	3301      	adds	r3, #1
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	dbed      	blt.n	8005bf8 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e00d      	b.n	8005c3e <mg_atod+0x296>
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <mg_atod+0x2d0>)
 8005c28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005c2c:	f7fa fe3e 	bl	80008ac <__aeabi_ddiv>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	425b      	negs	r3, r3
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	dbec      	blt.n	8005c22 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <mg_atod+0x2ac>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c52:	601a      	str	r2, [r3, #0]
  return d;
 8005c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c58:	ec43 2b17 	vmov	d7, r2, r3
}
 8005c5c:	eeb0 0a47 	vmov.f32	s0, s14
 8005c60:	eef0 0a67 	vmov.f32	s1, s15
 8005c64:	3740      	adds	r7, #64	; 0x40
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w
 8005c70:	9999999a 	.word	0x9999999a
 8005c74:	3fb99999 	.word	0x3fb99999
 8005c78:	40240000 	.word	0x40240000

08005c7c <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8005c7c:	b590      	push	{r4, r7, lr}
 8005c7e:	b09b      	sub	sp, #108	; 0x6c
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	f107 0408 	add.w	r4, r7, #8
 8005c86:	e884 0003 	stmia.w	r4, {r0, r1}
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 8005ca8:	2300      	movs	r3, #0
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 8005cac:	2301      	movs	r3, #1
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cba:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <mg_json_get+0x4c>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b24      	cmp	r3, #36	; 0x24
 8005cce:	d002      	beq.n	8005cd6 <mg_json_get+0x5a>
 8005cd0:	f06f 0301 	mvn.w	r3, #1
 8005cd4:	e2e2      	b.n	800629c <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cda:	e2d8      	b.n	800628e <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 8005cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce0:	4413      	add	r3, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8005ce8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	f000 82c8 	beq.w	8006282 <mg_json_get+0x606>
 8005cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	f000 82c3 	beq.w	8006282 <mg_json_get+0x606>
 8005cfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d00:	2b0a      	cmp	r3, #10
 8005d02:	f000 82be 	beq.w	8006282 <mg_json_get+0x606>
 8005d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d0a:	2b0d      	cmp	r3, #13
 8005d0c:	f000 82b9 	beq.w	8006282 <mg_json_get+0x606>
    switch (expecting) {
 8005d10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	f200 82b7 	bhi.w	8006288 <mg_json_get+0x60c>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <mg_json_get+0xa4>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08006019 	.word	0x08006019
 8005d28:	080061a3 	.word	0x080061a3
 8005d2c:	080061b9 	.word	0x080061b9
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8005d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d101      	bne.n	8005d3c <mg_json_get+0xc0>
 8005d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 8005d3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d40:	2b7b      	cmp	r3, #123	; 0x7b
 8005d42:	d12b      	bne.n	8005d9c <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d46:	2b1d      	cmp	r3, #29
 8005d48:	dd02      	ble.n	8005d50 <mg_json_get+0xd4>
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	e2a5      	b.n	800629c <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8005d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d114      	bne.n	8005d82 <mg_json_get+0x106>
 8005d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b2e      	cmp	r3, #46	; 0x2e
 8005d62:	d10e      	bne.n	8005d82 <mg_json_get+0x106>
 8005d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d10a      	bne.n	8005d82 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6e:	3301      	adds	r3, #1
 8005d70:	657b      	str	r3, [r7, #84]	; 0x54
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	3301      	adds	r3, #1
 8005d76:	653b      	str	r3, [r7, #80]	; 0x50
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8005d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d88:	3368      	adds	r3, #104	; 0x68
 8005d8a:	443b      	add	r3, r7
 8005d8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005d90:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8005d9a:	e275      	b.n	8006288 <mg_json_get+0x60c>
        } else if (c == '[') {
 8005d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005da0:	2b5b      	cmp	r3, #91	; 0x5b
 8005da2:	d14e      	bne.n	8005e42 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005da6:	2b1d      	cmp	r3, #29
 8005da8:	dd02      	ble.n	8005db0 <mg_json_get+0x134>
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	e275      	b.n	800629c <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8005db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d13a      	bne.n	8005e2e <mg_json_get+0x1b2>
 8005db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b5b      	cmp	r3, #91	; 0x5b
 8005dc2:	d134      	bne.n	8005e2e <mg_json_get+0x1b2>
 8005dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d130      	bne.n	8005e2e <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8005dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dce:	3301      	adds	r3, #1
 8005dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd8:	2300      	movs	r3, #0
 8005dda:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005ddc:	2300      	movs	r3, #0
 8005dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de0:	e010      	b.n	8005e04 <mg_json_get+0x188>
              ei *= 10;
 8005de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 8005dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	3b30      	subs	r3, #48	; 0x30
 8005df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dfa:	4413      	add	r3, r2
 8005dfc:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e00:	3301      	adds	r3, #1
 8005e02:	653b      	str	r3, [r7, #80]	; 0x50
 8005e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4413      	add	r3, r2
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b5d      	cmp	r3, #93	; 0x5d
 8005e0e:	d005      	beq.n	8005e1c <mg_json_get+0x1a0>
 8005e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e2      	bne.n	8005de2 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8005e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <mg_json_get+0x1b2>
 8005e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 8005e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e34:	3368      	adds	r3, #104	; 0x68
 8005e36:	443b      	add	r3, r7
 8005e38:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005e3c:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8005e40:	e222      	b.n	8006288 <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 8005e42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e46:	2b5d      	cmp	r3, #93	; 0x5d
 8005e48:	d13a      	bne.n	8005ec0 <mg_json_get+0x244>
 8005e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dd37      	ble.n	8005ec0 <mg_json_get+0x244>
          MG_EOO(']');
 8005e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d106      	bne.n	8005e66 <mg_json_get+0x1ea>
 8005e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d002      	beq.n	8005e66 <mg_json_get+0x1ea>
 8005e60:	f06f 0302 	mvn.w	r3, #2
 8005e64:	e21a      	b.n	800629c <mg_json_get+0x620>
 8005e66:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	3368      	adds	r3, #104	; 0x68
 8005e70:	443b      	add	r3, r7
 8005e72:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005e76:	3302      	adds	r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d002      	beq.n	8005e82 <mg_json_get+0x206>
 8005e7c:	f06f 0301 	mvn.w	r3, #1
 8005e80:	e20c      	b.n	800629c <mg_json_get+0x620>
 8005e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e84:	3b01      	subs	r3, #1
 8005e86:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	f040 809c 	bne.w	8005fca <mg_json_get+0x34e>
 8005e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4413      	add	r3, r2
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 8095 	bne.w	8005fca <mg_json_get+0x34e>
 8005ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	f040 8090 	bne.w	8005fca <mg_json_get+0x34e>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <mg_json_get+0x240>
 8005eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ebe:	e1ed      	b.n	800629c <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8005ec0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ec4:	2b74      	cmp	r3, #116	; 0x74
 8005ec6:	d113      	bne.n	8005ef0 <mg_json_get+0x274>
 8005ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eca:	3303      	adds	r3, #3
 8005ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	dd0e      	ble.n	8005ef0 <mg_json_get+0x274>
 8005ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed6:	4413      	add	r3, r2
 8005ed8:	2204      	movs	r2, #4
 8005eda:	4998      	ldr	r1, [pc, #608]	; (800613c <mg_json_get+0x4c0>)
 8005edc:	4618      	mov	r0, r3
 8005ede:	f00c faea 	bl	80124b6 <memcmp>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <mg_json_get+0x274>
          i += 3;
 8005ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eea:	3303      	adds	r3, #3
 8005eec:	663b      	str	r3, [r7, #96]	; 0x60
 8005eee:	e06c      	b.n	8005fca <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8005ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ef4:	2b6e      	cmp	r3, #110	; 0x6e
 8005ef6:	d113      	bne.n	8005f20 <mg_json_get+0x2a4>
 8005ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efa:	3303      	adds	r3, #3
 8005efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005efe:	429a      	cmp	r2, r3
 8005f00:	dd0e      	ble.n	8005f20 <mg_json_get+0x2a4>
 8005f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f06:	4413      	add	r3, r2
 8005f08:	2204      	movs	r2, #4
 8005f0a:	498d      	ldr	r1, [pc, #564]	; (8006140 <mg_json_get+0x4c4>)
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f00c fad2 	bl	80124b6 <memcmp>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <mg_json_get+0x2a4>
          i += 3;
 8005f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1a:	3303      	adds	r3, #3
 8005f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f1e:	e054      	b.n	8005fca <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8005f20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f24:	2b66      	cmp	r3, #102	; 0x66
 8005f26:	d113      	bne.n	8005f50 <mg_json_get+0x2d4>
 8005f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	dd0e      	ble.n	8005f50 <mg_json_get+0x2d4>
 8005f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f36:	4413      	add	r3, r2
 8005f38:	2205      	movs	r2, #5
 8005f3a:	4982      	ldr	r1, [pc, #520]	; (8006144 <mg_json_get+0x4c8>)
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f00c faba 	bl	80124b6 <memcmp>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d103      	bne.n	8005f50 <mg_json_get+0x2d4>
          i += 4;
 8005f48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4e:	e03c      	b.n	8005fca <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005f50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f54:	2b2d      	cmp	r3, #45	; 0x2d
 8005f56:	d007      	beq.n	8005f68 <mg_json_get+0x2ec>
 8005f58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f5e:	d916      	bls.n	8005f8e <mg_json_get+0x312>
 8005f60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f64:	2b39      	cmp	r3, #57	; 0x39
 8005f66:	d812      	bhi.n	8005f8e <mg_json_get+0x312>
          int numlen = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8005f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f70:	18d0      	adds	r0, r2, r3
 8005f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	f107 0210 	add.w	r2, r7, #16
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f7ff fd13 	bl	80059a8 <mg_atod>
          i += numlen - 1;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f88:	4413      	add	r3, r2
 8005f8a:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005f8c:	e01d      	b.n	8005fca <mg_json_get+0x34e>
        } else if (c == '"') {
 8005f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f92:	2b22      	cmp	r3, #34	; 0x22
 8005f94:	d116      	bne.n	8005fc4 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8005f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f98:	3301      	adds	r3, #1
 8005f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f9c:	18d0      	adds	r0, r2, r3
 8005f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f7ff fcba 	bl	8005920 <mg_pass_string>
 8005fac:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 8005fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	da01      	bge.n	8005fb8 <mg_json_get+0x33c>
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb6:	e171      	b.n	800629c <mg_json_get+0x620>
          i += n + 1;
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	3301      	adds	r3, #1
 8005fbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fbe:	4413      	add	r3, r2
 8005fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc2:	e002      	b.n	8005fca <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8005fc4:	f06f 0301 	mvn.w	r3, #1
 8005fc8:	e168      	b.n	800629c <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 8005fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d114      	bne.n	8005ffc <mg_json_get+0x380>
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10e      	bne.n	8005ffc <mg_json_get+0x380>
 8005fde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d10a      	bne.n	8005ffc <mg_json_get+0x380>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <mg_json_get+0x37c>
 8005fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ffa:	e14f      	b.n	800629c <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 8005ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006000:	429a      	cmp	r2, r3
 8006002:	d105      	bne.n	8006010 <mg_json_get+0x394>
 8006004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006006:	2b00      	cmp	r3, #0
 8006008:	db02      	blt.n	8006010 <mg_json_get+0x394>
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	3301      	adds	r3, #1
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8006010:	2303      	movs	r3, #3
 8006012:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 8006016:	e137      	b.n	8006288 <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 8006018:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800601c:	2b22      	cmp	r3, #34	; 0x22
 800601e:	d170      	bne.n	8006102 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006022:	3301      	adds	r3, #1
 8006024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006026:	18d0      	adds	r0, r2, r3
 8006028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800602a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	4619      	mov	r1, r3
 8006032:	f7ff fc75 	bl	8005920 <mg_pass_string>
 8006036:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	2b00      	cmp	r3, #0
 800603c:	da01      	bge.n	8006042 <mg_json_get+0x3c6>
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	e12c      	b.n	800629c <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8006042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	4413      	add	r3, r2
 800604a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800604c:	429a      	cmp	r2, r3
 800604e:	dc02      	bgt.n	8006056 <mg_json_get+0x3da>
 8006050:	f06f 0302 	mvn.w	r3, #2
 8006054:	e122      	b.n	800629c <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8006056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605a:	429a      	cmp	r2, r3
 800605c:	da02      	bge.n	8006064 <mg_json_get+0x3e8>
 800605e:	f06f 0302 	mvn.w	r3, #2
 8006062:	e11b      	b.n	800629c <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8006064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006068:	429a      	cmp	r2, r3
 800606a:	d109      	bne.n	8006080 <mg_json_get+0x404>
 800606c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606e:	3b01      	subs	r3, #1
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	4413      	add	r3, r2
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b2e      	cmp	r3, #46	; 0x2e
 8006078:	d002      	beq.n	8006080 <mg_json_get+0x404>
 800607a:	f06f 0302 	mvn.w	r3, #2
 800607e:	e10d      	b.n	800629c <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8006080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006084:	429a      	cmp	r2, r3
 8006086:	d133      	bne.n	80060f0 <mg_json_get+0x474>
 8006088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608a:	3b01      	subs	r3, #1
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4413      	add	r3, r2
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b2e      	cmp	r3, #46	; 0x2e
 8006094:	d12c      	bne.n	80060f0 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006098:	3301      	adds	r3, #1
 800609a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800609c:	18d0      	adds	r0, r2, r3
 800609e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a6:	4619      	mov	r1, r3
 80060a8:	f00c fa44 	bl	8012534 <strncmp>
 80060ac:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d11e      	bne.n	80060f0 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80060b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	4413      	add	r3, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d011      	beq.n	80060e8 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80060c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	4413      	add	r3, r2
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b2e      	cmp	r3, #46	; 0x2e
 80060d4:	d008      	beq.n	80060e8 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 80060d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	4413      	add	r3, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 80060e4:	2b5b      	cmp	r3, #91	; 0x5b
 80060e6:	d103      	bne.n	80060f0 <mg_json_get+0x474>
            pos += n;
 80060e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	4413      	add	r3, r2
 80060ee:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	3301      	adds	r3, #1
 80060f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060f6:	4413      	add	r3, r2
 80060f8:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 80060fa:	2302      	movs	r3, #2
 80060fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006100:	e0c1      	b.n	8006286 <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 8006102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006106:	2b7d      	cmp	r3, #125	; 0x7d
 8006108:	d148      	bne.n	800619c <mg_json_get+0x520>
          MG_EOO('}');
 800610a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800610c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610e:	429a      	cmp	r2, r3
 8006110:	d106      	bne.n	8006120 <mg_json_get+0x4a4>
 8006112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006116:	429a      	cmp	r2, r3
 8006118:	d002      	beq.n	8006120 <mg_json_get+0x4a4>
 800611a:	f06f 0302 	mvn.w	r3, #2
 800611e:	e0bd      	b.n	800629c <mg_json_get+0x620>
 8006120:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006126:	3b01      	subs	r3, #1
 8006128:	3368      	adds	r3, #104	; 0x68
 800612a:	443b      	add	r3, r7
 800612c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006130:	3302      	adds	r3, #2
 8006132:	429a      	cmp	r2, r3
 8006134:	d008      	beq.n	8006148 <mg_json_get+0x4cc>
 8006136:	f06f 0301 	mvn.w	r3, #1
 800613a:	e0af      	b.n	800629c <mg_json_get+0x620>
 800613c:	08013f98 	.word	0x08013f98
 8006140:	08013fa0 	.word	0x08013fa0
 8006144:	08013fa8 	.word	0x08013fa8
 8006148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800614a:	3b01      	subs	r3, #1
 800614c:	65bb      	str	r3, [r7, #88]	; 0x58
 800614e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006152:	429a      	cmp	r2, r3
 8006154:	d114      	bne.n	8006180 <mg_json_get+0x504>
 8006156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10e      	bne.n	8006180 <mg_json_get+0x504>
 8006162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	429a      	cmp	r2, r3
 8006168:	d10a      	bne.n	8006180 <mg_json_get+0x504>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <mg_json_get+0x500>
 8006170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800617e:	e08d      	b.n	800629c <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 8006180:	2303      	movs	r3, #3
 8006182:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 8006186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618a:	429a      	cmp	r2, r3
 800618c:	d17b      	bne.n	8006286 <mg_json_get+0x60a>
 800618e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006190:	2b00      	cmp	r3, #0
 8006192:	db78      	blt.n	8006286 <mg_json_get+0x60a>
 8006194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006196:	3301      	adds	r3, #1
 8006198:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 800619a:	e074      	b.n	8006286 <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 800619c:	f06f 0301 	mvn.w	r3, #1
 80061a0:	e07c      	b.n	800629c <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 80061a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061a6:	2b3a      	cmp	r3, #58	; 0x3a
 80061a8:	d103      	bne.n	80061b2 <mg_json_get+0x536>
          expecting = S_VALUE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 80061b0:	e06a      	b.n	8006288 <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 80061b2:	f06f 0301 	mvn.w	r3, #1
 80061b6:	e071      	b.n	800629c <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 80061b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dc02      	bgt.n	80061c4 <mg_json_get+0x548>
          return MG_JSON_INVALID;
 80061be:	f06f 0301 	mvn.w	r3, #1
 80061c2:	e06b      	b.n	800629c <mg_json_get+0x620>
        } else if (c == ',') {
 80061c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061c8:	2b2c      	cmp	r3, #44	; 0x2c
 80061ca:	d10d      	bne.n	80061e8 <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 80061cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ce:	3b01      	subs	r3, #1
 80061d0:	3368      	adds	r3, #104	; 0x68
 80061d2:	443b      	add	r3, r7
 80061d4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80061d8:	2b7b      	cmp	r3, #123	; 0x7b
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 80061e6:	e04f      	b.n	8006288 <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 80061e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061ec:	2b5d      	cmp	r3, #93	; 0x5d
 80061ee:	d003      	beq.n	80061f8 <mg_json_get+0x57c>
 80061f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061f4:	2b7d      	cmp	r3, #125	; 0x7d
 80061f6:	d13f      	bne.n	8006278 <mg_json_get+0x5fc>
          MG_EOO('O');
 80061f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d106      	bne.n	800620e <mg_json_get+0x592>
 8006200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006204:	429a      	cmp	r2, r3
 8006206:	d002      	beq.n	800620e <mg_json_get+0x592>
 8006208:	f06f 0302 	mvn.w	r3, #2
 800620c:	e046      	b.n	800629c <mg_json_get+0x620>
 800620e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006214:	3b01      	subs	r3, #1
 8006216:	3368      	adds	r3, #104	; 0x68
 8006218:	443b      	add	r3, r7
 800621a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800621e:	3302      	adds	r3, #2
 8006220:	429a      	cmp	r2, r3
 8006222:	d002      	beq.n	800622a <mg_json_get+0x5ae>
 8006224:	f06f 0301 	mvn.w	r3, #1
 8006228:	e038      	b.n	800629c <mg_json_get+0x620>
 800622a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800622c:	3b01      	subs	r3, #1
 800622e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006234:	429a      	cmp	r2, r3
 8006236:	d114      	bne.n	8006262 <mg_json_get+0x5e6>
 8006238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10e      	bne.n	8006262 <mg_json_get+0x5e6>
 8006244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006248:	429a      	cmp	r2, r3
 800624a:	d10a      	bne.n	8006262 <mg_json_get+0x5e6>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <mg_json_get+0x5e2>
 8006252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006260:	e01c      	b.n	800629c <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006266:	429a      	cmp	r2, r3
 8006268:	d109      	bne.n	800627e <mg_json_get+0x602>
 800626a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626c:	2b00      	cmp	r3, #0
 800626e:	db06      	blt.n	800627e <mg_json_get+0x602>
 8006270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006272:	3301      	adds	r3, #1
 8006274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006276:	e002      	b.n	800627e <mg_json_get+0x602>
          return MG_JSON_INVALID;
 8006278:	f06f 0301 	mvn.w	r3, #1
 800627c:	e00e      	b.n	800629c <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 800627e:	bf00      	nop
        break;
 8006280:	e002      	b.n	8006288 <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <mg_json_get+0x60c>
        break;
 8006286:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800628a:	3301      	adds	r3, #1
 800628c:	663b      	str	r3, [r7, #96]	; 0x60
 800628e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006292:	429a      	cmp	r2, r3
 8006294:	f6ff ad22 	blt.w	8005cdc <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006298:	f06f 0302 	mvn.w	r3, #2
}
 800629c:	4618      	mov	r0, r3
 800629e:	376c      	adds	r7, #108	; 0x6c
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd90      	pop	{r4, r7, pc}

080062a4 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b089      	sub	sp, #36	; 0x24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	f107 0408 	add.w	r4, r7, #8
 80062ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80062ba:	f107 0314 	add.w	r3, r7, #20
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	f107 0108 	add.w	r1, r7, #8
 80062c4:	c903      	ldmia	r1, {r0, r1}
 80062c6:	f7ff fcd9 	bl	8005c7c <mg_json_get>
 80062ca:	61b8      	str	r0, [r7, #24]
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db25      	blt.n	800631e <mg_json_get_num+0x7a>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	4413      	add	r3, r2
 80062d8:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80062da:	2b2d      	cmp	r3, #45	; 0x2d
 80062dc:	d00b      	beq.n	80062f6 <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b2f      	cmp	r3, #47	; 0x2f
 80062e8:	d919      	bls.n	800631e <mg_json_get_num+0x7a>
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	4413      	add	r3, r2
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b39      	cmp	r3, #57	; 0x39
 80062f4:	d813      	bhi.n	800631e <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <mg_json_get_num+0x76>
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	4413      	add	r3, r2
 8006302:	6979      	ldr	r1, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fb4e 	bl	80059a8 <mg_atod>
 800630c:	eeb0 7a40 	vmov.f32	s14, s0
 8006310:	eef0 7a60 	vmov.f32	s15, s1
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800631a:	2301      	movs	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf14      	ite	ne
 8006324:	2301      	movne	r3, #1
 8006326:	2300      	moveq	r3, #0
 8006328:	b2db      	uxtb	r3, r3
}
 800632a:	4618      	mov	r0, r3
 800632c:	3724      	adds	r7, #36	; 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd90      	pop	{r4, r7, pc}
	...

08006334 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <logc+0x20>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a05      	ldr	r2, [pc, #20]	; (8006358 <logc+0x24>)
 8006344:	6811      	ldr	r1, [r2, #0]
 8006346:	79fa      	ldrb	r2, [r7, #7]
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	2000023c 	.word	0x2000023c
 8006358:	20000620 	.word	0x20000620

0800635c <logs>:

static void logs(const char *buf, size_t len) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e009      	b.n	8006380 <logs+0x24>
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff ffdd 	bl	8006334 <logc>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d3f1      	bcc.n	800636c <logs+0x10>
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <mg_log_set>:

void mg_log_set(int log_level) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <mg_log_set+0x34>)
 800639e:	f640 22c8 	movw	r2, #2760	; 0xac8
 80063a2:	490a      	ldr	r1, [pc, #40]	; (80063cc <mg_log_set+0x38>)
 80063a4:	2003      	movs	r0, #3
 80063a6:	f000 f817 	bl	80063d8 <mg_log_prefix>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <mg_log_set+0x24>
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4807      	ldr	r0, [pc, #28]	; (80063d0 <mg_log_set+0x3c>)
 80063b4:	f000 f86a 	bl	800648c <mg_log>
  s_level = log_level;
 80063b8:	4a06      	ldr	r2, [pc, #24]	; (80063d4 <mg_log_set+0x40>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6013      	str	r3, [r2, #0]
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	08014c9c 	.word	0x08014c9c
 80063cc:	08013374 	.word	0x08013374
 80063d0:	08013fb0 	.word	0x08013fb0
 80063d4:	20000238 	.word	0x20000238

080063d8 <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80063d8:	b590      	push	{r4, r7, lr}
 80063da:	b099      	sub	sp, #100	; 0x64
 80063dc:	af06      	add	r7, sp, #24
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <mg_log_prefix+0xac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	dc43      	bgt.n	8006478 <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 80063f0:	212f      	movs	r1, #47	; 0x2f
 80063f2:	68b8      	ldr	r0, [r7, #8]
 80063f4:	f00c f8b0 	bl	8012558 <strrchr>
 80063f8:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 80063fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d104      	bne.n	800640a <mg_log_prefix+0x32>
 8006400:	215c      	movs	r1, #92	; 0x5c
 8006402:	68b8      	ldr	r0, [r7, #8]
 8006404:	f00c f8a8 	bl	8012558 <strrchr>
 8006408:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800640a:	f001 fd55 	bl	8007eb8 <mg_millis>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006414:	2900      	cmp	r1, #0
 8006416:	d002      	beq.n	800641e <mg_log_prefix+0x46>
 8006418:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800641a:	3101      	adds	r1, #1
 800641c:	e000      	b.n	8006420 <mg_log_prefix+0x48>
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	f107 0414 	add.w	r4, r7, #20
 8006424:	6838      	ldr	r0, [r7, #0]
 8006426:	9005      	str	r0, [sp, #20]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	9004      	str	r0, [sp, #16]
 800642c:	9103      	str	r1, [sp, #12]
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	9102      	str	r1, [sp, #8]
 8006432:	e9cd 2300 	strd	r2, r3, [sp]
 8006436:	4a14      	ldr	r2, [pc, #80]	; (8006488 <mg_log_prefix+0xb0>)
 8006438:	2129      	movs	r1, #41	; 0x29
 800643a:	4620      	mov	r0, r4
 800643c:	f000 fb4a 	bl	8006ad4 <mg_snprintf>
 8006440:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8006442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006444:	2b27      	cmp	r3, #39	; 0x27
 8006446:	d90a      	bls.n	800645e <mg_log_prefix+0x86>
 8006448:	2327      	movs	r3, #39	; 0x27
 800644a:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 800644c:	e007      	b.n	800645e <mg_log_prefix+0x86>
 800644e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	643a      	str	r2, [r7, #64]	; 0x40
 8006454:	3348      	adds	r3, #72	; 0x48
 8006456:	443b      	add	r3, r7
 8006458:	2220      	movs	r2, #32
 800645a:	f803 2c34 	strb.w	r2, [r3, #-52]
 800645e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006460:	2b28      	cmp	r3, #40	; 0x28
 8006462:	d9f4      	bls.n	800644e <mg_log_prefix+0x76>
    logs(buf, n - 1);
 8006464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006466:	1e5a      	subs	r2, r3, #1
 8006468:	f107 0314 	add.w	r3, r7, #20
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff ff74 	bl	800635c <logs>
    return true;
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <mg_log_prefix+0xa2>
  } else {
    return false;
 8006478:	2300      	movs	r3, #0
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	374c      	adds	r7, #76	; 0x4c
 800647e:	46bd      	mov	sp, r7
 8006480:	bd90      	pop	{r4, r7, pc}
 8006482:	bf00      	nop
 8006484:	20000238 	.word	0x20000238
 8006488:	08013fc8 	.word	0x08013fc8

0800648c <mg_log>:

void mg_log(const char *fmt, ...) {
 800648c:	b40f      	push	{r0, r1, r2, r3}
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <mg_log+0x34>)
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <mg_log+0x38>)
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	f7fb ff61 	bl	800236c <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 80064aa:	2102      	movs	r1, #2
 80064ac:	4806      	ldr	r0, [pc, #24]	; (80064c8 <mg_log+0x3c>)
 80064ae:	f7ff ff55 	bl	800635c <logs>
}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064bc:	b004      	add	sp, #16
 80064be:	4770      	bx	lr
 80064c0:	2000023c 	.word	0x2000023c
 80064c4:	20000620 	.word	0x20000620
 80064c8:	0801350c 	.word	0x0801350c

080064cc <nibble>:

static unsigned char nibble(unsigned c) {
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	d804      	bhi.n	80064e4 <nibble+0x18>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	3330      	adds	r3, #48	; 0x30
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	e003      	b.n	80064ec <nibble+0x20>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	3357      	adds	r3, #87	; 0x57
 80064ea:	b2db      	uxtb	r3, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800650c:	2300      	movs	r3, #0
 800650e:	623b      	str	r3, [r7, #32]
 8006510:	e07a      	b.n	8006608 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	2b00      	cmp	r3, #0
 800651a:	d13a      	bne.n	8006592 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00f      	beq.n	8006542 <mg_hexdump+0x4a>
 8006522:	2102      	movs	r1, #2
 8006524:	484c      	ldr	r0, [pc, #304]	; (8006658 <mg_hexdump+0x160>)
 8006526:	f7ff ff19 	bl	800635c <logs>
 800652a:	f107 030c 	add.w	r3, r7, #12
 800652e:	2110      	movs	r1, #16
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff ff13 	bl	800635c <logs>
 8006536:	200a      	movs	r0, #10
 8006538:	f7ff fefc 	bl	8006334 <logc>
 800653c:	2300      	movs	r3, #0
 800653e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	0b1b      	lsrs	r3, r3, #12
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff ffbe 	bl	80064cc <nibble>
 8006550:	4603      	mov	r3, r0
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff feee 	bl	8006334 <logc>
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff ffb3 	bl	80064cc <nibble>
 8006566:	4603      	mov	r3, r0
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fee3 	bl	8006334 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	091b      	lsrs	r3, r3, #4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff ffa8 	bl	80064cc <nibble>
 800657c:	4603      	mov	r3, r0
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fed8 	bl	8006334 <logc>
 8006584:	2030      	movs	r0, #48	; 0x30
 8006586:	f7ff fed5 	bl	8006334 <logc>
 800658a:	2103      	movs	r1, #3
 800658c:	4833      	ldr	r0, [pc, #204]	; (800665c <mg_hexdump+0x164>)
 800658e:	f7ff fee5 	bl	800635c <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	4413      	add	r3, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	b2db      	uxtb	r3, r3
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ff94 	bl	80064cc <nibble>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fec4 	bl	8006334 <logc>
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	4413      	add	r3, r2
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff ff87 	bl	80064cc <nibble>
 80065be:	4603      	mov	r3, r0
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff feb7 	bl	8006334 <logc>
    logc(' ');                                         // Space after hex number
 80065c6:	2020      	movs	r0, #32
 80065c8:	f7ff feb4 	bl	8006334 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	4413      	add	r3, r2
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b1f      	cmp	r3, #31
 80065d6:	d90a      	bls.n	80065ee <mg_hexdump+0xf6>
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	4413      	add	r3, r2
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b7e      	cmp	r3, #126	; 0x7e
 80065e2:	d804      	bhi.n	80065ee <mg_hexdump+0xf6>
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	4413      	add	r3, r2
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	e000      	b.n	80065f0 <mg_hexdump+0xf8>
 80065ee:	222e      	movs	r2, #46	; 0x2e
 80065f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f4:	1c59      	adds	r1, r3, #1
 80065f6:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80065fa:	3328      	adds	r3, #40	; 0x28
 80065fc:	443b      	add	r3, r7
 80065fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	3301      	adds	r3, #1
 8006606:	623b      	str	r3, [r7, #32]
 8006608:	6a3a      	ldr	r2, [r7, #32]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d380      	bcc.n	8006512 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8006610:	e00d      	b.n	800662e <mg_hexdump+0x136>
 8006612:	2103      	movs	r1, #3
 8006614:	4811      	ldr	r0, [pc, #68]	; (800665c <mg_hexdump+0x164>)
 8006616:	f7ff fea1 	bl	800635c <logs>
 800661a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8006624:	3328      	adds	r3, #40	; 0x28
 8006626:	443b      	add	r3, r7
 8006628:	2220      	movs	r2, #32
 800662a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800662e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006632:	2b0f      	cmp	r3, #15
 8006634:	d9ed      	bls.n	8006612 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8006636:	2102      	movs	r1, #2
 8006638:	4807      	ldr	r0, [pc, #28]	; (8006658 <mg_hexdump+0x160>)
 800663a:	f7ff fe8f 	bl	800635c <logs>
 800663e:	f107 030c 	add.w	r3, r7, #12
 8006642:	2110      	movs	r1, #16
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fe89 	bl	800635c <logs>
 800664a:	200a      	movs	r0, #10
 800664c:	f7ff fe72 	bl	8006334 <logc>
}
 8006650:	bf00      	nop
 8006652:	3728      	adds	r7, #40	; 0x28
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	08013fdc 	.word	0x08013fdc
 800665c:	08013fe0 	.word	0x08013fe0

08006660 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006670:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	4805      	ldr	r0, [pc, #20]	; (8006694 <mg_vprintf+0x34>)
 800667e:	f7fb fe75 	bl	800236c <mg_vxprintf>
  return c->send.len - old;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	1ad3      	subs	r3, r2, r3
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	08006a65 	.word	0x08006a65

08006698 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8006698:	b40e      	push	{r1, r2, r3}
 800669a:	b580      	push	{r7, lr}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80066a6:	f107 0320 	add.w	r3, r7, #32
 80066aa:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 80066ac:	f107 0308 	add.w	r3, r7, #8
 80066b0:	461a      	mov	r2, r3
 80066b2:	69f9      	ldr	r1, [r7, #28]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ffd3 	bl	8006660 <mg_vprintf>
 80066ba:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80066bc:	68fb      	ldr	r3, [r7, #12]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066c8:	b003      	add	sp, #12
 80066ca:	4770      	bx	lr

080066cc <mg_alloc_conn>:
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
         mg_aton6(str, addr);
}

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	3390      	adds	r3, #144	; 0x90
 80066da:	4619      	mov	r1, r3
 80066dc:	2001      	movs	r0, #1
 80066de:	f00b fc37 	bl	8011f50 <calloc>
 80066e2:	4603      	mov	r3, r0
 80066e4:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d013      	beq.n	8006714 <mg_alloc_conn+0x48>
    c->mgr = mgr;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	61da      	str	r2, [r3, #28]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 8006714:	68fb      	ldr	r3, [r7, #12]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fb f8d1 	bl	80018d0 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e002      	b.n	800673c <mg_close_conn+0x1c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d1f7      	bne.n	8006736 <mg_close_conn+0x16>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d103      	bne.n	8006762 <mg_close_conn+0x42>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d103      	bne.n	8006776 <mg_close_conn+0x56>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 8006776:	2200      	movs	r2, #0
 8006778:	2109      	movs	r1, #9
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fb f8c7 	bl	800190e <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 8006780:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <mg_close_conn+0xb8>)
 8006782:	f640 626c 	movw	r2, #3692	; 0xe6c
 8006786:	4915      	ldr	r1, [pc, #84]	; (80067dc <mg_close_conn+0xbc>)
 8006788:	2003      	movs	r0, #3
 800678a:	f7ff fe25 	bl	80063d8 <mg_log_prefix>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <mg_close_conn+0x84>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	461a      	mov	r2, r3
 800679e:	4810      	ldr	r0, [pc, #64]	; (80067e0 <mg_close_conn+0xc0>)
 80067a0:	f7ff fe74 	bl	800648c <mg_log>

  mg_tls_free(c);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f9bd 	bl	8007b24 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3338      	adds	r3, #56	; 0x38
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff f865 	bl	800587e <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3348      	adds	r3, #72	; 0x48
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff f860 	bl	800587e <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 80067be:	2290      	movs	r2, #144	; 0x90
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f00b fea1 	bl	801250a <memset>
  free(c);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f00b fbe7 	bl	8011f9c <free>
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	08014ca8 	.word	0x08014ca8
 80067dc:	08013374 	.word	0x08013374
 80067e0:	08014078 	.word	0x08014078

080067e4 <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7ff ff68 	bl	80066cc <mg_alloc_conn>
 80067fc:	6178      	str	r0, [r7, #20]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10e      	bne.n	8006822 <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 8006804:	4b40      	ldr	r3, [pc, #256]	; (8006908 <mg_listen+0x124>)
 8006806:	f640 6292 	movw	r2, #3730	; 0xe92
 800680a:	4940      	ldr	r1, [pc, #256]	; (800690c <mg_listen+0x128>)
 800680c:	2001      	movs	r0, #1
 800680e:	f7ff fde3 	bl	80063d8 <mg_log_prefix>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d071      	beq.n	80068fc <mg_listen+0x118>
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	483d      	ldr	r0, [pc, #244]	; (8006910 <mg_listen+0x12c>)
 800681c:	f7ff fe36 	bl	800648c <mg_log>
 8006820:	e06c      	b.n	80068fc <mg_listen+0x118>
  } else if (!mg_open_listener(c, url)) {
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	6978      	ldr	r0, [r7, #20]
 8006826:	f004 fab1 	bl	800ad8c <mg_open_listener>
 800682a:	4603      	mov	r3, r0
 800682c:	f083 0301 	eor.w	r3, r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8006836:	4b34      	ldr	r3, [pc, #208]	; (8006908 <mg_listen+0x124>)
 8006838:	f640 6294 	movw	r2, #3732	; 0xe94
 800683c:	4933      	ldr	r1, [pc, #204]	; (800690c <mg_listen+0x128>)
 800683e:	2001      	movs	r0, #1
 8006840:	f7ff fdca 	bl	80063d8 <mg_log_prefix>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <mg_listen+0x78>
 800684a:	f00b fef3 	bl	8012634 <__errno>
 800684e:	4603      	mov	r3, r0
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	482f      	ldr	r0, [pc, #188]	; (8006914 <mg_listen+0x130>)
 8006858:	f7ff fe18 	bl	800648c <mg_log>
    free(c);
 800685c:	6978      	ldr	r0, [r7, #20]
 800685e:	f00b fb9d 	bl	8011f9c <free>
    c = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e049      	b.n	80068fc <mg_listen+0x118>
  } else {
    c->is_listening = 1;
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8006876:	2204      	movs	r2, #4
 8006878:	4927      	ldr	r1, [pc, #156]	; (8006918 <mg_listen+0x134>)
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f00b fe5a 	bl	8012534 <strncmp>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2d9      	uxtb	r1, r3
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8006892:	f361 0300 	bfi	r3, r1, #0, #1
 8006896:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 80068b4:	2200      	movs	r2, #0
 80068b6:	2101      	movs	r1, #1
 80068b8:	6978      	ldr	r0, [r7, #20]
 80068ba:	f7fb f828 	bl	800190e <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1; // Accepted connection must
 80068be:	68b8      	ldr	r0, [r7, #8]
 80068c0:	f001 f96c 	bl	8007b9c <mg_url_is_ssl>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d006      	beq.n	80068d8 <mg_listen+0xf4>
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 80068d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d4:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <mg_listen+0x124>)
 80068da:	f640 629f 	movw	r2, #3743	; 0xe9f
 80068de:	490b      	ldr	r1, [pc, #44]	; (800690c <mg_listen+0x128>)
 80068e0:	2003      	movs	r0, #3
 80068e2:	f7ff fd79 	bl	80063d8 <mg_log_prefix>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <mg_listen+0x118>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4809      	ldr	r0, [pc, #36]	; (800691c <mg_listen+0x138>)
 80068f8:	f7ff fdc8 	bl	800648c <mg_log>
  }
  return c;
 80068fc:	697b      	ldr	r3, [r7, #20]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	08014cb8 	.word	0x08014cb8
 800690c:	08013374 	.word	0x08013374
 8006910:	080140a0 	.word	0x080140a0
 8006914:	080140a8 	.word	0x080140a8
 8006918:	08014098 	.word	0x08014098
 800691c:	08013480 	.word	0x08013480

08006920 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af04      	add	r7, sp, #16
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800692c:	2128      	movs	r1, #40	; 0x28
 800692e:	2001      	movs	r0, #1
 8006930:	f00b fb0e 	bl	8011f50 <calloc>
 8006934:	4603      	mov	r3, r0
 8006936:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d014      	beq.n	8006968 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	9302      	str	r3, [sp, #8]
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	9301      	str	r3, [sp, #4]
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006954:	6979      	ldr	r1, [r7, #20]
 8006956:	f000 ffd2 	bl	80078fe <mg_timer_init>
    t->id = mgr->timerid++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	6211      	str	r1, [r2, #32]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	6013      	str	r3, [r2, #0]
  }
  return t;
 8006968:	697b      	ldr	r3, [r7, #20]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800697c:	2244      	movs	r2, #68	; 0x44
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f00b fdc2 	bl	801250a <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f04f 32ff 	mov.w	r2, #4294967295
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006994:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a04      	ldr	r2, [pc, #16]	; (80069ac <mg_mgr_init+0x38>)
 800699a:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a04      	ldr	r2, [pc, #16]	; (80069b0 <mg_mgr_init+0x3c>)
 80069a0:	60da      	str	r2, [r3, #12]
}
 80069a2:	bf00      	nop
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	080140d8 	.word	0x080140d8
 80069b0:	080140ec 	.word	0x080140ec

080069b4 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
 80069c0:	4613      	mov	r3, r2
 80069c2:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80069c8:	79bb      	ldrb	r3, [r7, #6]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00d      	beq.n	80069ea <mg_pfn_iobuf_private+0x36>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d906      	bls.n	80069ea <mg_pfn_iobuf_private+0x36>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	3302      	adds	r3, #2
 80069e2:	4619      	mov	r1, r3
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7fe fe75 	bl	80056d4 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	1c9a      	adds	r2, r3, #2
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d811      	bhi.n	8006a1c <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	1c58      	adds	r0, r3, #1
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	6088      	str	r0, [r1, #8]
 8006a06:	4413      	add	r3, r2
 8006a08:	79fa      	ldrb	r2, [r7, #7]
 8006a0a:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8006a1a:	e00f      	b.n	8006a3c <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d209      	bcs.n	8006a3c <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	1c58      	adds	r0, r3, #1
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	6088      	str	r0, [r1, #8]
 8006a36:	4413      	add	r3, r2
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	6039      	str	r1, [r7, #0]
 8006a4e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	2200      	movs	r2, #0
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff ffac 	bl	80069b4 <mg_pfn_iobuf_private>
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	6039      	str	r1, [r7, #0]
 8006a6e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	2201      	movs	r2, #1
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff ff9c 	bl	80069b4 <mg_pfn_iobuf_private>
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8006aa2:	f107 0114 	add.w	r1, r7, #20
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	4809      	ldr	r0, [pc, #36]	; (8006ad0 <mg_vsnprintf+0x4c>)
 8006aac:	f7fb fc5e 	bl	800236c <mg_vxprintf>
 8006ab0:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d204      	bcs.n	8006ac4 <mg_vsnprintf+0x40>
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	4413      	add	r3, r2
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
  return n;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3728      	adds	r7, #40	; 0x28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	08006a45 	.word	0x08006a45

08006ad4 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8006ad4:	b40c      	push	{r2, r3}
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8006ae0:	f107 031c 	add.w	r3, r7, #28
 8006ae4:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff ffc8 	bl	8006a84 <mg_vsnprintf>
 8006af4:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b02:	b002      	add	sp, #8
 8006b04:	4770      	bx	lr

08006b06 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	6039      	str	r1, [r7, #0]
 8006b10:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f00b fc83 	bl	8012420 <putchar>
  (void) param;
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af04      	add	r7, sp, #16
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3302      	adds	r3, #2
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	4619      	mov	r1, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3303      	adds	r3, #3
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	9101      	str	r1, [sp, #4]
 8006b50:	9200      	str	r2, [sp, #0]
 8006b52:	4603      	mov	r3, r0
 8006b54:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <print_ip4+0x44>)
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7fb fbec 	bl	8002336 <mg_xprintf>
 8006b5e:	4603      	mov	r3, r0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	0801410c 	.word	0x0801410c

08006b6c <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8006b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	b08e      	sub	sp, #56	; 0x38
 8006b72:	af08      	add	r7, sp, #32
 8006b74:	6178      	str	r0, [r7, #20]
 8006b76:	6139      	str	r1, [r7, #16]
 8006b78:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f949 	bl	8007e16 <mg_ntohs>
 8006b84:	4603      	mov	r3, r0
 8006b86:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 f941 	bl	8007e16 <mg_ntohs>
 8006b94:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006b96:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 f939 	bl	8007e16 <mg_ntohs>
 8006ba4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006ba6:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3306      	adds	r3, #6
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 f931 	bl	8007e16 <mg_ntohs>
 8006bb4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006bb6:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 f929 	bl	8007e16 <mg_ntohs>
 8006bc4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006bc6:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	330a      	adds	r3, #10
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 f921 	bl	8007e16 <mg_ntohs>
 8006bd4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006bd6:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 f919 	bl	8007e16 <mg_ntohs>
 8006be4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006be6:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	330e      	adds	r3, #14
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 f911 	bl	8007e16 <mg_ntohs>
 8006bf4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006bf6:	9306      	str	r3, [sp, #24]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	9205      	str	r2, [sp, #20]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	9204      	str	r2, [sp, #16]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	9602      	str	r6, [sp, #8]
 8006c06:	9501      	str	r5, [sp, #4]
 8006c08:	9400      	str	r4, [sp, #0]
 8006c0a:	4643      	mov	r3, r8
 8006c0c:	4a05      	ldr	r2, [pc, #20]	; (8006c24 <print_ip6+0xb8>)
 8006c0e:	6939      	ldr	r1, [r7, #16]
 8006c10:	6978      	ldr	r0, [r7, #20]
 8006c12:	f7fb fb90 	bl	8002336 <mg_xprintf>
 8006c16:	4603      	mov	r3, r0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c22:	bf00      	nop
 8006c24:	08014118 	.word	0x08014118

08006c28 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	1d19      	adds	r1, r3, #4
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff ff6c 	bl	8006b24 <print_ip4>
 8006c4c:	4603      	mov	r3, r0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	1d19      	adds	r1, r3, #4
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6011      	str	r1, [r2, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	7c9b      	ldrb	r3, [r3, #18]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <mg_print_ip+0x32>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff ff74 	bl	8006b6c <print_ip6>
 8006c84:	4603      	mov	r3, r0
 8006c86:	e006      	b.n	8006c96 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff ff48 	bl	8006b24 <print_ip4>
 8006c94:	4603      	mov	r3, r0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	1d19      	adds	r1, r3, #4
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6011      	str	r1, [r2, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	8a1b      	ldrh	r3, [r3, #16]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 f8a9 	bl	8007e16 <mg_ntohs>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <mg_print_ip_port+0x44>)
 8006cce:	4a06      	ldr	r2, [pc, #24]	; (8006ce8 <mg_print_ip_port+0x48>)
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f7fb fb2f 	bl	8002336 <mg_xprintf>
 8006cd8:	4603      	mov	r3, r0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	08006c57 	.word	0x08006c57
 8006ce8:	08014134 	.word	0x08014134

08006cec <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8006cec:	b5b0      	push	{r4, r5, r7, lr}
 8006cee:	b08c      	sub	sp, #48	; 0x30
 8006cf0:	af06      	add	r7, sp, #24
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	1d19      	adds	r1, r3, #4
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6011      	str	r1, [r2, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3302      	adds	r3, #2
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3303      	adds	r3, #3
 8006d20:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d22:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3304      	adds	r3, #4
 8006d28:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d2a:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3305      	adds	r3, #5
 8006d30:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d32:	9304      	str	r3, [sp, #16]
 8006d34:	9403      	str	r4, [sp, #12]
 8006d36:	9002      	str	r0, [sp, #8]
 8006d38:	9101      	str	r1, [sp, #4]
 8006d3a:	9200      	str	r2, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4a05      	ldr	r2, [pc, #20]	; (8006d54 <mg_print_mac+0x68>)
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7fb faf7 	bl	8002336 <mg_xprintf>
 8006d48:	4603      	mov	r3, r0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bdb0      	pop	{r4, r5, r7, pc}
 8006d52:	bf00      	nop
 8006d54:	0801413c 	.word	0x0801413c

08006d58 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8006d64:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <mg_esc+0x74>)
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	4b19      	ldr	r3, [pc, #100]	; (8006dd0 <mg_esc+0x78>)
 8006d6a:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <mg_esc+0x1e>
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	e000      	b.n	8006d78 <mg_esc+0x20>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	e01b      	b.n	8006db4 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d112      	bne.n	8006dae <mg_esc+0x56>
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <mg_esc+0x46>
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	e00f      	b.n	8006dbe <mg_esc+0x66>
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4413      	add	r3, r2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	e007      	b.n	8006dbe <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	3301      	adds	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1df      	bne.n	8006d7c <mg_esc+0x24>
  }
  return 0;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	08013f88 	.word	0x08013f88
 8006dd0:	08013f90 	.word	0x08013f90

08006dd4 <mg_escape>:

static char mg_escape(int c) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8006ddc:	2101      	movs	r1, #1
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff ffba 	bl	8006d58 <mg_esc>
 8006de4:	4603      	mov	r3, r0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b088      	sub	sp, #32
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006e04:	2300      	movs	r3, #0
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	e023      	b.n	8006e52 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff ffde 	bl	8006dd4 <mg_escape>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	205c      	movs	r0, #92	; 0x5c
 8006e28:	4798      	blx	r3
 8006e2a:	7dfa      	ldrb	r2, [r7, #23]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	3301      	adds	r3, #1
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	e007      	b.n	8006e4c <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	781a      	ldrb	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d205      	bcs.n	8006e66 <qcpy+0x78>
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1d1      	bne.n	8006e0a <qcpy+0x1c>
    }
  }
  return i + extra;
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	4413      	add	r3, r2
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	1d19      	adds	r1, r3, #4
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6011      	str	r1, [r2, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1d19      	adds	r1, r3, #4
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6011      	str	r1, [r2, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d109      	bne.n	8006eb6 <mg_print_esc+0x42>
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <mg_print_esc+0x3e>
 8006ea8:	6938      	ldr	r0, [r7, #16]
 8006eaa:	f7f9 fa11 	bl	80002d0 <strlen>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	e000      	b.n	8006eb4 <mg_print_esc+0x40>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff ff96 	bl	8006dee <qcpy>
 8006ec2:	4603      	mov	r3, r0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8006ed8:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	1d1a      	adds	r2, r3, #4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d906      	bls.n	8006f0a <mg_queue_read_len+0x3e>
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <mg_queue_read_len+0x48>)
 8006efe:	4a06      	ldr	r2, [pc, #24]	; (8006f18 <mg_queue_read_len+0x4c>)
 8006f00:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8006f04:	4805      	ldr	r0, [pc, #20]	; (8006f1c <mg_queue_read_len+0x50>)
 8006f06:	f00b f801 	bl	8011f0c <__assert_func>
  return n;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	080141a0 	.word	0x080141a0
 8006f18:	08014cc4 	.word	0x08014cc4
 8006f1c:	08013374 	.word	0x08013374

08006f20 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8006f3c:	f3bf 8f5b 	dmb	ish
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d312      	bcc.n	8006f92 <mg_queue_book+0x46>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	441a      	add	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	441a      	add	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d808      	bhi.n	8006f92 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e011      	b.n	8006fb6 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d30b      	bcc.n	8006fb6 <mg_queue_book+0x6a>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d206      	bcs.n	8006fb6 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8006fa8:	2100      	movs	r1, #0
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7ff ffb8 	bl	8006f20 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	441a      	add	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d207      	bcs.n	8006fda <mg_queue_book+0x8e>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <mg_queue_book+0xa4>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	441a      	add	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	601a      	str	r2, [r3, #0]
  return space;
 8006ff0:	697b      	ldr	r3, [r7, #20]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	429a      	cmp	r2, r3
 8007014:	d013      	beq.n	800703e <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff ff58 	bl	8006ecc <mg_queue_read_len>
 800701c:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10c      	bne.n	800703e <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d903      	bls.n	800703e <mg_queue_next+0x42>
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff ff48 	bl	8006ecc <mg_queue_read_len>
 800703c:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <mg_queue_next+0x58>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	3304      	adds	r3, #4
 800704e:	441a      	add	r2, r3
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	441a      	add	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d906      	bls.n	8007072 <mg_queue_next+0x76>
 8007064:	4b05      	ldr	r3, [pc, #20]	; (800707c <mg_queue_next+0x80>)
 8007066:	4a06      	ldr	r2, [pc, #24]	; (8007080 <mg_queue_next+0x84>)
 8007068:	f640 71e6 	movw	r1, #4070	; 0xfe6
 800706c:	4805      	ldr	r0, [pc, #20]	; (8007084 <mg_queue_next+0x88>)
 800706e:	f00a ff4d 	bl	8011f0c <__assert_func>
  return len;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	080141c4 	.word	0x080141c4
 8007080:	08014cd8 	.word	0x08014cd8
 8007084:	08013374 	.word	0x08013374

08007088 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <mg_queue_add+0x1e>
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <mg_queue_add+0x60>)
 800709a:	4a14      	ldr	r2, [pc, #80]	; (80070ec <mg_queue_add+0x64>)
 800709c:	f640 71eb 	movw	r1, #4075	; 0xfeb
 80070a0:	4813      	ldr	r0, [pc, #76]	; (80070f0 <mg_queue_add+0x68>)
 80070a2:	f00a ff33 	bl	8011f0c <__assert_func>
  mg_queue_write_len(q, len);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff ff39 	bl	8006f20 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	4413      	add	r3, r2
 80070b6:	f103 0208 	add.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d906      	bls.n	80070d0 <mg_queue_add+0x48>
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <mg_queue_add+0x6c>)
 80070c4:	4a09      	ldr	r2, [pc, #36]	; (80070ec <mg_queue_add+0x64>)
 80070c6:	f640 71ed 	movw	r1, #4077	; 0xfed
 80070ca:	4809      	ldr	r0, [pc, #36]	; (80070f0 <mg_queue_add+0x68>)
 80070cc:	f00a ff1e 	bl	8011f0c <__assert_func>
  q->head += len + sizeof(uint32_t);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	4413      	add	r3, r2
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60da      	str	r2, [r3, #12]
}
 80070de:	bf00      	nop
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	080141e0 	.word	0x080141e0
 80070ec:	08014ce8 	.word	0x08014ce8
 80070f0:	08013374 	.word	0x08013374
 80070f4:	080141e8 	.word	0x080141e8

080070f8 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	4413      	add	r3, r2
 800710a:	1d1a      	adds	r2, r3, #4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	1d1a      	adds	r2, r3, #4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d906      	bls.n	800712c <mg_queue_del+0x34>
 800711e:	4b05      	ldr	r3, [pc, #20]	; (8007134 <mg_queue_del+0x3c>)
 8007120:	4a05      	ldr	r2, [pc, #20]	; (8007138 <mg_queue_del+0x40>)
 8007122:	f640 71f3 	movw	r1, #4083	; 0xff3
 8007126:	4805      	ldr	r0, [pc, #20]	; (800713c <mg_queue_del+0x44>)
 8007128:	f00a fef0 	bl	8011f0c <__assert_func>
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	08014218 	.word	0x08014218
 8007138:	08014cf8 	.word	0x08014cf8
 800713c:	08013374 	.word	0x08013374

08007140 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <mg_http_serve_ssi+0x24>)
 800714e:	2200      	movs	r2, #0
 8007150:	f240 11f5 	movw	r1, #501	; 0x1f5
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7fd f847 	bl	80041e8 <mg_http_reply>
  (void) root, (void) fullpath;
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	080143c8 	.word	0x080143c8

08007168 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <mg_str_s+0x1e>
 800717c:	6838      	ldr	r0, [r7, #0]
 800717e:	f7f9 f8a7 	bl	80002d0 <strlen>
 8007182:	4603      	mov	r3, r0
 8007184:	e000      	b.n	8007188 <mg_str_s+0x20>
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
  return str;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	461a      	mov	r2, r3
 800718e:	f107 0308 	add.w	r3, r7, #8
 8007192:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007196:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80071a2:	b480      	push	{r7}
 80071a4:	b087      	sub	sp, #28
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	617b      	str	r3, [r7, #20]
  return str;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	461a      	mov	r2, r3
 80071ba:	f107 0310 	add.w	r3, r7, #16
 80071be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80071c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <mg_lower>:

int mg_lower(const char *s) {
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  int c = *s;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	dd05      	ble.n	80071f2 <mg_lower+0x20>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b5a      	cmp	r3, #90	; 0x5a
 80071ea:	dc02      	bgt.n	80071f2 <mg_lower+0x20>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3320      	adds	r3, #32
 80071f0:	60fb      	str	r3, [r7, #12]
  return c;
 80071f2:	68fb      	ldr	r3, [r7, #12]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01d      	beq.n	8007252 <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	60fa      	str	r2, [r7, #12]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ffd8 	bl	80071d2 <mg_lower>
 8007222:	4604      	mov	r4, r0
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	60ba      	str	r2, [r7, #8]
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff ffd1 	bl	80071d2 <mg_lower>
 8007230:	4603      	mov	r3, r0
 8007232:	1ae3      	subs	r3, r4, r3
 8007234:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <mg_ncasecmp+0x52>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3b01      	subs	r3, #1
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <mg_ncasecmp+0x52>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3b01      	subs	r3, #1
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e1      	bne.n	8007216 <mg_ncasecmp+0x16>
  return diff;
 8007252:	697b      	ldr	r3, [r7, #20]
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 8007266:	6838      	ldr	r0, [r7, #0]
 8007268:	f7f9 f832 	bl	80002d0 <strlen>
 800726c:	6178      	str	r0, [r7, #20]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	4293      	cmp	r3, r2
 800727e:	bf28      	it	cs
 8007280:	4613      	movcs	r3, r2
 8007282:	461a      	mov	r2, r3
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	f00b f955 	bl	8012534 <strncmp>
 800728a:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d103      	bne.n	800729a <mg_vcmp+0x3e>
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	e000      	b.n	800729c <mg_vcmp+0x40>
  return r;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 80072ae:	6838      	ldr	r0, [r7, #0]
 80072b0:	f7f9 f80e 	bl	80002d0 <strlen>
 80072b4:	6178      	str	r0, [r7, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4293      	cmp	r3, r2
 80072c6:	bf28      	it	cs
 80072c8:	4613      	movcs	r3, r2
 80072ca:	461a      	mov	r2, r3
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	f7ff ff97 	bl	8007200 <mg_ncasecmp>
 80072d2:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <mg_vcasecmp+0x3e>
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	e000      	b.n	80072e4 <mg_vcasecmp+0x40>
  return r;
 80072e2:	68fb      	ldr	r3, [r7, #12]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80072ec:	b490      	push	{r4, r7}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	f107 0408 	add.w	r4, r7, #8
 80072f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80072fa:	4639      	mov	r1, r7
 80072fc:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8007304:	e019      	b.n	800733a <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	429a      	cmp	r2, r3
 8007320:	da02      	bge.n	8007328 <mg_strcmp+0x3c>
 8007322:	f04f 33ff 	mov.w	r3, #4294967295
 8007326:	e01e      	b.n	8007366 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	429a      	cmp	r2, r3
 800732e:	dd01      	ble.n	8007334 <mg_strcmp+0x48>
 8007330:	2301      	movs	r3, #1
 8007332:	e018      	b.n	8007366 <mg_strcmp+0x7a>
    i++;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	429a      	cmp	r2, r3
 8007340:	d203      	bcs.n	800734a <mg_strcmp+0x5e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	429a      	cmp	r2, r3
 8007348:	d3dd      	bcc.n	8007306 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	429a      	cmp	r2, r3
 8007350:	d201      	bcs.n	8007356 <mg_strcmp+0x6a>
 8007352:	2301      	movs	r3, #1
 8007354:	e007      	b.n	8007366 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	429a      	cmp	r2, r3
 800735c:	d202      	bcs.n	8007364 <mg_strcmp+0x78>
 800735e:	f04f 33ff 	mov.w	r3, #4294967295
 8007362:	e000      	b.n	8007366 <mg_strcmp+0x7a>
  return 0;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bc90      	pop	{r4, r7}
 800736e:	4770      	bx	lr

08007370 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	f107 0408 	add.w	r4, r7, #8
 800737a:	e884 0003 	stmia.w	r4, {r0, r1}
 800737e:	4639      	mov	r1, r7
 8007380:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	429a      	cmp	r2, r3
 800738a:	d901      	bls.n	8007390 <mg_strstr+0x20>
 800738c:	2300      	movs	r3, #0
 800738e:	e020      	b.n	80073d2 <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <mg_strstr+0x2a>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	e01b      	b.n	80073d2 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e011      	b.n	80073c4 <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4413      	add	r3, r2
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f00b f883 	bl	80124b6 <memcmp>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <mg_strstr+0x4e>
      return haystack.ptr + i;
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4413      	add	r3, r2
 80073bc:	e009      	b.n	80073d2 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	3301      	adds	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d9e7      	bls.n	80073a0 <mg_strstr+0x30>
    }
  }
  return NULL;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd90      	pop	{r4, r7, pc}

080073da <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80073da:	b490      	push	{r4, r7}
 80073dc:	b088      	sub	sp, #32
 80073de:	af00      	add	r7, sp, #0
 80073e0:	f107 0408 	add.w	r4, r7, #8
 80073e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80073e8:	4639      	mov	r1, r7
 80073ea:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	2300      	movs	r3, #0
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80ad 	beq.w	8007560 <mg_match+0x186>
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	2200      	movs	r2, #0
 8007410:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8007412:	e0a5      	b.n	8007560 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	429a      	cmp	r2, r3
 800741a:	d24f      	bcs.n	80074bc <mg_match+0xe2>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	429a      	cmp	r2, r3
 8007422:	d24b      	bcs.n	80074bc <mg_match+0xe2>
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b3f      	cmp	r3, #63	; 0x3f
 800742e:	d009      	beq.n	8007444 <mg_match+0x6a>
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	4413      	add	r3, r2
 8007436:	781a      	ldrb	r2, [r3, #0]
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	440b      	add	r3, r1
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d13b      	bne.n	80074bc <mg_match+0xe2>
      if (caps == NULL) {
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	2b00      	cmp	r3, #0
 8007448:	d031      	beq.n	80074ae <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	4413      	add	r3, r2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b3f      	cmp	r3, #63	; 0x3f
 8007454:	d111      	bne.n	800747a <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	441a      	add	r2, r3
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	2201      	movs	r2, #1
 8007464:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	3308      	adds	r3, #8
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007474:	2200      	movs	r2, #0
 8007476:	605a      	str	r2, [r3, #4]
 8007478:	e019      	b.n	80074ae <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d015      	beq.n	80074ae <mg_match+0xd4>
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d111      	bne.n	80074ae <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	441a      	add	r2, r3
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	461a      	mov	r2, r3
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	3308      	adds	r3, #8
 80074a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	2200      	movs	r2, #0
 80074a6:	605a      	str	r2, [r3, #4]
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	3301      	adds	r3, #1
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	3301      	adds	r3, #1
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e051      	b.n	8007560 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d222      	bcs.n	800750a <mg_match+0x130>
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b2a      	cmp	r3, #42	; 0x2a
 80074ce:	d005      	beq.n	80074dc <mg_match+0x102>
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b23      	cmp	r3, #35	; 0x23
 80074da:	d116      	bne.n	800750a <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <mg_match+0x120>
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <mg_match+0x120>
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	2200      	movs	r2, #0
 80074ee:	605a      	str	r2, [r3, #4]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	441a      	add	r2, r3
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	61fa      	str	r2, [r7, #28]
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	3301      	adds	r3, #1
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	e02a      	b.n	8007560 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d025      	beq.n	800755c <mg_match+0x182>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	429a      	cmp	r2, r3
 8007516:	d821      	bhi.n	800755c <mg_match+0x182>
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	4413      	add	r3, r2
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b23      	cmp	r3, #35	; 0x23
 8007522:	d005      	beq.n	8007530 <mg_match+0x156>
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b2f      	cmp	r3, #47	; 0x2f
 800752e:	d015      	beq.n	800755c <mg_match+0x182>
      i = ni, j = nj;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <mg_match+0x186>
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10c      	bne.n	8007560 <mg_match+0x186>
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d108      	bne.n	8007560 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	3b08      	subs	r3, #8
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	2200      	movs	r2, #0
 8007558:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 800755a:	e001      	b.n	8007560 <mg_match+0x186>
      }
    } else {
      return false;
 800755c:	2300      	movs	r3, #0
 800755e:	e01e      	b.n	800759e <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	429a      	cmp	r2, r3
 8007566:	f4ff af55 	bcc.w	8007414 <mg_match+0x3a>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	429a      	cmp	r2, r3
 8007570:	f4ff af50 	bcc.w	8007414 <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d010      	beq.n	800759c <mg_match+0x1c2>
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00c      	beq.n	800759c <mg_match+0x1c2>
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d108      	bne.n	800759c <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	441a      	add	r2, r3
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	461a      	mov	r2, r3
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	605a      	str	r2, [r3, #4]
  }
  return true;
 800759c:	2301      	movs	r3, #1
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc90      	pop	{r4, r7}
 80075a6:	4770      	bx	lr

080075a8 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 80075b6:	f107 0310 	add.w	r3, r7, #16
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff fdef 	bl	80071a2 <mg_str_n>
 80075c4:	f107 0318 	add.w	r3, r7, #24
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fde8 	bl	80071a2 <mg_str_n>
 80075d2:	2300      	movs	r3, #0
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	f107 0318 	add.w	r3, r7, #24
 80075da:	cb0c      	ldmia	r3, {r2, r3}
 80075dc:	f107 0110 	add.w	r1, r7, #16
 80075e0:	c903      	ldmia	r1, {r0, r1}
 80075e2:	f7ff fefa 	bl	80073da <mg_match>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3720      	adds	r7, #32
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	e002      	b.n	800760a <mg_nce+0x1a>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	3301      	adds	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	d909      	bls.n	800762a <mg_nce+0x3a>
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	4413      	add	r3, r2
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007626:	429a      	cmp	r2, r3
 8007628:	d1ec      	bne.n	8007604 <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	e002      	b.n	8007636 <mg_nce+0x46>
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	3301      	adds	r3, #1
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	429a      	cmp	r2, r3
 800763c:	d207      	bcs.n	800764e <mg_nce+0x5e>
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	4413      	add	r3, r2
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b3d      	cmp	r3, #61	; 0x3d
 800764c:	d1f0      	bne.n	8007630 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <mg_nce+0x6a>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <mg_nce+0x76>
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <mg_nce+0x94>
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	429a      	cmp	r2, r3
 8007672:	d204      	bcs.n	800767e <mg_nce+0x8e>
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	3301      	adds	r3, #1
 800767c:	e000      	b.n	8007680 <mg_nce+0x90>
 800767e:	2300      	movs	r3, #0
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <mg_nce+0xb2>
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	429a      	cmp	r2, r3
 8007690:	d204      	bcs.n	800769c <mg_nce+0xac>
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	e000      	b.n	800769e <mg_nce+0xae>
 800769c:	2300      	movs	r3, #0
 800769e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a0:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	3301      	adds	r3, #1
 80076aa:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	bf28      	it	cs
 80076b4:	4613      	movcs	r3, r2
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 80076c2:	b590      	push	{r4, r7, lr}
 80076c4:	b091      	sub	sp, #68	; 0x44
 80076c6:	af04      	add	r7, sp, #16
 80076c8:	6178      	str	r0, [r7, #20]
 80076ca:	6139      	str	r1, [r7, #16]
 80076cc:	60fa      	str	r2, [r7, #12]
 80076ce:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d4:	2300      	movs	r3, #0
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
 80076d8:	2300      	movs	r3, #0
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	2300      	movs	r3, #0
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	2300      	movs	r3, #0
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <mg_split+0x32>
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <mg_split+0x36>
 80076f4:	2300      	movs	r3, #0
 80076f6:	e054      	b.n	80077a2 <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	6859      	ldr	r1, [r3, #4]
 8007700:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007704:	7afb      	ldrb	r3, [r7, #11]
 8007706:	9303      	str	r3, [sp, #12]
 8007708:	f107 031c 	add.w	r3, r7, #28
 800770c:	9302      	str	r3, [sp, #8]
 800770e:	f107 0320 	add.w	r3, r7, #32
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	4613      	mov	r3, r2
 800771c:	2200      	movs	r2, #0
 800771e:	f7ff ff67 	bl	80075f0 <mg_nce>
 8007722:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00f      	beq.n	800774a <mg_split+0x88>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	18d1      	adds	r1, r2, r3
 8007732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007734:	693c      	ldr	r4, [r7, #16]
 8007736:	463b      	mov	r3, r7
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff fd32 	bl	80071a2 <mg_str_n>
 800773e:	4622      	mov	r2, r4
 8007740:	463b      	mov	r3, r7
 8007742:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007746:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00f      	beq.n	8007770 <mg_split+0xae>
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	18d1      	adds	r1, r2, r3
 8007758:	69fa      	ldr	r2, [r7, #28]
 800775a:	68fc      	ldr	r4, [r7, #12]
 800775c:	463b      	mov	r3, r7
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fd1f 	bl	80071a2 <mg_str_n>
 8007764:	4622      	mov	r2, r4
 8007766:	463b      	mov	r3, r7
 8007768:	e893 0003 	ldmia.w	r3, {r0, r1}
 800776c:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	18d1      	adds	r1, r2, r3
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	697c      	ldr	r4, [r7, #20]
 8007782:	463b      	mov	r3, r7
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fd0c 	bl	80071a2 <mg_str_n>
 800778a:	4622      	mov	r2, r4
 800778c:	463b      	mov	r3, r7
 800778e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007792:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3734      	adds	r7, #52	; 0x34
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd90      	pop	{r4, r7, pc}

080077aa <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 80077b6:	232c      	movs	r3, #44	; 0x2c
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff ff80 	bl	80076c2 <mg_split>
 80077c2:	4603      	mov	r3, r0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <mg_unhex_nimble>:
  }
  to[i] = '\0';
  return to;
}

static unsigned char mg_unhex_nimble(unsigned char c) {
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	4603      	mov	r3, r0
 80077d4:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	2b2f      	cmp	r3, #47	; 0x2f
 80077da:	d906      	bls.n	80077ea <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b39      	cmp	r3, #57	; 0x39
 80077e0:	d803      	bhi.n	80077ea <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	3b30      	subs	r3, #48	; 0x30
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	e00c      	b.n	8007804 <mg_unhex_nimble+0x38>
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d906      	bls.n	80077fe <mg_unhex_nimble+0x32>
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b46      	cmp	r3, #70	; 0x46
 80077f4:	d803      	bhi.n	80077fe <mg_unhex_nimble+0x32>
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	3b37      	subs	r3, #55	; 0x37
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	e002      	b.n	8007804 <mg_unhex_nimble+0x38>
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	3b57      	subs	r3, #87	; 0x57
 8007802:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	2300      	movs	r3, #0
 8007820:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	e011      	b.n	800784c <mg_unhexn+0x3c>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff ffc8 	bl	80077cc <mg_unhex_nimble>
 800783c:	4603      	mov	r3, r0
 800783e:	461a      	mov	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4313      	orrs	r3, r2
 8007844:	60bb      	str	r3, [r7, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d3e9      	bcc.n	8007828 <mg_unhexn+0x18>
  return v;
 8007854:	68bb      	ldr	r3, [r7, #8]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 800785e:	b580      	push	{r7, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
 800786e:	e010      	b.n	8007892 <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	4413      	add	r3, r2
 8007876:	2102      	movs	r1, #2
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff ffc9 	bl	8007810 <mg_unhexn>
 800787e:	4601      	mov	r1, r0
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	b2ca      	uxtb	r2, r1
 800788a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	3302      	adds	r3, #2
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	429a      	cmp	r2, r3
 8007898:	d3ea      	bcc.n	8007870 <mg_unhex+0x12>
  }
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  const char *s = path;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 80078b0:	e01a      	b.n	80078e8 <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d007      	beq.n	80078ca <mg_path_is_sane+0x26>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b2f      	cmp	r3, #47	; 0x2f
 80078c0:	d003      	beq.n	80078ca <mg_path_is_sane+0x26>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	2b5c      	cmp	r3, #92	; 0x5c
 80078c8:	d10b      	bne.n	80078e2 <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3301      	adds	r3, #1
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b2e      	cmp	r3, #46	; 0x2e
 80078d2:	d106      	bne.n	80078e2 <mg_path_is_sane+0x3e>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3302      	adds	r3, #2
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b2e      	cmp	r3, #46	; 0x2e
 80078dc:	d101      	bne.n	80078e2 <mg_path_is_sane+0x3e>
 80078de:	2300      	movs	r3, #0
 80078e0:	e007      	b.n	80078f2 <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e0      	bne.n	80078b2 <mg_path_is_sane+0xe>
    }
  }
  return true;
 80078f0:	2301      	movs	r3, #1
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007918:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	619a      	str	r2, [r3, #24]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	61da      	str	r2, [r3, #28]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	621a      	str	r2, [r3, #32]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	601a      	str	r2, [r3, #0]
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8007956:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6178      	str	r0, [r7, #20]
 8007960:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8007964:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800796c:	eb10 0a02 	adds.w	sl, r0, r2
 8007970:	eb41 0b03 	adc.w	fp, r1, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	4592      	cmp	sl, r2
 800797c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007980:	d206      	bcs.n	8007990 <mg_timer_expired+0x3a>
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	4313      	orrs	r3, r2
 8007998:	d10d      	bne.n	80079b6 <mg_timer_expired+0x60>
 800799a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800799e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079a2:	1886      	adds	r6, r0, r2
 80079a4:	603e      	str	r6, [r7, #0]
 80079a6:	eb41 0303 	adc.w	r3, r1, r3
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80079b2:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80079c0:	4290      	cmp	r0, r2
 80079c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80079c6:	d201      	bcs.n	80079cc <mg_timer_expired+0x76>
 80079c8:	2300      	movs	r3, #0
 80079ca:	e022      	b.n	8007a12 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80079d6:	ebb0 0802 	subs.w	r8, r0, r2
 80079da:	eb61 0903 	sbc.w	r9, r1, r3
 80079de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079e2:	4542      	cmp	r2, r8
 80079e4:	eb73 0309 	sbcs.w	r3, r3, r9
 80079e8:	d207      	bcs.n	80079fa <mg_timer_expired+0xa4>
 80079ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80079ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079f2:	1884      	adds	r4, r0, r2
 80079f4:	eb41 0503 	adc.w	r5, r1, r3
 80079f8:	e007      	b.n	8007a0a <mg_timer_expired+0xb4>
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a04:	1884      	adds	r4, r0, r2
 8007a06:	eb41 0503 	adc.w	r5, r1, r3
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8007a10:	2301      	movs	r3, #1
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a1c:	4770      	bx	lr

08007a1e <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8007a1e:	b590      	push	{r4, r7, lr}
 8007a20:	b08b      	sub	sp, #44	; 0x2c
 8007a22:	af02      	add	r7, sp, #8
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	e054      	b.n	8007adc <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d10d      	bne.n	8007a58 <mg_timer_poll+0x3a>
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <mg_timer_poll+0x3a>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <mg_timer_poll+0x3c>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	76fb      	strb	r3, [r7, #27]
 8007a5c:	7efb      	ldrb	r3, [r7, #27]
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f103 0410 	add.w	r4, r3, #16
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a74:	e9cd 2300 	strd	r2, r3, [sp]
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f7ff ff6a 	bl	8007956 <mg_timer_expired>
 8007a82:	4603      	mov	r3, r0
 8007a84:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8007a8c:	7efb      	ldrb	r3, [r7, #27]
 8007a8e:	f083 0301 	eor.w	r3, r3, #1
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <mg_timer_poll+0x86>
 8007a98:	7ebb      	ldrb	r3, [r7, #26]
 8007a9a:	f083 0301 	eor.w	r3, r3, #1
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d118      	bne.n	8007ad6 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <mg_timer_poll+0x9e>
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	6a12      	ldr	r2, [r2, #32]
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f043 0204 	orr.w	r2, r3, #4
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	619a      	str	r2, [r3, #24]
 8007ad4:	e000      	b.n	8007ad8 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 8007ad6:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1a7      	bne.n	8007a32 <mg_timer_poll+0x14>
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	3724      	adds	r7, #36	; 0x24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}

08007aec <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, struct mg_str hostname) {
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	1d3b      	adds	r3, r7, #4
 8007af6:	e883 0006 	stmia.w	r3, {r1, r2}
  (void) hostname;
  mg_error(c, "TLS is not enabled");
 8007afa:	4904      	ldr	r1, [pc, #16]	; (8007b0c <mg_tls_init+0x20>)
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7f9 ff29 	bl	8001954 <mg_error>
}
 8007b02:	bf00      	nop
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	080143d8 	.word	0x080143d8

08007b10 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <mg_tls_recv+0x1e>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <mg_tls_recv+0x1e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <mg_tls_recv+0x22>
 8007b56:	2300      	movs	r3, #0
 8007b58:	e001      	b.n	8007b5e <mg_tls_recv+0x26>
 8007b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <mg_tls_send+0x1e>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <mg_tls_send+0x1e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <mg_tls_send+0x22>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	e001      	b.n	8007b90 <mg_tls_send+0x26>
 8007b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	4917      	ldr	r1, [pc, #92]	; (8007c04 <mg_url_is_ssl+0x68>)
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f00a fcc3 	bl	8012534 <strncmp>
 8007bae:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01f      	beq.n	8007bf4 <mg_url_is_ssl+0x58>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007bb4:	2206      	movs	r2, #6
 8007bb6:	4914      	ldr	r1, [pc, #80]	; (8007c08 <mg_url_is_ssl+0x6c>)
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f00a fcbb 	bl	8012534 <strncmp>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d017      	beq.n	8007bf4 <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007bc4:	2206      	movs	r2, #6
 8007bc6:	4911      	ldr	r1, [pc, #68]	; (8007c0c <mg_url_is_ssl+0x70>)
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f00a fcb3 	bl	8012534 <strncmp>
 8007bce:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00f      	beq.n	8007bf4 <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	490e      	ldr	r1, [pc, #56]	; (8007c10 <mg_url_is_ssl+0x74>)
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f00a fcab 	bl	8012534 <strncmp>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <mg_url_is_ssl+0x58>
         strncmp(url, "tls:", 4) == 0;
 8007be4:	2204      	movs	r2, #4
 8007be6:	490b      	ldr	r1, [pc, #44]	; (8007c14 <mg_url_is_ssl+0x78>)
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f00a fca3 	bl	8012534 <strncmp>
 8007bee:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <mg_url_is_ssl+0x5c>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <mg_url_is_ssl+0x5e>
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	080143ec 	.word	0x080143ec
 8007c08:	080143f4 	.word	0x080143f4
 8007c0c:	080143fc 	.word	0x080143fc
 8007c10:	08014404 	.word	0x08014404
 8007c14:	0801440c 	.word	0x0801440c

08007c18 <urlparse>:

static struct url urlparse(const char *url) {
 8007c18:	b5b0      	push	{r4, r5, r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	221c      	movs	r2, #28
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f00a fc6d 	bl	801250a <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8007c30:	2300      	movs	r3, #0
 8007c32:	627b      	str	r3, [r7, #36]	; 0x24
 8007c34:	e05b      	b.n	8007cee <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	4413      	add	r3, r2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b2f      	cmp	r3, #47	; 0x2f
 8007c40:	d112      	bne.n	8007c68 <urlparse+0x50>
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00f      	beq.n	8007c68 <urlparse+0x50>
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10c      	bne.n	8007c68 <urlparse+0x50>
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	3b01      	subs	r3, #1
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b2f      	cmp	r3, #47	; 0x2f
 8007c5a:	d105      	bne.n	8007c68 <urlparse+0x50>
      u.host = i + 1;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	3301      	adds	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61bb      	str	r3, [r7, #24]
 8007c66:	e03f      	b.n	8007ce8 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	4413      	add	r3, r2
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b5d      	cmp	r3, #93	; 0x5d
 8007c72:	d102      	bne.n	8007c7a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8007c74:	2300      	movs	r3, #0
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e036      	b.n	8007ce8 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	4413      	add	r3, r2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b3a      	cmp	r3, #58	; 0x3a
 8007c84:	d109      	bne.n	8007c9a <urlparse+0x82>
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <urlparse+0x82>
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <urlparse+0x82>
      u.port = i + 1;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	3301      	adds	r3, #1
 8007c96:	61bb      	str	r3, [r7, #24]
 8007c98:	e026      	b.n	8007ce8 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	4413      	add	r3, r2
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d112      	bne.n	8007ccc <urlparse+0xb4>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10f      	bne.n	8007ccc <urlparse+0xb4>
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10c      	bne.n	8007ccc <urlparse+0xb4>
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <urlparse+0xb4>
      u.user = u.host;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61bb      	str	r3, [r7, #24]
 8007cca:	e00d      	b.n	8007ce8 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	4413      	add	r3, r2
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b2f      	cmp	r3, #47	; 0x2f
 8007cd6:	d107      	bne.n	8007ce8 <urlparse+0xd0>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <urlparse+0xd0>
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <urlparse+0xd0>
      u.uri = i;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	3301      	adds	r3, #1
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	4413      	add	r3, r2
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d19d      	bne.n	8007c36 <urlparse+0x1e>
    }
  }
  u.end = i;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	461d      	mov	r5, r3
 8007d02:	f107 0408 	add.w	r4, r7, #8
 8007d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d0a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007d0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	3728      	adds	r7, #40	; 0x28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d1c <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8007d24:	f107 0308 	add.w	r3, r7, #8
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff ff74 	bl	8007c18 <urlparse>
  unsigned short port = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8007d34:	2205      	movs	r2, #5
 8007d36:	4925      	ldr	r1, [pc, #148]	; (8007dcc <mg_url_port+0xb0>)
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f00a fbfb 	bl	8012534 <strncmp>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <mg_url_port+0x38>
 8007d44:	2203      	movs	r2, #3
 8007d46:	4922      	ldr	r1, [pc, #136]	; (8007dd0 <mg_url_port+0xb4>)
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f00a fbf3 	bl	8012534 <strncmp>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <mg_url_port+0x3c>
 8007d54:	2350      	movs	r3, #80	; 0x50
 8007d56:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8007d58:	2204      	movs	r2, #4
 8007d5a:	491e      	ldr	r1, [pc, #120]	; (8007dd4 <mg_url_port+0xb8>)
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f00a fbe9 	bl	8012534 <strncmp>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <mg_url_port+0x5c>
 8007d68:	2206      	movs	r2, #6
 8007d6a:	491b      	ldr	r1, [pc, #108]	; (8007dd8 <mg_url_port+0xbc>)
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f00a fbe1 	bl	8012534 <strncmp>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d102      	bne.n	8007d7e <mg_url_port+0x62>
    port = 443;
 8007d78:	f240 13bb 	movw	r3, #443	; 0x1bb
 8007d7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8007d7e:	2205      	movs	r2, #5
 8007d80:	4916      	ldr	r1, [pc, #88]	; (8007ddc <mg_url_port+0xc0>)
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f00a fbd6 	bl	8012534 <strncmp>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <mg_url_port+0x78>
 8007d8e:	f240 735b 	movw	r3, #1883	; 0x75b
 8007d92:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8007d94:	2206      	movs	r2, #6
 8007d96:	4912      	ldr	r1, [pc, #72]	; (8007de0 <mg_url_port+0xc4>)
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f00a fbcb 	bl	8012534 <strncmp>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <mg_url_port+0x8e>
 8007da4:	f242 23b3 	movw	r3, #8883	; 0x22b3
 8007da8:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <mg_url_port+0xa4>
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	4413      	add	r3, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f00a f8c6 	bl	8011f48 <atoi>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 8007dc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3728      	adds	r7, #40	; 0x28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	08014414 	.word	0x08014414
 8007dd0:	0801441c 	.word	0x0801441c
 8007dd4:	080143ec 	.word	0x080143ec
 8007dd8:	080143f4 	.word	0x080143f4
 8007ddc:	08014420 	.word	0x08014420
 8007de0:	080143fc 	.word	0x080143fc

08007de4 <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 8007df2:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	461a      	mov	r2, r3
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007dfe:	7b7b      	ldrb	r3, [r7, #13]
 8007e00:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007e02:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007e04:	7b3b      	ldrb	r3, [r7, #12]
 8007e06:	061b      	lsls	r3, r3, #24
 8007e08:	4313      	orrs	r3, r2
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8007e20:	2300      	movs	r3, #0
 8007e22:	81bb      	strh	r3, [r7, #12]
 8007e24:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 8007e26:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8007e28:	7b7b      	ldrb	r3, [r7, #13]
 8007e2a:	b21a      	sxth	r2, r3
 8007e2c:	7b3b      	ldrb	r3, [r7, #12]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	b21b      	sxth	r3, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b21b      	sxth	r3, r3
 8007e36:	b29b      	uxth	r3, r3
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	43db      	mvns	r3, r3
 8007e54:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007e56:	e01f      	b.n	8007e98 <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *) buf++;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	60ba      	str	r2, [r7, #8]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 8007e62:	7dfa      	ldrb	r2, [r7, #23]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4053      	eors	r3, r2
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	4a11      	ldr	r2, [pc, #68]	; (8007eb4 <mg_crc32+0x70>)
 8007e6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	091b      	lsrs	r3, r3, #4
 8007e76:	4053      	eors	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
 8007e7c:	091b      	lsrs	r3, r3, #4
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4053      	eors	r3, r2
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	4a0a      	ldr	r2, [pc, #40]	; (8007eb4 <mg_crc32+0x70>)
 8007e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	091b      	lsrs	r3, r3, #4
 8007e94:	4053      	eors	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	1e5a      	subs	r2, r3, #1
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1da      	bne.n	8007e58 <mg_crc32+0x14>
  }
  return ~crc;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	43db      	mvns	r3, r3
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	08014d08 	.word	0x08014d08

08007eb8 <mg_millis>:
  return allowed == '+';
}

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8007eb8:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
 8007ebc:	af00      	add	r7, sp, #0
#elif MG_ARCH == MG_ARCH_ZEPHYR
  return (uint64_t) k_uptime_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS1
  return (uint64_t) rt_time_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS2
  return (uint64_t) ((osKernelGetTickCount() * 1000) / osKernelGetTickFreq());
 8007ebe:	f007 fa7f 	bl	800f3c0 <osKernelGetTickCount>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ec8:	fb02 f403 	mul.w	r4, r2, r3
 8007ecc:	f007 faa0 	bl	800f410 <osKernelGetTickFreq>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	fbb4 f3f3 	udiv	r3, r4, r3
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4698      	mov	r8, r3
 8007eda:	4691      	mov	r9, r2
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}

08007ee8 <eth_read_phy>:
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface
enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1, PHY_CSCR = 31 };

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	460a      	mov	r2, r1
 8007ef2:	71fb      	strb	r3, [r7, #7]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <eth_read_phy+0x5c>)
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	4a11      	ldr	r2, [pc, #68]	; (8007f44 <eth_read_phy+0x5c>)
 8007efe:	f003 031c 	and.w	r3, r3, #28
 8007f02:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <eth_read_phy+0x5c>)
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	02d9      	lsls	r1, r3, #11
 8007f0c:	79bb      	ldrb	r3, [r7, #6]
 8007f0e:	019b      	lsls	r3, r3, #6
 8007f10:	430b      	orrs	r3, r1
 8007f12:	490c      	ldr	r1, [pc, #48]	; (8007f44 <eth_read_phy+0x5c>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= BIT(0);
 8007f18:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <eth_read_phy+0x5c>)
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	4a09      	ldr	r2, [pc, #36]	; (8007f44 <eth_read_phy+0x5c>)
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007f24:	bf00      	nop
 8007f26:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <eth_read_phy+0x5c>)
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f9      	bne.n	8007f26 <eth_read_phy+0x3e>
  return ETH->MACMIIDR;
 8007f32:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <eth_read_phy+0x5c>)
 8007f34:	695b      	ldr	r3, [r3, #20]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40028000 	.word	0x40028000

08007f48 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	603a      	str	r2, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
 8007f54:	460b      	mov	r3, r1
 8007f56:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIDR = val;
 8007f58:	4a14      	ldr	r2, [pc, #80]	; (8007fac <eth_write_phy+0x64>)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 8007f5e:	4b13      	ldr	r3, [pc, #76]	; (8007fac <eth_write_phy+0x64>)
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	4a12      	ldr	r2, [pc, #72]	; (8007fac <eth_write_phy+0x64>)
 8007f64:	f003 031c 	and.w	r3, r3, #28
 8007f68:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | BIT(1);
 8007f6a:	4b10      	ldr	r3, [pc, #64]	; (8007fac <eth_write_phy+0x64>)
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	02d9      	lsls	r1, r3, #11
 8007f72:	79bb      	ldrb	r3, [r7, #6]
 8007f74:	019b      	lsls	r3, r3, #6
 8007f76:	430b      	orrs	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	4a0c      	ldr	r2, [pc, #48]	; (8007fac <eth_write_phy+0x64>)
 8007f7c:	f043 0302 	orr.w	r3, r3, #2
 8007f80:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= BIT(0);
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <eth_write_phy+0x64>)
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	4a09      	ldr	r2, [pc, #36]	; (8007fac <eth_write_phy+0x64>)
 8007f88:	f043 0301 	orr.w	r3, r3, #1
 8007f8c:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007f8e:	bf00      	nop
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <eth_write_phy+0x64>)
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f9      	bne.n	8007f90 <eth_write_phy+0x48>
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40028000 	.word	0x40028000

08007fb0 <get_hclk>:

static uint32_t get_hclk(void) {
 8007fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	b08d      	sub	sp, #52	; 0x34
 8007fb6:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 8007fb8:	4e3c      	ldr	r6, [pc, #240]	; (80080ac <get_hclk+0xfc>)
 8007fba:	62be      	str	r6, [r7, #40]	; 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	62fe      	str	r6, [r7, #44]	; 0x2c
 8007fc0:	4e3b      	ldr	r6, [pc, #236]	; (80080b0 <get_hclk+0x100>)
 8007fc2:	627e      	str	r6, [r7, #36]	; 0x24
 8007fc4:	4e3b      	ldr	r6, [pc, #236]	; (80080b4 <get_hclk+0x104>)
 8007fc6:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 8007fc8:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007fca:	68b6      	ldr	r6, [r6, #8]
 8007fcc:	f006 0604 	and.w	r6, r6, #4
 8007fd0:	2e00      	cmp	r6, #0
 8007fd2:	d002      	beq.n	8007fda <get_hclk+0x2a>
    clk = hse;
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd8:	e049      	b.n	800806e <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 8007fda:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007fdc:	68b6      	ldr	r6, [r6, #8]
 8007fde:	f006 0608 	and.w	r6, r6, #8
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	d041      	beq.n	800806a <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 8007fe6:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007fe8:	6876      	ldr	r6, [r6, #4]
 8007fea:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8007fee:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8007ff0:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ff2:	6876      	ldr	r6, [r6, #4]
 8007ff4:	09b6      	lsrs	r6, r6, #6
 8007ff6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007ffa:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 8007ffc:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ffe:	6876      	ldr	r6, [r6, #4]
 8008000:	0c36      	lsrs	r6, r6, #16
 8008002:	f006 0603 	and.w	r6, r6, #3
 8008006:	3601      	adds	r6, #1
 8008008:	0076      	lsls	r6, r6, #1
 800800a:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 800800c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800800e:	6876      	ldr	r6, [r6, #4]
 8008010:	f406 0680 	and.w	r6, r6, #4194304	; 0x400000
 8008014:	2e00      	cmp	r6, #0
 8008016:	d001      	beq.n	800801c <get_hclk+0x6c>
 8008018:	6a3e      	ldr	r6, [r7, #32]
 800801a:	e000      	b.n	800801e <get_hclk+0x6e>
 800801c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800801e:	62fe      	str	r6, [r7, #44]	; 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8008020:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8008022:	f04f 0c00 	mov.w	ip, #0
 8008026:	4634      	mov	r4, r6
 8008028:	4665      	mov	r5, ip
 800802a:	69be      	ldr	r6, [r7, #24]
 800802c:	f04f 0c00 	mov.w	ip, #0
 8008030:	4632      	mov	r2, r6
 8008032:	4663      	mov	r3, ip
 8008034:	fb02 fc05 	mul.w	ip, r2, r5
 8008038:	fb04 f603 	mul.w	r6, r4, r3
 800803c:	4466      	add	r6, ip
 800803e:	fba4 0102 	umull	r0, r1, r4, r2
 8008042:	1873      	adds	r3, r6, r1
 8008044:	4619      	mov	r1, r3
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	2200      	movs	r2, #0
 800804a:	4698      	mov	r8, r3
 800804c:	4691      	mov	r9, r2
 800804e:	4642      	mov	r2, r8
 8008050:	464b      	mov	r3, r9
 8008052:	f7f8 fdc3 	bl	8000bdc <__aeabi_uldivmod>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4613      	mov	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	fbb2 f3f3 	udiv	r3, r2, r3
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008068:	e001      	b.n	800806e <get_hclk+0xbe>
  } else {
    clk = hsi;
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b07      	cmp	r3, #7
 800807e:	d801      	bhi.n	8008084 <get_hclk+0xd4>
 8008080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008082:	e00e      	b.n	80080a2 <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 8008084:	4a0c      	ldr	r2, [pc, #48]	; (80080b8 <get_hclk+0x108>)
 8008086:	1d3b      	adds	r3, r7, #4
 8008088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800808c:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3b08      	subs	r3, #8
 8008094:	3330      	adds	r3, #48	; 0x30
 8008096:	443b      	add	r3, r7
 8008098:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800809c:	461a      	mov	r2, r3
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	40d3      	lsrs	r3, r2
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3734      	adds	r7, #52	; 0x34
 80080a6:	46bd      	mov	sp, r7
 80080a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ac:	40023800 	.word	0x40023800
 80080b0:	00f42400 	.word	0x00f42400
 80080b4:	007a1200 	.word	0x007a1200
 80080b8:	08014620 	.word	0x08014620

080080bc <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 80080c2:	4a33      	ldr	r2, [pc, #204]	; (8008190 <guess_mdc_cr+0xd4>)
 80080c4:	f107 030c 	add.w	r3, r7, #12
 80080c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080cc:	6018      	str	r0, [r3, #0]
 80080ce:	3304      	adds	r3, #4
 80080d0:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 80080d2:	4a30      	ldr	r2, [pc, #192]	; (8008194 <guess_mdc_cr+0xd8>)
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080da:	6018      	str	r0, [r3, #0]
 80080dc:	3304      	adds	r3, #4
 80080de:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 80080e0:	f7ff ff66 	bl	8007fb0 <get_hclk>
 80080e4:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 80080e6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ea:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	4a2a      	ldr	r2, [pc, #168]	; (8008198 <guess_mdc_cr+0xdc>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d80d      	bhi.n	8008110 <guess_mdc_cr+0x54>
    MG_ERROR(("HCLK too low"));
 80080f4:	4b29      	ldr	r3, [pc, #164]	; (800819c <guess_mdc_cr+0xe0>)
 80080f6:	f641 3238 	movw	r2, #6968	; 0x1b38
 80080fa:	4929      	ldr	r1, [pc, #164]	; (80081a0 <guess_mdc_cr+0xe4>)
 80080fc:	2001      	movs	r0, #1
 80080fe:	f7fe f96b 	bl	80063d8 <mg_log_prefix>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d02e      	beq.n	8008166 <guess_mdc_cr+0xaa>
 8008108:	4826      	ldr	r0, [pc, #152]	; (80081a4 <guess_mdc_cr+0xe8>)
 800810a:	f7fe f9bf 	bl	800648c <mg_log>
 800810e:	e02a      	b.n	8008166 <guess_mdc_cr+0xaa>
  } else {
    for (int i = 0; i < 6; i++) {
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	e014      	b.n	8008140 <guess_mdc_cr+0x84>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 8008116:	1d3a      	adds	r2, r7, #4
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	4413      	add	r3, r2
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	fbb3 f3f2 	udiv	r3, r3, r2
 8008126:	4a20      	ldr	r2, [pc, #128]	; (80081a8 <guess_mdc_cr+0xec>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d806      	bhi.n	800813a <guess_mdc_cr+0x7e>
        result = crs[i];
 800812c:	f107 020c 	add.w	r2, r7, #12
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	4413      	add	r3, r2
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	61fb      	str	r3, [r7, #28]
        break;
 8008138:	e005      	b.n	8008146 <guess_mdc_cr+0x8a>
    for (int i = 0; i < 6; i++) {
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	3301      	adds	r3, #1
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2b05      	cmp	r3, #5
 8008144:	dde7      	ble.n	8008116 <guess_mdc_cr+0x5a>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	2b00      	cmp	r3, #0
 800814a:	da0c      	bge.n	8008166 <guess_mdc_cr+0xaa>
 800814c:	4b13      	ldr	r3, [pc, #76]	; (800819c <guess_mdc_cr+0xe0>)
 800814e:	f44f 52da 	mov.w	r2, #6976	; 0x1b40
 8008152:	4913      	ldr	r1, [pc, #76]	; (80081a0 <guess_mdc_cr+0xe4>)
 8008154:	2001      	movs	r0, #1
 8008156:	f7fe f93f 	bl	80063d8 <mg_log_prefix>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <guess_mdc_cr+0xaa>
 8008160:	4812      	ldr	r0, [pc, #72]	; (80081ac <guess_mdc_cr+0xf0>)
 8008162:	f7fe f993 	bl	800648c <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 8008166:	4b0d      	ldr	r3, [pc, #52]	; (800819c <guess_mdc_cr+0xe0>)
 8008168:	f641 3242 	movw	r2, #6978	; 0x1b42
 800816c:	490c      	ldr	r1, [pc, #48]	; (80081a0 <guess_mdc_cr+0xe4>)
 800816e:	2003      	movs	r0, #3
 8008170:	f7fe f932 	bl	80063d8 <mg_log_prefix>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <guess_mdc_cr+0xc8>
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	6979      	ldr	r1, [r7, #20]
 800817e:	480c      	ldr	r0, [pc, #48]	; (80081b0 <guess_mdc_cr+0xf4>)
 8008180:	f7fe f984 	bl	800648c <mg_log>
  return result;
 8008184:	69fb      	ldr	r3, [r7, #28]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	0801465c 	.word	0x0801465c
 8008194:	08014664 	.word	0x08014664
 8008198:	017d783f 	.word	0x017d783f
 800819c:	08014d48 	.word	0x08014d48
 80081a0:	08013374 	.word	0x08013374
 80081a4:	08014628 	.word	0x08014628
 80081a8:	00243d58 	.word	0x00243d58
 80081ac:	08014638 	.word	0x08014638
 80081b0:	08014648 	.word	0x08014648

080081b4 <mg_tcpip_driver_stm32_init>:

static bool mg_tcpip_driver_stm32_init(struct mg_tcpip_if *ifp) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32_data *d =
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32_data *) ifp->driver_data;
  s_ifp = ifp;
 80081c2:	4a6d      	ldr	r2, [pc, #436]	; (8008378 <mg_tcpip_driver_stm32_init+0x1c4>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	e032      	b.n	8008234 <mg_tcpip_driver_stm32_init+0x80>
    s_rxdesc[i][0] = BIT(31);                            // Own
 80081ce:	4a6b      	ldr	r2, [pc, #428]	; (800837c <mg_tcpip_driver_stm32_init+0x1c8>)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	4413      	add	r3, r2
 80081d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081da:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | BIT(14);       // 2nd address chained
 80081dc:	4a67      	ldr	r2, [pc, #412]	; (800837c <mg_tcpip_driver_stm32_init+0x1c8>)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	4413      	add	r3, r2
 80081e4:	3304      	adds	r3, #4
 80081e6:	f244 6204 	movw	r2, #17924	; 0x4604
 80081ea:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f240 6204 	movw	r2, #1540	; 0x604
 80081f2:	fb02 f303 	mul.w	r3, r2, r3
 80081f6:	4a62      	ldr	r2, [pc, #392]	; (8008380 <mg_tcpip_driver_stm32_init+0x1cc>)
 80081f8:	4413      	add	r3, r2
 80081fa:	4619      	mov	r1, r3
 80081fc:	4a5f      	ldr	r2, [pc, #380]	; (800837c <mg_tcpip_driver_stm32_init+0x1c8>)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	4413      	add	r3, r2
 8008204:	3308      	adds	r3, #8
 8008206:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	3301      	adds	r3, #1
 800820c:	425a      	negs	r2, r3
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	f002 0203 	and.w	r2, r2, #3
 8008216:	bf58      	it	pl
 8008218:	4253      	negpl	r3, r2
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	4a57      	ldr	r2, [pc, #348]	; (800837c <mg_tcpip_driver_stm32_init+0x1c8>)
 800821e:	4413      	add	r3, r2
 8008220:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 8008222:	4a56      	ldr	r2, [pc, #344]	; (800837c <mg_tcpip_driver_stm32_init+0x1c8>)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	4413      	add	r3, r2
 800822a:	330c      	adds	r3, #12
 800822c:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	3301      	adds	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b03      	cmp	r3, #3
 8008238:	ddc9      	ble.n	80081ce <mg_tcpip_driver_stm32_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800823a:	2300      	movs	r3, #0
 800823c:	613b      	str	r3, [r7, #16]
 800823e:	e023      	b.n	8008288 <mg_tcpip_driver_stm32_init+0xd4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f240 6204 	movw	r2, #1540	; 0x604
 8008246:	fb02 f303 	mul.w	r3, r2, r3
 800824a:	4a4e      	ldr	r2, [pc, #312]	; (8008384 <mg_tcpip_driver_stm32_init+0x1d0>)
 800824c:	4413      	add	r3, r2
 800824e:	4619      	mov	r1, r3
 8008250:	4a4d      	ldr	r2, [pc, #308]	; (8008388 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	4413      	add	r3, r2
 8008258:	3308      	adds	r3, #8
 800825a:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3301      	adds	r3, #1
 8008260:	425a      	negs	r2, r3
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	f002 0203 	and.w	r2, r2, #3
 800826a:	bf58      	it	pl
 800826c:	4253      	negpl	r3, r2
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	4a45      	ldr	r2, [pc, #276]	; (8008388 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008272:	4413      	add	r3, r2
 8008274:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 8008276:	4a44      	ldr	r2, [pc, #272]	; (8008388 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	4413      	add	r3, r2
 800827e:	330c      	adds	r3, #12
 8008280:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	3301      	adds	r3, #1
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b03      	cmp	r3, #3
 800828c:	ddd8      	ble.n	8008240 <mg_tcpip_driver_stm32_init+0x8c>
  }

  ETH->DMABMR |= BIT(0);                         // Software reset
 800828e:	4b3f      	ldr	r3, [pc, #252]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 8008290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3d      	ldr	r2, [pc, #244]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082a0:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & BIT(0)) != 0) (void) 0;  // Wait until done
 80082a2:	bf00      	nop
 80082a4:	4b39      	ldr	r3, [pc, #228]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 80082a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f7      	bne.n	80082a4 <mg_tcpip_driver_stm32_init+0xf0>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <mg_tcpip_driver_stm32_init+0x10e>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	da03      	bge.n	80082ca <mg_tcpip_driver_stm32_init+0x116>
 80082c2:	f7ff fefb 	bl	80080bc <guess_mdc_cr>
 80082c6:	4603      	mov	r3, r0
 80082c8:	e001      	b.n	80082ce <mg_tcpip_driver_stm32_init+0x11a>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60bb      	str	r3, [r7, #8]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4a2d      	ldr	r2, [pc, #180]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 80082d6:	f003 031c 	and.w	r3, r3, #28
 80082da:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = BIT(13) | BIT(16) | BIT(22) | BIT(23) | BIT(25);
  ETH->MACIMR = BIT(3) | BIT(9);  // Mask timestamp & PMT IT
 80082dc:	4b2b      	ldr	r3, [pc, #172]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 80082de:	f44f 7202 	mov.w	r2, #520	; 0x208
 80082e2:	63da      	str	r2, [r3, #60]	; 0x3c
  ETH->MACFCR = BIT(7);           // Disable zero quarta pause
 80082e4:	4b29      	ldr	r3, [pc, #164]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 80082e6:	2280      	movs	r2, #128	; 0x80
 80082e8:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = BIT(31);                            // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));           // Reset PHY
 80082ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80082ee:	2100      	movs	r1, #0
 80082f0:	2000      	movs	r0, #0
 80082f2:	f7ff fe29 	bl	8007f48 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));           // Set autonegotiation
 80082f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082fa:	2100      	movs	r1, #0
 80082fc:	2000      	movs	r0, #0
 80082fe:	f7ff fe23 	bl	8007f48 <eth_write_phy>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;     // RX descriptors
 8008302:	4a22      	ldr	r2, [pc, #136]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 8008304:	4b1d      	ldr	r3, [pc, #116]	; (800837c <mg_tcpip_driver_stm32_init+0x1c8>)
 8008306:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800830a:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;     // RX descriptors
 800830c:	4a1f      	ldr	r2, [pc, #124]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 800830e:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008310:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008314:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = BIT(6) | BIT(16);                      // RIE, NISE
 8008316:	4b1d      	ldr	r3, [pc, #116]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 8008318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831c:	461a      	mov	r2, r3
 800831e:	4b1c      	ldr	r3, [pc, #112]	; (8008390 <mg_tcpip_driver_stm32_init+0x1dc>)
 8008320:	61d3      	str	r3, [r2, #28]
  ETH->MACCR = BIT(2) | BIT(3) | BIT(11) | BIT(14);    // RE, TE, Duplex, Fast
 8008322:	4b1a      	ldr	r3, [pc, #104]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 8008324:	f644 020c 	movw	r2, #18444	; 0x480c
 8008328:	601a      	str	r2, [r3, #0]
  ETH->DMAOMR = BIT(1) | BIT(13) | BIT(21) | BIT(25);  // SR, ST, TSF, RSF
 800832a:	4b18      	ldr	r3, [pc, #96]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 800832c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008330:	461a      	mov	r2, r3
 8008332:	4b18      	ldr	r3, [pc, #96]	; (8008394 <mg_tcpip_driver_stm32_init+0x1e0>)
 8008334:	6193      	str	r3, [r2, #24]

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7912      	ldrb	r2, [r2, #4]
 8008340:	4611      	mov	r1, r2
 8008342:	4a12      	ldr	r2, [pc, #72]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
 8008344:	430b      	orrs	r3, r1
 8008346:	6413      	str	r3, [r2, #64]	; 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	78db      	ldrb	r3, [r3, #3]
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	789b      	ldrb	r3, [r3, #2]
 8008354:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008356:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	785b      	ldrb	r3, [r3, #1]
 800835c:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 800835e:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008366:	4a09      	ldr	r2, [pc, #36]	; (800838c <mg_tcpip_driver_stm32_init+0x1d8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008368:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800836a:	6453      	str	r3, [r2, #68]	; 0x44
  return true;
 800836c:	2301      	movs	r3, #1
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	200036c8 	.word	0x200036c8
 800837c:	20000624 	.word	0x20000624
 8008380:	200006a4 	.word	0x200006a4
 8008384:	20001eb4 	.word	0x20001eb4
 8008388:	20000664 	.word	0x20000664
 800838c:	40028000 	.word	0x40028000
 8008390:	00010040 	.word	0x00010040
 8008394:	02202002 	.word	0x02202002

08008398 <mg_tcpip_driver_stm32_tx>:

static size_t mg_tcpip_driver_stm32_tx(const void *buf, size_t len,
                                       struct mg_tcpip_if *ifp) {
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f240 6204 	movw	r2, #1540	; 0x604
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d911      	bls.n	80083d2 <mg_tcpip_driver_stm32_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 80083ae:	4b3d      	ldr	r3, [pc, #244]	; (80084a4 <mg_tcpip_driver_stm32_tx+0x10c>)
 80083b0:	f641 327b 	movw	r2, #7035	; 0x1b7b
 80083b4:	493c      	ldr	r1, [pc, #240]	; (80084a8 <mg_tcpip_driver_stm32_tx+0x110>)
 80083b6:	2001      	movs	r0, #1
 80083b8:	f7fe f80e 	bl	80063d8 <mg_log_prefix>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <mg_tcpip_driver_stm32_tx+0x34>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4619      	mov	r1, r3
 80083c6:	4839      	ldr	r0, [pc, #228]	; (80084ac <mg_tcpip_driver_stm32_tx+0x114>)
 80083c8:	f7fe f860 	bl	800648c <mg_log>
    len = 0;  // Frame is too big
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]
 80083d0:	e055      	b.n	800847e <mg_tcpip_driver_stm32_tx+0xe6>
  } else if ((s_txdesc[s_txno][0] & BIT(31))) {
 80083d2:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	4a37      	ldr	r2, [pc, #220]	; (80084b4 <mg_tcpip_driver_stm32_tx+0x11c>)
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	4413      	add	r3, r2
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da14      	bge.n	800840c <mg_tcpip_driver_stm32_tx+0x74>
    ifp->nerr++;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	671a      	str	r2, [r3, #112]	; 0x70
    MG_ERROR(("No free descriptors"));
 80083ec:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <mg_tcpip_driver_stm32_tx+0x10c>)
 80083ee:	f641 327f 	movw	r2, #7039	; 0x1b7f
 80083f2:	492d      	ldr	r1, [pc, #180]	; (80084a8 <mg_tcpip_driver_stm32_tx+0x110>)
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7fd ffef 	bl	80063d8 <mg_log_prefix>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <mg_tcpip_driver_stm32_tx+0x6e>
 8008400:	482d      	ldr	r0, [pc, #180]	; (80084b8 <mg_tcpip_driver_stm32_tx+0x120>)
 8008402:	f7fe f843 	bl	800648c <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 8008406:	2300      	movs	r3, #0
 8008408:	60bb      	str	r3, [r7, #8]
 800840a:	e038      	b.n	800847e <mg_tcpip_driver_stm32_tx+0xe6>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);     // Copy data
 800840c:	4b28      	ldr	r3, [pc, #160]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	f240 6304 	movw	r3, #1540	; 0x604
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	4a28      	ldr	r2, [pc, #160]	; (80084bc <mg_tcpip_driver_stm32_tx+0x124>)
 800841c:	4413      	add	r3, r2
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	68f9      	ldr	r1, [r7, #12]
 8008422:	4618      	mov	r0, r3
 8008424:	f00a f93b 	bl	801269e <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;  // Set data len
 8008428:	4b21      	ldr	r3, [pc, #132]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	4a21      	ldr	r2, [pc, #132]	; (80084b4 <mg_tcpip_driver_stm32_tx+0x11c>)
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = BIT(20) | BIT(28) | BIT(29);  // Chain,FS,LS
 8008438:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <mg_tcpip_driver_stm32_tx+0x11c>)
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	4413      	add	r3, r2
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <mg_tcpip_driver_stm32_tx+0x128>)
 8008444:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= BIT(31);  // Set OWN bit - let DMA take over
 8008446:	4b1a      	ldr	r3, [pc, #104]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	4a1a      	ldr	r2, [pc, #104]	; (80084b4 <mg_tcpip_driver_stm32_tx+0x11c>)
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	4413      	add	r3, r2
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a17      	ldr	r2, [pc, #92]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 8008454:	7812      	ldrb	r2, [r2, #0]
 8008456:	4610      	mov	r0, r2
 8008458:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800845c:	4915      	ldr	r1, [pc, #84]	; (80084b4 <mg_tcpip_driver_stm32_tx+0x11c>)
 800845e:	0103      	lsls	r3, r0, #4
 8008460:	440b      	add	r3, r1
 8008462:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 8008464:	4b12      	ldr	r3, [pc, #72]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b03      	cmp	r3, #3
 8008476:	d902      	bls.n	800847e <mg_tcpip_driver_stm32_tx+0xe6>
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <mg_tcpip_driver_stm32_tx+0x118>)
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
  }
  DSB();                         // ensure descriptors have been written
 800847e:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = BIT(2) | BIT(5);  // Clear any prior TBUS/TUS
 8008482:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <mg_tcpip_driver_stm32_tx+0x12c>)
 8008484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008488:	461a      	mov	r2, r3
 800848a:	2324      	movs	r3, #36	; 0x24
 800848c:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;              // and resume
 800848e:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <mg_tcpip_driver_stm32_tx+0x12c>)
 8008490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008494:	461a      	mov	r2, r3
 8008496:	2300      	movs	r3, #0
 8008498:	6053      	str	r3, [r2, #4]
  return len;
 800849a:	68bb      	ldr	r3, [r7, #8]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	08014d58 	.word	0x08014d58
 80084a8:	08013374 	.word	0x08013374
 80084ac:	0801466c 	.word	0x0801466c
 80084b0:	200036c4 	.word	0x200036c4
 80084b4:	20000664 	.word	0x20000664
 80084b8:	08014680 	.word	0x08014680
 80084bc:	20001eb4 	.word	0x20001eb4
 80084c0:	30100000 	.word	0x30100000
 80084c4:	40028000 	.word	0x40028000

080084c8 <mg_tcpip_driver_stm32_up>:

static bool mg_tcpip_driver_stm32_up(struct mg_tcpip_if *ifp) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 80084d0:	2101      	movs	r1, #1
 80084d2:	2000      	movs	r0, #0
 80084d4:	f7ff fd08 	bl	8007ee8 <eth_read_phy>
 80084d8:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	089b      	lsrs	r3, r3, #2
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bf14      	ite	ne
 80084e6:	2301      	movne	r3, #1
 80084e8:	2300      	moveq	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d13f      	bne.n	8008576 <mg_tcpip_driver_stm32_up+0xae>
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d03c      	beq.n	8008576 <mg_tcpip_driver_stm32_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 80084fc:	211f      	movs	r1, #31
 80084fe:	2000      	movs	r0, #0
 8008500:	f7ff fcf2 	bl	8007ee8 <eth_read_phy>
 8008504:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(11);  // 100M, Full-duplex
 8008506:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <mg_tcpip_driver_stm32_up+0xb8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 800850e:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d103      	bne.n	8008522 <mg_tcpip_driver_stm32_up+0x5a>
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008520:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(11);      // Half-duplex
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <mg_tcpip_driver_stm32_up+0x6c>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008532:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8008534:	4a12      	ldr	r2, [pc, #72]	; (8008580 <mg_tcpip_driver_stm32_up+0xb8>)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <mg_tcpip_driver_stm32_up+0xbc>)
 800853c:	f641 3298 	movw	r2, #7064	; 0x1b98
 8008540:	4911      	ldr	r1, [pc, #68]	; (8008588 <mg_tcpip_driver_stm32_up+0xc0>)
 8008542:	2003      	movs	r0, #3
 8008544:	f7fd ff48 	bl	80063d8 <mg_log_prefix>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d013      	beq.n	8008576 <mg_tcpip_driver_stm32_up+0xae>
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <mg_tcpip_driver_stm32_up+0x94>
 8008558:	2164      	movs	r1, #100	; 0x64
 800855a:	e000      	b.n	800855e <mg_tcpip_driver_stm32_up+0x96>
 800855c:	210a      	movs	r1, #10
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <mg_tcpip_driver_stm32_up+0xa4>
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <mg_tcpip_driver_stm32_up+0xc4>)
 800856a:	e000      	b.n	800856e <mg_tcpip_driver_stm32_up+0xa6>
 800856c:	4b08      	ldr	r3, [pc, #32]	; (8008590 <mg_tcpip_driver_stm32_up+0xc8>)
 800856e:	461a      	mov	r2, r3
 8008570:	4808      	ldr	r0, [pc, #32]	; (8008594 <mg_tcpip_driver_stm32_up+0xcc>)
 8008572:	f7fd ff8b 	bl	800648c <mg_log>
              maccr & BIT(11) ? "full" : "half"));
  }
  return up;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40028000 	.word	0x40028000
 8008584:	08014d74 	.word	0x08014d74
 8008588:	08013374 	.word	0x08013374
 800858c:	08014694 	.word	0x08014694
 8008590:	0801469c 	.word	0x0801469c
 8008594:	080146a4 	.word	0x080146a4

08008598 <ETH_IRQHandler>:

void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
  if (ETH->DMASR & BIT(6)) {             // Frame received, loop
 800859e:	4b3d      	ldr	r3, [pc, #244]	; (8008694 <ETH_IRQHandler+0xfc>)
 80085a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d061      	beq.n	8008672 <ETH_IRQHandler+0xda>
    ETH->DMASR = BIT(16) | BIT(6);       // Clear flag
 80085ae:	4b39      	ldr	r3, [pc, #228]	; (8008694 <ETH_IRQHandler+0xfc>)
 80085b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b4:	461a      	mov	r2, r3
 80085b6:	4b38      	ldr	r3, [pc, #224]	; (8008698 <ETH_IRQHandler+0x100>)
 80085b8:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80085ba:	2300      	movs	r3, #0
 80085bc:	607b      	str	r3, [r7, #4]
 80085be:	e053      	b.n	8008668 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 80085c0:	4b36      	ldr	r3, [pc, #216]	; (800869c <ETH_IRQHandler+0x104>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	4a36      	ldr	r2, [pc, #216]	; (80086a0 <ETH_IRQHandler+0x108>)
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	4413      	add	r3, r2
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	db4f      	blt.n	8008670 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 80085d0:	4b32      	ldr	r3, [pc, #200]	; (800869c <ETH_IRQHandler+0x104>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4a32      	ldr	r2, [pc, #200]	; (80086a0 <ETH_IRQHandler+0x108>)
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	4413      	add	r3, r2
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085e4:	d128      	bne.n	8008638 <ETH_IRQHandler+0xa0>
          !(s_rxdesc[s_rxno][0] & BIT(15))) {  // skip partial/errored frames
 80085e6:	4b2d      	ldr	r3, [pc, #180]	; (800869c <ETH_IRQHandler+0x104>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	4a2d      	ldr	r2, [pc, #180]	; (80086a0 <ETH_IRQHandler+0x108>)
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	4413      	add	r3, r2
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d11e      	bne.n	8008638 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (BIT(14) - 1));
 80085fa:	4b28      	ldr	r3, [pc, #160]	; (800869c <ETH_IRQHandler+0x104>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	4a28      	ldr	r2, [pc, #160]	; (80086a0 <ETH_IRQHandler+0x108>)
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	4413      	add	r3, r2
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800860c:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 800860e:	4b23      	ldr	r3, [pc, #140]	; (800869c <ETH_IRQHandler+0x104>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	f240 6304 	movw	r3, #1540	; 0x604
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	4a21      	ldr	r2, [pc, #132]	; (80086a4 <ETH_IRQHandler+0x10c>)
 800861e:	1898      	adds	r0, r3, r2
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b04      	cmp	r3, #4
 8008624:	d902      	bls.n	800862c <ETH_IRQHandler+0x94>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	3b04      	subs	r3, #4
 800862a:	e000      	b.n	800862e <ETH_IRQHandler+0x96>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <ETH_IRQHandler+0x110>)
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	f002 faac 	bl	800ab90 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = BIT(31);
 8008638:	4b18      	ldr	r3, [pc, #96]	; (800869c <ETH_IRQHandler+0x104>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	4a18      	ldr	r2, [pc, #96]	; (80086a0 <ETH_IRQHandler+0x108>)
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	4413      	add	r3, r2
 8008642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008646:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8008648:	4b14      	ldr	r3, [pc, #80]	; (800869c <ETH_IRQHandler+0x104>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	b2da      	uxtb	r2, r3
 8008650:	4b12      	ldr	r3, [pc, #72]	; (800869c <ETH_IRQHandler+0x104>)
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	4b11      	ldr	r3, [pc, #68]	; (800869c <ETH_IRQHandler+0x104>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d902      	bls.n	8008662 <ETH_IRQHandler+0xca>
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <ETH_IRQHandler+0x104>)
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3301      	adds	r3, #1
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b09      	cmp	r3, #9
 800866c:	d9a8      	bls.n	80085c0 <ETH_IRQHandler+0x28>
 800866e:	e000      	b.n	8008672 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8008670:	bf00      	nop
    }
  }
  ETH->DMASR = BIT(7);  // Clear possible RBUS while processing
 8008672:	4b08      	ldr	r3, [pc, #32]	; (8008694 <ETH_IRQHandler+0xfc>)
 8008674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008678:	461a      	mov	r2, r3
 800867a:	2380      	movs	r3, #128	; 0x80
 800867c:	6153      	str	r3, [r2, #20]
  ETH->DMARPDR = 0;     // and resume RX
 800867e:	4b05      	ldr	r3, [pc, #20]	; (8008694 <ETH_IRQHandler+0xfc>)
 8008680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008684:	461a      	mov	r2, r3
 8008686:	2300      	movs	r3, #0
 8008688:	6093      	str	r3, [r2, #8]
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40028000 	.word	0x40028000
 8008698:	00010040 	.word	0x00010040
 800869c:	200036c5 	.word	0x200036c5
 80086a0:	20000624 	.word	0x20000624
 80086a4:	200006a4 	.word	0x200006a4
 80086a8:	200036c8 	.word	0x200036c8

080086ac <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 80086ac:	b590      	push	{r4, r7, lr}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	441a      	add	r2, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	461a      	mov	r2, r3
 80086c6:	68fc      	ldr	r4, [r7, #12]
 80086c8:	463b      	mov	r3, r7
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fd68 	bl	80071a2 <mg_str_n>
 80086d2:	f104 0308 	add.w	r3, r4, #8
 80086d6:	463a      	mov	r2, r7
 80086d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086dc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd90      	pop	{r4, r7, pc}

080086e8 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e016      	b.n	800872c <csumup+0x44>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <csumup+0x2c>
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	461a      	mov	r2, r3
 8008712:	e005      	b.n	8008720 <csumup+0x38>
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	461a      	mov	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	3301      	adds	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d3e4      	bcc.n	80086fe <csumup+0x16>
  return sum;
 8008734:	68fb      	ldr	r3, [r7, #12]
}
 8008736:	4618      	mov	r0, r3
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800874a:	e005      	b.n	8008758 <csumfin+0x16>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	0c1b      	lsrs	r3, r3, #16
 8008754:	4413      	add	r3, r2
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	0c1b      	lsrs	r3, r3, #16
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f5      	bne.n	800874c <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	b29b      	uxth	r3, r3
 8008764:	43db      	mvns	r3, r3
 8008766:	b29b      	uxth	r3, r3
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fb54 	bl	8007e16 <mg_ntohs>
 800876e:	4603      	mov	r3, r0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	2000      	movs	r0, #0
 8008788:	f7ff ffae 	bl	80086e8 <csumup>
 800878c:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff ffd7 	bl	8008742 <csumfin>
 8008794:	4603      	mov	r3, r0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6950      	ldr	r0, [r2, #20]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	4798      	blx	r3
 80087b8:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d104      	bne.n	80087cc <ether_output+0x2e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	330e      	adds	r3, #14
 80087ea:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2206      	movs	r2, #6
 80087f0:	21ff      	movs	r1, #255	; 0xff
 80087f2:	4618      	mov	r0, r3
 80087f4:	f009 fe89 	bl	801250a <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3306      	adds	r3, #6
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	2206      	movs	r2, #6
 8008800:	4618      	mov	r0, r3
 8008802:	f009 ff4c 	bl	801269e <memcpy>
  eth->type = mg_htons(0x806);
 8008806:	f640 0006 	movw	r0, #2054	; 0x806
 800880a:	f7ff fb04 	bl	8007e16 <mg_ntohs>
 800880e:	4603      	mov	r3, r0
 8008810:	461a      	mov	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8008816:	221c      	movs	r2, #28
 8008818:	2100      	movs	r1, #0
 800881a:	68b8      	ldr	r0, [r7, #8]
 800881c:	f009 fe75 	bl	801250a <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8008820:	2001      	movs	r0, #1
 8008822:	f7ff faf8 	bl	8007e16 <mg_ntohs>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008832:	f7ff faf0 	bl	8007e16 <mg_ntohs>
 8008836:	4603      	mov	r3, r0
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	805a      	strh	r2, [r3, #2]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2206      	movs	r2, #6
 8008842:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2204      	movs	r2, #4
 8008848:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800884a:	2001      	movs	r0, #1
 800884c:	f7ff fae3 	bl	8007e16 <mg_ntohs>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	80da      	strh	r2, [r3, #6]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	619a      	str	r2, [r3, #24]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	3308      	adds	r3, #8
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	2206      	movs	r2, #6
 8008870:	4618      	mov	r0, r3
 8008872:	f009 ff14 	bl	801269e <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f103 021c 	add.w	r2, r3, #28
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff ff8b 	bl	800879e <ether_output>
}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d138      	bne.n	8008914 <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 80088a2:	4b35      	ldr	r3, [pc, #212]	; (8008978 <onstatechange+0xe8>)
 80088a4:	f641 62dd 	movw	r2, #7901	; 0x1edd
 80088a8:	4934      	ldr	r1, [pc, #208]	; (800897c <onstatechange+0xec>)
 80088aa:	2002      	movs	r0, #2
 80088ac:	f7fd fd94 	bl	80063d8 <mg_log_prefix>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d006      	beq.n	80088c4 <onstatechange+0x34>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3308      	adds	r3, #8
 80088ba:	461a      	mov	r2, r3
 80088bc:	4930      	ldr	r1, [pc, #192]	; (8008980 <onstatechange+0xf0>)
 80088be:	4831      	ldr	r0, [pc, #196]	; (8008984 <onstatechange+0xf4>)
 80088c0:	f7fd fde4 	bl	800648c <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 80088c4:	4b2c      	ldr	r3, [pc, #176]	; (8008978 <onstatechange+0xe8>)
 80088c6:	f641 62de 	movw	r2, #7902	; 0x1ede
 80088ca:	492c      	ldr	r1, [pc, #176]	; (800897c <onstatechange+0xec>)
 80088cc:	2002      	movs	r0, #2
 80088ce:	f7fd fd83 	bl	80063d8 <mg_log_prefix>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d006      	beq.n	80088e6 <onstatechange+0x56>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3310      	adds	r3, #16
 80088dc:	461a      	mov	r2, r3
 80088de:	4928      	ldr	r1, [pc, #160]	; (8008980 <onstatechange+0xf0>)
 80088e0:	4829      	ldr	r0, [pc, #164]	; (8008988 <onstatechange+0xf8>)
 80088e2:	f7fd fdd3 	bl	800648c <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 80088e6:	4b24      	ldr	r3, [pc, #144]	; (8008978 <onstatechange+0xe8>)
 80088e8:	f641 62df 	movw	r2, #7903	; 0x1edf
 80088ec:	4923      	ldr	r1, [pc, #140]	; (800897c <onstatechange+0xec>)
 80088ee:	2002      	movs	r0, #2
 80088f0:	f7fd fd72 	bl	80063d8 <mg_log_prefix>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <onstatechange+0x76>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	461a      	mov	r2, r3
 80088fe:	4923      	ldr	r1, [pc, #140]	; (800898c <onstatechange+0xfc>)
 8008900:	4823      	ldr	r0, [pc, #140]	; (8008990 <onstatechange+0x100>)
 8008902:	f7fd fdc3 	bl	800648c <mg_log>
    arp_ask(ifp, ifp->gw);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff ff62 	bl	80087d6 <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 8008912:	e02c      	b.n	800896e <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800891a:	2b01      	cmp	r3, #1
 800891c:	d115      	bne.n	800894a <onstatechange+0xba>
    MG_ERROR(("Link up"));
 800891e:	4b16      	ldr	r3, [pc, #88]	; (8008978 <onstatechange+0xe8>)
 8008920:	f641 62e2 	movw	r2, #7906	; 0x1ee2
 8008924:	4915      	ldr	r1, [pc, #84]	; (800897c <onstatechange+0xec>)
 8008926:	2001      	movs	r0, #1
 8008928:	f7fd fd56 	bl	80063d8 <mg_log_prefix>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <onstatechange+0xa8>
 8008932:	4818      	ldr	r0, [pc, #96]	; (8008994 <onstatechange+0x104>)
 8008934:	f7fd fdaa 	bl	800648c <mg_log>
    srand((unsigned int) mg_millis());
 8008938:	f7ff fabe 	bl	8007eb8 <mg_millis>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4613      	mov	r3, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f009 fbde 	bl	8012104 <srand>
}
 8008948:	e011      	b.n	800896e <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10c      	bne.n	800896e <onstatechange+0xde>
    MG_ERROR(("Link down"));
 8008954:	4b08      	ldr	r3, [pc, #32]	; (8008978 <onstatechange+0xe8>)
 8008956:	f641 62e5 	movw	r2, #7909	; 0x1ee5
 800895a:	4908      	ldr	r1, [pc, #32]	; (800897c <onstatechange+0xec>)
 800895c:	2001      	movs	r0, #1
 800895e:	f7fd fd3b 	bl	80063d8 <mg_log_prefix>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <onstatechange+0xde>
 8008968:	480b      	ldr	r0, [pc, #44]	; (8008998 <onstatechange+0x108>)
 800896a:	f7fd fd8f 	bl	800648c <mg_log>
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	08014d90 	.word	0x08014d90
 800897c:	08013374 	.word	0x08013374
 8008980:	08006c29 	.word	0x08006c29
 8008984:	080146bc 	.word	0x080146bc
 8008988:	080146cc 	.word	0x080146cc
 800898c:	08006ced 	.word	0x08006ced
 8008990:	080146dc 	.word	0x080146dc
 8008994:	080146ec 	.word	0x080146ec
 8008998:	080146f4 	.word	0x080146f4

0800899c <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	330e      	adds	r3, #14
 80089b6:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2206      	movs	r2, #6
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	4618      	mov	r0, r3
 80089c0:	f009 fe6d 	bl	801269e <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	3306      	adds	r3, #6
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	2206      	movs	r2, #6
 80089cc:	4618      	mov	r0, r3
 80089ce:	f009 fe66 	bl	801269e <memcpy>
  eth->type = mg_htons(0x800);
 80089d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80089d6:	f7ff fa1e 	bl	8007e16 <mg_ntohs>
 80089da:	4603      	mov	r3, r0
 80089dc:	461a      	mov	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 80089e2:	2214      	movs	r2, #20
 80089e4:	2100      	movs	r1, #0
 80089e6:	6938      	ldr	r0, [r7, #16]
 80089e8:	f009 fd8f 	bl	801250a <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2245      	movs	r2, #69	; 0x45
 80089f0:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089fa:	719a      	strb	r2, [r3, #6]
 80089fc:	2200      	movs	r2, #0
 80089fe:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	3314      	adds	r3, #20
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff fa04 	bl	8007e16 <mg_ntohs>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	461a      	mov	r2, r3
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2240      	movs	r2, #64	; 0x40
 8008a1a:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	79fa      	ldrb	r2, [r7, #7]
 8008a20:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	6a3a      	ldr	r2, [r7, #32]
 8008a2c:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8008a2e:	2114      	movs	r1, #20
 8008a30:	6938      	ldr	r0, [r7, #16]
 8008a32:	f7ff fea1 	bl	8008778 <ipcsum>
 8008a36:	4603      	mov	r3, r0
 8008a38:	461a      	mov	r2, r3
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	815a      	strh	r2, [r3, #10]
  return ip;
 8008a3e:	693b      	ldr	r3, [r7, #16]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	; 0x28
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	3308      	adds	r3, #8
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2211      	movs	r2, #17
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff ff98 	bl	800899c <tx_ip>
 8008a6c:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3314      	adds	r3, #20
 8008a72:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	887a      	ldrh	r2, [r7, #2]
 8008a78:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a7e:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8008a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3308      	adds	r3, #8
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff f9c4 	bl	8007e16 <mg_ntohs>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	461a      	mov	r2, r3
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	719a      	strb	r2, [r3, #6]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	69b9      	ldr	r1, [r7, #24]
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f7ff fe1f 	bl	80086e8 <csumup>
 8008aaa:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8008aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ab0:	6978      	ldr	r0, [r7, #20]
 8008ab2:	f7ff fe19 	bl	80086e8 <csumup>
 8008ab6:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	330c      	adds	r3, #12
 8008abc:	2204      	movs	r2, #4
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6978      	ldr	r0, [r7, #20]
 8008ac2:	f7ff fe11 	bl	80086e8 <csumup>
 8008ac6:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	3310      	adds	r3, #16
 8008acc:	2204      	movs	r2, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6978      	ldr	r0, [r7, #20]
 8008ad2:	f7ff fe09 	bl	80086e8 <csumup>
 8008ad6:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	7a5b      	ldrb	r3, [r3, #9]
 8008adc:	461a      	mov	r2, r3
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	441a      	add	r2, r3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 8008aea:	6978      	ldr	r0, [r7, #20]
 8008aec:	f7ff fe29 	bl	8008742 <csumfin>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	3308      	adds	r3, #8
 8008afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b00:	4618      	mov	r0, r3
 8008b02:	f009 fce8 	bl	80124d6 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	332a      	adds	r3, #42	; 0x2a
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f7ff fe46 	bl	800879e <ether_output>
}
 8008b12:	bf00      	nop
 8008b14:	3720      	adds	r7, #32
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8008b1c:	b5b0      	push	{r4, r5, r7, lr}
 8008b1e:	b0cc      	sub	sp, #304	; 0x130
 8008b20:	af04      	add	r7, sp, #16
 8008b22:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008b26:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8008b2a:	6020      	str	r0, [r4, #0]
 8008b2c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008b30:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8008b34:	6001      	str	r1, [r0, #0]
 8008b36:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8008b3a:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8008b3e:	600a      	str	r2, [r1, #0]
 8008b40:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008b44:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008b48:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8008b4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008b52:	4a38      	ldr	r2, [pc, #224]	; (8008c34 <tx_dhcp+0x118>)
 8008b54:	4618      	mov	r0, r3
 8008b56:	4611      	mov	r1, r2
 8008b58:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f009 fd9e 	bl	801269e <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8008b62:	4835      	ldr	r0, [pc, #212]	; (8008c38 <tx_dhcp+0x11c>)
 8008b64:	f7ff f93e 	bl	8007de4 <mg_ntohl>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008b72:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8008b76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	331c      	adds	r3, #28
 8008b86:	2206      	movs	r2, #6
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f009 fd88 	bl	801269e <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8008b8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3302      	adds	r3, #2
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ba2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ba6:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	33f0      	adds	r3, #240	; 0xf0
 8008bae:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008bb2:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f009 fd71 	bl	801269e <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8008bbc:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <tx_dhcp+0xbc>
 8008bc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008bcc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008bd0:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8008bd8:	2044      	movs	r0, #68	; 0x44
 8008bda:	f7ff f91c 	bl	8007e16 <mg_ntohs>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461d      	mov	r5, r3
 8008be2:	2043      	movs	r0, #67	; 0x43
 8008be4:	f7ff f917 	bl	8007e16 <mg_ntohs>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461c      	mov	r4, r3
 8008bec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bf0:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008bf4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bf8:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8008bfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c00:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008c04:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	f107 0310 	add.w	r3, r7, #16
 8008c0e:	9302      	str	r3, [sp, #8]
 8008c10:	9401      	str	r4, [sp, #4]
 8008c12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	462b      	mov	r3, r5
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	6809      	ldr	r1, [r1, #0]
 8008c24:	6800      	ldr	r0, [r0, #0]
 8008c26:	f7ff ff0f 	bl	8008a48 <tx_udp>
         sizeof(dhcp));
}
 8008c2a:	bf00      	nop
 8008c2c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bdb0      	pop	{r4, r5, r7, pc}
 8008c34:	08014700 	.word	0x08014700
 8008c38:	63825363 	.word	0x63825363

08008c3c <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8008c3c:	b5b0      	push	{r4, r5, r7, lr}
 8008c3e:	b090      	sub	sp, #64	; 0x40
 8008c40:	af04      	add	r7, sp, #16
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8008c48:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <tx_dhcp_request_sel+0x74>)
 8008c4a:	f107 0414 	add.w	r4, r7, #20
 8008c4e:	461d      	mov	r5, r3
 8008c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c58:	c403      	stmia	r4!, {r0, r1}
 8008c5a:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 8008c5c:	f107 0314 	add.w	r3, r7, #20
 8008c60:	330e      	adds	r3, #14
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 8008c66:	f107 0314 	add.w	r3, r7, #20
 8008c6a:	3314      	adds	r3, #20
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008c70:	2300      	movs	r3, #0
 8008c72:	9302      	str	r3, [sp, #8]
 8008c74:	2319      	movs	r3, #25
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c82:	2200      	movs	r2, #0
 8008c84:	490b      	ldr	r1, [pc, #44]	; (8008cb4 <tx_dhcp_request_sel+0x78>)
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7ff ff48 	bl	8008b1c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <tx_dhcp_request_sel+0x7c>)
 8008c8e:	f641 7231 	movw	r2, #7985	; 0x1f31
 8008c92:	490a      	ldr	r1, [pc, #40]	; (8008cbc <tx_dhcp_request_sel+0x80>)
 8008c94:	2003      	movs	r0, #3
 8008c96:	f7fd fb9f 	bl	80063d8 <mg_log_prefix>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <tx_dhcp_request_sel+0x6a>
 8008ca0:	4807      	ldr	r0, [pc, #28]	; (8008cc0 <tx_dhcp_request_sel+0x84>)
 8008ca2:	f7fd fbf3 	bl	800648c <mg_log>
}
 8008ca6:	bf00      	nop
 8008ca8:	3730      	adds	r7, #48	; 0x30
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bdb0      	pop	{r4, r5, r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	08014820 	.word	0x08014820
 8008cb4:	08014c68 	.word	0x08014c68
 8008cb8:	08014da0 	.word	0x08014da0
 8008cbc:	08013374 	.word	0x08013374
 8008cc0:	08014810 	.word	0x08014810

08008cc4 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	; 0x28
 8008cc8:	af04      	add	r7, sp, #16
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <tx_dhcp_request_re+0x50>)
 8008cd4:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	9302      	str	r3, [sp, #8]
 8008cda:	2304      	movs	r3, #4
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	f107 0314 	add.w	r3, r7, #20
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f7ff ff16 	bl	8008b1c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <tx_dhcp_request_re+0x54>)
 8008cf2:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8008cf6:	4909      	ldr	r1, [pc, #36]	; (8008d1c <tx_dhcp_request_re+0x58>)
 8008cf8:	2003      	movs	r0, #3
 8008cfa:	f7fd fb6d 	bl	80063d8 <mg_log_prefix>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <tx_dhcp_request_re+0x46>
 8008d04:	4806      	ldr	r0, [pc, #24]	; (8008d20 <tx_dhcp_request_re+0x5c>)
 8008d06:	f7fd fbc1 	bl	800648c <mg_log>
}
 8008d0a:	bf00      	nop
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	ff030135 	.word	0xff030135
 8008d18:	08014db4 	.word	0x08014db4
 8008d1c:	08013374 	.word	0x08013374
 8008d20:	08014810 	.word	0x08014810

08008d24 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b088      	sub	sp, #32
 8008d28:	af04      	add	r7, sp, #16
 8008d2a:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 8008d2c:	4a14      	ldr	r2, [pc, #80]	; (8008d80 <tx_dhcp_discover+0x5c>)
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d36:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9302      	str	r3, [sp, #8]
 8008d3e:	2308      	movs	r3, #8
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	f107 0308 	add.w	r3, r7, #8
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	490d      	ldr	r1, [pc, #52]	; (8008d84 <tx_dhcp_discover+0x60>)
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fee3 	bl	8008b1c <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <tx_dhcp_discover+0x64>)
 8008d58:	f641 7246 	movw	r2, #8006	; 0x1f46
 8008d5c:	490b      	ldr	r1, [pc, #44]	; (8008d8c <tx_dhcp_discover+0x68>)
 8008d5e:	2003      	movs	r0, #3
 8008d60:	f7fd fb3a 	bl	80063d8 <mg_log_prefix>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <tx_dhcp_discover+0x52>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	4908      	ldr	r1, [pc, #32]	; (8008d90 <tx_dhcp_discover+0x6c>)
 8008d70:	4808      	ldr	r0, [pc, #32]	; (8008d94 <tx_dhcp_discover+0x70>)
 8008d72:	f7fd fb8b 	bl	800648c <mg_log>
}
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	0801485c 	.word	0x0801485c
 8008d84:	08014c68 	.word	0x08014c68
 8008d88:	08014dc8 	.word	0x08014dc8
 8008d8c:	08013374 	.word	0x08013374
 8008d90:	08006ced 	.word	0x08006ced
 8008d94:	0801483c 	.word	0x0801483c

08008d98 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e03e      	b.n	8008e30 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00b      	beq.n	8008dda <getpeer+0x42>
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d007      	beq.n	8008dda <getpeer+0x42>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	8b1a      	ldrh	r2, [r3, #24]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	885b      	ldrh	r3, [r3, #2]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d02e      	beq.n	8008e38 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11f      	bne.n	8008e2a <getpeer+0x92>
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01b      	beq.n	8008e2a <getpeer+0x92>
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	8b1a      	ldrh	r2, [r3, #24]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	885b      	ldrh	r3, [r3, #2]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d113      	bne.n	8008e2a <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e0c:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008e0e:	79fa      	ldrb	r2, [r7, #7]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d10a      	bne.n	8008e2a <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10f      	bne.n	8008e3a <getpeer+0xa2>
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d007      	beq.n	8008e3a <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1bd      	bne.n	8008db2 <getpeer+0x1a>
 8008e36:	e000      	b.n	8008e3a <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008e38:	bf00      	nop
      break;
  }
  return c;
 8008e3a:	697b      	ldr	r3, [r7, #20]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008e48:	b5b0      	push	{r4, r5, r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	88db      	ldrh	r3, [r3, #6]
 8008e58:	b29c      	uxth	r4, r3
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	f7fe ffdb 	bl	8007e16 <mg_ntohs>
 8008e60:	4603      	mov	r3, r0
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d176      	bne.n	8008f54 <rx_arp+0x10c>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d16f      	bne.n	8008f54 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	330e      	adds	r3, #14
 8008e7e:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8008e80:	6978      	ldr	r0, [r7, #20]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	3306      	adds	r3, #6
 8008e88:	2206      	movs	r2, #6
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f009 fc07 	bl	801269e <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	3306      	adds	r3, #6
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	2206      	movs	r2, #6
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f009 fc00 	bl	801269e <memcpy>
    eth->type = mg_htons(0x806);
 8008e9e:	f640 0006 	movw	r0, #2054	; 0x806
 8008ea2:	f7fe ffb8 	bl	8007e16 <mg_ntohs>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	699a      	ldr	r2, [r3, #24]
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	6814      	ldr	r4, [r2, #0]
 8008eb6:	6850      	ldr	r0, [r2, #4]
 8008eb8:	6891      	ldr	r1, [r2, #8]
 8008eba:	68d5      	ldr	r5, [r2, #12]
 8008ebc:	601c      	str	r4, [r3, #0]
 8008ebe:	6058      	str	r0, [r3, #4]
 8008ec0:	6099      	str	r1, [r3, #8]
 8008ec2:	60dd      	str	r5, [r3, #12]
 8008ec4:	6914      	ldr	r4, [r2, #16]
 8008ec6:	6950      	ldr	r0, [r2, #20]
 8008ec8:	6991      	ldr	r1, [r2, #24]
 8008eca:	611c      	str	r4, [r3, #16]
 8008ecc:	6158      	str	r0, [r3, #20]
 8008ece:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8008ed0:	2002      	movs	r0, #2
 8008ed2:	f7fe ffa0 	bl	8007e16 <mg_ntohs>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	461a      	mov	r2, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f103 0012 	add.w	r0, r3, #18
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	3308      	adds	r3, #8
 8008eea:	2206      	movs	r2, #6
 8008eec:	4619      	mov	r1, r3
 8008eee:	f009 fbd6 	bl	801269e <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	2206      	movs	r2, #6
 8008efa:	4618      	mov	r0, r3
 8008efc:	f009 fbcf 	bl	801269e <memcpy>
    arp->tpa = pkt->arp->spa;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 8008f16:	4b46      	ldr	r3, [pc, #280]	; (8009030 <rx_arp+0x1e8>)
 8008f18:	f641 7265 	movw	r2, #8037	; 0x1f65
 8008f1c:	4945      	ldr	r1, [pc, #276]	; (8009034 <rx_arp+0x1ec>)
 8008f1e:	2003      	movs	r0, #3
 8008f20:	f7fd fa5a 	bl	80063d8 <mg_log_prefix>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <rx_arp+0xf8>
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f103 0218 	add.w	r2, r3, #24
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3308      	adds	r3, #8
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	4b40      	ldr	r3, [pc, #256]	; (8009038 <rx_arp+0x1f0>)
 8008f38:	493f      	ldr	r1, [pc, #252]	; (8009038 <rx_arp+0x1f0>)
 8008f3a:	4840      	ldr	r0, [pc, #256]	; (800903c <rx_arp+0x1f4>)
 8008f3c:	f7fd faa6 	bl	800648c <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f103 021c 	add.w	r2, r3, #28
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff fc26 	bl	800879e <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008f52:	e069      	b.n	8009028 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	88db      	ldrh	r3, [r3, #6]
 8008f5a:	b29c      	uxth	r4, r3
 8008f5c:	2002      	movs	r0, #2
 8008f5e:	f7fe ff5a 	bl	8007e16 <mg_ntohs>
 8008f62:	4603      	mov	r3, r0
 8008f64:	429c      	cmp	r4, r3
 8008f66:	d15f      	bne.n	8009028 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	3312      	adds	r3, #18
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	2206      	movs	r2, #6
 8008f72:	4618      	mov	r0, r3
 8008f74:	f009 fa9f 	bl	80124b6 <memcmp>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d153      	bne.n	8009026 <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d10a      	bne.n	8008fa4 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	3308      	adds	r3, #8
 8008f9a:	2206      	movs	r2, #6
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f009 fb7e 	bl	801269e <memcpy>
 8008fa2:	e041      	b.n	8009028 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	2200      	movs	r2, #0
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7ff fef3 	bl	8008d98 <getpeer>
 8008fb2:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d036      	beq.n	8009028 <rx_arp+0x1e0>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008fc0:	f003 0310 	and.w	r3, r3, #16
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d02e      	beq.n	8009028 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3390      	adds	r3, #144	; 0x90
 8008fce:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f103 0010 	add.w	r0, r3, #16
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	2206      	movs	r2, #6
 8008fde:	4619      	mov	r1, r3
 8008fe0:	f009 fb5d 	bl	801269e <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8008fe4:	4b12      	ldr	r3, [pc, #72]	; (8009030 <rx_arp+0x1e8>)
 8008fe6:	f641 7272 	movw	r2, #8050	; 0x1f72
 8008fea:	4912      	ldr	r1, [pc, #72]	; (8009034 <rx_arp+0x1ec>)
 8008fec:	2003      	movs	r0, #3
 8008fee:	f7fd f9f3 	bl	80063d8 <mg_log_prefix>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00e      	beq.n	8009016 <rx_arp+0x1ce>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f103 021c 	add.w	r2, r3, #28
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	3310      	adds	r3, #16
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <rx_arp+0x1f8>)
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	4613      	mov	r3, r2
 800900e:	4a0a      	ldr	r2, [pc, #40]	; (8009038 <rx_arp+0x1f0>)
 8009010:	480c      	ldr	r0, [pc, #48]	; (8009044 <rx_arp+0x1fc>)
 8009012:	f7fd fa3b 	bl	800648c <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800901c:	f36f 1304 	bfc	r3, #4, #1
 8009020:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 8009024:	e000      	b.n	8009028 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8009026:	bf00      	nop
      }
    }
  }
}
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bdb0      	pop	{r4, r5, r7, pc}
 800902e:	bf00      	nop
 8009030:	08014ddc 	.word	0x08014ddc
 8009034:	08013374 	.word	0x08013374
 8009038:	08006c29 	.word	0x08006c29
 800903c:	08014864 	.word	0x08014864
 8009040:	08006ced 	.word	0x08006ced
 8009044:	0801487c 	.word	0x0801487c

08009048 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b08      	cmp	r3, #8
 800905a:	d14d      	bne.n	80090f8 <rx_icmp+0xb0>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d049      	beq.n	80090f8 <rx_icmp+0xb0>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	691a      	ldr	r2, [r3, #16]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	429a      	cmp	r2, r3
 8009070:	d142      	bne.n	80090f8 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 8009072:	2326      	movs	r3, #38	; 0x26
 8009074:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	429a      	cmp	r2, r3
 800908c:	d901      	bls.n	8009092 <rx_icmp+0x4a>
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	1d99      	adds	r1, r3, #6
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6898      	ldr	r0, [r3, #8]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	69fa      	ldr	r2, [r7, #28]
 80090a4:	3204      	adds	r2, #4
 80090a6:	9201      	str	r2, [sp, #4]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	4603      	mov	r3, r0
 80090ac:	2201      	movs	r2, #1
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff fc74 	bl	800899c <tx_ip>
 80090b4:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3314      	adds	r3, #20
 80090ba:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 80090bc:	2204      	movs	r2, #4
 80090be:	2100      	movs	r1, #0
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f009 fa22 	bl	801250a <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	1d18      	adds	r0, r3, #4
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	4619      	mov	r1, r3
 80090d2:	f009 fae4 	bl	801269e <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	3304      	adds	r3, #4
 80090da:	4619      	mov	r1, r3
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff fb4b 	bl	8008778 <ipcsum>
 80090e2:	4603      	mov	r3, r0
 80090e4:	461a      	mov	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	4413      	add	r3, r2
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff fb53 	bl	800879e <ether_output>
  }
}
 80090f8:	bf00      	nop
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009104:	b08e      	sub	sp, #56	; 0x38
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	637b      	str	r3, [r7, #52]	; 0x34
 8009110:	2300      	movs	r3, #0
 8009112:	623b      	str	r3, [r7, #32]
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	2300      	movs	r3, #0
 800911a:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800911c:	2300      	movs	r3, #0
 800911e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009130:	33f0      	adds	r3, #240	; 0xf0
 8009132:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	4413      	add	r3, r2
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009144:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914a:	429a      	cmp	r2, r3
 800914c:	f0c0 8151 	bcc.w	80093f2 <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	1d18      	adds	r0, r3, #4
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3302      	adds	r3, #2
 800915a:	2204      	movs	r2, #4
 800915c:	4619      	mov	r1, r3
 800915e:	f009 f9aa 	bl	80124b6 <memcmp>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 8146 	bne.w	80093f6 <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800916a:	e05b      	b.n	8009224 <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d10e      	bne.n	8009192 <rx_dhcp_client+0x92>
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	3301      	adds	r3, #1
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b04      	cmp	r3, #4
 800917c:	d109      	bne.n	8009192 <rx_dhcp_client+0x92>
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	3306      	adds	r3, #6
 8009182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009184:	429a      	cmp	r2, r3
 8009186:	d904      	bls.n	8009192 <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 8009188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918a:	3302      	adds	r3, #2
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	61fb      	str	r3, [r7, #28]
 8009190:	e041      	b.n	8009216 <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8009192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b03      	cmp	r3, #3
 8009198:	d112      	bne.n	80091c0 <rx_dhcp_client+0xc0>
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	3301      	adds	r3, #1
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d10d      	bne.n	80091c0 <rx_dhcp_client+0xc0>
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	3306      	adds	r3, #6
 80091a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d908      	bls.n	80091c0 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	3302      	adds	r3, #2
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	637b      	str	r3, [r7, #52]	; 0x34
 80091be:	e02a      	b.n	8009216 <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b33      	cmp	r3, #51	; 0x33
 80091c6:	d114      	bne.n	80091f2 <rx_dhcp_client+0xf2>
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	3301      	adds	r3, #1
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d10f      	bne.n	80091f2 <rx_dhcp_client+0xf2>
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	3306      	adds	r3, #6
 80091d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d8:	429a      	cmp	r2, r3
 80091da:	d90a      	bls.n	80091f2 <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	3302      	adds	r3, #2
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fdfc 	bl	8007de4 <mg_ntohl>
 80091ec:	4603      	mov	r3, r0
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e011      	b.n	8009216 <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b35      	cmp	r3, #53	; 0x35
 80091f8:	d10d      	bne.n	8009216 <rx_dhcp_client+0x116>
 80091fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fc:	3301      	adds	r3, #1
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d108      	bne.n	8009216 <rx_dhcp_client+0x116>
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	3306      	adds	r3, #6
 8009208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800920a:	429a      	cmp	r2, r3
 800920c:	d903      	bls.n	8009216 <rx_dhcp_client+0x116>
      msgtype = p[2];
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	789b      	ldrb	r3, [r3, #2]
 8009212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	3301      	adds	r3, #1
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	3302      	adds	r3, #2
 800921e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009220:	4413      	add	r3, r2
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	3301      	adds	r3, #1
 8009228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922a:	429a      	cmp	r2, r3
 800922c:	d903      	bls.n	8009236 <rx_dhcp_client+0x136>
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2bff      	cmp	r3, #255	; 0xff
 8009234:	d19a      	bne.n	800916c <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8009236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800923a:	2b06      	cmp	r3, #6
 800923c:	d10c      	bne.n	8009258 <rx_dhcp_client+0x158>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009244:	429a      	cmp	r2, r3
 8009246:	d107      	bne.n	8009258 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	609a      	str	r2, [r3, #8]
 8009256:	e0c1      	b.n	80093dc <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8009258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800925c:	2b02      	cmp	r3, #2
 800925e:	d11a      	bne.n	8009296 <rx_dhcp_client+0x196>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009266:	2b01      	cmp	r3, #1
 8009268:	d115      	bne.n	8009296 <rx_dhcp_client+0x196>
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	2b00      	cmp	r3, #0
 800926e:	d012      	beq.n	8009296 <rx_dhcp_client+0x196>
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00f      	beq.n	8009296 <rx_dhcp_client+0x196>
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00c      	beq.n	8009296 <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	461a      	mov	r2, r3
 8009284:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f7ff fcd8 	bl	8008c3c <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2202      	movs	r2, #2
 8009290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8009294:	e0a2      	b.n	80093dc <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 8009296:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800929a:	2b05      	cmp	r3, #5
 800929c:	f040 809e 	bne.w	80093dc <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d162      	bne.n	8009370 <rx_dhcp_client+0x270>
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d05f      	beq.n	8009370 <rx_dhcp_client+0x270>
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d05c      	beq.n	8009370 <rx_dhcp_client+0x270>
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d059      	beq.n	8009370 <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80092c2:	69b9      	ldr	r1, [r7, #24]
 80092c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092c8:	fb00 f101 	mul.w	r1, r0, r1
 80092cc:	2000      	movs	r0, #0
 80092ce:	4688      	mov	r8, r1
 80092d0:	4681      	mov	r9, r0
 80092d2:	eb12 0108 	adds.w	r1, r2, r8
 80092d6:	6039      	str	r1, [r7, #0]
 80092d8:	eb43 0309 	adc.w	r3, r3, r9
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092e4:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80092e8:	4b45      	ldr	r3, [pc, #276]	; (8009400 <rx_dhcp_client+0x300>)
 80092ea:	f641 72aa 	movw	r2, #8106	; 0x1faa
 80092ee:	4945      	ldr	r1, [pc, #276]	; (8009404 <rx_dhcp_client+0x304>)
 80092f0:	2002      	movs	r0, #2
 80092f2:	f7fd f871 	bl	80063d8 <mg_log_prefix>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00f      	beq.n	800931c <rx_dhcp_client+0x21c>
 80092fc:	69bc      	ldr	r4, [r7, #24]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8009304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	f7f7 fc66 	bl	8000bdc <__aeabi_uldivmod>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4621      	mov	r1, r4
 8009316:	483c      	ldr	r0, [pc, #240]	; (8009408 <rx_dhcp_client+0x308>)
 8009318:	f7fd f8b8 	bl	800648c <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	3306      	adds	r3, #6
 8009328:	2206      	movs	r2, #6
 800932a:	4619      	mov	r1, r3
 800932c:	f009 f9b7 	bl	801269e <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009334:	609a      	str	r2, [r3, #8]
 8009336:	6a3a      	ldr	r2, [r7, #32]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	611a      	str	r2, [r3, #16]
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2203      	movs	r2, #3
 8009346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800934a:	f107 0310 	add.w	r3, r7, #16
 800934e:	2108      	movs	r1, #8
 8009350:	4618      	mov	r0, r3
 8009352:	f7f8 f811 	bl	8001378 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8009356:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800935a:	4614      	mov	r4, r2
 800935c:	f7fe fdac 	bl	8007eb8 <mg_millis>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4613      	mov	r3, r2
 8009366:	4423      	add	r3, r4
 8009368:	4618      	mov	r0, r3
 800936a:	f008 fecb 	bl	8012104 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800936e:	e035      	b.n	80093dc <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009376:	2b03      	cmp	r3, #3
 8009378:	d130      	bne.n	80093dc <rx_dhcp_client+0x2dc>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009380:	429a      	cmp	r2, r3
 8009382:	d12b      	bne.n	80093dc <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800938a:	69b9      	ldr	r1, [r7, #24]
 800938c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009390:	fb00 f101 	mul.w	r1, r0, r1
 8009394:	2000      	movs	r0, #0
 8009396:	460c      	mov	r4, r1
 8009398:	4605      	mov	r5, r0
 800939a:	eb12 0a04 	adds.w	sl, r2, r4
 800939e:	eb43 0b05 	adc.w	fp, r3, r5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80093a8:	4b15      	ldr	r3, [pc, #84]	; (8009400 <rx_dhcp_client+0x300>)
 80093aa:	f641 72b4 	movw	r2, #8116	; 0x1fb4
 80093ae:	4915      	ldr	r1, [pc, #84]	; (8009404 <rx_dhcp_client+0x304>)
 80093b0:	2002      	movs	r0, #2
 80093b2:	f7fd f811 	bl	80063d8 <mg_log_prefix>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00f      	beq.n	80093dc <rx_dhcp_client+0x2dc>
 80093bc:	69bc      	ldr	r4, [r7, #24]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80093c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093c8:	f04f 0300 	mov.w	r3, #0
 80093cc:	f7f7 fc06 	bl	8000bdc <__aeabi_uldivmod>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4621      	mov	r1, r4
 80093d6:	480c      	ldr	r0, [pc, #48]	; (8009408 <rx_dhcp_client+0x308>)
 80093d8:	f7fd f858 	bl	800648c <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80093e2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d006      	beq.n	80093f8 <rx_dhcp_client+0x2f8>
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7ff fa50 	bl	8008890 <onstatechange>
 80093f0:	e002      	b.n	80093f8 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80093f6:	bf00      	nop
}
 80093f8:	3738      	adds	r7, #56	; 0x38
 80093fa:	46bd      	mov	sp, r7
 80093fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009400:	08014de4 	.word	0x08014de4
 8009404:	08013374 	.word	0x08013374
 8009408:	08014898 	.word	0x08014898

0800940c <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800940c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009410:	b0d6      	sub	sp, #344	; 0x158
 8009412:	af04      	add	r7, sp, #16
 8009414:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009418:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800941c:	6018      	str	r0, [r3, #0]
 800941e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009422:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009426:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8009428:	2300      	movs	r3, #0
 800942a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800942e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009432:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943a:	33f0      	adds	r3, #240	; 0xf0
 800943c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 8009440:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009444:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009450:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	4413      	add	r3, r2
 800945a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800945e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009462:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800946e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009472:	429a      	cmp	r2, r3
 8009474:	f0c0 818b 	bcc.w	800978e <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8009478:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800947c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009480:	4ac6      	ldr	r2, [pc, #792]	; (800979c <rx_dhcp_server+0x390>)
 8009482:	4618      	mov	r0, r3
 8009484:	4611      	mov	r1, r2
 8009486:	f44f 7388 	mov.w	r3, #272	; 0x110
 800948a:	461a      	mov	r2, r3
 800948c:	f009 f907 	bl	801269e <memcpy>
  res.yiaddr = ifp->ip;
 8009490:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009494:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80094a4:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80094a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094aa:	3310      	adds	r3, #16
 80094ac:	3303      	adds	r3, #3
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	3201      	adds	r2, #1
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80094b6:	e020      	b.n	80094fa <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 80094b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b35      	cmp	r3, #53	; 0x35
 80094c0:	d111      	bne.n	80094e6 <rx_dhcp_server+0xda>
 80094c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094c6:	3301      	adds	r3, #1
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d10b      	bne.n	80094e6 <rx_dhcp_server+0xda>
 80094ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094d2:	3302      	adds	r3, #2
 80094d4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80094d8:	429a      	cmp	r2, r3
 80094da:	d904      	bls.n	80094e6 <rx_dhcp_server+0xda>
      op = p[2];
 80094dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094e0:	789b      	ldrb	r3, [r3, #2]
 80094e2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 80094e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094ea:	3301      	adds	r3, #1
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	3302      	adds	r3, #2
 80094f0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80094f4:	4413      	add	r3, r2
 80094f6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80094fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80094fe:	3301      	adds	r3, #1
 8009500:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009504:	429a      	cmp	r2, r3
 8009506:	d904      	bls.n	8009512 <rx_dhcp_server+0x106>
 8009508:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2bff      	cmp	r3, #255	; 0xff
 8009510:	d1d2      	bne.n	80094b8 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8009512:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009516:	2b01      	cmp	r3, #1
 8009518:	d004      	beq.n	8009524 <rx_dhcp_server+0x118>
 800951a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800951e:	2b03      	cmp	r3, #3
 8009520:	f040 8136 	bne.w	8009790 <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8009524:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009528:	2b01      	cmp	r3, #1
 800952a:	d101      	bne.n	8009530 <rx_dhcp_server+0x124>
 800952c:	2302      	movs	r3, #2
 800952e:	e000      	b.n	8009532 <rx_dhcp_server+0x126>
 8009530:	2305      	movs	r3, #5
 8009532:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 8009536:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800953a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800953e:	2235      	movs	r2, #53	; 0x35
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009546:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800954a:	2201      	movs	r2, #1
 800954c:	705a      	strb	r2, [r3, #1]
 800954e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009552:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009556:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800955a:	709a      	strb	r2, [r3, #2]
 800955c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009560:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009564:	2201      	movs	r2, #1
 8009566:	70da      	strb	r2, [r3, #3]
 8009568:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800956c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009570:	2204      	movs	r2, #4
 8009572:	711a      	strb	r2, [r3, #4]
 8009574:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009578:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800957c:	2200      	movs	r2, #0
 800957e:	715a      	strb	r2, [r3, #5]
 8009580:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009584:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009588:	2200      	movs	r2, #0
 800958a:	719a      	strb	r2, [r3, #6]
 800958c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009590:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009594:	2200      	movs	r2, #0
 8009596:	71da      	strb	r2, [r3, #7]
 8009598:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800959c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095a0:	2200      	movs	r2, #0
 80095a2:	721a      	strb	r2, [r3, #8]
 80095a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095ac:	2236      	movs	r2, #54	; 0x36
 80095ae:	725a      	strb	r2, [r3, #9]
 80095b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095b8:	2204      	movs	r2, #4
 80095ba:	729a      	strb	r2, [r3, #10]
 80095bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095c4:	2200      	movs	r2, #0
 80095c6:	72da      	strb	r2, [r3, #11]
 80095c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095d0:	2200      	movs	r2, #0
 80095d2:	731a      	strb	r2, [r3, #12]
 80095d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095dc:	2200      	movs	r2, #0
 80095de:	735a      	strb	r2, [r3, #13]
 80095e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095e8:	2200      	movs	r2, #0
 80095ea:	739a      	strb	r2, [r3, #14]
 80095ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095f4:	220c      	movs	r2, #12
 80095f6:	73da      	strb	r2, [r3, #15]
 80095f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009600:	2203      	movs	r2, #3
 8009602:	741a      	strb	r2, [r3, #16]
 8009604:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009608:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800960c:	226d      	movs	r2, #109	; 0x6d
 800960e:	745a      	strb	r2, [r3, #17]
 8009610:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009614:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009618:	2269      	movs	r2, #105	; 0x69
 800961a:	749a      	strb	r2, [r3, #18]
 800961c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009620:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009624:	2270      	movs	r2, #112	; 0x70
 8009626:	74da      	strb	r2, [r3, #19]
 8009628:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800962c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009630:	2233      	movs	r2, #51	; 0x33
 8009632:	751a      	strb	r2, [r3, #20]
 8009634:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009638:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800963c:	2204      	movs	r2, #4
 800963e:	755a      	strb	r2, [r3, #21]
 8009640:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009644:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009648:	22ff      	movs	r2, #255	; 0xff
 800964a:	759a      	strb	r2, [r3, #22]
 800964c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009650:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009654:	22ff      	movs	r2, #255	; 0xff
 8009656:	75da      	strb	r2, [r3, #23]
 8009658:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800965c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009660:	22ff      	movs	r2, #255	; 0xff
 8009662:	761a      	strb	r2, [r3, #24]
 8009664:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009668:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800966c:	22ff      	movs	r2, #255	; 0xff
 800966e:	765a      	strb	r2, [r3, #25]
 8009670:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009674:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009678:	22ff      	movs	r2, #255	; 0xff
 800967a:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800967c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009680:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	f103 011c 	add.w	r1, r3, #28
 800968c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009690:	331c      	adds	r3, #28
 8009692:	2206      	movs	r2, #6
 8009694:	4618      	mov	r0, r3
 8009696:	f009 f802 	bl	801269e <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800969a:	f107 030c 	add.w	r3, r7, #12
 800969e:	3305      	adds	r3, #5
 80096a0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80096a4:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80096a8:	6812      	ldr	r2, [r2, #0]
 80096aa:	320c      	adds	r2, #12
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 80096b0:	f107 030c 	add.w	r3, r7, #12
 80096b4:	330b      	adds	r3, #11
 80096b6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80096ba:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80096be:	6812      	ldr	r2, [r2, #0]
 80096c0:	3208      	adds	r2, #8
 80096c2:	6812      	ldr	r2, [r2, #0]
 80096c4:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 80096c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80096ce:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80096d2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80096d6:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80096da:	4615      	mov	r5, r2
 80096dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80096e4:	c403      	stmia	r4!, {r0, r1}
 80096e6:	8022      	strh	r2, [r4, #0]
 80096e8:	3402      	adds	r4, #2
 80096ea:	0c13      	lsrs	r3, r2, #16
 80096ec:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 80096ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096f2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80096fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009702:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009706:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 800970a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800970e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800971c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009720:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8009722:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009726:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	1d9d      	adds	r5, r3, #6
 8009730:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009734:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689e      	ldr	r6, [r3, #8]
 800973c:	2043      	movs	r0, #67	; 0x43
 800973e:	f7fe fb6a 	bl	8007e16 <mg_ntohs>
 8009742:	4603      	mov	r3, r0
 8009744:	4698      	mov	r8, r3
 8009746:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800974a:	2b01      	cmp	r3, #1
 800974c:	d005      	beq.n	800975a <rx_dhcp_server+0x34e>
 800974e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009752:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009756:	691c      	ldr	r4, [r3, #16]
 8009758:	e001      	b.n	800975e <rx_dhcp_server+0x352>
 800975a:	f04f 34ff 	mov.w	r4, #4294967295
 800975e:	2044      	movs	r0, #68	; 0x44
 8009760:	f7fe fb59 	bl	8007e16 <mg_ntohs>
 8009764:	4603      	mov	r3, r0
 8009766:	461a      	mov	r2, r3
 8009768:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800976c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8009770:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800977a:	9302      	str	r3, [sp, #8]
 800977c:	9201      	str	r2, [sp, #4]
 800977e:	9400      	str	r4, [sp, #0]
 8009780:	4643      	mov	r3, r8
 8009782:	4632      	mov	r2, r6
 8009784:	4629      	mov	r1, r5
 8009786:	6800      	ldr	r0, [r0, #0]
 8009788:	f7ff f95e 	bl	8008a48 <tx_udp>
 800978c:	e000      	b.n	8009790 <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800978e:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8009790:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009794:	46bd      	mov	sp, r7
 8009796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800979a:	bf00      	nop
 800979c:	080148b0 	.word	0x080148b0

080097a0 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ae:	2201      	movs	r2, #1
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff faf0 	bl	8008d98 <getpeer>
 80097b8:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d059      	beq.n	8009874 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	331c      	adds	r3, #28
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	69d2      	ldr	r2, [r2, #28]
 80097d4:	320c      	adds	r2, #12
 80097d6:	6812      	ldr	r2, [r2, #0]
 80097d8:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3390      	adds	r3, #144	; 0x90
 80097de:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f103 0010 	add.w	r0, r3, #16
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	3306      	adds	r3, #6
 80097ec:	2206      	movs	r2, #6
 80097ee:	4619      	mov	r1, r3
 80097f0:	f008 ff55 	bl	801269e <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097fc:	d304      	bcc.n	8009808 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 80097fe:	491f      	ldr	r1, [pc, #124]	; (800987c <rx_udp+0xdc>)
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f7f8 f8a7 	bl	8001954 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8009806:	e035      	b.n	8009874 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009810:	1ad2      	subs	r2, r2, r3
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	429a      	cmp	r2, r3
 8009818:	d212      	bcs.n	8009840 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	4413      	add	r3, r2
 800982a:	4619      	mov	r1, r3
 800982c:	f7fb ff52 	bl	80056d4 <mg_iobuf_resize>
 8009830:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <rx_udp+0xa0>
      mg_error(c, "oom");
 8009836:	4912      	ldr	r1, [pc, #72]	; (8009880 <rx_udp+0xe0>)
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7f8 f88b 	bl	8001954 <mg_error>
}
 800983e:	e019      	b.n	8009874 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009848:	18d0      	adds	r0, r2, r3
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6899      	ldr	r1, [r3, #8]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	461a      	mov	r2, r3
 8009854:	f008 ff23 	bl	801269e <memcpy>
      c->recv.len += pkt->pay.len;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	441a      	add	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	330c      	adds	r3, #12
 800986a:	461a      	mov	r2, r3
 800986c:	2107      	movs	r1, #7
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7f8 f84d 	bl	800190e <mg_call>
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	080149c0 	.word	0x080149c0
 8009880:	080149dc 	.word	0x080149dc

08009884 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8009884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009886:	b091      	sub	sp, #68	; 0x44
 8009888:	af06      	add	r7, sp, #24
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009898:	3314      	adds	r3, #20
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	4613      	mov	r3, r2
 80098a2:	2206      	movs	r2, #6
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff f878 	bl	800899c <tx_ip>
 80098ac:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	3314      	adds	r3, #20
 80098b2:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 80098b4:	2214      	movs	r2, #20
 80098b6:	2100      	movs	r1, #0
 80098b8:	6a38      	ldr	r0, [r7, #32]
 80098ba:	f008 fe26 	bl	801250a <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 80098be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <tx_tcp+0x54>
 80098c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d006      	beq.n	80098d8 <tx_tcp+0x54>
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	3314      	adds	r3, #20
 80098ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098d2:	4618      	mov	r0, r3
 80098d4:	f008 fdff 	bl	80124d6 <memmove>
  tcp->sport = sport;
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80098de:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80098e6:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098ec:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098f2:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	78fa      	ldrb	r2, [r7, #3]
 80098f8:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 80098fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80098fe:	f7fe fa8a 	bl	8007e16 <mg_ntohs>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	2250      	movs	r2, #80	; 0x50
 800990e:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8009914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009916:	b29b      	uxth	r3, r3
 8009918:	3314      	adds	r3, #20
 800991a:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800991c:	2300      	movs	r3, #0
 800991e:	753b      	strb	r3, [r7, #20]
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	7a5b      	ldrb	r3, [r3, #9]
 8009924:	757b      	strb	r3, [r7, #21]
 8009926:	8b7b      	ldrh	r3, [r7, #26]
 8009928:	0a1b      	lsrs	r3, r3, #8
 800992a:	b29b      	uxth	r3, r3
 800992c:	b2db      	uxtb	r3, r3
 800992e:	75bb      	strb	r3, [r7, #22]
 8009930:	8b7b      	ldrh	r3, [r7, #26]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 8009936:	8b7b      	ldrh	r3, [r7, #26]
 8009938:	461a      	mov	r2, r3
 800993a:	6a39      	ldr	r1, [r7, #32]
 800993c:	69f8      	ldr	r0, [r7, #28]
 800993e:	f7fe fed3 	bl	80086e8 <csumup>
 8009942:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	330c      	adds	r3, #12
 8009948:	2204      	movs	r2, #4
 800994a:	4619      	mov	r1, r3
 800994c:	69f8      	ldr	r0, [r7, #28]
 800994e:	f7fe fecb 	bl	80086e8 <csumup>
 8009952:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	3310      	adds	r3, #16
 8009958:	2204      	movs	r2, #4
 800995a:	4619      	mov	r1, r3
 800995c:	69f8      	ldr	r0, [r7, #28]
 800995e:	f7fe fec3 	bl	80086e8 <csumup>
 8009962:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8009964:	f107 0314 	add.w	r3, r7, #20
 8009968:	2204      	movs	r2, #4
 800996a:	4619      	mov	r1, r3
 800996c:	69f8      	ldr	r0, [r7, #28]
 800996e:	f7fe febb 	bl	80086e8 <csumup>
 8009972:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 8009974:	69f8      	ldr	r0, [r7, #28]
 8009976:	f7fe fee4 	bl	8008742 <csumfin>
 800997a:	4603      	mov	r3, r0
 800997c:	461a      	mov	r2, r3
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8009982:	4b21      	ldr	r3, [pc, #132]	; (8009a08 <tx_tcp+0x184>)
 8009984:	f242 020c 	movw	r2, #8204	; 0x200c
 8009988:	4920      	ldr	r1, [pc, #128]	; (8009a0c <tx_tcp+0x188>)
 800998a:	2003      	movs	r0, #3
 800998c:	f7fc fd24 	bl	80063d8 <mg_log_prefix>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d025      	beq.n	80099e2 <tx_tcp+0x15e>
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	f103 050c 	add.w	r5, r3, #12
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fa37 	bl	8007e16 <mg_ntohs>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461e      	mov	r6, r3
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	f103 0410 	add.w	r4, r3, #16
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	885b      	ldrh	r3, [r3, #2]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fa2c 	bl	8007e16 <mg_ntohs>
 80099be:	4603      	mov	r3, r0
 80099c0:	461a      	mov	r2, r3
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	7b5b      	ldrb	r3, [r3, #13]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	9103      	str	r1, [sp, #12]
 80099ce:	9202      	str	r2, [sp, #8]
 80099d0:	9401      	str	r4, [sp, #4]
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <tx_tcp+0x18c>)
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	4633      	mov	r3, r6
 80099d8:	462a      	mov	r2, r5
 80099da:	490d      	ldr	r1, [pc, #52]	; (8009a10 <tx_tcp+0x18c>)
 80099dc:	480d      	ldr	r0, [pc, #52]	; (8009a14 <tx_tcp+0x190>)
 80099de:	f7fc fd55 	bl	800648c <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	f103 0214 	add.w	r2, r3, #20
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	461a      	mov	r2, r3
 80099f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099f2:	4413      	add	r3, r2
 80099f4:	4619      	mov	r1, r3
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7fe fed1 	bl	800879e <ether_output>
 80099fc:	4603      	mov	r3, r0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	372c      	adds	r7, #44	; 0x2c
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a06:	bf00      	nop
 8009a08:	08014df4 	.word	0x08014df4
 8009a0c:	08013374 	.word	0x08013374
 8009a10:	08006c29 	.word	0x08006c29
 8009a14:	080149e0 	.word	0x080149e0

08009a18 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8009a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1c:	b08c      	sub	sp, #48	; 0x30
 8009a1e:	af06      	add	r7, sp, #24
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	603b      	str	r3, [r7, #0]
 8009a26:	4613      	mov	r3, r2
 8009a28:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	7b5b      	ldrb	r3, [r3, #13]
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	1d9e      	adds	r6, r3, #6
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	885b      	ldrh	r3, [r3, #2]
 8009a54:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fe f9bd 	bl	8007de4 <mg_ntohl>
 8009a6a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	4413      	add	r3, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe f9b7 	bl	8007de4 <mg_ntohl>
 8009a76:	4601      	mov	r1, r0
 8009a78:	79fa      	ldrb	r2, [r7, #7]
 8009a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	9103      	str	r1, [sp, #12]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	9302      	str	r3, [sp, #8]
 8009a88:	9501      	str	r5, [sp, #4]
 8009a8a:	9400      	str	r4, [sp, #0]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	4642      	mov	r2, r8
 8009a90:	4631      	mov	r1, r6
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff fef6 	bl	8009884 <tx_tcp>
 8009a98:	4603      	mov	r3, r0
                buf, len);
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009aa4 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8009aa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009aa8:	b088      	sub	sp, #32
 8009aaa:	af02      	add	r7, sp, #8
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab8:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3390      	adds	r3, #144	; 0x90
 8009abe:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <settmout+0x26>
 8009ac6:	2396      	movs	r3, #150	; 0x96
 8009ac8:	e001      	b.n	8009ace <settmout+0x2a>
 8009aca:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8009ace:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009ad6:	68f9      	ldr	r1, [r7, #12]
 8009ad8:	2000      	movs	r0, #0
 8009ada:	460c      	mov	r4, r1
 8009adc:	4605      	mov	r5, r0
 8009ade:	eb12 0804 	adds.w	r8, r2, r4
 8009ae2:	eb43 0905 	adc.w	r9, r3, r5
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	78fa      	ldrb	r2, [r7, #3]
 8009af0:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8009af2:	4b0d      	ldr	r3, [pc, #52]	; (8009b28 <settmout+0x84>)
 8009af4:	f242 0221 	movw	r2, #8225	; 0x2021
 8009af8:	490c      	ldr	r1, [pc, #48]	; (8009b2c <settmout+0x88>)
 8009afa:	2004      	movs	r0, #4
 8009afc:	f7fc fc6c 	bl	80063d8 <mg_log_prefix>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <settmout+0x7a>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b0a:	78f8      	ldrb	r0, [r7, #3]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009b12:	e9cd 2300 	strd	r2, r3, [sp]
 8009b16:	4602      	mov	r2, r0
 8009b18:	4805      	ldr	r0, [pc, #20]	; (8009b30 <settmout+0x8c>)
 8009b1a:	f7fc fcb7 	bl	800648c <mg_log>
}
 8009b1e:	bf00      	nop
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b28:	08014dfc 	.word	0x08014dfc
 8009b2c:	08013374 	.word	0x08013374
 8009b30:	08014a04 	.word	0x08014a04

08009b34 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8009b34:	b5b0      	push	{r4, r5, r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fc fdc2 	bl	80066cc <mg_alloc_conn>
 8009b48:	6178      	str	r0, [r7, #20]
  if (c == NULL) {
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10e      	bne.n	8009b6e <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 8009b50:	4b55      	ldr	r3, [pc, #340]	; (8009ca8 <accept_conn+0x174>)
 8009b52:	f242 0228 	movw	r2, #8232	; 0x2028
 8009b56:	4955      	ldr	r1, [pc, #340]	; (8009cac <accept_conn+0x178>)
 8009b58:	2001      	movs	r0, #1
 8009b5a:	f7fc fc3d 	bl	80063d8 <mg_log_prefix>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <accept_conn+0x36>
 8009b64:	4852      	ldr	r0, [pc, #328]	; (8009cb0 <accept_conn+0x17c>)
 8009b66:	f7fc fc91 	bl	800648c <mg_log>
    return NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e098      	b.n	8009ca0 <accept_conn+0x16c>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	3390      	adds	r3, #144	; 0x90
 8009b72:	613b      	str	r3, [r7, #16]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe f932 	bl	8007de4 <mg_ntohl>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe f929 	bl	8007de4 <mg_ntohl>
 8009b92:	4602      	mov	r2, r0
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f103 0010 	add.w	r0, r3, #16
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	3306      	adds	r3, #6
 8009ba4:	2206      	movs	r2, #6
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	f008 fd79 	bl	801269e <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8009bac:	2100      	movs	r1, #0
 8009bae:	6978      	ldr	r0, [r7, #20]
 8009bb0:	f7ff ff78 	bl	8009aa4 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	331c      	adds	r3, #28
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	69d2      	ldr	r2, [r2, #28]
 8009bbc:	320c      	adds	r2, #12
 8009bbe:	6812      	ldr	r2, [r2, #0]
 8009bc0:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8009bce:	4b36      	ldr	r3, [pc, #216]	; (8009ca8 <accept_conn+0x174>)
 8009bd0:	f242 0231 	movw	r2, #8241	; 0x2031
 8009bd4:	4935      	ldr	r1, [pc, #212]	; (8009cac <accept_conn+0x178>)
 8009bd6:	2003      	movs	r0, #3
 8009bd8:	f7fc fbfe 	bl	80063d8 <mg_log_prefix>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d007      	beq.n	8009bf2 <accept_conn+0xbe>
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	331c      	adds	r3, #28
 8009bea:	4a32      	ldr	r2, [pc, #200]	; (8009cb4 <accept_conn+0x180>)
 8009bec:	4832      	ldr	r0, [pc, #200]	; (8009cb8 <accept_conn+0x184>)
 8009bee:	f7fc fc4d 	bl	800648c <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8009c0a:	f043 0304 	orr.w	r3, r3, #4
 8009c0e:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009c18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c1c:	b2d9      	uxtb	r1, r3
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009c24:	f361 03c3 	bfi	r3, r1, #3, #1
 8009c28:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f102 0408 	add.w	r4, r2, #8
 8009c3c:	f103 0508 	add.w	r5, r3, #8
 8009c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 8009c60:	2200      	movs	r2, #0
 8009c62:	2101      	movs	r1, #1
 8009c64:	6978      	ldr	r0, [r7, #20]
 8009c66:	f7f7 fe52 	bl	800190e <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2105      	movs	r1, #5
 8009c6e:	6978      	ldr	r0, [r7, #20]
 8009c70:	f7f7 fe4d 	bl	800190e <mg_call>
  if (lsn->is_tls) mg_tls_init(c, mg_str(""));
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00c      	beq.n	8009c9e <accept_conn+0x16a>
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	490c      	ldr	r1, [pc, #48]	; (8009cbc <accept_conn+0x188>)
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fd fa6c 	bl	8007168 <mg_str_s>
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009c98:	6978      	ldr	r0, [r7, #20]
 8009c9a:	f7fd ff27 	bl	8007aec <mg_tls_init>
  return c;
 8009c9e:	697b      	ldr	r3, [r7, #20]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ca8:	08014e08 	.word	0x08014e08
 8009cac:	08013374 	.word	0x08013374
 8009cb0:	08014094 	.word	0x08014094
 8009cb4:	08006ca1 	.word	0x08006ca1
 8009cb8:	08014a14 	.word	0x08014a14
 8009cbc:	08013a04 	.word	0x08013a04

08009cc0 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8009cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc2:	b093      	sub	sp, #76	; 0x4c
 8009cc4:	af06      	add	r7, sp, #24
 8009cc6:	6178      	str	r0, [r7, #20]
 8009cc8:	6139      	str	r1, [r7, #16]
 8009cca:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	3390      	adds	r3, #144	; 0x90
 8009cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	331c      	adds	r3, #28
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d024      	beq.n	8009d3c <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 8009cf2:	232e      	movs	r3, #46	; 0x2e
 8009cf4:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	441a      	add	r2, r3
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d904      	bls.n	8009d0e <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 8009d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d06:	699a      	ldr	r2, [r3, #24]
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	f103 0010 	add.w	r0, r3, #16
 8009d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d16:	689c      	ldr	r4, [r3, #8]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	8b1d      	ldrh	r5, [r3, #24]
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009d22:	68f9      	ldr	r1, [r7, #12]
 8009d24:	9103      	str	r1, [sp, #12]
 8009d26:	6939      	ldr	r1, [r7, #16]
 8009d28:	9102      	str	r1, [sp, #8]
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	462b      	mov	r3, r5
 8009d30:	4622      	mov	r2, r4
 8009d32:	4601      	mov	r1, r0
 8009d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d36:	f7fe fe87 	bl	8008a48 <tx_udp>
 8009d3a:	e046      	b.n	8009dca <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 8009d3c:	2362      	movs	r3, #98	; 0x62
 8009d3e:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	441a      	add	r2, r3
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d904      	bls.n	8009d58 <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	f103 0610 	add.w	r6, r3, #16
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	8b1c      	ldrh	r4, [r3, #24]
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe f838 	bl	8007de4 <mg_ntohl>
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe f832 	bl	8007de4 <mg_ntohl>
 8009d80:	4602      	mov	r2, r0
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	9203      	str	r2, [sp, #12]
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	9102      	str	r1, [sp, #8]
 8009d90:	9501      	str	r5, [sp, #4]
 8009d92:	9400      	str	r4, [sp, #0]
 8009d94:	2318      	movs	r3, #24
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	4631      	mov	r1, r6
 8009d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d9c:	f7ff fd72 	bl	8009884 <tx_tcp>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00e      	beq.n	8009dc4 <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	441a      	add	r2, r3
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	7d9b      	ldrb	r3, [r3, #22]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d107      	bne.n	8009dca <mg_io_send+0x10a>
 8009dba:	2100      	movs	r1, #0
 8009dbc:	6978      	ldr	r0, [r7, #20]
 8009dbe:	f7ff fe71 	bl	8009aa4 <settmout>
 8009dc2:	e002      	b.n	8009dca <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 8009dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc8:	e000      	b.n	8009dcc <mg_io_send+0x10c>
    }
  }
  return (long) len;
 8009dca:	68fb      	ldr	r3, [r7, #12]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3734      	adds	r7, #52	; 0x34
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dd4 <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8009dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd8:	b090      	sub	sp, #64	; 0x40
 8009dda:	af06      	add	r7, sp, #24
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3390      	adds	r3, #144	; 0x90
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <read_conn+0x28>
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	3318      	adds	r3, #24
 8009dfa:	e001      	b.n	8009e00 <read_conn+0x2c>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3338      	adds	r3, #56	; 0x38
 8009e00:	623b      	str	r3, [r7, #32]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fd ffeb 	bl	8007de4 <mg_ntohl>
 8009e0e:	61f8      	str	r0, [r7, #28]
  s->raw.align = c->recv.align;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	7b5b      	ldrb	r3, [r3, #13]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01a      	beq.n	8009e5c <read_conn+0x88>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fd ffd9 	bl	8007de4 <mg_ntohl>
 8009e32:	4603      	mov	r3, r0
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	605a      	str	r2, [r3, #4]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fd ffcf 	bl	8007de4 <mg_ntohl>
 8009e46:	4602      	mov	r2, r0
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009e52:	f043 0320 	orr.w	r3, r3, #32
 8009e56:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8009e5a:	e116      	b.n	800a08a <read_conn+0x2b6>
  } else if (pkt->pay.len == 0) {
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8112 	beq.w	800a08a <read_conn+0x2b6>
  } else if (seq != s->ack) {
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	69fa      	ldr	r2, [r7, #28]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d05b      	beq.n	8009f28 <read_conn+0x154>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fd ffb4 	bl	8007de4 <mg_ntohl>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
    if (s->ack == ack) {
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d10e      	bne.n	8009eae <read_conn+0xda>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8009e90:	4b80      	ldr	r3, [pc, #512]	; (800a094 <read_conn+0x2c0>)
 8009e92:	f242 0271 	movw	r2, #8305	; 0x2071
 8009e96:	4980      	ldr	r1, [pc, #512]	; (800a098 <read_conn+0x2c4>)
 8009e98:	2004      	movs	r0, #4
 8009e9a:	f7fc fa9d 	bl	80063d8 <mg_log_prefix>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 80f2 	beq.w	800a08a <read_conn+0x2b6>
 8009ea6:	487d      	ldr	r0, [pc, #500]	; (800a09c <read_conn+0x2c8>)
 8009ea8:	f7fc faf0 	bl	800648c <mg_log>
}
 8009eac:	e0ed      	b.n	800a08a <read_conn+0x2b6>
      memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	331c      	adds	r3, #28
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	617b      	str	r3, [r7, #20]
      MG_DEBUG(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8009eb6:	4b77      	ldr	r3, [pc, #476]	; (800a094 <read_conn+0x2c0>)
 8009eb8:	f242 0275 	movw	r2, #8309	; 0x2075
 8009ebc:	4976      	ldr	r1, [pc, #472]	; (800a098 <read_conn+0x2c4>)
 8009ebe:	2003      	movs	r0, #3
 8009ec0:	f7fc fa8a 	bl	80063d8 <mg_log_prefix>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d006      	beq.n	8009ed8 <read_conn+0x104>
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	69f9      	ldr	r1, [r7, #28]
 8009ed2:	4873      	ldr	r0, [pc, #460]	; (800a0a0 <read_conn+0x2cc>)
 8009ed4:	f7fc fada 	bl	800648c <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	f103 0810 	add.w	r8, r3, #16
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	607b      	str	r3, [r7, #4]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8b1c      	ldrh	r4, [r3, #24]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fd ff75 	bl	8007de4 <mg_ntohl>
 8009efa:	6038      	str	r0, [r7, #0]
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fd ff6f 	bl	8007de4 <mg_ntohl>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2200      	movs	r2, #0
 8009f0a:	9205      	str	r2, [sp, #20]
 8009f0c:	4a65      	ldr	r2, [pc, #404]	; (800a0a4 <read_conn+0x2d0>)
 8009f0e:	9204      	str	r2, [sp, #16]
 8009f10:	9303      	str	r3, [sp, #12]
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	9102      	str	r1, [sp, #8]
 8009f16:	9501      	str	r5, [sp, #4]
 8009f18:	9400      	str	r4, [sp, #0]
 8009f1a:	2310      	movs	r3, #16
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	4641      	mov	r1, r8
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7ff fcaf 	bl	8009884 <tx_tcp>
}
 8009f26:	e0b0      	b.n	800a08a <read_conn+0x2b6>
  } else if (io->size - io->len < pkt->pay.len &&
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	1ad2      	subs	r2, r2, r3
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d210      	bcs.n	8009f5c <read_conn+0x188>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	4413      	add	r3, r2
 8009f44:	4619      	mov	r1, r3
 8009f46:	6a38      	ldr	r0, [r7, #32]
 8009f48:	f7fb fbc4 	bl	80056d4 <mg_iobuf_resize>
 8009f4c:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d104      	bne.n	8009f5c <read_conn+0x188>
    mg_error(c, "oom");
 8009f52:	4955      	ldr	r1, [pc, #340]	; (800a0a8 <read_conn+0x2d4>)
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7f7 fcfd 	bl	8001954 <mg_error>
 8009f5a:	e096      	b.n	800a08a <read_conn+0x2b6>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	18d0      	adds	r0, r2, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6899      	ldr	r1, [r3, #8]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f008 fb95 	bl	801269e <memcpy>
    io->len += pkt->pay.len;
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	441a      	add	r2, r3
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8009f82:	4b44      	ldr	r3, [pc, #272]	; (800a094 <read_conn+0x2c0>)
 8009f84:	f242 0286 	movw	r2, #8326	; 0x2086
 8009f88:	4943      	ldr	r1, [pc, #268]	; (800a098 <read_conn+0x2c4>)
 8009f8a:	2003      	movs	r0, #3
 8009f8c:	f7fc fa24 	bl	80063d8 <mg_log_prefix>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00e      	beq.n	8009fb4 <read_conn+0x1e0>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fd ff1f 	bl	8007de4 <mg_ntohl>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4621      	mov	r1, r4
 8009fae:	483f      	ldr	r0, [pc, #252]	; (800a0ac <read_conn+0x2d8>)
 8009fb0:	f7fc fa6c 	bl	800648c <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fd ff12 	bl	8007de4 <mg_ntohl>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	441a      	add	r2, r3
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	7d9b      	ldrb	r3, [r3, #22]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d003      	beq.n	8009fdc <read_conn+0x208>
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff fd64 	bl	8009aa4 <settmout>
    if (c->is_tls) {
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d046      	beq.n	800a07a <read_conn+0x2a6>
      io = &c->recv;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3338      	adds	r3, #56	; 0x38
 8009ff0:	623b      	str	r3, [r7, #32]
      if (io->size - io->len < pkt->pay.len &&
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	429a      	cmp	r2, r3
 800a002:	d210      	bcs.n	800a026 <read_conn+0x252>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	4413      	add	r3, r2
 800a00e:	4619      	mov	r1, r3
 800a010:	6a38      	ldr	r0, [r7, #32]
 800a012:	f7fb fb5f 	bl	80056d4 <mg_iobuf_resize>
 800a016:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <read_conn+0x252>
        mg_error(c, "oom");
 800a01c:	4922      	ldr	r1, [pc, #136]	; (800a0a8 <read_conn+0x2d4>)
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7f7 fc98 	bl	8001954 <mg_error>
 800a024:	e031      	b.n	800a08a <read_conn+0x2b6>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	18d1      	adds	r1, r2, r3
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	461a      	mov	r2, r3
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f7fd fd7b 	bl	8007b38 <mg_tls_recv>
 800a042:	4603      	mov	r3, r0
 800a044:	613b      	str	r3, [r7, #16]
        if (n == MG_IO_ERR) {
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04c:	d104      	bne.n	800a058 <read_conn+0x284>
          mg_error(c, "TLS recv error");
 800a04e:	4918      	ldr	r1, [pc, #96]	; (800a0b0 <read_conn+0x2dc>)
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7f7 fc7f 	bl	8001954 <mg_error>
}
 800a056:	e018      	b.n	800a08a <read_conn+0x2b6>
        } else if (n > 0) {
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	dd15      	ble.n	800a08a <read_conn+0x2b6>
          io->len += (size_t) n;
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	441a      	add	r2, r3
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 800a06a:	f107 0310 	add.w	r3, r7, #16
 800a06e:	461a      	mov	r2, r3
 800a070:	2107      	movs	r1, #7
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f7f7 fc4b 	bl	800190e <mg_call>
}
 800a078:	e007      	b.n	800a08a <read_conn+0x2b6>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	330c      	adds	r3, #12
 800a07e:	461a      	mov	r2, r3
 800a080:	2107      	movs	r1, #7
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7f7 fc43 	bl	800190e <mg_call>
}
 800a088:	e7ff      	b.n	800a08a <read_conn+0x2b6>
 800a08a:	bf00      	nop
 800a08c:	3728      	adds	r7, #40	; 0x28
 800a08e:	46bd      	mov	sp, r7
 800a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a094:	08014e14 	.word	0x08014e14
 800a098:	08013374 	.word	0x08013374
 800a09c:	08014a28 	.word	0x08014a28
 800a0a0:	08014a40 	.word	0x08014a40
 800a0a4:	08013a04 	.word	0x08013a04
 800a0a8:	080149dc 	.word	0x080149dc
 800a0ac:	08014a58 	.word	0x08014a58
 800a0b0:	08014a6c 	.word	0x08014a6c

0800a0b4 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b089      	sub	sp, #36	; 0x24
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fe66 	bl	8008d98 <getpeer>
 800a0cc:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <rx_tcp+0x26>
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	3390      	adds	r3, #144	; 0x90
 800a0d8:	e000      	b.n	800a0dc <rx_tcp+0x28>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d03e      	beq.n	800a162 <rx_tcp+0xae>
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a0ea:	f003 0320 	and.w	r3, r3, #32
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d036      	beq.n	800a162 <rx_tcp+0xae>
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f8:	7b5b      	ldrb	r3, [r3, #13]
 800a0fa:	f003 0312 	and.w	r3, r3, #18
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d02f      	beq.n	800a162 <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fd fe6b 	bl	8007de4 <mg_ntohl>
 800a10e:	4602      	mov	r2, r0
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fd fe62 	bl	8007de4 <mg_ntohl>
 800a120:	4603      	mov	r3, r0
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	9201      	str	r2, [sp, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	9200      	str	r2, [sp, #0]
 800a136:	2210      	movs	r2, #16
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fc6c 	bl	8009a18 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800a146:	f36f 1345 	bfc	r3, #5, #1
 800a14a:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800a14e:	2100      	movs	r1, #0
 800a150:	6978      	ldr	r0, [r7, #20]
 800a152:	f7ff fca7 	bl	8009aa4 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800a156:	2200      	movs	r2, #0
 800a158:	2104      	movs	r1, #4
 800a15a:	6978      	ldr	r0, [r7, #20]
 800a15c:	f7f7 fbd7 	bl	800190e <mg_call>
 800a160:	e0c3      	b.n	800a2ea <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d014      	beq.n	800a192 <rx_tcp+0xde>
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00c      	beq.n	800a192 <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2200      	movs	r2, #0
 800a180:	9201      	str	r2, [sp, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	9200      	str	r2, [sp, #0]
 800a186:	2214      	movs	r2, #20
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7ff fc44 	bl	8009a18 <tx_tcp_pkt>
 800a190:	e0ab      	b.n	800a2ea <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00b      	beq.n	800a1b0 <rx_tcp+0xfc>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19c:	7b5b      	ldrb	r3, [r3, #13]
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d004      	beq.n	800a1b0 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a1a6:	4953      	ldr	r1, [pc, #332]	; (800a2f4 <rx_tcp+0x240>)
 800a1a8:	6978      	ldr	r0, [r7, #20]
 800a1aa:	f7f7 fbd3 	bl	8001954 <mg_error>
 800a1ae:	e09c      	b.n	800a2ea <rx_tcp+0x236>
  } else if (c != NULL) {
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00f      	beq.n	800a1d6 <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	7d9b      	ldrb	r3, [r3, #22]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <rx_tcp+0x118>
      settmout(c,
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6978      	ldr	r0, [r7, #20]
 800a1c8:	f7ff fc6c 	bl	8009aa4 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6978      	ldr	r0, [r7, #20]
 800a1d0:	f7ff fe00 	bl	8009dd4 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800a1d4:	e089      	b.n	800a2ea <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1da:	2201      	movs	r2, #1
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe fdda 	bl	8008d98 <getpeer>
 800a1e4:	6178      	str	r0, [r7, #20]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10c      	bne.n	800a206 <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	9201      	str	r2, [sp, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	9200      	str	r2, [sp, #0]
 800a1fa:	2214      	movs	r2, #20
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff fc0a 	bl	8009a18 <tx_tcp_pkt>
}
 800a204:	e071      	b.n	800a2ea <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20a:	7b5b      	ldrb	r3, [r3, #13]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00c      	beq.n	800a22e <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d062      	beq.n	800a2ea <rx_tcp+0x236>
 800a224:	4933      	ldr	r1, [pc, #204]	; (800a2f4 <rx_tcp+0x240>)
 800a226:	6978      	ldr	r0, [r7, #20]
 800a228:	f7f7 fb94 	bl	8001954 <mg_error>
}
 800a22c:	e05d      	b.n	800a2ea <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	7b5b      	ldrb	r3, [r3, #13]
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d016      	beq.n	800a26a <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	b29b      	uxth	r3, r3
 800a244:	4618      	mov	r0, r3
 800a246:	f7fd fde6 	bl	8007e16 <mg_ntohs>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fd fdc9 	bl	8007de4 <mg_ntohl>
 800a252:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800a254:	2300      	movs	r3, #0
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	2300      	movs	r3, #0
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2212      	movs	r2, #18
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff fbd8 	bl	8009a18 <tx_tcp_pkt>
}
 800a268:	e03f      	b.n	800a2ea <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	7b5b      	ldrb	r3, [r3, #13]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00c      	beq.n	800a292 <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	2200      	movs	r2, #0
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	9200      	str	r2, [sp, #0]
 800a286:	2211      	movs	r2, #17
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff fbc4 	bl	8009a18 <tx_tcp_pkt>
}
 800a290:	e02b      	b.n	800a2ea <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fd fda3 	bl	8007de4 <mg_ntohl>
 800a29e:	4604      	mov	r4, r0
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fd fdb4 	bl	8007e16 <mg_ntohs>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	d104      	bne.n	800a2c0 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6978      	ldr	r0, [r7, #20]
 800a2ba:	f7ff fc3b 	bl	8009b34 <accept_conn>
}
 800a2be:	e014      	b.n	800a2ea <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10c      	bne.n	800a2ea <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	9201      	str	r2, [sp, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	9200      	str	r2, [sp, #0]
 800a2de:	2214      	movs	r2, #20
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7ff fb98 	bl	8009a18 <tx_tcp_pkt>
}
 800a2e8:	e7ff      	b.n	800a2ea <rx_tcp+0x236>
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd90      	pop	{r4, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	08014a7c 	.word	0x08014a7c

0800a2f8 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fa:	b089      	sub	sp, #36	; 0x24
 800a2fc:	af04      	add	r7, sp, #16
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	7a5b      	ldrb	r3, [r3, #9]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d116      	bne.n	800a33a <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	f103 0214 	add.w	r2, r3, #20
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	2b03      	cmp	r3, #3
 800a31e:	f240 8105 	bls.w	800a52c <rx_ip+0x234>
    mkpay(pkt, pkt->icmp + 1);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	3304      	adds	r3, #4
 800a328:	4619      	mov	r1, r3
 800a32a:	6838      	ldr	r0, [r7, #0]
 800a32c:	f7fe f9be 	bl	80086ac <mkpay>
    rx_icmp(ifp, pkt);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7fe fe88 	bl	8009048 <rx_icmp>
 800a338:	e0fd      	b.n	800a536 <rx_ip+0x23e>
  } else if (pkt->ip->proto == 17) {
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	7a5b      	ldrb	r3, [r3, #9]
 800a340:	2b11      	cmp	r3, #17
 800a342:	f040 808a 	bne.w	800a45a <rx_ip+0x162>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	f103 0214 	add.w	r2, r3, #20
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b07      	cmp	r3, #7
 800a358:	f240 80ea 	bls.w	800a530 <rx_ip+0x238>
    mkpay(pkt, pkt->udp + 1);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	3308      	adds	r3, #8
 800a362:	4619      	mov	r1, r3
 800a364:	6838      	ldr	r0, [r7, #0]
 800a366:	f7fe f9a1 	bl	80086ac <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a36a:	4b74      	ldr	r3, [pc, #464]	; (800a53c <rx_ip+0x244>)
 800a36c:	f242 02e8 	movw	r2, #8424	; 0x20e8
 800a370:	4973      	ldr	r1, [pc, #460]	; (800a540 <rx_ip+0x248>)
 800a372:	2003      	movs	r0, #3
 800a374:	f7fc f830 	bl	80063d8 <mg_log_prefix>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d026      	beq.n	800a3cc <rx_ip+0xd4>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	f103 050c 	add.w	r5, r3, #12
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fd fd41 	bl	8007e16 <mg_ntohs>
 800a394:	4603      	mov	r3, r0
 800a396:	461e      	mov	r6, r3
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f103 0410 	add.w	r4, r3, #16
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	885b      	ldrh	r3, [r3, #2]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fd fd34 	bl	8007e16 <mg_ntohs>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	9303      	str	r3, [sp, #12]
 800a3b8:	9202      	str	r2, [sp, #8]
 800a3ba:	9401      	str	r4, [sp, #4]
 800a3bc:	4b61      	ldr	r3, [pc, #388]	; (800a544 <rx_ip+0x24c>)
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	4633      	mov	r3, r6
 800a3c2:	462a      	mov	r2, r5
 800a3c4:	495f      	ldr	r1, [pc, #380]	; (800a544 <rx_ip+0x24c>)
 800a3c6:	4860      	ldr	r0, [pc, #384]	; (800a548 <rx_ip+0x250>)
 800a3c8:	f7fc f860 	bl	800648c <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	7f1b      	ldrb	r3, [r3, #28]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01c      	beq.n	800a40e <rx_ip+0x116>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d8:	885b      	ldrh	r3, [r3, #2]
 800a3da:	b29c      	uxth	r4, r3
 800a3dc:	2044      	movs	r0, #68	; 0x44
 800a3de:	f7fd fd1a 	bl	8007e16 <mg_ntohs>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	d112      	bne.n	800a40e <rx_ip+0x116>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	f103 0208 	add.w	r2, r3, #8
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6838      	ldr	r0, [r7, #0]
 800a400:	f7fe f954 	bl	80086ac <mkpay>
      rx_dhcp_client(ifp, pkt);
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7fe fe7a 	bl	8009100 <rx_dhcp_client>
 800a40c:	e093      	b.n	800a536 <rx_ip+0x23e>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7f5b      	ldrb	r3, [r3, #29]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d01c      	beq.n	800a450 <rx_ip+0x158>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41a:	885b      	ldrh	r3, [r3, #2]
 800a41c:	b29c      	uxth	r4, r3
 800a41e:	2043      	movs	r0, #67	; 0x43
 800a420:	f7fd fcf9 	bl	8007e16 <mg_ntohs>
 800a424:	4603      	mov	r3, r0
 800a426:	429c      	cmp	r4, r3
 800a428:	d112      	bne.n	800a450 <rx_ip+0x158>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42e:	f103 0208 	add.w	r2, r3, #8
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a43e:	4619      	mov	r1, r3
 800a440:	6838      	ldr	r0, [r7, #0]
 800a442:	f7fe f933 	bl	80086ac <mkpay>
      rx_dhcp_server(ifp, pkt);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7fe ffdf 	bl	800940c <rx_dhcp_server>
 800a44e:	e072      	b.n	800a536 <rx_ip+0x23e>
    } else {
      rx_udp(ifp, pkt);
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff f9a4 	bl	80097a0 <rx_udp>
 800a458:	e06d      	b.n	800a536 <rx_ip+0x23e>
    }
  } else if (pkt->ip->proto == 6) {
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	7a5b      	ldrb	r3, [r3, #9]
 800a460:	2b06      	cmp	r3, #6
 800a462:	d168      	bne.n	800a536 <rx_ip+0x23e>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	f103 0214 	add.w	r2, r3, #20
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b13      	cmp	r3, #19
 800a476:	d95d      	bls.n	800a534 <rx_ip+0x23c>
    mkpay(pkt, pkt->tcp + 1);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47c:	3314      	adds	r3, #20
 800a47e:	4619      	mov	r1, r3
 800a480:	6838      	ldr	r0, [r7, #0]
 800a482:	f7fe f913 	bl	80086ac <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	885b      	ldrh	r3, [r3, #2]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fd fcc1 	bl	8007e16 <mg_ntohs>
 800a494:	4603      	mov	r3, r0
 800a496:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	7b1b      	ldrb	r3, [r3, #12]
 800a49e:	091b      	lsrs	r3, r3, #4
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3305      	adds	r3, #5
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800a4ac:	89fa      	ldrh	r2, [r7, #14]
 800a4ae:	89bb      	ldrh	r3, [r7, #12]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d305      	bcc.n	800a4c0 <rx_ip+0x1c8>
 800a4b4:	89fa      	ldrh	r2, [r7, #14]
 800a4b6:	89bb      	ldrh	r3, [r7, #12]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a4c0:	4b1e      	ldr	r3, [pc, #120]	; (800a53c <rx_ip+0x244>)
 800a4c2:	f242 02fd 	movw	r2, #8445	; 0x20fd
 800a4c6:	491e      	ldr	r1, [pc, #120]	; (800a540 <rx_ip+0x248>)
 800a4c8:	2003      	movs	r0, #3
 800a4ca:	f7fb ff85 	bl	80063d8 <mg_log_prefix>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d026      	beq.n	800a522 <rx_ip+0x22a>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	f103 050c 	add.w	r5, r3, #12
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fd fc96 	bl	8007e16 <mg_ntohs>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	461e      	mov	r6, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f103 0410 	add.w	r4, r3, #16
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	885b      	ldrh	r3, [r3, #2]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fd fc89 	bl	8007e16 <mg_ntohs>
 800a504:	4603      	mov	r3, r0
 800a506:	461a      	mov	r2, r3
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	9303      	str	r3, [sp, #12]
 800a50e:	9202      	str	r2, [sp, #8]
 800a510:	9401      	str	r4, [sp, #4]
 800a512:	4b0c      	ldr	r3, [pc, #48]	; (800a544 <rx_ip+0x24c>)
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	4633      	mov	r3, r6
 800a518:	462a      	mov	r2, r5
 800a51a:	490a      	ldr	r1, [pc, #40]	; (800a544 <rx_ip+0x24c>)
 800a51c:	480b      	ldr	r0, [pc, #44]	; (800a54c <rx_ip+0x254>)
 800a51e:	f7fb ffb5 	bl	800648c <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fdc5 	bl	800a0b4 <rx_tcp>
 800a52a:	e004      	b.n	800a536 <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a52c:	bf00      	nop
 800a52e:	e002      	b.n	800a536 <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a530:	bf00      	nop
 800a532:	e000      	b.n	800a536 <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a534:	bf00      	nop
  }
}
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53c:	08014e20 	.word	0x08014e20
 800a540:	08013374 	.word	0x08013374
 800a544:	08006c29 	.word	0x08006c29
 800a548:	08014a88 	.word	0x08014a88
 800a54c:	08014aa4 	.word	0x08014aa4

0800a550 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	799b      	ldrb	r3, [r3, #6]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d004      	beq.n	800a56e <rx_ip6+0x1e>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	799b      	ldrb	r3, [r3, #6]
 800a56a:	2b3a      	cmp	r3, #58	; 0x3a
 800a56c:	d115      	bne.n	800a59a <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d922      	bls.n	800a5c8 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	3304      	adds	r3, #4
 800a588:	4619      	mov	r1, r3
 800a58a:	6838      	ldr	r0, [r7, #0]
 800a58c:	f7fe f88e 	bl	80086ac <mkpay>
    rx_icmp(ifp, pkt);
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7fe fd58 	bl	8009048 <rx_icmp>
 800a598:	e019      	b.n	800a5ce <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	799b      	ldrb	r3, [r3, #6]
 800a5a0:	2b11      	cmp	r3, #17
 800a5a2:	d114      	bne.n	800a5ce <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	2b07      	cmp	r3, #7
 800a5b6:	d909      	bls.n	800a5cc <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	3308      	adds	r3, #8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6838      	ldr	r0, [r7, #0]
 800a5c2:	f7fe f873 	bl	80086ac <mkpay>
 800a5c6:	e002      	b.n	800a5ce <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a5c8:	bf00      	nop
 800a5ca:	e000      	b.n	800a5ce <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a5cc:	bf00      	nop
  }
}
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b093      	sub	sp, #76	; 0x4c
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800a5e0:	f107 0314 	add.w	r3, r7, #20
 800a5e4:	2234      	movs	r2, #52	; 0x34
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f007 ff8e 	bl	801250a <memset>
  pkt.raw.ptr = (char *) buf;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	2b0d      	cmp	r3, #13
 800a5fe:	f240 80d1 	bls.w	800a7a4 <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	7fdb      	ldrb	r3, [r3, #31]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d013      	beq.n	800a632 <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	4618      	mov	r0, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2206      	movs	r2, #6
 800a612:	4619      	mov	r1, r3
 800a614:	f007 ff4f 	bl	80124b6 <memcmp>
 800a618:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d009      	beq.n	800a632 <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	2206      	movs	r2, #6
 800a622:	496a      	ldr	r1, [pc, #424]	; (800a7cc <mg_tcpip_rx+0x1f8>)
 800a624:	4618      	mov	r0, r3
 800a626:	f007 ff46 	bl	80124b6 <memcmp>
 800a62a:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f040 80bb 	bne.w	800a7a8 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	7f9b      	ldrb	r3, [r3, #30]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01a      	beq.n	800a670 <mg_tcpip_rx+0x9c>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d917      	bls.n	800a670 <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	3b04      	subs	r3, #4
 800a644:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	68b9      	ldr	r1, [r7, #8]
 800a64a:	2000      	movs	r0, #0
 800a64c:	f7fd fbfa 	bl	8007e44 <mg_crc32>
 800a650:	4603      	mov	r3, r0
 800a652:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4413      	add	r3, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f107 0310 	add.w	r3, r7, #16
 800a660:	2204      	movs	r2, #4
 800a662:	4619      	mov	r1, r3
 800a664:	f007 ff27 	bl	80124b6 <memcmp>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f040 809e 	bne.w	800a7ac <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	899b      	ldrh	r3, [r3, #12]
 800a674:	b29c      	uxth	r4, r3
 800a676:	f640 0006 	movw	r0, #2054	; 0x806
 800a67a:	f7fd fbcc 	bl	8007e16 <mg_ntohs>
 800a67e:	4603      	mov	r3, r0
 800a680:	429c      	cmp	r4, r3
 800a682:	d10d      	bne.n	800a6a0 <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	330e      	adds	r3, #14
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	2b29      	cmp	r3, #41	; 0x29
 800a68e:	f240 808f 	bls.w	800a7b0 <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800a692:	f107 0314 	add.w	r3, r7, #20
 800a696:	4619      	mov	r1, r3
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7fe fbd5 	bl	8008e48 <rx_arp>
 800a69e:	e092      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	899b      	ldrh	r3, [r3, #12]
 800a6a4:	b29c      	uxth	r4, r3
 800a6a6:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800a6aa:	f7fd fbb4 	bl	8007e16 <mg_ntohs>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	429c      	cmp	r4, r3
 800a6b2:	d11b      	bne.n	800a6ec <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	330e      	adds	r3, #14
 800a6b8:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	2b35      	cmp	r3, #53	; 0x35
 800a6be:	d979      	bls.n	800a7b4 <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	091b      	lsrs	r3, r3, #4
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b06      	cmp	r3, #6
 800a6ca:	d175      	bne.n	800a7b8 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ce:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a6d2:	f107 0314 	add.w	r3, r7, #20
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fd ffe7 	bl	80086ac <mkpay>
    rx_ip6(ifp, &pkt);
 800a6de:	f107 0314 	add.w	r3, r7, #20
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f7ff ff33 	bl	800a550 <rx_ip6>
 800a6ea:	e06c      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	899b      	ldrh	r3, [r3, #12]
 800a6f0:	b29c      	uxth	r4, r3
 800a6f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6f6:	f7fd fb8e 	bl	8007e16 <mg_ntohs>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	429c      	cmp	r4, r3
 800a6fe:	d133      	bne.n	800a768 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	330e      	adds	r3, #14
 800a704:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	2b21      	cmp	r3, #33	; 0x21
 800a70a:	d957      	bls.n	800a7bc <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	885b      	ldrh	r3, [r3, #2]
 800a710:	b29b      	uxth	r3, r3
 800a712:	4618      	mov	r0, r3
 800a714:	f7fd fb7f 	bl	8007e16 <mg_ntohs>
 800a718:	4603      	mov	r3, r0
 800a71a:	f103 020e 	add.w	r2, r3, #14
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	429a      	cmp	r2, r3
 800a722:	d208      	bcs.n	800a736 <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	885b      	ldrh	r3, [r3, #2]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fd fb73 	bl	8007e16 <mg_ntohs>
 800a730:	4603      	mov	r3, r0
 800a732:	330e      	adds	r3, #14
 800a734:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2b21      	cmp	r3, #33	; 0x21
 800a73a:	d941      	bls.n	800a7c0 <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	091b      	lsrs	r3, r3, #4
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b04      	cmp	r3, #4
 800a746:	d13d      	bne.n	800a7c4 <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74a:	f103 0214 	add.w	r2, r3, #20
 800a74e:	f107 0314 	add.w	r3, r7, #20
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f7fd ffa9 	bl	80086ac <mkpay>
    rx_ip(ifp, &pkt);
 800a75a:	f107 0314 	add.w	r3, r7, #20
 800a75e:	4619      	mov	r1, r3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7ff fdc9 	bl	800a2f8 <rx_ip>
 800a766:	e02e      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800a768:	4b19      	ldr	r3, [pc, #100]	; (800a7d0 <mg_tcpip_rx+0x1fc>)
 800a76a:	f242 123a 	movw	r2, #8506	; 0x213a
 800a76e:	4919      	ldr	r1, [pc, #100]	; (800a7d4 <mg_tcpip_rx+0x200>)
 800a770:	2003      	movs	r0, #3
 800a772:	f7fb fe31 	bl	80063d8 <mg_log_prefix>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <mg_tcpip_rx+0x1be>
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	899b      	ldrh	r3, [r3, #12]
 800a780:	b29b      	uxth	r3, r3
 800a782:	4618      	mov	r0, r3
 800a784:	f7fd fb47 	bl	8007e16 <mg_ntohs>
 800a788:	4603      	mov	r3, r0
 800a78a:	4619      	mov	r1, r3
 800a78c:	4812      	ldr	r0, [pc, #72]	; (800a7d8 <mg_tcpip_rx+0x204>)
 800a78e:	f7fb fe7d 	bl	800648c <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b10      	cmp	r3, #16
 800a796:	bf28      	it	cs
 800a798:	2310      	movcs	r3, #16
 800a79a:	4619      	mov	r1, r3
 800a79c:	68b8      	ldr	r0, [r7, #8]
 800a79e:	f7fb feab 	bl	80064f8 <mg_hexdump>
 800a7a2:	e010      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a7a4:	bf00      	nop
 800a7a6:	e00e      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    return;
 800a7a8:	bf00      	nop
 800a7aa:	e00c      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a7ac:	bf00      	nop
 800a7ae:	e00a      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a7b0:	bf00      	nop
 800a7b2:	e008      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a7b4:	bf00      	nop
 800a7b6:	e006      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a7b8:	bf00      	nop
 800a7ba:	e004      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a7bc:	bf00      	nop
 800a7be:	e002      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a7c0:	bf00      	nop
 800a7c2:	e000      	b.n	800a7c6 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a7c4:	bf00      	nop
  }
}
 800a7c6:	374c      	adds	r7, #76	; 0x4c
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd90      	pop	{r4, r7, pc}
 800a7cc:	08014c68 	.word	0x08014c68
 800a7d0:	08014e28 	.word	0x08014e28
 800a7d4:	08013374 	.word	0x08013374
 800a7d8:	08014ac0 	.word	0x08014ac0

0800a7dc <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7de:	b095      	sub	sp, #84	; 0x54
 800a7e0:	af06      	add	r7, sp, #24
 800a7e2:	6178      	str	r0, [r7, #20]
 800a7e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 81b9 	beq.w	800ab62 <mg_tcpip_poll+0x386>
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 81b4 	beq.w	800ab62 <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800a800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a804:	e9cd 2300 	strd	r2, r3, [sp]
 800a808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a80c:	f04f 0300 	mov.w	r3, #0
 800a810:	4608      	mov	r0, r1
 800a812:	f7fd f8a0 	bl	8007956 <mg_timer_expired>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800a81c:	6979      	ldr	r1, [r7, #20]
 800a81e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a822:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800a826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d03f      	beq.n	800a8ae <mg_tcpip_poll+0xd2>
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d03a      	beq.n	800a8ae <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	6978      	ldr	r0, [r7, #20]
 800a840:	4798      	blx	r3
 800a842:	4603      	mov	r3, r0
 800a844:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a84e:	2b00      	cmp	r3, #0
 800a850:	bf14      	ite	ne
 800a852:	2301      	movne	r3, #1
 800a854:	2300      	moveq	r3, #0
 800a856:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800a85a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a85e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a862:	429a      	cmp	r2, r3
 800a864:	d023      	beq.n	800a8ae <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a866:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a86a:	f083 0301 	eor.w	r3, r3, #1
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <mg_tcpip_poll+0x9c>
 800a874:	2300      	movs	r3, #0
 800a876:	e006      	b.n	800a886 <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <mg_tcpip_poll+0xa8>
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <mg_tcpip_poll+0xaa>
 800a884:	2303      	movs	r3, #3
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800a88c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a890:	f083 0301 	eor.w	r3, r3, #1
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d006      	beq.n	800a8a8 <mg_tcpip_poll+0xcc>
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	7f1b      	ldrb	r3, [r3, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d002      	beq.n	800a8a8 <mg_tcpip_poll+0xcc>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a8a8:	6978      	ldr	r0, [r7, #20]
 800a8aa:	f7fd fff1 	bl	8008890 <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 8156 	beq.w	800ab66 <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d107      	bne.n	800a8d4 <mg_tcpip_poll+0xf8>
 800a8c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800a8cc:	6978      	ldr	r0, [r7, #20]
 800a8ce:	f7fe fa29 	bl	8008d24 <tx_dhcp_discover>
 800a8d2:	e04c      	b.n	800a96e <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a8d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d048      	beq.n	800a96e <mg_tcpip_poll+0x192>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d143      	bne.n	800a96e <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	d03e      	beq.n	800a96e <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a8fc:	4290      	cmp	r0, r2
 800a8fe:	eb71 0303 	sbcs.w	r3, r1, r3
 800a902:	d30a      	bcc.n	800a91a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2200      	movs	r2, #0
 800a910:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a912:	6978      	ldr	r0, [r7, #20]
 800a914:	f7fd ffbc 	bl	8008890 <onstatechange>
 800a918:	e029      	b.n	800a96e <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a920:	4993      	ldr	r1, [pc, #588]	; (800ab70 <mg_tcpip_poll+0x394>)
 800a922:	1854      	adds	r4, r2, r1
 800a924:	f143 0500 	adc.w	r5, r3, #0
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a92e:	42a2      	cmp	r2, r4
 800a930:	41ab      	sbcs	r3, r5
 800a932:	d21c      	bcs.n	800a96e <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a93a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a93e:	f04f 0300 	mov.w	r3, #0
 800a942:	f7f6 f94b 	bl	8000bdc <__aeabi_uldivmod>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4610      	mov	r0, r2
 800a94c:	4619      	mov	r1, r3
 800a94e:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800a952:	f04f 0300 	mov.w	r3, #0
 800a956:	f7f6 f941 	bl	8000bdc <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a95a:	4313      	orrs	r3, r2
 800a95c:	d107      	bne.n	800a96e <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	689a      	ldr	r2, [r3, #8]
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	4983      	ldr	r1, [pc, #524]	; (800ab74 <mg_tcpip_poll+0x398>)
 800a968:	6978      	ldr	r0, [r7, #20]
 800a96a:	f7fe f9ab 	bl	8008cc4 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d014      	beq.n	800a9a2 <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4798      	blx	r3
 800a98a:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01f      	beq.n	800a9d2 <mg_tcpip_poll+0x1f6>
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a998:	4619      	mov	r1, r3
 800a99a:	6978      	ldr	r0, [r7, #20]
 800a99c:	f7ff fe1a 	bl	800a5d4 <mg_tcpip_rx>
 800a9a0:	e017      	b.n	800a9d2 <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	332c      	adds	r3, #44	; 0x2c
 800a9a6:	f107 0220 	add.w	r2, r7, #32
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fc fb25 	bl	8006ffc <mg_queue_next>
 800a9b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00b      	beq.n	800a9d2 <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6978      	ldr	r0, [r7, #20]
 800a9c2:	f7ff fe07 	bl	800a5d4 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	332c      	adds	r3, #44	; 0x2c
 800a9ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fc fb93 	bl	80070f8 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9da:	e0bd      	b.n	800ab58 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 80af 	bne.w	800ab4c <mg_tcpip_poll+0x370>
 800a9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f040 80a6 	bne.w	800ab4c <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa02:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 809f 	bne.w	800ab50 <mg_tcpip_poll+0x374>
 800aa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa14:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aa18:	f003 0308 	and.w	r3, r3, #8
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f040 8096 	bne.w	800ab50 <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa26:	3390      	adds	r3, #144	; 0x90
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2c:	331c      	adds	r3, #28
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800aa38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa3c:	4290      	cmp	r0, r2
 800aa3e:	eb71 0303 	sbcs.w	r3, r1, r3
 800aa42:	f080 8086 	bcs.w	800ab52 <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	7d9b      	ldrb	r3, [r3, #22]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d137      	bne.n	800aabe <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800aa4e:	4b4a      	ldr	r3, [pc, #296]	; (800ab78 <mg_tcpip_poll+0x39c>)
 800aa50:	f242 1278 	movw	r2, #8568	; 0x2178
 800aa54:	4949      	ldr	r1, [pc, #292]	; (800ab7c <mg_tcpip_poll+0x3a0>)
 800aa56:	2003      	movs	r0, #3
 800aa58:	f7fb fcbe 	bl	80063d8 <mg_log_prefix>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d008      	beq.n	800aa74 <mg_tcpip_poll+0x298>
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	4844      	ldr	r0, [pc, #272]	; (800ab80 <mg_tcpip_poll+0x3a4>)
 800aa70:	f7fb fd0c 	bl	800648c <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	f103 0610 	add.w	r6, r3, #16
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	613b      	str	r3, [r7, #16]
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	8b1c      	ldrh	r4, [r3, #24]
 800aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa84:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fd f9aa 	bl	8007de4 <mg_ntohl>
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fd f9a4 	bl	8007de4 <mg_ntohl>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	9205      	str	r2, [sp, #20]
 800aaa2:	4a38      	ldr	r2, [pc, #224]	; (800ab84 <mg_tcpip_poll+0x3a8>)
 800aaa4:	9204      	str	r2, [sp, #16]
 800aaa6:	9303      	str	r3, [sp, #12]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	9102      	str	r1, [sp, #8]
 800aaac:	9501      	str	r5, [sp, #4]
 800aaae:	9400      	str	r4, [sp, #0]
 800aab0:	2310      	movs	r3, #16
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4631      	mov	r1, r6
 800aab6:	6978      	ldr	r0, [r7, #20]
 800aab8:	f7fe fee4 	bl	8009884 <tx_tcp>
 800aabc:	e041      	b.n	800ab42 <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	7ddb      	ldrb	r3, [r3, #23]
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	b2d1      	uxtb	r1, r2
 800aac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac8:	75d1      	strb	r1, [r2, #23]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d904      	bls.n	800aad8 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800aace:	492e      	ldr	r1, [pc, #184]	; (800ab88 <mg_tcpip_poll+0x3ac>)
 800aad0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aad2:	f7f6 ff3f 	bl	8001954 <mg_error>
 800aad6:	e034      	b.n	800ab42 <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800aad8:	4b27      	ldr	r3, [pc, #156]	; (800ab78 <mg_tcpip_poll+0x39c>)
 800aada:	f242 127f 	movw	r2, #8575	; 0x217f
 800aade:	4927      	ldr	r1, [pc, #156]	; (800ab7c <mg_tcpip_poll+0x3a0>)
 800aae0:	2003      	movs	r0, #3
 800aae2:	f7fb fc79 	bl	80063d8 <mg_log_prefix>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d005      	beq.n	800aaf8 <mg_tcpip_poll+0x31c>
 800aaec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4826      	ldr	r0, [pc, #152]	; (800ab8c <mg_tcpip_poll+0x3b0>)
 800aaf4:	f7fb fcca 	bl	800648c <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	f103 0610 	add.w	r6, r3, #16
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab04:	8b1c      	ldrh	r4, [r3, #24]
 800ab06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab08:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fd f967 	bl	8007de4 <mg_ntohl>
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fd f961 	bl	8007de4 <mg_ntohl>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2200      	movs	r2, #0
 800ab26:	9205      	str	r2, [sp, #20]
 800ab28:	4a16      	ldr	r2, [pc, #88]	; (800ab84 <mg_tcpip_poll+0x3a8>)
 800ab2a:	9204      	str	r2, [sp, #16]
 800ab2c:	9303      	str	r3, [sp, #12]
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	9102      	str	r1, [sp, #8]
 800ab32:	9501      	str	r5, [sp, #4]
 800ab34:	9400      	str	r4, [sp, #0]
 800ab36:	2310      	movs	r3, #16
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	6978      	ldr	r0, [r7, #20]
 800ab3e:	f7fe fea1 	bl	8009884 <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800ab42:	2100      	movs	r1, #0
 800ab44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab46:	f7fe ffad 	bl	8009aa4 <settmout>
 800ab4a:	e002      	b.n	800ab52 <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800ab4c:	bf00      	nop
 800ab4e:	e000      	b.n	800ab52 <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800ab50:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	637b      	str	r3, [r7, #52]	; 0x34
 800ab58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f47f af3e 	bne.w	800a9dc <mg_tcpip_poll+0x200>
 800ab60:	e002      	b.n	800ab68 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800ab62:	bf00      	nop
 800ab64:	e000      	b.n	800ab68 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800ab66:	bf00      	nop
    }
  }
}
 800ab68:	373c      	adds	r7, #60	; 0x3c
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	001b7740 	.word	0x001b7740
 800ab74:	08014c68 	.word	0x08014c68
 800ab78:	08014e34 	.word	0x08014e34
 800ab7c:	08013374 	.word	0x08013374
 800ab80:	08014ad8 	.word	0x08014ad8
 800ab84:	08013a04 	.word	0x08013a04
 800ab88:	08014ae8 	.word	0x08014ae8
 800ab8c:	08014af4 	.word	0x08014af4

0800ab90 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	332c      	adds	r3, #44	; 0x2c
 800aba0:	f107 0114 	add.w	r1, r7, #20
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fc f9d0 	bl	8006f4c <mg_queue_book>
 800abac:	4602      	mov	r2, r0
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d811      	bhi.n	800abd8 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	68f9      	ldr	r1, [r7, #12]
 800abba:	4618      	mov	r0, r3
 800abbc:	f007 fd6f 	bl	801269e <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	332c      	adds	r3, #44	; 0x2c
 800abc4:	68b9      	ldr	r1, [r7, #8]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fc fa5e 	bl	8007088 <mg_queue_add>
    ifp->nrecv++;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800abd6:	e004      	b.n	800abe2 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800abe2:	bf00      	nop
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d12c      	bne.n	800ac58 <mg_tcpip_init+0x6c>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d128      	bne.n	800ac58 <mg_tcpip_init+0x6c>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	789b      	ldrb	r3, [r3, #2]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d124      	bne.n	800ac58 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d120      	bne.n	800ac58 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	791b      	ldrb	r3, [r3, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d11c      	bne.n	800ac58 <mg_tcpip_init+0x6c>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	795b      	ldrb	r3, [r3, #5]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d118      	bne.n	800ac58 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2202      	movs	r2, #2
 800ac2a:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	2105      	movs	r1, #5
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f6 fba0 	bl	8001378 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800ac38:	4b4d      	ldr	r3, [pc, #308]	; (800ad70 <mg_tcpip_init+0x184>)
 800ac3a:	f242 129d 	movw	r2, #8605	; 0x219d
 800ac3e:	494d      	ldr	r1, [pc, #308]	; (800ad74 <mg_tcpip_init+0x188>)
 800ac40:	2002      	movs	r0, #2
 800ac42:	f7fb fbc9 	bl	80063d8 <mg_log_prefix>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <mg_tcpip_init+0x6c>
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4949      	ldr	r1, [pc, #292]	; (800ad78 <mg_tcpip_init+0x18c>)
 800ac52:	484a      	ldr	r0, [pc, #296]	; (800ad7c <mg_tcpip_init+0x190>)
 800ac54:	f7fb fc1a 	bl	800648c <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d018      	beq.n	800ac94 <mg_tcpip_init+0xa8>
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6838      	ldr	r0, [r7, #0]
 800ac6a:	4798      	blx	r3
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f083 0301 	eor.w	r3, r3, #1
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00d      	beq.n	800ac94 <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800ac78:	4b3d      	ldr	r3, [pc, #244]	; (800ad70 <mg_tcpip_init+0x184>)
 800ac7a:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800ac7e:	493d      	ldr	r1, [pc, #244]	; (800ad74 <mg_tcpip_init+0x188>)
 800ac80:	2001      	movs	r0, #1
 800ac82:	f7fb fba9 	bl	80063d8 <mg_log_prefix>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d06d      	beq.n	800ad68 <mg_tcpip_init+0x17c>
 800ac8c:	483c      	ldr	r0, [pc, #240]	; (800ad80 <mg_tcpip_init+0x194>)
 800ac8e:	f7fb fbfd 	bl	800648c <mg_log>
 800ac92:	e069      	b.n	800ad68 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800ac94:	f240 6304 	movw	r3, #1540	; 0x604
 800ac98:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	2001      	movs	r0, #1
 800ac9e:	f007 f957 	bl	8011f50 <calloc>
 800aca2:	4603      	mov	r3, r0
 800aca4:	461a      	mov	r2, r3
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	615a      	str	r2, [r3, #20]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10a      	bne.n	800acce <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <mg_tcpip_init+0xda>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	e001      	b.n	800acca <mg_tcpip_init+0xde>
 800acc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	4619      	mov	r1, r3
 800acd4:	2001      	movs	r0, #1
 800acd6:	f007 f93b 	bl	8011f50 <calloc>
 800acda:	4603      	mov	r3, r0
 800acdc:	461a      	mov	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800ace2:	f7fd f8e9 	bl	8007eb8 <mg_millis>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2228      	movs	r2, #40	; 0x28
 800ad00:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d102      	bne.n	800ad10 <mg_tcpip_init+0x124>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	333c      	adds	r3, #60	; 0x3c
 800ad14:	2206      	movs	r2, #6
 800ad16:	21ff      	movs	r1, #255	; 0xff
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f007 fbf6 	bl	801250a <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	3360      	adds	r3, #96	; 0x60
 800ad22:	2102      	movs	r1, #2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7f6 fb27 	bl	8001378 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ad30:	4b14      	ldr	r3, [pc, #80]	; (800ad84 <mg_tcpip_init+0x198>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d003      	beq.n	800ad4c <mg_tcpip_init+0x160>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10d      	bne.n	800ad68 <mg_tcpip_init+0x17c>
 800ad4c:	4b08      	ldr	r3, [pc, #32]	; (800ad70 <mg_tcpip_init+0x184>)
 800ad4e:	f242 12b1 	movw	r2, #8625	; 0x21b1
 800ad52:	4908      	ldr	r1, [pc, #32]	; (800ad74 <mg_tcpip_init+0x188>)
 800ad54:	2001      	movs	r0, #1
 800ad56:	f7fb fb3f 	bl	80063d8 <mg_log_prefix>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <mg_tcpip_init+0x17c>
 800ad60:	4809      	ldr	r0, [pc, #36]	; (800ad88 <mg_tcpip_init+0x19c>)
 800ad62:	f7fb fb93 	bl	800648c <mg_log>
  }
}
 800ad66:	e7ff      	b.n	800ad68 <mg_tcpip_init+0x17c>
 800ad68:	bf00      	nop
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	08014e44 	.word	0x08014e44
 800ad74:	08013374 	.word	0x08013374
 800ad78:	08006ced 	.word	0x08006ced
 800ad7c:	08014b04 	.word	0x08014b04
 800ad80:	08014b28 	.word	0x08014b28
 800ad84:	ffff8000 	.word	0xffff8000
 800ad88:	08014094 	.word	0x08014094

0800ad8c <mg_open_listener>:
      c->is_connecting = 1;
    }
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800ad96:	6838      	ldr	r0, [r7, #0]
 800ad98:	f7fc ffc0 	bl	8007d1c <mg_url_port>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fd f839 	bl	8007e16 <mg_ntohs>
 800ada4:	4603      	mov	r3, r0
 800ada6:	461a      	mov	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	831a      	strh	r2, [r3, #24]
  return true;
 800adac:	2301      	movs	r3, #1
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800adc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc8:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d009      	beq.n	800ade2 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add6:	461a      	mov	r2, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7fc fec6 	bl	8007b6a <mg_tls_send>
 800adde:	4603      	mov	r3, r0
 800ade0:	e008      	b.n	800adf4 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adea:	461a      	mov	r2, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7fe ff67 	bl	8009cc0 <mg_io_send>
 800adf2:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800adf4:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	dd0d      	ble.n	800ae18 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3348      	adds	r3, #72	; 0x48
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	2100      	movs	r1, #0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fa fcef 	bl	80057e8 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	461a      	mov	r2, r3
 800ae10:	2108      	movs	r1, #8
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7f6 fd7b 	bl	800190e <mg_call>
  }
}
 800ae18:	bf00      	nop
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800ae20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae22:	b08f      	sub	sp, #60	; 0x3c
 800ae24:	af06      	add	r7, sp, #24
 800ae26:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3390      	adds	r3, #144	; 0x90
 800ae2c:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	331c      	adds	r3, #28
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	3318      	adds	r3, #24
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fa fd1f 	bl	800587e <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d12f      	bne.n	800aeb0 <close_conn+0x90>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d127      	bne.n	800aeb0 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800ae64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae66:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	f103 0610 	add.w	r6, r3, #16
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	60bb      	str	r3, [r7, #8]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	8b1c      	ldrh	r4, [r3, #24]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fc ffb0 	bl	8007de4 <mg_ntohl>
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fc ffaa 	bl	8007de4 <mg_ntohl>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2200      	movs	r2, #0
 800ae94:	9205      	str	r2, [sp, #20]
 800ae96:	2200      	movs	r2, #0
 800ae98:	9204      	str	r2, [sp, #16]
 800ae9a:	9303      	str	r3, [sp, #12]
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	9102      	str	r1, [sp, #8]
 800aea0:	9501      	str	r5, [sp, #4]
 800aea2:	9400      	str	r4, [sp, #0]
 800aea4:	2311      	movs	r3, #17
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	4631      	mov	r1, r6
 800aeaa:	69b8      	ldr	r0, [r7, #24]
 800aeac:	f7fe fcea 	bl	8009884 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7fb fc35 	bl	8006720 <mg_close_conn>
}
 800aeb6:	bf00      	nop
 800aeb8:	3724      	adds	r7, #36	; 0x24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aebe <can_write>:

static bool can_write(struct mg_connection *c) {
 800aebe:	b480      	push	{r7}
 800aec0:	b083      	sub	sp, #12
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aecc:	f003 0320 	and.w	r3, r3, #32
 800aed0:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d11d      	bne.n	800af12 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aedc:	f003 0308 	and.w	r3, r3, #8
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d115      	bne.n	800af12 <can_write+0x54>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d011      	beq.n	800af12 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aef4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aef8:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d109      	bne.n	800af12 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800af04:	f003 0310 	and.w	r3, r3, #16
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <can_write+0x54>
 800af0e:	2301      	movs	r3, #1
 800af10:	e000      	b.n	800af14 <can_write+0x56>
 800af12:	2300      	movs	r3, #0
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	b2db      	uxtb	r3, r3
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
	...

0800af28 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800af28:	b5b0      	push	{r4, r5, r7, lr}
 800af2a:	b08a      	sub	sp, #40	; 0x28
 800af2c:	af04      	add	r7, sp, #16
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800af32:	f7fc ffc1 	bl	8007eb8 <mg_millis>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800af42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af46:	4608      	mov	r0, r1
 800af48:	f7ff fc48 	bl	800a7dc <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af56:	4608      	mov	r0, r1
 800af58:	f7fc fd61 	bl	8007a1e <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	617b      	str	r3, [r7, #20]
 800af62:	e089      	b.n	800b078 <mg_mgr_poll+0x150>
    tmp = c->next;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	461a      	mov	r2, r3
 800af70:	2102      	movs	r1, #2
 800af72:	6978      	ldr	r0, [r7, #20]
 800af74:	f7f6 fccb 	bl	800190e <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800af78:	4b44      	ldr	r3, [pc, #272]	; (800b08c <mg_mgr_poll+0x164>)
 800af7a:	f242 2218 	movw	r2, #8728	; 0x2218
 800af7e:	4944      	ldr	r1, [pc, #272]	; (800b090 <mg_mgr_poll+0x168>)
 800af80:	2004      	movs	r0, #4
 800af82:	f7fb fa29 	bl	80063d8 <mg_log_prefix>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d041      	beq.n	800b010 <mg_mgr_poll+0xe8>
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800af96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <mg_mgr_poll+0x7c>
 800afa0:	2454      	movs	r4, #84	; 0x54
 800afa2:	e000      	b.n	800afa6 <mg_mgr_poll+0x7e>
 800afa4:	2474      	movs	r4, #116	; 0x74
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800afac:	f003 0320 	and.w	r3, r3, #32
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <mg_mgr_poll+0x92>
 800afb6:	2543      	movs	r5, #67	; 0x43
 800afb8:	e000      	b.n	800afbc <mg_mgr_poll+0x94>
 800afba:	2563      	movs	r5, #99	; 0x63
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800afc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <mg_mgr_poll+0xa8>
 800afcc:	2348      	movs	r3, #72	; 0x48
 800afce:	e000      	b.n	800afd2 <mg_mgr_poll+0xaa>
 800afd0:	2368      	movs	r3, #104	; 0x68
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800afd8:	f002 0208 	and.w	r2, r2, #8
 800afdc:	b2d2      	uxtb	r2, r2
 800afde:	2a00      	cmp	r2, #0
 800afe0:	d001      	beq.n	800afe6 <mg_mgr_poll+0xbe>
 800afe2:	2252      	movs	r2, #82	; 0x52
 800afe4:	e000      	b.n	800afe8 <mg_mgr_poll+0xc0>
 800afe6:	2272      	movs	r2, #114	; 0x72
 800afe8:	6979      	ldr	r1, [r7, #20]
 800afea:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800afee:	f001 0120 	and.w	r1, r1, #32
 800aff2:	b2c9      	uxtb	r1, r1
 800aff4:	2900      	cmp	r1, #0
 800aff6:	d001      	beq.n	800affc <mg_mgr_poll+0xd4>
 800aff8:	2143      	movs	r1, #67	; 0x43
 800affa:	e000      	b.n	800affe <mg_mgr_poll+0xd6>
 800affc:	2163      	movs	r1, #99	; 0x63
 800affe:	9102      	str	r1, [sp, #8]
 800b000:	9201      	str	r2, [sp, #4]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	462b      	mov	r3, r5
 800b006:	4622      	mov	r2, r4
 800b008:	4601      	mov	r1, r0
 800b00a:	4822      	ldr	r0, [pc, #136]	; (800b094 <mg_mgr_poll+0x16c>)
 800b00c:	f7fb fa3e 	bl	800648c <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <mg_mgr_poll+0xfe>
 800b020:	6978      	ldr	r0, [r7, #20]
 800b022:	f7fc fd75 	bl	8007b10 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800b026:	6978      	ldr	r0, [r7, #20]
 800b028:	f7ff ff49 	bl	800aebe <can_write>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <mg_mgr_poll+0x110>
 800b032:	6978      	ldr	r0, [r7, #20]
 800b034:	f7ff febf 	bl	800adb6 <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b03e:	f003 0310 	and.w	r3, r3, #16
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00a      	beq.n	800b05e <mg_mgr_poll+0x136>
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d106      	bne.n	800b05e <mg_mgr_poll+0x136>
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b056:	f043 0320 	orr.w	r3, r3, #32
 800b05a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b064:	f003 0320 	and.w	r3, r3, #32
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <mg_mgr_poll+0x14c>
 800b06e:	6978      	ldr	r0, [r7, #20]
 800b070:	f7ff fed6 	bl	800ae20 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f47f af72 	bne.w	800af64 <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bdb0      	pop	{r4, r5, r7, pc}
 800b08a:	bf00      	nop
 800b08c:	08014e54 	.word	0x08014e54
 800b090:	08013374 	.word	0x08013374
 800b094:	08014b74 	.word	0x08014b74

0800b098 <scmp>:
  {"/web_root/index.html.gz", v1, sizeof(v1), 1710036665},
  {"/web_root/styles.css.gz", v2, sizeof(v2), 1710036662},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800b0a2:	e005      	b.n	800b0b0 <scmp+0x18>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	607b      	str	r3, [r7, #4]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <scmp+0x2c>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	781a      	ldrb	r2, [r3, #0]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d0ef      	beq.n	800b0a4 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	1ad3      	subs	r3, r2, r3
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <mg_unlist>:
const char *mg_unlist(size_t no) {
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800b0e4:	4906      	ldr	r1, [pc, #24]	; (800b100 <mg_unlist+0x24>)
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	4413      	add	r3, r2
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	440b      	add	r3, r1
 800b0f2:	681b      	ldr	r3, [r3, #0]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	080151e8 	.word	0x080151e8

0800b104 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800b110:	4b16      	ldr	r3, [pc, #88]	; (800b16c <mg_unpack+0x68>)
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	e020      	b.n	800b158 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff ffbb 	bl	800b098 <scmp>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d113      	bne.n	800b150 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d004      	beq.n	800b138 <mg_unpack+0x34>
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	1e5a      	subs	r2, r3, #1
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d005      	beq.n	800b14a <mg_unpack+0x46>
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b144:	6879      	ldr	r1, [r7, #4]
 800b146:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	e008      	b.n	800b162 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800b150:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	3318      	adds	r3, #24
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1da      	bne.n	800b116 <mg_unpack+0x12>
  }
  return NULL;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	080151e8 	.word	0x080151e8

0800b170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b176:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <HAL_MspInit+0x4c>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	4a10      	ldr	r2, [pc, #64]	; (800b1bc <HAL_MspInit+0x4c>)
 800b17c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b180:	6413      	str	r3, [r2, #64]	; 0x40
 800b182:	4b0e      	ldr	r3, [pc, #56]	; (800b1bc <HAL_MspInit+0x4c>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18a:	607b      	str	r3, [r7, #4]
 800b18c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b18e:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <HAL_MspInit+0x4c>)
 800b190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b192:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <HAL_MspInit+0x4c>)
 800b194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b198:	6453      	str	r3, [r2, #68]	; 0x44
 800b19a:	4b08      	ldr	r3, [pc, #32]	; (800b1bc <HAL_MspInit+0x4c>)
 800b19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	210f      	movs	r1, #15
 800b1aa:	f06f 0001 	mvn.w	r0, #1
 800b1ae:	f000 fbfb 	bl	800b9a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	40023800 	.word	0x40023800

0800b1c0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08e      	sub	sp, #56	; 0x38
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	605a      	str	r2, [r3, #4]
 800b1d2:	609a      	str	r2, [r3, #8]
 800b1d4:	60da      	str	r2, [r3, #12]
 800b1d6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a52      	ldr	r2, [pc, #328]	; (800b328 <HAL_ETH_MspInit+0x168>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	f040 809e 	bne.w	800b320 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b1e4:	4b51      	ldr	r3, [pc, #324]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e8:	4a50      	ldr	r2, [pc, #320]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b1ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b1ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b1f0:	4b4e      	ldr	r3, [pc, #312]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f8:	623b      	str	r3, [r7, #32]
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	4b4b      	ldr	r3, [pc, #300]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b200:	4a4a      	ldr	r2, [pc, #296]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b206:	6313      	str	r3, [r2, #48]	; 0x30
 800b208:	4b48      	ldr	r3, [pc, #288]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b210:	61fb      	str	r3, [r7, #28]
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	4b45      	ldr	r3, [pc, #276]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b218:	4a44      	ldr	r2, [pc, #272]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b21a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b21e:	6313      	str	r3, [r2, #48]	; 0x30
 800b220:	4b42      	ldr	r3, [pc, #264]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b228:	61bb      	str	r3, [r7, #24]
 800b22a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b22c:	4b3f      	ldr	r3, [pc, #252]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b230:	4a3e      	ldr	r2, [pc, #248]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b232:	f043 0304 	orr.w	r3, r3, #4
 800b236:	6313      	str	r3, [r2, #48]	; 0x30
 800b238:	4b3c      	ldr	r3, [pc, #240]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b244:	4b39      	ldr	r3, [pc, #228]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b248:	4a38      	ldr	r2, [pc, #224]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b24a:	f043 0301 	orr.w	r3, r3, #1
 800b24e:	6313      	str	r3, [r2, #48]	; 0x30
 800b250:	4b36      	ldr	r3, [pc, #216]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	613b      	str	r3, [r7, #16]
 800b25a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b25c:	4b33      	ldr	r3, [pc, #204]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b260:	4a32      	ldr	r2, [pc, #200]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b262:	f043 0302 	orr.w	r3, r3, #2
 800b266:	6313      	str	r3, [r2, #48]	; 0x30
 800b268:	4b30      	ldr	r3, [pc, #192]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	60fb      	str	r3, [r7, #12]
 800b272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b274:	4b2d      	ldr	r3, [pc, #180]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b278:	4a2c      	ldr	r2, [pc, #176]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b27a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b27e:	6313      	str	r3, [r2, #48]	; 0x30
 800b280:	4b2a      	ldr	r3, [pc, #168]	; (800b32c <HAL_ETH_MspInit+0x16c>)
 800b282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b288:	60bb      	str	r3, [r7, #8]
 800b28a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b28c:	2332      	movs	r3, #50	; 0x32
 800b28e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b290:	2302      	movs	r3, #2
 800b292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b294:	2300      	movs	r3, #0
 800b296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b298:	2303      	movs	r3, #3
 800b29a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b29c:	230b      	movs	r3, #11
 800b29e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4822      	ldr	r0, [pc, #136]	; (800b330 <HAL_ETH_MspInit+0x170>)
 800b2a8:	f000 fece 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b2ac:	2386      	movs	r3, #134	; 0x86
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b2bc:	230b      	movs	r3, #11
 800b2be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	481b      	ldr	r0, [pc, #108]	; (800b334 <HAL_ETH_MspInit+0x174>)
 800b2c8:	f000 febe 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b2cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b2de:	230b      	movs	r3, #11
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b2e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4813      	ldr	r0, [pc, #76]	; (800b338 <HAL_ETH_MspInit+0x178>)
 800b2ea:	f000 fead 	bl	800c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b2ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b300:	230b      	movs	r3, #11
 800b302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b308:	4619      	mov	r1, r3
 800b30a:	480c      	ldr	r0, [pc, #48]	; (800b33c <HAL_ETH_MspInit+0x17c>)
 800b30c:	f000 fe9c 	bl	800c048 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b310:	2200      	movs	r2, #0
 800b312:	2105      	movs	r1, #5
 800b314:	203d      	movs	r0, #61	; 0x3d
 800b316:	f000 fb47 	bl	800b9a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b31a:	203d      	movs	r0, #61	; 0x3d
 800b31c:	f000 fb60 	bl	800b9e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800b320:	bf00      	nop
 800b322:	3738      	adds	r7, #56	; 0x38
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40028000 	.word	0x40028000
 800b32c:	40023800 	.word	0x40023800
 800b330:	40020800 	.word	0x40020800
 800b334:	40020000 	.word	0x40020000
 800b338:	40020400 	.word	0x40020400
 800b33c:	40021800 	.word	0x40021800

0800b340 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b0a4      	sub	sp, #144	; 0x90
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b348:	f107 030c 	add.w	r3, r7, #12
 800b34c:	2284      	movs	r2, #132	; 0x84
 800b34e:	2100      	movs	r1, #0
 800b350:	4618      	mov	r0, r3
 800b352:	f007 f8da 	bl	801250a <memset>
  if(hrng->Instance==RNG)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a11      	ldr	r2, [pc, #68]	; (800b3a0 <HAL_RNG_MspInit+0x60>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d11b      	bne.n	800b398 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b364:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b366:	2300      	movs	r3, #0
 800b368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b36c:	f107 030c 	add.w	r3, r7, #12
 800b370:	4618      	mov	r0, r3
 800b372:	f002 fb8f 	bl	800da94 <HAL_RCCEx_PeriphCLKConfig>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800b37c:	f7f6 fa86 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b380:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <HAL_RNG_MspInit+0x64>)
 800b382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b384:	4a07      	ldr	r2, [pc, #28]	; (800b3a4 <HAL_RNG_MspInit+0x64>)
 800b386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38a:	6353      	str	r3, [r2, #52]	; 0x34
 800b38c:	4b05      	ldr	r3, [pc, #20]	; (800b3a4 <HAL_RNG_MspInit+0x64>)
 800b38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b394:	60bb      	str	r3, [r7, #8]
 800b396:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b398:	bf00      	nop
 800b39a:	3790      	adds	r7, #144	; 0x90
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	50060800 	.word	0x50060800
 800b3a4:	40023800 	.word	0x40023800

0800b3a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b0aa      	sub	sp, #168	; 0xa8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	605a      	str	r2, [r3, #4]
 800b3ba:	609a      	str	r2, [r3, #8]
 800b3bc:	60da      	str	r2, [r3, #12]
 800b3be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b3c0:	f107 0310 	add.w	r3, r7, #16
 800b3c4:	2284      	movs	r2, #132	; 0x84
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f007 f89e 	bl	801250a <memset>
  if(huart->Instance==USART3)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a22      	ldr	r2, [pc, #136]	; (800b45c <HAL_UART_MspInit+0xb4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d13c      	bne.n	800b452 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b3d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b3e2:	f107 0310 	add.w	r3, r7, #16
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f002 fb54 	bl	800da94 <HAL_RCCEx_PeriphCLKConfig>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b3f2:	f7f6 fa4b 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <HAL_UART_MspInit+0xb8>)
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	4a19      	ldr	r2, [pc, #100]	; (800b460 <HAL_UART_MspInit+0xb8>)
 800b3fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b400:	6413      	str	r3, [r2, #64]	; 0x40
 800b402:	4b17      	ldr	r3, [pc, #92]	; (800b460 <HAL_UART_MspInit+0xb8>)
 800b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b40e:	4b14      	ldr	r3, [pc, #80]	; (800b460 <HAL_UART_MspInit+0xb8>)
 800b410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b412:	4a13      	ldr	r2, [pc, #76]	; (800b460 <HAL_UART_MspInit+0xb8>)
 800b414:	f043 0308 	orr.w	r3, r3, #8
 800b418:	6313      	str	r3, [r2, #48]	; 0x30
 800b41a:	4b11      	ldr	r3, [pc, #68]	; (800b460 <HAL_UART_MspInit+0xb8>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	60bb      	str	r3, [r7, #8]
 800b424:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b42a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b42e:	2302      	movs	r3, #2
 800b430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b434:	2300      	movs	r3, #0
 800b436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b43a:	2303      	movs	r3, #3
 800b43c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b440:	2307      	movs	r3, #7
 800b442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b446:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b44a:	4619      	mov	r1, r3
 800b44c:	4805      	ldr	r0, [pc, #20]	; (800b464 <HAL_UART_MspInit+0xbc>)
 800b44e:	f000 fdfb 	bl	800c048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b452:	bf00      	nop
 800b454:	37a8      	adds	r7, #168	; 0xa8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	40004800 	.word	0x40004800
 800b460:	40023800 	.word	0x40023800
 800b464:	40020c00 	.word	0x40020c00

0800b468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08e      	sub	sp, #56	; 0x38
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800b474:	2300      	movs	r3, #0
 800b476:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b478:	4b33      	ldr	r3, [pc, #204]	; (800b548 <HAL_InitTick+0xe0>)
 800b47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47c:	4a32      	ldr	r2, [pc, #200]	; (800b548 <HAL_InitTick+0xe0>)
 800b47e:	f043 0310 	orr.w	r3, r3, #16
 800b482:	6413      	str	r3, [r2, #64]	; 0x40
 800b484:	4b30      	ldr	r3, [pc, #192]	; (800b548 <HAL_InitTick+0xe0>)
 800b486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b488:	f003 0310 	and.w	r3, r3, #16
 800b48c:	60fb      	str	r3, [r7, #12]
 800b48e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b490:	f107 0210 	add.w	r2, r7, #16
 800b494:	f107 0314 	add.w	r3, r7, #20
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f002 fac8 	bl	800da30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d103      	bne.n	800b4b2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b4aa:	f002 fa99 	bl	800d9e0 <HAL_RCC_GetPCLK1Freq>
 800b4ae:	6378      	str	r0, [r7, #52]	; 0x34
 800b4b0:	e004      	b.n	800b4bc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b4b2:	f002 fa95 	bl	800d9e0 <HAL_RCC_GetPCLK1Freq>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4be:	4a23      	ldr	r2, [pc, #140]	; (800b54c <HAL_InitTick+0xe4>)
 800b4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c4:	0c9b      	lsrs	r3, r3, #18
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b4ca:	4b21      	ldr	r3, [pc, #132]	; (800b550 <HAL_InitTick+0xe8>)
 800b4cc:	4a21      	ldr	r2, [pc, #132]	; (800b554 <HAL_InitTick+0xec>)
 800b4ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b4d0:	4b1f      	ldr	r3, [pc, #124]	; (800b550 <HAL_InitTick+0xe8>)
 800b4d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b4d8:	4a1d      	ldr	r2, [pc, #116]	; (800b550 <HAL_InitTick+0xe8>)
 800b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b4de:	4b1c      	ldr	r3, [pc, #112]	; (800b550 <HAL_InitTick+0xe8>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <HAL_InitTick+0xe8>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4ea:	4b19      	ldr	r3, [pc, #100]	; (800b550 <HAL_InitTick+0xe8>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b4f0:	4817      	ldr	r0, [pc, #92]	; (800b550 <HAL_InitTick+0xe8>)
 800b4f2:	f002 ff3f 	bl	800e374 <HAL_TIM_Base_Init>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800b4fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b500:	2b00      	cmp	r3, #0
 800b502:	d11b      	bne.n	800b53c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b504:	4812      	ldr	r0, [pc, #72]	; (800b550 <HAL_InitTick+0xe8>)
 800b506:	f002 ff97 	bl	800e438 <HAL_TIM_Base_Start_IT>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800b510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b514:	2b00      	cmp	r3, #0
 800b516:	d111      	bne.n	800b53c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b518:	2036      	movs	r0, #54	; 0x36
 800b51a:	f000 fa61 	bl	800b9e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b0f      	cmp	r3, #15
 800b522:	d808      	bhi.n	800b536 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b524:	2200      	movs	r2, #0
 800b526:	6879      	ldr	r1, [r7, #4]
 800b528:	2036      	movs	r0, #54	; 0x36
 800b52a:	f000 fa3d 	bl	800b9a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b52e:	4a0a      	ldr	r2, [pc, #40]	; (800b558 <HAL_InitTick+0xf0>)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	e002      	b.n	800b53c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b53c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b540:	4618      	mov	r0, r3
 800b542:	3738      	adds	r7, #56	; 0x38
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	40023800 	.word	0x40023800
 800b54c:	431bde83 	.word	0x431bde83
 800b550:	200036cc 	.word	0x200036cc
 800b554:	40001000 	.word	0x40001000
 800b558:	20000254 	.word	0x20000254

0800b55c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b560:	e7fe      	b.n	800b560 <NMI_Handler+0x4>

0800b562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b562:	b480      	push	{r7}
 800b564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b566:	e7fe      	b.n	800b566 <HardFault_Handler+0x4>

0800b568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b56c:	e7fe      	b.n	800b56c <MemManage_Handler+0x4>

0800b56e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b56e:	b480      	push	{r7}
 800b570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b572:	e7fe      	b.n	800b572 <BusFault_Handler+0x4>

0800b574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b574:	b480      	push	{r7}
 800b576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b578:	e7fe      	b.n	800b578 <UsageFault_Handler+0x4>

0800b57a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b57a:	b480      	push	{r7}
 800b57c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b57e:	bf00      	nop
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b58c:	4802      	ldr	r0, [pc, #8]	; (800b598 <TIM6_DAC_IRQHandler+0x10>)
 800b58e:	f002 ffcb 	bl	800e528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b592:	bf00      	nop
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	200036cc 	.word	0x200036cc

0800b59c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
  return 1;
 800b5a0:	2301      	movs	r3, #1
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <_kill>:

int _kill(int pid, int sig)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b5b6:	f007 f83d 	bl	8012634 <__errno>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2216      	movs	r2, #22
 800b5be:	601a      	str	r2, [r3, #0]
  return -1;
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <_exit>:

void _exit (int status)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b5d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ffe7 	bl	800b5ac <_kill>
  while (1) {}    /* Make sure we hang here */
 800b5de:	e7fe      	b.n	800b5de <_exit+0x12>

0800b5e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	e00a      	b.n	800b608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b5f2:	f3af 8000 	nop.w
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	60ba      	str	r2, [r7, #8]
 800b5fe:	b2ca      	uxtb	r2, r1
 800b600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	3301      	adds	r3, #1
 800b606:	617b      	str	r3, [r7, #20]
 800b608:	697a      	ldr	r2, [r7, #20]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	dbf0      	blt.n	800b5f2 <_read+0x12>
  }

  return len;
 800b610:	687b      	ldr	r3, [r7, #4]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3718      	adds	r7, #24
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d107      	bne.n	800b63e <_write+0x22>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	b29a      	uxth	r2, r3
 800b632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	4803      	ldr	r0, [pc, #12]	; (800b648 <_write+0x2c>)
 800b63a:	f003 f9c9 	bl	800e9d0 <HAL_UART_Transmit>
	 return len;
 800b63e:	687b      	ldr	r3, [r7, #4]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20000514 	.word	0x20000514

0800b64c <_close>:
//#endif

int _close(int file)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b654:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b674:	605a      	str	r2, [r3, #4]
  return 0;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <_isatty>:

int _isatty(int file)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b68c:	2301      	movs	r3, #1
}
 800b68e:	4618      	mov	r0, r3
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b085      	sub	sp, #20
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b6bc:	4a14      	ldr	r2, [pc, #80]	; (800b710 <_sbrk+0x5c>)
 800b6be:	4b15      	ldr	r3, [pc, #84]	; (800b714 <_sbrk+0x60>)
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b6c8:	4b13      	ldr	r3, [pc, #76]	; (800b718 <_sbrk+0x64>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b6d0:	4b11      	ldr	r3, [pc, #68]	; (800b718 <_sbrk+0x64>)
 800b6d2:	4a12      	ldr	r2, [pc, #72]	; (800b71c <_sbrk+0x68>)
 800b6d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b6d6:	4b10      	ldr	r3, [pc, #64]	; (800b718 <_sbrk+0x64>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4413      	add	r3, r2
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d207      	bcs.n	800b6f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b6e4:	f006 ffa6 	bl	8012634 <__errno>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	220c      	movs	r2, #12
 800b6ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f2:	e009      	b.n	800b708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b6f4:	4b08      	ldr	r3, [pc, #32]	; (800b718 <_sbrk+0x64>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b6fa:	4b07      	ldr	r3, [pc, #28]	; (800b718 <_sbrk+0x64>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4413      	add	r3, r2
 800b702:	4a05      	ldr	r2, [pc, #20]	; (800b718 <_sbrk+0x64>)
 800b704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b706:	68fb      	ldr	r3, [r7, #12]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20050000 	.word	0x20050000
 800b714:	00000400 	.word	0x00000400
 800b718:	20003718 	.word	0x20003718
 800b71c:	200081b8 	.word	0x200081b8

0800b720 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b720:	b480      	push	{r7}
 800b722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b724:	4b06      	ldr	r3, [pc, #24]	; (800b740 <SystemInit+0x20>)
 800b726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b72a:	4a05      	ldr	r2, [pc, #20]	; (800b740 <SystemInit+0x20>)
 800b72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b734:	bf00      	nop
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	e000ed00 	.word	0xe000ed00

0800b744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b77c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b748:	480d      	ldr	r0, [pc, #52]	; (800b780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b74a:	490e      	ldr	r1, [pc, #56]	; (800b784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b74c:	4a0e      	ldr	r2, [pc, #56]	; (800b788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b74e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b750:	e002      	b.n	800b758 <LoopCopyDataInit>

0800b752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b756:	3304      	adds	r3, #4

0800b758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b75a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b75c:	d3f9      	bcc.n	800b752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b75e:	4a0b      	ldr	r2, [pc, #44]	; (800b78c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b760:	4c0b      	ldr	r4, [pc, #44]	; (800b790 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b762:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b764:	e001      	b.n	800b76a <LoopFillZerobss>

0800b766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b768:	3204      	adds	r2, #4

0800b76a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b76a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b76c:	d3fb      	bcc.n	800b766 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b76e:	f7ff ffd7 	bl	800b720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b772:	f006 ff65 	bl	8012640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b776:	f7f5 fbaf 	bl	8000ed8 <main>
  bx  lr    
 800b77a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b77c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b784:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 800b788:	08015438 	.word	0x08015438
  ldr r2, =_sbss
 800b78c:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800b790:	200081b4 	.word	0x200081b4

0800b794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b794:	e7fe      	b.n	800b794 <ADC_IRQHandler>

0800b796 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b79a:	2003      	movs	r0, #3
 800b79c:	f000 f8f9 	bl	800b992 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b7a0:	200f      	movs	r0, #15
 800b7a2:	f7ff fe61 	bl	800b468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b7a6:	f7ff fce3 	bl	800b170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b7b4:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <HAL_IncTick+0x20>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4b06      	ldr	r3, [pc, #24]	; (800b7d4 <HAL_IncTick+0x24>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4413      	add	r3, r2
 800b7c0:	4a04      	ldr	r2, [pc, #16]	; (800b7d4 <HAL_IncTick+0x24>)
 800b7c2:	6013      	str	r3, [r2, #0]
}
 800b7c4:	bf00      	nop
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	20000258 	.word	0x20000258
 800b7d4:	2000371c 	.word	0x2000371c

0800b7d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	af00      	add	r7, sp, #0
  return uwTick;
 800b7dc:	4b03      	ldr	r3, [pc, #12]	; (800b7ec <HAL_GetTick+0x14>)
 800b7de:	681b      	ldr	r3, [r3, #0]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	2000371c 	.word	0x2000371c

0800b7f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b7f8:	f7ff ffee 	bl	800b7d8 <HAL_GetTick>
 800b7fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b808:	d005      	beq.n	800b816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b80a:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <HAL_Delay+0x44>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4413      	add	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b816:	bf00      	nop
 800b818:	f7ff ffde 	bl	800b7d8 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	429a      	cmp	r2, r3
 800b826:	d8f7      	bhi.n	800b818 <HAL_Delay+0x28>
  {
  }
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20000258 	.word	0x20000258

0800b838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f003 0307 	and.w	r3, r3, #7
 800b846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b848:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <__NVIC_SetPriorityGrouping+0x40>)
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b854:	4013      	ands	r3, r2
 800b856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b860:	4b06      	ldr	r3, [pc, #24]	; (800b87c <__NVIC_SetPriorityGrouping+0x44>)
 800b862:	4313      	orrs	r3, r2
 800b864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b866:	4a04      	ldr	r2, [pc, #16]	; (800b878 <__NVIC_SetPriorityGrouping+0x40>)
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	60d3      	str	r3, [r2, #12]
}
 800b86c:	bf00      	nop
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	e000ed00 	.word	0xe000ed00
 800b87c:	05fa0000 	.word	0x05fa0000

0800b880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b880:	b480      	push	{r7}
 800b882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b884:	4b04      	ldr	r3, [pc, #16]	; (800b898 <__NVIC_GetPriorityGrouping+0x18>)
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	0a1b      	lsrs	r3, r3, #8
 800b88a:	f003 0307 	and.w	r3, r3, #7
}
 800b88e:	4618      	mov	r0, r3
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	e000ed00 	.word	0xe000ed00

0800b89c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	db0b      	blt.n	800b8c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	f003 021f 	and.w	r2, r3, #31
 800b8b4:	4907      	ldr	r1, [pc, #28]	; (800b8d4 <__NVIC_EnableIRQ+0x38>)
 800b8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8ba:	095b      	lsrs	r3, r3, #5
 800b8bc:	2001      	movs	r0, #1
 800b8be:	fa00 f202 	lsl.w	r2, r0, r2
 800b8c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b8c6:	bf00      	nop
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	e000e100 	.word	0xe000e100

0800b8d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	4603      	mov	r3, r0
 800b8e0:	6039      	str	r1, [r7, #0]
 800b8e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db0a      	blt.n	800b902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	490c      	ldr	r1, [pc, #48]	; (800b924 <__NVIC_SetPriority+0x4c>)
 800b8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8f6:	0112      	lsls	r2, r2, #4
 800b8f8:	b2d2      	uxtb	r2, r2
 800b8fa:	440b      	add	r3, r1
 800b8fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b900:	e00a      	b.n	800b918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	b2da      	uxtb	r2, r3
 800b906:	4908      	ldr	r1, [pc, #32]	; (800b928 <__NVIC_SetPriority+0x50>)
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	f003 030f 	and.w	r3, r3, #15
 800b90e:	3b04      	subs	r3, #4
 800b910:	0112      	lsls	r2, r2, #4
 800b912:	b2d2      	uxtb	r2, r2
 800b914:	440b      	add	r3, r1
 800b916:	761a      	strb	r2, [r3, #24]
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	e000e100 	.word	0xe000e100
 800b928:	e000ed00 	.word	0xe000ed00

0800b92c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	; 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	f1c3 0307 	rsb	r3, r3, #7
 800b946:	2b04      	cmp	r3, #4
 800b948:	bf28      	it	cs
 800b94a:	2304      	movcs	r3, #4
 800b94c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	3304      	adds	r3, #4
 800b952:	2b06      	cmp	r3, #6
 800b954:	d902      	bls.n	800b95c <NVIC_EncodePriority+0x30>
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	3b03      	subs	r3, #3
 800b95a:	e000      	b.n	800b95e <NVIC_EncodePriority+0x32>
 800b95c:	2300      	movs	r3, #0
 800b95e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b960:	f04f 32ff 	mov.w	r2, #4294967295
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	fa02 f303 	lsl.w	r3, r2, r3
 800b96a:	43da      	mvns	r2, r3
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	401a      	ands	r2, r3
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b974:	f04f 31ff 	mov.w	r1, #4294967295
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	fa01 f303 	lsl.w	r3, r1, r3
 800b97e:	43d9      	mvns	r1, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b984:	4313      	orrs	r3, r2
         );
}
 800b986:	4618      	mov	r0, r3
 800b988:	3724      	adds	r7, #36	; 0x24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff ff4c 	bl	800b838 <__NVIC_SetPriorityGrouping>
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b9ba:	f7ff ff61 	bl	800b880 <__NVIC_GetPriorityGrouping>
 800b9be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	6978      	ldr	r0, [r7, #20]
 800b9c6:	f7ff ffb1 	bl	800b92c <NVIC_EncodePriority>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff ff80 	bl	800b8d8 <__NVIC_SetPriority>
}
 800b9d8:	bf00      	nop
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b9ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff ff54 	bl	800b89c <__NVIC_EnableIRQ>
}
 800b9f4:	bf00      	nop
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e06a      	b.n	800bae4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d106      	bne.n	800ba26 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2223      	movs	r2, #35	; 0x23
 800ba1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff fbcd 	bl	800b1c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba26:	4b31      	ldr	r3, [pc, #196]	; (800baec <HAL_ETH_Init+0xf0>)
 800ba28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2a:	4a30      	ldr	r2, [pc, #192]	; (800baec <HAL_ETH_Init+0xf0>)
 800ba2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba30:	6453      	str	r3, [r2, #68]	; 0x44
 800ba32:	4b2e      	ldr	r3, [pc, #184]	; (800baec <HAL_ETH_Init+0xf0>)
 800ba34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba3a:	60bb      	str	r3, [r7, #8]
 800ba3c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800ba3e:	4b2c      	ldr	r3, [pc, #176]	; (800baf0 <HAL_ETH_Init+0xf4>)
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	4a2b      	ldr	r2, [pc, #172]	; (800baf0 <HAL_ETH_Init+0xf4>)
 800ba44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba48:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800ba4a:	4b29      	ldr	r3, [pc, #164]	; (800baf0 <HAL_ETH_Init+0xf4>)
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	4927      	ldr	r1, [pc, #156]	; (800baf0 <HAL_ETH_Init+0xf4>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800ba58:	4b25      	ldr	r3, [pc, #148]	; (800baf0 <HAL_ETH_Init+0xf4>)
 800ba5a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	6812      	ldr	r2, [r2, #0]
 800ba6a:	f043 0301 	orr.w	r3, r3, #1
 800ba6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ba74:	f7ff feb0 	bl	800b7d8 <HAL_GetTick>
 800ba78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800ba7a:	e011      	b.n	800baa0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800ba7c:	f7ff feac 	bl	800b7d8 <HAL_GetTick>
 800ba80:	4602      	mov	r2, r0
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ba8a:	d909      	bls.n	800baa0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2204      	movs	r2, #4
 800ba90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	22e0      	movs	r2, #224	; 0xe0
 800ba98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e021      	b.n	800bae4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1e4      	bne.n	800ba7c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f958 	bl	800bd68 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f9ff 	bl	800bebc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa55 	bl	800bf6e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	461a      	mov	r2, r3
 800baca:	2100      	movs	r1, #0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f9bd 	bl	800be4c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2210      	movs	r2, #16
 800bade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	40023800 	.word	0x40023800
 800baf0:	40013800 	.word	0x40013800

0800baf4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4b51      	ldr	r3, [pc, #324]	; (800bc50 <ETH_SetMACConfig+0x15c>)
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	7c1b      	ldrb	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d102      	bne.n	800bb1c <ETH_SetMACConfig+0x28>
 800bb16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bb1a:	e000      	b.n	800bb1e <ETH_SetMACConfig+0x2a>
 800bb1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	7c5b      	ldrb	r3, [r3, #17]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d102      	bne.n	800bb2c <ETH_SetMACConfig+0x38>
 800bb26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb2a:	e000      	b.n	800bb2e <ETH_SetMACConfig+0x3a>
 800bb2c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bb2e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800bb34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	7fdb      	ldrb	r3, [r3, #31]
 800bb3a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800bb3c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800bb42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	7f92      	ldrb	r2, [r2, #30]
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	d102      	bne.n	800bb52 <ETH_SetMACConfig+0x5e>
 800bb4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb50:	e000      	b.n	800bb54 <ETH_SetMACConfig+0x60>
 800bb52:	2200      	movs	r2, #0
                        macconf->Speed |
 800bb54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	7f1b      	ldrb	r3, [r3, #28]
 800bb5a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800bb5c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800bb62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	791b      	ldrb	r3, [r3, #4]
 800bb68:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800bb6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bb72:	2a00      	cmp	r2, #0
 800bb74:	d102      	bne.n	800bb7c <ETH_SetMACConfig+0x88>
 800bb76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb7a:	e000      	b.n	800bb7e <ETH_SetMACConfig+0x8a>
 800bb7c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800bb7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	7bdb      	ldrb	r3, [r3, #15]
 800bb84:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800bb86:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800bb8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb94:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bb96:	4313      	orrs	r3, r2
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbae:	2001      	movs	r0, #1
 800bbb0:	f7ff fe1e 	bl	800b7f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	f64f 7341 	movw	r3, #65345	; 0xff41
 800bbca:	4013      	ands	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbd2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	d101      	bne.n	800bbe2 <ETH_SetMACConfig+0xee>
 800bbde:	2280      	movs	r2, #128	; 0x80
 800bbe0:	e000      	b.n	800bbe4 <ETH_SetMACConfig+0xf0>
 800bbe2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bbe4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800bbea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800bbf2:	2a01      	cmp	r2, #1
 800bbf4:	d101      	bne.n	800bbfa <ETH_SetMACConfig+0x106>
 800bbf6:	2208      	movs	r2, #8
 800bbf8:	e000      	b.n	800bbfc <ETH_SetMACConfig+0x108>
 800bbfa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800bbfc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800bc04:	2a01      	cmp	r2, #1
 800bc06:	d101      	bne.n	800bc0c <ETH_SetMACConfig+0x118>
 800bc08:	2204      	movs	r2, #4
 800bc0a:	e000      	b.n	800bc0e <ETH_SetMACConfig+0x11a>
 800bc0c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bc0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800bc16:	2a01      	cmp	r2, #1
 800bc18:	d101      	bne.n	800bc1e <ETH_SetMACConfig+0x12a>
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	e000      	b.n	800bc20 <ETH_SetMACConfig+0x12c>
 800bc1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bc20:	4313      	orrs	r3, r2
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f7ff fdd9 	bl	800b7f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	619a      	str	r2, [r3, #24]
}
 800bc46:	bf00      	nop
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	ff20810f 	.word	0xff20810f

0800bc54 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4b3d      	ldr	r3, [pc, #244]	; (800bd64 <ETH_SetDMAConfig+0x110>)
 800bc6e:	4013      	ands	r3, r2
 800bc70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	7b1b      	ldrb	r3, [r3, #12]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d102      	bne.n	800bc80 <ETH_SetDMAConfig+0x2c>
 800bc7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bc7e:	e000      	b.n	800bc82 <ETH_SetDMAConfig+0x2e>
 800bc80:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	7b5b      	ldrb	r3, [r3, #13]
 800bc86:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bc88:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	7f52      	ldrb	r2, [r2, #29]
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d102      	bne.n	800bc98 <ETH_SetDMAConfig+0x44>
 800bc92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bc96:	e000      	b.n	800bc9a <ETH_SetDMAConfig+0x46>
 800bc98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bc9a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	7b9b      	ldrb	r3, [r3, #14]
 800bca0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bca2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bca8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	7f1b      	ldrb	r3, [r3, #28]
 800bcae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800bcb0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	7f9b      	ldrb	r3, [r3, #30]
 800bcb6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bcb8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bcbe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bcc6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd8:	461a      	mov	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bcea:	2001      	movs	r0, #1
 800bcec:	f7ff fd80 	bl	800b7f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	791b      	ldrb	r3, [r3, #4]
 800bd02:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bd08:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800bd0e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bd14:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd1c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800bd1e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd24:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bd26:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bd2c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	6812      	ldr	r2, [r2, #0]
 800bd32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd3a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bd48:	2001      	movs	r0, #1
 800bd4a:	f7ff fd51 	bl	800b7f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd56:	461a      	mov	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6013      	str	r3, [r2, #0]
}
 800bd5c:	bf00      	nop
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	f8de3f23 	.word	0xf8de3f23

0800bd68 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b0a6      	sub	sp, #152	; 0x98
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800bd86:	2301      	movs	r3, #1
 800bd88:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800bda4:	2300      	movs	r3, #0
 800bda6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800bdca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bdce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800bdd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800bddc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff fe86 	bl	800baf4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800bde8:	2301      	movs	r3, #1
 800bdea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800bdec:	2301      	movs	r3, #1
 800bdee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800be04:	2300      	movs	r3, #0
 800be06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800be0a:	2300      	movs	r3, #0
 800be0c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800be0e:	2301      	movs	r3, #1
 800be10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800be14:	2301      	movs	r3, #1
 800be16:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800be18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800be1c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800be1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800be22:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800be24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be28:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800be2a:	2301      	movs	r3, #1
 800be2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800be30:	2300      	movs	r3, #0
 800be32:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800be34:	2300      	movs	r3, #0
 800be36:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800be38:	f107 0308 	add.w	r3, r7, #8
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff ff08 	bl	800bc54 <ETH_SetDMAConfig>
}
 800be44:	bf00      	nop
 800be46:	3798      	adds	r7, #152	; 0x98
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3305      	adds	r3, #5
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	021b      	lsls	r3, r3, #8
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	3204      	adds	r2, #4
 800be64:	7812      	ldrb	r2, [r2, #0]
 800be66:	4313      	orrs	r3, r2
 800be68:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	4b11      	ldr	r3, [pc, #68]	; (800beb4 <ETH_MACAddressConfig+0x68>)
 800be6e:	4413      	add	r3, r2
 800be70:	461a      	mov	r2, r3
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	3303      	adds	r3, #3
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	061a      	lsls	r2, r3, #24
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	3302      	adds	r3, #2
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	041b      	lsls	r3, r3, #16
 800be86:	431a      	orrs	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3301      	adds	r3, #1
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	021b      	lsls	r3, r3, #8
 800be90:	4313      	orrs	r3, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	7812      	ldrb	r2, [r2, #0]
 800be96:	4313      	orrs	r3, r2
 800be98:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <ETH_MACAddressConfig+0x6c>)
 800be9e:	4413      	add	r3, r2
 800bea0:	461a      	mov	r2, r3
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	6013      	str	r3, [r2, #0]
}
 800bea6:	bf00      	nop
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	40028040 	.word	0x40028040
 800beb8:	40028044 	.word	0x40028044

0800bebc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800bec4:	2300      	movs	r3, #0
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e03e      	b.n	800bf48 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68d9      	ldr	r1, [r3, #12]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	00db      	lsls	r3, r3, #3
 800bed8:	440b      	add	r3, r1
 800beda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	2200      	movs	r2, #0
 800bee0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2200      	movs	r2, #0
 800bee6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2200      	movs	r2, #0
 800beec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2200      	movs	r2, #0
 800bef2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800bef4:	68b9      	ldr	r1, [r7, #8]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	3206      	adds	r2, #6
 800befc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d80c      	bhi.n	800bf2c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68d9      	ldr	r1, [r3, #12]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	00db      	lsls	r3, r3, #3
 800bf22:	440b      	add	r3, r1
 800bf24:	461a      	mov	r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	60da      	str	r2, [r3, #12]
 800bf2a:	e004      	b.n	800bf36 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	461a      	mov	r2, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3301      	adds	r3, #1
 800bf46:	60fb      	str	r3, [r7, #12]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d9bd      	bls.n	800beca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf60:	611a      	str	r2, [r3, #16]
}
 800bf62:	bf00      	nop
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b085      	sub	sp, #20
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800bf76:	2300      	movs	r3, #0
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e046      	b.n	800c00a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6919      	ldr	r1, [r3, #16]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	4613      	mov	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	440b      	add	r3, r1
 800bf8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2200      	movs	r2, #0
 800bf92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfb8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bfc0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800bfce:	68b9      	ldr	r1, [r7, #8]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	3212      	adds	r2, #18
 800bfd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d80c      	bhi.n	800bffa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6919      	ldr	r1, [r3, #16]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	4613      	mov	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	440b      	add	r3, r1
 800bff2:	461a      	mov	r2, r3
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	60da      	str	r2, [r3, #12]
 800bff8:	e004      	b.n	800c004 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	461a      	mov	r2, r3
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3301      	adds	r3, #1
 800c008:	60fb      	str	r3, [r7, #12]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d9b5      	bls.n	800bf7c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	691a      	ldr	r2, [r3, #16]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c03a:	60da      	str	r2, [r3, #12]
}
 800c03c:	bf00      	nop
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c048:	b480      	push	{r7}
 800c04a:	b089      	sub	sp, #36	; 0x24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c052:	2300      	movs	r3, #0
 800c054:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c05a:	2300      	movs	r3, #0
 800c05c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c05e:	2300      	movs	r3, #0
 800c060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c062:	2300      	movs	r3, #0
 800c064:	61fb      	str	r3, [r7, #28]
 800c066:	e175      	b.n	800c354 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c068:	2201      	movs	r2, #1
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	fa02 f303 	lsl.w	r3, r2, r3
 800c070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	4013      	ands	r3, r2
 800c07a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	429a      	cmp	r2, r3
 800c082:	f040 8164 	bne.w	800c34e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	f003 0303 	and.w	r3, r3, #3
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d005      	beq.n	800c09e <HAL_GPIO_Init+0x56>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d130      	bne.n	800c100 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	005b      	lsls	r3, r3, #1
 800c0a8:	2203      	movs	r2, #3
 800c0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ae:	43db      	mvns	r3, r3
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68da      	ldr	r2, [r3, #12]
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	005b      	lsls	r3, r3, #1
 800c0be:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0dc:	43db      	mvns	r3, r3
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	091b      	lsrs	r3, r3, #4
 800c0ea:	f003 0201 	and.w	r2, r3, #1
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	2b03      	cmp	r3, #3
 800c10a:	d017      	beq.n	800c13c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	2203      	movs	r2, #3
 800c118:	fa02 f303 	lsl.w	r3, r2, r3
 800c11c:	43db      	mvns	r3, r3
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	4013      	ands	r3, r2
 800c122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	689a      	ldr	r2, [r3, #8]
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	005b      	lsls	r3, r3, #1
 800c12c:	fa02 f303 	lsl.w	r3, r2, r3
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	4313      	orrs	r3, r2
 800c134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	f003 0303 	and.w	r3, r3, #3
 800c144:	2b02      	cmp	r3, #2
 800c146:	d123      	bne.n	800c190 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	08da      	lsrs	r2, r3, #3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3208      	adds	r2, #8
 800c150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	220f      	movs	r2, #15
 800c160:	fa02 f303 	lsl.w	r3, r2, r3
 800c164:	43db      	mvns	r3, r3
 800c166:	69ba      	ldr	r2, [r7, #24]
 800c168:	4013      	ands	r3, r2
 800c16a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	691a      	ldr	r2, [r3, #16]
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	fa02 f303 	lsl.w	r3, r2, r3
 800c17c:	69ba      	ldr	r2, [r7, #24]
 800c17e:	4313      	orrs	r3, r2
 800c180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	08da      	lsrs	r2, r3, #3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	3208      	adds	r2, #8
 800c18a:	69b9      	ldr	r1, [r7, #24]
 800c18c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	2203      	movs	r2, #3
 800c19c:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	f003 0203 	and.w	r2, r3, #3
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 80be 	beq.w	800c34e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1d2:	4b66      	ldr	r3, [pc, #408]	; (800c36c <HAL_GPIO_Init+0x324>)
 800c1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d6:	4a65      	ldr	r2, [pc, #404]	; (800c36c <HAL_GPIO_Init+0x324>)
 800c1d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1dc:	6453      	str	r3, [r2, #68]	; 0x44
 800c1de:	4b63      	ldr	r3, [pc, #396]	; (800c36c <HAL_GPIO_Init+0x324>)
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1e6:	60fb      	str	r3, [r7, #12]
 800c1e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c1ea:	4a61      	ldr	r2, [pc, #388]	; (800c370 <HAL_GPIO_Init+0x328>)
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	089b      	lsrs	r3, r3, #2
 800c1f0:	3302      	adds	r3, #2
 800c1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	f003 0303 	and.w	r3, r3, #3
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	220f      	movs	r2, #15
 800c202:	fa02 f303 	lsl.w	r3, r2, r3
 800c206:	43db      	mvns	r3, r3
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	4013      	ands	r3, r2
 800c20c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a58      	ldr	r2, [pc, #352]	; (800c374 <HAL_GPIO_Init+0x32c>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d037      	beq.n	800c286 <HAL_GPIO_Init+0x23e>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a57      	ldr	r2, [pc, #348]	; (800c378 <HAL_GPIO_Init+0x330>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d031      	beq.n	800c282 <HAL_GPIO_Init+0x23a>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a56      	ldr	r2, [pc, #344]	; (800c37c <HAL_GPIO_Init+0x334>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d02b      	beq.n	800c27e <HAL_GPIO_Init+0x236>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a55      	ldr	r2, [pc, #340]	; (800c380 <HAL_GPIO_Init+0x338>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d025      	beq.n	800c27a <HAL_GPIO_Init+0x232>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a54      	ldr	r2, [pc, #336]	; (800c384 <HAL_GPIO_Init+0x33c>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d01f      	beq.n	800c276 <HAL_GPIO_Init+0x22e>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a53      	ldr	r2, [pc, #332]	; (800c388 <HAL_GPIO_Init+0x340>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d019      	beq.n	800c272 <HAL_GPIO_Init+0x22a>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a52      	ldr	r2, [pc, #328]	; (800c38c <HAL_GPIO_Init+0x344>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d013      	beq.n	800c26e <HAL_GPIO_Init+0x226>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a51      	ldr	r2, [pc, #324]	; (800c390 <HAL_GPIO_Init+0x348>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d00d      	beq.n	800c26a <HAL_GPIO_Init+0x222>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a50      	ldr	r2, [pc, #320]	; (800c394 <HAL_GPIO_Init+0x34c>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d007      	beq.n	800c266 <HAL_GPIO_Init+0x21e>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a4f      	ldr	r2, [pc, #316]	; (800c398 <HAL_GPIO_Init+0x350>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d101      	bne.n	800c262 <HAL_GPIO_Init+0x21a>
 800c25e:	2309      	movs	r3, #9
 800c260:	e012      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c262:	230a      	movs	r3, #10
 800c264:	e010      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c266:	2308      	movs	r3, #8
 800c268:	e00e      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c26a:	2307      	movs	r3, #7
 800c26c:	e00c      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c26e:	2306      	movs	r3, #6
 800c270:	e00a      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c272:	2305      	movs	r3, #5
 800c274:	e008      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c276:	2304      	movs	r3, #4
 800c278:	e006      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c27a:	2303      	movs	r3, #3
 800c27c:	e004      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c27e:	2302      	movs	r3, #2
 800c280:	e002      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <HAL_GPIO_Init+0x240>
 800c286:	2300      	movs	r3, #0
 800c288:	69fa      	ldr	r2, [r7, #28]
 800c28a:	f002 0203 	and.w	r2, r2, #3
 800c28e:	0092      	lsls	r2, r2, #2
 800c290:	4093      	lsls	r3, r2
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	4313      	orrs	r3, r2
 800c296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c298:	4935      	ldr	r1, [pc, #212]	; (800c370 <HAL_GPIO_Init+0x328>)
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	089b      	lsrs	r3, r3, #2
 800c29e:	3302      	adds	r3, #2
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c2a6:	4b3d      	ldr	r3, [pc, #244]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	43db      	mvns	r3, r3
 800c2b0:	69ba      	ldr	r2, [r7, #24]
 800c2b2:	4013      	ands	r3, r2
 800c2b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c2ca:	4a34      	ldr	r2, [pc, #208]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c2d0:	4b32      	ldr	r3, [pc, #200]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	43db      	mvns	r3, r3
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	4013      	ands	r3, r2
 800c2de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c2ec:	69ba      	ldr	r2, [r7, #24]
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c2f4:	4a29      	ldr	r2, [pc, #164]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c2fa:	4b28      	ldr	r3, [pc, #160]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	43db      	mvns	r3, r3
 800c304:	69ba      	ldr	r2, [r7, #24]
 800c306:	4013      	ands	r3, r2
 800c308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c31e:	4a1f      	ldr	r2, [pc, #124]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c324:	4b1d      	ldr	r3, [pc, #116]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	43db      	mvns	r3, r3
 800c32e:	69ba      	ldr	r2, [r7, #24]
 800c330:	4013      	ands	r3, r2
 800c332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c340:	69ba      	ldr	r2, [r7, #24]
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	4313      	orrs	r3, r2
 800c346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c348:	4a14      	ldr	r2, [pc, #80]	; (800c39c <HAL_GPIO_Init+0x354>)
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	3301      	adds	r3, #1
 800c352:	61fb      	str	r3, [r7, #28]
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	2b0f      	cmp	r3, #15
 800c358:	f67f ae86 	bls.w	800c068 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c35c:	bf00      	nop
 800c35e:	bf00      	nop
 800c360:	3724      	adds	r7, #36	; 0x24
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	40023800 	.word	0x40023800
 800c370:	40013800 	.word	0x40013800
 800c374:	40020000 	.word	0x40020000
 800c378:	40020400 	.word	0x40020400
 800c37c:	40020800 	.word	0x40020800
 800c380:	40020c00 	.word	0x40020c00
 800c384:	40021000 	.word	0x40021000
 800c388:	40021400 	.word	0x40021400
 800c38c:	40021800 	.word	0x40021800
 800c390:	40021c00 	.word	0x40021c00
 800c394:	40022000 	.word	0x40022000
 800c398:	40022400 	.word	0x40022400
 800c39c:	40013c00 	.word	0x40013c00

0800c3a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	807b      	strh	r3, [r7, #2]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c3b0:	787b      	ldrb	r3, [r7, #1]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c3b6:	887a      	ldrh	r2, [r7, #2]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c3bc:	e003      	b.n	800c3c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c3be:	887b      	ldrh	r3, [r7, #2]
 800c3c0:	041a      	lsls	r2, r3, #16
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	619a      	str	r2, [r3, #24]
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	460b      	mov	r3, r1
 800c3dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c3e4:	887a      	ldrh	r2, [r7, #2]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	041a      	lsls	r2, r3, #16
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	43d9      	mvns	r1, r3
 800c3f0:	887b      	ldrh	r3, [r7, #2]
 800c3f2:	400b      	ands	r3, r1
 800c3f4:	431a      	orrs	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	619a      	str	r2, [r3, #24]
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
	...

0800c408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e07f      	b.n	800c51a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b00      	cmp	r3, #0
 800c424:	d106      	bne.n	800c434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f87a 	bl	800c528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2224      	movs	r2, #36	; 0x24
 800c438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f022 0201 	bic.w	r2, r2, #1
 800c44a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	689a      	ldr	r2, [r3, #8]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d107      	bne.n	800c482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	689a      	ldr	r2, [r3, #8]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c47e:	609a      	str	r2, [r3, #8]
 800c480:	e006      	b.n	800c490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	689a      	ldr	r2, [r3, #8]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c48e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	2b02      	cmp	r3, #2
 800c496:	d104      	bne.n	800c4a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	6859      	ldr	r1, [r3, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <HAL_I2C_Init+0x11c>)
 800c4ae:	430b      	orrs	r3, r1
 800c4b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68da      	ldr	r2, [r3, #12]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c4c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	691a      	ldr	r2, [r3, #16]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	430a      	orrs	r2, r1
 800c4da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	69d9      	ldr	r1, [r3, #28]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a1a      	ldr	r2, [r3, #32]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f042 0201 	orr.w	r2, r2, #1
 800c4fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2220      	movs	r2, #32
 800c506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	02008000 	.word	0x02008000

0800c528 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	4608      	mov	r0, r1
 800c546:	4611      	mov	r1, r2
 800c548:	461a      	mov	r2, r3
 800c54a:	4603      	mov	r3, r0
 800c54c:	817b      	strh	r3, [r7, #10]
 800c54e:	460b      	mov	r3, r1
 800c550:	813b      	strh	r3, [r7, #8]
 800c552:	4613      	mov	r3, r2
 800c554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b20      	cmp	r3, #32
 800c560:	f040 80f9 	bne.w	800c756 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d002      	beq.n	800c570 <HAL_I2C_Mem_Write+0x34>
 800c56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d105      	bne.n	800c57c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c576:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	e0ed      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c582:	2b01      	cmp	r3, #1
 800c584:	d101      	bne.n	800c58a <HAL_I2C_Mem_Write+0x4e>
 800c586:	2302      	movs	r3, #2
 800c588:	e0e6      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c592:	f7ff f921 	bl	800b7d8 <HAL_GetTick>
 800c596:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	2319      	movs	r3, #25
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 fac3 	bl	800cb30 <I2C_WaitOnFlagUntilTimeout>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e0d1      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2221      	movs	r2, #33	; 0x21
 800c5b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2240      	movs	r2, #64	; 0x40
 800c5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a3a      	ldr	r2, [r7, #32]
 800c5ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c5dc:	88f8      	ldrh	r0, [r7, #6]
 800c5de:	893a      	ldrh	r2, [r7, #8]
 800c5e0:	8979      	ldrh	r1, [r7, #10]
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f000 f9d3 	bl	800c998 <I2C_RequestMemoryWrite>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	e0a9      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c608:	b29b      	uxth	r3, r3
 800c60a:	2bff      	cmp	r3, #255	; 0xff
 800c60c:	d90e      	bls.n	800c62c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	22ff      	movs	r2, #255	; 0xff
 800c612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	8979      	ldrh	r1, [r7, #10]
 800c61c:	2300      	movs	r3, #0
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f000 fc1f 	bl	800ce68 <I2C_TransferConfig>
 800c62a:	e00f      	b.n	800c64c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c630:	b29a      	uxth	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	8979      	ldrh	r1, [r7, #10]
 800c63e:	2300      	movs	r3, #0
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f000 fc0e 	bl	800ce68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c64c:	697a      	ldr	r2, [r7, #20]
 800c64e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 faad 	bl	800cbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e07b      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	781a      	ldrb	r2, [r3, #0]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	3b01      	subs	r3, #1
 800c67e:	b29a      	uxth	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c688:	3b01      	subs	r3, #1
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c694:	b29b      	uxth	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d034      	beq.n	800c704 <HAL_I2C_Mem_Write+0x1c8>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d130      	bne.n	800c704 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2180      	movs	r1, #128	; 0x80
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 fa3f 	bl	800cb30 <I2C_WaitOnFlagUntilTimeout>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e04d      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	2bff      	cmp	r3, #255	; 0xff
 800c6c4:	d90e      	bls.n	800c6e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	22ff      	movs	r2, #255	; 0xff
 800c6ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	8979      	ldrh	r1, [r7, #10]
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f000 fbc3 	bl	800ce68 <I2C_TransferConfig>
 800c6e2:	e00f      	b.n	800c704 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	8979      	ldrh	r1, [r7, #10]
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f000 fbb2 	bl	800ce68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c708:	b29b      	uxth	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d19e      	bne.n	800c64c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f000 fa8c 	bl	800cc30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e01a      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2220      	movs	r2, #32
 800c728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6859      	ldr	r1, [r3, #4]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	4b0a      	ldr	r3, [pc, #40]	; (800c760 <HAL_I2C_Mem_Write+0x224>)
 800c736:	400b      	ands	r3, r1
 800c738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	e000      	b.n	800c758 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c756:	2302      	movs	r3, #2
  }
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3718      	adds	r7, #24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	fe00e800 	.word	0xfe00e800

0800c764 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af02      	add	r7, sp, #8
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	4608      	mov	r0, r1
 800c76e:	4611      	mov	r1, r2
 800c770:	461a      	mov	r2, r3
 800c772:	4603      	mov	r3, r0
 800c774:	817b      	strh	r3, [r7, #10]
 800c776:	460b      	mov	r3, r1
 800c778:	813b      	strh	r3, [r7, #8]
 800c77a:	4613      	mov	r3, r2
 800c77c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b20      	cmp	r3, #32
 800c788:	f040 80fd 	bne.w	800c986 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <HAL_I2C_Mem_Read+0x34>
 800c792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c794:	2b00      	cmp	r3, #0
 800c796:	d105      	bne.n	800c7a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c79e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e0f1      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d101      	bne.n	800c7b2 <HAL_I2C_Mem_Read+0x4e>
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	e0ea      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c7ba:	f7ff f80d 	bl	800b7d8 <HAL_GetTick>
 800c7be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2319      	movs	r3, #25
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 f9af 	bl	800cb30 <I2C_WaitOnFlagUntilTimeout>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d001      	beq.n	800c7dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e0d5      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2222      	movs	r2, #34	; 0x22
 800c7e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2240      	movs	r2, #64	; 0x40
 800c7e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6a3a      	ldr	r2, [r7, #32]
 800c7f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c7fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c804:	88f8      	ldrh	r0, [r7, #6]
 800c806:	893a      	ldrh	r2, [r7, #8]
 800c808:	8979      	ldrh	r1, [r7, #10]
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	4603      	mov	r3, r0
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 f913 	bl	800ca40 <I2C_RequestMemoryRead>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d005      	beq.n	800c82c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	e0ad      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c830:	b29b      	uxth	r3, r3
 800c832:	2bff      	cmp	r3, #255	; 0xff
 800c834:	d90e      	bls.n	800c854 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	22ff      	movs	r2, #255	; 0xff
 800c83a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c840:	b2da      	uxtb	r2, r3
 800c842:	8979      	ldrh	r1, [r7, #10]
 800c844:	4b52      	ldr	r3, [pc, #328]	; (800c990 <HAL_I2C_Mem_Read+0x22c>)
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f000 fb0b 	bl	800ce68 <I2C_TransferConfig>
 800c852:	e00f      	b.n	800c874 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c858:	b29a      	uxth	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c862:	b2da      	uxtb	r2, r3
 800c864:	8979      	ldrh	r1, [r7, #10]
 800c866:	4b4a      	ldr	r3, [pc, #296]	; (800c990 <HAL_I2C_Mem_Read+0x22c>)
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f000 fafa 	bl	800ce68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	2200      	movs	r2, #0
 800c87c:	2104      	movs	r1, #4
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f000 f956 	bl	800cb30 <I2C_WaitOnFlagUntilTimeout>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e07c      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d034      	beq.n	800c934 <HAL_I2C_Mem_Read+0x1d0>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d130      	bne.n	800c934 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d8:	2200      	movs	r2, #0
 800c8da:	2180      	movs	r1, #128	; 0x80
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f000 f927 	bl	800cb30 <I2C_WaitOnFlagUntilTimeout>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e04d      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	2bff      	cmp	r3, #255	; 0xff
 800c8f4:	d90e      	bls.n	800c914 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	22ff      	movs	r2, #255	; 0xff
 800c8fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c900:	b2da      	uxtb	r2, r3
 800c902:	8979      	ldrh	r1, [r7, #10]
 800c904:	2300      	movs	r3, #0
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f000 faab 	bl	800ce68 <I2C_TransferConfig>
 800c912:	e00f      	b.n	800c934 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c918:	b29a      	uxth	r2, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c922:	b2da      	uxtb	r2, r3
 800c924:	8979      	ldrh	r1, [r7, #10]
 800c926:	2300      	movs	r3, #0
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 fa9a 	bl	800ce68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d19a      	bne.n	800c874 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 f974 	bl	800cc30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e01a      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2220      	movs	r2, #32
 800c958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6859      	ldr	r1, [r3, #4]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <HAL_I2C_Mem_Read+0x230>)
 800c966:	400b      	ands	r3, r1
 800c968:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2220      	movs	r2, #32
 800c96e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	e000      	b.n	800c988 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c986:	2302      	movs	r3, #2
  }
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3718      	adds	r7, #24
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	80002400 	.word	0x80002400
 800c994:	fe00e800 	.word	0xfe00e800

0800c998 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af02      	add	r7, sp, #8
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	817b      	strh	r3, [r7, #10]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	813b      	strh	r3, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c9b2:	88fb      	ldrh	r3, [r7, #6]
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	8979      	ldrh	r1, [r7, #10]
 800c9b8:	4b20      	ldr	r3, [pc, #128]	; (800ca3c <I2C_RequestMemoryWrite+0xa4>)
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f000 fa51 	bl	800ce68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	69b9      	ldr	r1, [r7, #24]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f000 f8f0 	bl	800cbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d001      	beq.n	800c9da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e02c      	b.n	800ca34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c9da:	88fb      	ldrh	r3, [r7, #6]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d105      	bne.n	800c9ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c9e0:	893b      	ldrh	r3, [r7, #8]
 800c9e2:	b2da      	uxtb	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	629a      	str	r2, [r3, #40]	; 0x28
 800c9ea:	e015      	b.n	800ca18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c9ec:	893b      	ldrh	r3, [r7, #8]
 800c9ee:	0a1b      	lsrs	r3, r3, #8
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9fa:	69fa      	ldr	r2, [r7, #28]
 800c9fc:	69b9      	ldr	r1, [r7, #24]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 f8d6 	bl	800cbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e012      	b.n	800ca34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca0e:	893b      	ldrh	r3, [r7, #8]
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	2180      	movs	r1, #128	; 0x80
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 f884 	bl	800cb30 <I2C_WaitOnFlagUntilTimeout>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	80002000 	.word	0x80002000

0800ca40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af02      	add	r7, sp, #8
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	4608      	mov	r0, r1
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	4603      	mov	r3, r0
 800ca50:	817b      	strh	r3, [r7, #10]
 800ca52:	460b      	mov	r3, r1
 800ca54:	813b      	strh	r3, [r7, #8]
 800ca56:	4613      	mov	r3, r2
 800ca58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ca5a:	88fb      	ldrh	r3, [r7, #6]
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	8979      	ldrh	r1, [r7, #10]
 800ca60:	4b20      	ldr	r3, [pc, #128]	; (800cae4 <I2C_RequestMemoryRead+0xa4>)
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	2300      	movs	r3, #0
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f000 f9fe 	bl	800ce68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca6c:	69fa      	ldr	r2, [r7, #28]
 800ca6e:	69b9      	ldr	r1, [r7, #24]
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 f89d 	bl	800cbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e02c      	b.n	800cada <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ca80:	88fb      	ldrh	r3, [r7, #6]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d105      	bne.n	800ca92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca86:	893b      	ldrh	r3, [r7, #8]
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	629a      	str	r2, [r3, #40]	; 0x28
 800ca90:	e015      	b.n	800cabe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ca92:	893b      	ldrh	r3, [r7, #8]
 800ca94:	0a1b      	lsrs	r3, r3, #8
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800caa0:	69fa      	ldr	r2, [r7, #28]
 800caa2:	69b9      	ldr	r1, [r7, #24]
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f000 f883 	bl	800cbb0 <I2C_WaitOnTXISFlagUntilTimeout>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e012      	b.n	800cada <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cab4:	893b      	ldrh	r3, [r7, #8]
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	2200      	movs	r2, #0
 800cac6:	2140      	movs	r1, #64	; 0x40
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f000 f831 	bl	800cb30 <I2C_WaitOnFlagUntilTimeout>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d001      	beq.n	800cad8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e000      	b.n	800cada <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cad8:	2300      	movs	r3, #0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	80002000 	.word	0x80002000

0800cae8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d103      	bne.n	800cb06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d007      	beq.n	800cb24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	699a      	ldr	r2, [r3, #24]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f042 0201 	orr.w	r2, r2, #1
 800cb22:	619a      	str	r2, [r3, #24]
  }
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	603b      	str	r3, [r7, #0]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cb40:	e022      	b.n	800cb88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb48:	d01e      	beq.n	800cb88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb4a:	f7fe fe45 	bl	800b7d8 <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d302      	bcc.n	800cb60 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d113      	bne.n	800cb88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb64:	f043 0220 	orr.w	r2, r3, #32
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2220      	movs	r2, #32
 800cb70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
 800cb86:	e00f      	b.n	800cba8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	699a      	ldr	r2, [r3, #24]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	4013      	ands	r3, r2
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	bf0c      	ite	eq
 800cb98:	2301      	moveq	r3, #1
 800cb9a:	2300      	movne	r3, #0
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	461a      	mov	r2, r3
 800cba0:	79fb      	ldrb	r3, [r7, #7]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d0cd      	beq.n	800cb42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cbbc:	e02c      	b.n	800cc18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	68b9      	ldr	r1, [r7, #8]
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 f870 	bl	800cca8 <I2C_IsErrorOccurred>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e02a      	b.n	800cc28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd8:	d01e      	beq.n	800cc18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbda:	f7fe fdfd 	bl	800b7d8 <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d302      	bcc.n	800cbf0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d113      	bne.n	800cc18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf4:	f043 0220 	orr.w	r2, r3, #32
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e007      	b.n	800cc28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	699b      	ldr	r3, [r3, #24]
 800cc1e:	f003 0302 	and.w	r3, r3, #2
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d1cb      	bne.n	800cbbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cc3c:	e028      	b.n	800cc90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	68b9      	ldr	r1, [r7, #8]
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f000 f830 	bl	800cca8 <I2C_IsErrorOccurred>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e026      	b.n	800cca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc52:	f7fe fdc1 	bl	800b7d8 <HAL_GetTick>
 800cc56:	4602      	mov	r2, r0
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d302      	bcc.n	800cc68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d113      	bne.n	800cc90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc6c:	f043 0220 	orr.w	r2, r3, #32
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2220      	movs	r2, #32
 800cc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e007      	b.n	800cca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	f003 0320 	and.w	r3, r3, #32
 800cc9a:	2b20      	cmp	r3, #32
 800cc9c:	d1cf      	bne.n	800cc3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08a      	sub	sp, #40	; 0x28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	699b      	ldr	r3, [r3, #24]
 800ccc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	f003 0310 	and.w	r3, r3, #16
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d068      	beq.n	800cda6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2210      	movs	r2, #16
 800ccda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ccdc:	e049      	b.n	800cd72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce4:	d045      	beq.n	800cd72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cce6:	f7fe fd77 	bl	800b7d8 <HAL_GetTick>
 800ccea:	4602      	mov	r2, r0
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	1ad3      	subs	r3, r2, r3
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d302      	bcc.n	800ccfc <I2C_IsErrorOccurred+0x54>
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d13a      	bne.n	800cd72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd1e:	d121      	bne.n	800cd64 <I2C_IsErrorOccurred+0xbc>
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd26:	d01d      	beq.n	800cd64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800cd28:	7cfb      	ldrb	r3, [r7, #19]
 800cd2a:	2b20      	cmp	r3, #32
 800cd2c:	d01a      	beq.n	800cd64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cd3e:	f7fe fd4b 	bl	800b7d8 <HAL_GetTick>
 800cd42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd44:	e00e      	b.n	800cd64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cd46:	f7fe fd47 	bl	800b7d8 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	2b19      	cmp	r3, #25
 800cd52:	d907      	bls.n	800cd64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800cd54:	6a3b      	ldr	r3, [r7, #32]
 800cd56:	f043 0320 	orr.w	r3, r3, #32
 800cd5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800cd62:	e006      	b.n	800cd72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	699b      	ldr	r3, [r3, #24]
 800cd6a:	f003 0320 	and.w	r3, r3, #32
 800cd6e:	2b20      	cmp	r3, #32
 800cd70:	d1e9      	bne.n	800cd46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	f003 0320 	and.w	r3, r3, #32
 800cd7c:	2b20      	cmp	r3, #32
 800cd7e:	d003      	beq.n	800cd88 <I2C_IsErrorOccurred+0xe0>
 800cd80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0aa      	beq.n	800ccde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d103      	bne.n	800cd98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2220      	movs	r2, #32
 800cd96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	f043 0304 	orr.w	r3, r3, #4
 800cd9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00b      	beq.n	800cdd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	f043 0301 	orr.w	r3, r3, #1
 800cdbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00b      	beq.n	800cdf2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	f043 0308 	orr.w	r3, r3, #8
 800cde0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cdea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00b      	beq.n	800ce14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800cdfc:	6a3b      	ldr	r3, [r7, #32]
 800cdfe:	f043 0302 	orr.w	r3, r3, #2
 800ce02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ce14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d01c      	beq.n	800ce56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7ff fe63 	bl	800cae8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6859      	ldr	r1, [r3, #4]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <I2C_IsErrorOccurred+0x1bc>)
 800ce2e:	400b      	ands	r3, r1
 800ce30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	431a      	orrs	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2220      	movs	r2, #32
 800ce42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ce56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3728      	adds	r7, #40	; 0x28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	fe00e800 	.word	0xfe00e800

0800ce68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	607b      	str	r3, [r7, #4]
 800ce72:	460b      	mov	r3, r1
 800ce74:	817b      	strh	r3, [r7, #10]
 800ce76:	4613      	mov	r3, r2
 800ce78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ce7a:	897b      	ldrh	r3, [r7, #10]
 800ce7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ce80:	7a7b      	ldrb	r3, [r7, #9]
 800ce82:	041b      	lsls	r3, r3, #16
 800ce84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ce88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	6a3b      	ldr	r3, [r7, #32]
 800cea0:	0d5b      	lsrs	r3, r3, #21
 800cea2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cea6:	4b08      	ldr	r3, [pc, #32]	; (800cec8 <I2C_TransferConfig+0x60>)
 800cea8:	430b      	orrs	r3, r1
 800ceaa:	43db      	mvns	r3, r3
 800ceac:	ea02 0103 	and.w	r1, r2, r3
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ceba:	bf00      	nop
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	03ff63ff 	.word	0x03ff63ff

0800cecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b20      	cmp	r3, #32
 800cee0:	d138      	bne.n	800cf54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d101      	bne.n	800cef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ceec:	2302      	movs	r3, #2
 800ceee:	e032      	b.n	800cf56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2224      	movs	r2, #36	; 0x24
 800cefc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f022 0201 	bic.w	r2, r2, #1
 800cf0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6819      	ldr	r1, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f042 0201 	orr.w	r2, r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2220      	movs	r2, #32
 800cf44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	e000      	b.n	800cf56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cf54:	2302      	movs	r3, #2
  }
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr

0800cf62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b20      	cmp	r3, #32
 800cf76:	d139      	bne.n	800cfec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d101      	bne.n	800cf86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cf82:	2302      	movs	r3, #2
 800cf84:	e033      	b.n	800cfee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2224      	movs	r2, #36	; 0x24
 800cf92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 0201 	bic.w	r2, r2, #1
 800cfa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cfb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	021b      	lsls	r3, r3, #8
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f042 0201 	orr.w	r2, r2, #1
 800cfd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2220      	movs	r2, #32
 800cfdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e000      	b.n	800cfee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cfec:	2302      	movs	r3, #2
  }
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
	...

0800cffc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d006:	4b23      	ldr	r3, [pc, #140]	; (800d094 <HAL_PWREx_EnableOverDrive+0x98>)
 800d008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d00a:	4a22      	ldr	r2, [pc, #136]	; (800d094 <HAL_PWREx_EnableOverDrive+0x98>)
 800d00c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d010:	6413      	str	r3, [r2, #64]	; 0x40
 800d012:	4b20      	ldr	r3, [pc, #128]	; (800d094 <HAL_PWREx_EnableOverDrive+0x98>)
 800d014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d01e:	4b1e      	ldr	r3, [pc, #120]	; (800d098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a1d      	ldr	r2, [pc, #116]	; (800d098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d028:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d02a:	f7fe fbd5 	bl	800b7d8 <HAL_GetTick>
 800d02e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d030:	e009      	b.n	800d046 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d032:	f7fe fbd1 	bl	800b7d8 <HAL_GetTick>
 800d036:	4602      	mov	r2, r0
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d040:	d901      	bls.n	800d046 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e022      	b.n	800d08c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d046:	4b14      	ldr	r3, [pc, #80]	; (800d098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d04e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d052:	d1ee      	bne.n	800d032 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d054:	4b10      	ldr	r3, [pc, #64]	; (800d098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a0f      	ldr	r2, [pc, #60]	; (800d098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d05a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d05e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d060:	f7fe fbba 	bl	800b7d8 <HAL_GetTick>
 800d064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d066:	e009      	b.n	800d07c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d068:	f7fe fbb6 	bl	800b7d8 <HAL_GetTick>
 800d06c:	4602      	mov	r2, r0
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d076:	d901      	bls.n	800d07c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d078:	2303      	movs	r3, #3
 800d07a:	e007      	b.n	800d08c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d07c:	4b06      	ldr	r3, [pc, #24]	; (800d098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d088:	d1ee      	bne.n	800d068 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	40023800 	.word	0x40023800
 800d098:	40007000 	.word	0x40007000

0800d09c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e291      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 8087 	beq.w	800d1ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0c0:	4b96      	ldr	r3, [pc, #600]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	f003 030c 	and.w	r3, r3, #12
 800d0c8:	2b04      	cmp	r3, #4
 800d0ca:	d00c      	beq.n	800d0e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d0cc:	4b93      	ldr	r3, [pc, #588]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f003 030c 	and.w	r3, r3, #12
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d112      	bne.n	800d0fe <HAL_RCC_OscConfig+0x62>
 800d0d8:	4b90      	ldr	r3, [pc, #576]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0e4:	d10b      	bne.n	800d0fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0e6:	4b8d      	ldr	r3, [pc, #564]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d06c      	beq.n	800d1cc <HAL_RCC_OscConfig+0x130>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d168      	bne.n	800d1cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e26b      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d106:	d106      	bne.n	800d116 <HAL_RCC_OscConfig+0x7a>
 800d108:	4b84      	ldr	r3, [pc, #528]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a83      	ldr	r2, [pc, #524]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d10e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	e02e      	b.n	800d174 <HAL_RCC_OscConfig+0xd8>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10c      	bne.n	800d138 <HAL_RCC_OscConfig+0x9c>
 800d11e:	4b7f      	ldr	r3, [pc, #508]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a7e      	ldr	r2, [pc, #504]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	4b7c      	ldr	r3, [pc, #496]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a7b      	ldr	r2, [pc, #492]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	e01d      	b.n	800d174 <HAL_RCC_OscConfig+0xd8>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d140:	d10c      	bne.n	800d15c <HAL_RCC_OscConfig+0xc0>
 800d142:	4b76      	ldr	r3, [pc, #472]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a75      	ldr	r2, [pc, #468]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	4b73      	ldr	r3, [pc, #460]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a72      	ldr	r2, [pc, #456]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d158:	6013      	str	r3, [r2, #0]
 800d15a:	e00b      	b.n	800d174 <HAL_RCC_OscConfig+0xd8>
 800d15c:	4b6f      	ldr	r3, [pc, #444]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a6e      	ldr	r2, [pc, #440]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	4b6c      	ldr	r3, [pc, #432]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a6b      	ldr	r2, [pc, #428]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d16e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d013      	beq.n	800d1a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d17c:	f7fe fb2c 	bl	800b7d8 <HAL_GetTick>
 800d180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d182:	e008      	b.n	800d196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d184:	f7fe fb28 	bl	800b7d8 <HAL_GetTick>
 800d188:	4602      	mov	r2, r0
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	2b64      	cmp	r3, #100	; 0x64
 800d190:	d901      	bls.n	800d196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d192:	2303      	movs	r3, #3
 800d194:	e21f      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d196:	4b61      	ldr	r3, [pc, #388]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d0f0      	beq.n	800d184 <HAL_RCC_OscConfig+0xe8>
 800d1a2:	e014      	b.n	800d1ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1a4:	f7fe fb18 	bl	800b7d8 <HAL_GetTick>
 800d1a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1aa:	e008      	b.n	800d1be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d1ac:	f7fe fb14 	bl	800b7d8 <HAL_GetTick>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	2b64      	cmp	r3, #100	; 0x64
 800d1b8:	d901      	bls.n	800d1be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	e20b      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1be:	4b57      	ldr	r3, [pc, #348]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1f0      	bne.n	800d1ac <HAL_RCC_OscConfig+0x110>
 800d1ca:	e000      	b.n	800d1ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d069      	beq.n	800d2ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d1da:	4b50      	ldr	r3, [pc, #320]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f003 030c 	and.w	r3, r3, #12
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d1e6:	4b4d      	ldr	r3, [pc, #308]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	f003 030c 	and.w	r3, r3, #12
 800d1ee:	2b08      	cmp	r3, #8
 800d1f0:	d11c      	bne.n	800d22c <HAL_RCC_OscConfig+0x190>
 800d1f2:	4b4a      	ldr	r3, [pc, #296]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d116      	bne.n	800d22c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d1fe:	4b47      	ldr	r3, [pc, #284]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f003 0302 	and.w	r3, r3, #2
 800d206:	2b00      	cmp	r3, #0
 800d208:	d005      	beq.n	800d216 <HAL_RCC_OscConfig+0x17a>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d001      	beq.n	800d216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e1df      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d216:	4b41      	ldr	r3, [pc, #260]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	493d      	ldr	r1, [pc, #244]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d226:	4313      	orrs	r3, r2
 800d228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d22a:	e040      	b.n	800d2ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d023      	beq.n	800d27c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d234:	4b39      	ldr	r3, [pc, #228]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a38      	ldr	r2, [pc, #224]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d23a:	f043 0301 	orr.w	r3, r3, #1
 800d23e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d240:	f7fe faca 	bl	800b7d8 <HAL_GetTick>
 800d244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d246:	e008      	b.n	800d25a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d248:	f7fe fac6 	bl	800b7d8 <HAL_GetTick>
 800d24c:	4602      	mov	r2, r0
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	2b02      	cmp	r3, #2
 800d254:	d901      	bls.n	800d25a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d256:	2303      	movs	r3, #3
 800d258:	e1bd      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d25a:	4b30      	ldr	r3, [pc, #192]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d0f0      	beq.n	800d248 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d266:	4b2d      	ldr	r3, [pc, #180]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	4929      	ldr	r1, [pc, #164]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d276:	4313      	orrs	r3, r2
 800d278:	600b      	str	r3, [r1, #0]
 800d27a:	e018      	b.n	800d2ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d27c:	4b27      	ldr	r3, [pc, #156]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a26      	ldr	r2, [pc, #152]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d282:	f023 0301 	bic.w	r3, r3, #1
 800d286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d288:	f7fe faa6 	bl	800b7d8 <HAL_GetTick>
 800d28c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d28e:	e008      	b.n	800d2a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d290:	f7fe faa2 	bl	800b7d8 <HAL_GetTick>
 800d294:	4602      	mov	r2, r0
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d901      	bls.n	800d2a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d29e:	2303      	movs	r3, #3
 800d2a0:	e199      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d2a2:	4b1e      	ldr	r3, [pc, #120]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1f0      	bne.n	800d290 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d038      	beq.n	800d32c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d019      	beq.n	800d2f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d2c2:	4b16      	ldr	r3, [pc, #88]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2c6:	4a15      	ldr	r2, [pc, #84]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2c8:	f043 0301 	orr.w	r3, r3, #1
 800d2cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2ce:	f7fe fa83 	bl	800b7d8 <HAL_GetTick>
 800d2d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2d4:	e008      	b.n	800d2e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d2d6:	f7fe fa7f 	bl	800b7d8 <HAL_GetTick>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d901      	bls.n	800d2e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e176      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2e8:	4b0c      	ldr	r3, [pc, #48]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d0f0      	beq.n	800d2d6 <HAL_RCC_OscConfig+0x23a>
 800d2f4:	e01a      	b.n	800d32c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d2f6:	4b09      	ldr	r3, [pc, #36]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2fa:	4a08      	ldr	r2, [pc, #32]	; (800d31c <HAL_RCC_OscConfig+0x280>)
 800d2fc:	f023 0301 	bic.w	r3, r3, #1
 800d300:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d302:	f7fe fa69 	bl	800b7d8 <HAL_GetTick>
 800d306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d308:	e00a      	b.n	800d320 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d30a:	f7fe fa65 	bl	800b7d8 <HAL_GetTick>
 800d30e:	4602      	mov	r2, r0
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	2b02      	cmp	r3, #2
 800d316:	d903      	bls.n	800d320 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d318:	2303      	movs	r3, #3
 800d31a:	e15c      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
 800d31c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d320:	4b91      	ldr	r3, [pc, #580]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d324:	f003 0302 	and.w	r3, r3, #2
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1ee      	bne.n	800d30a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 80a4 	beq.w	800d482 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d33a:	4b8b      	ldr	r3, [pc, #556]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10d      	bne.n	800d362 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d346:	4b88      	ldr	r3, [pc, #544]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	4a87      	ldr	r2, [pc, #540]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d34c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d350:	6413      	str	r3, [r2, #64]	; 0x40
 800d352:	4b85      	ldr	r3, [pc, #532]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d35a:	60bb      	str	r3, [r7, #8]
 800d35c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d35e:	2301      	movs	r3, #1
 800d360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d362:	4b82      	ldr	r3, [pc, #520]	; (800d56c <HAL_RCC_OscConfig+0x4d0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d118      	bne.n	800d3a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d36e:	4b7f      	ldr	r3, [pc, #508]	; (800d56c <HAL_RCC_OscConfig+0x4d0>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a7e      	ldr	r2, [pc, #504]	; (800d56c <HAL_RCC_OscConfig+0x4d0>)
 800d374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d37a:	f7fe fa2d 	bl	800b7d8 <HAL_GetTick>
 800d37e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d380:	e008      	b.n	800d394 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d382:	f7fe fa29 	bl	800b7d8 <HAL_GetTick>
 800d386:	4602      	mov	r2, r0
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	2b64      	cmp	r3, #100	; 0x64
 800d38e:	d901      	bls.n	800d394 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d390:	2303      	movs	r3, #3
 800d392:	e120      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d394:	4b75      	ldr	r3, [pc, #468]	; (800d56c <HAL_RCC_OscConfig+0x4d0>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0f0      	beq.n	800d382 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d106      	bne.n	800d3b6 <HAL_RCC_OscConfig+0x31a>
 800d3a8:	4b6f      	ldr	r3, [pc, #444]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ac:	4a6e      	ldr	r2, [pc, #440]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3ae:	f043 0301 	orr.w	r3, r3, #1
 800d3b2:	6713      	str	r3, [r2, #112]	; 0x70
 800d3b4:	e02d      	b.n	800d412 <HAL_RCC_OscConfig+0x376>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10c      	bne.n	800d3d8 <HAL_RCC_OscConfig+0x33c>
 800d3be:	4b6a      	ldr	r3, [pc, #424]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c2:	4a69      	ldr	r2, [pc, #420]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3c4:	f023 0301 	bic.w	r3, r3, #1
 800d3c8:	6713      	str	r3, [r2, #112]	; 0x70
 800d3ca:	4b67      	ldr	r3, [pc, #412]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ce:	4a66      	ldr	r2, [pc, #408]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3d0:	f023 0304 	bic.w	r3, r3, #4
 800d3d4:	6713      	str	r3, [r2, #112]	; 0x70
 800d3d6:	e01c      	b.n	800d412 <HAL_RCC_OscConfig+0x376>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	2b05      	cmp	r3, #5
 800d3de:	d10c      	bne.n	800d3fa <HAL_RCC_OscConfig+0x35e>
 800d3e0:	4b61      	ldr	r3, [pc, #388]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e4:	4a60      	ldr	r2, [pc, #384]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3e6:	f043 0304 	orr.w	r3, r3, #4
 800d3ea:	6713      	str	r3, [r2, #112]	; 0x70
 800d3ec:	4b5e      	ldr	r3, [pc, #376]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3f0:	4a5d      	ldr	r2, [pc, #372]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3f2:	f043 0301 	orr.w	r3, r3, #1
 800d3f6:	6713      	str	r3, [r2, #112]	; 0x70
 800d3f8:	e00b      	b.n	800d412 <HAL_RCC_OscConfig+0x376>
 800d3fa:	4b5b      	ldr	r3, [pc, #364]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fe:	4a5a      	ldr	r2, [pc, #360]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d400:	f023 0301 	bic.w	r3, r3, #1
 800d404:	6713      	str	r3, [r2, #112]	; 0x70
 800d406:	4b58      	ldr	r3, [pc, #352]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d40a:	4a57      	ldr	r2, [pc, #348]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d40c:	f023 0304 	bic.w	r3, r3, #4
 800d410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d015      	beq.n	800d446 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d41a:	f7fe f9dd 	bl	800b7d8 <HAL_GetTick>
 800d41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d420:	e00a      	b.n	800d438 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d422:	f7fe f9d9 	bl	800b7d8 <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d430:	4293      	cmp	r3, r2
 800d432:	d901      	bls.n	800d438 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e0ce      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d438:	4b4b      	ldr	r3, [pc, #300]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43c:	f003 0302 	and.w	r3, r3, #2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d0ee      	beq.n	800d422 <HAL_RCC_OscConfig+0x386>
 800d444:	e014      	b.n	800d470 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d446:	f7fe f9c7 	bl	800b7d8 <HAL_GetTick>
 800d44a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d44c:	e00a      	b.n	800d464 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d44e:	f7fe f9c3 	bl	800b7d8 <HAL_GetTick>
 800d452:	4602      	mov	r2, r0
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	f241 3288 	movw	r2, #5000	; 0x1388
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d901      	bls.n	800d464 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d460:	2303      	movs	r3, #3
 800d462:	e0b8      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d464:	4b40      	ldr	r3, [pc, #256]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d468:	f003 0302 	and.w	r3, r3, #2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1ee      	bne.n	800d44e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d470:	7dfb      	ldrb	r3, [r7, #23]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d105      	bne.n	800d482 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d476:	4b3c      	ldr	r3, [pc, #240]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	4a3b      	ldr	r2, [pc, #236]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d47c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	2b00      	cmp	r3, #0
 800d488:	f000 80a4 	beq.w	800d5d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d48c:	4b36      	ldr	r3, [pc, #216]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	f003 030c 	and.w	r3, r3, #12
 800d494:	2b08      	cmp	r3, #8
 800d496:	d06b      	beq.n	800d570 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	699b      	ldr	r3, [r3, #24]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d149      	bne.n	800d534 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4a0:	4b31      	ldr	r3, [pc, #196]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a30      	ldr	r2, [pc, #192]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d4a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4ac:	f7fe f994 	bl	800b7d8 <HAL_GetTick>
 800d4b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d4b2:	e008      	b.n	800d4c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4b4:	f7fe f990 	bl	800b7d8 <HAL_GetTick>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d901      	bls.n	800d4c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	e087      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d4c6:	4b28      	ldr	r3, [pc, #160]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1f0      	bne.n	800d4b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	69da      	ldr	r2, [r3, #28]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a1b      	ldr	r3, [r3, #32]
 800d4da:	431a      	orrs	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e0:	019b      	lsls	r3, r3, #6
 800d4e2:	431a      	orrs	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e8:	085b      	lsrs	r3, r3, #1
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	041b      	lsls	r3, r3, #16
 800d4ee:	431a      	orrs	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f4:	061b      	lsls	r3, r3, #24
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	4a1b      	ldr	r2, [pc, #108]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d4fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d500:	4b19      	ldr	r3, [pc, #100]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a18      	ldr	r2, [pc, #96]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d50a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d50c:	f7fe f964 	bl	800b7d8 <HAL_GetTick>
 800d510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d512:	e008      	b.n	800d526 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d514:	f7fe f960 	bl	800b7d8 <HAL_GetTick>
 800d518:	4602      	mov	r2, r0
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d901      	bls.n	800d526 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e057      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0f0      	beq.n	800d514 <HAL_RCC_OscConfig+0x478>
 800d532:	e04f      	b.n	800d5d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d534:	4b0c      	ldr	r3, [pc, #48]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a0b      	ldr	r2, [pc, #44]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d53a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d53e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d540:	f7fe f94a 	bl	800b7d8 <HAL_GetTick>
 800d544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d546:	e008      	b.n	800d55a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d548:	f7fe f946 	bl	800b7d8 <HAL_GetTick>
 800d54c:	4602      	mov	r2, r0
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	2b02      	cmp	r3, #2
 800d554:	d901      	bls.n	800d55a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800d556:	2303      	movs	r3, #3
 800d558:	e03d      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d55a:	4b03      	ldr	r3, [pc, #12]	; (800d568 <HAL_RCC_OscConfig+0x4cc>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1f0      	bne.n	800d548 <HAL_RCC_OscConfig+0x4ac>
 800d566:	e035      	b.n	800d5d4 <HAL_RCC_OscConfig+0x538>
 800d568:	40023800 	.word	0x40023800
 800d56c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d570:	4b1b      	ldr	r3, [pc, #108]	; (800d5e0 <HAL_RCC_OscConfig+0x544>)
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	699b      	ldr	r3, [r3, #24]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d028      	beq.n	800d5d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d588:	429a      	cmp	r2, r3
 800d58a:	d121      	bne.n	800d5d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d596:	429a      	cmp	r2, r3
 800d598:	d11a      	bne.n	800d5d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d5a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d111      	bne.n	800d5d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b6:	085b      	lsrs	r3, r3, #1
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d107      	bne.n	800d5d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d001      	beq.n	800d5d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e000      	b.n	800d5d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	40023800 	.word	0x40023800

0800d5e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d101      	bne.n	800d5fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e0d0      	b.n	800d79e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d5fc:	4b6a      	ldr	r3, [pc, #424]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 030f 	and.w	r3, r3, #15
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	d910      	bls.n	800d62c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d60a:	4b67      	ldr	r3, [pc, #412]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f023 020f 	bic.w	r2, r3, #15
 800d612:	4965      	ldr	r1, [pc, #404]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	4313      	orrs	r3, r2
 800d618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d61a:	4b63      	ldr	r3, [pc, #396]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f003 030f 	and.w	r3, r3, #15
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	429a      	cmp	r2, r3
 800d626:	d001      	beq.n	800d62c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d628:	2301      	movs	r3, #1
 800d62a:	e0b8      	b.n	800d79e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f003 0302 	and.w	r3, r3, #2
 800d634:	2b00      	cmp	r3, #0
 800d636:	d020      	beq.n	800d67a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f003 0304 	and.w	r3, r3, #4
 800d640:	2b00      	cmp	r3, #0
 800d642:	d005      	beq.n	800d650 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d644:	4b59      	ldr	r3, [pc, #356]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	4a58      	ldr	r2, [pc, #352]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d64a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d64e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f003 0308 	and.w	r3, r3, #8
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d65c:	4b53      	ldr	r3, [pc, #332]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	4a52      	ldr	r2, [pc, #328]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d668:	4b50      	ldr	r3, [pc, #320]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	494d      	ldr	r1, [pc, #308]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d676:	4313      	orrs	r3, r2
 800d678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f003 0301 	and.w	r3, r3, #1
 800d682:	2b00      	cmp	r3, #0
 800d684:	d040      	beq.n	800d708 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d107      	bne.n	800d69e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d68e:	4b47      	ldr	r3, [pc, #284]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d696:	2b00      	cmp	r3, #0
 800d698:	d115      	bne.n	800d6c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e07f      	b.n	800d79e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d107      	bne.n	800d6b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d6a6:	4b41      	ldr	r3, [pc, #260]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d109      	bne.n	800d6c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e073      	b.n	800d79e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d6b6:	4b3d      	ldr	r3, [pc, #244]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e06b      	b.n	800d79e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d6c6:	4b39      	ldr	r3, [pc, #228]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	f023 0203 	bic.w	r2, r3, #3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	4936      	ldr	r1, [pc, #216]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6d8:	f7fe f87e 	bl	800b7d8 <HAL_GetTick>
 800d6dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6de:	e00a      	b.n	800d6f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6e0:	f7fe f87a 	bl	800b7d8 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d901      	bls.n	800d6f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	e053      	b.n	800d79e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6f6:	4b2d      	ldr	r3, [pc, #180]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	f003 020c 	and.w	r2, r3, #12
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	429a      	cmp	r2, r3
 800d706:	d1eb      	bne.n	800d6e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d708:	4b27      	ldr	r3, [pc, #156]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f003 030f 	and.w	r3, r3, #15
 800d710:	683a      	ldr	r2, [r7, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d210      	bcs.n	800d738 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d716:	4b24      	ldr	r3, [pc, #144]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f023 020f 	bic.w	r2, r3, #15
 800d71e:	4922      	ldr	r1, [pc, #136]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	4313      	orrs	r3, r2
 800d724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d726:	4b20      	ldr	r3, [pc, #128]	; (800d7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f003 030f 	and.w	r3, r3, #15
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	429a      	cmp	r2, r3
 800d732:	d001      	beq.n	800d738 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e032      	b.n	800d79e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 0304 	and.w	r3, r3, #4
 800d740:	2b00      	cmp	r3, #0
 800d742:	d008      	beq.n	800d756 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d744:	4b19      	ldr	r3, [pc, #100]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	4916      	ldr	r1, [pc, #88]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d752:	4313      	orrs	r3, r2
 800d754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0308 	and.w	r3, r3, #8
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d009      	beq.n	800d776 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d762:	4b12      	ldr	r3, [pc, #72]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	490e      	ldr	r1, [pc, #56]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d772:	4313      	orrs	r3, r2
 800d774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d776:	f000 f821 	bl	800d7bc <HAL_RCC_GetSysClockFreq>
 800d77a:	4602      	mov	r2, r0
 800d77c:	4b0b      	ldr	r3, [pc, #44]	; (800d7ac <HAL_RCC_ClockConfig+0x1c8>)
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	091b      	lsrs	r3, r3, #4
 800d782:	f003 030f 	and.w	r3, r3, #15
 800d786:	490a      	ldr	r1, [pc, #40]	; (800d7b0 <HAL_RCC_ClockConfig+0x1cc>)
 800d788:	5ccb      	ldrb	r3, [r1, r3]
 800d78a:	fa22 f303 	lsr.w	r3, r2, r3
 800d78e:	4a09      	ldr	r2, [pc, #36]	; (800d7b4 <HAL_RCC_ClockConfig+0x1d0>)
 800d790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d792:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <HAL_RCC_ClockConfig+0x1d4>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4618      	mov	r0, r3
 800d798:	f7fd fe66 	bl	800b468 <HAL_InitTick>

  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	40023c00 	.word	0x40023c00
 800d7ac:	40023800 	.word	0x40023800
 800d7b0:	08015230 	.word	0x08015230
 800d7b4:	20000250 	.word	0x20000250
 800d7b8:	20000254 	.word	0x20000254

0800d7bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d7bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7c0:	b094      	sub	sp, #80	; 0x50
 800d7c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	647b      	str	r3, [r7, #68]	; 0x44
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7d4:	4b79      	ldr	r3, [pc, #484]	; (800d9bc <HAL_RCC_GetSysClockFreq+0x200>)
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	f003 030c 	and.w	r3, r3, #12
 800d7dc:	2b08      	cmp	r3, #8
 800d7de:	d00d      	beq.n	800d7fc <HAL_RCC_GetSysClockFreq+0x40>
 800d7e0:	2b08      	cmp	r3, #8
 800d7e2:	f200 80e1 	bhi.w	800d9a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d002      	beq.n	800d7f0 <HAL_RCC_GetSysClockFreq+0x34>
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	d003      	beq.n	800d7f6 <HAL_RCC_GetSysClockFreq+0x3a>
 800d7ee:	e0db      	b.n	800d9a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d7f0:	4b73      	ldr	r3, [pc, #460]	; (800d9c0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d7f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d7f4:	e0db      	b.n	800d9ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d7f6:	4b73      	ldr	r3, [pc, #460]	; (800d9c4 <HAL_RCC_GetSysClockFreq+0x208>)
 800d7f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d7fa:	e0d8      	b.n	800d9ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d7fc:	4b6f      	ldr	r3, [pc, #444]	; (800d9bc <HAL_RCC_GetSysClockFreq+0x200>)
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d804:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d806:	4b6d      	ldr	r3, [pc, #436]	; (800d9bc <HAL_RCC_GetSysClockFreq+0x200>)
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d063      	beq.n	800d8da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d812:	4b6a      	ldr	r3, [pc, #424]	; (800d9bc <HAL_RCC_GetSysClockFreq+0x200>)
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	099b      	lsrs	r3, r3, #6
 800d818:	2200      	movs	r2, #0
 800d81a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d81c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d824:	633b      	str	r3, [r7, #48]	; 0x30
 800d826:	2300      	movs	r3, #0
 800d828:	637b      	str	r3, [r7, #52]	; 0x34
 800d82a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d82e:	4622      	mov	r2, r4
 800d830:	462b      	mov	r3, r5
 800d832:	f04f 0000 	mov.w	r0, #0
 800d836:	f04f 0100 	mov.w	r1, #0
 800d83a:	0159      	lsls	r1, r3, #5
 800d83c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d840:	0150      	lsls	r0, r2, #5
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	4621      	mov	r1, r4
 800d848:	1a51      	subs	r1, r2, r1
 800d84a:	6139      	str	r1, [r7, #16]
 800d84c:	4629      	mov	r1, r5
 800d84e:	eb63 0301 	sbc.w	r3, r3, r1
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	f04f 0200 	mov.w	r2, #0
 800d858:	f04f 0300 	mov.w	r3, #0
 800d85c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d860:	4659      	mov	r1, fp
 800d862:	018b      	lsls	r3, r1, #6
 800d864:	4651      	mov	r1, sl
 800d866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d86a:	4651      	mov	r1, sl
 800d86c:	018a      	lsls	r2, r1, #6
 800d86e:	4651      	mov	r1, sl
 800d870:	ebb2 0801 	subs.w	r8, r2, r1
 800d874:	4659      	mov	r1, fp
 800d876:	eb63 0901 	sbc.w	r9, r3, r1
 800d87a:	f04f 0200 	mov.w	r2, #0
 800d87e:	f04f 0300 	mov.w	r3, #0
 800d882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d88a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d88e:	4690      	mov	r8, r2
 800d890:	4699      	mov	r9, r3
 800d892:	4623      	mov	r3, r4
 800d894:	eb18 0303 	adds.w	r3, r8, r3
 800d898:	60bb      	str	r3, [r7, #8]
 800d89a:	462b      	mov	r3, r5
 800d89c:	eb49 0303 	adc.w	r3, r9, r3
 800d8a0:	60fb      	str	r3, [r7, #12]
 800d8a2:	f04f 0200 	mov.w	r2, #0
 800d8a6:	f04f 0300 	mov.w	r3, #0
 800d8aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	024b      	lsls	r3, r1, #9
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	024a      	lsls	r2, r1, #9
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4619      	mov	r1, r3
 800d8c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d8cc:	f7f3 f986 	bl	8000bdc <__aeabi_uldivmod>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8d8:	e058      	b.n	800d98c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d8da:	4b38      	ldr	r3, [pc, #224]	; (800d9bc <HAL_RCC_GetSysClockFreq+0x200>)
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	099b      	lsrs	r3, r3, #6
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d8ea:	623b      	str	r3, [r7, #32]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d8f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d8f4:	4642      	mov	r2, r8
 800d8f6:	464b      	mov	r3, r9
 800d8f8:	f04f 0000 	mov.w	r0, #0
 800d8fc:	f04f 0100 	mov.w	r1, #0
 800d900:	0159      	lsls	r1, r3, #5
 800d902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d906:	0150      	lsls	r0, r2, #5
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4641      	mov	r1, r8
 800d90e:	ebb2 0a01 	subs.w	sl, r2, r1
 800d912:	4649      	mov	r1, r9
 800d914:	eb63 0b01 	sbc.w	fp, r3, r1
 800d918:	f04f 0200 	mov.w	r2, #0
 800d91c:	f04f 0300 	mov.w	r3, #0
 800d920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d92c:	ebb2 040a 	subs.w	r4, r2, sl
 800d930:	eb63 050b 	sbc.w	r5, r3, fp
 800d934:	f04f 0200 	mov.w	r2, #0
 800d938:	f04f 0300 	mov.w	r3, #0
 800d93c:	00eb      	lsls	r3, r5, #3
 800d93e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d942:	00e2      	lsls	r2, r4, #3
 800d944:	4614      	mov	r4, r2
 800d946:	461d      	mov	r5, r3
 800d948:	4643      	mov	r3, r8
 800d94a:	18e3      	adds	r3, r4, r3
 800d94c:	603b      	str	r3, [r7, #0]
 800d94e:	464b      	mov	r3, r9
 800d950:	eb45 0303 	adc.w	r3, r5, r3
 800d954:	607b      	str	r3, [r7, #4]
 800d956:	f04f 0200 	mov.w	r2, #0
 800d95a:	f04f 0300 	mov.w	r3, #0
 800d95e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d962:	4629      	mov	r1, r5
 800d964:	028b      	lsls	r3, r1, #10
 800d966:	4621      	mov	r1, r4
 800d968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d96c:	4621      	mov	r1, r4
 800d96e:	028a      	lsls	r2, r1, #10
 800d970:	4610      	mov	r0, r2
 800d972:	4619      	mov	r1, r3
 800d974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d976:	2200      	movs	r2, #0
 800d978:	61bb      	str	r3, [r7, #24]
 800d97a:	61fa      	str	r2, [r7, #28]
 800d97c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d980:	f7f3 f92c 	bl	8000bdc <__aeabi_uldivmod>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	4613      	mov	r3, r2
 800d98a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d98c:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <HAL_RCC_GetSysClockFreq+0x200>)
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	0c1b      	lsrs	r3, r3, #16
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	3301      	adds	r3, #1
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800d99c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d9a6:	e002      	b.n	800d9ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d9a8:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d9aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d9ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3750      	adds	r7, #80	; 0x50
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9ba:	bf00      	nop
 800d9bc:	40023800 	.word	0x40023800
 800d9c0:	00f42400 	.word	0x00f42400
 800d9c4:	007a1200 	.word	0x007a1200

0800d9c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d9cc:	4b03      	ldr	r3, [pc, #12]	; (800d9dc <HAL_RCC_GetHCLKFreq+0x14>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	20000250 	.word	0x20000250

0800d9e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d9e4:	f7ff fff0 	bl	800d9c8 <HAL_RCC_GetHCLKFreq>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	4b05      	ldr	r3, [pc, #20]	; (800da00 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	0a9b      	lsrs	r3, r3, #10
 800d9f0:	f003 0307 	and.w	r3, r3, #7
 800d9f4:	4903      	ldr	r1, [pc, #12]	; (800da04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d9f6:	5ccb      	ldrb	r3, [r1, r3]
 800d9f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	40023800 	.word	0x40023800
 800da04:	08015240 	.word	0x08015240

0800da08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800da0c:	f7ff ffdc 	bl	800d9c8 <HAL_RCC_GetHCLKFreq>
 800da10:	4602      	mov	r2, r0
 800da12:	4b05      	ldr	r3, [pc, #20]	; (800da28 <HAL_RCC_GetPCLK2Freq+0x20>)
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	0b5b      	lsrs	r3, r3, #13
 800da18:	f003 0307 	and.w	r3, r3, #7
 800da1c:	4903      	ldr	r1, [pc, #12]	; (800da2c <HAL_RCC_GetPCLK2Freq+0x24>)
 800da1e:	5ccb      	ldrb	r3, [r1, r3]
 800da20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800da24:	4618      	mov	r0, r3
 800da26:	bd80      	pop	{r7, pc}
 800da28:	40023800 	.word	0x40023800
 800da2c:	08015240 	.word	0x08015240

0800da30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	220f      	movs	r2, #15
 800da3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800da40:	4b12      	ldr	r3, [pc, #72]	; (800da8c <HAL_RCC_GetClockConfig+0x5c>)
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	f003 0203 	and.w	r2, r3, #3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800da4c:	4b0f      	ldr	r3, [pc, #60]	; (800da8c <HAL_RCC_GetClockConfig+0x5c>)
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800da58:	4b0c      	ldr	r3, [pc, #48]	; (800da8c <HAL_RCC_GetClockConfig+0x5c>)
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800da64:	4b09      	ldr	r3, [pc, #36]	; (800da8c <HAL_RCC_GetClockConfig+0x5c>)
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	08db      	lsrs	r3, r3, #3
 800da6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800da72:	4b07      	ldr	r3, [pc, #28]	; (800da90 <HAL_RCC_GetClockConfig+0x60>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f003 020f 	and.w	r2, r3, #15
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	601a      	str	r2, [r3, #0]
}
 800da7e:	bf00      	nop
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	40023800 	.word	0x40023800
 800da90:	40023c00 	.word	0x40023c00

0800da94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b088      	sub	sp, #32
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800daac:	2300      	movs	r3, #0
 800daae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f003 0301 	and.w	r3, r3, #1
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d012      	beq.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dabc:	4b69      	ldr	r3, [pc, #420]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	4a68      	ldr	r2, [pc, #416]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dac2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dac6:	6093      	str	r3, [r2, #8]
 800dac8:	4b66      	ldr	r3, [pc, #408]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800daca:	689a      	ldr	r2, [r3, #8]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad0:	4964      	ldr	r1, [pc, #400]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dad2:	4313      	orrs	r3, r2
 800dad4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800dade:	2301      	movs	r3, #1
 800dae0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800daea:	2b00      	cmp	r3, #0
 800daec:	d017      	beq.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800daee:	4b5d      	ldr	r3, [pc, #372]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800daf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dafc:	4959      	ldr	r1, [pc, #356]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dafe:	4313      	orrs	r3, r2
 800db00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db0c:	d101      	bne.n	800db12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800db0e:	2301      	movs	r3, #1
 800db10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db16:	2b00      	cmp	r3, #0
 800db18:	d101      	bne.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800db1a:	2301      	movs	r3, #1
 800db1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db26:	2b00      	cmp	r3, #0
 800db28:	d017      	beq.n	800db5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800db2a:	4b4e      	ldr	r3, [pc, #312]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db38:	494a      	ldr	r1, [pc, #296]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db3a:	4313      	orrs	r3, r2
 800db3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db48:	d101      	bne.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800db4a:	2301      	movs	r3, #1
 800db4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db52:	2b00      	cmp	r3, #0
 800db54:	d101      	bne.n	800db5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800db56:	2301      	movs	r3, #1
 800db58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db62:	2b00      	cmp	r3, #0
 800db64:	d001      	beq.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800db66:	2301      	movs	r3, #1
 800db68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f003 0320 	and.w	r3, r3, #32
 800db72:	2b00      	cmp	r3, #0
 800db74:	f000 808b 	beq.w	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800db78:	4b3a      	ldr	r3, [pc, #232]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7c:	4a39      	ldr	r2, [pc, #228]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db82:	6413      	str	r3, [r2, #64]	; 0x40
 800db84:	4b37      	ldr	r3, [pc, #220]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800db86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db8c:	60bb      	str	r3, [r7, #8]
 800db8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800db90:	4b35      	ldr	r3, [pc, #212]	; (800dc68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a34      	ldr	r2, [pc, #208]	; (800dc68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800db96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db9c:	f7fd fe1c 	bl	800b7d8 <HAL_GetTick>
 800dba0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800dba2:	e008      	b.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dba4:	f7fd fe18 	bl	800b7d8 <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	2b64      	cmp	r3, #100	; 0x64
 800dbb0:	d901      	bls.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	e357      	b.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800dbb6:	4b2c      	ldr	r3, [pc, #176]	; (800dc68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d0f0      	beq.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800dbc2:	4b28      	ldr	r3, [pc, #160]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d035      	beq.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d02e      	beq.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dbe0:	4b20      	ldr	r3, [pc, #128]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbe8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800dbea:	4b1e      	ldr	r3, [pc, #120]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbee:	4a1d      	ldr	r2, [pc, #116]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800dbf6:	4b1b      	ldr	r3, [pc, #108]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbfa:	4a1a      	ldr	r2, [pc, #104]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dbfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800dc02:	4a18      	ldr	r2, [pc, #96]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800dc08:	4b16      	ldr	r3, [pc, #88]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc0c:	f003 0301 	and.w	r3, r3, #1
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d114      	bne.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc14:	f7fd fde0 	bl	800b7d8 <HAL_GetTick>
 800dc18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc1a:	e00a      	b.n	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dc1c:	f7fd fddc 	bl	800b7d8 <HAL_GetTick>
 800dc20:	4602      	mov	r2, r0
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d901      	bls.n	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800dc2e:	2303      	movs	r3, #3
 800dc30:	e319      	b.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dc32:	4b0c      	ldr	r3, [pc, #48]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc36:	f003 0302 	and.w	r3, r3, #2
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d0ee      	beq.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc4a:	d111      	bne.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800dc4c:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dc58:	4b04      	ldr	r3, [pc, #16]	; (800dc6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800dc5a:	400b      	ands	r3, r1
 800dc5c:	4901      	ldr	r1, [pc, #4]	; (800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	608b      	str	r3, [r1, #8]
 800dc62:	e00b      	b.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800dc64:	40023800 	.word	0x40023800
 800dc68:	40007000 	.word	0x40007000
 800dc6c:	0ffffcff 	.word	0x0ffffcff
 800dc70:	4baa      	ldr	r3, [pc, #680]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	4aa9      	ldr	r2, [pc, #676]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800dc7a:	6093      	str	r3, [r2, #8]
 800dc7c:	4ba7      	ldr	r3, [pc, #668]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc88:	49a4      	ldr	r1, [pc, #656]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0310 	and.w	r3, r3, #16
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d010      	beq.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dc9a:	4ba0      	ldr	r3, [pc, #640]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dc9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dca0:	4a9e      	ldr	r2, [pc, #632]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800dcaa:	4b9c      	ldr	r3, [pc, #624]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb4:	4999      	ldr	r1, [pc, #612]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00a      	beq.n	800dcde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dcc8:	4b94      	ldr	r3, [pc, #592]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd6:	4991      	ldr	r1, [pc, #580]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d00a      	beq.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dcea:	4b8c      	ldr	r3, [pc, #560]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcf8:	4988      	ldr	r1, [pc, #544]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00a      	beq.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dd0c:	4b83      	ldr	r3, [pc, #524]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd1a:	4980      	ldr	r1, [pc, #512]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00a      	beq.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dd2e:	4b7b      	ldr	r3, [pc, #492]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3c:	4977      	ldr	r1, [pc, #476]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00a      	beq.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dd50:	4b72      	ldr	r3, [pc, #456]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd56:	f023 0203 	bic.w	r2, r3, #3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd5e:	496f      	ldr	r1, [pc, #444]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd60:	4313      	orrs	r3, r2
 800dd62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00a      	beq.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dd72:	4b6a      	ldr	r3, [pc, #424]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd78:	f023 020c 	bic.w	r2, r3, #12
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd80:	4966      	ldr	r1, [pc, #408]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd82:	4313      	orrs	r3, r2
 800dd84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00a      	beq.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dd94:	4b61      	ldr	r3, [pc, #388]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dd96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dda2:	495e      	ldr	r1, [pc, #376]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dda4:	4313      	orrs	r3, r2
 800dda6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00a      	beq.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ddb6:	4b59      	ldr	r3, [pc, #356]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ddb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc4:	4955      	ldr	r1, [pc, #340]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00a      	beq.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ddd8:	4b50      	ldr	r3, [pc, #320]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ddda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dde6:	494d      	ldr	r1, [pc, #308]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dde8:	4313      	orrs	r3, r2
 800ddea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00a      	beq.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ddfa:	4b48      	ldr	r3, [pc, #288]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ddfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de08:	4944      	ldr	r1, [pc, #272]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de0a:	4313      	orrs	r3, r2
 800de0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00a      	beq.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800de1c:	4b3f      	ldr	r3, [pc, #252]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2a:	493c      	ldr	r1, [pc, #240]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de2c:	4313      	orrs	r3, r2
 800de2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00a      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800de3e:	4b37      	ldr	r3, [pc, #220]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de4c:	4933      	ldr	r1, [pc, #204]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de4e:	4313      	orrs	r3, r2
 800de50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00a      	beq.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800de60:	4b2e      	ldr	r3, [pc, #184]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de6e:	492b      	ldr	r1, [pc, #172]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de70:	4313      	orrs	r3, r2
 800de72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d011      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800de82:	4b26      	ldr	r3, [pc, #152]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de90:	4922      	ldr	r1, [pc, #136]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800de92:	4313      	orrs	r3, r2
 800de94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dea0:	d101      	bne.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800dea2:	2301      	movs	r3, #1
 800dea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f003 0308 	and.w	r3, r3, #8
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800deb2:	2301      	movs	r3, #1
 800deb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00a      	beq.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dec2:	4b16      	ldr	r3, [pc, #88]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dec8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ded0:	4912      	ldr	r1, [pc, #72]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ded2:	4313      	orrs	r3, r2
 800ded4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00b      	beq.n	800defc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dee4:	4b0d      	ldr	r3, [pc, #52]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800deea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800def4:	4909      	ldr	r1, [pc, #36]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800def6:	4313      	orrs	r3, r2
 800def8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	2b01      	cmp	r3, #1
 800df00:	d006      	beq.n	800df10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 80d9 	beq.w	800e0c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800df10:	4b02      	ldr	r3, [pc, #8]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a01      	ldr	r2, [pc, #4]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800df1a:	e001      	b.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800df1c:	40023800 	.word	0x40023800
 800df20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df22:	f7fd fc59 	bl	800b7d8 <HAL_GetTick>
 800df26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800df28:	e008      	b.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800df2a:	f7fd fc55 	bl	800b7d8 <HAL_GetTick>
 800df2e:	4602      	mov	r2, r0
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	2b64      	cmp	r3, #100	; 0x64
 800df36:	d901      	bls.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800df38:	2303      	movs	r3, #3
 800df3a:	e194      	b.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800df3c:	4b6c      	ldr	r3, [pc, #432]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1f0      	bne.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f003 0301 	and.w	r3, r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	d021      	beq.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d11d      	bne.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800df5c:	4b64      	ldr	r3, [pc, #400]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800df5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df62:	0c1b      	lsrs	r3, r3, #16
 800df64:	f003 0303 	and.w	r3, r3, #3
 800df68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800df6a:	4b61      	ldr	r3, [pc, #388]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800df6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df70:	0e1b      	lsrs	r3, r3, #24
 800df72:	f003 030f 	and.w	r3, r3, #15
 800df76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	019a      	lsls	r2, r3, #6
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	041b      	lsls	r3, r3, #16
 800df82:	431a      	orrs	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	061b      	lsls	r3, r3, #24
 800df88:	431a      	orrs	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	071b      	lsls	r3, r3, #28
 800df90:	4957      	ldr	r1, [pc, #348]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800df92:	4313      	orrs	r3, r2
 800df94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d004      	beq.n	800dfae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfac:	d00a      	beq.n	800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d02e      	beq.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfc2:	d129      	bne.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dfc4:	4b4a      	ldr	r3, [pc, #296]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dfc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfca:	0c1b      	lsrs	r3, r3, #16
 800dfcc:	f003 0303 	and.w	r3, r3, #3
 800dfd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dfd2:	4b47      	ldr	r3, [pc, #284]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dfd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd8:	0f1b      	lsrs	r3, r3, #28
 800dfda:	f003 0307 	and.w	r3, r3, #7
 800dfde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	019a      	lsls	r2, r3, #6
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	041b      	lsls	r3, r3, #16
 800dfea:	431a      	orrs	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	061b      	lsls	r3, r3, #24
 800dff2:	431a      	orrs	r2, r3
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	071b      	lsls	r3, r3, #28
 800dff8:	493d      	ldr	r1, [pc, #244]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800dffa:	4313      	orrs	r3, r2
 800dffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e000:	4b3b      	ldr	r3, [pc, #236]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e006:	f023 021f 	bic.w	r2, r3, #31
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	3b01      	subs	r3, #1
 800e010:	4937      	ldr	r1, [pc, #220]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e012:	4313      	orrs	r3, r2
 800e014:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d01d      	beq.n	800e060 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e024:	4b32      	ldr	r3, [pc, #200]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e02a:	0e1b      	lsrs	r3, r3, #24
 800e02c:	f003 030f 	and.w	r3, r3, #15
 800e030:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e032:	4b2f      	ldr	r3, [pc, #188]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e038:	0f1b      	lsrs	r3, r3, #28
 800e03a:	f003 0307 	and.w	r3, r3, #7
 800e03e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	019a      	lsls	r2, r3, #6
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	041b      	lsls	r3, r3, #16
 800e04c:	431a      	orrs	r2, r3
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	061b      	lsls	r3, r3, #24
 800e052:	431a      	orrs	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	071b      	lsls	r3, r3, #28
 800e058:	4925      	ldr	r1, [pc, #148]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e05a:	4313      	orrs	r3, r2
 800e05c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d011      	beq.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	019a      	lsls	r2, r3, #6
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	041b      	lsls	r3, r3, #16
 800e078:	431a      	orrs	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	061b      	lsls	r3, r3, #24
 800e080:	431a      	orrs	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	071b      	lsls	r3, r3, #28
 800e088:	4919      	ldr	r1, [pc, #100]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e08a:	4313      	orrs	r3, r2
 800e08c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e090:	4b17      	ldr	r3, [pc, #92]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a16      	ldr	r2, [pc, #88]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e09a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e09c:	f7fd fb9c 	bl	800b7d8 <HAL_GetTick>
 800e0a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e0a2:	e008      	b.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e0a4:	f7fd fb98 	bl	800b7d8 <HAL_GetTick>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	2b64      	cmp	r3, #100	; 0x64
 800e0b0:	d901      	bls.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	e0d7      	b.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e0b6:	4b0e      	ldr	r3, [pc, #56]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0f0      	beq.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	f040 80cd 	bne.w	800e264 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e0ca:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a08      	ldr	r2, [pc, #32]	; (800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e0d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0d6:	f7fd fb7f 	bl	800b7d8 <HAL_GetTick>
 800e0da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e0dc:	e00a      	b.n	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e0de:	f7fd fb7b 	bl	800b7d8 <HAL_GetTick>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	2b64      	cmp	r3, #100	; 0x64
 800e0ea:	d903      	bls.n	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	e0ba      	b.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e0f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e0f4:	4b5e      	ldr	r3, [pc, #376]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e100:	d0ed      	beq.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d003      	beq.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e112:	2b00      	cmp	r3, #0
 800e114:	d009      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d02e      	beq.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e126:	2b00      	cmp	r3, #0
 800e128:	d12a      	bne.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e12a:	4b51      	ldr	r3, [pc, #324]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e130:	0c1b      	lsrs	r3, r3, #16
 800e132:	f003 0303 	and.w	r3, r3, #3
 800e136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e138:	4b4d      	ldr	r3, [pc, #308]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e13e:	0f1b      	lsrs	r3, r3, #28
 800e140:	f003 0307 	and.w	r3, r3, #7
 800e144:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	019a      	lsls	r2, r3, #6
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	041b      	lsls	r3, r3, #16
 800e150:	431a      	orrs	r2, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	699b      	ldr	r3, [r3, #24]
 800e156:	061b      	lsls	r3, r3, #24
 800e158:	431a      	orrs	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	071b      	lsls	r3, r3, #28
 800e15e:	4944      	ldr	r1, [pc, #272]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e160:	4313      	orrs	r3, r2
 800e162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e166:	4b42      	ldr	r3, [pc, #264]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e16c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e174:	3b01      	subs	r3, #1
 800e176:	021b      	lsls	r3, r3, #8
 800e178:	493d      	ldr	r1, [pc, #244]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e17a:	4313      	orrs	r3, r2
 800e17c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d022      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e194:	d11d      	bne.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e196:	4b36      	ldr	r3, [pc, #216]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e19c:	0e1b      	lsrs	r3, r3, #24
 800e19e:	f003 030f 	and.w	r3, r3, #15
 800e1a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e1a4:	4b32      	ldr	r3, [pc, #200]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1aa:	0f1b      	lsrs	r3, r3, #28
 800e1ac:	f003 0307 	and.w	r3, r3, #7
 800e1b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	019a      	lsls	r2, r3, #6
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a1b      	ldr	r3, [r3, #32]
 800e1bc:	041b      	lsls	r3, r3, #16
 800e1be:	431a      	orrs	r2, r3
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	061b      	lsls	r3, r3, #24
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	071b      	lsls	r3, r3, #28
 800e1ca:	4929      	ldr	r1, [pc, #164]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0308 	and.w	r3, r3, #8
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d028      	beq.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e1de:	4b24      	ldr	r3, [pc, #144]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1e4:	0e1b      	lsrs	r3, r3, #24
 800e1e6:	f003 030f 	and.w	r3, r3, #15
 800e1ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e1ec:	4b20      	ldr	r3, [pc, #128]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1f2:	0c1b      	lsrs	r3, r3, #16
 800e1f4:	f003 0303 	and.w	r3, r3, #3
 800e1f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	019a      	lsls	r2, r3, #6
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	041b      	lsls	r3, r3, #16
 800e204:	431a      	orrs	r2, r3
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	061b      	lsls	r3, r3, #24
 800e20a:	431a      	orrs	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	69db      	ldr	r3, [r3, #28]
 800e210:	071b      	lsls	r3, r3, #28
 800e212:	4917      	ldr	r1, [pc, #92]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e214:	4313      	orrs	r3, r2
 800e216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e21a:	4b15      	ldr	r3, [pc, #84]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e228:	4911      	ldr	r1, [pc, #68]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e22a:	4313      	orrs	r3, r2
 800e22c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e230:	4b0f      	ldr	r3, [pc, #60]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a0e      	ldr	r2, [pc, #56]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e23a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e23c:	f7fd facc 	bl	800b7d8 <HAL_GetTick>
 800e240:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e242:	e008      	b.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e244:	f7fd fac8 	bl	800b7d8 <HAL_GetTick>
 800e248:	4602      	mov	r2, r0
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	2b64      	cmp	r3, #100	; 0x64
 800e250:	d901      	bls.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e252:	2303      	movs	r3, #3
 800e254:	e007      	b.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e256:	4b06      	ldr	r3, [pc, #24]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e25e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e262:	d1ef      	bne.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	3720      	adds	r7, #32
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	40023800 	.word	0x40023800

0800e274 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d101      	bne.n	800e286 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	e01c      	b.n	800e2c0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	795b      	ldrb	r3, [r3, #5]
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d105      	bne.n	800e29c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f7fd f852 	bl	800b340 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2202      	movs	r2, #2
 800e2a0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f042 0204 	orr.w	r2, r2, #4
 800e2b0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	791b      	ldrb	r3, [r3, #4]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d101      	bne.n	800e2e2 <HAL_RNG_GenerateRandomNumber+0x1a>
 800e2de:	2302      	movs	r3, #2
 800e2e0:	e044      	b.n	800e36c <HAL_RNG_GenerateRandomNumber+0xa4>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	795b      	ldrb	r3, [r3, #5]
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d133      	bne.n	800e35a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e2f8:	f7fd fa6e 	bl	800b7d8 <HAL_GetTick>
 800e2fc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e2fe:	e018      	b.n	800e332 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e300:	f7fd fa6a 	bl	800b7d8 <HAL_GetTick>
 800e304:	4602      	mov	r2, r0
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d911      	bls.n	800e332 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d00a      	beq.n	800e332 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2202      	movs	r2, #2
 800e326:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e01c      	b.n	800e36c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	f003 0301 	and.w	r3, r3, #1
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d1df      	bne.n	800e300 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	689a      	ldr	r2, [r3, #8]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	68da      	ldr	r2, [r3, #12]
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2201      	movs	r2, #1
 800e356:	715a      	strb	r2, [r3, #5]
 800e358:	e004      	b.n	800e364 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2204      	movs	r2, #4
 800e35e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800e360:	2301      	movs	r3, #1
 800e362:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	711a      	strb	r2, [r3, #4]

  return status;
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	e049      	b.n	800e41a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d106      	bne.n	800e3a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f841 	bl	800e422 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2202      	movs	r2, #2
 800e3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f000 fa00 	bl	800e7b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3708      	adds	r7, #8
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e42a:	bf00      	nop
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
	...

0800e438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d001      	beq.n	800e450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e054      	b.n	800e4fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2202      	movs	r2, #2
 800e454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68da      	ldr	r2, [r3, #12]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f042 0201 	orr.w	r2, r2, #1
 800e466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a26      	ldr	r2, [pc, #152]	; (800e508 <HAL_TIM_Base_Start_IT+0xd0>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d022      	beq.n	800e4b8 <HAL_TIM_Base_Start_IT+0x80>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e47a:	d01d      	beq.n	800e4b8 <HAL_TIM_Base_Start_IT+0x80>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a22      	ldr	r2, [pc, #136]	; (800e50c <HAL_TIM_Base_Start_IT+0xd4>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d018      	beq.n	800e4b8 <HAL_TIM_Base_Start_IT+0x80>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a21      	ldr	r2, [pc, #132]	; (800e510 <HAL_TIM_Base_Start_IT+0xd8>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d013      	beq.n	800e4b8 <HAL_TIM_Base_Start_IT+0x80>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a1f      	ldr	r2, [pc, #124]	; (800e514 <HAL_TIM_Base_Start_IT+0xdc>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d00e      	beq.n	800e4b8 <HAL_TIM_Base_Start_IT+0x80>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a1e      	ldr	r2, [pc, #120]	; (800e518 <HAL_TIM_Base_Start_IT+0xe0>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d009      	beq.n	800e4b8 <HAL_TIM_Base_Start_IT+0x80>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4a1c      	ldr	r2, [pc, #112]	; (800e51c <HAL_TIM_Base_Start_IT+0xe4>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d004      	beq.n	800e4b8 <HAL_TIM_Base_Start_IT+0x80>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4a1b      	ldr	r2, [pc, #108]	; (800e520 <HAL_TIM_Base_Start_IT+0xe8>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d115      	bne.n	800e4e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	689a      	ldr	r2, [r3, #8]
 800e4be:	4b19      	ldr	r3, [pc, #100]	; (800e524 <HAL_TIM_Base_Start_IT+0xec>)
 800e4c0:	4013      	ands	r3, r2
 800e4c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2b06      	cmp	r3, #6
 800e4c8:	d015      	beq.n	800e4f6 <HAL_TIM_Base_Start_IT+0xbe>
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4d0:	d011      	beq.n	800e4f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f042 0201 	orr.w	r2, r2, #1
 800e4e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4e2:	e008      	b.n	800e4f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f042 0201 	orr.w	r2, r2, #1
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	e000      	b.n	800e4f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3714      	adds	r7, #20
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop
 800e508:	40010000 	.word	0x40010000
 800e50c:	40000400 	.word	0x40000400
 800e510:	40000800 	.word	0x40000800
 800e514:	40000c00 	.word	0x40000c00
 800e518:	40010400 	.word	0x40010400
 800e51c:	40014000 	.word	0x40014000
 800e520:	40001800 	.word	0x40001800
 800e524:	00010007 	.word	0x00010007

0800e528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	691b      	ldr	r3, [r3, #16]
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d122      	bne.n	800e584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	f003 0302 	and.w	r3, r3, #2
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d11b      	bne.n	800e584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f06f 0202 	mvn.w	r2, #2
 800e554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	f003 0303 	and.w	r3, r3, #3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f905 	bl	800e77a <HAL_TIM_IC_CaptureCallback>
 800e570:	e005      	b.n	800e57e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f8f7 	bl	800e766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f908 	bl	800e78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	f003 0304 	and.w	r3, r3, #4
 800e58e:	2b04      	cmp	r3, #4
 800e590:	d122      	bne.n	800e5d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	f003 0304 	and.w	r3, r3, #4
 800e59c:	2b04      	cmp	r3, #4
 800e59e:	d11b      	bne.n	800e5d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f06f 0204 	mvn.w	r2, #4
 800e5a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d003      	beq.n	800e5c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f8db 	bl	800e77a <HAL_TIM_IC_CaptureCallback>
 800e5c4:	e005      	b.n	800e5d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f8cd 	bl	800e766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 f8de 	bl	800e78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	f003 0308 	and.w	r3, r3, #8
 800e5e2:	2b08      	cmp	r3, #8
 800e5e4:	d122      	bne.n	800e62c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	f003 0308 	and.w	r3, r3, #8
 800e5f0:	2b08      	cmp	r3, #8
 800e5f2:	d11b      	bne.n	800e62c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f06f 0208 	mvn.w	r2, #8
 800e5fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2204      	movs	r2, #4
 800e602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	69db      	ldr	r3, [r3, #28]
 800e60a:	f003 0303 	and.w	r3, r3, #3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f8b1 	bl	800e77a <HAL_TIM_IC_CaptureCallback>
 800e618:	e005      	b.n	800e626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 f8a3 	bl	800e766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f8b4 	bl	800e78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	f003 0310 	and.w	r3, r3, #16
 800e636:	2b10      	cmp	r3, #16
 800e638:	d122      	bne.n	800e680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	f003 0310 	and.w	r3, r3, #16
 800e644:	2b10      	cmp	r3, #16
 800e646:	d11b      	bne.n	800e680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f06f 0210 	mvn.w	r2, #16
 800e650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2208      	movs	r2, #8
 800e656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	69db      	ldr	r3, [r3, #28]
 800e65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e662:	2b00      	cmp	r3, #0
 800e664:	d003      	beq.n	800e66e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f887 	bl	800e77a <HAL_TIM_IC_CaptureCallback>
 800e66c:	e005      	b.n	800e67a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f879 	bl	800e766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 f88a 	bl	800e78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	691b      	ldr	r3, [r3, #16]
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d10e      	bne.n	800e6ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	f003 0301 	and.w	r3, r3, #1
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d107      	bne.n	800e6ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f06f 0201 	mvn.w	r2, #1
 800e6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7f2 fe54 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	691b      	ldr	r3, [r3, #16]
 800e6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b6:	2b80      	cmp	r3, #128	; 0x80
 800e6b8:	d10e      	bne.n	800e6d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6c4:	2b80      	cmp	r3, #128	; 0x80
 800e6c6:	d107      	bne.n	800e6d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f91a 	bl	800e90c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6e6:	d10e      	bne.n	800e706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6f2:	2b80      	cmp	r3, #128	; 0x80
 800e6f4:	d107      	bne.n	800e706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 f90d 	bl	800e920 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	691b      	ldr	r3, [r3, #16]
 800e70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e710:	2b40      	cmp	r3, #64	; 0x40
 800e712:	d10e      	bne.n	800e732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e71e:	2b40      	cmp	r3, #64	; 0x40
 800e720:	d107      	bne.n	800e732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e72a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 f838 	bl	800e7a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	f003 0320 	and.w	r3, r3, #32
 800e73c:	2b20      	cmp	r3, #32
 800e73e:	d10e      	bne.n	800e75e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	f003 0320 	and.w	r3, r3, #32
 800e74a:	2b20      	cmp	r3, #32
 800e74c:	d107      	bne.n	800e75e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f06f 0220 	mvn.w	r2, #32
 800e756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 f8cd 	bl	800e8f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e75e:	bf00      	nop
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e766:	b480      	push	{r7}
 800e768:	b083      	sub	sp, #12
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e76e:	bf00      	nop
 800e770:	370c      	adds	r7, #12
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e77a:	b480      	push	{r7}
 800e77c:	b083      	sub	sp, #12
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e782:	bf00      	nop
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e78e:	b480      	push	{r7}
 800e790:	b083      	sub	sp, #12
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e796:	bf00      	nop
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7a2:	b480      	push	{r7}
 800e7a4:	b083      	sub	sp, #12
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7aa:	bf00      	nop
 800e7ac:	370c      	adds	r7, #12
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4a40      	ldr	r2, [pc, #256]	; (800e8cc <TIM_Base_SetConfig+0x114>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d013      	beq.n	800e7f8 <TIM_Base_SetConfig+0x40>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7d6:	d00f      	beq.n	800e7f8 <TIM_Base_SetConfig+0x40>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a3d      	ldr	r2, [pc, #244]	; (800e8d0 <TIM_Base_SetConfig+0x118>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d00b      	beq.n	800e7f8 <TIM_Base_SetConfig+0x40>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a3c      	ldr	r2, [pc, #240]	; (800e8d4 <TIM_Base_SetConfig+0x11c>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d007      	beq.n	800e7f8 <TIM_Base_SetConfig+0x40>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a3b      	ldr	r2, [pc, #236]	; (800e8d8 <TIM_Base_SetConfig+0x120>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d003      	beq.n	800e7f8 <TIM_Base_SetConfig+0x40>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a3a      	ldr	r2, [pc, #232]	; (800e8dc <TIM_Base_SetConfig+0x124>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d108      	bne.n	800e80a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	4313      	orrs	r3, r2
 800e808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a2f      	ldr	r2, [pc, #188]	; (800e8cc <TIM_Base_SetConfig+0x114>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d02b      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e818:	d027      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4a2c      	ldr	r2, [pc, #176]	; (800e8d0 <TIM_Base_SetConfig+0x118>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d023      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4a2b      	ldr	r2, [pc, #172]	; (800e8d4 <TIM_Base_SetConfig+0x11c>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d01f      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4a2a      	ldr	r2, [pc, #168]	; (800e8d8 <TIM_Base_SetConfig+0x120>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d01b      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4a29      	ldr	r2, [pc, #164]	; (800e8dc <TIM_Base_SetConfig+0x124>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d017      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a28      	ldr	r2, [pc, #160]	; (800e8e0 <TIM_Base_SetConfig+0x128>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d013      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a27      	ldr	r2, [pc, #156]	; (800e8e4 <TIM_Base_SetConfig+0x12c>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00f      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a26      	ldr	r2, [pc, #152]	; (800e8e8 <TIM_Base_SetConfig+0x130>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d00b      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a25      	ldr	r2, [pc, #148]	; (800e8ec <TIM_Base_SetConfig+0x134>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d007      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a24      	ldr	r2, [pc, #144]	; (800e8f0 <TIM_Base_SetConfig+0x138>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d003      	beq.n	800e86a <TIM_Base_SetConfig+0xb2>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a23      	ldr	r2, [pc, #140]	; (800e8f4 <TIM_Base_SetConfig+0x13c>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d108      	bne.n	800e87c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	4313      	orrs	r3, r2
 800e87a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	695b      	ldr	r3, [r3, #20]
 800e886:	4313      	orrs	r3, r2
 800e888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	689a      	ldr	r2, [r3, #8]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a0a      	ldr	r2, [pc, #40]	; (800e8cc <TIM_Base_SetConfig+0x114>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d003      	beq.n	800e8b0 <TIM_Base_SetConfig+0xf8>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a0c      	ldr	r2, [pc, #48]	; (800e8dc <TIM_Base_SetConfig+0x124>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d103      	bne.n	800e8b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	691a      	ldr	r2, [r3, #16]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	615a      	str	r2, [r3, #20]
}
 800e8be:	bf00      	nop
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	40010000 	.word	0x40010000
 800e8d0:	40000400 	.word	0x40000400
 800e8d4:	40000800 	.word	0x40000800
 800e8d8:	40000c00 	.word	0x40000c00
 800e8dc:	40010400 	.word	0x40010400
 800e8e0:	40014000 	.word	0x40014000
 800e8e4:	40014400 	.word	0x40014400
 800e8e8:	40014800 	.word	0x40014800
 800e8ec:	40001800 	.word	0x40001800
 800e8f0:	40001c00 	.word	0x40001c00
 800e8f4:	40002000 	.word	0x40002000

0800e8f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e914:	bf00      	nop
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e040      	b.n	800e9c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7fc fd26 	bl	800b3a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2224      	movs	r2, #36	; 0x24
 800e960:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f022 0201 	bic.w	r2, r2, #1
 800e970:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f8b0 	bl	800ead8 <UART_SetConfig>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d101      	bne.n	800e982 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	e022      	b.n	800e9c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 fb08 	bl	800efa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	685a      	ldr	r2, [r3, #4]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e99e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	689a      	ldr	r2, [r3, #8]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e9ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f042 0201 	orr.w	r2, r2, #1
 800e9be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 fb8f 	bl	800f0e4 <UART_CheckIdleState>
 800e9c6:	4603      	mov	r3, r0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b08a      	sub	sp, #40	; 0x28
 800e9d4:	af02      	add	r7, sp, #8
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	603b      	str	r3, [r7, #0]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9e4:	2b20      	cmp	r3, #32
 800e9e6:	d171      	bne.n	800eacc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d002      	beq.n	800e9f4 <HAL_UART_Transmit+0x24>
 800e9ee:	88fb      	ldrh	r3, [r7, #6]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d101      	bne.n	800e9f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e06a      	b.n	800eace <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2221      	movs	r2, #33	; 0x21
 800ea04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea06:	f7fc fee7 	bl	800b7d8 <HAL_GetTick>
 800ea0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	88fa      	ldrh	r2, [r7, #6]
 800ea10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	88fa      	ldrh	r2, [r7, #6]
 800ea18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea24:	d108      	bne.n	800ea38 <HAL_UART_Transmit+0x68>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	691b      	ldr	r3, [r3, #16]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d104      	bne.n	800ea38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	61bb      	str	r3, [r7, #24]
 800ea36:	e003      	b.n	800ea40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ea40:	e02c      	b.n	800ea9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2180      	movs	r1, #128	; 0x80
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f000 fb80 	bl	800f152 <UART_WaitOnFlagUntilTimeout>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ea58:	2303      	movs	r3, #3
 800ea5a:	e038      	b.n	800eace <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10b      	bne.n	800ea7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	461a      	mov	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	3302      	adds	r3, #2
 800ea76:	61bb      	str	r3, [r7, #24]
 800ea78:	e007      	b.n	800ea8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	781a      	ldrb	r2, [r3, #0]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	3301      	adds	r3, #1
 800ea88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	3b01      	subs	r3, #1
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1cc      	bne.n	800ea42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2200      	movs	r2, #0
 800eab0:	2140      	movs	r1, #64	; 0x40
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f000 fb4d 	bl	800f152 <UART_WaitOnFlagUntilTimeout>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800eabe:	2303      	movs	r3, #3
 800eac0:	e005      	b.n	800eace <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2220      	movs	r2, #32
 800eac6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800eac8:	2300      	movs	r3, #0
 800eaca:	e000      	b.n	800eace <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800eacc:	2302      	movs	r3, #2
  }
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3720      	adds	r7, #32
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
	...

0800ead8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b088      	sub	sp, #32
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	431a      	orrs	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	431a      	orrs	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	69db      	ldr	r3, [r3, #28]
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	4ba6      	ldr	r3, [pc, #664]	; (800ed9c <UART_SetConfig+0x2c4>)
 800eb04:	4013      	ands	r3, r2
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	6812      	ldr	r2, [r2, #0]
 800eb0a:	6979      	ldr	r1, [r7, #20]
 800eb0c:	430b      	orrs	r3, r1
 800eb0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	430a      	orrs	r2, r1
 800eb24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6a1b      	ldr	r3, [r3, #32]
 800eb30:	697a      	ldr	r2, [r7, #20]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	697a      	ldr	r2, [r7, #20]
 800eb46:	430a      	orrs	r2, r1
 800eb48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4a94      	ldr	r2, [pc, #592]	; (800eda0 <UART_SetConfig+0x2c8>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d120      	bne.n	800eb96 <UART_SetConfig+0xbe>
 800eb54:	4b93      	ldr	r3, [pc, #588]	; (800eda4 <UART_SetConfig+0x2cc>)
 800eb56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb5a:	f003 0303 	and.w	r3, r3, #3
 800eb5e:	2b03      	cmp	r3, #3
 800eb60:	d816      	bhi.n	800eb90 <UART_SetConfig+0xb8>
 800eb62:	a201      	add	r2, pc, #4	; (adr r2, 800eb68 <UART_SetConfig+0x90>)
 800eb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb68:	0800eb79 	.word	0x0800eb79
 800eb6c:	0800eb85 	.word	0x0800eb85
 800eb70:	0800eb7f 	.word	0x0800eb7f
 800eb74:	0800eb8b 	.word	0x0800eb8b
 800eb78:	2301      	movs	r3, #1
 800eb7a:	77fb      	strb	r3, [r7, #31]
 800eb7c:	e150      	b.n	800ee20 <UART_SetConfig+0x348>
 800eb7e:	2302      	movs	r3, #2
 800eb80:	77fb      	strb	r3, [r7, #31]
 800eb82:	e14d      	b.n	800ee20 <UART_SetConfig+0x348>
 800eb84:	2304      	movs	r3, #4
 800eb86:	77fb      	strb	r3, [r7, #31]
 800eb88:	e14a      	b.n	800ee20 <UART_SetConfig+0x348>
 800eb8a:	2308      	movs	r3, #8
 800eb8c:	77fb      	strb	r3, [r7, #31]
 800eb8e:	e147      	b.n	800ee20 <UART_SetConfig+0x348>
 800eb90:	2310      	movs	r3, #16
 800eb92:	77fb      	strb	r3, [r7, #31]
 800eb94:	e144      	b.n	800ee20 <UART_SetConfig+0x348>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a83      	ldr	r2, [pc, #524]	; (800eda8 <UART_SetConfig+0x2d0>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d132      	bne.n	800ec06 <UART_SetConfig+0x12e>
 800eba0:	4b80      	ldr	r3, [pc, #512]	; (800eda4 <UART_SetConfig+0x2cc>)
 800eba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eba6:	f003 030c 	and.w	r3, r3, #12
 800ebaa:	2b0c      	cmp	r3, #12
 800ebac:	d828      	bhi.n	800ec00 <UART_SetConfig+0x128>
 800ebae:	a201      	add	r2, pc, #4	; (adr r2, 800ebb4 <UART_SetConfig+0xdc>)
 800ebb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb4:	0800ebe9 	.word	0x0800ebe9
 800ebb8:	0800ec01 	.word	0x0800ec01
 800ebbc:	0800ec01 	.word	0x0800ec01
 800ebc0:	0800ec01 	.word	0x0800ec01
 800ebc4:	0800ebf5 	.word	0x0800ebf5
 800ebc8:	0800ec01 	.word	0x0800ec01
 800ebcc:	0800ec01 	.word	0x0800ec01
 800ebd0:	0800ec01 	.word	0x0800ec01
 800ebd4:	0800ebef 	.word	0x0800ebef
 800ebd8:	0800ec01 	.word	0x0800ec01
 800ebdc:	0800ec01 	.word	0x0800ec01
 800ebe0:	0800ec01 	.word	0x0800ec01
 800ebe4:	0800ebfb 	.word	0x0800ebfb
 800ebe8:	2300      	movs	r3, #0
 800ebea:	77fb      	strb	r3, [r7, #31]
 800ebec:	e118      	b.n	800ee20 <UART_SetConfig+0x348>
 800ebee:	2302      	movs	r3, #2
 800ebf0:	77fb      	strb	r3, [r7, #31]
 800ebf2:	e115      	b.n	800ee20 <UART_SetConfig+0x348>
 800ebf4:	2304      	movs	r3, #4
 800ebf6:	77fb      	strb	r3, [r7, #31]
 800ebf8:	e112      	b.n	800ee20 <UART_SetConfig+0x348>
 800ebfa:	2308      	movs	r3, #8
 800ebfc:	77fb      	strb	r3, [r7, #31]
 800ebfe:	e10f      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec00:	2310      	movs	r3, #16
 800ec02:	77fb      	strb	r3, [r7, #31]
 800ec04:	e10c      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4a68      	ldr	r2, [pc, #416]	; (800edac <UART_SetConfig+0x2d4>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d120      	bne.n	800ec52 <UART_SetConfig+0x17a>
 800ec10:	4b64      	ldr	r3, [pc, #400]	; (800eda4 <UART_SetConfig+0x2cc>)
 800ec12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ec1a:	2b30      	cmp	r3, #48	; 0x30
 800ec1c:	d013      	beq.n	800ec46 <UART_SetConfig+0x16e>
 800ec1e:	2b30      	cmp	r3, #48	; 0x30
 800ec20:	d814      	bhi.n	800ec4c <UART_SetConfig+0x174>
 800ec22:	2b20      	cmp	r3, #32
 800ec24:	d009      	beq.n	800ec3a <UART_SetConfig+0x162>
 800ec26:	2b20      	cmp	r3, #32
 800ec28:	d810      	bhi.n	800ec4c <UART_SetConfig+0x174>
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d002      	beq.n	800ec34 <UART_SetConfig+0x15c>
 800ec2e:	2b10      	cmp	r3, #16
 800ec30:	d006      	beq.n	800ec40 <UART_SetConfig+0x168>
 800ec32:	e00b      	b.n	800ec4c <UART_SetConfig+0x174>
 800ec34:	2300      	movs	r3, #0
 800ec36:	77fb      	strb	r3, [r7, #31]
 800ec38:	e0f2      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec3a:	2302      	movs	r3, #2
 800ec3c:	77fb      	strb	r3, [r7, #31]
 800ec3e:	e0ef      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec40:	2304      	movs	r3, #4
 800ec42:	77fb      	strb	r3, [r7, #31]
 800ec44:	e0ec      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec46:	2308      	movs	r3, #8
 800ec48:	77fb      	strb	r3, [r7, #31]
 800ec4a:	e0e9      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec4c:	2310      	movs	r3, #16
 800ec4e:	77fb      	strb	r3, [r7, #31]
 800ec50:	e0e6      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a56      	ldr	r2, [pc, #344]	; (800edb0 <UART_SetConfig+0x2d8>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d120      	bne.n	800ec9e <UART_SetConfig+0x1c6>
 800ec5c:	4b51      	ldr	r3, [pc, #324]	; (800eda4 <UART_SetConfig+0x2cc>)
 800ec5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ec66:	2bc0      	cmp	r3, #192	; 0xc0
 800ec68:	d013      	beq.n	800ec92 <UART_SetConfig+0x1ba>
 800ec6a:	2bc0      	cmp	r3, #192	; 0xc0
 800ec6c:	d814      	bhi.n	800ec98 <UART_SetConfig+0x1c0>
 800ec6e:	2b80      	cmp	r3, #128	; 0x80
 800ec70:	d009      	beq.n	800ec86 <UART_SetConfig+0x1ae>
 800ec72:	2b80      	cmp	r3, #128	; 0x80
 800ec74:	d810      	bhi.n	800ec98 <UART_SetConfig+0x1c0>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <UART_SetConfig+0x1a8>
 800ec7a:	2b40      	cmp	r3, #64	; 0x40
 800ec7c:	d006      	beq.n	800ec8c <UART_SetConfig+0x1b4>
 800ec7e:	e00b      	b.n	800ec98 <UART_SetConfig+0x1c0>
 800ec80:	2300      	movs	r3, #0
 800ec82:	77fb      	strb	r3, [r7, #31]
 800ec84:	e0cc      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec86:	2302      	movs	r3, #2
 800ec88:	77fb      	strb	r3, [r7, #31]
 800ec8a:	e0c9      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec8c:	2304      	movs	r3, #4
 800ec8e:	77fb      	strb	r3, [r7, #31]
 800ec90:	e0c6      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec92:	2308      	movs	r3, #8
 800ec94:	77fb      	strb	r3, [r7, #31]
 800ec96:	e0c3      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec98:	2310      	movs	r3, #16
 800ec9a:	77fb      	strb	r3, [r7, #31]
 800ec9c:	e0c0      	b.n	800ee20 <UART_SetConfig+0x348>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a44      	ldr	r2, [pc, #272]	; (800edb4 <UART_SetConfig+0x2dc>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d125      	bne.n	800ecf4 <UART_SetConfig+0x21c>
 800eca8:	4b3e      	ldr	r3, [pc, #248]	; (800eda4 <UART_SetConfig+0x2cc>)
 800ecaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecb6:	d017      	beq.n	800ece8 <UART_SetConfig+0x210>
 800ecb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecbc:	d817      	bhi.n	800ecee <UART_SetConfig+0x216>
 800ecbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecc2:	d00b      	beq.n	800ecdc <UART_SetConfig+0x204>
 800ecc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecc8:	d811      	bhi.n	800ecee <UART_SetConfig+0x216>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <UART_SetConfig+0x1fe>
 800ecce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecd2:	d006      	beq.n	800ece2 <UART_SetConfig+0x20a>
 800ecd4:	e00b      	b.n	800ecee <UART_SetConfig+0x216>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	77fb      	strb	r3, [r7, #31]
 800ecda:	e0a1      	b.n	800ee20 <UART_SetConfig+0x348>
 800ecdc:	2302      	movs	r3, #2
 800ecde:	77fb      	strb	r3, [r7, #31]
 800ece0:	e09e      	b.n	800ee20 <UART_SetConfig+0x348>
 800ece2:	2304      	movs	r3, #4
 800ece4:	77fb      	strb	r3, [r7, #31]
 800ece6:	e09b      	b.n	800ee20 <UART_SetConfig+0x348>
 800ece8:	2308      	movs	r3, #8
 800ecea:	77fb      	strb	r3, [r7, #31]
 800ecec:	e098      	b.n	800ee20 <UART_SetConfig+0x348>
 800ecee:	2310      	movs	r3, #16
 800ecf0:	77fb      	strb	r3, [r7, #31]
 800ecf2:	e095      	b.n	800ee20 <UART_SetConfig+0x348>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a2f      	ldr	r2, [pc, #188]	; (800edb8 <UART_SetConfig+0x2e0>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d125      	bne.n	800ed4a <UART_SetConfig+0x272>
 800ecfe:	4b29      	ldr	r3, [pc, #164]	; (800eda4 <UART_SetConfig+0x2cc>)
 800ed00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ed08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ed0c:	d017      	beq.n	800ed3e <UART_SetConfig+0x266>
 800ed0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ed12:	d817      	bhi.n	800ed44 <UART_SetConfig+0x26c>
 800ed14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed18:	d00b      	beq.n	800ed32 <UART_SetConfig+0x25a>
 800ed1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed1e:	d811      	bhi.n	800ed44 <UART_SetConfig+0x26c>
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d003      	beq.n	800ed2c <UART_SetConfig+0x254>
 800ed24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed28:	d006      	beq.n	800ed38 <UART_SetConfig+0x260>
 800ed2a:	e00b      	b.n	800ed44 <UART_SetConfig+0x26c>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	77fb      	strb	r3, [r7, #31]
 800ed30:	e076      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed32:	2302      	movs	r3, #2
 800ed34:	77fb      	strb	r3, [r7, #31]
 800ed36:	e073      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed38:	2304      	movs	r3, #4
 800ed3a:	77fb      	strb	r3, [r7, #31]
 800ed3c:	e070      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed3e:	2308      	movs	r3, #8
 800ed40:	77fb      	strb	r3, [r7, #31]
 800ed42:	e06d      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed44:	2310      	movs	r3, #16
 800ed46:	77fb      	strb	r3, [r7, #31]
 800ed48:	e06a      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a1b      	ldr	r2, [pc, #108]	; (800edbc <UART_SetConfig+0x2e4>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d138      	bne.n	800edc6 <UART_SetConfig+0x2ee>
 800ed54:	4b13      	ldr	r3, [pc, #76]	; (800eda4 <UART_SetConfig+0x2cc>)
 800ed56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ed5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ed62:	d017      	beq.n	800ed94 <UART_SetConfig+0x2bc>
 800ed64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ed68:	d82a      	bhi.n	800edc0 <UART_SetConfig+0x2e8>
 800ed6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed6e:	d00b      	beq.n	800ed88 <UART_SetConfig+0x2b0>
 800ed70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed74:	d824      	bhi.n	800edc0 <UART_SetConfig+0x2e8>
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d003      	beq.n	800ed82 <UART_SetConfig+0x2aa>
 800ed7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed7e:	d006      	beq.n	800ed8e <UART_SetConfig+0x2b6>
 800ed80:	e01e      	b.n	800edc0 <UART_SetConfig+0x2e8>
 800ed82:	2300      	movs	r3, #0
 800ed84:	77fb      	strb	r3, [r7, #31]
 800ed86:	e04b      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed88:	2302      	movs	r3, #2
 800ed8a:	77fb      	strb	r3, [r7, #31]
 800ed8c:	e048      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed8e:	2304      	movs	r3, #4
 800ed90:	77fb      	strb	r3, [r7, #31]
 800ed92:	e045      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed94:	2308      	movs	r3, #8
 800ed96:	77fb      	strb	r3, [r7, #31]
 800ed98:	e042      	b.n	800ee20 <UART_SetConfig+0x348>
 800ed9a:	bf00      	nop
 800ed9c:	efff69f3 	.word	0xefff69f3
 800eda0:	40011000 	.word	0x40011000
 800eda4:	40023800 	.word	0x40023800
 800eda8:	40004400 	.word	0x40004400
 800edac:	40004800 	.word	0x40004800
 800edb0:	40004c00 	.word	0x40004c00
 800edb4:	40005000 	.word	0x40005000
 800edb8:	40011400 	.word	0x40011400
 800edbc:	40007800 	.word	0x40007800
 800edc0:	2310      	movs	r3, #16
 800edc2:	77fb      	strb	r3, [r7, #31]
 800edc4:	e02c      	b.n	800ee20 <UART_SetConfig+0x348>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a72      	ldr	r2, [pc, #456]	; (800ef94 <UART_SetConfig+0x4bc>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d125      	bne.n	800ee1c <UART_SetConfig+0x344>
 800edd0:	4b71      	ldr	r3, [pc, #452]	; (800ef98 <UART_SetConfig+0x4c0>)
 800edd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800edda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800edde:	d017      	beq.n	800ee10 <UART_SetConfig+0x338>
 800ede0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ede4:	d817      	bhi.n	800ee16 <UART_SetConfig+0x33e>
 800ede6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edea:	d00b      	beq.n	800ee04 <UART_SetConfig+0x32c>
 800edec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edf0:	d811      	bhi.n	800ee16 <UART_SetConfig+0x33e>
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d003      	beq.n	800edfe <UART_SetConfig+0x326>
 800edf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edfa:	d006      	beq.n	800ee0a <UART_SetConfig+0x332>
 800edfc:	e00b      	b.n	800ee16 <UART_SetConfig+0x33e>
 800edfe:	2300      	movs	r3, #0
 800ee00:	77fb      	strb	r3, [r7, #31]
 800ee02:	e00d      	b.n	800ee20 <UART_SetConfig+0x348>
 800ee04:	2302      	movs	r3, #2
 800ee06:	77fb      	strb	r3, [r7, #31]
 800ee08:	e00a      	b.n	800ee20 <UART_SetConfig+0x348>
 800ee0a:	2304      	movs	r3, #4
 800ee0c:	77fb      	strb	r3, [r7, #31]
 800ee0e:	e007      	b.n	800ee20 <UART_SetConfig+0x348>
 800ee10:	2308      	movs	r3, #8
 800ee12:	77fb      	strb	r3, [r7, #31]
 800ee14:	e004      	b.n	800ee20 <UART_SetConfig+0x348>
 800ee16:	2310      	movs	r3, #16
 800ee18:	77fb      	strb	r3, [r7, #31]
 800ee1a:	e001      	b.n	800ee20 <UART_SetConfig+0x348>
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	69db      	ldr	r3, [r3, #28]
 800ee24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee28:	d15b      	bne.n	800eee2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ee2a:	7ffb      	ldrb	r3, [r7, #31]
 800ee2c:	2b08      	cmp	r3, #8
 800ee2e:	d828      	bhi.n	800ee82 <UART_SetConfig+0x3aa>
 800ee30:	a201      	add	r2, pc, #4	; (adr r2, 800ee38 <UART_SetConfig+0x360>)
 800ee32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee36:	bf00      	nop
 800ee38:	0800ee5d 	.word	0x0800ee5d
 800ee3c:	0800ee65 	.word	0x0800ee65
 800ee40:	0800ee6d 	.word	0x0800ee6d
 800ee44:	0800ee83 	.word	0x0800ee83
 800ee48:	0800ee73 	.word	0x0800ee73
 800ee4c:	0800ee83 	.word	0x0800ee83
 800ee50:	0800ee83 	.word	0x0800ee83
 800ee54:	0800ee83 	.word	0x0800ee83
 800ee58:	0800ee7b 	.word	0x0800ee7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee5c:	f7fe fdc0 	bl	800d9e0 <HAL_RCC_GetPCLK1Freq>
 800ee60:	61b8      	str	r0, [r7, #24]
        break;
 800ee62:	e013      	b.n	800ee8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee64:	f7fe fdd0 	bl	800da08 <HAL_RCC_GetPCLK2Freq>
 800ee68:	61b8      	str	r0, [r7, #24]
        break;
 800ee6a:	e00f      	b.n	800ee8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee6c:	4b4b      	ldr	r3, [pc, #300]	; (800ef9c <UART_SetConfig+0x4c4>)
 800ee6e:	61bb      	str	r3, [r7, #24]
        break;
 800ee70:	e00c      	b.n	800ee8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee72:	f7fe fca3 	bl	800d7bc <HAL_RCC_GetSysClockFreq>
 800ee76:	61b8      	str	r0, [r7, #24]
        break;
 800ee78:	e008      	b.n	800ee8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee7e:	61bb      	str	r3, [r7, #24]
        break;
 800ee80:	e004      	b.n	800ee8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ee82:	2300      	movs	r3, #0
 800ee84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ee86:	2301      	movs	r3, #1
 800ee88:	77bb      	strb	r3, [r7, #30]
        break;
 800ee8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d074      	beq.n	800ef7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	005a      	lsls	r2, r3, #1
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	085b      	lsrs	r3, r3, #1
 800ee9c:	441a      	add	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eea6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	2b0f      	cmp	r3, #15
 800eeac:	d916      	bls.n	800eedc <UART_SetConfig+0x404>
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eeb4:	d212      	bcs.n	800eedc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	f023 030f 	bic.w	r3, r3, #15
 800eebe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	085b      	lsrs	r3, r3, #1
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	f003 0307 	and.w	r3, r3, #7
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	89fb      	ldrh	r3, [r7, #14]
 800eece:	4313      	orrs	r3, r2
 800eed0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	89fa      	ldrh	r2, [r7, #14]
 800eed8:	60da      	str	r2, [r3, #12]
 800eeda:	e04f      	b.n	800ef7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	77bb      	strb	r3, [r7, #30]
 800eee0:	e04c      	b.n	800ef7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eee2:	7ffb      	ldrb	r3, [r7, #31]
 800eee4:	2b08      	cmp	r3, #8
 800eee6:	d828      	bhi.n	800ef3a <UART_SetConfig+0x462>
 800eee8:	a201      	add	r2, pc, #4	; (adr r2, 800eef0 <UART_SetConfig+0x418>)
 800eeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeee:	bf00      	nop
 800eef0:	0800ef15 	.word	0x0800ef15
 800eef4:	0800ef1d 	.word	0x0800ef1d
 800eef8:	0800ef25 	.word	0x0800ef25
 800eefc:	0800ef3b 	.word	0x0800ef3b
 800ef00:	0800ef2b 	.word	0x0800ef2b
 800ef04:	0800ef3b 	.word	0x0800ef3b
 800ef08:	0800ef3b 	.word	0x0800ef3b
 800ef0c:	0800ef3b 	.word	0x0800ef3b
 800ef10:	0800ef33 	.word	0x0800ef33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef14:	f7fe fd64 	bl	800d9e0 <HAL_RCC_GetPCLK1Freq>
 800ef18:	61b8      	str	r0, [r7, #24]
        break;
 800ef1a:	e013      	b.n	800ef44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef1c:	f7fe fd74 	bl	800da08 <HAL_RCC_GetPCLK2Freq>
 800ef20:	61b8      	str	r0, [r7, #24]
        break;
 800ef22:	e00f      	b.n	800ef44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef24:	4b1d      	ldr	r3, [pc, #116]	; (800ef9c <UART_SetConfig+0x4c4>)
 800ef26:	61bb      	str	r3, [r7, #24]
        break;
 800ef28:	e00c      	b.n	800ef44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef2a:	f7fe fc47 	bl	800d7bc <HAL_RCC_GetSysClockFreq>
 800ef2e:	61b8      	str	r0, [r7, #24]
        break;
 800ef30:	e008      	b.n	800ef44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef36:	61bb      	str	r3, [r7, #24]
        break;
 800ef38:	e004      	b.n	800ef44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	77bb      	strb	r3, [r7, #30]
        break;
 800ef42:	bf00      	nop
    }

    if (pclk != 0U)
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d018      	beq.n	800ef7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	085a      	lsrs	r2, r3, #1
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	441a      	add	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	2b0f      	cmp	r3, #15
 800ef62:	d909      	bls.n	800ef78 <UART_SetConfig+0x4a0>
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef6a:	d205      	bcs.n	800ef78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	b29a      	uxth	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	60da      	str	r2, [r3, #12]
 800ef76:	e001      	b.n	800ef7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ef88:	7fbb      	ldrb	r3, [r7, #30]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3720      	adds	r7, #32
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	40007c00 	.word	0x40007c00
 800ef98:	40023800 	.word	0x40023800
 800ef9c:	00f42400 	.word	0x00f42400

0800efa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00a      	beq.n	800efca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	430a      	orrs	r2, r1
 800efc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efce:	f003 0302 	and.w	r3, r3, #2
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00a      	beq.n	800efec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	430a      	orrs	r2, r1
 800efea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff0:	f003 0304 	and.w	r3, r3, #4
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00a      	beq.n	800f00e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	430a      	orrs	r2, r1
 800f00c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f012:	f003 0308 	and.w	r3, r3, #8
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00a      	beq.n	800f030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	430a      	orrs	r2, r1
 800f02e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f034:	f003 0310 	and.w	r3, r3, #16
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00a      	beq.n	800f052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	689b      	ldr	r3, [r3, #8]
 800f042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	430a      	orrs	r2, r1
 800f050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f056:	f003 0320 	and.w	r3, r3, #32
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00a      	beq.n	800f074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	430a      	orrs	r2, r1
 800f072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d01a      	beq.n	800f0b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	430a      	orrs	r2, r1
 800f094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f09e:	d10a      	bne.n	800f0b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00a      	beq.n	800f0d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	430a      	orrs	r2, r1
 800f0d6:	605a      	str	r2, [r3, #4]
  }
}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b086      	sub	sp, #24
 800f0e8:	af02      	add	r7, sp, #8
 800f0ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f0f4:	f7fc fb70 	bl	800b7d8 <HAL_GetTick>
 800f0f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f003 0308 	and.w	r3, r3, #8
 800f104:	2b08      	cmp	r3, #8
 800f106:	d10e      	bne.n	800f126 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 f81b 	bl	800f152 <UART_WaitOnFlagUntilTimeout>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d001      	beq.n	800f126 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f122:	2303      	movs	r3, #3
 800f124:	e011      	b.n	800f14a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2220      	movs	r2, #32
 800f12a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2220      	movs	r2, #32
 800f130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800f148:	2300      	movs	r3, #0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b09c      	sub	sp, #112	; 0x70
 800f156:	af00      	add	r7, sp, #0
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	60b9      	str	r1, [r7, #8]
 800f15c:	603b      	str	r3, [r7, #0]
 800f15e:	4613      	mov	r3, r2
 800f160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f162:	e0a7      	b.n	800f2b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f16a:	f000 80a3 	beq.w	800f2b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f16e:	f7fc fb33 	bl	800b7d8 <HAL_GetTick>
 800f172:	4602      	mov	r2, r0
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d302      	bcc.n	800f184 <UART_WaitOnFlagUntilTimeout+0x32>
 800f17e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f180:	2b00      	cmp	r3, #0
 800f182:	d13f      	bne.n	800f204 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f18c:	e853 3f00 	ldrex	r3, [r3]
 800f190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f198:	667b      	str	r3, [r7, #100]	; 0x64
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f1a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f1a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f1aa:	e841 2300 	strex	r3, r2, [r1]
 800f1ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e6      	bne.n	800f184 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	3308      	adds	r3, #8
 800f1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c0:	e853 3f00 	ldrex	r3, [r3]
 800f1c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c8:	f023 0301 	bic.w	r3, r3, #1
 800f1cc:	663b      	str	r3, [r7, #96]	; 0x60
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f1d6:	64ba      	str	r2, [r7, #72]	; 0x48
 800f1d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1de:	e841 2300 	strex	r3, r2, [r1]
 800f1e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d1e5      	bne.n	800f1b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2220      	movs	r2, #32
 800f1ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2220      	movs	r2, #32
 800f1f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800f200:	2303      	movs	r3, #3
 800f202:	e068      	b.n	800f2d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f003 0304 	and.w	r3, r3, #4
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d050      	beq.n	800f2b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	69db      	ldr	r3, [r3, #28]
 800f218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f21c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f220:	d148      	bne.n	800f2b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f22a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f234:	e853 3f00 	ldrex	r3, [r3]
 800f238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f240:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	461a      	mov	r2, r3
 800f248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f24a:	637b      	str	r3, [r7, #52]	; 0x34
 800f24c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f252:	e841 2300 	strex	r3, r2, [r1]
 800f256:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1e6      	bne.n	800f22c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	3308      	adds	r3, #8
 800f264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	e853 3f00 	ldrex	r3, [r3]
 800f26c:	613b      	str	r3, [r7, #16]
   return(result);
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	f023 0301 	bic.w	r3, r3, #1
 800f274:	66bb      	str	r3, [r7, #104]	; 0x68
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	3308      	adds	r3, #8
 800f27c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f27e:	623a      	str	r2, [r7, #32]
 800f280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f282:	69f9      	ldr	r1, [r7, #28]
 800f284:	6a3a      	ldr	r2, [r7, #32]
 800f286:	e841 2300 	strex	r3, r2, [r1]
 800f28a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1e5      	bne.n	800f25e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2220      	movs	r2, #32
 800f296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2220      	movs	r2, #32
 800f29c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2220      	movs	r2, #32
 800f2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800f2b0:	2303      	movs	r3, #3
 800f2b2:	e010      	b.n	800f2d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	69da      	ldr	r2, [r3, #28]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	4013      	ands	r3, r2
 800f2be:	68ba      	ldr	r2, [r7, #8]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	bf0c      	ite	eq
 800f2c4:	2301      	moveq	r3, #1
 800f2c6:	2300      	movne	r3, #0
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	79fb      	ldrb	r3, [r7, #7]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	f43f af48 	beq.w	800f164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3770      	adds	r7, #112	; 0x70
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f2de:	b480      	push	{r7}
 800f2e0:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f2e2:	bf00      	nop
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f2ec:	b480      	push	{r7}
 800f2ee:	b085      	sub	sp, #20
 800f2f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2f2:	f3ef 8305 	mrs	r3, IPSR
 800f2f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10f      	bne.n	800f31e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800f302:	607b      	str	r3, [r7, #4]
  return(result);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d105      	bne.n	800f316 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f30a:	f3ef 8311 	mrs	r3, BASEPRI
 800f30e:	603b      	str	r3, [r7, #0]
  return(result);
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d007      	beq.n	800f326 <osKernelInitialize+0x3a>
 800f316:	4b0e      	ldr	r3, [pc, #56]	; (800f350 <osKernelInitialize+0x64>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d103      	bne.n	800f326 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f31e:	f06f 0305 	mvn.w	r3, #5
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	e00c      	b.n	800f340 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f326:	4b0a      	ldr	r3, [pc, #40]	; (800f350 <osKernelInitialize+0x64>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d105      	bne.n	800f33a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f32e:	4b08      	ldr	r3, [pc, #32]	; (800f350 <osKernelInitialize+0x64>)
 800f330:	2201      	movs	r2, #1
 800f332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f334:	2300      	movs	r3, #0
 800f336:	60fb      	str	r3, [r7, #12]
 800f338:	e002      	b.n	800f340 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f33a:	f04f 33ff 	mov.w	r3, #4294967295
 800f33e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f340:	68fb      	ldr	r3, [r7, #12]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3714      	adds	r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	20003720 	.word	0x20003720

0800f354 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f35a:	f3ef 8305 	mrs	r3, IPSR
 800f35e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f360:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f362:	2b00      	cmp	r3, #0
 800f364:	d10f      	bne.n	800f386 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f366:	f3ef 8310 	mrs	r3, PRIMASK
 800f36a:	607b      	str	r3, [r7, #4]
  return(result);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d105      	bne.n	800f37e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f372:	f3ef 8311 	mrs	r3, BASEPRI
 800f376:	603b      	str	r3, [r7, #0]
  return(result);
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d007      	beq.n	800f38e <osKernelStart+0x3a>
 800f37e:	4b0f      	ldr	r3, [pc, #60]	; (800f3bc <osKernelStart+0x68>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2b02      	cmp	r3, #2
 800f384:	d103      	bne.n	800f38e <osKernelStart+0x3a>
    stat = osErrorISR;
 800f386:	f06f 0305 	mvn.w	r3, #5
 800f38a:	60fb      	str	r3, [r7, #12]
 800f38c:	e010      	b.n	800f3b0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f38e:	4b0b      	ldr	r3, [pc, #44]	; (800f3bc <osKernelStart+0x68>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b01      	cmp	r3, #1
 800f394:	d109      	bne.n	800f3aa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f396:	f7ff ffa2 	bl	800f2de <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f39a:	4b08      	ldr	r3, [pc, #32]	; (800f3bc <osKernelStart+0x68>)
 800f39c:	2202      	movs	r2, #2
 800f39e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f3a0:	f001 f8e6 	bl	8010570 <vTaskStartScheduler>
      stat = osOK;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	60fb      	str	r3, [r7, #12]
 800f3a8:	e002      	b.n	800f3b0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20003720 	.word	0x20003720

0800f3c0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3c6:	f3ef 8305 	mrs	r3, IPSR
 800f3ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3cc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10f      	bne.n	800f3f2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800f3d6:	607b      	str	r3, [r7, #4]
  return(result);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d105      	bne.n	800f3ea <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f3de:	f3ef 8311 	mrs	r3, BASEPRI
 800f3e2:	603b      	str	r3, [r7, #0]
  return(result);
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d007      	beq.n	800f3fa <osKernelGetTickCount+0x3a>
 800f3ea:	4b08      	ldr	r3, [pc, #32]	; (800f40c <osKernelGetTickCount+0x4c>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2b02      	cmp	r3, #2
 800f3f0:	d103      	bne.n	800f3fa <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800f3f2:	f001 f9e5 	bl	80107c0 <xTaskGetTickCountFromISR>
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	e002      	b.n	800f400 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800f3fa:	f001 f9d1 	bl	80107a0 <xTaskGetTickCount>
 800f3fe:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800f400:	68fb      	ldr	r3, [r7, #12]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	20003720 	.word	0x20003720

0800f410 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800f410:	b480      	push	{r7}
 800f412:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800f414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800f418:	4618      	mov	r0, r3
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
	...

0800f424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f424:	b580      	push	{r7, lr}
 800f426:	b090      	sub	sp, #64	; 0x40
 800f428:	af04      	add	r7, sp, #16
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f430:	2300      	movs	r3, #0
 800f432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f434:	f3ef 8305 	mrs	r3, IPSR
 800f438:	61fb      	str	r3, [r7, #28]
  return(result);
 800f43a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 808f 	bne.w	800f560 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f442:	f3ef 8310 	mrs	r3, PRIMASK
 800f446:	61bb      	str	r3, [r7, #24]
  return(result);
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d105      	bne.n	800f45a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f44e:	f3ef 8311 	mrs	r3, BASEPRI
 800f452:	617b      	str	r3, [r7, #20]
  return(result);
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <osThreadNew+0x3e>
 800f45a:	4b44      	ldr	r3, [pc, #272]	; (800f56c <osThreadNew+0x148>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b02      	cmp	r3, #2
 800f460:	d07e      	beq.n	800f560 <osThreadNew+0x13c>
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d07b      	beq.n	800f560 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f468:	2380      	movs	r3, #128	; 0x80
 800f46a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f46c:	2318      	movs	r3, #24
 800f46e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f470:	2300      	movs	r3, #0
 800f472:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f474:	f04f 33ff 	mov.w	r3, #4294967295
 800f478:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d045      	beq.n	800f50c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d002      	beq.n	800f48e <osThreadNew+0x6a>
        name = attr->name;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d002      	beq.n	800f49c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	699b      	ldr	r3, [r3, #24]
 800f49a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d008      	beq.n	800f4b4 <osThreadNew+0x90>
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a4:	2b38      	cmp	r3, #56	; 0x38
 800f4a6:	d805      	bhi.n	800f4b4 <osThreadNew+0x90>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	f003 0301 	and.w	r3, r3, #1
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <osThreadNew+0x94>
        return (NULL);
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	e054      	b.n	800f562 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	695b      	ldr	r3, [r3, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d003      	beq.n	800f4c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	695b      	ldr	r3, [r3, #20]
 800f4c4:	089b      	lsrs	r3, r3, #2
 800f4c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00e      	beq.n	800f4ee <osThreadNew+0xca>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	2b5b      	cmp	r3, #91	; 0x5b
 800f4d6:	d90a      	bls.n	800f4ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d006      	beq.n	800f4ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	695b      	ldr	r3, [r3, #20]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d002      	beq.n	800f4ee <osThreadNew+0xca>
        mem = 1;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	623b      	str	r3, [r7, #32]
 800f4ec:	e010      	b.n	800f510 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10c      	bne.n	800f510 <osThreadNew+0xec>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d108      	bne.n	800f510 <osThreadNew+0xec>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	691b      	ldr	r3, [r3, #16]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d104      	bne.n	800f510 <osThreadNew+0xec>
          mem = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	623b      	str	r3, [r7, #32]
 800f50a:	e001      	b.n	800f510 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f50c:	2300      	movs	r3, #0
 800f50e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	2b01      	cmp	r3, #1
 800f514:	d110      	bne.n	800f538 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f51e:	9202      	str	r2, [sp, #8]
 800f520:	9301      	str	r3, [sp, #4]
 800f522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f52a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f000 fe3f 	bl	80101b0 <xTaskCreateStatic>
 800f532:	4603      	mov	r3, r0
 800f534:	613b      	str	r3, [r7, #16]
 800f536:	e013      	b.n	800f560 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f538:	6a3b      	ldr	r3, [r7, #32]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d110      	bne.n	800f560 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f540:	b29a      	uxth	r2, r3
 800f542:	f107 0310 	add.w	r3, r7, #16
 800f546:	9301      	str	r3, [sp, #4]
 800f548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 fe90 	bl	8010276 <xTaskCreate>
 800f556:	4603      	mov	r3, r0
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d001      	beq.n	800f560 <osThreadNew+0x13c>
          hTask = NULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f560:	693b      	ldr	r3, [r7, #16]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3730      	adds	r7, #48	; 0x30
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	20003720 	.word	0x20003720

0800f570 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f578:	f3ef 8305 	mrs	r3, IPSR
 800f57c:	613b      	str	r3, [r7, #16]
  return(result);
 800f57e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f580:	2b00      	cmp	r3, #0
 800f582:	d10f      	bne.n	800f5a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f584:	f3ef 8310 	mrs	r3, PRIMASK
 800f588:	60fb      	str	r3, [r7, #12]
  return(result);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d105      	bne.n	800f59c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f590:	f3ef 8311 	mrs	r3, BASEPRI
 800f594:	60bb      	str	r3, [r7, #8]
  return(result);
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d007      	beq.n	800f5ac <osDelay+0x3c>
 800f59c:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <osDelay+0x58>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2b02      	cmp	r3, #2
 800f5a2:	d103      	bne.n	800f5ac <osDelay+0x3c>
    stat = osErrorISR;
 800f5a4:	f06f 0305 	mvn.w	r3, #5
 800f5a8:	617b      	str	r3, [r7, #20]
 800f5aa:	e007      	b.n	800f5bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d002      	beq.n	800f5bc <osDelay+0x4c>
      vTaskDelay(ticks);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 ffa4 	bl	8010504 <vTaskDelay>
    }
  }

  return (stat);
 800f5bc:	697b      	ldr	r3, [r7, #20]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20003720 	.word	0x20003720

0800f5cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	4a07      	ldr	r2, [pc, #28]	; (800f5f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f5dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	4a06      	ldr	r2, [pc, #24]	; (800f5fc <vApplicationGetIdleTaskMemory+0x30>)
 800f5e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2280      	movs	r2, #128	; 0x80
 800f5e8:	601a      	str	r2, [r3, #0]
}
 800f5ea:	bf00      	nop
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	20003724 	.word	0x20003724
 800f5fc:	20003780 	.word	0x20003780

0800f600 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	4a07      	ldr	r2, [pc, #28]	; (800f62c <vApplicationGetTimerTaskMemory+0x2c>)
 800f610:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	4a06      	ldr	r2, [pc, #24]	; (800f630 <vApplicationGetTimerTaskMemory+0x30>)
 800f616:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f61e:	601a      	str	r2, [r3, #0]
}
 800f620:	bf00      	nop
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	20003980 	.word	0x20003980
 800f630:	200039dc 	.word	0x200039dc

0800f634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f103 0208 	add.w	r2, r3, #8
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f04f 32ff 	mov.w	r2, #4294967295
 800f64c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f103 0208 	add.w	r2, r3, #8
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f103 0208 	add.w	r2, r3, #8
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f682:	bf00      	nop
 800f684:	370c      	adds	r7, #12
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f68e:	b480      	push	{r7}
 800f690:	b085      	sub	sp, #20
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	689a      	ldr	r2, [r3, #8]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	683a      	ldr	r2, [r7, #0]
 800f6b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	683a      	ldr	r2, [r7, #0]
 800f6b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	1c5a      	adds	r2, r3, #1
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	601a      	str	r2, [r3, #0]
}
 800f6ca:	bf00      	nop
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	b085      	sub	sp, #20
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ec:	d103      	bne.n	800f6f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	e00c      	b.n	800f710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	3308      	adds	r3, #8
 800f6fa:	60fb      	str	r3, [r7, #12]
 800f6fc:	e002      	b.n	800f704 <vListInsert+0x2e>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d2f6      	bcs.n	800f6fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	685a      	ldr	r2, [r3, #4]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	683a      	ldr	r2, [r7, #0]
 800f71e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	1c5a      	adds	r2, r3, #1
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	601a      	str	r2, [r3, #0]
}
 800f73c:	bf00      	nop
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	691b      	ldr	r3, [r3, #16]
 800f754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	6892      	ldr	r2, [r2, #8]
 800f75e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	6852      	ldr	r2, [r2, #4]
 800f768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	429a      	cmp	r2, r3
 800f772:	d103      	bne.n	800f77c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	689a      	ldr	r2, [r3, #8]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	1e5a      	subs	r2, r3, #1
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
}
 800f790:	4618      	mov	r0, r3
 800f792:	3714      	adds	r7, #20
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d10c      	bne.n	800f7ca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b4:	b672      	cpsid	i
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	b662      	cpsie	i
 800f7c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f7c6:	bf00      	nop
 800f7c8:	e7fe      	b.n	800f7c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f7ca:	f002 f88f 	bl	80118ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7d6:	68f9      	ldr	r1, [r7, #12]
 800f7d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f7da:	fb01 f303 	mul.w	r3, r1, r3
 800f7de:	441a      	add	r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	68f9      	ldr	r1, [r7, #12]
 800f7fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f800:	fb01 f303 	mul.w	r3, r1, r3
 800f804:	441a      	add	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	22ff      	movs	r2, #255	; 0xff
 800f80e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	22ff      	movs	r2, #255	; 0xff
 800f816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d114      	bne.n	800f84a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01a      	beq.n	800f85e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3310      	adds	r3, #16
 800f82c:	4618      	mov	r0, r3
 800f82e:	f001 f949 	bl	8010ac4 <xTaskRemoveFromEventList>
 800f832:	4603      	mov	r3, r0
 800f834:	2b00      	cmp	r3, #0
 800f836:	d012      	beq.n	800f85e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f838:	4b0c      	ldr	r3, [pc, #48]	; (800f86c <xQueueGenericReset+0xd0>)
 800f83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f83e:	601a      	str	r2, [r3, #0]
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	e009      	b.n	800f85e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	3310      	adds	r3, #16
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff fef0 	bl	800f634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	3324      	adds	r3, #36	; 0x24
 800f858:	4618      	mov	r0, r3
 800f85a:	f7ff feeb 	bl	800f634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f85e:	f002 f879 	bl	8011954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f862:	2301      	movs	r3, #1
}
 800f864:	4618      	mov	r0, r3
 800f866:	3710      	adds	r7, #16
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	e000ed04 	.word	0xe000ed04

0800f870 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f870:	b580      	push	{r7, lr}
 800f872:	b08e      	sub	sp, #56	; 0x38
 800f874:	af02      	add	r7, sp, #8
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
 800f87c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10c      	bne.n	800f89e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f888:	b672      	cpsid	i
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	b662      	cpsie	i
 800f898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f89a:	bf00      	nop
 800f89c:	e7fe      	b.n	800f89c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d10c      	bne.n	800f8be <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	b672      	cpsid	i
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	b662      	cpsie	i
 800f8b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f8ba:	bf00      	nop
 800f8bc:	e7fe      	b.n	800f8bc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <xQueueGenericCreateStatic+0x5a>
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <xQueueGenericCreateStatic+0x5e>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e000      	b.n	800f8d0 <xQueueGenericCreateStatic+0x60>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10c      	bne.n	800f8ee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d8:	b672      	cpsid	i
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	b662      	cpsie	i
 800f8e8:	623b      	str	r3, [r7, #32]
}
 800f8ea:	bf00      	nop
 800f8ec:	e7fe      	b.n	800f8ec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d102      	bne.n	800f8fa <xQueueGenericCreateStatic+0x8a>
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <xQueueGenericCreateStatic+0x8e>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e000      	b.n	800f900 <xQueueGenericCreateStatic+0x90>
 800f8fe:	2300      	movs	r3, #0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d10c      	bne.n	800f91e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f908:	b672      	cpsid	i
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	b662      	cpsie	i
 800f918:	61fb      	str	r3, [r7, #28]
}
 800f91a:	bf00      	nop
 800f91c:	e7fe      	b.n	800f91c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f91e:	2350      	movs	r3, #80	; 0x50
 800f920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b50      	cmp	r3, #80	; 0x50
 800f926:	d00c      	beq.n	800f942 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92c:	b672      	cpsid	i
 800f92e:	f383 8811 	msr	BASEPRI, r3
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	f3bf 8f4f 	dsb	sy
 800f93a:	b662      	cpsie	i
 800f93c:	61bb      	str	r3, [r7, #24]
}
 800f93e:	bf00      	nop
 800f940:	e7fe      	b.n	800f940 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f942:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d00d      	beq.n	800f96a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f950:	2201      	movs	r2, #1
 800f952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f956:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	4613      	mov	r3, r2
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	68b9      	ldr	r1, [r7, #8]
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f000 f805 	bl	800f974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3730      	adds	r7, #48	; 0x30
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d103      	bne.n	800f990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	69ba      	ldr	r2, [r7, #24]
 800f98c:	601a      	str	r2, [r3, #0]
 800f98e:	e002      	b.n	800f996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f99c:	69bb      	ldr	r3, [r7, #24]
 800f99e:	68ba      	ldr	r2, [r7, #8]
 800f9a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9a2:	2101      	movs	r1, #1
 800f9a4:	69b8      	ldr	r0, [r7, #24]
 800f9a6:	f7ff fef9 	bl	800f79c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	78fa      	ldrb	r2, [r7, #3]
 800f9ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
	...

0800f9bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08e      	sub	sp, #56	; 0x38
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
 800f9c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d10c      	bne.n	800f9f2 <xQueueGenericSend+0x36>
	__asm volatile
 800f9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9dc:	b672      	cpsid	i
 800f9de:	f383 8811 	msr	BASEPRI, r3
 800f9e2:	f3bf 8f6f 	isb	sy
 800f9e6:	f3bf 8f4f 	dsb	sy
 800f9ea:	b662      	cpsie	i
 800f9ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f9ee:	bf00      	nop
 800f9f0:	e7fe      	b.n	800f9f0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d103      	bne.n	800fa00 <xQueueGenericSend+0x44>
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <xQueueGenericSend+0x48>
 800fa00:	2301      	movs	r3, #1
 800fa02:	e000      	b.n	800fa06 <xQueueGenericSend+0x4a>
 800fa04:	2300      	movs	r3, #0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d10c      	bne.n	800fa24 <xQueueGenericSend+0x68>
	__asm volatile
 800fa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0e:	b672      	cpsid	i
 800fa10:	f383 8811 	msr	BASEPRI, r3
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	b662      	cpsie	i
 800fa1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa20:	bf00      	nop
 800fa22:	e7fe      	b.n	800fa22 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	2b02      	cmp	r3, #2
 800fa28:	d103      	bne.n	800fa32 <xQueueGenericSend+0x76>
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d101      	bne.n	800fa36 <xQueueGenericSend+0x7a>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e000      	b.n	800fa38 <xQueueGenericSend+0x7c>
 800fa36:	2300      	movs	r3, #0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10c      	bne.n	800fa56 <xQueueGenericSend+0x9a>
	__asm volatile
 800fa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa40:	b672      	cpsid	i
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	b662      	cpsie	i
 800fa50:	623b      	str	r3, [r7, #32]
}
 800fa52:	bf00      	nop
 800fa54:	e7fe      	b.n	800fa54 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa56:	f001 f9fb 	bl	8010e50 <xTaskGetSchedulerState>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d102      	bne.n	800fa66 <xQueueGenericSend+0xaa>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <xQueueGenericSend+0xae>
 800fa66:	2301      	movs	r3, #1
 800fa68:	e000      	b.n	800fa6c <xQueueGenericSend+0xb0>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10c      	bne.n	800fa8a <xQueueGenericSend+0xce>
	__asm volatile
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	b672      	cpsid	i
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	b662      	cpsie	i
 800fa84:	61fb      	str	r3, [r7, #28]
}
 800fa86:	bf00      	nop
 800fa88:	e7fe      	b.n	800fa88 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa8a:	f001 ff2f 	bl	80118ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d302      	bcc.n	800faa0 <xQueueGenericSend+0xe4>
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d129      	bne.n	800faf4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	68b9      	ldr	r1, [r7, #8]
 800faa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800faa6:	f000 fa15 	bl	800fed4 <prvCopyDataToQueue>
 800faaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800faac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d010      	beq.n	800fad6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab6:	3324      	adds	r3, #36	; 0x24
 800fab8:	4618      	mov	r0, r3
 800faba:	f001 f803 	bl	8010ac4 <xTaskRemoveFromEventList>
 800fabe:	4603      	mov	r3, r0
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d013      	beq.n	800faec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fac4:	4b3f      	ldr	r3, [pc, #252]	; (800fbc4 <xQueueGenericSend+0x208>)
 800fac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faca:	601a      	str	r2, [r3, #0]
 800facc:	f3bf 8f4f 	dsb	sy
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	e00a      	b.n	800faec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d007      	beq.n	800faec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fadc:	4b39      	ldr	r3, [pc, #228]	; (800fbc4 <xQueueGenericSend+0x208>)
 800fade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fae2:	601a      	str	r2, [r3, #0]
 800fae4:	f3bf 8f4f 	dsb	sy
 800fae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800faec:	f001 ff32 	bl	8011954 <vPortExitCritical>
				return pdPASS;
 800faf0:	2301      	movs	r3, #1
 800faf2:	e063      	b.n	800fbbc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d103      	bne.n	800fb02 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fafa:	f001 ff2b 	bl	8011954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	e05c      	b.n	800fbbc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d106      	bne.n	800fb16 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb08:	f107 0314 	add.w	r3, r7, #20
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f001 f83f 	bl	8010b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb12:	2301      	movs	r3, #1
 800fb14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb16:	f001 ff1d 	bl	8011954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb1a:	f000 fd93 	bl	8010644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb1e:	f001 fee5 	bl	80118ec <vPortEnterCritical>
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb28:	b25b      	sxtb	r3, r3
 800fb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb2e:	d103      	bne.n	800fb38 <xQueueGenericSend+0x17c>
 800fb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb32:	2200      	movs	r2, #0
 800fb34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb3e:	b25b      	sxtb	r3, r3
 800fb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb44:	d103      	bne.n	800fb4e <xQueueGenericSend+0x192>
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb4e:	f001 ff01 	bl	8011954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb52:	1d3a      	adds	r2, r7, #4
 800fb54:	f107 0314 	add.w	r3, r7, #20
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f001 f82e 	bl	8010bbc <xTaskCheckForTimeOut>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d124      	bne.n	800fbb0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fb66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb68:	f000 faac 	bl	80100c4 <prvIsQueueFull>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d018      	beq.n	800fba4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	3310      	adds	r3, #16
 800fb76:	687a      	ldr	r2, [r7, #4]
 800fb78:	4611      	mov	r1, r2
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 ff4e 	bl	8010a1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fb80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb82:	f000 fa37 	bl	800fff4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fb86:	f000 fd6b 	bl	8010660 <xTaskResumeAll>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f47f af7c 	bne.w	800fa8a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fb92:	4b0c      	ldr	r3, [pc, #48]	; (800fbc4 <xQueueGenericSend+0x208>)
 800fb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	e772      	b.n	800fa8a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fba6:	f000 fa25 	bl	800fff4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbaa:	f000 fd59 	bl	8010660 <xTaskResumeAll>
 800fbae:	e76c      	b.n	800fa8a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fbb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbb2:	f000 fa1f 	bl	800fff4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbb6:	f000 fd53 	bl	8010660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fbba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3738      	adds	r7, #56	; 0x38
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	e000ed04 	.word	0xe000ed04

0800fbc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b08e      	sub	sp, #56	; 0x38
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d10c      	bne.n	800fbfa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	b672      	cpsid	i
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	b662      	cpsie	i
 800fbf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fbf6:	bf00      	nop
 800fbf8:	e7fe      	b.n	800fbf8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d103      	bne.n	800fc08 <xQueueGenericSendFromISR+0x40>
 800fc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d101      	bne.n	800fc0c <xQueueGenericSendFromISR+0x44>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	e000      	b.n	800fc0e <xQueueGenericSendFromISR+0x46>
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d10c      	bne.n	800fc2c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc16:	b672      	cpsid	i
 800fc18:	f383 8811 	msr	BASEPRI, r3
 800fc1c:	f3bf 8f6f 	isb	sy
 800fc20:	f3bf 8f4f 	dsb	sy
 800fc24:	b662      	cpsie	i
 800fc26:	623b      	str	r3, [r7, #32]
}
 800fc28:	bf00      	nop
 800fc2a:	e7fe      	b.n	800fc2a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d103      	bne.n	800fc3a <xQueueGenericSendFromISR+0x72>
 800fc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d101      	bne.n	800fc3e <xQueueGenericSendFromISR+0x76>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e000      	b.n	800fc40 <xQueueGenericSendFromISR+0x78>
 800fc3e:	2300      	movs	r3, #0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d10c      	bne.n	800fc5e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc48:	b672      	cpsid	i
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	b662      	cpsie	i
 800fc58:	61fb      	str	r3, [r7, #28]
}
 800fc5a:	bf00      	nop
 800fc5c:	e7fe      	b.n	800fc5c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc5e:	f001 ff2d 	bl	8011abc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fc62:	f3ef 8211 	mrs	r2, BASEPRI
 800fc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6a:	b672      	cpsid	i
 800fc6c:	f383 8811 	msr	BASEPRI, r3
 800fc70:	f3bf 8f6f 	isb	sy
 800fc74:	f3bf 8f4f 	dsb	sy
 800fc78:	b662      	cpsie	i
 800fc7a:	61ba      	str	r2, [r7, #24]
 800fc7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fc7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d302      	bcc.n	800fc94 <xQueueGenericSendFromISR+0xcc>
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	d12c      	bne.n	800fcee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	68b9      	ldr	r1, [r7, #8]
 800fca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fca4:	f000 f916 	bl	800fed4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fca8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb0:	d112      	bne.n	800fcd8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d016      	beq.n	800fce8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	3324      	adds	r3, #36	; 0x24
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 ff00 	bl	8010ac4 <xTaskRemoveFromEventList>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00e      	beq.n	800fce8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00b      	beq.n	800fce8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	601a      	str	r2, [r3, #0]
 800fcd6:	e007      	b.n	800fce8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fcd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fcdc:	3301      	adds	r3, #1
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	b25a      	sxtb	r2, r3
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fce8:	2301      	movs	r3, #1
 800fcea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fcec:	e001      	b.n	800fcf2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	637b      	str	r3, [r7, #52]	; 0x34
 800fcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fcfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3738      	adds	r7, #56	; 0x38
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08c      	sub	sp, #48	; 0x30
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd14:	2300      	movs	r3, #0
 800fd16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d10c      	bne.n	800fd3c <xQueueReceive+0x34>
	__asm volatile
 800fd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd26:	b672      	cpsid	i
 800fd28:	f383 8811 	msr	BASEPRI, r3
 800fd2c:	f3bf 8f6f 	isb	sy
 800fd30:	f3bf 8f4f 	dsb	sy
 800fd34:	b662      	cpsie	i
 800fd36:	623b      	str	r3, [r7, #32]
}
 800fd38:	bf00      	nop
 800fd3a:	e7fe      	b.n	800fd3a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d103      	bne.n	800fd4a <xQueueReceive+0x42>
 800fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d101      	bne.n	800fd4e <xQueueReceive+0x46>
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e000      	b.n	800fd50 <xQueueReceive+0x48>
 800fd4e:	2300      	movs	r3, #0
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10c      	bne.n	800fd6e <xQueueReceive+0x66>
	__asm volatile
 800fd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd58:	b672      	cpsid	i
 800fd5a:	f383 8811 	msr	BASEPRI, r3
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f3bf 8f4f 	dsb	sy
 800fd66:	b662      	cpsie	i
 800fd68:	61fb      	str	r3, [r7, #28]
}
 800fd6a:	bf00      	nop
 800fd6c:	e7fe      	b.n	800fd6c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd6e:	f001 f86f 	bl	8010e50 <xTaskGetSchedulerState>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d102      	bne.n	800fd7e <xQueueReceive+0x76>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <xQueueReceive+0x7a>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e000      	b.n	800fd84 <xQueueReceive+0x7c>
 800fd82:	2300      	movs	r3, #0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10c      	bne.n	800fda2 <xQueueReceive+0x9a>
	__asm volatile
 800fd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8c:	b672      	cpsid	i
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	b662      	cpsie	i
 800fd9c:	61bb      	str	r3, [r7, #24]
}
 800fd9e:	bf00      	nop
 800fda0:	e7fe      	b.n	800fda0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fda2:	f001 fda3 	bl	80118ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d01f      	beq.n	800fdf2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fdb2:	68b9      	ldr	r1, [r7, #8]
 800fdb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdb6:	f000 f8f7 	bl	800ffa8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	1e5a      	subs	r2, r3, #1
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00f      	beq.n	800fdea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdcc:	3310      	adds	r3, #16
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f000 fe78 	bl	8010ac4 <xTaskRemoveFromEventList>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d007      	beq.n	800fdea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fdda:	4b3d      	ldr	r3, [pc, #244]	; (800fed0 <xQueueReceive+0x1c8>)
 800fddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fdea:	f001 fdb3 	bl	8011954 <vPortExitCritical>
				return pdPASS;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e069      	b.n	800fec6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d103      	bne.n	800fe00 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fdf8:	f001 fdac 	bl	8011954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	e062      	b.n	800fec6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d106      	bne.n	800fe14 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe06:	f107 0310 	add.w	r3, r7, #16
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 fec0 	bl	8010b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe10:	2301      	movs	r3, #1
 800fe12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe14:	f001 fd9e 	bl	8011954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe18:	f000 fc14 	bl	8010644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe1c:	f001 fd66 	bl	80118ec <vPortEnterCritical>
 800fe20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe26:	b25b      	sxtb	r3, r3
 800fe28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe2c:	d103      	bne.n	800fe36 <xQueueReceive+0x12e>
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe3c:	b25b      	sxtb	r3, r3
 800fe3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe42:	d103      	bne.n	800fe4c <xQueueReceive+0x144>
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	2200      	movs	r2, #0
 800fe48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe4c:	f001 fd82 	bl	8011954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe50:	1d3a      	adds	r2, r7, #4
 800fe52:	f107 0310 	add.w	r3, r7, #16
 800fe56:	4611      	mov	r1, r2
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f000 feaf 	bl	8010bbc <xTaskCheckForTimeOut>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d123      	bne.n	800feac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe66:	f000 f917 	bl	8010098 <prvIsQueueEmpty>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d017      	beq.n	800fea0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	3324      	adds	r3, #36	; 0x24
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	4611      	mov	r1, r2
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f000 fdcf 	bl	8010a1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe80:	f000 f8b8 	bl	800fff4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe84:	f000 fbec 	bl	8010660 <xTaskResumeAll>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d189      	bne.n	800fda2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800fe8e:	4b10      	ldr	r3, [pc, #64]	; (800fed0 <xQueueReceive+0x1c8>)
 800fe90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe94:	601a      	str	r2, [r3, #0]
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	e780      	b.n	800fda2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea2:	f000 f8a7 	bl	800fff4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fea6:	f000 fbdb 	bl	8010660 <xTaskResumeAll>
 800feaa:	e77a      	b.n	800fda2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800feac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feae:	f000 f8a1 	bl	800fff4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800feb2:	f000 fbd5 	bl	8010660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800feb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feb8:	f000 f8ee 	bl	8010098 <prvIsQueueEmpty>
 800febc:	4603      	mov	r3, r0
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f43f af6f 	beq.w	800fda2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fec4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3730      	adds	r7, #48	; 0x30
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	e000ed04 	.word	0xe000ed04

0800fed4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fee0:	2300      	movs	r3, #0
 800fee2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10d      	bne.n	800ff0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d14d      	bne.n	800ff96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	689b      	ldr	r3, [r3, #8]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f000 ffc4 	bl	8010e8c <xTaskPriorityDisinherit>
 800ff04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	609a      	str	r2, [r3, #8]
 800ff0c:	e043      	b.n	800ff96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d119      	bne.n	800ff48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6858      	ldr	r0, [r3, #4]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	68b9      	ldr	r1, [r7, #8]
 800ff20:	f002 fbbd 	bl	801269e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2c:	441a      	add	r2, r3
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	685a      	ldr	r2, [r3, #4]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d32b      	bcc.n	800ff96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	605a      	str	r2, [r3, #4]
 800ff46:	e026      	b.n	800ff96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68d8      	ldr	r0, [r3, #12]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff50:	461a      	mov	r2, r3
 800ff52:	68b9      	ldr	r1, [r7, #8]
 800ff54:	f002 fba3 	bl	801269e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	68da      	ldr	r2, [r3, #12]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff60:	425b      	negs	r3, r3
 800ff62:	441a      	add	r2, r3
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	68da      	ldr	r2, [r3, #12]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d207      	bcs.n	800ff84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	689a      	ldr	r2, [r3, #8]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff7c:	425b      	negs	r3, r3
 800ff7e:	441a      	add	r2, r3
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	d105      	bne.n	800ff96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d002      	beq.n	800ff96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	3b01      	subs	r3, #1
 800ff94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	1c5a      	adds	r2, r3, #1
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ff9e:	697b      	ldr	r3, [r7, #20]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d018      	beq.n	800ffec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	68da      	ldr	r2, [r3, #12]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc2:	441a      	add	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	68da      	ldr	r2, [r3, #12]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d303      	bcc.n	800ffdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681a      	ldr	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	68d9      	ldr	r1, [r3, #12]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	6838      	ldr	r0, [r7, #0]
 800ffe8:	f002 fb59 	bl	801269e <memcpy>
	}
}
 800ffec:	bf00      	nop
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fffc:	f001 fc76 	bl	80118ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010006:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010008:	e011      	b.n	801002e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000e:	2b00      	cmp	r3, #0
 8010010:	d012      	beq.n	8010038 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	3324      	adds	r3, #36	; 0x24
 8010016:	4618      	mov	r0, r3
 8010018:	f000 fd54 	bl	8010ac4 <xTaskRemoveFromEventList>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d001      	beq.n	8010026 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010022:	f000 fe31 	bl	8010c88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010026:	7bfb      	ldrb	r3, [r7, #15]
 8010028:	3b01      	subs	r3, #1
 801002a:	b2db      	uxtb	r3, r3
 801002c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801002e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010032:	2b00      	cmp	r3, #0
 8010034:	dce9      	bgt.n	801000a <prvUnlockQueue+0x16>
 8010036:	e000      	b.n	801003a <prvUnlockQueue+0x46>
					break;
 8010038:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	22ff      	movs	r2, #255	; 0xff
 801003e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010042:	f001 fc87 	bl	8011954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010046:	f001 fc51 	bl	80118ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010050:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010052:	e011      	b.n	8010078 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d012      	beq.n	8010082 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3310      	adds	r3, #16
 8010060:	4618      	mov	r0, r3
 8010062:	f000 fd2f 	bl	8010ac4 <xTaskRemoveFromEventList>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801006c:	f000 fe0c 	bl	8010c88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010070:	7bbb      	ldrb	r3, [r7, #14]
 8010072:	3b01      	subs	r3, #1
 8010074:	b2db      	uxtb	r3, r3
 8010076:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801007c:	2b00      	cmp	r3, #0
 801007e:	dce9      	bgt.n	8010054 <prvUnlockQueue+0x60>
 8010080:	e000      	b.n	8010084 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010082:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	22ff      	movs	r2, #255	; 0xff
 8010088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801008c:	f001 fc62 	bl	8011954 <vPortExitCritical>
}
 8010090:	bf00      	nop
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100a0:	f001 fc24 	bl	80118ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d102      	bne.n	80100b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100ac:	2301      	movs	r3, #1
 80100ae:	60fb      	str	r3, [r7, #12]
 80100b0:	e001      	b.n	80100b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100b2:	2300      	movs	r3, #0
 80100b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100b6:	f001 fc4d 	bl	8011954 <vPortExitCritical>

	return xReturn;
 80100ba:	68fb      	ldr	r3, [r7, #12]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100cc:	f001 fc0e 	bl	80118ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100d8:	429a      	cmp	r2, r3
 80100da:	d102      	bne.n	80100e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80100dc:	2301      	movs	r3, #1
 80100de:	60fb      	str	r3, [r7, #12]
 80100e0:	e001      	b.n	80100e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80100e2:	2300      	movs	r3, #0
 80100e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100e6:	f001 fc35 	bl	8011954 <vPortExitCritical>

	return xReturn;
 80100ea:	68fb      	ldr	r3, [r7, #12]
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3710      	adds	r7, #16
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100fe:	2300      	movs	r3, #0
 8010100:	60fb      	str	r3, [r7, #12]
 8010102:	e014      	b.n	801012e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010104:	4a0f      	ldr	r2, [pc, #60]	; (8010144 <vQueueAddToRegistry+0x50>)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10b      	bne.n	8010128 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010110:	490c      	ldr	r1, [pc, #48]	; (8010144 <vQueueAddToRegistry+0x50>)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	683a      	ldr	r2, [r7, #0]
 8010116:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801011a:	4a0a      	ldr	r2, [pc, #40]	; (8010144 <vQueueAddToRegistry+0x50>)
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	00db      	lsls	r3, r3, #3
 8010120:	4413      	add	r3, r2
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010126:	e006      	b.n	8010136 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	3301      	adds	r3, #1
 801012c:	60fb      	str	r3, [r7, #12]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2b07      	cmp	r3, #7
 8010132:	d9e7      	bls.n	8010104 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	3714      	adds	r7, #20
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	20003ddc 	.word	0x20003ddc

08010148 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010148:	b580      	push	{r7, lr}
 801014a:	b086      	sub	sp, #24
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010158:	f001 fbc8 	bl	80118ec <vPortEnterCritical>
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010162:	b25b      	sxtb	r3, r3
 8010164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010168:	d103      	bne.n	8010172 <vQueueWaitForMessageRestricted+0x2a>
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2200      	movs	r2, #0
 801016e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010178:	b25b      	sxtb	r3, r3
 801017a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017e:	d103      	bne.n	8010188 <vQueueWaitForMessageRestricted+0x40>
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	2200      	movs	r2, #0
 8010184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010188:	f001 fbe4 	bl	8011954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010190:	2b00      	cmp	r3, #0
 8010192:	d106      	bne.n	80101a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	3324      	adds	r3, #36	; 0x24
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	68b9      	ldr	r1, [r7, #8]
 801019c:	4618      	mov	r0, r3
 801019e:	f000 fc63 	bl	8010a68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80101a2:	6978      	ldr	r0, [r7, #20]
 80101a4:	f7ff ff26 	bl	800fff4 <prvUnlockQueue>
	}
 80101a8:	bf00      	nop
 80101aa:	3718      	adds	r7, #24
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08e      	sub	sp, #56	; 0x38
 80101b4:	af04      	add	r7, sp, #16
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
 80101bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80101be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10c      	bne.n	80101de <xTaskCreateStatic+0x2e>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	b672      	cpsid	i
 80101ca:	f383 8811 	msr	BASEPRI, r3
 80101ce:	f3bf 8f6f 	isb	sy
 80101d2:	f3bf 8f4f 	dsb	sy
 80101d6:	b662      	cpsie	i
 80101d8:	623b      	str	r3, [r7, #32]
}
 80101da:	bf00      	nop
 80101dc:	e7fe      	b.n	80101dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80101de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10c      	bne.n	80101fe <xTaskCreateStatic+0x4e>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	b672      	cpsid	i
 80101ea:	f383 8811 	msr	BASEPRI, r3
 80101ee:	f3bf 8f6f 	isb	sy
 80101f2:	f3bf 8f4f 	dsb	sy
 80101f6:	b662      	cpsie	i
 80101f8:	61fb      	str	r3, [r7, #28]
}
 80101fa:	bf00      	nop
 80101fc:	e7fe      	b.n	80101fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80101fe:	235c      	movs	r3, #92	; 0x5c
 8010200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	2b5c      	cmp	r3, #92	; 0x5c
 8010206:	d00c      	beq.n	8010222 <xTaskCreateStatic+0x72>
	__asm volatile
 8010208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020c:	b672      	cpsid	i
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	b662      	cpsie	i
 801021c:	61bb      	str	r3, [r7, #24]
}
 801021e:	bf00      	nop
 8010220:	e7fe      	b.n	8010220 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010222:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	2b00      	cmp	r3, #0
 8010228:	d01e      	beq.n	8010268 <xTaskCreateStatic+0xb8>
 801022a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801022c:	2b00      	cmp	r3, #0
 801022e:	d01b      	beq.n	8010268 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010232:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010238:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023c:	2202      	movs	r2, #2
 801023e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010242:	2300      	movs	r3, #0
 8010244:	9303      	str	r3, [sp, #12]
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	9302      	str	r3, [sp, #8]
 801024a:	f107 0314 	add.w	r3, r7, #20
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	68b9      	ldr	r1, [r7, #8]
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f000 f850 	bl	8010300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010262:	f000 f8df 	bl	8010424 <prvAddNewTaskToReadyList>
 8010266:	e001      	b.n	801026c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010268:	2300      	movs	r3, #0
 801026a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801026c:	697b      	ldr	r3, [r7, #20]
	}
 801026e:	4618      	mov	r0, r3
 8010270:	3728      	adds	r7, #40	; 0x28
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010276:	b580      	push	{r7, lr}
 8010278:	b08c      	sub	sp, #48	; 0x30
 801027a:	af04      	add	r7, sp, #16
 801027c:	60f8      	str	r0, [r7, #12]
 801027e:	60b9      	str	r1, [r7, #8]
 8010280:	603b      	str	r3, [r7, #0]
 8010282:	4613      	mov	r3, r2
 8010284:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010286:	88fb      	ldrh	r3, [r7, #6]
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4618      	mov	r0, r3
 801028c:	f001 fc5a 	bl	8011b44 <pvPortMalloc>
 8010290:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d00e      	beq.n	80102b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010298:	205c      	movs	r0, #92	; 0x5c
 801029a:	f001 fc53 	bl	8011b44 <pvPortMalloc>
 801029e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	697a      	ldr	r2, [r7, #20]
 80102aa:	631a      	str	r2, [r3, #48]	; 0x30
 80102ac:	e005      	b.n	80102ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80102ae:	6978      	ldr	r0, [r7, #20]
 80102b0:	f001 fd12 	bl	8011cd8 <vPortFree>
 80102b4:	e001      	b.n	80102ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80102b6:	2300      	movs	r3, #0
 80102b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d017      	beq.n	80102f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80102c8:	88fa      	ldrh	r2, [r7, #6]
 80102ca:	2300      	movs	r3, #0
 80102cc:	9303      	str	r3, [sp, #12]
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	9302      	str	r3, [sp, #8]
 80102d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	68b9      	ldr	r1, [r7, #8]
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f000 f80e 	bl	8010300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80102e4:	69f8      	ldr	r0, [r7, #28]
 80102e6:	f000 f89d 	bl	8010424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80102ea:	2301      	movs	r3, #1
 80102ec:	61bb      	str	r3, [r7, #24]
 80102ee:	e002      	b.n	80102f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80102f0:	f04f 33ff 	mov.w	r3, #4294967295
 80102f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80102f6:	69bb      	ldr	r3, [r7, #24]
	}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3720      	adds	r7, #32
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b088      	sub	sp, #32
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	607a      	str	r2, [r7, #4]
 801030c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	461a      	mov	r2, r3
 8010318:	21a5      	movs	r1, #165	; 0xa5
 801031a:	f002 f8f6 	bl	801250a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010322:	6879      	ldr	r1, [r7, #4]
 8010324:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010328:	440b      	add	r3, r1
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	4413      	add	r3, r2
 801032e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	f023 0307 	bic.w	r3, r3, #7
 8010336:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	f003 0307 	and.w	r3, r3, #7
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00c      	beq.n	801035c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010346:	b672      	cpsid	i
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	b662      	cpsie	i
 8010356:	617b      	str	r3, [r7, #20]
}
 8010358:	bf00      	nop
 801035a:	e7fe      	b.n	801035a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d01f      	beq.n	80103a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010362:	2300      	movs	r3, #0
 8010364:	61fb      	str	r3, [r7, #28]
 8010366:	e012      	b.n	801038e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	4413      	add	r3, r2
 801036e:	7819      	ldrb	r1, [r3, #0]
 8010370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	4413      	add	r3, r2
 8010376:	3334      	adds	r3, #52	; 0x34
 8010378:	460a      	mov	r2, r1
 801037a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	4413      	add	r3, r2
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d006      	beq.n	8010396 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	3301      	adds	r3, #1
 801038c:	61fb      	str	r3, [r7, #28]
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	2b0f      	cmp	r3, #15
 8010392:	d9e9      	bls.n	8010368 <prvInitialiseNewTask+0x68>
 8010394:	e000      	b.n	8010398 <prvInitialiseNewTask+0x98>
			{
				break;
 8010396:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039a:	2200      	movs	r2, #0
 801039c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80103a0:	e003      	b.n	80103aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80103a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a4:	2200      	movs	r2, #0
 80103a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80103aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ac:	2b37      	cmp	r3, #55	; 0x37
 80103ae:	d901      	bls.n	80103b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80103b0:	2337      	movs	r3, #55	; 0x37
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80103b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80103ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80103c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c2:	2200      	movs	r2, #0
 80103c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80103c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c8:	3304      	adds	r3, #4
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7ff f952 	bl	800f674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80103d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d2:	3318      	adds	r3, #24
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff f94d 	bl	800f674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80103da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80103e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80103ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80103f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f2:	2200      	movs	r2, #0
 80103f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80103f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80103fe:	683a      	ldr	r2, [r7, #0]
 8010400:	68f9      	ldr	r1, [r7, #12]
 8010402:	69b8      	ldr	r0, [r7, #24]
 8010404:	f001 f964 	bl	80116d0 <pxPortInitialiseStack>
 8010408:	4602      	mov	r2, r0
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801041a:	bf00      	nop
 801041c:	3720      	adds	r7, #32
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
	...

08010424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801042c:	f001 fa5e 	bl	80118ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010430:	4b2d      	ldr	r3, [pc, #180]	; (80104e8 <prvAddNewTaskToReadyList+0xc4>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3301      	adds	r3, #1
 8010436:	4a2c      	ldr	r2, [pc, #176]	; (80104e8 <prvAddNewTaskToReadyList+0xc4>)
 8010438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801043a:	4b2c      	ldr	r3, [pc, #176]	; (80104ec <prvAddNewTaskToReadyList+0xc8>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d109      	bne.n	8010456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010442:	4a2a      	ldr	r2, [pc, #168]	; (80104ec <prvAddNewTaskToReadyList+0xc8>)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010448:	4b27      	ldr	r3, [pc, #156]	; (80104e8 <prvAddNewTaskToReadyList+0xc4>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b01      	cmp	r3, #1
 801044e:	d110      	bne.n	8010472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010450:	f000 fc3e 	bl	8010cd0 <prvInitialiseTaskLists>
 8010454:	e00d      	b.n	8010472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010456:	4b26      	ldr	r3, [pc, #152]	; (80104f0 <prvAddNewTaskToReadyList+0xcc>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d109      	bne.n	8010472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801045e:	4b23      	ldr	r3, [pc, #140]	; (80104ec <prvAddNewTaskToReadyList+0xc8>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010468:	429a      	cmp	r2, r3
 801046a:	d802      	bhi.n	8010472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801046c:	4a1f      	ldr	r2, [pc, #124]	; (80104ec <prvAddNewTaskToReadyList+0xc8>)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010472:	4b20      	ldr	r3, [pc, #128]	; (80104f4 <prvAddNewTaskToReadyList+0xd0>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	3301      	adds	r3, #1
 8010478:	4a1e      	ldr	r2, [pc, #120]	; (80104f4 <prvAddNewTaskToReadyList+0xd0>)
 801047a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801047c:	4b1d      	ldr	r3, [pc, #116]	; (80104f4 <prvAddNewTaskToReadyList+0xd0>)
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010488:	4b1b      	ldr	r3, [pc, #108]	; (80104f8 <prvAddNewTaskToReadyList+0xd4>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	429a      	cmp	r2, r3
 801048e:	d903      	bls.n	8010498 <prvAddNewTaskToReadyList+0x74>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010494:	4a18      	ldr	r2, [pc, #96]	; (80104f8 <prvAddNewTaskToReadyList+0xd4>)
 8010496:	6013      	str	r3, [r2, #0]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801049c:	4613      	mov	r3, r2
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	4413      	add	r3, r2
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	4a15      	ldr	r2, [pc, #84]	; (80104fc <prvAddNewTaskToReadyList+0xd8>)
 80104a6:	441a      	add	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	3304      	adds	r3, #4
 80104ac:	4619      	mov	r1, r3
 80104ae:	4610      	mov	r0, r2
 80104b0:	f7ff f8ed 	bl	800f68e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80104b4:	f001 fa4e 	bl	8011954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80104b8:	4b0d      	ldr	r3, [pc, #52]	; (80104f0 <prvAddNewTaskToReadyList+0xcc>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00e      	beq.n	80104de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80104c0:	4b0a      	ldr	r3, [pc, #40]	; (80104ec <prvAddNewTaskToReadyList+0xc8>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d207      	bcs.n	80104de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80104ce:	4b0c      	ldr	r3, [pc, #48]	; (8010500 <prvAddNewTaskToReadyList+0xdc>)
 80104d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d4:	601a      	str	r2, [r3, #0]
 80104d6:	f3bf 8f4f 	dsb	sy
 80104da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104de:	bf00      	nop
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	200042f0 	.word	0x200042f0
 80104ec:	20003e1c 	.word	0x20003e1c
 80104f0:	200042fc 	.word	0x200042fc
 80104f4:	2000430c 	.word	0x2000430c
 80104f8:	200042f8 	.word	0x200042f8
 80104fc:	20003e20 	.word	0x20003e20
 8010500:	e000ed04 	.word	0xe000ed04

08010504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801050c:	2300      	movs	r3, #0
 801050e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d019      	beq.n	801054a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010516:	4b14      	ldr	r3, [pc, #80]	; (8010568 <vTaskDelay+0x64>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00c      	beq.n	8010538 <vTaskDelay+0x34>
	__asm volatile
 801051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010522:	b672      	cpsid	i
 8010524:	f383 8811 	msr	BASEPRI, r3
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	b662      	cpsie	i
 8010532:	60bb      	str	r3, [r7, #8]
}
 8010534:	bf00      	nop
 8010536:	e7fe      	b.n	8010536 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010538:	f000 f884 	bl	8010644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801053c:	2100      	movs	r1, #0
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 fd16 	bl	8010f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010544:	f000 f88c 	bl	8010660 <xTaskResumeAll>
 8010548:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d107      	bne.n	8010560 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010550:	4b06      	ldr	r3, [pc, #24]	; (801056c <vTaskDelay+0x68>)
 8010552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010556:	601a      	str	r2, [r3, #0]
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010560:	bf00      	nop
 8010562:	3710      	adds	r7, #16
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	20004318 	.word	0x20004318
 801056c:	e000ed04 	.word	0xe000ed04

08010570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b08a      	sub	sp, #40	; 0x28
 8010574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010576:	2300      	movs	r3, #0
 8010578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801057a:	2300      	movs	r3, #0
 801057c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801057e:	463a      	mov	r2, r7
 8010580:	1d39      	adds	r1, r7, #4
 8010582:	f107 0308 	add.w	r3, r7, #8
 8010586:	4618      	mov	r0, r3
 8010588:	f7ff f820 	bl	800f5cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801058c:	6839      	ldr	r1, [r7, #0]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	68ba      	ldr	r2, [r7, #8]
 8010592:	9202      	str	r2, [sp, #8]
 8010594:	9301      	str	r3, [sp, #4]
 8010596:	2300      	movs	r3, #0
 8010598:	9300      	str	r3, [sp, #0]
 801059a:	2300      	movs	r3, #0
 801059c:	460a      	mov	r2, r1
 801059e:	4923      	ldr	r1, [pc, #140]	; (801062c <vTaskStartScheduler+0xbc>)
 80105a0:	4823      	ldr	r0, [pc, #140]	; (8010630 <vTaskStartScheduler+0xc0>)
 80105a2:	f7ff fe05 	bl	80101b0 <xTaskCreateStatic>
 80105a6:	4603      	mov	r3, r0
 80105a8:	4a22      	ldr	r2, [pc, #136]	; (8010634 <vTaskStartScheduler+0xc4>)
 80105aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80105ac:	4b21      	ldr	r3, [pc, #132]	; (8010634 <vTaskStartScheduler+0xc4>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d002      	beq.n	80105ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80105b4:	2301      	movs	r3, #1
 80105b6:	617b      	str	r3, [r7, #20]
 80105b8:	e001      	b.n	80105be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80105ba:	2300      	movs	r3, #0
 80105bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d102      	bne.n	80105ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80105c4:	f000 fd28 	bl	8011018 <xTimerCreateTimerTask>
 80105c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d118      	bne.n	8010602 <vTaskStartScheduler+0x92>
	__asm volatile
 80105d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d4:	b672      	cpsid	i
 80105d6:	f383 8811 	msr	BASEPRI, r3
 80105da:	f3bf 8f6f 	isb	sy
 80105de:	f3bf 8f4f 	dsb	sy
 80105e2:	b662      	cpsie	i
 80105e4:	613b      	str	r3, [r7, #16]
}
 80105e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80105e8:	4b13      	ldr	r3, [pc, #76]	; (8010638 <vTaskStartScheduler+0xc8>)
 80105ea:	f04f 32ff 	mov.w	r2, #4294967295
 80105ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80105f0:	4b12      	ldr	r3, [pc, #72]	; (801063c <vTaskStartScheduler+0xcc>)
 80105f2:	2201      	movs	r2, #1
 80105f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80105f6:	4b12      	ldr	r3, [pc, #72]	; (8010640 <vTaskStartScheduler+0xd0>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80105fc:	f001 f8f8 	bl	80117f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010600:	e010      	b.n	8010624 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010608:	d10c      	bne.n	8010624 <vTaskStartScheduler+0xb4>
	__asm volatile
 801060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060e:	b672      	cpsid	i
 8010610:	f383 8811 	msr	BASEPRI, r3
 8010614:	f3bf 8f6f 	isb	sy
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	b662      	cpsie	i
 801061e:	60fb      	str	r3, [r7, #12]
}
 8010620:	bf00      	nop
 8010622:	e7fe      	b.n	8010622 <vTaskStartScheduler+0xb2>
}
 8010624:	bf00      	nop
 8010626:	3718      	adds	r7, #24
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	08014bc4 	.word	0x08014bc4
 8010630:	08010ca1 	.word	0x08010ca1
 8010634:	20004314 	.word	0x20004314
 8010638:	20004310 	.word	0x20004310
 801063c:	200042fc 	.word	0x200042fc
 8010640:	200042f4 	.word	0x200042f4

08010644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010644:	b480      	push	{r7}
 8010646:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010648:	4b04      	ldr	r3, [pc, #16]	; (801065c <vTaskSuspendAll+0x18>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	3301      	adds	r3, #1
 801064e:	4a03      	ldr	r2, [pc, #12]	; (801065c <vTaskSuspendAll+0x18>)
 8010650:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010652:	bf00      	nop
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	20004318 	.word	0x20004318

08010660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010666:	2300      	movs	r3, #0
 8010668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801066a:	2300      	movs	r3, #0
 801066c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801066e:	4b43      	ldr	r3, [pc, #268]	; (801077c <xTaskResumeAll+0x11c>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10c      	bne.n	8010690 <xTaskResumeAll+0x30>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	b672      	cpsid	i
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	b662      	cpsie	i
 801068a:	603b      	str	r3, [r7, #0]
}
 801068c:	bf00      	nop
 801068e:	e7fe      	b.n	801068e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010690:	f001 f92c 	bl	80118ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010694:	4b39      	ldr	r3, [pc, #228]	; (801077c <xTaskResumeAll+0x11c>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3b01      	subs	r3, #1
 801069a:	4a38      	ldr	r2, [pc, #224]	; (801077c <xTaskResumeAll+0x11c>)
 801069c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801069e:	4b37      	ldr	r3, [pc, #220]	; (801077c <xTaskResumeAll+0x11c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d162      	bne.n	801076c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80106a6:	4b36      	ldr	r3, [pc, #216]	; (8010780 <xTaskResumeAll+0x120>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d05e      	beq.n	801076c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80106ae:	e02f      	b.n	8010710 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106b0:	4b34      	ldr	r3, [pc, #208]	; (8010784 <xTaskResumeAll+0x124>)
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	3318      	adds	r3, #24
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff f843 	bl	800f748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	3304      	adds	r3, #4
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7ff f83e 	bl	800f748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106d0:	4b2d      	ldr	r3, [pc, #180]	; (8010788 <xTaskResumeAll+0x128>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d903      	bls.n	80106e0 <xTaskResumeAll+0x80>
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106dc:	4a2a      	ldr	r2, [pc, #168]	; (8010788 <xTaskResumeAll+0x128>)
 80106de:	6013      	str	r3, [r2, #0]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106e4:	4613      	mov	r3, r2
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	4413      	add	r3, r2
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	4a27      	ldr	r2, [pc, #156]	; (801078c <xTaskResumeAll+0x12c>)
 80106ee:	441a      	add	r2, r3
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	3304      	adds	r3, #4
 80106f4:	4619      	mov	r1, r3
 80106f6:	4610      	mov	r0, r2
 80106f8:	f7fe ffc9 	bl	800f68e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010700:	4b23      	ldr	r3, [pc, #140]	; (8010790 <xTaskResumeAll+0x130>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010706:	429a      	cmp	r2, r3
 8010708:	d302      	bcc.n	8010710 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801070a:	4b22      	ldr	r3, [pc, #136]	; (8010794 <xTaskResumeAll+0x134>)
 801070c:	2201      	movs	r2, #1
 801070e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010710:	4b1c      	ldr	r3, [pc, #112]	; (8010784 <xTaskResumeAll+0x124>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1cb      	bne.n	80106b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801071e:	f000 fb77 	bl	8010e10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010722:	4b1d      	ldr	r3, [pc, #116]	; (8010798 <xTaskResumeAll+0x138>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d010      	beq.n	8010750 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801072e:	f000 f859 	bl	80107e4 <xTaskIncrementTick>
 8010732:	4603      	mov	r3, r0
 8010734:	2b00      	cmp	r3, #0
 8010736:	d002      	beq.n	801073e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8010738:	4b16      	ldr	r3, [pc, #88]	; (8010794 <xTaskResumeAll+0x134>)
 801073a:	2201      	movs	r2, #1
 801073c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	3b01      	subs	r3, #1
 8010742:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1f1      	bne.n	801072e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801074a:	4b13      	ldr	r3, [pc, #76]	; (8010798 <xTaskResumeAll+0x138>)
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010750:	4b10      	ldr	r3, [pc, #64]	; (8010794 <xTaskResumeAll+0x134>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d009      	beq.n	801076c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010758:	2301      	movs	r3, #1
 801075a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801075c:	4b0f      	ldr	r3, [pc, #60]	; (801079c <xTaskResumeAll+0x13c>)
 801075e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010762:	601a      	str	r2, [r3, #0]
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801076c:	f001 f8f2 	bl	8011954 <vPortExitCritical>

	return xAlreadyYielded;
 8010770:	68bb      	ldr	r3, [r7, #8]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	20004318 	.word	0x20004318
 8010780:	200042f0 	.word	0x200042f0
 8010784:	200042b0 	.word	0x200042b0
 8010788:	200042f8 	.word	0x200042f8
 801078c:	20003e20 	.word	0x20003e20
 8010790:	20003e1c 	.word	0x20003e1c
 8010794:	20004304 	.word	0x20004304
 8010798:	20004300 	.word	0x20004300
 801079c:	e000ed04 	.word	0xe000ed04

080107a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80107a6:	4b05      	ldr	r3, [pc, #20]	; (80107bc <xTaskGetTickCount+0x1c>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80107ac:	687b      	ldr	r3, [r7, #4]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	200042f4 	.word	0x200042f4

080107c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107c6:	f001 f979 	bl	8011abc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80107ca:	2300      	movs	r3, #0
 80107cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80107ce:	4b04      	ldr	r3, [pc, #16]	; (80107e0 <xTaskGetTickCountFromISR+0x20>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80107d4:	683b      	ldr	r3, [r7, #0]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	200042f4 	.word	0x200042f4

080107e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b086      	sub	sp, #24
 80107e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80107ea:	2300      	movs	r3, #0
 80107ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107ee:	4b50      	ldr	r3, [pc, #320]	; (8010930 <xTaskIncrementTick+0x14c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f040 808b 	bne.w	801090e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80107f8:	4b4e      	ldr	r3, [pc, #312]	; (8010934 <xTaskIncrementTick+0x150>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	3301      	adds	r3, #1
 80107fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010800:	4a4c      	ldr	r2, [pc, #304]	; (8010934 <xTaskIncrementTick+0x150>)
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d122      	bne.n	8010852 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801080c:	4b4a      	ldr	r3, [pc, #296]	; (8010938 <xTaskIncrementTick+0x154>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00c      	beq.n	8010830 <xTaskIncrementTick+0x4c>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081a:	b672      	cpsid	i
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	b662      	cpsie	i
 801082a:	603b      	str	r3, [r7, #0]
}
 801082c:	bf00      	nop
 801082e:	e7fe      	b.n	801082e <xTaskIncrementTick+0x4a>
 8010830:	4b41      	ldr	r3, [pc, #260]	; (8010938 <xTaskIncrementTick+0x154>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	60fb      	str	r3, [r7, #12]
 8010836:	4b41      	ldr	r3, [pc, #260]	; (801093c <xTaskIncrementTick+0x158>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4a3f      	ldr	r2, [pc, #252]	; (8010938 <xTaskIncrementTick+0x154>)
 801083c:	6013      	str	r3, [r2, #0]
 801083e:	4a3f      	ldr	r2, [pc, #252]	; (801093c <xTaskIncrementTick+0x158>)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	6013      	str	r3, [r2, #0]
 8010844:	4b3e      	ldr	r3, [pc, #248]	; (8010940 <xTaskIncrementTick+0x15c>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	3301      	adds	r3, #1
 801084a:	4a3d      	ldr	r2, [pc, #244]	; (8010940 <xTaskIncrementTick+0x15c>)
 801084c:	6013      	str	r3, [r2, #0]
 801084e:	f000 fadf 	bl	8010e10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010852:	4b3c      	ldr	r3, [pc, #240]	; (8010944 <xTaskIncrementTick+0x160>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	693a      	ldr	r2, [r7, #16]
 8010858:	429a      	cmp	r2, r3
 801085a:	d349      	bcc.n	80108f0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801085c:	4b36      	ldr	r3, [pc, #216]	; (8010938 <xTaskIncrementTick+0x154>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d104      	bne.n	8010870 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010866:	4b37      	ldr	r3, [pc, #220]	; (8010944 <xTaskIncrementTick+0x160>)
 8010868:	f04f 32ff 	mov.w	r2, #4294967295
 801086c:	601a      	str	r2, [r3, #0]
					break;
 801086e:	e03f      	b.n	80108f0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010870:	4b31      	ldr	r3, [pc, #196]	; (8010938 <xTaskIncrementTick+0x154>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010880:	693a      	ldr	r2, [r7, #16]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	429a      	cmp	r2, r3
 8010886:	d203      	bcs.n	8010890 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010888:	4a2e      	ldr	r2, [pc, #184]	; (8010944 <xTaskIncrementTick+0x160>)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801088e:	e02f      	b.n	80108f0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	3304      	adds	r3, #4
 8010894:	4618      	mov	r0, r3
 8010896:	f7fe ff57 	bl	800f748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d004      	beq.n	80108ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	3318      	adds	r3, #24
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fe ff4e 	bl	800f748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108b0:	4b25      	ldr	r3, [pc, #148]	; (8010948 <xTaskIncrementTick+0x164>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d903      	bls.n	80108c0 <xTaskIncrementTick+0xdc>
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108bc:	4a22      	ldr	r2, [pc, #136]	; (8010948 <xTaskIncrementTick+0x164>)
 80108be:	6013      	str	r3, [r2, #0]
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108c4:	4613      	mov	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4413      	add	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4a1f      	ldr	r2, [pc, #124]	; (801094c <xTaskIncrementTick+0x168>)
 80108ce:	441a      	add	r2, r3
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	3304      	adds	r3, #4
 80108d4:	4619      	mov	r1, r3
 80108d6:	4610      	mov	r0, r2
 80108d8:	f7fe fed9 	bl	800f68e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e0:	4b1b      	ldr	r3, [pc, #108]	; (8010950 <xTaskIncrementTick+0x16c>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d3b8      	bcc.n	801085c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80108ea:	2301      	movs	r3, #1
 80108ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108ee:	e7b5      	b.n	801085c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80108f0:	4b17      	ldr	r3, [pc, #92]	; (8010950 <xTaskIncrementTick+0x16c>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108f6:	4915      	ldr	r1, [pc, #84]	; (801094c <xTaskIncrementTick+0x168>)
 80108f8:	4613      	mov	r3, r2
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	4413      	add	r3, r2
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	440b      	add	r3, r1
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2b01      	cmp	r3, #1
 8010906:	d907      	bls.n	8010918 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010908:	2301      	movs	r3, #1
 801090a:	617b      	str	r3, [r7, #20]
 801090c:	e004      	b.n	8010918 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801090e:	4b11      	ldr	r3, [pc, #68]	; (8010954 <xTaskIncrementTick+0x170>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	3301      	adds	r3, #1
 8010914:	4a0f      	ldr	r2, [pc, #60]	; (8010954 <xTaskIncrementTick+0x170>)
 8010916:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010918:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <xTaskIncrementTick+0x174>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d001      	beq.n	8010924 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010920:	2301      	movs	r3, #1
 8010922:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010924:	697b      	ldr	r3, [r7, #20]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3718      	adds	r7, #24
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	20004318 	.word	0x20004318
 8010934:	200042f4 	.word	0x200042f4
 8010938:	200042a8 	.word	0x200042a8
 801093c:	200042ac 	.word	0x200042ac
 8010940:	20004308 	.word	0x20004308
 8010944:	20004310 	.word	0x20004310
 8010948:	200042f8 	.word	0x200042f8
 801094c:	20003e20 	.word	0x20003e20
 8010950:	20003e1c 	.word	0x20003e1c
 8010954:	20004300 	.word	0x20004300
 8010958:	20004304 	.word	0x20004304

0801095c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801095c:	b480      	push	{r7}
 801095e:	b085      	sub	sp, #20
 8010960:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010962:	4b29      	ldr	r3, [pc, #164]	; (8010a08 <vTaskSwitchContext+0xac>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d003      	beq.n	8010972 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801096a:	4b28      	ldr	r3, [pc, #160]	; (8010a0c <vTaskSwitchContext+0xb0>)
 801096c:	2201      	movs	r2, #1
 801096e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010970:	e043      	b.n	80109fa <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8010972:	4b26      	ldr	r3, [pc, #152]	; (8010a0c <vTaskSwitchContext+0xb0>)
 8010974:	2200      	movs	r2, #0
 8010976:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010978:	4b25      	ldr	r3, [pc, #148]	; (8010a10 <vTaskSwitchContext+0xb4>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	60fb      	str	r3, [r7, #12]
 801097e:	e012      	b.n	80109a6 <vTaskSwitchContext+0x4a>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d10c      	bne.n	80109a0 <vTaskSwitchContext+0x44>
	__asm volatile
 8010986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098a:	b672      	cpsid	i
 801098c:	f383 8811 	msr	BASEPRI, r3
 8010990:	f3bf 8f6f 	isb	sy
 8010994:	f3bf 8f4f 	dsb	sy
 8010998:	b662      	cpsie	i
 801099a:	607b      	str	r3, [r7, #4]
}
 801099c:	bf00      	nop
 801099e:	e7fe      	b.n	801099e <vTaskSwitchContext+0x42>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	3b01      	subs	r3, #1
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	491b      	ldr	r1, [pc, #108]	; (8010a14 <vTaskSwitchContext+0xb8>)
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	4613      	mov	r3, r2
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	4413      	add	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	440b      	add	r3, r1
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d0e2      	beq.n	8010980 <vTaskSwitchContext+0x24>
 80109ba:	68fa      	ldr	r2, [r7, #12]
 80109bc:	4613      	mov	r3, r2
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	4413      	add	r3, r2
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	4a13      	ldr	r2, [pc, #76]	; (8010a14 <vTaskSwitchContext+0xb8>)
 80109c6:	4413      	add	r3, r2
 80109c8:	60bb      	str	r3, [r7, #8]
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	685a      	ldr	r2, [r3, #4]
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	605a      	str	r2, [r3, #4]
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	685a      	ldr	r2, [r3, #4]
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	3308      	adds	r3, #8
 80109dc:	429a      	cmp	r2, r3
 80109de:	d104      	bne.n	80109ea <vTaskSwitchContext+0x8e>
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	685a      	ldr	r2, [r3, #4]
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	605a      	str	r2, [r3, #4]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	4a09      	ldr	r2, [pc, #36]	; (8010a18 <vTaskSwitchContext+0xbc>)
 80109f2:	6013      	str	r3, [r2, #0]
 80109f4:	4a06      	ldr	r2, [pc, #24]	; (8010a10 <vTaskSwitchContext+0xb4>)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6013      	str	r3, [r2, #0]
}
 80109fa:	bf00      	nop
 80109fc:	3714      	adds	r7, #20
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop
 8010a08:	20004318 	.word	0x20004318
 8010a0c:	20004304 	.word	0x20004304
 8010a10:	200042f8 	.word	0x200042f8
 8010a14:	20003e20 	.word	0x20003e20
 8010a18:	20003e1c 	.word	0x20003e1c

08010a1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10c      	bne.n	8010a46 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a30:	b672      	cpsid	i
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	b662      	cpsie	i
 8010a40:	60fb      	str	r3, [r7, #12]
}
 8010a42:	bf00      	nop
 8010a44:	e7fe      	b.n	8010a44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010a46:	4b07      	ldr	r3, [pc, #28]	; (8010a64 <vTaskPlaceOnEventList+0x48>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3318      	adds	r3, #24
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7fe fe41 	bl	800f6d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010a54:	2101      	movs	r1, #1
 8010a56:	6838      	ldr	r0, [r7, #0]
 8010a58:	f000 fa8a 	bl	8010f70 <prvAddCurrentTaskToDelayedList>
}
 8010a5c:	bf00      	nop
 8010a5e:	3710      	adds	r7, #16
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	20003e1c 	.word	0x20003e1c

08010a68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10c      	bne.n	8010a94 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7e:	b672      	cpsid	i
 8010a80:	f383 8811 	msr	BASEPRI, r3
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	f3bf 8f4f 	dsb	sy
 8010a8c:	b662      	cpsie	i
 8010a8e:	617b      	str	r3, [r7, #20]
}
 8010a90:	bf00      	nop
 8010a92:	e7fe      	b.n	8010a92 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010a94:	4b0a      	ldr	r3, [pc, #40]	; (8010ac0 <vTaskPlaceOnEventListRestricted+0x58>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	3318      	adds	r3, #24
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	68f8      	ldr	r0, [r7, #12]
 8010a9e:	f7fe fdf6 	bl	800f68e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d002      	beq.n	8010aae <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8010aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8010aac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010aae:	6879      	ldr	r1, [r7, #4]
 8010ab0:	68b8      	ldr	r0, [r7, #8]
 8010ab2:	f000 fa5d 	bl	8010f70 <prvAddCurrentTaskToDelayedList>
	}
 8010ab6:	bf00      	nop
 8010ab8:	3718      	adds	r7, #24
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	20003e1c 	.word	0x20003e1c

08010ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d10c      	bne.n	8010af4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	b672      	cpsid	i
 8010ae0:	f383 8811 	msr	BASEPRI, r3
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	b662      	cpsie	i
 8010aee:	60fb      	str	r3, [r7, #12]
}
 8010af0:	bf00      	nop
 8010af2:	e7fe      	b.n	8010af2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	3318      	adds	r3, #24
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fe fe25 	bl	800f748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010afe:	4b1e      	ldr	r3, [pc, #120]	; (8010b78 <xTaskRemoveFromEventList+0xb4>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d11d      	bne.n	8010b42 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	3304      	adds	r3, #4
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fe fe1c 	bl	800f748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b14:	4b19      	ldr	r3, [pc, #100]	; (8010b7c <xTaskRemoveFromEventList+0xb8>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d903      	bls.n	8010b24 <xTaskRemoveFromEventList+0x60>
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b20:	4a16      	ldr	r2, [pc, #88]	; (8010b7c <xTaskRemoveFromEventList+0xb8>)
 8010b22:	6013      	str	r3, [r2, #0]
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b28:	4613      	mov	r3, r2
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	4413      	add	r3, r2
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4a13      	ldr	r2, [pc, #76]	; (8010b80 <xTaskRemoveFromEventList+0xbc>)
 8010b32:	441a      	add	r2, r3
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	3304      	adds	r3, #4
 8010b38:	4619      	mov	r1, r3
 8010b3a:	4610      	mov	r0, r2
 8010b3c:	f7fe fda7 	bl	800f68e <vListInsertEnd>
 8010b40:	e005      	b.n	8010b4e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	3318      	adds	r3, #24
 8010b46:	4619      	mov	r1, r3
 8010b48:	480e      	ldr	r0, [pc, #56]	; (8010b84 <xTaskRemoveFromEventList+0xc0>)
 8010b4a:	f7fe fda0 	bl	800f68e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b52:	4b0d      	ldr	r3, [pc, #52]	; (8010b88 <xTaskRemoveFromEventList+0xc4>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d905      	bls.n	8010b68 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010b60:	4b0a      	ldr	r3, [pc, #40]	; (8010b8c <xTaskRemoveFromEventList+0xc8>)
 8010b62:	2201      	movs	r2, #1
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	e001      	b.n	8010b6c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010b6c:	697b      	ldr	r3, [r7, #20]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3718      	adds	r7, #24
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	20004318 	.word	0x20004318
 8010b7c:	200042f8 	.word	0x200042f8
 8010b80:	20003e20 	.word	0x20003e20
 8010b84:	200042b0 	.word	0x200042b0
 8010b88:	20003e1c 	.word	0x20003e1c
 8010b8c:	20004304 	.word	0x20004304

08010b90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010b90:	b480      	push	{r7}
 8010b92:	b083      	sub	sp, #12
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010b98:	4b06      	ldr	r3, [pc, #24]	; (8010bb4 <vTaskInternalSetTimeOutState+0x24>)
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ba0:	4b05      	ldr	r3, [pc, #20]	; (8010bb8 <vTaskInternalSetTimeOutState+0x28>)
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	605a      	str	r2, [r3, #4]
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	20004308 	.word	0x20004308
 8010bb8:	200042f4 	.word	0x200042f4

08010bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b088      	sub	sp, #32
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d10c      	bne.n	8010be6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd0:	b672      	cpsid	i
 8010bd2:	f383 8811 	msr	BASEPRI, r3
 8010bd6:	f3bf 8f6f 	isb	sy
 8010bda:	f3bf 8f4f 	dsb	sy
 8010bde:	b662      	cpsie	i
 8010be0:	613b      	str	r3, [r7, #16]
}
 8010be2:	bf00      	nop
 8010be4:	e7fe      	b.n	8010be4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d10c      	bne.n	8010c06 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf0:	b672      	cpsid	i
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	b662      	cpsie	i
 8010c00:	60fb      	str	r3, [r7, #12]
}
 8010c02:	bf00      	nop
 8010c04:	e7fe      	b.n	8010c04 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010c06:	f000 fe71 	bl	80118ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010c0a:	4b1d      	ldr	r3, [pc, #116]	; (8010c80 <xTaskCheckForTimeOut+0xc4>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	69ba      	ldr	r2, [r7, #24]
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c22:	d102      	bne.n	8010c2a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010c24:	2300      	movs	r3, #0
 8010c26:	61fb      	str	r3, [r7, #28]
 8010c28:	e023      	b.n	8010c72 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	4b15      	ldr	r3, [pc, #84]	; (8010c84 <xTaskCheckForTimeOut+0xc8>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d007      	beq.n	8010c46 <xTaskCheckForTimeOut+0x8a>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	69ba      	ldr	r2, [r7, #24]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d302      	bcc.n	8010c46 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010c40:	2301      	movs	r3, #1
 8010c42:	61fb      	str	r3, [r7, #28]
 8010c44:	e015      	b.n	8010c72 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	697a      	ldr	r2, [r7, #20]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d20b      	bcs.n	8010c68 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	1ad2      	subs	r2, r2, r3
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff ff97 	bl	8010b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010c62:	2300      	movs	r3, #0
 8010c64:	61fb      	str	r3, [r7, #28]
 8010c66:	e004      	b.n	8010c72 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010c72:	f000 fe6f 	bl	8011954 <vPortExitCritical>

	return xReturn;
 8010c76:	69fb      	ldr	r3, [r7, #28]
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3720      	adds	r7, #32
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	200042f4 	.word	0x200042f4
 8010c84:	20004308 	.word	0x20004308

08010c88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010c88:	b480      	push	{r7}
 8010c8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010c8c:	4b03      	ldr	r3, [pc, #12]	; (8010c9c <vTaskMissedYield+0x14>)
 8010c8e:	2201      	movs	r2, #1
 8010c90:	601a      	str	r2, [r3, #0]
}
 8010c92:	bf00      	nop
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr
 8010c9c:	20004304 	.word	0x20004304

08010ca0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010ca8:	f000 f852 	bl	8010d50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010cac:	4b06      	ldr	r3, [pc, #24]	; (8010cc8 <prvIdleTask+0x28>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d9f9      	bls.n	8010ca8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010cb4:	4b05      	ldr	r3, [pc, #20]	; (8010ccc <prvIdleTask+0x2c>)
 8010cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cba:	601a      	str	r2, [r3, #0]
 8010cbc:	f3bf 8f4f 	dsb	sy
 8010cc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010cc4:	e7f0      	b.n	8010ca8 <prvIdleTask+0x8>
 8010cc6:	bf00      	nop
 8010cc8:	20003e20 	.word	0x20003e20
 8010ccc:	e000ed04 	.word	0xe000ed04

08010cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	607b      	str	r3, [r7, #4]
 8010cda:	e00c      	b.n	8010cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	4613      	mov	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	4413      	add	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	4a12      	ldr	r2, [pc, #72]	; (8010d30 <prvInitialiseTaskLists+0x60>)
 8010ce8:	4413      	add	r3, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fe fca2 	bl	800f634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	607b      	str	r3, [r7, #4]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b37      	cmp	r3, #55	; 0x37
 8010cfa:	d9ef      	bls.n	8010cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010cfc:	480d      	ldr	r0, [pc, #52]	; (8010d34 <prvInitialiseTaskLists+0x64>)
 8010cfe:	f7fe fc99 	bl	800f634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010d02:	480d      	ldr	r0, [pc, #52]	; (8010d38 <prvInitialiseTaskLists+0x68>)
 8010d04:	f7fe fc96 	bl	800f634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010d08:	480c      	ldr	r0, [pc, #48]	; (8010d3c <prvInitialiseTaskLists+0x6c>)
 8010d0a:	f7fe fc93 	bl	800f634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010d0e:	480c      	ldr	r0, [pc, #48]	; (8010d40 <prvInitialiseTaskLists+0x70>)
 8010d10:	f7fe fc90 	bl	800f634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010d14:	480b      	ldr	r0, [pc, #44]	; (8010d44 <prvInitialiseTaskLists+0x74>)
 8010d16:	f7fe fc8d 	bl	800f634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d1a:	4b0b      	ldr	r3, [pc, #44]	; (8010d48 <prvInitialiseTaskLists+0x78>)
 8010d1c:	4a05      	ldr	r2, [pc, #20]	; (8010d34 <prvInitialiseTaskLists+0x64>)
 8010d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d20:	4b0a      	ldr	r3, [pc, #40]	; (8010d4c <prvInitialiseTaskLists+0x7c>)
 8010d22:	4a05      	ldr	r2, [pc, #20]	; (8010d38 <prvInitialiseTaskLists+0x68>)
 8010d24:	601a      	str	r2, [r3, #0]
}
 8010d26:	bf00      	nop
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	20003e20 	.word	0x20003e20
 8010d34:	20004280 	.word	0x20004280
 8010d38:	20004294 	.word	0x20004294
 8010d3c:	200042b0 	.word	0x200042b0
 8010d40:	200042c4 	.word	0x200042c4
 8010d44:	200042dc 	.word	0x200042dc
 8010d48:	200042a8 	.word	0x200042a8
 8010d4c:	200042ac 	.word	0x200042ac

08010d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d56:	e019      	b.n	8010d8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010d58:	f000 fdc8 	bl	80118ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d5c:	4b10      	ldr	r3, [pc, #64]	; (8010da0 <prvCheckTasksWaitingTermination+0x50>)
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	3304      	adds	r3, #4
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fe fced 	bl	800f748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010d6e:	4b0d      	ldr	r3, [pc, #52]	; (8010da4 <prvCheckTasksWaitingTermination+0x54>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	3b01      	subs	r3, #1
 8010d74:	4a0b      	ldr	r2, [pc, #44]	; (8010da4 <prvCheckTasksWaitingTermination+0x54>)
 8010d76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010d78:	4b0b      	ldr	r3, [pc, #44]	; (8010da8 <prvCheckTasksWaitingTermination+0x58>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3b01      	subs	r3, #1
 8010d7e:	4a0a      	ldr	r2, [pc, #40]	; (8010da8 <prvCheckTasksWaitingTermination+0x58>)
 8010d80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010d82:	f000 fde7 	bl	8011954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 f810 	bl	8010dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d8c:	4b06      	ldr	r3, [pc, #24]	; (8010da8 <prvCheckTasksWaitingTermination+0x58>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d1e1      	bne.n	8010d58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010d94:	bf00      	nop
 8010d96:	bf00      	nop
 8010d98:	3708      	adds	r7, #8
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	200042c4 	.word	0x200042c4
 8010da4:	200042f0 	.word	0x200042f0
 8010da8:	200042d8 	.word	0x200042d8

08010dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d108      	bne.n	8010dd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 ff88 	bl	8011cd8 <vPortFree>
				vPortFree( pxTCB );
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 ff85 	bl	8011cd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010dce:	e01a      	b.n	8010e06 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d103      	bne.n	8010de2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 ff7c 	bl	8011cd8 <vPortFree>
	}
 8010de0:	e011      	b.n	8010e06 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d00c      	beq.n	8010e06 <prvDeleteTCB+0x5a>
	__asm volatile
 8010dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df0:	b672      	cpsid	i
 8010df2:	f383 8811 	msr	BASEPRI, r3
 8010df6:	f3bf 8f6f 	isb	sy
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	b662      	cpsie	i
 8010e00:	60fb      	str	r3, [r7, #12]
}
 8010e02:	bf00      	nop
 8010e04:	e7fe      	b.n	8010e04 <prvDeleteTCB+0x58>
	}
 8010e06:	bf00      	nop
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
	...

08010e10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010e10:	b480      	push	{r7}
 8010e12:	b083      	sub	sp, #12
 8010e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e16:	4b0c      	ldr	r3, [pc, #48]	; (8010e48 <prvResetNextTaskUnblockTime+0x38>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d104      	bne.n	8010e2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e20:	4b0a      	ldr	r3, [pc, #40]	; (8010e4c <prvResetNextTaskUnblockTime+0x3c>)
 8010e22:	f04f 32ff 	mov.w	r2, #4294967295
 8010e26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010e28:	e008      	b.n	8010e3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e2a:	4b07      	ldr	r3, [pc, #28]	; (8010e48 <prvResetNextTaskUnblockTime+0x38>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	4a04      	ldr	r2, [pc, #16]	; (8010e4c <prvResetNextTaskUnblockTime+0x3c>)
 8010e3a:	6013      	str	r3, [r2, #0]
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	200042a8 	.word	0x200042a8
 8010e4c:	20004310 	.word	0x20004310

08010e50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010e56:	4b0b      	ldr	r3, [pc, #44]	; (8010e84 <xTaskGetSchedulerState+0x34>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d102      	bne.n	8010e64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	607b      	str	r3, [r7, #4]
 8010e62:	e008      	b.n	8010e76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e64:	4b08      	ldr	r3, [pc, #32]	; (8010e88 <xTaskGetSchedulerState+0x38>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d102      	bne.n	8010e72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010e6c:	2302      	movs	r3, #2
 8010e6e:	607b      	str	r3, [r7, #4]
 8010e70:	e001      	b.n	8010e76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010e72:	2300      	movs	r3, #0
 8010e74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010e76:	687b      	ldr	r3, [r7, #4]
	}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr
 8010e84:	200042fc 	.word	0x200042fc
 8010e88:	20004318 	.word	0x20004318

08010e8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d05a      	beq.n	8010f58 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010ea2:	4b30      	ldr	r3, [pc, #192]	; (8010f64 <xTaskPriorityDisinherit+0xd8>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	693a      	ldr	r2, [r7, #16]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d00c      	beq.n	8010ec6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb0:	b672      	cpsid	i
 8010eb2:	f383 8811 	msr	BASEPRI, r3
 8010eb6:	f3bf 8f6f 	isb	sy
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	b662      	cpsie	i
 8010ec0:	60fb      	str	r3, [r7, #12]
}
 8010ec2:	bf00      	nop
 8010ec4:	e7fe      	b.n	8010ec4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d10c      	bne.n	8010ee8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed2:	b672      	cpsid	i
 8010ed4:	f383 8811 	msr	BASEPRI, r3
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	b662      	cpsie	i
 8010ee2:	60bb      	str	r3, [r7, #8]
}
 8010ee4:	bf00      	nop
 8010ee6:	e7fe      	b.n	8010ee6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eec:	1e5a      	subs	r2, r3, #1
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d02c      	beq.n	8010f58 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d128      	bne.n	8010f58 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fe fc1c 	bl	800f748 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f28:	4b0f      	ldr	r3, [pc, #60]	; (8010f68 <xTaskPriorityDisinherit+0xdc>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d903      	bls.n	8010f38 <xTaskPriorityDisinherit+0xac>
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f34:	4a0c      	ldr	r2, [pc, #48]	; (8010f68 <xTaskPriorityDisinherit+0xdc>)
 8010f36:	6013      	str	r3, [r2, #0]
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	4a09      	ldr	r2, [pc, #36]	; (8010f6c <xTaskPriorityDisinherit+0xe0>)
 8010f46:	441a      	add	r2, r3
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	3304      	adds	r3, #4
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4610      	mov	r0, r2
 8010f50:	f7fe fb9d 	bl	800f68e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010f54:	2301      	movs	r3, #1
 8010f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f58:	697b      	ldr	r3, [r7, #20]
	}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3718      	adds	r7, #24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	20003e1c 	.word	0x20003e1c
 8010f68:	200042f8 	.word	0x200042f8
 8010f6c:	20003e20 	.word	0x20003e20

08010f70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010f7a:	4b21      	ldr	r3, [pc, #132]	; (8011000 <prvAddCurrentTaskToDelayedList+0x90>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f80:	4b20      	ldr	r3, [pc, #128]	; (8011004 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	3304      	adds	r3, #4
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fe fbde 	bl	800f748 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f92:	d10a      	bne.n	8010faa <prvAddCurrentTaskToDelayedList+0x3a>
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d007      	beq.n	8010faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f9a:	4b1a      	ldr	r3, [pc, #104]	; (8011004 <prvAddCurrentTaskToDelayedList+0x94>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	4819      	ldr	r0, [pc, #100]	; (8011008 <prvAddCurrentTaskToDelayedList+0x98>)
 8010fa4:	f7fe fb73 	bl	800f68e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010fa8:	e026      	b.n	8010ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4413      	add	r3, r2
 8010fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010fb2:	4b14      	ldr	r3, [pc, #80]	; (8011004 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010fba:	68ba      	ldr	r2, [r7, #8]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d209      	bcs.n	8010fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fc2:	4b12      	ldr	r3, [pc, #72]	; (801100c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	4b0f      	ldr	r3, [pc, #60]	; (8011004 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	3304      	adds	r3, #4
 8010fcc:	4619      	mov	r1, r3
 8010fce:	4610      	mov	r0, r2
 8010fd0:	f7fe fb81 	bl	800f6d6 <vListInsert>
}
 8010fd4:	e010      	b.n	8010ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fd6:	4b0e      	ldr	r3, [pc, #56]	; (8011010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	4b0a      	ldr	r3, [pc, #40]	; (8011004 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	3304      	adds	r3, #4
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	4610      	mov	r0, r2
 8010fe4:	f7fe fb77 	bl	800f6d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010fe8:	4b0a      	ldr	r3, [pc, #40]	; (8011014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d202      	bcs.n	8010ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010ff2:	4a08      	ldr	r2, [pc, #32]	; (8011014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ff4:	68bb      	ldr	r3, [r7, #8]
 8010ff6:	6013      	str	r3, [r2, #0]
}
 8010ff8:	bf00      	nop
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	200042f4 	.word	0x200042f4
 8011004:	20003e1c 	.word	0x20003e1c
 8011008:	200042dc 	.word	0x200042dc
 801100c:	200042ac 	.word	0x200042ac
 8011010:	200042a8 	.word	0x200042a8
 8011014:	20004310 	.word	0x20004310

08011018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b08a      	sub	sp, #40	; 0x28
 801101c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801101e:	2300      	movs	r3, #0
 8011020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011022:	f000 fb15 	bl	8011650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011026:	4b1d      	ldr	r3, [pc, #116]	; (801109c <xTimerCreateTimerTask+0x84>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d021      	beq.n	8011072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801102e:	2300      	movs	r3, #0
 8011030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011032:	2300      	movs	r3, #0
 8011034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011036:	1d3a      	adds	r2, r7, #4
 8011038:	f107 0108 	add.w	r1, r7, #8
 801103c:	f107 030c 	add.w	r3, r7, #12
 8011040:	4618      	mov	r0, r3
 8011042:	f7fe fadd 	bl	800f600 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	9202      	str	r2, [sp, #8]
 801104e:	9301      	str	r3, [sp, #4]
 8011050:	2302      	movs	r3, #2
 8011052:	9300      	str	r3, [sp, #0]
 8011054:	2300      	movs	r3, #0
 8011056:	460a      	mov	r2, r1
 8011058:	4911      	ldr	r1, [pc, #68]	; (80110a0 <xTimerCreateTimerTask+0x88>)
 801105a:	4812      	ldr	r0, [pc, #72]	; (80110a4 <xTimerCreateTimerTask+0x8c>)
 801105c:	f7ff f8a8 	bl	80101b0 <xTaskCreateStatic>
 8011060:	4603      	mov	r3, r0
 8011062:	4a11      	ldr	r2, [pc, #68]	; (80110a8 <xTimerCreateTimerTask+0x90>)
 8011064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011066:	4b10      	ldr	r3, [pc, #64]	; (80110a8 <xTimerCreateTimerTask+0x90>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d001      	beq.n	8011072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801106e:	2301      	movs	r3, #1
 8011070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10c      	bne.n	8011092 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8011078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107c:	b672      	cpsid	i
 801107e:	f383 8811 	msr	BASEPRI, r3
 8011082:	f3bf 8f6f 	isb	sy
 8011086:	f3bf 8f4f 	dsb	sy
 801108a:	b662      	cpsie	i
 801108c:	613b      	str	r3, [r7, #16]
}
 801108e:	bf00      	nop
 8011090:	e7fe      	b.n	8011090 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011092:	697b      	ldr	r3, [r7, #20]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3718      	adds	r7, #24
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	2000434c 	.word	0x2000434c
 80110a0:	08014bcc 	.word	0x08014bcc
 80110a4:	080111e9 	.word	0x080111e9
 80110a8:	20004350 	.word	0x20004350

080110ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b08a      	sub	sp, #40	; 0x28
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	60b9      	str	r1, [r7, #8]
 80110b6:	607a      	str	r2, [r7, #4]
 80110b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80110ba:	2300      	movs	r3, #0
 80110bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d10c      	bne.n	80110de <xTimerGenericCommand+0x32>
	__asm volatile
 80110c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c8:	b672      	cpsid	i
 80110ca:	f383 8811 	msr	BASEPRI, r3
 80110ce:	f3bf 8f6f 	isb	sy
 80110d2:	f3bf 8f4f 	dsb	sy
 80110d6:	b662      	cpsie	i
 80110d8:	623b      	str	r3, [r7, #32]
}
 80110da:	bf00      	nop
 80110dc:	e7fe      	b.n	80110dc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80110de:	4b1a      	ldr	r3, [pc, #104]	; (8011148 <xTimerGenericCommand+0x9c>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d02a      	beq.n	801113c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	2b05      	cmp	r3, #5
 80110f6:	dc18      	bgt.n	801112a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80110f8:	f7ff feaa 	bl	8010e50 <xTaskGetSchedulerState>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b02      	cmp	r3, #2
 8011100:	d109      	bne.n	8011116 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011102:	4b11      	ldr	r3, [pc, #68]	; (8011148 <xTimerGenericCommand+0x9c>)
 8011104:	6818      	ldr	r0, [r3, #0]
 8011106:	f107 0110 	add.w	r1, r7, #16
 801110a:	2300      	movs	r3, #0
 801110c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801110e:	f7fe fc55 	bl	800f9bc <xQueueGenericSend>
 8011112:	6278      	str	r0, [r7, #36]	; 0x24
 8011114:	e012      	b.n	801113c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011116:	4b0c      	ldr	r3, [pc, #48]	; (8011148 <xTimerGenericCommand+0x9c>)
 8011118:	6818      	ldr	r0, [r3, #0]
 801111a:	f107 0110 	add.w	r1, r7, #16
 801111e:	2300      	movs	r3, #0
 8011120:	2200      	movs	r2, #0
 8011122:	f7fe fc4b 	bl	800f9bc <xQueueGenericSend>
 8011126:	6278      	str	r0, [r7, #36]	; 0x24
 8011128:	e008      	b.n	801113c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801112a:	4b07      	ldr	r3, [pc, #28]	; (8011148 <xTimerGenericCommand+0x9c>)
 801112c:	6818      	ldr	r0, [r3, #0]
 801112e:	f107 0110 	add.w	r1, r7, #16
 8011132:	2300      	movs	r3, #0
 8011134:	683a      	ldr	r2, [r7, #0]
 8011136:	f7fe fd47 	bl	800fbc8 <xQueueGenericSendFromISR>
 801113a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801113e:	4618      	mov	r0, r3
 8011140:	3728      	adds	r7, #40	; 0x28
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	2000434c 	.word	0x2000434c

0801114c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b088      	sub	sp, #32
 8011150:	af02      	add	r7, sp, #8
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011156:	4b23      	ldr	r3, [pc, #140]	; (80111e4 <prvProcessExpiredTimer+0x98>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	3304      	adds	r3, #4
 8011164:	4618      	mov	r0, r3
 8011166:	f7fe faef 	bl	800f748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011170:	f003 0304 	and.w	r3, r3, #4
 8011174:	2b00      	cmp	r3, #0
 8011176:	d024      	beq.n	80111c2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	699a      	ldr	r2, [r3, #24]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	18d1      	adds	r1, r2, r3
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	683a      	ldr	r2, [r7, #0]
 8011184:	6978      	ldr	r0, [r7, #20]
 8011186:	f000 f8d3 	bl	8011330 <prvInsertTimerInActiveList>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d021      	beq.n	80111d4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011190:	2300      	movs	r3, #0
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	2300      	movs	r3, #0
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	2100      	movs	r1, #0
 801119a:	6978      	ldr	r0, [r7, #20]
 801119c:	f7ff ff86 	bl	80110ac <xTimerGenericCommand>
 80111a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d115      	bne.n	80111d4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80111a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ac:	b672      	cpsid	i
 80111ae:	f383 8811 	msr	BASEPRI, r3
 80111b2:	f3bf 8f6f 	isb	sy
 80111b6:	f3bf 8f4f 	dsb	sy
 80111ba:	b662      	cpsie	i
 80111bc:	60fb      	str	r3, [r7, #12]
}
 80111be:	bf00      	nop
 80111c0:	e7fe      	b.n	80111c0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80111c8:	f023 0301 	bic.w	r3, r3, #1
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	6a1b      	ldr	r3, [r3, #32]
 80111d8:	6978      	ldr	r0, [r7, #20]
 80111da:	4798      	blx	r3
}
 80111dc:	bf00      	nop
 80111de:	3718      	adds	r7, #24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	20004344 	.word	0x20004344

080111e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80111f0:	f107 0308 	add.w	r3, r7, #8
 80111f4:	4618      	mov	r0, r3
 80111f6:	f000 f857 	bl	80112a8 <prvGetNextExpireTime>
 80111fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	4619      	mov	r1, r3
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f000 f803 	bl	801120c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011206:	f000 f8d5 	bl	80113b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801120a:	e7f1      	b.n	80111f0 <prvTimerTask+0x8>

0801120c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011216:	f7ff fa15 	bl	8010644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801121a:	f107 0308 	add.w	r3, r7, #8
 801121e:	4618      	mov	r0, r3
 8011220:	f000 f866 	bl	80112f0 <prvSampleTimeNow>
 8011224:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d130      	bne.n	801128e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d10a      	bne.n	8011248 <prvProcessTimerOrBlockTask+0x3c>
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	429a      	cmp	r2, r3
 8011238:	d806      	bhi.n	8011248 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801123a:	f7ff fa11 	bl	8010660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801123e:	68f9      	ldr	r1, [r7, #12]
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ff83 	bl	801114c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011246:	e024      	b.n	8011292 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d008      	beq.n	8011260 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801124e:	4b13      	ldr	r3, [pc, #76]	; (801129c <prvProcessTimerOrBlockTask+0x90>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d101      	bne.n	801125c <prvProcessTimerOrBlockTask+0x50>
 8011258:	2301      	movs	r3, #1
 801125a:	e000      	b.n	801125e <prvProcessTimerOrBlockTask+0x52>
 801125c:	2300      	movs	r3, #0
 801125e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011260:	4b0f      	ldr	r3, [pc, #60]	; (80112a0 <prvProcessTimerOrBlockTask+0x94>)
 8011262:	6818      	ldr	r0, [r3, #0]
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	683a      	ldr	r2, [r7, #0]
 801126c:	4619      	mov	r1, r3
 801126e:	f7fe ff6b 	bl	8010148 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011272:	f7ff f9f5 	bl	8010660 <xTaskResumeAll>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10a      	bne.n	8011292 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801127c:	4b09      	ldr	r3, [pc, #36]	; (80112a4 <prvProcessTimerOrBlockTask+0x98>)
 801127e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011282:	601a      	str	r2, [r3, #0]
 8011284:	f3bf 8f4f 	dsb	sy
 8011288:	f3bf 8f6f 	isb	sy
}
 801128c:	e001      	b.n	8011292 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801128e:	f7ff f9e7 	bl	8010660 <xTaskResumeAll>
}
 8011292:	bf00      	nop
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	20004348 	.word	0x20004348
 80112a0:	2000434c 	.word	0x2000434c
 80112a4:	e000ed04 	.word	0xe000ed04

080112a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80112b0:	4b0e      	ldr	r3, [pc, #56]	; (80112ec <prvGetNextExpireTime+0x44>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d101      	bne.n	80112be <prvGetNextExpireTime+0x16>
 80112ba:	2201      	movs	r2, #1
 80112bc:	e000      	b.n	80112c0 <prvGetNextExpireTime+0x18>
 80112be:	2200      	movs	r2, #0
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d105      	bne.n	80112d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80112cc:	4b07      	ldr	r3, [pc, #28]	; (80112ec <prvGetNextExpireTime+0x44>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	68db      	ldr	r3, [r3, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	60fb      	str	r3, [r7, #12]
 80112d6:	e001      	b.n	80112dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80112d8:	2300      	movs	r3, #0
 80112da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80112dc:	68fb      	ldr	r3, [r7, #12]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	20004344 	.word	0x20004344

080112f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80112f8:	f7ff fa52 	bl	80107a0 <xTaskGetTickCount>
 80112fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80112fe:	4b0b      	ldr	r3, [pc, #44]	; (801132c <prvSampleTimeNow+0x3c>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	68fa      	ldr	r2, [r7, #12]
 8011304:	429a      	cmp	r2, r3
 8011306:	d205      	bcs.n	8011314 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011308:	f000 f93c 	bl	8011584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2201      	movs	r2, #1
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	e002      	b.n	801131a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2200      	movs	r2, #0
 8011318:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801131a:	4a04      	ldr	r2, [pc, #16]	; (801132c <prvSampleTimeNow+0x3c>)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011320:	68fb      	ldr	r3, [r7, #12]
}
 8011322:	4618      	mov	r0, r3
 8011324:	3710      	adds	r7, #16
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	20004354 	.word	0x20004354

08011330 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b086      	sub	sp, #24
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
 801133c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801133e:	2300      	movs	r3, #0
 8011340:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	68ba      	ldr	r2, [r7, #8]
 8011346:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	68fa      	ldr	r2, [r7, #12]
 801134c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801134e:	68ba      	ldr	r2, [r7, #8]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	429a      	cmp	r2, r3
 8011354:	d812      	bhi.n	801137c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	1ad2      	subs	r2, r2, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	699b      	ldr	r3, [r3, #24]
 8011360:	429a      	cmp	r2, r3
 8011362:	d302      	bcc.n	801136a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011364:	2301      	movs	r3, #1
 8011366:	617b      	str	r3, [r7, #20]
 8011368:	e01b      	b.n	80113a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801136a:	4b10      	ldr	r3, [pc, #64]	; (80113ac <prvInsertTimerInActiveList+0x7c>)
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3304      	adds	r3, #4
 8011372:	4619      	mov	r1, r3
 8011374:	4610      	mov	r0, r2
 8011376:	f7fe f9ae 	bl	800f6d6 <vListInsert>
 801137a:	e012      	b.n	80113a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	429a      	cmp	r2, r3
 8011382:	d206      	bcs.n	8011392 <prvInsertTimerInActiveList+0x62>
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	429a      	cmp	r2, r3
 801138a:	d302      	bcc.n	8011392 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801138c:	2301      	movs	r3, #1
 801138e:	617b      	str	r3, [r7, #20]
 8011390:	e007      	b.n	80113a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011392:	4b07      	ldr	r3, [pc, #28]	; (80113b0 <prvInsertTimerInActiveList+0x80>)
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	3304      	adds	r3, #4
 801139a:	4619      	mov	r1, r3
 801139c:	4610      	mov	r0, r2
 801139e:	f7fe f99a 	bl	800f6d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80113a2:	697b      	ldr	r3, [r7, #20]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3718      	adds	r7, #24
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	20004348 	.word	0x20004348
 80113b0:	20004344 	.word	0x20004344

080113b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b08e      	sub	sp, #56	; 0x38
 80113b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80113ba:	e0d0      	b.n	801155e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	da1a      	bge.n	80113f8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80113c2:	1d3b      	adds	r3, r7, #4
 80113c4:	3304      	adds	r3, #4
 80113c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80113c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d10c      	bne.n	80113e8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	b672      	cpsid	i
 80113d4:	f383 8811 	msr	BASEPRI, r3
 80113d8:	f3bf 8f6f 	isb	sy
 80113dc:	f3bf 8f4f 	dsb	sy
 80113e0:	b662      	cpsie	i
 80113e2:	61fb      	str	r3, [r7, #28]
}
 80113e4:	bf00      	nop
 80113e6:	e7fe      	b.n	80113e6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80113e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ee:	6850      	ldr	r0, [r2, #4]
 80113f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113f2:	6892      	ldr	r2, [r2, #8]
 80113f4:	4611      	mov	r1, r2
 80113f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f2c0 80af 	blt.w	801155e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011406:	695b      	ldr	r3, [r3, #20]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d004      	beq.n	8011416 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	3304      	adds	r3, #4
 8011410:	4618      	mov	r0, r3
 8011412:	f7fe f999 	bl	800f748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011416:	463b      	mov	r3, r7
 8011418:	4618      	mov	r0, r3
 801141a:	f7ff ff69 	bl	80112f0 <prvSampleTimeNow>
 801141e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2b09      	cmp	r3, #9
 8011424:	f200 809a 	bhi.w	801155c <prvProcessReceivedCommands+0x1a8>
 8011428:	a201      	add	r2, pc, #4	; (adr r2, 8011430 <prvProcessReceivedCommands+0x7c>)
 801142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801142e:	bf00      	nop
 8011430:	08011459 	.word	0x08011459
 8011434:	08011459 	.word	0x08011459
 8011438:	08011459 	.word	0x08011459
 801143c:	080114d1 	.word	0x080114d1
 8011440:	080114e5 	.word	0x080114e5
 8011444:	08011533 	.word	0x08011533
 8011448:	08011459 	.word	0x08011459
 801144c:	08011459 	.word	0x08011459
 8011450:	080114d1 	.word	0x080114d1
 8011454:	080114e5 	.word	0x080114e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801145e:	f043 0301 	orr.w	r3, r3, #1
 8011462:	b2da      	uxtb	r2, r3
 8011464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801146a:	68ba      	ldr	r2, [r7, #8]
 801146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146e:	699b      	ldr	r3, [r3, #24]
 8011470:	18d1      	adds	r1, r2, r3
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011478:	f7ff ff5a 	bl	8011330 <prvInsertTimerInActiveList>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d06d      	beq.n	801155e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011484:	6a1b      	ldr	r3, [r3, #32]
 8011486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011488:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011490:	f003 0304 	and.w	r3, r3, #4
 8011494:	2b00      	cmp	r3, #0
 8011496:	d062      	beq.n	801155e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011498:	68ba      	ldr	r2, [r7, #8]
 801149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149c:	699b      	ldr	r3, [r3, #24]
 801149e:	441a      	add	r2, r3
 80114a0:	2300      	movs	r3, #0
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	2300      	movs	r3, #0
 80114a6:	2100      	movs	r1, #0
 80114a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114aa:	f7ff fdff 	bl	80110ac <xTimerGenericCommand>
 80114ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80114b0:	6a3b      	ldr	r3, [r7, #32]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d153      	bne.n	801155e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80114b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ba:	b672      	cpsid	i
 80114bc:	f383 8811 	msr	BASEPRI, r3
 80114c0:	f3bf 8f6f 	isb	sy
 80114c4:	f3bf 8f4f 	dsb	sy
 80114c8:	b662      	cpsie	i
 80114ca:	61bb      	str	r3, [r7, #24]
}
 80114cc:	bf00      	nop
 80114ce:	e7fe      	b.n	80114ce <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114d6:	f023 0301 	bic.w	r3, r3, #1
 80114da:	b2da      	uxtb	r2, r3
 80114dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80114e2:	e03c      	b.n	801155e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80114e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114ea:	f043 0301 	orr.w	r3, r3, #1
 80114ee:	b2da      	uxtb	r2, r3
 80114f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80114f6:	68ba      	ldr	r2, [r7, #8]
 80114f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80114fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fe:	699b      	ldr	r3, [r3, #24]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10c      	bne.n	801151e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8011504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011508:	b672      	cpsid	i
 801150a:	f383 8811 	msr	BASEPRI, r3
 801150e:	f3bf 8f6f 	isb	sy
 8011512:	f3bf 8f4f 	dsb	sy
 8011516:	b662      	cpsie	i
 8011518:	617b      	str	r3, [r7, #20]
}
 801151a:	bf00      	nop
 801151c:	e7fe      	b.n	801151c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011520:	699a      	ldr	r2, [r3, #24]
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	18d1      	adds	r1, r2, r3
 8011526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801152a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801152c:	f7ff ff00 	bl	8011330 <prvInsertTimerInActiveList>
					break;
 8011530:	e015      	b.n	801155e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011538:	f003 0302 	and.w	r3, r3, #2
 801153c:	2b00      	cmp	r3, #0
 801153e:	d103      	bne.n	8011548 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8011540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011542:	f000 fbc9 	bl	8011cd8 <vPortFree>
 8011546:	e00a      	b.n	801155e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801154e:	f023 0301 	bic.w	r3, r3, #1
 8011552:	b2da      	uxtb	r2, r3
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801155a:	e000      	b.n	801155e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 801155c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801155e:	4b08      	ldr	r3, [pc, #32]	; (8011580 <prvProcessReceivedCommands+0x1cc>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	1d39      	adds	r1, r7, #4
 8011564:	2200      	movs	r2, #0
 8011566:	4618      	mov	r0, r3
 8011568:	f7fe fbce 	bl	800fd08 <xQueueReceive>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	f47f af24 	bne.w	80113bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop
 8011578:	3730      	adds	r7, #48	; 0x30
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	2000434c 	.word	0x2000434c

08011584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801158a:	e04a      	b.n	8011622 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801158c:	4b2e      	ldr	r3, [pc, #184]	; (8011648 <prvSwitchTimerLists+0xc4>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011596:	4b2c      	ldr	r3, [pc, #176]	; (8011648 <prvSwitchTimerLists+0xc4>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	3304      	adds	r3, #4
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fe f8cf 	bl	800f748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6a1b      	ldr	r3, [r3, #32]
 80115ae:	68f8      	ldr	r0, [r7, #12]
 80115b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115b8:	f003 0304 	and.w	r3, r3, #4
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d030      	beq.n	8011622 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	699b      	ldr	r3, [r3, #24]
 80115c4:	693a      	ldr	r2, [r7, #16]
 80115c6:	4413      	add	r3, r2
 80115c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d90e      	bls.n	80115f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115de:	4b1a      	ldr	r3, [pc, #104]	; (8011648 <prvSwitchTimerLists+0xc4>)
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	3304      	adds	r3, #4
 80115e6:	4619      	mov	r1, r3
 80115e8:	4610      	mov	r0, r2
 80115ea:	f7fe f874 	bl	800f6d6 <vListInsert>
 80115ee:	e018      	b.n	8011622 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80115f0:	2300      	movs	r3, #0
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	2300      	movs	r3, #0
 80115f6:	693a      	ldr	r2, [r7, #16]
 80115f8:	2100      	movs	r1, #0
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f7ff fd56 	bl	80110ac <xTimerGenericCommand>
 8011600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10c      	bne.n	8011622 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	b672      	cpsid	i
 801160e:	f383 8811 	msr	BASEPRI, r3
 8011612:	f3bf 8f6f 	isb	sy
 8011616:	f3bf 8f4f 	dsb	sy
 801161a:	b662      	cpsie	i
 801161c:	603b      	str	r3, [r7, #0]
}
 801161e:	bf00      	nop
 8011620:	e7fe      	b.n	8011620 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011622:	4b09      	ldr	r3, [pc, #36]	; (8011648 <prvSwitchTimerLists+0xc4>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d1af      	bne.n	801158c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801162c:	4b06      	ldr	r3, [pc, #24]	; (8011648 <prvSwitchTimerLists+0xc4>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011632:	4b06      	ldr	r3, [pc, #24]	; (801164c <prvSwitchTimerLists+0xc8>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4a04      	ldr	r2, [pc, #16]	; (8011648 <prvSwitchTimerLists+0xc4>)
 8011638:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801163a:	4a04      	ldr	r2, [pc, #16]	; (801164c <prvSwitchTimerLists+0xc8>)
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	6013      	str	r3, [r2, #0]
}
 8011640:	bf00      	nop
 8011642:	3718      	adds	r7, #24
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	20004344 	.word	0x20004344
 801164c:	20004348 	.word	0x20004348

08011650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011656:	f000 f949 	bl	80118ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801165a:	4b15      	ldr	r3, [pc, #84]	; (80116b0 <prvCheckForValidListAndQueue+0x60>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d120      	bne.n	80116a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011662:	4814      	ldr	r0, [pc, #80]	; (80116b4 <prvCheckForValidListAndQueue+0x64>)
 8011664:	f7fd ffe6 	bl	800f634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011668:	4813      	ldr	r0, [pc, #76]	; (80116b8 <prvCheckForValidListAndQueue+0x68>)
 801166a:	f7fd ffe3 	bl	800f634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801166e:	4b13      	ldr	r3, [pc, #76]	; (80116bc <prvCheckForValidListAndQueue+0x6c>)
 8011670:	4a10      	ldr	r2, [pc, #64]	; (80116b4 <prvCheckForValidListAndQueue+0x64>)
 8011672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011674:	4b12      	ldr	r3, [pc, #72]	; (80116c0 <prvCheckForValidListAndQueue+0x70>)
 8011676:	4a10      	ldr	r2, [pc, #64]	; (80116b8 <prvCheckForValidListAndQueue+0x68>)
 8011678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801167a:	2300      	movs	r3, #0
 801167c:	9300      	str	r3, [sp, #0]
 801167e:	4b11      	ldr	r3, [pc, #68]	; (80116c4 <prvCheckForValidListAndQueue+0x74>)
 8011680:	4a11      	ldr	r2, [pc, #68]	; (80116c8 <prvCheckForValidListAndQueue+0x78>)
 8011682:	2110      	movs	r1, #16
 8011684:	200a      	movs	r0, #10
 8011686:	f7fe f8f3 	bl	800f870 <xQueueGenericCreateStatic>
 801168a:	4603      	mov	r3, r0
 801168c:	4a08      	ldr	r2, [pc, #32]	; (80116b0 <prvCheckForValidListAndQueue+0x60>)
 801168e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011690:	4b07      	ldr	r3, [pc, #28]	; (80116b0 <prvCheckForValidListAndQueue+0x60>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d005      	beq.n	80116a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011698:	4b05      	ldr	r3, [pc, #20]	; (80116b0 <prvCheckForValidListAndQueue+0x60>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	490b      	ldr	r1, [pc, #44]	; (80116cc <prvCheckForValidListAndQueue+0x7c>)
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fe fd28 	bl	80100f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80116a4:	f000 f956 	bl	8011954 <vPortExitCritical>
}
 80116a8:	bf00      	nop
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	2000434c 	.word	0x2000434c
 80116b4:	2000431c 	.word	0x2000431c
 80116b8:	20004330 	.word	0x20004330
 80116bc:	20004344 	.word	0x20004344
 80116c0:	20004348 	.word	0x20004348
 80116c4:	200043f8 	.word	0x200043f8
 80116c8:	20004358 	.word	0x20004358
 80116cc:	08014bd4 	.word	0x08014bd4

080116d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	3b04      	subs	r3, #4
 80116e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80116e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	3b04      	subs	r3, #4
 80116ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	f023 0201 	bic.w	r2, r3, #1
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	3b04      	subs	r3, #4
 80116fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011700:	4a0c      	ldr	r2, [pc, #48]	; (8011734 <pxPortInitialiseStack+0x64>)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	3b14      	subs	r3, #20
 801170a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	3b04      	subs	r3, #4
 8011716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f06f 0202 	mvn.w	r2, #2
 801171e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	3b20      	subs	r3, #32
 8011724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011726:	68fb      	ldr	r3, [r7, #12]
}
 8011728:	4618      	mov	r0, r3
 801172a:	3714      	adds	r7, #20
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	08011739 	.word	0x08011739

08011738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011738:	b480      	push	{r7}
 801173a:	b085      	sub	sp, #20
 801173c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801173e:	2300      	movs	r3, #0
 8011740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011742:	4b14      	ldr	r3, [pc, #80]	; (8011794 <prvTaskExitError+0x5c>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801174a:	d00c      	beq.n	8011766 <prvTaskExitError+0x2e>
	__asm volatile
 801174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011750:	b672      	cpsid	i
 8011752:	f383 8811 	msr	BASEPRI, r3
 8011756:	f3bf 8f6f 	isb	sy
 801175a:	f3bf 8f4f 	dsb	sy
 801175e:	b662      	cpsie	i
 8011760:	60fb      	str	r3, [r7, #12]
}
 8011762:	bf00      	nop
 8011764:	e7fe      	b.n	8011764 <prvTaskExitError+0x2c>
	__asm volatile
 8011766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176a:	b672      	cpsid	i
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	b662      	cpsie	i
 801177a:	60bb      	str	r3, [r7, #8]
}
 801177c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801177e:	bf00      	nop
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d0fc      	beq.n	8011780 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011786:	bf00      	nop
 8011788:	bf00      	nop
 801178a:	3714      	adds	r7, #20
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr
 8011794:	2000025c 	.word	0x2000025c
	...

080117a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80117a0:	4b07      	ldr	r3, [pc, #28]	; (80117c0 <pxCurrentTCBConst2>)
 80117a2:	6819      	ldr	r1, [r3, #0]
 80117a4:	6808      	ldr	r0, [r1, #0]
 80117a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117aa:	f380 8809 	msr	PSP, r0
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f04f 0000 	mov.w	r0, #0
 80117b6:	f380 8811 	msr	BASEPRI, r0
 80117ba:	4770      	bx	lr
 80117bc:	f3af 8000 	nop.w

080117c0 <pxCurrentTCBConst2>:
 80117c0:	20003e1c 	.word	0x20003e1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80117c4:	bf00      	nop
 80117c6:	bf00      	nop

080117c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80117c8:	4808      	ldr	r0, [pc, #32]	; (80117ec <prvPortStartFirstTask+0x24>)
 80117ca:	6800      	ldr	r0, [r0, #0]
 80117cc:	6800      	ldr	r0, [r0, #0]
 80117ce:	f380 8808 	msr	MSP, r0
 80117d2:	f04f 0000 	mov.w	r0, #0
 80117d6:	f380 8814 	msr	CONTROL, r0
 80117da:	b662      	cpsie	i
 80117dc:	b661      	cpsie	f
 80117de:	f3bf 8f4f 	dsb	sy
 80117e2:	f3bf 8f6f 	isb	sy
 80117e6:	df00      	svc	0
 80117e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80117ea:	bf00      	nop
 80117ec:	e000ed08 	.word	0xe000ed08

080117f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80117f6:	4b37      	ldr	r3, [pc, #220]	; (80118d4 <xPortStartScheduler+0xe4>)
 80117f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	22ff      	movs	r2, #255	; 0xff
 8011806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	b2db      	uxtb	r3, r3
 801180e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011810:	78fb      	ldrb	r3, [r7, #3]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011818:	b2da      	uxtb	r2, r3
 801181a:	4b2f      	ldr	r3, [pc, #188]	; (80118d8 <xPortStartScheduler+0xe8>)
 801181c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801181e:	4b2f      	ldr	r3, [pc, #188]	; (80118dc <xPortStartScheduler+0xec>)
 8011820:	2207      	movs	r2, #7
 8011822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011824:	e009      	b.n	801183a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011826:	4b2d      	ldr	r3, [pc, #180]	; (80118dc <xPortStartScheduler+0xec>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	3b01      	subs	r3, #1
 801182c:	4a2b      	ldr	r2, [pc, #172]	; (80118dc <xPortStartScheduler+0xec>)
 801182e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011830:	78fb      	ldrb	r3, [r7, #3]
 8011832:	b2db      	uxtb	r3, r3
 8011834:	005b      	lsls	r3, r3, #1
 8011836:	b2db      	uxtb	r3, r3
 8011838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801183a:	78fb      	ldrb	r3, [r7, #3]
 801183c:	b2db      	uxtb	r3, r3
 801183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011842:	2b80      	cmp	r3, #128	; 0x80
 8011844:	d0ef      	beq.n	8011826 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011846:	4b25      	ldr	r3, [pc, #148]	; (80118dc <xPortStartScheduler+0xec>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f1c3 0307 	rsb	r3, r3, #7
 801184e:	2b04      	cmp	r3, #4
 8011850:	d00c      	beq.n	801186c <xPortStartScheduler+0x7c>
	__asm volatile
 8011852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011856:	b672      	cpsid	i
 8011858:	f383 8811 	msr	BASEPRI, r3
 801185c:	f3bf 8f6f 	isb	sy
 8011860:	f3bf 8f4f 	dsb	sy
 8011864:	b662      	cpsie	i
 8011866:	60bb      	str	r3, [r7, #8]
}
 8011868:	bf00      	nop
 801186a:	e7fe      	b.n	801186a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801186c:	4b1b      	ldr	r3, [pc, #108]	; (80118dc <xPortStartScheduler+0xec>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	021b      	lsls	r3, r3, #8
 8011872:	4a1a      	ldr	r2, [pc, #104]	; (80118dc <xPortStartScheduler+0xec>)
 8011874:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011876:	4b19      	ldr	r3, [pc, #100]	; (80118dc <xPortStartScheduler+0xec>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801187e:	4a17      	ldr	r2, [pc, #92]	; (80118dc <xPortStartScheduler+0xec>)
 8011880:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	b2da      	uxtb	r2, r3
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801188a:	4b15      	ldr	r3, [pc, #84]	; (80118e0 <xPortStartScheduler+0xf0>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	4a14      	ldr	r2, [pc, #80]	; (80118e0 <xPortStartScheduler+0xf0>)
 8011890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011894:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011896:	4b12      	ldr	r3, [pc, #72]	; (80118e0 <xPortStartScheduler+0xf0>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4a11      	ldr	r2, [pc, #68]	; (80118e0 <xPortStartScheduler+0xf0>)
 801189c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80118a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80118a2:	f000 f8dd 	bl	8011a60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80118a6:	4b0f      	ldr	r3, [pc, #60]	; (80118e4 <xPortStartScheduler+0xf4>)
 80118a8:	2200      	movs	r2, #0
 80118aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80118ac:	f000 f8fc 	bl	8011aa8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80118b0:	4b0d      	ldr	r3, [pc, #52]	; (80118e8 <xPortStartScheduler+0xf8>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	4a0c      	ldr	r2, [pc, #48]	; (80118e8 <xPortStartScheduler+0xf8>)
 80118b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80118ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80118bc:	f7ff ff84 	bl	80117c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80118c0:	f7ff f84c 	bl	801095c <vTaskSwitchContext>
	prvTaskExitError();
 80118c4:	f7ff ff38 	bl	8011738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80118c8:	2300      	movs	r3, #0
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3710      	adds	r7, #16
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	e000e400 	.word	0xe000e400
 80118d8:	20004448 	.word	0x20004448
 80118dc:	2000444c 	.word	0x2000444c
 80118e0:	e000ed20 	.word	0xe000ed20
 80118e4:	2000025c 	.word	0x2000025c
 80118e8:	e000ef34 	.word	0xe000ef34

080118ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
	__asm volatile
 80118f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f6:	b672      	cpsid	i
 80118f8:	f383 8811 	msr	BASEPRI, r3
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	b662      	cpsie	i
 8011906:	607b      	str	r3, [r7, #4]
}
 8011908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801190a:	4b10      	ldr	r3, [pc, #64]	; (801194c <vPortEnterCritical+0x60>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	3301      	adds	r3, #1
 8011910:	4a0e      	ldr	r2, [pc, #56]	; (801194c <vPortEnterCritical+0x60>)
 8011912:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011914:	4b0d      	ldr	r3, [pc, #52]	; (801194c <vPortEnterCritical+0x60>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b01      	cmp	r3, #1
 801191a:	d111      	bne.n	8011940 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801191c:	4b0c      	ldr	r3, [pc, #48]	; (8011950 <vPortEnterCritical+0x64>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	b2db      	uxtb	r3, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00c      	beq.n	8011940 <vPortEnterCritical+0x54>
	__asm volatile
 8011926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801192a:	b672      	cpsid	i
 801192c:	f383 8811 	msr	BASEPRI, r3
 8011930:	f3bf 8f6f 	isb	sy
 8011934:	f3bf 8f4f 	dsb	sy
 8011938:	b662      	cpsie	i
 801193a:	603b      	str	r3, [r7, #0]
}
 801193c:	bf00      	nop
 801193e:	e7fe      	b.n	801193e <vPortEnterCritical+0x52>
	}
}
 8011940:	bf00      	nop
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	2000025c 	.word	0x2000025c
 8011950:	e000ed04 	.word	0xe000ed04

08011954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801195a:	4b13      	ldr	r3, [pc, #76]	; (80119a8 <vPortExitCritical+0x54>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10c      	bne.n	801197c <vPortExitCritical+0x28>
	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	b672      	cpsid	i
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	b662      	cpsie	i
 8011976:	607b      	str	r3, [r7, #4]
}
 8011978:	bf00      	nop
 801197a:	e7fe      	b.n	801197a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801197c:	4b0a      	ldr	r3, [pc, #40]	; (80119a8 <vPortExitCritical+0x54>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	3b01      	subs	r3, #1
 8011982:	4a09      	ldr	r2, [pc, #36]	; (80119a8 <vPortExitCritical+0x54>)
 8011984:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011986:	4b08      	ldr	r3, [pc, #32]	; (80119a8 <vPortExitCritical+0x54>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d105      	bne.n	801199a <vPortExitCritical+0x46>
 801198e:	2300      	movs	r3, #0
 8011990:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	f383 8811 	msr	BASEPRI, r3
}
 8011998:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801199a:	bf00      	nop
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	2000025c 	.word	0x2000025c
 80119ac:	00000000 	.word	0x00000000

080119b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80119b0:	f3ef 8009 	mrs	r0, PSP
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	4b15      	ldr	r3, [pc, #84]	; (8011a10 <pxCurrentTCBConst>)
 80119ba:	681a      	ldr	r2, [r3, #0]
 80119bc:	f01e 0f10 	tst.w	lr, #16
 80119c0:	bf08      	it	eq
 80119c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ca:	6010      	str	r0, [r2, #0]
 80119cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80119d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80119d4:	b672      	cpsid	i
 80119d6:	f380 8811 	msr	BASEPRI, r0
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	f3bf 8f6f 	isb	sy
 80119e2:	b662      	cpsie	i
 80119e4:	f7fe ffba 	bl	801095c <vTaskSwitchContext>
 80119e8:	f04f 0000 	mov.w	r0, #0
 80119ec:	f380 8811 	msr	BASEPRI, r0
 80119f0:	bc09      	pop	{r0, r3}
 80119f2:	6819      	ldr	r1, [r3, #0]
 80119f4:	6808      	ldr	r0, [r1, #0]
 80119f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119fa:	f01e 0f10 	tst.w	lr, #16
 80119fe:	bf08      	it	eq
 8011a00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a04:	f380 8809 	msr	PSP, r0
 8011a08:	f3bf 8f6f 	isb	sy
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop

08011a10 <pxCurrentTCBConst>:
 8011a10:	20003e1c 	.word	0x20003e1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011a14:	bf00      	nop
 8011a16:	bf00      	nop

08011a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a22:	b672      	cpsid	i
 8011a24:	f383 8811 	msr	BASEPRI, r3
 8011a28:	f3bf 8f6f 	isb	sy
 8011a2c:	f3bf 8f4f 	dsb	sy
 8011a30:	b662      	cpsie	i
 8011a32:	607b      	str	r3, [r7, #4]
}
 8011a34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011a36:	f7fe fed5 	bl	80107e4 <xTaskIncrementTick>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d003      	beq.n	8011a48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a40:	4b06      	ldr	r3, [pc, #24]	; (8011a5c <SysTick_Handler+0x44>)
 8011a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	2300      	movs	r3, #0
 8011a4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	f383 8811 	msr	BASEPRI, r3
}
 8011a52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011a54:	bf00      	nop
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	e000ed04 	.word	0xe000ed04

08011a60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a60:	b480      	push	{r7}
 8011a62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a64:	4b0b      	ldr	r3, [pc, #44]	; (8011a94 <vPortSetupTimerInterrupt+0x34>)
 8011a66:	2200      	movs	r2, #0
 8011a68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a6a:	4b0b      	ldr	r3, [pc, #44]	; (8011a98 <vPortSetupTimerInterrupt+0x38>)
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a70:	4b0a      	ldr	r3, [pc, #40]	; (8011a9c <vPortSetupTimerInterrupt+0x3c>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4a0a      	ldr	r2, [pc, #40]	; (8011aa0 <vPortSetupTimerInterrupt+0x40>)
 8011a76:	fba2 2303 	umull	r2, r3, r2, r3
 8011a7a:	099b      	lsrs	r3, r3, #6
 8011a7c:	4a09      	ldr	r2, [pc, #36]	; (8011aa4 <vPortSetupTimerInterrupt+0x44>)
 8011a7e:	3b01      	subs	r3, #1
 8011a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011a82:	4b04      	ldr	r3, [pc, #16]	; (8011a94 <vPortSetupTimerInterrupt+0x34>)
 8011a84:	2207      	movs	r2, #7
 8011a86:	601a      	str	r2, [r3, #0]
}
 8011a88:	bf00      	nop
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr
 8011a92:	bf00      	nop
 8011a94:	e000e010 	.word	0xe000e010
 8011a98:	e000e018 	.word	0xe000e018
 8011a9c:	20000250 	.word	0x20000250
 8011aa0:	10624dd3 	.word	0x10624dd3
 8011aa4:	e000e014 	.word	0xe000e014

08011aa8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011aa8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011ab8 <vPortEnableVFP+0x10>
 8011aac:	6801      	ldr	r1, [r0, #0]
 8011aae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011ab2:	6001      	str	r1, [r0, #0]
 8011ab4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011ab6:	bf00      	nop
 8011ab8:	e000ed88 	.word	0xe000ed88

08011abc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011abc:	b480      	push	{r7}
 8011abe:	b085      	sub	sp, #20
 8011ac0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011ac2:	f3ef 8305 	mrs	r3, IPSR
 8011ac6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2b0f      	cmp	r3, #15
 8011acc:	d916      	bls.n	8011afc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011ace:	4a19      	ldr	r2, [pc, #100]	; (8011b34 <vPortValidateInterruptPriority+0x78>)
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	4413      	add	r3, r2
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ad8:	4b17      	ldr	r3, [pc, #92]	; (8011b38 <vPortValidateInterruptPriority+0x7c>)
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	7afa      	ldrb	r2, [r7, #11]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d20c      	bcs.n	8011afc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae6:	b672      	cpsid	i
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	b662      	cpsie	i
 8011af6:	607b      	str	r3, [r7, #4]
}
 8011af8:	bf00      	nop
 8011afa:	e7fe      	b.n	8011afa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011afc:	4b0f      	ldr	r3, [pc, #60]	; (8011b3c <vPortValidateInterruptPriority+0x80>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011b04:	4b0e      	ldr	r3, [pc, #56]	; (8011b40 <vPortValidateInterruptPriority+0x84>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d90c      	bls.n	8011b26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b10:	b672      	cpsid	i
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	b662      	cpsie	i
 8011b20:	603b      	str	r3, [r7, #0]
}
 8011b22:	bf00      	nop
 8011b24:	e7fe      	b.n	8011b24 <vPortValidateInterruptPriority+0x68>
	}
 8011b26:	bf00      	nop
 8011b28:	3714      	adds	r7, #20
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	e000e3f0 	.word	0xe000e3f0
 8011b38:	20004448 	.word	0x20004448
 8011b3c:	e000ed0c 	.word	0xe000ed0c
 8011b40:	2000444c 	.word	0x2000444c

08011b44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08a      	sub	sp, #40	; 0x28
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011b50:	f7fe fd78 	bl	8010644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011b54:	4b5b      	ldr	r3, [pc, #364]	; (8011cc4 <pvPortMalloc+0x180>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d101      	bne.n	8011b60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011b5c:	f000 f91a 	bl	8011d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b60:	4b59      	ldr	r3, [pc, #356]	; (8011cc8 <pvPortMalloc+0x184>)
 8011b62:	681a      	ldr	r2, [r3, #0]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	4013      	ands	r3, r2
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	f040 8092 	bne.w	8011c92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d01f      	beq.n	8011bb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011b74:	2208      	movs	r2, #8
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	4413      	add	r3, r2
 8011b7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f003 0307 	and.w	r3, r3, #7
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d016      	beq.n	8011bb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f023 0307 	bic.w	r3, r3, #7
 8011b8c:	3308      	adds	r3, #8
 8011b8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f003 0307 	and.w	r3, r3, #7
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00c      	beq.n	8011bb4 <pvPortMalloc+0x70>
	__asm volatile
 8011b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9e:	b672      	cpsid	i
 8011ba0:	f383 8811 	msr	BASEPRI, r3
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	b662      	cpsie	i
 8011bae:	617b      	str	r3, [r7, #20]
}
 8011bb0:	bf00      	nop
 8011bb2:	e7fe      	b.n	8011bb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d06b      	beq.n	8011c92 <pvPortMalloc+0x14e>
 8011bba:	4b44      	ldr	r3, [pc, #272]	; (8011ccc <pvPortMalloc+0x188>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d866      	bhi.n	8011c92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011bc4:	4b42      	ldr	r3, [pc, #264]	; (8011cd0 <pvPortMalloc+0x18c>)
 8011bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011bc8:	4b41      	ldr	r3, [pc, #260]	; (8011cd0 <pvPortMalloc+0x18c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bce:	e004      	b.n	8011bda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d903      	bls.n	8011bec <pvPortMalloc+0xa8>
 8011be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d1f1      	bne.n	8011bd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011bec:	4b35      	ldr	r3, [pc, #212]	; (8011cc4 <pvPortMalloc+0x180>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d04d      	beq.n	8011c92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011bf6:	6a3b      	ldr	r3, [r7, #32]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	2208      	movs	r2, #8
 8011bfc:	4413      	add	r3, r2
 8011bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	6a3b      	ldr	r3, [r7, #32]
 8011c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	685a      	ldr	r2, [r3, #4]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	1ad2      	subs	r2, r2, r3
 8011c10:	2308      	movs	r3, #8
 8011c12:	005b      	lsls	r3, r3, #1
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d921      	bls.n	8011c5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	f003 0307 	and.w	r3, r3, #7
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00c      	beq.n	8011c44 <pvPortMalloc+0x100>
	__asm volatile
 8011c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2e:	b672      	cpsid	i
 8011c30:	f383 8811 	msr	BASEPRI, r3
 8011c34:	f3bf 8f6f 	isb	sy
 8011c38:	f3bf 8f4f 	dsb	sy
 8011c3c:	b662      	cpsie	i
 8011c3e:	613b      	str	r3, [r7, #16]
}
 8011c40:	bf00      	nop
 8011c42:	e7fe      	b.n	8011c42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	685a      	ldr	r2, [r3, #4]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	1ad2      	subs	r2, r2, r3
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011c56:	69b8      	ldr	r0, [r7, #24]
 8011c58:	f000 f8fe 	bl	8011e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011c5c:	4b1b      	ldr	r3, [pc, #108]	; (8011ccc <pvPortMalloc+0x188>)
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	4a19      	ldr	r2, [pc, #100]	; (8011ccc <pvPortMalloc+0x188>)
 8011c68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011c6a:	4b18      	ldr	r3, [pc, #96]	; (8011ccc <pvPortMalloc+0x188>)
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	4b19      	ldr	r3, [pc, #100]	; (8011cd4 <pvPortMalloc+0x190>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d203      	bcs.n	8011c7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011c76:	4b15      	ldr	r3, [pc, #84]	; (8011ccc <pvPortMalloc+0x188>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4a16      	ldr	r2, [pc, #88]	; (8011cd4 <pvPortMalloc+0x190>)
 8011c7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c80:	685a      	ldr	r2, [r3, #4]
 8011c82:	4b11      	ldr	r3, [pc, #68]	; (8011cc8 <pvPortMalloc+0x184>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	431a      	orrs	r2, r3
 8011c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8e:	2200      	movs	r2, #0
 8011c90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011c92:	f7fe fce5 	bl	8010660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	f003 0307 	and.w	r3, r3, #7
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d00c      	beq.n	8011cba <pvPortMalloc+0x176>
	__asm volatile
 8011ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca4:	b672      	cpsid	i
 8011ca6:	f383 8811 	msr	BASEPRI, r3
 8011caa:	f3bf 8f6f 	isb	sy
 8011cae:	f3bf 8f4f 	dsb	sy
 8011cb2:	b662      	cpsie	i
 8011cb4:	60fb      	str	r3, [r7, #12]
}
 8011cb6:	bf00      	nop
 8011cb8:	e7fe      	b.n	8011cb8 <pvPortMalloc+0x174>
	return pvReturn;
 8011cba:	69fb      	ldr	r3, [r7, #28]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3728      	adds	r7, #40	; 0x28
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	20008058 	.word	0x20008058
 8011cc8:	20008064 	.word	0x20008064
 8011ccc:	2000805c 	.word	0x2000805c
 8011cd0:	20008050 	.word	0x20008050
 8011cd4:	20008060 	.word	0x20008060

08011cd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b086      	sub	sp, #24
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d04c      	beq.n	8011d84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011cea:	2308      	movs	r3, #8
 8011cec:	425b      	negs	r3, r3
 8011cee:	697a      	ldr	r2, [r7, #20]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	685a      	ldr	r2, [r3, #4]
 8011cfc:	4b23      	ldr	r3, [pc, #140]	; (8011d8c <vPortFree+0xb4>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4013      	ands	r3, r2
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10c      	bne.n	8011d20 <vPortFree+0x48>
	__asm volatile
 8011d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0a:	b672      	cpsid	i
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	b662      	cpsie	i
 8011d1a:	60fb      	str	r3, [r7, #12]
}
 8011d1c:	bf00      	nop
 8011d1e:	e7fe      	b.n	8011d1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d00c      	beq.n	8011d42 <vPortFree+0x6a>
	__asm volatile
 8011d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2c:	b672      	cpsid	i
 8011d2e:	f383 8811 	msr	BASEPRI, r3
 8011d32:	f3bf 8f6f 	isb	sy
 8011d36:	f3bf 8f4f 	dsb	sy
 8011d3a:	b662      	cpsie	i
 8011d3c:	60bb      	str	r3, [r7, #8]
}
 8011d3e:	bf00      	nop
 8011d40:	e7fe      	b.n	8011d40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	685a      	ldr	r2, [r3, #4]
 8011d46:	4b11      	ldr	r3, [pc, #68]	; (8011d8c <vPortFree+0xb4>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4013      	ands	r3, r2
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d019      	beq.n	8011d84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d115      	bne.n	8011d84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	685a      	ldr	r2, [r3, #4]
 8011d5c:	4b0b      	ldr	r3, [pc, #44]	; (8011d8c <vPortFree+0xb4>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	43db      	mvns	r3, r3
 8011d62:	401a      	ands	r2, r3
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011d68:	f7fe fc6c 	bl	8010644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	685a      	ldr	r2, [r3, #4]
 8011d70:	4b07      	ldr	r3, [pc, #28]	; (8011d90 <vPortFree+0xb8>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4413      	add	r3, r2
 8011d76:	4a06      	ldr	r2, [pc, #24]	; (8011d90 <vPortFree+0xb8>)
 8011d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011d7a:	6938      	ldr	r0, [r7, #16]
 8011d7c:	f000 f86c 	bl	8011e58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011d80:	f7fe fc6e 	bl	8010660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011d84:	bf00      	nop
 8011d86:	3718      	adds	r7, #24
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	20008064 	.word	0x20008064
 8011d90:	2000805c 	.word	0x2000805c

08011d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011da0:	4b27      	ldr	r3, [pc, #156]	; (8011e40 <prvHeapInit+0xac>)
 8011da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f003 0307 	and.w	r3, r3, #7
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d00c      	beq.n	8011dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	3307      	adds	r3, #7
 8011db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	f023 0307 	bic.w	r3, r3, #7
 8011dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	4a1f      	ldr	r2, [pc, #124]	; (8011e40 <prvHeapInit+0xac>)
 8011dc4:	4413      	add	r3, r2
 8011dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011dcc:	4a1d      	ldr	r2, [pc, #116]	; (8011e44 <prvHeapInit+0xb0>)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011dd2:	4b1c      	ldr	r3, [pc, #112]	; (8011e44 <prvHeapInit+0xb0>)
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	4413      	add	r3, r2
 8011dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011de0:	2208      	movs	r2, #8
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	1a9b      	subs	r3, r3, r2
 8011de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f023 0307 	bic.w	r3, r3, #7
 8011dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	4a15      	ldr	r2, [pc, #84]	; (8011e48 <prvHeapInit+0xb4>)
 8011df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011df6:	4b14      	ldr	r3, [pc, #80]	; (8011e48 <prvHeapInit+0xb4>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011dfe:	4b12      	ldr	r3, [pc, #72]	; (8011e48 <prvHeapInit+0xb4>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2200      	movs	r2, #0
 8011e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	68fa      	ldr	r2, [r7, #12]
 8011e0e:	1ad2      	subs	r2, r2, r3
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011e14:	4b0c      	ldr	r3, [pc, #48]	; (8011e48 <prvHeapInit+0xb4>)
 8011e16:	681a      	ldr	r2, [r3, #0]
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	4a0a      	ldr	r2, [pc, #40]	; (8011e4c <prvHeapInit+0xb8>)
 8011e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	4a09      	ldr	r2, [pc, #36]	; (8011e50 <prvHeapInit+0xbc>)
 8011e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011e2c:	4b09      	ldr	r3, [pc, #36]	; (8011e54 <prvHeapInit+0xc0>)
 8011e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011e32:	601a      	str	r2, [r3, #0]
}
 8011e34:	bf00      	nop
 8011e36:	3714      	adds	r7, #20
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr
 8011e40:	20004450 	.word	0x20004450
 8011e44:	20008050 	.word	0x20008050
 8011e48:	20008058 	.word	0x20008058
 8011e4c:	20008060 	.word	0x20008060
 8011e50:	2000805c 	.word	0x2000805c
 8011e54:	20008064 	.word	0x20008064

08011e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011e60:	4b28      	ldr	r3, [pc, #160]	; (8011f04 <prvInsertBlockIntoFreeList+0xac>)
 8011e62:	60fb      	str	r3, [r7, #12]
 8011e64:	e002      	b.n	8011e6c <prvInsertBlockIntoFreeList+0x14>
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	60fb      	str	r3, [r7, #12]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d8f7      	bhi.n	8011e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	4413      	add	r3, r2
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d108      	bne.n	8011e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	685a      	ldr	r2, [r3, #4]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	441a      	add	r2, r3
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	68ba      	ldr	r2, [r7, #8]
 8011ea4:	441a      	add	r2, r3
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d118      	bne.n	8011ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	4b15      	ldr	r3, [pc, #84]	; (8011f08 <prvInsertBlockIntoFreeList+0xb0>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d00d      	beq.n	8011ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	685a      	ldr	r2, [r3, #4]
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	441a      	add	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	601a      	str	r2, [r3, #0]
 8011ed4:	e008      	b.n	8011ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ed6:	4b0c      	ldr	r3, [pc, #48]	; (8011f08 <prvInsertBlockIntoFreeList+0xb0>)
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	e003      	b.n	8011ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ee8:	68fa      	ldr	r2, [r7, #12]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d002      	beq.n	8011ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ef6:	bf00      	nop
 8011ef8:	3714      	adds	r7, #20
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	20008050 	.word	0x20008050
 8011f08:	20008058 	.word	0x20008058

08011f0c <__assert_func>:
 8011f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f0e:	4614      	mov	r4, r2
 8011f10:	461a      	mov	r2, r3
 8011f12:	4b09      	ldr	r3, [pc, #36]	; (8011f38 <__assert_func+0x2c>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	4605      	mov	r5, r0
 8011f18:	68d8      	ldr	r0, [r3, #12]
 8011f1a:	b14c      	cbz	r4, 8011f30 <__assert_func+0x24>
 8011f1c:	4b07      	ldr	r3, [pc, #28]	; (8011f3c <__assert_func+0x30>)
 8011f1e:	9100      	str	r1, [sp, #0]
 8011f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f24:	4906      	ldr	r1, [pc, #24]	; (8011f40 <__assert_func+0x34>)
 8011f26:	462b      	mov	r3, r5
 8011f28:	f000 fa4a 	bl	80123c0 <fiprintf>
 8011f2c:	f000 fbc5 	bl	80126ba <abort>
 8011f30:	4b04      	ldr	r3, [pc, #16]	; (8011f44 <__assert_func+0x38>)
 8011f32:	461c      	mov	r4, r3
 8011f34:	e7f3      	b.n	8011f1e <__assert_func+0x12>
 8011f36:	bf00      	nop
 8011f38:	200002b8 	.word	0x200002b8
 8011f3c:	08015248 	.word	0x08015248
 8011f40:	08015255 	.word	0x08015255
 8011f44:	08015283 	.word	0x08015283

08011f48 <atoi>:
 8011f48:	220a      	movs	r2, #10
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	f000 b98a 	b.w	8012264 <strtol>

08011f50 <calloc>:
 8011f50:	4b02      	ldr	r3, [pc, #8]	; (8011f5c <calloc+0xc>)
 8011f52:	460a      	mov	r2, r1
 8011f54:	4601      	mov	r1, r0
 8011f56:	6818      	ldr	r0, [r3, #0]
 8011f58:	f000 b802 	b.w	8011f60 <_calloc_r>
 8011f5c:	200002b8 	.word	0x200002b8

08011f60 <_calloc_r>:
 8011f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f62:	fba1 2402 	umull	r2, r4, r1, r2
 8011f66:	b94c      	cbnz	r4, 8011f7c <_calloc_r+0x1c>
 8011f68:	4611      	mov	r1, r2
 8011f6a:	9201      	str	r2, [sp, #4]
 8011f6c:	f000 f83e 	bl	8011fec <_malloc_r>
 8011f70:	9a01      	ldr	r2, [sp, #4]
 8011f72:	4605      	mov	r5, r0
 8011f74:	b930      	cbnz	r0, 8011f84 <_calloc_r+0x24>
 8011f76:	4628      	mov	r0, r5
 8011f78:	b003      	add	sp, #12
 8011f7a:	bd30      	pop	{r4, r5, pc}
 8011f7c:	220c      	movs	r2, #12
 8011f7e:	6002      	str	r2, [r0, #0]
 8011f80:	2500      	movs	r5, #0
 8011f82:	e7f8      	b.n	8011f76 <_calloc_r+0x16>
 8011f84:	4621      	mov	r1, r4
 8011f86:	f000 fac0 	bl	801250a <memset>
 8011f8a:	e7f4      	b.n	8011f76 <_calloc_r+0x16>

08011f8c <malloc>:
 8011f8c:	4b02      	ldr	r3, [pc, #8]	; (8011f98 <malloc+0xc>)
 8011f8e:	4601      	mov	r1, r0
 8011f90:	6818      	ldr	r0, [r3, #0]
 8011f92:	f000 b82b 	b.w	8011fec <_malloc_r>
 8011f96:	bf00      	nop
 8011f98:	200002b8 	.word	0x200002b8

08011f9c <free>:
 8011f9c:	4b02      	ldr	r3, [pc, #8]	; (8011fa8 <free+0xc>)
 8011f9e:	4601      	mov	r1, r0
 8011fa0:	6818      	ldr	r0, [r3, #0]
 8011fa2:	f000 bb91 	b.w	80126c8 <_free_r>
 8011fa6:	bf00      	nop
 8011fa8:	200002b8 	.word	0x200002b8

08011fac <sbrk_aligned>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	4e0e      	ldr	r6, [pc, #56]	; (8011fe8 <sbrk_aligned+0x3c>)
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	6831      	ldr	r1, [r6, #0]
 8011fb4:	4605      	mov	r5, r0
 8011fb6:	b911      	cbnz	r1, 8011fbe <sbrk_aligned+0x12>
 8011fb8:	f000 fb1a 	bl	80125f0 <_sbrk_r>
 8011fbc:	6030      	str	r0, [r6, #0]
 8011fbe:	4621      	mov	r1, r4
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	f000 fb15 	bl	80125f0 <_sbrk_r>
 8011fc6:	1c43      	adds	r3, r0, #1
 8011fc8:	d00a      	beq.n	8011fe0 <sbrk_aligned+0x34>
 8011fca:	1cc4      	adds	r4, r0, #3
 8011fcc:	f024 0403 	bic.w	r4, r4, #3
 8011fd0:	42a0      	cmp	r0, r4
 8011fd2:	d007      	beq.n	8011fe4 <sbrk_aligned+0x38>
 8011fd4:	1a21      	subs	r1, r4, r0
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f000 fb0a 	bl	80125f0 <_sbrk_r>
 8011fdc:	3001      	adds	r0, #1
 8011fde:	d101      	bne.n	8011fe4 <sbrk_aligned+0x38>
 8011fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	bd70      	pop	{r4, r5, r6, pc}
 8011fe8:	2000806c 	.word	0x2000806c

08011fec <_malloc_r>:
 8011fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ff0:	1ccd      	adds	r5, r1, #3
 8011ff2:	f025 0503 	bic.w	r5, r5, #3
 8011ff6:	3508      	adds	r5, #8
 8011ff8:	2d0c      	cmp	r5, #12
 8011ffa:	bf38      	it	cc
 8011ffc:	250c      	movcc	r5, #12
 8011ffe:	2d00      	cmp	r5, #0
 8012000:	4607      	mov	r7, r0
 8012002:	db01      	blt.n	8012008 <_malloc_r+0x1c>
 8012004:	42a9      	cmp	r1, r5
 8012006:	d905      	bls.n	8012014 <_malloc_r+0x28>
 8012008:	230c      	movs	r3, #12
 801200a:	603b      	str	r3, [r7, #0]
 801200c:	2600      	movs	r6, #0
 801200e:	4630      	mov	r0, r6
 8012010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012014:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80120e8 <_malloc_r+0xfc>
 8012018:	f000 f868 	bl	80120ec <__malloc_lock>
 801201c:	f8d8 3000 	ldr.w	r3, [r8]
 8012020:	461c      	mov	r4, r3
 8012022:	bb5c      	cbnz	r4, 801207c <_malloc_r+0x90>
 8012024:	4629      	mov	r1, r5
 8012026:	4638      	mov	r0, r7
 8012028:	f7ff ffc0 	bl	8011fac <sbrk_aligned>
 801202c:	1c43      	adds	r3, r0, #1
 801202e:	4604      	mov	r4, r0
 8012030:	d155      	bne.n	80120de <_malloc_r+0xf2>
 8012032:	f8d8 4000 	ldr.w	r4, [r8]
 8012036:	4626      	mov	r6, r4
 8012038:	2e00      	cmp	r6, #0
 801203a:	d145      	bne.n	80120c8 <_malloc_r+0xdc>
 801203c:	2c00      	cmp	r4, #0
 801203e:	d048      	beq.n	80120d2 <_malloc_r+0xe6>
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	4631      	mov	r1, r6
 8012044:	4638      	mov	r0, r7
 8012046:	eb04 0903 	add.w	r9, r4, r3
 801204a:	f000 fad1 	bl	80125f0 <_sbrk_r>
 801204e:	4581      	cmp	r9, r0
 8012050:	d13f      	bne.n	80120d2 <_malloc_r+0xe6>
 8012052:	6821      	ldr	r1, [r4, #0]
 8012054:	1a6d      	subs	r5, r5, r1
 8012056:	4629      	mov	r1, r5
 8012058:	4638      	mov	r0, r7
 801205a:	f7ff ffa7 	bl	8011fac <sbrk_aligned>
 801205e:	3001      	adds	r0, #1
 8012060:	d037      	beq.n	80120d2 <_malloc_r+0xe6>
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	442b      	add	r3, r5
 8012066:	6023      	str	r3, [r4, #0]
 8012068:	f8d8 3000 	ldr.w	r3, [r8]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d038      	beq.n	80120e2 <_malloc_r+0xf6>
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	42a2      	cmp	r2, r4
 8012074:	d12b      	bne.n	80120ce <_malloc_r+0xe2>
 8012076:	2200      	movs	r2, #0
 8012078:	605a      	str	r2, [r3, #4]
 801207a:	e00f      	b.n	801209c <_malloc_r+0xb0>
 801207c:	6822      	ldr	r2, [r4, #0]
 801207e:	1b52      	subs	r2, r2, r5
 8012080:	d41f      	bmi.n	80120c2 <_malloc_r+0xd6>
 8012082:	2a0b      	cmp	r2, #11
 8012084:	d917      	bls.n	80120b6 <_malloc_r+0xca>
 8012086:	1961      	adds	r1, r4, r5
 8012088:	42a3      	cmp	r3, r4
 801208a:	6025      	str	r5, [r4, #0]
 801208c:	bf18      	it	ne
 801208e:	6059      	strne	r1, [r3, #4]
 8012090:	6863      	ldr	r3, [r4, #4]
 8012092:	bf08      	it	eq
 8012094:	f8c8 1000 	streq.w	r1, [r8]
 8012098:	5162      	str	r2, [r4, r5]
 801209a:	604b      	str	r3, [r1, #4]
 801209c:	4638      	mov	r0, r7
 801209e:	f104 060b 	add.w	r6, r4, #11
 80120a2:	f000 f829 	bl	80120f8 <__malloc_unlock>
 80120a6:	f026 0607 	bic.w	r6, r6, #7
 80120aa:	1d23      	adds	r3, r4, #4
 80120ac:	1af2      	subs	r2, r6, r3
 80120ae:	d0ae      	beq.n	801200e <_malloc_r+0x22>
 80120b0:	1b9b      	subs	r3, r3, r6
 80120b2:	50a3      	str	r3, [r4, r2]
 80120b4:	e7ab      	b.n	801200e <_malloc_r+0x22>
 80120b6:	42a3      	cmp	r3, r4
 80120b8:	6862      	ldr	r2, [r4, #4]
 80120ba:	d1dd      	bne.n	8012078 <_malloc_r+0x8c>
 80120bc:	f8c8 2000 	str.w	r2, [r8]
 80120c0:	e7ec      	b.n	801209c <_malloc_r+0xb0>
 80120c2:	4623      	mov	r3, r4
 80120c4:	6864      	ldr	r4, [r4, #4]
 80120c6:	e7ac      	b.n	8012022 <_malloc_r+0x36>
 80120c8:	4634      	mov	r4, r6
 80120ca:	6876      	ldr	r6, [r6, #4]
 80120cc:	e7b4      	b.n	8012038 <_malloc_r+0x4c>
 80120ce:	4613      	mov	r3, r2
 80120d0:	e7cc      	b.n	801206c <_malloc_r+0x80>
 80120d2:	230c      	movs	r3, #12
 80120d4:	603b      	str	r3, [r7, #0]
 80120d6:	4638      	mov	r0, r7
 80120d8:	f000 f80e 	bl	80120f8 <__malloc_unlock>
 80120dc:	e797      	b.n	801200e <_malloc_r+0x22>
 80120de:	6025      	str	r5, [r4, #0]
 80120e0:	e7dc      	b.n	801209c <_malloc_r+0xb0>
 80120e2:	605b      	str	r3, [r3, #4]
 80120e4:	deff      	udf	#255	; 0xff
 80120e6:	bf00      	nop
 80120e8:	20008068 	.word	0x20008068

080120ec <__malloc_lock>:
 80120ec:	4801      	ldr	r0, [pc, #4]	; (80120f4 <__malloc_lock+0x8>)
 80120ee:	f000 bacc 	b.w	801268a <__retarget_lock_acquire_recursive>
 80120f2:	bf00      	nop
 80120f4:	200081b0 	.word	0x200081b0

080120f8 <__malloc_unlock>:
 80120f8:	4801      	ldr	r0, [pc, #4]	; (8012100 <__malloc_unlock+0x8>)
 80120fa:	f000 bac7 	b.w	801268c <__retarget_lock_release_recursive>
 80120fe:	bf00      	nop
 8012100:	200081b0 	.word	0x200081b0

08012104 <srand>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4b10      	ldr	r3, [pc, #64]	; (8012148 <srand+0x44>)
 8012108:	681d      	ldr	r5, [r3, #0]
 801210a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801210c:	4604      	mov	r4, r0
 801210e:	b9b3      	cbnz	r3, 801213e <srand+0x3a>
 8012110:	2018      	movs	r0, #24
 8012112:	f7ff ff3b 	bl	8011f8c <malloc>
 8012116:	4602      	mov	r2, r0
 8012118:	6328      	str	r0, [r5, #48]	; 0x30
 801211a:	b920      	cbnz	r0, 8012126 <srand+0x22>
 801211c:	4b0b      	ldr	r3, [pc, #44]	; (801214c <srand+0x48>)
 801211e:	480c      	ldr	r0, [pc, #48]	; (8012150 <srand+0x4c>)
 8012120:	2146      	movs	r1, #70	; 0x46
 8012122:	f7ff fef3 	bl	8011f0c <__assert_func>
 8012126:	490b      	ldr	r1, [pc, #44]	; (8012154 <srand+0x50>)
 8012128:	4b0b      	ldr	r3, [pc, #44]	; (8012158 <srand+0x54>)
 801212a:	e9c0 1300 	strd	r1, r3, [r0]
 801212e:	4b0b      	ldr	r3, [pc, #44]	; (801215c <srand+0x58>)
 8012130:	6083      	str	r3, [r0, #8]
 8012132:	230b      	movs	r3, #11
 8012134:	8183      	strh	r3, [r0, #12]
 8012136:	2100      	movs	r1, #0
 8012138:	2001      	movs	r0, #1
 801213a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801213e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012140:	2200      	movs	r2, #0
 8012142:	611c      	str	r4, [r3, #16]
 8012144:	615a      	str	r2, [r3, #20]
 8012146:	bd38      	pop	{r3, r4, r5, pc}
 8012148:	200002b8 	.word	0x200002b8
 801214c:	08015284 	.word	0x08015284
 8012150:	0801529b 	.word	0x0801529b
 8012154:	abcd330e 	.word	0xabcd330e
 8012158:	e66d1234 	.word	0xe66d1234
 801215c:	0005deec 	.word	0x0005deec

08012160 <_strtol_l.constprop.0>:
 8012160:	2b01      	cmp	r3, #1
 8012162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012166:	d001      	beq.n	801216c <_strtol_l.constprop.0+0xc>
 8012168:	2b24      	cmp	r3, #36	; 0x24
 801216a:	d906      	bls.n	801217a <_strtol_l.constprop.0+0x1a>
 801216c:	f000 fa62 	bl	8012634 <__errno>
 8012170:	2316      	movs	r3, #22
 8012172:	6003      	str	r3, [r0, #0]
 8012174:	2000      	movs	r0, #0
 8012176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801217a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012260 <_strtol_l.constprop.0+0x100>
 801217e:	460d      	mov	r5, r1
 8012180:	462e      	mov	r6, r5
 8012182:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012186:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801218a:	f017 0708 	ands.w	r7, r7, #8
 801218e:	d1f7      	bne.n	8012180 <_strtol_l.constprop.0+0x20>
 8012190:	2c2d      	cmp	r4, #45	; 0x2d
 8012192:	d132      	bne.n	80121fa <_strtol_l.constprop.0+0x9a>
 8012194:	782c      	ldrb	r4, [r5, #0]
 8012196:	2701      	movs	r7, #1
 8012198:	1cb5      	adds	r5, r6, #2
 801219a:	2b00      	cmp	r3, #0
 801219c:	d05b      	beq.n	8012256 <_strtol_l.constprop.0+0xf6>
 801219e:	2b10      	cmp	r3, #16
 80121a0:	d109      	bne.n	80121b6 <_strtol_l.constprop.0+0x56>
 80121a2:	2c30      	cmp	r4, #48	; 0x30
 80121a4:	d107      	bne.n	80121b6 <_strtol_l.constprop.0+0x56>
 80121a6:	782c      	ldrb	r4, [r5, #0]
 80121a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80121ac:	2c58      	cmp	r4, #88	; 0x58
 80121ae:	d14d      	bne.n	801224c <_strtol_l.constprop.0+0xec>
 80121b0:	786c      	ldrb	r4, [r5, #1]
 80121b2:	2310      	movs	r3, #16
 80121b4:	3502      	adds	r5, #2
 80121b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80121ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80121be:	f04f 0e00 	mov.w	lr, #0
 80121c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80121c6:	4676      	mov	r6, lr
 80121c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80121cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80121d0:	f1bc 0f09 	cmp.w	ip, #9
 80121d4:	d816      	bhi.n	8012204 <_strtol_l.constprop.0+0xa4>
 80121d6:	4664      	mov	r4, ip
 80121d8:	42a3      	cmp	r3, r4
 80121da:	dd24      	ble.n	8012226 <_strtol_l.constprop.0+0xc6>
 80121dc:	f1be 3fff 	cmp.w	lr, #4294967295
 80121e0:	d008      	beq.n	80121f4 <_strtol_l.constprop.0+0x94>
 80121e2:	45b1      	cmp	r9, r6
 80121e4:	d31c      	bcc.n	8012220 <_strtol_l.constprop.0+0xc0>
 80121e6:	d101      	bne.n	80121ec <_strtol_l.constprop.0+0x8c>
 80121e8:	45a2      	cmp	sl, r4
 80121ea:	db19      	blt.n	8012220 <_strtol_l.constprop.0+0xc0>
 80121ec:	fb06 4603 	mla	r6, r6, r3, r4
 80121f0:	f04f 0e01 	mov.w	lr, #1
 80121f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80121f8:	e7e8      	b.n	80121cc <_strtol_l.constprop.0+0x6c>
 80121fa:	2c2b      	cmp	r4, #43	; 0x2b
 80121fc:	bf04      	itt	eq
 80121fe:	782c      	ldrbeq	r4, [r5, #0]
 8012200:	1cb5      	addeq	r5, r6, #2
 8012202:	e7ca      	b.n	801219a <_strtol_l.constprop.0+0x3a>
 8012204:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012208:	f1bc 0f19 	cmp.w	ip, #25
 801220c:	d801      	bhi.n	8012212 <_strtol_l.constprop.0+0xb2>
 801220e:	3c37      	subs	r4, #55	; 0x37
 8012210:	e7e2      	b.n	80121d8 <_strtol_l.constprop.0+0x78>
 8012212:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012216:	f1bc 0f19 	cmp.w	ip, #25
 801221a:	d804      	bhi.n	8012226 <_strtol_l.constprop.0+0xc6>
 801221c:	3c57      	subs	r4, #87	; 0x57
 801221e:	e7db      	b.n	80121d8 <_strtol_l.constprop.0+0x78>
 8012220:	f04f 3eff 	mov.w	lr, #4294967295
 8012224:	e7e6      	b.n	80121f4 <_strtol_l.constprop.0+0x94>
 8012226:	f1be 3fff 	cmp.w	lr, #4294967295
 801222a:	d105      	bne.n	8012238 <_strtol_l.constprop.0+0xd8>
 801222c:	2322      	movs	r3, #34	; 0x22
 801222e:	6003      	str	r3, [r0, #0]
 8012230:	4646      	mov	r6, r8
 8012232:	b942      	cbnz	r2, 8012246 <_strtol_l.constprop.0+0xe6>
 8012234:	4630      	mov	r0, r6
 8012236:	e79e      	b.n	8012176 <_strtol_l.constprop.0+0x16>
 8012238:	b107      	cbz	r7, 801223c <_strtol_l.constprop.0+0xdc>
 801223a:	4276      	negs	r6, r6
 801223c:	2a00      	cmp	r2, #0
 801223e:	d0f9      	beq.n	8012234 <_strtol_l.constprop.0+0xd4>
 8012240:	f1be 0f00 	cmp.w	lr, #0
 8012244:	d000      	beq.n	8012248 <_strtol_l.constprop.0+0xe8>
 8012246:	1e69      	subs	r1, r5, #1
 8012248:	6011      	str	r1, [r2, #0]
 801224a:	e7f3      	b.n	8012234 <_strtol_l.constprop.0+0xd4>
 801224c:	2430      	movs	r4, #48	; 0x30
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1b1      	bne.n	80121b6 <_strtol_l.constprop.0+0x56>
 8012252:	2308      	movs	r3, #8
 8012254:	e7af      	b.n	80121b6 <_strtol_l.constprop.0+0x56>
 8012256:	2c30      	cmp	r4, #48	; 0x30
 8012258:	d0a5      	beq.n	80121a6 <_strtol_l.constprop.0+0x46>
 801225a:	230a      	movs	r3, #10
 801225c:	e7ab      	b.n	80121b6 <_strtol_l.constprop.0+0x56>
 801225e:	bf00      	nop
 8012260:	080152f4 	.word	0x080152f4

08012264 <strtol>:
 8012264:	4613      	mov	r3, r2
 8012266:	460a      	mov	r2, r1
 8012268:	4601      	mov	r1, r0
 801226a:	4802      	ldr	r0, [pc, #8]	; (8012274 <strtol+0x10>)
 801226c:	6800      	ldr	r0, [r0, #0]
 801226e:	f7ff bf77 	b.w	8012160 <_strtol_l.constprop.0>
 8012272:	bf00      	nop
 8012274:	200002b8 	.word	0x200002b8

08012278 <std>:
 8012278:	2300      	movs	r3, #0
 801227a:	b510      	push	{r4, lr}
 801227c:	4604      	mov	r4, r0
 801227e:	e9c0 3300 	strd	r3, r3, [r0]
 8012282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012286:	6083      	str	r3, [r0, #8]
 8012288:	8181      	strh	r1, [r0, #12]
 801228a:	6643      	str	r3, [r0, #100]	; 0x64
 801228c:	81c2      	strh	r2, [r0, #14]
 801228e:	6183      	str	r3, [r0, #24]
 8012290:	4619      	mov	r1, r3
 8012292:	2208      	movs	r2, #8
 8012294:	305c      	adds	r0, #92	; 0x5c
 8012296:	f000 f938 	bl	801250a <memset>
 801229a:	4b0d      	ldr	r3, [pc, #52]	; (80122d0 <std+0x58>)
 801229c:	6263      	str	r3, [r4, #36]	; 0x24
 801229e:	4b0d      	ldr	r3, [pc, #52]	; (80122d4 <std+0x5c>)
 80122a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80122a2:	4b0d      	ldr	r3, [pc, #52]	; (80122d8 <std+0x60>)
 80122a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80122a6:	4b0d      	ldr	r3, [pc, #52]	; (80122dc <std+0x64>)
 80122a8:	6323      	str	r3, [r4, #48]	; 0x30
 80122aa:	4b0d      	ldr	r3, [pc, #52]	; (80122e0 <std+0x68>)
 80122ac:	6224      	str	r4, [r4, #32]
 80122ae:	429c      	cmp	r4, r3
 80122b0:	d006      	beq.n	80122c0 <std+0x48>
 80122b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80122b6:	4294      	cmp	r4, r2
 80122b8:	d002      	beq.n	80122c0 <std+0x48>
 80122ba:	33d0      	adds	r3, #208	; 0xd0
 80122bc:	429c      	cmp	r4, r3
 80122be:	d105      	bne.n	80122cc <std+0x54>
 80122c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80122c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122c8:	f000 b9de 	b.w	8012688 <__retarget_lock_init_recursive>
 80122cc:	bd10      	pop	{r4, pc}
 80122ce:	bf00      	nop
 80122d0:	08012431 	.word	0x08012431
 80122d4:	08012453 	.word	0x08012453
 80122d8:	0801248b 	.word	0x0801248b
 80122dc:	080124af 	.word	0x080124af
 80122e0:	20008070 	.word	0x20008070

080122e4 <stdio_exit_handler>:
 80122e4:	4a02      	ldr	r2, [pc, #8]	; (80122f0 <stdio_exit_handler+0xc>)
 80122e6:	4903      	ldr	r1, [pc, #12]	; (80122f4 <stdio_exit_handler+0x10>)
 80122e8:	4803      	ldr	r0, [pc, #12]	; (80122f8 <stdio_exit_handler+0x14>)
 80122ea:	f000 b87b 	b.w	80123e4 <_fwalk_sglue>
 80122ee:	bf00      	nop
 80122f0:	20000260 	.word	0x20000260
 80122f4:	08012e15 	.word	0x08012e15
 80122f8:	2000026c 	.word	0x2000026c

080122fc <cleanup_stdio>:
 80122fc:	6841      	ldr	r1, [r0, #4]
 80122fe:	4b0c      	ldr	r3, [pc, #48]	; (8012330 <cleanup_stdio+0x34>)
 8012300:	4299      	cmp	r1, r3
 8012302:	b510      	push	{r4, lr}
 8012304:	4604      	mov	r4, r0
 8012306:	d001      	beq.n	801230c <cleanup_stdio+0x10>
 8012308:	f000 fd84 	bl	8012e14 <_fflush_r>
 801230c:	68a1      	ldr	r1, [r4, #8]
 801230e:	4b09      	ldr	r3, [pc, #36]	; (8012334 <cleanup_stdio+0x38>)
 8012310:	4299      	cmp	r1, r3
 8012312:	d002      	beq.n	801231a <cleanup_stdio+0x1e>
 8012314:	4620      	mov	r0, r4
 8012316:	f000 fd7d 	bl	8012e14 <_fflush_r>
 801231a:	68e1      	ldr	r1, [r4, #12]
 801231c:	4b06      	ldr	r3, [pc, #24]	; (8012338 <cleanup_stdio+0x3c>)
 801231e:	4299      	cmp	r1, r3
 8012320:	d004      	beq.n	801232c <cleanup_stdio+0x30>
 8012322:	4620      	mov	r0, r4
 8012324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012328:	f000 bd74 	b.w	8012e14 <_fflush_r>
 801232c:	bd10      	pop	{r4, pc}
 801232e:	bf00      	nop
 8012330:	20008070 	.word	0x20008070
 8012334:	200080d8 	.word	0x200080d8
 8012338:	20008140 	.word	0x20008140

0801233c <global_stdio_init.part.0>:
 801233c:	b510      	push	{r4, lr}
 801233e:	4b0b      	ldr	r3, [pc, #44]	; (801236c <global_stdio_init.part.0+0x30>)
 8012340:	4c0b      	ldr	r4, [pc, #44]	; (8012370 <global_stdio_init.part.0+0x34>)
 8012342:	4a0c      	ldr	r2, [pc, #48]	; (8012374 <global_stdio_init.part.0+0x38>)
 8012344:	601a      	str	r2, [r3, #0]
 8012346:	4620      	mov	r0, r4
 8012348:	2200      	movs	r2, #0
 801234a:	2104      	movs	r1, #4
 801234c:	f7ff ff94 	bl	8012278 <std>
 8012350:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012354:	2201      	movs	r2, #1
 8012356:	2109      	movs	r1, #9
 8012358:	f7ff ff8e 	bl	8012278 <std>
 801235c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012360:	2202      	movs	r2, #2
 8012362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012366:	2112      	movs	r1, #18
 8012368:	f7ff bf86 	b.w	8012278 <std>
 801236c:	200081a8 	.word	0x200081a8
 8012370:	20008070 	.word	0x20008070
 8012374:	080122e5 	.word	0x080122e5

08012378 <__sfp_lock_acquire>:
 8012378:	4801      	ldr	r0, [pc, #4]	; (8012380 <__sfp_lock_acquire+0x8>)
 801237a:	f000 b986 	b.w	801268a <__retarget_lock_acquire_recursive>
 801237e:	bf00      	nop
 8012380:	200081b1 	.word	0x200081b1

08012384 <__sfp_lock_release>:
 8012384:	4801      	ldr	r0, [pc, #4]	; (801238c <__sfp_lock_release+0x8>)
 8012386:	f000 b981 	b.w	801268c <__retarget_lock_release_recursive>
 801238a:	bf00      	nop
 801238c:	200081b1 	.word	0x200081b1

08012390 <__sinit>:
 8012390:	b510      	push	{r4, lr}
 8012392:	4604      	mov	r4, r0
 8012394:	f7ff fff0 	bl	8012378 <__sfp_lock_acquire>
 8012398:	6a23      	ldr	r3, [r4, #32]
 801239a:	b11b      	cbz	r3, 80123a4 <__sinit+0x14>
 801239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123a0:	f7ff bff0 	b.w	8012384 <__sfp_lock_release>
 80123a4:	4b04      	ldr	r3, [pc, #16]	; (80123b8 <__sinit+0x28>)
 80123a6:	6223      	str	r3, [r4, #32]
 80123a8:	4b04      	ldr	r3, [pc, #16]	; (80123bc <__sinit+0x2c>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1f5      	bne.n	801239c <__sinit+0xc>
 80123b0:	f7ff ffc4 	bl	801233c <global_stdio_init.part.0>
 80123b4:	e7f2      	b.n	801239c <__sinit+0xc>
 80123b6:	bf00      	nop
 80123b8:	080122fd 	.word	0x080122fd
 80123bc:	200081a8 	.word	0x200081a8

080123c0 <fiprintf>:
 80123c0:	b40e      	push	{r1, r2, r3}
 80123c2:	b503      	push	{r0, r1, lr}
 80123c4:	4601      	mov	r1, r0
 80123c6:	ab03      	add	r3, sp, #12
 80123c8:	4805      	ldr	r0, [pc, #20]	; (80123e0 <fiprintf+0x20>)
 80123ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80123ce:	6800      	ldr	r0, [r0, #0]
 80123d0:	9301      	str	r3, [sp, #4]
 80123d2:	f000 f9ef 	bl	80127b4 <_vfiprintf_r>
 80123d6:	b002      	add	sp, #8
 80123d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80123dc:	b003      	add	sp, #12
 80123de:	4770      	bx	lr
 80123e0:	200002b8 	.word	0x200002b8

080123e4 <_fwalk_sglue>:
 80123e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123e8:	4607      	mov	r7, r0
 80123ea:	4688      	mov	r8, r1
 80123ec:	4614      	mov	r4, r2
 80123ee:	2600      	movs	r6, #0
 80123f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80123f4:	f1b9 0901 	subs.w	r9, r9, #1
 80123f8:	d505      	bpl.n	8012406 <_fwalk_sglue+0x22>
 80123fa:	6824      	ldr	r4, [r4, #0]
 80123fc:	2c00      	cmp	r4, #0
 80123fe:	d1f7      	bne.n	80123f0 <_fwalk_sglue+0xc>
 8012400:	4630      	mov	r0, r6
 8012402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012406:	89ab      	ldrh	r3, [r5, #12]
 8012408:	2b01      	cmp	r3, #1
 801240a:	d907      	bls.n	801241c <_fwalk_sglue+0x38>
 801240c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012410:	3301      	adds	r3, #1
 8012412:	d003      	beq.n	801241c <_fwalk_sglue+0x38>
 8012414:	4629      	mov	r1, r5
 8012416:	4638      	mov	r0, r7
 8012418:	47c0      	blx	r8
 801241a:	4306      	orrs	r6, r0
 801241c:	3568      	adds	r5, #104	; 0x68
 801241e:	e7e9      	b.n	80123f4 <_fwalk_sglue+0x10>

08012420 <putchar>:
 8012420:	4b02      	ldr	r3, [pc, #8]	; (801242c <putchar+0xc>)
 8012422:	4601      	mov	r1, r0
 8012424:	6818      	ldr	r0, [r3, #0]
 8012426:	6882      	ldr	r2, [r0, #8]
 8012428:	f000 bd1c 	b.w	8012e64 <_putc_r>
 801242c:	200002b8 	.word	0x200002b8

08012430 <__sread>:
 8012430:	b510      	push	{r4, lr}
 8012432:	460c      	mov	r4, r1
 8012434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012438:	f000 f8c8 	bl	80125cc <_read_r>
 801243c:	2800      	cmp	r0, #0
 801243e:	bfab      	itete	ge
 8012440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012442:	89a3      	ldrhlt	r3, [r4, #12]
 8012444:	181b      	addge	r3, r3, r0
 8012446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801244a:	bfac      	ite	ge
 801244c:	6563      	strge	r3, [r4, #84]	; 0x54
 801244e:	81a3      	strhlt	r3, [r4, #12]
 8012450:	bd10      	pop	{r4, pc}

08012452 <__swrite>:
 8012452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012456:	461f      	mov	r7, r3
 8012458:	898b      	ldrh	r3, [r1, #12]
 801245a:	05db      	lsls	r3, r3, #23
 801245c:	4605      	mov	r5, r0
 801245e:	460c      	mov	r4, r1
 8012460:	4616      	mov	r6, r2
 8012462:	d505      	bpl.n	8012470 <__swrite+0x1e>
 8012464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012468:	2302      	movs	r3, #2
 801246a:	2200      	movs	r2, #0
 801246c:	f000 f89c 	bl	80125a8 <_lseek_r>
 8012470:	89a3      	ldrh	r3, [r4, #12]
 8012472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801247a:	81a3      	strh	r3, [r4, #12]
 801247c:	4632      	mov	r2, r6
 801247e:	463b      	mov	r3, r7
 8012480:	4628      	mov	r0, r5
 8012482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012486:	f000 b8c3 	b.w	8012610 <_write_r>

0801248a <__sseek>:
 801248a:	b510      	push	{r4, lr}
 801248c:	460c      	mov	r4, r1
 801248e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012492:	f000 f889 	bl	80125a8 <_lseek_r>
 8012496:	1c43      	adds	r3, r0, #1
 8012498:	89a3      	ldrh	r3, [r4, #12]
 801249a:	bf15      	itete	ne
 801249c:	6560      	strne	r0, [r4, #84]	; 0x54
 801249e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80124a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80124a6:	81a3      	strheq	r3, [r4, #12]
 80124a8:	bf18      	it	ne
 80124aa:	81a3      	strhne	r3, [r4, #12]
 80124ac:	bd10      	pop	{r4, pc}

080124ae <__sclose>:
 80124ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124b2:	f000 b869 	b.w	8012588 <_close_r>

080124b6 <memcmp>:
 80124b6:	b510      	push	{r4, lr}
 80124b8:	3901      	subs	r1, #1
 80124ba:	4402      	add	r2, r0
 80124bc:	4290      	cmp	r0, r2
 80124be:	d101      	bne.n	80124c4 <memcmp+0xe>
 80124c0:	2000      	movs	r0, #0
 80124c2:	e005      	b.n	80124d0 <memcmp+0x1a>
 80124c4:	7803      	ldrb	r3, [r0, #0]
 80124c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80124ca:	42a3      	cmp	r3, r4
 80124cc:	d001      	beq.n	80124d2 <memcmp+0x1c>
 80124ce:	1b18      	subs	r0, r3, r4
 80124d0:	bd10      	pop	{r4, pc}
 80124d2:	3001      	adds	r0, #1
 80124d4:	e7f2      	b.n	80124bc <memcmp+0x6>

080124d6 <memmove>:
 80124d6:	4288      	cmp	r0, r1
 80124d8:	b510      	push	{r4, lr}
 80124da:	eb01 0402 	add.w	r4, r1, r2
 80124de:	d902      	bls.n	80124e6 <memmove+0x10>
 80124e0:	4284      	cmp	r4, r0
 80124e2:	4623      	mov	r3, r4
 80124e4:	d807      	bhi.n	80124f6 <memmove+0x20>
 80124e6:	1e43      	subs	r3, r0, #1
 80124e8:	42a1      	cmp	r1, r4
 80124ea:	d008      	beq.n	80124fe <memmove+0x28>
 80124ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124f4:	e7f8      	b.n	80124e8 <memmove+0x12>
 80124f6:	4402      	add	r2, r0
 80124f8:	4601      	mov	r1, r0
 80124fa:	428a      	cmp	r2, r1
 80124fc:	d100      	bne.n	8012500 <memmove+0x2a>
 80124fe:	bd10      	pop	{r4, pc}
 8012500:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012504:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012508:	e7f7      	b.n	80124fa <memmove+0x24>

0801250a <memset>:
 801250a:	4402      	add	r2, r0
 801250c:	4603      	mov	r3, r0
 801250e:	4293      	cmp	r3, r2
 8012510:	d100      	bne.n	8012514 <memset+0xa>
 8012512:	4770      	bx	lr
 8012514:	f803 1b01 	strb.w	r1, [r3], #1
 8012518:	e7f9      	b.n	801250e <memset+0x4>

0801251a <strchr>:
 801251a:	b2c9      	uxtb	r1, r1
 801251c:	4603      	mov	r3, r0
 801251e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012522:	b11a      	cbz	r2, 801252c <strchr+0x12>
 8012524:	428a      	cmp	r2, r1
 8012526:	d1f9      	bne.n	801251c <strchr+0x2>
 8012528:	4618      	mov	r0, r3
 801252a:	4770      	bx	lr
 801252c:	2900      	cmp	r1, #0
 801252e:	bf18      	it	ne
 8012530:	2300      	movne	r3, #0
 8012532:	e7f9      	b.n	8012528 <strchr+0xe>

08012534 <strncmp>:
 8012534:	b510      	push	{r4, lr}
 8012536:	b16a      	cbz	r2, 8012554 <strncmp+0x20>
 8012538:	3901      	subs	r1, #1
 801253a:	1884      	adds	r4, r0, r2
 801253c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012540:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012544:	429a      	cmp	r2, r3
 8012546:	d103      	bne.n	8012550 <strncmp+0x1c>
 8012548:	42a0      	cmp	r0, r4
 801254a:	d001      	beq.n	8012550 <strncmp+0x1c>
 801254c:	2a00      	cmp	r2, #0
 801254e:	d1f5      	bne.n	801253c <strncmp+0x8>
 8012550:	1ad0      	subs	r0, r2, r3
 8012552:	bd10      	pop	{r4, pc}
 8012554:	4610      	mov	r0, r2
 8012556:	e7fc      	b.n	8012552 <strncmp+0x1e>

08012558 <strrchr>:
 8012558:	b513      	push	{r0, r1, r4, lr}
 801255a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801255e:	4603      	mov	r3, r0
 8012560:	d110      	bne.n	8012584 <strrchr+0x2c>
 8012562:	b002      	add	sp, #8
 8012564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012568:	f7ff bfd7 	b.w	801251a <strchr>
 801256c:	1c43      	adds	r3, r0, #1
 801256e:	4604      	mov	r4, r0
 8012570:	4618      	mov	r0, r3
 8012572:	9101      	str	r1, [sp, #4]
 8012574:	f7ff ffd1 	bl	801251a <strchr>
 8012578:	9901      	ldr	r1, [sp, #4]
 801257a:	2800      	cmp	r0, #0
 801257c:	d1f6      	bne.n	801256c <strrchr+0x14>
 801257e:	4620      	mov	r0, r4
 8012580:	b002      	add	sp, #8
 8012582:	bd10      	pop	{r4, pc}
 8012584:	2400      	movs	r4, #0
 8012586:	e7f3      	b.n	8012570 <strrchr+0x18>

08012588 <_close_r>:
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	4d06      	ldr	r5, [pc, #24]	; (80125a4 <_close_r+0x1c>)
 801258c:	2300      	movs	r3, #0
 801258e:	4604      	mov	r4, r0
 8012590:	4608      	mov	r0, r1
 8012592:	602b      	str	r3, [r5, #0]
 8012594:	f7f9 f85a 	bl	800b64c <_close>
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	d102      	bne.n	80125a2 <_close_r+0x1a>
 801259c:	682b      	ldr	r3, [r5, #0]
 801259e:	b103      	cbz	r3, 80125a2 <_close_r+0x1a>
 80125a0:	6023      	str	r3, [r4, #0]
 80125a2:	bd38      	pop	{r3, r4, r5, pc}
 80125a4:	200081ac 	.word	0x200081ac

080125a8 <_lseek_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4d07      	ldr	r5, [pc, #28]	; (80125c8 <_lseek_r+0x20>)
 80125ac:	4604      	mov	r4, r0
 80125ae:	4608      	mov	r0, r1
 80125b0:	4611      	mov	r1, r2
 80125b2:	2200      	movs	r2, #0
 80125b4:	602a      	str	r2, [r5, #0]
 80125b6:	461a      	mov	r2, r3
 80125b8:	f7f9 f86f 	bl	800b69a <_lseek>
 80125bc:	1c43      	adds	r3, r0, #1
 80125be:	d102      	bne.n	80125c6 <_lseek_r+0x1e>
 80125c0:	682b      	ldr	r3, [r5, #0]
 80125c2:	b103      	cbz	r3, 80125c6 <_lseek_r+0x1e>
 80125c4:	6023      	str	r3, [r4, #0]
 80125c6:	bd38      	pop	{r3, r4, r5, pc}
 80125c8:	200081ac 	.word	0x200081ac

080125cc <_read_r>:
 80125cc:	b538      	push	{r3, r4, r5, lr}
 80125ce:	4d07      	ldr	r5, [pc, #28]	; (80125ec <_read_r+0x20>)
 80125d0:	4604      	mov	r4, r0
 80125d2:	4608      	mov	r0, r1
 80125d4:	4611      	mov	r1, r2
 80125d6:	2200      	movs	r2, #0
 80125d8:	602a      	str	r2, [r5, #0]
 80125da:	461a      	mov	r2, r3
 80125dc:	f7f9 f800 	bl	800b5e0 <_read>
 80125e0:	1c43      	adds	r3, r0, #1
 80125e2:	d102      	bne.n	80125ea <_read_r+0x1e>
 80125e4:	682b      	ldr	r3, [r5, #0]
 80125e6:	b103      	cbz	r3, 80125ea <_read_r+0x1e>
 80125e8:	6023      	str	r3, [r4, #0]
 80125ea:	bd38      	pop	{r3, r4, r5, pc}
 80125ec:	200081ac 	.word	0x200081ac

080125f0 <_sbrk_r>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	4d06      	ldr	r5, [pc, #24]	; (801260c <_sbrk_r+0x1c>)
 80125f4:	2300      	movs	r3, #0
 80125f6:	4604      	mov	r4, r0
 80125f8:	4608      	mov	r0, r1
 80125fa:	602b      	str	r3, [r5, #0]
 80125fc:	f7f9 f85a 	bl	800b6b4 <_sbrk>
 8012600:	1c43      	adds	r3, r0, #1
 8012602:	d102      	bne.n	801260a <_sbrk_r+0x1a>
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	b103      	cbz	r3, 801260a <_sbrk_r+0x1a>
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	bd38      	pop	{r3, r4, r5, pc}
 801260c:	200081ac 	.word	0x200081ac

08012610 <_write_r>:
 8012610:	b538      	push	{r3, r4, r5, lr}
 8012612:	4d07      	ldr	r5, [pc, #28]	; (8012630 <_write_r+0x20>)
 8012614:	4604      	mov	r4, r0
 8012616:	4608      	mov	r0, r1
 8012618:	4611      	mov	r1, r2
 801261a:	2200      	movs	r2, #0
 801261c:	602a      	str	r2, [r5, #0]
 801261e:	461a      	mov	r2, r3
 8012620:	f7f8 fffc 	bl	800b61c <_write>
 8012624:	1c43      	adds	r3, r0, #1
 8012626:	d102      	bne.n	801262e <_write_r+0x1e>
 8012628:	682b      	ldr	r3, [r5, #0]
 801262a:	b103      	cbz	r3, 801262e <_write_r+0x1e>
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	bd38      	pop	{r3, r4, r5, pc}
 8012630:	200081ac 	.word	0x200081ac

08012634 <__errno>:
 8012634:	4b01      	ldr	r3, [pc, #4]	; (801263c <__errno+0x8>)
 8012636:	6818      	ldr	r0, [r3, #0]
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop
 801263c:	200002b8 	.word	0x200002b8

08012640 <__libc_init_array>:
 8012640:	b570      	push	{r4, r5, r6, lr}
 8012642:	4d0d      	ldr	r5, [pc, #52]	; (8012678 <__libc_init_array+0x38>)
 8012644:	4c0d      	ldr	r4, [pc, #52]	; (801267c <__libc_init_array+0x3c>)
 8012646:	1b64      	subs	r4, r4, r5
 8012648:	10a4      	asrs	r4, r4, #2
 801264a:	2600      	movs	r6, #0
 801264c:	42a6      	cmp	r6, r4
 801264e:	d109      	bne.n	8012664 <__libc_init_array+0x24>
 8012650:	4d0b      	ldr	r5, [pc, #44]	; (8012680 <__libc_init_array+0x40>)
 8012652:	4c0c      	ldr	r4, [pc, #48]	; (8012684 <__libc_init_array+0x44>)
 8012654:	f000 fd98 	bl	8013188 <_init>
 8012658:	1b64      	subs	r4, r4, r5
 801265a:	10a4      	asrs	r4, r4, #2
 801265c:	2600      	movs	r6, #0
 801265e:	42a6      	cmp	r6, r4
 8012660:	d105      	bne.n	801266e <__libc_init_array+0x2e>
 8012662:	bd70      	pop	{r4, r5, r6, pc}
 8012664:	f855 3b04 	ldr.w	r3, [r5], #4
 8012668:	4798      	blx	r3
 801266a:	3601      	adds	r6, #1
 801266c:	e7ee      	b.n	801264c <__libc_init_array+0xc>
 801266e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012672:	4798      	blx	r3
 8012674:	3601      	adds	r6, #1
 8012676:	e7f2      	b.n	801265e <__libc_init_array+0x1e>
 8012678:	08015430 	.word	0x08015430
 801267c:	08015430 	.word	0x08015430
 8012680:	08015430 	.word	0x08015430
 8012684:	08015434 	.word	0x08015434

08012688 <__retarget_lock_init_recursive>:
 8012688:	4770      	bx	lr

0801268a <__retarget_lock_acquire_recursive>:
 801268a:	4770      	bx	lr

0801268c <__retarget_lock_release_recursive>:
 801268c:	4770      	bx	lr

0801268e <strcpy>:
 801268e:	4603      	mov	r3, r0
 8012690:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012694:	f803 2b01 	strb.w	r2, [r3], #1
 8012698:	2a00      	cmp	r2, #0
 801269a:	d1f9      	bne.n	8012690 <strcpy+0x2>
 801269c:	4770      	bx	lr

0801269e <memcpy>:
 801269e:	440a      	add	r2, r1
 80126a0:	4291      	cmp	r1, r2
 80126a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80126a6:	d100      	bne.n	80126aa <memcpy+0xc>
 80126a8:	4770      	bx	lr
 80126aa:	b510      	push	{r4, lr}
 80126ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80126b4:	4291      	cmp	r1, r2
 80126b6:	d1f9      	bne.n	80126ac <memcpy+0xe>
 80126b8:	bd10      	pop	{r4, pc}

080126ba <abort>:
 80126ba:	b508      	push	{r3, lr}
 80126bc:	2006      	movs	r0, #6
 80126be:	f000 fcc3 	bl	8013048 <raise>
 80126c2:	2001      	movs	r0, #1
 80126c4:	f7f8 ff82 	bl	800b5cc <_exit>

080126c8 <_free_r>:
 80126c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126ca:	2900      	cmp	r1, #0
 80126cc:	d044      	beq.n	8012758 <_free_r+0x90>
 80126ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126d2:	9001      	str	r0, [sp, #4]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f1a1 0404 	sub.w	r4, r1, #4
 80126da:	bfb8      	it	lt
 80126dc:	18e4      	addlt	r4, r4, r3
 80126de:	f7ff fd05 	bl	80120ec <__malloc_lock>
 80126e2:	4a1e      	ldr	r2, [pc, #120]	; (801275c <_free_r+0x94>)
 80126e4:	9801      	ldr	r0, [sp, #4]
 80126e6:	6813      	ldr	r3, [r2, #0]
 80126e8:	b933      	cbnz	r3, 80126f8 <_free_r+0x30>
 80126ea:	6063      	str	r3, [r4, #4]
 80126ec:	6014      	str	r4, [r2, #0]
 80126ee:	b003      	add	sp, #12
 80126f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126f4:	f7ff bd00 	b.w	80120f8 <__malloc_unlock>
 80126f8:	42a3      	cmp	r3, r4
 80126fa:	d908      	bls.n	801270e <_free_r+0x46>
 80126fc:	6825      	ldr	r5, [r4, #0]
 80126fe:	1961      	adds	r1, r4, r5
 8012700:	428b      	cmp	r3, r1
 8012702:	bf01      	itttt	eq
 8012704:	6819      	ldreq	r1, [r3, #0]
 8012706:	685b      	ldreq	r3, [r3, #4]
 8012708:	1949      	addeq	r1, r1, r5
 801270a:	6021      	streq	r1, [r4, #0]
 801270c:	e7ed      	b.n	80126ea <_free_r+0x22>
 801270e:	461a      	mov	r2, r3
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	b10b      	cbz	r3, 8012718 <_free_r+0x50>
 8012714:	42a3      	cmp	r3, r4
 8012716:	d9fa      	bls.n	801270e <_free_r+0x46>
 8012718:	6811      	ldr	r1, [r2, #0]
 801271a:	1855      	adds	r5, r2, r1
 801271c:	42a5      	cmp	r5, r4
 801271e:	d10b      	bne.n	8012738 <_free_r+0x70>
 8012720:	6824      	ldr	r4, [r4, #0]
 8012722:	4421      	add	r1, r4
 8012724:	1854      	adds	r4, r2, r1
 8012726:	42a3      	cmp	r3, r4
 8012728:	6011      	str	r1, [r2, #0]
 801272a:	d1e0      	bne.n	80126ee <_free_r+0x26>
 801272c:	681c      	ldr	r4, [r3, #0]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	6053      	str	r3, [r2, #4]
 8012732:	440c      	add	r4, r1
 8012734:	6014      	str	r4, [r2, #0]
 8012736:	e7da      	b.n	80126ee <_free_r+0x26>
 8012738:	d902      	bls.n	8012740 <_free_r+0x78>
 801273a:	230c      	movs	r3, #12
 801273c:	6003      	str	r3, [r0, #0]
 801273e:	e7d6      	b.n	80126ee <_free_r+0x26>
 8012740:	6825      	ldr	r5, [r4, #0]
 8012742:	1961      	adds	r1, r4, r5
 8012744:	428b      	cmp	r3, r1
 8012746:	bf04      	itt	eq
 8012748:	6819      	ldreq	r1, [r3, #0]
 801274a:	685b      	ldreq	r3, [r3, #4]
 801274c:	6063      	str	r3, [r4, #4]
 801274e:	bf04      	itt	eq
 8012750:	1949      	addeq	r1, r1, r5
 8012752:	6021      	streq	r1, [r4, #0]
 8012754:	6054      	str	r4, [r2, #4]
 8012756:	e7ca      	b.n	80126ee <_free_r+0x26>
 8012758:	b003      	add	sp, #12
 801275a:	bd30      	pop	{r4, r5, pc}
 801275c:	20008068 	.word	0x20008068

08012760 <__sfputc_r>:
 8012760:	6893      	ldr	r3, [r2, #8]
 8012762:	3b01      	subs	r3, #1
 8012764:	2b00      	cmp	r3, #0
 8012766:	b410      	push	{r4}
 8012768:	6093      	str	r3, [r2, #8]
 801276a:	da08      	bge.n	801277e <__sfputc_r+0x1e>
 801276c:	6994      	ldr	r4, [r2, #24]
 801276e:	42a3      	cmp	r3, r4
 8012770:	db01      	blt.n	8012776 <__sfputc_r+0x16>
 8012772:	290a      	cmp	r1, #10
 8012774:	d103      	bne.n	801277e <__sfputc_r+0x1e>
 8012776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801277a:	f000 bba7 	b.w	8012ecc <__swbuf_r>
 801277e:	6813      	ldr	r3, [r2, #0]
 8012780:	1c58      	adds	r0, r3, #1
 8012782:	6010      	str	r0, [r2, #0]
 8012784:	7019      	strb	r1, [r3, #0]
 8012786:	4608      	mov	r0, r1
 8012788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801278c:	4770      	bx	lr

0801278e <__sfputs_r>:
 801278e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012790:	4606      	mov	r6, r0
 8012792:	460f      	mov	r7, r1
 8012794:	4614      	mov	r4, r2
 8012796:	18d5      	adds	r5, r2, r3
 8012798:	42ac      	cmp	r4, r5
 801279a:	d101      	bne.n	80127a0 <__sfputs_r+0x12>
 801279c:	2000      	movs	r0, #0
 801279e:	e007      	b.n	80127b0 <__sfputs_r+0x22>
 80127a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127a4:	463a      	mov	r2, r7
 80127a6:	4630      	mov	r0, r6
 80127a8:	f7ff ffda 	bl	8012760 <__sfputc_r>
 80127ac:	1c43      	adds	r3, r0, #1
 80127ae:	d1f3      	bne.n	8012798 <__sfputs_r+0xa>
 80127b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080127b4 <_vfiprintf_r>:
 80127b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b8:	460d      	mov	r5, r1
 80127ba:	b09d      	sub	sp, #116	; 0x74
 80127bc:	4614      	mov	r4, r2
 80127be:	4698      	mov	r8, r3
 80127c0:	4606      	mov	r6, r0
 80127c2:	b118      	cbz	r0, 80127cc <_vfiprintf_r+0x18>
 80127c4:	6a03      	ldr	r3, [r0, #32]
 80127c6:	b90b      	cbnz	r3, 80127cc <_vfiprintf_r+0x18>
 80127c8:	f7ff fde2 	bl	8012390 <__sinit>
 80127cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127ce:	07d9      	lsls	r1, r3, #31
 80127d0:	d405      	bmi.n	80127de <_vfiprintf_r+0x2a>
 80127d2:	89ab      	ldrh	r3, [r5, #12]
 80127d4:	059a      	lsls	r2, r3, #22
 80127d6:	d402      	bmi.n	80127de <_vfiprintf_r+0x2a>
 80127d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127da:	f7ff ff56 	bl	801268a <__retarget_lock_acquire_recursive>
 80127de:	89ab      	ldrh	r3, [r5, #12]
 80127e0:	071b      	lsls	r3, r3, #28
 80127e2:	d501      	bpl.n	80127e8 <_vfiprintf_r+0x34>
 80127e4:	692b      	ldr	r3, [r5, #16]
 80127e6:	b99b      	cbnz	r3, 8012810 <_vfiprintf_r+0x5c>
 80127e8:	4629      	mov	r1, r5
 80127ea:	4630      	mov	r0, r6
 80127ec:	f000 fbac 	bl	8012f48 <__swsetup_r>
 80127f0:	b170      	cbz	r0, 8012810 <_vfiprintf_r+0x5c>
 80127f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127f4:	07dc      	lsls	r4, r3, #31
 80127f6:	d504      	bpl.n	8012802 <_vfiprintf_r+0x4e>
 80127f8:	f04f 30ff 	mov.w	r0, #4294967295
 80127fc:	b01d      	add	sp, #116	; 0x74
 80127fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012802:	89ab      	ldrh	r3, [r5, #12]
 8012804:	0598      	lsls	r0, r3, #22
 8012806:	d4f7      	bmi.n	80127f8 <_vfiprintf_r+0x44>
 8012808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801280a:	f7ff ff3f 	bl	801268c <__retarget_lock_release_recursive>
 801280e:	e7f3      	b.n	80127f8 <_vfiprintf_r+0x44>
 8012810:	2300      	movs	r3, #0
 8012812:	9309      	str	r3, [sp, #36]	; 0x24
 8012814:	2320      	movs	r3, #32
 8012816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801281a:	f8cd 800c 	str.w	r8, [sp, #12]
 801281e:	2330      	movs	r3, #48	; 0x30
 8012820:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80129d4 <_vfiprintf_r+0x220>
 8012824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012828:	f04f 0901 	mov.w	r9, #1
 801282c:	4623      	mov	r3, r4
 801282e:	469a      	mov	sl, r3
 8012830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012834:	b10a      	cbz	r2, 801283a <_vfiprintf_r+0x86>
 8012836:	2a25      	cmp	r2, #37	; 0x25
 8012838:	d1f9      	bne.n	801282e <_vfiprintf_r+0x7a>
 801283a:	ebba 0b04 	subs.w	fp, sl, r4
 801283e:	d00b      	beq.n	8012858 <_vfiprintf_r+0xa4>
 8012840:	465b      	mov	r3, fp
 8012842:	4622      	mov	r2, r4
 8012844:	4629      	mov	r1, r5
 8012846:	4630      	mov	r0, r6
 8012848:	f7ff ffa1 	bl	801278e <__sfputs_r>
 801284c:	3001      	adds	r0, #1
 801284e:	f000 80a9 	beq.w	80129a4 <_vfiprintf_r+0x1f0>
 8012852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012854:	445a      	add	r2, fp
 8012856:	9209      	str	r2, [sp, #36]	; 0x24
 8012858:	f89a 3000 	ldrb.w	r3, [sl]
 801285c:	2b00      	cmp	r3, #0
 801285e:	f000 80a1 	beq.w	80129a4 <_vfiprintf_r+0x1f0>
 8012862:	2300      	movs	r3, #0
 8012864:	f04f 32ff 	mov.w	r2, #4294967295
 8012868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801286c:	f10a 0a01 	add.w	sl, sl, #1
 8012870:	9304      	str	r3, [sp, #16]
 8012872:	9307      	str	r3, [sp, #28]
 8012874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012878:	931a      	str	r3, [sp, #104]	; 0x68
 801287a:	4654      	mov	r4, sl
 801287c:	2205      	movs	r2, #5
 801287e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012882:	4854      	ldr	r0, [pc, #336]	; (80129d4 <_vfiprintf_r+0x220>)
 8012884:	f7ed fcd4 	bl	8000230 <memchr>
 8012888:	9a04      	ldr	r2, [sp, #16]
 801288a:	b9d8      	cbnz	r0, 80128c4 <_vfiprintf_r+0x110>
 801288c:	06d1      	lsls	r1, r2, #27
 801288e:	bf44      	itt	mi
 8012890:	2320      	movmi	r3, #32
 8012892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012896:	0713      	lsls	r3, r2, #28
 8012898:	bf44      	itt	mi
 801289a:	232b      	movmi	r3, #43	; 0x2b
 801289c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128a0:	f89a 3000 	ldrb.w	r3, [sl]
 80128a4:	2b2a      	cmp	r3, #42	; 0x2a
 80128a6:	d015      	beq.n	80128d4 <_vfiprintf_r+0x120>
 80128a8:	9a07      	ldr	r2, [sp, #28]
 80128aa:	4654      	mov	r4, sl
 80128ac:	2000      	movs	r0, #0
 80128ae:	f04f 0c0a 	mov.w	ip, #10
 80128b2:	4621      	mov	r1, r4
 80128b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128b8:	3b30      	subs	r3, #48	; 0x30
 80128ba:	2b09      	cmp	r3, #9
 80128bc:	d94d      	bls.n	801295a <_vfiprintf_r+0x1a6>
 80128be:	b1b0      	cbz	r0, 80128ee <_vfiprintf_r+0x13a>
 80128c0:	9207      	str	r2, [sp, #28]
 80128c2:	e014      	b.n	80128ee <_vfiprintf_r+0x13a>
 80128c4:	eba0 0308 	sub.w	r3, r0, r8
 80128c8:	fa09 f303 	lsl.w	r3, r9, r3
 80128cc:	4313      	orrs	r3, r2
 80128ce:	9304      	str	r3, [sp, #16]
 80128d0:	46a2      	mov	sl, r4
 80128d2:	e7d2      	b.n	801287a <_vfiprintf_r+0xc6>
 80128d4:	9b03      	ldr	r3, [sp, #12]
 80128d6:	1d19      	adds	r1, r3, #4
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	9103      	str	r1, [sp, #12]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	bfbb      	ittet	lt
 80128e0:	425b      	neglt	r3, r3
 80128e2:	f042 0202 	orrlt.w	r2, r2, #2
 80128e6:	9307      	strge	r3, [sp, #28]
 80128e8:	9307      	strlt	r3, [sp, #28]
 80128ea:	bfb8      	it	lt
 80128ec:	9204      	strlt	r2, [sp, #16]
 80128ee:	7823      	ldrb	r3, [r4, #0]
 80128f0:	2b2e      	cmp	r3, #46	; 0x2e
 80128f2:	d10c      	bne.n	801290e <_vfiprintf_r+0x15a>
 80128f4:	7863      	ldrb	r3, [r4, #1]
 80128f6:	2b2a      	cmp	r3, #42	; 0x2a
 80128f8:	d134      	bne.n	8012964 <_vfiprintf_r+0x1b0>
 80128fa:	9b03      	ldr	r3, [sp, #12]
 80128fc:	1d1a      	adds	r2, r3, #4
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	9203      	str	r2, [sp, #12]
 8012902:	2b00      	cmp	r3, #0
 8012904:	bfb8      	it	lt
 8012906:	f04f 33ff 	movlt.w	r3, #4294967295
 801290a:	3402      	adds	r4, #2
 801290c:	9305      	str	r3, [sp, #20]
 801290e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80129e4 <_vfiprintf_r+0x230>
 8012912:	7821      	ldrb	r1, [r4, #0]
 8012914:	2203      	movs	r2, #3
 8012916:	4650      	mov	r0, sl
 8012918:	f7ed fc8a 	bl	8000230 <memchr>
 801291c:	b138      	cbz	r0, 801292e <_vfiprintf_r+0x17a>
 801291e:	9b04      	ldr	r3, [sp, #16]
 8012920:	eba0 000a 	sub.w	r0, r0, sl
 8012924:	2240      	movs	r2, #64	; 0x40
 8012926:	4082      	lsls	r2, r0
 8012928:	4313      	orrs	r3, r2
 801292a:	3401      	adds	r4, #1
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012932:	4829      	ldr	r0, [pc, #164]	; (80129d8 <_vfiprintf_r+0x224>)
 8012934:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012938:	2206      	movs	r2, #6
 801293a:	f7ed fc79 	bl	8000230 <memchr>
 801293e:	2800      	cmp	r0, #0
 8012940:	d03f      	beq.n	80129c2 <_vfiprintf_r+0x20e>
 8012942:	4b26      	ldr	r3, [pc, #152]	; (80129dc <_vfiprintf_r+0x228>)
 8012944:	bb1b      	cbnz	r3, 801298e <_vfiprintf_r+0x1da>
 8012946:	9b03      	ldr	r3, [sp, #12]
 8012948:	3307      	adds	r3, #7
 801294a:	f023 0307 	bic.w	r3, r3, #7
 801294e:	3308      	adds	r3, #8
 8012950:	9303      	str	r3, [sp, #12]
 8012952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012954:	443b      	add	r3, r7
 8012956:	9309      	str	r3, [sp, #36]	; 0x24
 8012958:	e768      	b.n	801282c <_vfiprintf_r+0x78>
 801295a:	fb0c 3202 	mla	r2, ip, r2, r3
 801295e:	460c      	mov	r4, r1
 8012960:	2001      	movs	r0, #1
 8012962:	e7a6      	b.n	80128b2 <_vfiprintf_r+0xfe>
 8012964:	2300      	movs	r3, #0
 8012966:	3401      	adds	r4, #1
 8012968:	9305      	str	r3, [sp, #20]
 801296a:	4619      	mov	r1, r3
 801296c:	f04f 0c0a 	mov.w	ip, #10
 8012970:	4620      	mov	r0, r4
 8012972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012976:	3a30      	subs	r2, #48	; 0x30
 8012978:	2a09      	cmp	r2, #9
 801297a:	d903      	bls.n	8012984 <_vfiprintf_r+0x1d0>
 801297c:	2b00      	cmp	r3, #0
 801297e:	d0c6      	beq.n	801290e <_vfiprintf_r+0x15a>
 8012980:	9105      	str	r1, [sp, #20]
 8012982:	e7c4      	b.n	801290e <_vfiprintf_r+0x15a>
 8012984:	fb0c 2101 	mla	r1, ip, r1, r2
 8012988:	4604      	mov	r4, r0
 801298a:	2301      	movs	r3, #1
 801298c:	e7f0      	b.n	8012970 <_vfiprintf_r+0x1bc>
 801298e:	ab03      	add	r3, sp, #12
 8012990:	9300      	str	r3, [sp, #0]
 8012992:	462a      	mov	r2, r5
 8012994:	4b12      	ldr	r3, [pc, #72]	; (80129e0 <_vfiprintf_r+0x22c>)
 8012996:	a904      	add	r1, sp, #16
 8012998:	4630      	mov	r0, r6
 801299a:	f3af 8000 	nop.w
 801299e:	4607      	mov	r7, r0
 80129a0:	1c78      	adds	r0, r7, #1
 80129a2:	d1d6      	bne.n	8012952 <_vfiprintf_r+0x19e>
 80129a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129a6:	07d9      	lsls	r1, r3, #31
 80129a8:	d405      	bmi.n	80129b6 <_vfiprintf_r+0x202>
 80129aa:	89ab      	ldrh	r3, [r5, #12]
 80129ac:	059a      	lsls	r2, r3, #22
 80129ae:	d402      	bmi.n	80129b6 <_vfiprintf_r+0x202>
 80129b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129b2:	f7ff fe6b 	bl	801268c <__retarget_lock_release_recursive>
 80129b6:	89ab      	ldrh	r3, [r5, #12]
 80129b8:	065b      	lsls	r3, r3, #25
 80129ba:	f53f af1d 	bmi.w	80127f8 <_vfiprintf_r+0x44>
 80129be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129c0:	e71c      	b.n	80127fc <_vfiprintf_r+0x48>
 80129c2:	ab03      	add	r3, sp, #12
 80129c4:	9300      	str	r3, [sp, #0]
 80129c6:	462a      	mov	r2, r5
 80129c8:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <_vfiprintf_r+0x22c>)
 80129ca:	a904      	add	r1, sp, #16
 80129cc:	4630      	mov	r0, r6
 80129ce:	f000 f879 	bl	8012ac4 <_printf_i>
 80129d2:	e7e4      	b.n	801299e <_vfiprintf_r+0x1ea>
 80129d4:	080153f4 	.word	0x080153f4
 80129d8:	080153fe 	.word	0x080153fe
 80129dc:	00000000 	.word	0x00000000
 80129e0:	0801278f 	.word	0x0801278f
 80129e4:	080153fa 	.word	0x080153fa

080129e8 <_printf_common>:
 80129e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129ec:	4616      	mov	r6, r2
 80129ee:	4699      	mov	r9, r3
 80129f0:	688a      	ldr	r2, [r1, #8]
 80129f2:	690b      	ldr	r3, [r1, #16]
 80129f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129f8:	4293      	cmp	r3, r2
 80129fa:	bfb8      	it	lt
 80129fc:	4613      	movlt	r3, r2
 80129fe:	6033      	str	r3, [r6, #0]
 8012a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a04:	4607      	mov	r7, r0
 8012a06:	460c      	mov	r4, r1
 8012a08:	b10a      	cbz	r2, 8012a0e <_printf_common+0x26>
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	6033      	str	r3, [r6, #0]
 8012a0e:	6823      	ldr	r3, [r4, #0]
 8012a10:	0699      	lsls	r1, r3, #26
 8012a12:	bf42      	ittt	mi
 8012a14:	6833      	ldrmi	r3, [r6, #0]
 8012a16:	3302      	addmi	r3, #2
 8012a18:	6033      	strmi	r3, [r6, #0]
 8012a1a:	6825      	ldr	r5, [r4, #0]
 8012a1c:	f015 0506 	ands.w	r5, r5, #6
 8012a20:	d106      	bne.n	8012a30 <_printf_common+0x48>
 8012a22:	f104 0a19 	add.w	sl, r4, #25
 8012a26:	68e3      	ldr	r3, [r4, #12]
 8012a28:	6832      	ldr	r2, [r6, #0]
 8012a2a:	1a9b      	subs	r3, r3, r2
 8012a2c:	42ab      	cmp	r3, r5
 8012a2e:	dc26      	bgt.n	8012a7e <_printf_common+0x96>
 8012a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a34:	1e13      	subs	r3, r2, #0
 8012a36:	6822      	ldr	r2, [r4, #0]
 8012a38:	bf18      	it	ne
 8012a3a:	2301      	movne	r3, #1
 8012a3c:	0692      	lsls	r2, r2, #26
 8012a3e:	d42b      	bmi.n	8012a98 <_printf_common+0xb0>
 8012a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a44:	4649      	mov	r1, r9
 8012a46:	4638      	mov	r0, r7
 8012a48:	47c0      	blx	r8
 8012a4a:	3001      	adds	r0, #1
 8012a4c:	d01e      	beq.n	8012a8c <_printf_common+0xa4>
 8012a4e:	6823      	ldr	r3, [r4, #0]
 8012a50:	6922      	ldr	r2, [r4, #16]
 8012a52:	f003 0306 	and.w	r3, r3, #6
 8012a56:	2b04      	cmp	r3, #4
 8012a58:	bf02      	ittt	eq
 8012a5a:	68e5      	ldreq	r5, [r4, #12]
 8012a5c:	6833      	ldreq	r3, [r6, #0]
 8012a5e:	1aed      	subeq	r5, r5, r3
 8012a60:	68a3      	ldr	r3, [r4, #8]
 8012a62:	bf0c      	ite	eq
 8012a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a68:	2500      	movne	r5, #0
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	bfc4      	itt	gt
 8012a6e:	1a9b      	subgt	r3, r3, r2
 8012a70:	18ed      	addgt	r5, r5, r3
 8012a72:	2600      	movs	r6, #0
 8012a74:	341a      	adds	r4, #26
 8012a76:	42b5      	cmp	r5, r6
 8012a78:	d11a      	bne.n	8012ab0 <_printf_common+0xc8>
 8012a7a:	2000      	movs	r0, #0
 8012a7c:	e008      	b.n	8012a90 <_printf_common+0xa8>
 8012a7e:	2301      	movs	r3, #1
 8012a80:	4652      	mov	r2, sl
 8012a82:	4649      	mov	r1, r9
 8012a84:	4638      	mov	r0, r7
 8012a86:	47c0      	blx	r8
 8012a88:	3001      	adds	r0, #1
 8012a8a:	d103      	bne.n	8012a94 <_printf_common+0xac>
 8012a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a94:	3501      	adds	r5, #1
 8012a96:	e7c6      	b.n	8012a26 <_printf_common+0x3e>
 8012a98:	18e1      	adds	r1, r4, r3
 8012a9a:	1c5a      	adds	r2, r3, #1
 8012a9c:	2030      	movs	r0, #48	; 0x30
 8012a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012aa2:	4422      	add	r2, r4
 8012aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012aac:	3302      	adds	r3, #2
 8012aae:	e7c7      	b.n	8012a40 <_printf_common+0x58>
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	4622      	mov	r2, r4
 8012ab4:	4649      	mov	r1, r9
 8012ab6:	4638      	mov	r0, r7
 8012ab8:	47c0      	blx	r8
 8012aba:	3001      	adds	r0, #1
 8012abc:	d0e6      	beq.n	8012a8c <_printf_common+0xa4>
 8012abe:	3601      	adds	r6, #1
 8012ac0:	e7d9      	b.n	8012a76 <_printf_common+0x8e>
	...

08012ac4 <_printf_i>:
 8012ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ac8:	7e0f      	ldrb	r7, [r1, #24]
 8012aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012acc:	2f78      	cmp	r7, #120	; 0x78
 8012ace:	4691      	mov	r9, r2
 8012ad0:	4680      	mov	r8, r0
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	469a      	mov	sl, r3
 8012ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012ada:	d807      	bhi.n	8012aec <_printf_i+0x28>
 8012adc:	2f62      	cmp	r7, #98	; 0x62
 8012ade:	d80a      	bhi.n	8012af6 <_printf_i+0x32>
 8012ae0:	2f00      	cmp	r7, #0
 8012ae2:	f000 80d4 	beq.w	8012c8e <_printf_i+0x1ca>
 8012ae6:	2f58      	cmp	r7, #88	; 0x58
 8012ae8:	f000 80c0 	beq.w	8012c6c <_printf_i+0x1a8>
 8012aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012af4:	e03a      	b.n	8012b6c <_printf_i+0xa8>
 8012af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012afa:	2b15      	cmp	r3, #21
 8012afc:	d8f6      	bhi.n	8012aec <_printf_i+0x28>
 8012afe:	a101      	add	r1, pc, #4	; (adr r1, 8012b04 <_printf_i+0x40>)
 8012b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b04:	08012b5d 	.word	0x08012b5d
 8012b08:	08012b71 	.word	0x08012b71
 8012b0c:	08012aed 	.word	0x08012aed
 8012b10:	08012aed 	.word	0x08012aed
 8012b14:	08012aed 	.word	0x08012aed
 8012b18:	08012aed 	.word	0x08012aed
 8012b1c:	08012b71 	.word	0x08012b71
 8012b20:	08012aed 	.word	0x08012aed
 8012b24:	08012aed 	.word	0x08012aed
 8012b28:	08012aed 	.word	0x08012aed
 8012b2c:	08012aed 	.word	0x08012aed
 8012b30:	08012c75 	.word	0x08012c75
 8012b34:	08012b9d 	.word	0x08012b9d
 8012b38:	08012c2f 	.word	0x08012c2f
 8012b3c:	08012aed 	.word	0x08012aed
 8012b40:	08012aed 	.word	0x08012aed
 8012b44:	08012c97 	.word	0x08012c97
 8012b48:	08012aed 	.word	0x08012aed
 8012b4c:	08012b9d 	.word	0x08012b9d
 8012b50:	08012aed 	.word	0x08012aed
 8012b54:	08012aed 	.word	0x08012aed
 8012b58:	08012c37 	.word	0x08012c37
 8012b5c:	682b      	ldr	r3, [r5, #0]
 8012b5e:	1d1a      	adds	r2, r3, #4
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	602a      	str	r2, [r5, #0]
 8012b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	e09f      	b.n	8012cb0 <_printf_i+0x1ec>
 8012b70:	6820      	ldr	r0, [r4, #0]
 8012b72:	682b      	ldr	r3, [r5, #0]
 8012b74:	0607      	lsls	r7, r0, #24
 8012b76:	f103 0104 	add.w	r1, r3, #4
 8012b7a:	6029      	str	r1, [r5, #0]
 8012b7c:	d501      	bpl.n	8012b82 <_printf_i+0xbe>
 8012b7e:	681e      	ldr	r6, [r3, #0]
 8012b80:	e003      	b.n	8012b8a <_printf_i+0xc6>
 8012b82:	0646      	lsls	r6, r0, #25
 8012b84:	d5fb      	bpl.n	8012b7e <_printf_i+0xba>
 8012b86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012b8a:	2e00      	cmp	r6, #0
 8012b8c:	da03      	bge.n	8012b96 <_printf_i+0xd2>
 8012b8e:	232d      	movs	r3, #45	; 0x2d
 8012b90:	4276      	negs	r6, r6
 8012b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b96:	485a      	ldr	r0, [pc, #360]	; (8012d00 <_printf_i+0x23c>)
 8012b98:	230a      	movs	r3, #10
 8012b9a:	e012      	b.n	8012bc2 <_printf_i+0xfe>
 8012b9c:	682b      	ldr	r3, [r5, #0]
 8012b9e:	6820      	ldr	r0, [r4, #0]
 8012ba0:	1d19      	adds	r1, r3, #4
 8012ba2:	6029      	str	r1, [r5, #0]
 8012ba4:	0605      	lsls	r5, r0, #24
 8012ba6:	d501      	bpl.n	8012bac <_printf_i+0xe8>
 8012ba8:	681e      	ldr	r6, [r3, #0]
 8012baa:	e002      	b.n	8012bb2 <_printf_i+0xee>
 8012bac:	0641      	lsls	r1, r0, #25
 8012bae:	d5fb      	bpl.n	8012ba8 <_printf_i+0xe4>
 8012bb0:	881e      	ldrh	r6, [r3, #0]
 8012bb2:	4853      	ldr	r0, [pc, #332]	; (8012d00 <_printf_i+0x23c>)
 8012bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8012bb6:	bf0c      	ite	eq
 8012bb8:	2308      	moveq	r3, #8
 8012bba:	230a      	movne	r3, #10
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012bc2:	6865      	ldr	r5, [r4, #4]
 8012bc4:	60a5      	str	r5, [r4, #8]
 8012bc6:	2d00      	cmp	r5, #0
 8012bc8:	bfa2      	ittt	ge
 8012bca:	6821      	ldrge	r1, [r4, #0]
 8012bcc:	f021 0104 	bicge.w	r1, r1, #4
 8012bd0:	6021      	strge	r1, [r4, #0]
 8012bd2:	b90e      	cbnz	r6, 8012bd8 <_printf_i+0x114>
 8012bd4:	2d00      	cmp	r5, #0
 8012bd6:	d04b      	beq.n	8012c70 <_printf_i+0x1ac>
 8012bd8:	4615      	mov	r5, r2
 8012bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8012bde:	fb03 6711 	mls	r7, r3, r1, r6
 8012be2:	5dc7      	ldrb	r7, [r0, r7]
 8012be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012be8:	4637      	mov	r7, r6
 8012bea:	42bb      	cmp	r3, r7
 8012bec:	460e      	mov	r6, r1
 8012bee:	d9f4      	bls.n	8012bda <_printf_i+0x116>
 8012bf0:	2b08      	cmp	r3, #8
 8012bf2:	d10b      	bne.n	8012c0c <_printf_i+0x148>
 8012bf4:	6823      	ldr	r3, [r4, #0]
 8012bf6:	07de      	lsls	r6, r3, #31
 8012bf8:	d508      	bpl.n	8012c0c <_printf_i+0x148>
 8012bfa:	6923      	ldr	r3, [r4, #16]
 8012bfc:	6861      	ldr	r1, [r4, #4]
 8012bfe:	4299      	cmp	r1, r3
 8012c00:	bfde      	ittt	le
 8012c02:	2330      	movle	r3, #48	; 0x30
 8012c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012c0c:	1b52      	subs	r2, r2, r5
 8012c0e:	6122      	str	r2, [r4, #16]
 8012c10:	f8cd a000 	str.w	sl, [sp]
 8012c14:	464b      	mov	r3, r9
 8012c16:	aa03      	add	r2, sp, #12
 8012c18:	4621      	mov	r1, r4
 8012c1a:	4640      	mov	r0, r8
 8012c1c:	f7ff fee4 	bl	80129e8 <_printf_common>
 8012c20:	3001      	adds	r0, #1
 8012c22:	d14a      	bne.n	8012cba <_printf_i+0x1f6>
 8012c24:	f04f 30ff 	mov.w	r0, #4294967295
 8012c28:	b004      	add	sp, #16
 8012c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	f043 0320 	orr.w	r3, r3, #32
 8012c34:	6023      	str	r3, [r4, #0]
 8012c36:	4833      	ldr	r0, [pc, #204]	; (8012d04 <_printf_i+0x240>)
 8012c38:	2778      	movs	r7, #120	; 0x78
 8012c3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	6829      	ldr	r1, [r5, #0]
 8012c42:	061f      	lsls	r7, r3, #24
 8012c44:	f851 6b04 	ldr.w	r6, [r1], #4
 8012c48:	d402      	bmi.n	8012c50 <_printf_i+0x18c>
 8012c4a:	065f      	lsls	r7, r3, #25
 8012c4c:	bf48      	it	mi
 8012c4e:	b2b6      	uxthmi	r6, r6
 8012c50:	07df      	lsls	r7, r3, #31
 8012c52:	bf48      	it	mi
 8012c54:	f043 0320 	orrmi.w	r3, r3, #32
 8012c58:	6029      	str	r1, [r5, #0]
 8012c5a:	bf48      	it	mi
 8012c5c:	6023      	strmi	r3, [r4, #0]
 8012c5e:	b91e      	cbnz	r6, 8012c68 <_printf_i+0x1a4>
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	f023 0320 	bic.w	r3, r3, #32
 8012c66:	6023      	str	r3, [r4, #0]
 8012c68:	2310      	movs	r3, #16
 8012c6a:	e7a7      	b.n	8012bbc <_printf_i+0xf8>
 8012c6c:	4824      	ldr	r0, [pc, #144]	; (8012d00 <_printf_i+0x23c>)
 8012c6e:	e7e4      	b.n	8012c3a <_printf_i+0x176>
 8012c70:	4615      	mov	r5, r2
 8012c72:	e7bd      	b.n	8012bf0 <_printf_i+0x12c>
 8012c74:	682b      	ldr	r3, [r5, #0]
 8012c76:	6826      	ldr	r6, [r4, #0]
 8012c78:	6961      	ldr	r1, [r4, #20]
 8012c7a:	1d18      	adds	r0, r3, #4
 8012c7c:	6028      	str	r0, [r5, #0]
 8012c7e:	0635      	lsls	r5, r6, #24
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	d501      	bpl.n	8012c88 <_printf_i+0x1c4>
 8012c84:	6019      	str	r1, [r3, #0]
 8012c86:	e002      	b.n	8012c8e <_printf_i+0x1ca>
 8012c88:	0670      	lsls	r0, r6, #25
 8012c8a:	d5fb      	bpl.n	8012c84 <_printf_i+0x1c0>
 8012c8c:	8019      	strh	r1, [r3, #0]
 8012c8e:	2300      	movs	r3, #0
 8012c90:	6123      	str	r3, [r4, #16]
 8012c92:	4615      	mov	r5, r2
 8012c94:	e7bc      	b.n	8012c10 <_printf_i+0x14c>
 8012c96:	682b      	ldr	r3, [r5, #0]
 8012c98:	1d1a      	adds	r2, r3, #4
 8012c9a:	602a      	str	r2, [r5, #0]
 8012c9c:	681d      	ldr	r5, [r3, #0]
 8012c9e:	6862      	ldr	r2, [r4, #4]
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	f7ed fac4 	bl	8000230 <memchr>
 8012ca8:	b108      	cbz	r0, 8012cae <_printf_i+0x1ea>
 8012caa:	1b40      	subs	r0, r0, r5
 8012cac:	6060      	str	r0, [r4, #4]
 8012cae:	6863      	ldr	r3, [r4, #4]
 8012cb0:	6123      	str	r3, [r4, #16]
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cb8:	e7aa      	b.n	8012c10 <_printf_i+0x14c>
 8012cba:	6923      	ldr	r3, [r4, #16]
 8012cbc:	462a      	mov	r2, r5
 8012cbe:	4649      	mov	r1, r9
 8012cc0:	4640      	mov	r0, r8
 8012cc2:	47d0      	blx	sl
 8012cc4:	3001      	adds	r0, #1
 8012cc6:	d0ad      	beq.n	8012c24 <_printf_i+0x160>
 8012cc8:	6823      	ldr	r3, [r4, #0]
 8012cca:	079b      	lsls	r3, r3, #30
 8012ccc:	d413      	bmi.n	8012cf6 <_printf_i+0x232>
 8012cce:	68e0      	ldr	r0, [r4, #12]
 8012cd0:	9b03      	ldr	r3, [sp, #12]
 8012cd2:	4298      	cmp	r0, r3
 8012cd4:	bfb8      	it	lt
 8012cd6:	4618      	movlt	r0, r3
 8012cd8:	e7a6      	b.n	8012c28 <_printf_i+0x164>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	4632      	mov	r2, r6
 8012cde:	4649      	mov	r1, r9
 8012ce0:	4640      	mov	r0, r8
 8012ce2:	47d0      	blx	sl
 8012ce4:	3001      	adds	r0, #1
 8012ce6:	d09d      	beq.n	8012c24 <_printf_i+0x160>
 8012ce8:	3501      	adds	r5, #1
 8012cea:	68e3      	ldr	r3, [r4, #12]
 8012cec:	9903      	ldr	r1, [sp, #12]
 8012cee:	1a5b      	subs	r3, r3, r1
 8012cf0:	42ab      	cmp	r3, r5
 8012cf2:	dcf2      	bgt.n	8012cda <_printf_i+0x216>
 8012cf4:	e7eb      	b.n	8012cce <_printf_i+0x20a>
 8012cf6:	2500      	movs	r5, #0
 8012cf8:	f104 0619 	add.w	r6, r4, #25
 8012cfc:	e7f5      	b.n	8012cea <_printf_i+0x226>
 8012cfe:	bf00      	nop
 8012d00:	08015405 	.word	0x08015405
 8012d04:	08015416 	.word	0x08015416

08012d08 <__sflush_r>:
 8012d08:	898a      	ldrh	r2, [r1, #12]
 8012d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0e:	4605      	mov	r5, r0
 8012d10:	0710      	lsls	r0, r2, #28
 8012d12:	460c      	mov	r4, r1
 8012d14:	d458      	bmi.n	8012dc8 <__sflush_r+0xc0>
 8012d16:	684b      	ldr	r3, [r1, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	dc05      	bgt.n	8012d28 <__sflush_r+0x20>
 8012d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	dc02      	bgt.n	8012d28 <__sflush_r+0x20>
 8012d22:	2000      	movs	r0, #0
 8012d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d2a:	2e00      	cmp	r6, #0
 8012d2c:	d0f9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012d2e:	2300      	movs	r3, #0
 8012d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d34:	682f      	ldr	r7, [r5, #0]
 8012d36:	6a21      	ldr	r1, [r4, #32]
 8012d38:	602b      	str	r3, [r5, #0]
 8012d3a:	d032      	beq.n	8012da2 <__sflush_r+0x9a>
 8012d3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d3e:	89a3      	ldrh	r3, [r4, #12]
 8012d40:	075a      	lsls	r2, r3, #29
 8012d42:	d505      	bpl.n	8012d50 <__sflush_r+0x48>
 8012d44:	6863      	ldr	r3, [r4, #4]
 8012d46:	1ac0      	subs	r0, r0, r3
 8012d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d4a:	b10b      	cbz	r3, 8012d50 <__sflush_r+0x48>
 8012d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d4e:	1ac0      	subs	r0, r0, r3
 8012d50:	2300      	movs	r3, #0
 8012d52:	4602      	mov	r2, r0
 8012d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d56:	6a21      	ldr	r1, [r4, #32]
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b0      	blx	r6
 8012d5c:	1c43      	adds	r3, r0, #1
 8012d5e:	89a3      	ldrh	r3, [r4, #12]
 8012d60:	d106      	bne.n	8012d70 <__sflush_r+0x68>
 8012d62:	6829      	ldr	r1, [r5, #0]
 8012d64:	291d      	cmp	r1, #29
 8012d66:	d82b      	bhi.n	8012dc0 <__sflush_r+0xb8>
 8012d68:	4a29      	ldr	r2, [pc, #164]	; (8012e10 <__sflush_r+0x108>)
 8012d6a:	410a      	asrs	r2, r1
 8012d6c:	07d6      	lsls	r6, r2, #31
 8012d6e:	d427      	bmi.n	8012dc0 <__sflush_r+0xb8>
 8012d70:	2200      	movs	r2, #0
 8012d72:	6062      	str	r2, [r4, #4]
 8012d74:	04d9      	lsls	r1, r3, #19
 8012d76:	6922      	ldr	r2, [r4, #16]
 8012d78:	6022      	str	r2, [r4, #0]
 8012d7a:	d504      	bpl.n	8012d86 <__sflush_r+0x7e>
 8012d7c:	1c42      	adds	r2, r0, #1
 8012d7e:	d101      	bne.n	8012d84 <__sflush_r+0x7c>
 8012d80:	682b      	ldr	r3, [r5, #0]
 8012d82:	b903      	cbnz	r3, 8012d86 <__sflush_r+0x7e>
 8012d84:	6560      	str	r0, [r4, #84]	; 0x54
 8012d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d88:	602f      	str	r7, [r5, #0]
 8012d8a:	2900      	cmp	r1, #0
 8012d8c:	d0c9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d92:	4299      	cmp	r1, r3
 8012d94:	d002      	beq.n	8012d9c <__sflush_r+0x94>
 8012d96:	4628      	mov	r0, r5
 8012d98:	f7ff fc96 	bl	80126c8 <_free_r>
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	6360      	str	r0, [r4, #52]	; 0x34
 8012da0:	e7c0      	b.n	8012d24 <__sflush_r+0x1c>
 8012da2:	2301      	movs	r3, #1
 8012da4:	4628      	mov	r0, r5
 8012da6:	47b0      	blx	r6
 8012da8:	1c41      	adds	r1, r0, #1
 8012daa:	d1c8      	bne.n	8012d3e <__sflush_r+0x36>
 8012dac:	682b      	ldr	r3, [r5, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d0c5      	beq.n	8012d3e <__sflush_r+0x36>
 8012db2:	2b1d      	cmp	r3, #29
 8012db4:	d001      	beq.n	8012dba <__sflush_r+0xb2>
 8012db6:	2b16      	cmp	r3, #22
 8012db8:	d101      	bne.n	8012dbe <__sflush_r+0xb6>
 8012dba:	602f      	str	r7, [r5, #0]
 8012dbc:	e7b1      	b.n	8012d22 <__sflush_r+0x1a>
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	e7ad      	b.n	8012d24 <__sflush_r+0x1c>
 8012dc8:	690f      	ldr	r7, [r1, #16]
 8012dca:	2f00      	cmp	r7, #0
 8012dcc:	d0a9      	beq.n	8012d22 <__sflush_r+0x1a>
 8012dce:	0793      	lsls	r3, r2, #30
 8012dd0:	680e      	ldr	r6, [r1, #0]
 8012dd2:	bf08      	it	eq
 8012dd4:	694b      	ldreq	r3, [r1, #20]
 8012dd6:	600f      	str	r7, [r1, #0]
 8012dd8:	bf18      	it	ne
 8012dda:	2300      	movne	r3, #0
 8012ddc:	eba6 0807 	sub.w	r8, r6, r7
 8012de0:	608b      	str	r3, [r1, #8]
 8012de2:	f1b8 0f00 	cmp.w	r8, #0
 8012de6:	dd9c      	ble.n	8012d22 <__sflush_r+0x1a>
 8012de8:	6a21      	ldr	r1, [r4, #32]
 8012dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012dec:	4643      	mov	r3, r8
 8012dee:	463a      	mov	r2, r7
 8012df0:	4628      	mov	r0, r5
 8012df2:	47b0      	blx	r6
 8012df4:	2800      	cmp	r0, #0
 8012df6:	dc06      	bgt.n	8012e06 <__sflush_r+0xfe>
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dfe:	81a3      	strh	r3, [r4, #12]
 8012e00:	f04f 30ff 	mov.w	r0, #4294967295
 8012e04:	e78e      	b.n	8012d24 <__sflush_r+0x1c>
 8012e06:	4407      	add	r7, r0
 8012e08:	eba8 0800 	sub.w	r8, r8, r0
 8012e0c:	e7e9      	b.n	8012de2 <__sflush_r+0xda>
 8012e0e:	bf00      	nop
 8012e10:	dfbffffe 	.word	0xdfbffffe

08012e14 <_fflush_r>:
 8012e14:	b538      	push	{r3, r4, r5, lr}
 8012e16:	690b      	ldr	r3, [r1, #16]
 8012e18:	4605      	mov	r5, r0
 8012e1a:	460c      	mov	r4, r1
 8012e1c:	b913      	cbnz	r3, 8012e24 <_fflush_r+0x10>
 8012e1e:	2500      	movs	r5, #0
 8012e20:	4628      	mov	r0, r5
 8012e22:	bd38      	pop	{r3, r4, r5, pc}
 8012e24:	b118      	cbz	r0, 8012e2e <_fflush_r+0x1a>
 8012e26:	6a03      	ldr	r3, [r0, #32]
 8012e28:	b90b      	cbnz	r3, 8012e2e <_fflush_r+0x1a>
 8012e2a:	f7ff fab1 	bl	8012390 <__sinit>
 8012e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d0f3      	beq.n	8012e1e <_fflush_r+0xa>
 8012e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e38:	07d0      	lsls	r0, r2, #31
 8012e3a:	d404      	bmi.n	8012e46 <_fflush_r+0x32>
 8012e3c:	0599      	lsls	r1, r3, #22
 8012e3e:	d402      	bmi.n	8012e46 <_fflush_r+0x32>
 8012e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e42:	f7ff fc22 	bl	801268a <__retarget_lock_acquire_recursive>
 8012e46:	4628      	mov	r0, r5
 8012e48:	4621      	mov	r1, r4
 8012e4a:	f7ff ff5d 	bl	8012d08 <__sflush_r>
 8012e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e50:	07da      	lsls	r2, r3, #31
 8012e52:	4605      	mov	r5, r0
 8012e54:	d4e4      	bmi.n	8012e20 <_fflush_r+0xc>
 8012e56:	89a3      	ldrh	r3, [r4, #12]
 8012e58:	059b      	lsls	r3, r3, #22
 8012e5a:	d4e1      	bmi.n	8012e20 <_fflush_r+0xc>
 8012e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e5e:	f7ff fc15 	bl	801268c <__retarget_lock_release_recursive>
 8012e62:	e7dd      	b.n	8012e20 <_fflush_r+0xc>

08012e64 <_putc_r>:
 8012e64:	b570      	push	{r4, r5, r6, lr}
 8012e66:	460d      	mov	r5, r1
 8012e68:	4614      	mov	r4, r2
 8012e6a:	4606      	mov	r6, r0
 8012e6c:	b118      	cbz	r0, 8012e76 <_putc_r+0x12>
 8012e6e:	6a03      	ldr	r3, [r0, #32]
 8012e70:	b90b      	cbnz	r3, 8012e76 <_putc_r+0x12>
 8012e72:	f7ff fa8d 	bl	8012390 <__sinit>
 8012e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e78:	07d8      	lsls	r0, r3, #31
 8012e7a:	d405      	bmi.n	8012e88 <_putc_r+0x24>
 8012e7c:	89a3      	ldrh	r3, [r4, #12]
 8012e7e:	0599      	lsls	r1, r3, #22
 8012e80:	d402      	bmi.n	8012e88 <_putc_r+0x24>
 8012e82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e84:	f7ff fc01 	bl	801268a <__retarget_lock_acquire_recursive>
 8012e88:	68a3      	ldr	r3, [r4, #8]
 8012e8a:	3b01      	subs	r3, #1
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	60a3      	str	r3, [r4, #8]
 8012e90:	da05      	bge.n	8012e9e <_putc_r+0x3a>
 8012e92:	69a2      	ldr	r2, [r4, #24]
 8012e94:	4293      	cmp	r3, r2
 8012e96:	db12      	blt.n	8012ebe <_putc_r+0x5a>
 8012e98:	b2eb      	uxtb	r3, r5
 8012e9a:	2b0a      	cmp	r3, #10
 8012e9c:	d00f      	beq.n	8012ebe <_putc_r+0x5a>
 8012e9e:	6823      	ldr	r3, [r4, #0]
 8012ea0:	1c5a      	adds	r2, r3, #1
 8012ea2:	6022      	str	r2, [r4, #0]
 8012ea4:	701d      	strb	r5, [r3, #0]
 8012ea6:	b2ed      	uxtb	r5, r5
 8012ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012eaa:	07da      	lsls	r2, r3, #31
 8012eac:	d405      	bmi.n	8012eba <_putc_r+0x56>
 8012eae:	89a3      	ldrh	r3, [r4, #12]
 8012eb0:	059b      	lsls	r3, r3, #22
 8012eb2:	d402      	bmi.n	8012eba <_putc_r+0x56>
 8012eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012eb6:	f7ff fbe9 	bl	801268c <__retarget_lock_release_recursive>
 8012eba:	4628      	mov	r0, r5
 8012ebc:	bd70      	pop	{r4, r5, r6, pc}
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	4630      	mov	r0, r6
 8012ec4:	f000 f802 	bl	8012ecc <__swbuf_r>
 8012ec8:	4605      	mov	r5, r0
 8012eca:	e7ed      	b.n	8012ea8 <_putc_r+0x44>

08012ecc <__swbuf_r>:
 8012ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ece:	460e      	mov	r6, r1
 8012ed0:	4614      	mov	r4, r2
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	b118      	cbz	r0, 8012ede <__swbuf_r+0x12>
 8012ed6:	6a03      	ldr	r3, [r0, #32]
 8012ed8:	b90b      	cbnz	r3, 8012ede <__swbuf_r+0x12>
 8012eda:	f7ff fa59 	bl	8012390 <__sinit>
 8012ede:	69a3      	ldr	r3, [r4, #24]
 8012ee0:	60a3      	str	r3, [r4, #8]
 8012ee2:	89a3      	ldrh	r3, [r4, #12]
 8012ee4:	071a      	lsls	r2, r3, #28
 8012ee6:	d525      	bpl.n	8012f34 <__swbuf_r+0x68>
 8012ee8:	6923      	ldr	r3, [r4, #16]
 8012eea:	b31b      	cbz	r3, 8012f34 <__swbuf_r+0x68>
 8012eec:	6823      	ldr	r3, [r4, #0]
 8012eee:	6922      	ldr	r2, [r4, #16]
 8012ef0:	1a98      	subs	r0, r3, r2
 8012ef2:	6963      	ldr	r3, [r4, #20]
 8012ef4:	b2f6      	uxtb	r6, r6
 8012ef6:	4283      	cmp	r3, r0
 8012ef8:	4637      	mov	r7, r6
 8012efa:	dc04      	bgt.n	8012f06 <__swbuf_r+0x3a>
 8012efc:	4621      	mov	r1, r4
 8012efe:	4628      	mov	r0, r5
 8012f00:	f7ff ff88 	bl	8012e14 <_fflush_r>
 8012f04:	b9e0      	cbnz	r0, 8012f40 <__swbuf_r+0x74>
 8012f06:	68a3      	ldr	r3, [r4, #8]
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	60a3      	str	r3, [r4, #8]
 8012f0c:	6823      	ldr	r3, [r4, #0]
 8012f0e:	1c5a      	adds	r2, r3, #1
 8012f10:	6022      	str	r2, [r4, #0]
 8012f12:	701e      	strb	r6, [r3, #0]
 8012f14:	6962      	ldr	r2, [r4, #20]
 8012f16:	1c43      	adds	r3, r0, #1
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d004      	beq.n	8012f26 <__swbuf_r+0x5a>
 8012f1c:	89a3      	ldrh	r3, [r4, #12]
 8012f1e:	07db      	lsls	r3, r3, #31
 8012f20:	d506      	bpl.n	8012f30 <__swbuf_r+0x64>
 8012f22:	2e0a      	cmp	r6, #10
 8012f24:	d104      	bne.n	8012f30 <__swbuf_r+0x64>
 8012f26:	4621      	mov	r1, r4
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f7ff ff73 	bl	8012e14 <_fflush_r>
 8012f2e:	b938      	cbnz	r0, 8012f40 <__swbuf_r+0x74>
 8012f30:	4638      	mov	r0, r7
 8012f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f34:	4621      	mov	r1, r4
 8012f36:	4628      	mov	r0, r5
 8012f38:	f000 f806 	bl	8012f48 <__swsetup_r>
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	d0d5      	beq.n	8012eec <__swbuf_r+0x20>
 8012f40:	f04f 37ff 	mov.w	r7, #4294967295
 8012f44:	e7f4      	b.n	8012f30 <__swbuf_r+0x64>
	...

08012f48 <__swsetup_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4b2a      	ldr	r3, [pc, #168]	; (8012ff4 <__swsetup_r+0xac>)
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	6818      	ldr	r0, [r3, #0]
 8012f50:	460c      	mov	r4, r1
 8012f52:	b118      	cbz	r0, 8012f5c <__swsetup_r+0x14>
 8012f54:	6a03      	ldr	r3, [r0, #32]
 8012f56:	b90b      	cbnz	r3, 8012f5c <__swsetup_r+0x14>
 8012f58:	f7ff fa1a 	bl	8012390 <__sinit>
 8012f5c:	89a3      	ldrh	r3, [r4, #12]
 8012f5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012f62:	0718      	lsls	r0, r3, #28
 8012f64:	d422      	bmi.n	8012fac <__swsetup_r+0x64>
 8012f66:	06d9      	lsls	r1, r3, #27
 8012f68:	d407      	bmi.n	8012f7a <__swsetup_r+0x32>
 8012f6a:	2309      	movs	r3, #9
 8012f6c:	602b      	str	r3, [r5, #0]
 8012f6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012f72:	81a3      	strh	r3, [r4, #12]
 8012f74:	f04f 30ff 	mov.w	r0, #4294967295
 8012f78:	e034      	b.n	8012fe4 <__swsetup_r+0x9c>
 8012f7a:	0758      	lsls	r0, r3, #29
 8012f7c:	d512      	bpl.n	8012fa4 <__swsetup_r+0x5c>
 8012f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f80:	b141      	cbz	r1, 8012f94 <__swsetup_r+0x4c>
 8012f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f86:	4299      	cmp	r1, r3
 8012f88:	d002      	beq.n	8012f90 <__swsetup_r+0x48>
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f7ff fb9c 	bl	80126c8 <_free_r>
 8012f90:	2300      	movs	r3, #0
 8012f92:	6363      	str	r3, [r4, #52]	; 0x34
 8012f94:	89a3      	ldrh	r3, [r4, #12]
 8012f96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012f9a:	81a3      	strh	r3, [r4, #12]
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	6063      	str	r3, [r4, #4]
 8012fa0:	6923      	ldr	r3, [r4, #16]
 8012fa2:	6023      	str	r3, [r4, #0]
 8012fa4:	89a3      	ldrh	r3, [r4, #12]
 8012fa6:	f043 0308 	orr.w	r3, r3, #8
 8012faa:	81a3      	strh	r3, [r4, #12]
 8012fac:	6923      	ldr	r3, [r4, #16]
 8012fae:	b94b      	cbnz	r3, 8012fc4 <__swsetup_r+0x7c>
 8012fb0:	89a3      	ldrh	r3, [r4, #12]
 8012fb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012fba:	d003      	beq.n	8012fc4 <__swsetup_r+0x7c>
 8012fbc:	4621      	mov	r1, r4
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f000 f884 	bl	80130cc <__smakebuf_r>
 8012fc4:	89a0      	ldrh	r0, [r4, #12]
 8012fc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fca:	f010 0301 	ands.w	r3, r0, #1
 8012fce:	d00a      	beq.n	8012fe6 <__swsetup_r+0x9e>
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	60a3      	str	r3, [r4, #8]
 8012fd4:	6963      	ldr	r3, [r4, #20]
 8012fd6:	425b      	negs	r3, r3
 8012fd8:	61a3      	str	r3, [r4, #24]
 8012fda:	6923      	ldr	r3, [r4, #16]
 8012fdc:	b943      	cbnz	r3, 8012ff0 <__swsetup_r+0xa8>
 8012fde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012fe2:	d1c4      	bne.n	8012f6e <__swsetup_r+0x26>
 8012fe4:	bd38      	pop	{r3, r4, r5, pc}
 8012fe6:	0781      	lsls	r1, r0, #30
 8012fe8:	bf58      	it	pl
 8012fea:	6963      	ldrpl	r3, [r4, #20]
 8012fec:	60a3      	str	r3, [r4, #8]
 8012fee:	e7f4      	b.n	8012fda <__swsetup_r+0x92>
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	e7f7      	b.n	8012fe4 <__swsetup_r+0x9c>
 8012ff4:	200002b8 	.word	0x200002b8

08012ff8 <_raise_r>:
 8012ff8:	291f      	cmp	r1, #31
 8012ffa:	b538      	push	{r3, r4, r5, lr}
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	460d      	mov	r5, r1
 8013000:	d904      	bls.n	801300c <_raise_r+0x14>
 8013002:	2316      	movs	r3, #22
 8013004:	6003      	str	r3, [r0, #0]
 8013006:	f04f 30ff 	mov.w	r0, #4294967295
 801300a:	bd38      	pop	{r3, r4, r5, pc}
 801300c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801300e:	b112      	cbz	r2, 8013016 <_raise_r+0x1e>
 8013010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013014:	b94b      	cbnz	r3, 801302a <_raise_r+0x32>
 8013016:	4620      	mov	r0, r4
 8013018:	f000 f830 	bl	801307c <_getpid_r>
 801301c:	462a      	mov	r2, r5
 801301e:	4601      	mov	r1, r0
 8013020:	4620      	mov	r0, r4
 8013022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013026:	f000 b817 	b.w	8013058 <_kill_r>
 801302a:	2b01      	cmp	r3, #1
 801302c:	d00a      	beq.n	8013044 <_raise_r+0x4c>
 801302e:	1c59      	adds	r1, r3, #1
 8013030:	d103      	bne.n	801303a <_raise_r+0x42>
 8013032:	2316      	movs	r3, #22
 8013034:	6003      	str	r3, [r0, #0]
 8013036:	2001      	movs	r0, #1
 8013038:	e7e7      	b.n	801300a <_raise_r+0x12>
 801303a:	2400      	movs	r4, #0
 801303c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013040:	4628      	mov	r0, r5
 8013042:	4798      	blx	r3
 8013044:	2000      	movs	r0, #0
 8013046:	e7e0      	b.n	801300a <_raise_r+0x12>

08013048 <raise>:
 8013048:	4b02      	ldr	r3, [pc, #8]	; (8013054 <raise+0xc>)
 801304a:	4601      	mov	r1, r0
 801304c:	6818      	ldr	r0, [r3, #0]
 801304e:	f7ff bfd3 	b.w	8012ff8 <_raise_r>
 8013052:	bf00      	nop
 8013054:	200002b8 	.word	0x200002b8

08013058 <_kill_r>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4d07      	ldr	r5, [pc, #28]	; (8013078 <_kill_r+0x20>)
 801305c:	2300      	movs	r3, #0
 801305e:	4604      	mov	r4, r0
 8013060:	4608      	mov	r0, r1
 8013062:	4611      	mov	r1, r2
 8013064:	602b      	str	r3, [r5, #0]
 8013066:	f7f8 faa1 	bl	800b5ac <_kill>
 801306a:	1c43      	adds	r3, r0, #1
 801306c:	d102      	bne.n	8013074 <_kill_r+0x1c>
 801306e:	682b      	ldr	r3, [r5, #0]
 8013070:	b103      	cbz	r3, 8013074 <_kill_r+0x1c>
 8013072:	6023      	str	r3, [r4, #0]
 8013074:	bd38      	pop	{r3, r4, r5, pc}
 8013076:	bf00      	nop
 8013078:	200081ac 	.word	0x200081ac

0801307c <_getpid_r>:
 801307c:	f7f8 ba8e 	b.w	800b59c <_getpid>

08013080 <__swhatbuf_r>:
 8013080:	b570      	push	{r4, r5, r6, lr}
 8013082:	460c      	mov	r4, r1
 8013084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013088:	2900      	cmp	r1, #0
 801308a:	b096      	sub	sp, #88	; 0x58
 801308c:	4615      	mov	r5, r2
 801308e:	461e      	mov	r6, r3
 8013090:	da0d      	bge.n	80130ae <__swhatbuf_r+0x2e>
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013098:	f04f 0100 	mov.w	r1, #0
 801309c:	bf0c      	ite	eq
 801309e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80130a2:	2340      	movne	r3, #64	; 0x40
 80130a4:	2000      	movs	r0, #0
 80130a6:	6031      	str	r1, [r6, #0]
 80130a8:	602b      	str	r3, [r5, #0]
 80130aa:	b016      	add	sp, #88	; 0x58
 80130ac:	bd70      	pop	{r4, r5, r6, pc}
 80130ae:	466a      	mov	r2, sp
 80130b0:	f000 f848 	bl	8013144 <_fstat_r>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	dbec      	blt.n	8013092 <__swhatbuf_r+0x12>
 80130b8:	9901      	ldr	r1, [sp, #4]
 80130ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80130be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80130c2:	4259      	negs	r1, r3
 80130c4:	4159      	adcs	r1, r3
 80130c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130ca:	e7eb      	b.n	80130a4 <__swhatbuf_r+0x24>

080130cc <__smakebuf_r>:
 80130cc:	898b      	ldrh	r3, [r1, #12]
 80130ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130d0:	079d      	lsls	r5, r3, #30
 80130d2:	4606      	mov	r6, r0
 80130d4:	460c      	mov	r4, r1
 80130d6:	d507      	bpl.n	80130e8 <__smakebuf_r+0x1c>
 80130d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130dc:	6023      	str	r3, [r4, #0]
 80130de:	6123      	str	r3, [r4, #16]
 80130e0:	2301      	movs	r3, #1
 80130e2:	6163      	str	r3, [r4, #20]
 80130e4:	b002      	add	sp, #8
 80130e6:	bd70      	pop	{r4, r5, r6, pc}
 80130e8:	ab01      	add	r3, sp, #4
 80130ea:	466a      	mov	r2, sp
 80130ec:	f7ff ffc8 	bl	8013080 <__swhatbuf_r>
 80130f0:	9900      	ldr	r1, [sp, #0]
 80130f2:	4605      	mov	r5, r0
 80130f4:	4630      	mov	r0, r6
 80130f6:	f7fe ff79 	bl	8011fec <_malloc_r>
 80130fa:	b948      	cbnz	r0, 8013110 <__smakebuf_r+0x44>
 80130fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013100:	059a      	lsls	r2, r3, #22
 8013102:	d4ef      	bmi.n	80130e4 <__smakebuf_r+0x18>
 8013104:	f023 0303 	bic.w	r3, r3, #3
 8013108:	f043 0302 	orr.w	r3, r3, #2
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	e7e3      	b.n	80130d8 <__smakebuf_r+0xc>
 8013110:	89a3      	ldrh	r3, [r4, #12]
 8013112:	6020      	str	r0, [r4, #0]
 8013114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013118:	81a3      	strh	r3, [r4, #12]
 801311a:	9b00      	ldr	r3, [sp, #0]
 801311c:	6163      	str	r3, [r4, #20]
 801311e:	9b01      	ldr	r3, [sp, #4]
 8013120:	6120      	str	r0, [r4, #16]
 8013122:	b15b      	cbz	r3, 801313c <__smakebuf_r+0x70>
 8013124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013128:	4630      	mov	r0, r6
 801312a:	f000 f81d 	bl	8013168 <_isatty_r>
 801312e:	b128      	cbz	r0, 801313c <__smakebuf_r+0x70>
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	f023 0303 	bic.w	r3, r3, #3
 8013136:	f043 0301 	orr.w	r3, r3, #1
 801313a:	81a3      	strh	r3, [r4, #12]
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	431d      	orrs	r5, r3
 8013140:	81a5      	strh	r5, [r4, #12]
 8013142:	e7cf      	b.n	80130e4 <__smakebuf_r+0x18>

08013144 <_fstat_r>:
 8013144:	b538      	push	{r3, r4, r5, lr}
 8013146:	4d07      	ldr	r5, [pc, #28]	; (8013164 <_fstat_r+0x20>)
 8013148:	2300      	movs	r3, #0
 801314a:	4604      	mov	r4, r0
 801314c:	4608      	mov	r0, r1
 801314e:	4611      	mov	r1, r2
 8013150:	602b      	str	r3, [r5, #0]
 8013152:	f7f8 fa87 	bl	800b664 <_fstat>
 8013156:	1c43      	adds	r3, r0, #1
 8013158:	d102      	bne.n	8013160 <_fstat_r+0x1c>
 801315a:	682b      	ldr	r3, [r5, #0]
 801315c:	b103      	cbz	r3, 8013160 <_fstat_r+0x1c>
 801315e:	6023      	str	r3, [r4, #0]
 8013160:	bd38      	pop	{r3, r4, r5, pc}
 8013162:	bf00      	nop
 8013164:	200081ac 	.word	0x200081ac

08013168 <_isatty_r>:
 8013168:	b538      	push	{r3, r4, r5, lr}
 801316a:	4d06      	ldr	r5, [pc, #24]	; (8013184 <_isatty_r+0x1c>)
 801316c:	2300      	movs	r3, #0
 801316e:	4604      	mov	r4, r0
 8013170:	4608      	mov	r0, r1
 8013172:	602b      	str	r3, [r5, #0]
 8013174:	f7f8 fa86 	bl	800b684 <_isatty>
 8013178:	1c43      	adds	r3, r0, #1
 801317a:	d102      	bne.n	8013182 <_isatty_r+0x1a>
 801317c:	682b      	ldr	r3, [r5, #0]
 801317e:	b103      	cbz	r3, 8013182 <_isatty_r+0x1a>
 8013180:	6023      	str	r3, [r4, #0]
 8013182:	bd38      	pop	{r3, r4, r5, pc}
 8013184:	200081ac 	.word	0x200081ac

08013188 <_init>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	bf00      	nop
 801318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801318e:	bc08      	pop	{r3}
 8013190:	469e      	mov	lr, r3
 8013192:	4770      	bx	lr

08013194 <_fini>:
 8013194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013196:	bf00      	nop
 8013198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801319a:	bc08      	pop	{r3}
 801319c:	469e      	mov	lr, r3
 801319e:	4770      	bx	lr
