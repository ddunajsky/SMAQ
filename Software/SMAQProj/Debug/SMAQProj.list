
SMAQProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013180  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022c8  08013350  08013350  00023350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015618  08015618  000303fc  2**0
                  CONTENTS
  4 .ARM          00000008  08015618  08015618  00025618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015620  08015620  000303fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015620  08015620  00025620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015624  08015624  00025624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  08015628  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002bc  080158e4  000302bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000035c  08015984  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007e64  20000400  08015a24  00030400  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20008264  08015a24  00038264  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303fc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002c081  00000000  00000000  0003046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004742  00000000  00000000  0005c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000025b0  00000000  00000000  00060c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e81  00000000  00000000  000631e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00006574  00000000  00000000  00065069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ab4a  00000000  00000000  0006b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010a089  00000000  00000000  00096127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b494  00000000  00000000  001a01b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  001ab644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000400 	.word	0x20000400
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013338 	.word	0x08013338

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000404 	.word	0x20000404
 800020c:	08013338 	.word	0x08013338

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
static uint32_t Pm;  // PM 2.5 readings from SNJGAC5
static uint32_t Pm_Table[20];
static uint32_t Pm_Avg;
static double aqi = 0;
//static char *str;
int main(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000edc:	f00a fe2d 	bl	800bb3a <HAL_Init>

  /* Configure the system clock */
    SystemClock_Config();
 8000ee0:	f000 f82e 	bl	8000f40 <SystemClock_Config>

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ee4:	f000 f9a8 	bl	8001238 <MX_GPIO_Init>
    MX_ETH_Init();
 8000ee8:	f000 f916 	bl	8001118 <MX_ETH_Init>
    MX_RNG_Init();
 8000eec:	f000 f960 	bl	80011b0 <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000ef0:	f000 f972 	bl	80011d8 <MX_USART3_UART_Init>
    MX_I2C1_Init();
 8000ef4:	f000 f890 	bl	8001018 <MX_I2C1_Init>
    MX_I2C2_Init();
 8000ef8:	f000 f8ce 	bl	8001098 <MX_I2C2_Init>


    osKernelInitialize();
 8000efc:	f00e fb30 	bl	800f560 <osKernelInitialize>

   ServerHandle = osThreadNew(server, NULL, &Server_attributes);
 8000f00:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <main+0x50>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <main+0x54>)
 8000f06:	f00e fbc7 	bl	800f698 <osThreadNew>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <main+0x58>)
 8000f0e:	6013      	str	r3, [r2, #0]
	 // BlinkerHandle = osThreadNew(blinker, NULL, &Blinker_attributes);
   SCDHandle = osThreadNew(sensor1, NULL, &SCD_attributes);
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <main+0x5c>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <main+0x60>)
 8000f16:	f00e fbbf 	bl	800f698 <osThreadNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <main+0x64>)
 8000f1e:	6013      	str	r3, [r2, #0]

   //SCDHandle = osThreadNew(sensor2, NULL, &particle_attributes);

    osKernelStart();
 8000f20:	f00e fb52 	bl	800f5c8 <osKernelStart>

    while (1)
 8000f24:	e7fe      	b.n	8000f24 <main+0x4c>
 8000f26:	bf00      	nop
 8000f28:	08014dd0 	.word	0x08014dd0
 8000f2c:	0800193d 	.word	0x0800193d
 8000f30:	20000644 	.word	0x20000644
 8000f34:	08014df4 	.word	0x08014df4
 8000f38:	08001629 	.word	0x08001629
 8000f3c:	20000648 	.word	0x20000648

08000f40 <SystemClock_Config>:
    }

}

void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f011 fbb3 	bl	80126ba <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <SystemClock_Config+0xd0>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a29      	ldr	r2, [pc, #164]	; (8001010 <SystemClock_Config+0xd0>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <SystemClock_Config+0xd0>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a24      	ldr	r2, [pc, #144]	; (8001014 <SystemClock_Config+0xd4>)
 8000f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <SystemClock_Config+0xd4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fac:	23d8      	movs	r3, #216	; 0xd8
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f00c f9a7 	bl	800d310 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x8c>
	  {
	    Error_Handler();
 8000fc8:	f000 fd8a 	bl	8001ae0 <Error_Handler>
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fcc:	f00c f950 	bl	800d270 <HAL_PWREx_EnableOverDrive>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000fd6:	f000 fd83 	bl	8001ae0 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fea:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00c fc2d 	bl	800d858 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc8>
	  {
	    Error_Handler();
 8001004:	f000 fd6c 	bl	8001ae0 <Error_Handler>
	  }
	}
 8001008:	bf00      	nop
 800100a:	3750      	adds	r7, #80	; 0x50
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_I2C1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_I2C1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x600030D;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_I2C1_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_I2C1_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_I2C1_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_I2C1_Init+0x74>)
 8001054:	f00b fb90 	bl	800c778 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105e:	f000 fd3f 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_I2C1_Init+0x74>)
 8001066:	f00c f86b 	bl	800d140 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 fd36 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_I2C1_Init+0x74>)
 8001078:	f00c f8ad 	bl	800d1d6 <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fd2d 	bl	8001ae0 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000059c 	.word	0x2000059c
 8001090:	40005400 	.word	0x40005400
 8001094:	0600030d 	.word	0x0600030d

08001098 <MX_I2C2_Init>:


static void MX_I2C2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C2_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C2_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501FE4;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C2_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C2_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C2_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C2_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C2_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C2_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C2_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C2_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C2_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_I2C2_Init+0x74>)
 80010d4:	f00b fb50 	bl	800c778 <HAL_I2C_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010de:	f000 fcff 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <MX_I2C2_Init+0x74>)
 80010e6:	f00c f82b 	bl	800d140 <HAL_I2CEx_ConfigAnalogFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 fcf6 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_I2C2_Init+0x74>)
 80010f8:	f00c f86d 	bl	800d1d6 <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 fced 	bl	8001ae0 <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200005f0 	.word	0x200005f0
 8001110:	40005800 	.word	0x40005800
 8001114:	00501fe4 	.word	0x00501fe4

08001118 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ETH_Init+0x80>)
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <MX_ETH_Init+0x84>)
 8001120:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_ETH_Init+0x88>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_ETH_Init+0x88>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_ETH_Init+0x88>)
 8001130:	22e1      	movs	r2, #225	; 0xe1
 8001132:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_ETH_Init+0x88>)
 8001136:	2200      	movs	r2, #0
 8001138:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_ETH_Init+0x88>)
 800113c:	2200      	movs	r2, #0
 800113e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_ETH_Init+0x88>)
 8001142:	2200      	movs	r2, #0
 8001144:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ETH_Init+0x80>)
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <MX_ETH_Init+0x88>)
 800114a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_ETH_Init+0x80>)
 800114e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001152:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_ETH_Init+0x80>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_ETH_Init+0x8c>)
 8001158:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ETH_Init+0x80>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_ETH_Init+0x90>)
 800115e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 0;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_ETH_Init+0x80>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_ETH_Init+0x80>)
 8001168:	f00a fe1a 	bl	800bda0 <HAL_ETH_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001172:	f000 fcb5 	bl	8001ae0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001176:	2238      	movs	r2, #56	; 0x38
 8001178:	2100      	movs	r1, #0
 800117a:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_ETH_Init+0x94>)
 800117c:	f011 fa9d 	bl	80126ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_ETH_Init+0x94>)
 8001182:	2221      	movs	r2, #33	; 0x21
 8001184:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_ETH_Init+0x94>)
 8001188:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800118c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_ETH_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000454 	.word	0x20000454
 800119c:	40028000 	.word	0x40028000
 80011a0:	200006c8 	.word	0x200006c8
 80011a4:	2000035c 	.word	0x2000035c
 80011a8:	200002bc 	.word	0x200002bc
 80011ac:	2000041c 	.word	0x2000041c

080011b0 <MX_RNG_Init>:


static void MX_RNG_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_RNG_Init+0x20>)
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <MX_RNG_Init+0x24>)
 80011b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_RNG_Init+0x20>)
 80011bc:	f00d f994 	bl	800e4e8 <HAL_RNG_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80011c6:	f000 fc8b 	bl	8001ae0 <Error_Handler>
  }

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000504 	.word	0x20000504
 80011d4:	50060800 	.word	0x50060800

080011d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <MX_USART3_UART_Init+0x5c>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART3_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART3_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART3_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART3_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART3_UART_Init+0x58>)
 800121c:	f00d fcc4 	bl	800eba8 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001226:	f000 fc5b 	bl	8001ae0 <Error_Handler>
  }

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000514 	.word	0x20000514
 8001234:	40004800 	.word	0x40004800

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <MX_GPIO_Init+0x170>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a55      	ldr	r2, [pc, #340]	; (80013a8 <MX_GPIO_Init+0x170>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <MX_GPIO_Init+0x170>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <MX_GPIO_Init+0x170>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <MX_GPIO_Init+0x170>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <MX_GPIO_Init+0x170>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <MX_GPIO_Init+0x170>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <MX_GPIO_Init+0x170>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <MX_GPIO_Init+0x170>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <MX_GPIO_Init+0x170>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <MX_GPIO_Init+0x170>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <MX_GPIO_Init+0x170>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <MX_GPIO_Init+0x170>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <MX_GPIO_Init+0x170>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <MX_GPIO_Init+0x170>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <MX_GPIO_Init+0x170>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <MX_GPIO_Init+0x170>)
 80012cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <MX_GPIO_Init+0x170>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80012e4:	4831      	ldr	r0, [pc, #196]	; (80013ac <MX_GPIO_Init+0x174>)
 80012e6:	f00b fa2d 	bl	800c744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	4830      	ldr	r0, [pc, #192]	; (80013b0 <MX_GPIO_Init+0x178>)
 80012f0:	f00b fa28 	bl	800c744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	482a      	ldr	r0, [pc, #168]	; (80013b4 <MX_GPIO_Init+0x17c>)
 800130c:	f00b f86e 	bl	800c3ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001310:	f244 0381 	movw	r3, #16513	; 0x4081
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4820      	ldr	r0, [pc, #128]	; (80013ac <MX_GPIO_Init+0x174>)
 800132a:	f00b f85f 	bl	800c3ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_GPIO_Init+0x178>)
 8001346:	f00b f851 	bl	800c3ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_GPIO_Init+0x178>)
 800135e:	f00b f845 	bl	800c3ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
   GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001362:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001366:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001374:	230a      	movs	r3, #10
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_GPIO_Init+0x180>)
 8001380:	f00b f834 	bl	800c3ec <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_VBUS_Pin */
     GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001388:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_GPIO_Init+0x180>)
 800139a:	f00b f827 	bl	800c3ec <HAL_GPIO_Init>

}
 800139e:	bf00      	nop
 80013a0:	3730      	adds	r7, #48	; 0x30
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40021800 	.word	0x40021800
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ce:	f00a fbc1 	bl	800bb54 <HAL_IncTick>
  }
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40001000 	.word	0x40001000

080013e0 <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	e01a      	b.n	8001426 <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	4810      	ldr	r0, [pc, #64]	; (8001438 <mg_random+0x58>)
 80013f8:	f00d f8a0 	bl	800e53c <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	18d0      	adds	r0, r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3304      	adds	r3, #4
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d203      	bcs.n	8001414 <mg_random+0x34>
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	e000      	b.n	8001416 <mg_random+0x36>
 8001414:	2304      	movs	r3, #4
 8001416:	f107 0108 	add.w	r1, r7, #8
 800141a:	461a      	mov	r2, r3
 800141c:	f011 fa17 	bl	801284e <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d3e0      	bcc.n	80013f0 <mg_random+0x10>
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000504 	.word	0x20000504

0800143c <timer_fn>:

static void timer_fn(void *arg) {
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af04      	add	r7, sp, #16
 8001442:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = arg;                  // And show
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	61fb      	str	r3, [r7, #28]
  const char *names[] = {"down", "up", "req", "ready"};  // network stats
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <timer_fn+0x70>)
 800144a:	f107 040c 	add.w	r4, r7, #12
 800144e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <timer_fn+0x74>)
 8001456:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 800145a:	4916      	ldr	r1, [pc, #88]	; (80014b4 <timer_fn+0x78>)
 800145c:	2002      	movs	r0, #2
 800145e:	f005 f8e7 	bl	8006630 <mg_log_prefix>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <timer_fn+0x66>
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	3320      	adds	r3, #32
 8001472:	443b      	add	r3, r7
 8001474:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f103 0508 	add.w	r5, r3, #8
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001486:	69f9      	ldr	r1, [r7, #28]
 8001488:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800148a:	69f8      	ldr	r0, [r7, #28]
 800148c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800148e:	9003      	str	r0, [sp, #12]
 8001490:	9102      	str	r1, [sp, #8]
 8001492:	9201      	str	r2, [sp, #4]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	462b      	mov	r3, r5
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <timer_fn+0x7c>)
 800149a:	4621      	mov	r1, r4
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <timer_fn+0x80>)
 800149e:	f005 f921 	bl	80066e4 <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdb0      	pop	{r4, r5, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	080133d0 	.word	0x080133d0
 80014b0:	08014e18 	.word	0x08014e18
 80014b4:	08013370 	.word	0x08013370
 80014b8:	08006e81 	.word	0x08006e81
 80014bc:	08013384 	.word	0x08013384

080014c0 <calcTemp>:

static double calcTemp(uint8_t highByte, uint8_t lowByte) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
	uint32_t word = (highByte << 8) | (lowByte);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	021a      	lsls	r2, r3, #8
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
	double result = -45 + (175 * (((double)word)/(65535)));
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff f842 	bl	8000564 <__aeabi_ui2d>
 80014e0:	a314      	add	r3, pc, #80	; (adr r3, 8001534 <calcTemp+0x74>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f9e1 	bl	80008ac <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	a312      	add	r3, pc, #72	; (adr r3, 800153c <calcTemp+0x7c>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f8ae 	bl	8000658 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <calcTemp+0x70>)
 800150a:	f7fe feed 	bl	80002e8 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 2302 	strd	r2, r3, [r7, #8]


	return result;
 8001516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800151a:	ec43 2b17 	vmov	d7, r2, r3
}
 800151e:	eeb0 0a47 	vmov.f32	s0, s14
 8001522:	eef0 0a67 	vmov.f32	s1, s15
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	f3af 8000 	nop.w
 8001530:	40468000 	.word	0x40468000
 8001534:	00000000 	.word	0x00000000
 8001538:	40efffe0 	.word	0x40efffe0
 800153c:	00000000 	.word	0x00000000
 8001540:	4065e000 	.word	0x4065e000
 8001544:	00000000 	.word	0x00000000

08001548 <calcHum>:

static double calcHum(uint8_t highByte, uint8_t lowByte) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
	uint32_t word = (highByte << 8) | (lowByte);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	021a      	lsls	r2, r3, #8
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	4313      	orrs	r3, r2
 8001560:	617b      	str	r3, [r7, #20]
	double result = 100 * ((double)word/65535);
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7fe fffe 	bl	8000564 <__aeabi_ui2d>
 8001568:	a310      	add	r3, pc, #64	; (adr r3, 80015ac <calcHum+0x64>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f99d 	bl	80008ac <__aeabi_ddiv>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <calcHum+0x60>)
 8001580:	f7ff f86a 	bl	8000658 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return result;
 800158c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001590:	ec43 2b17 	vmov	d7, r2, r3
}
 8001594:	eeb0 0a47 	vmov.f32	s0, s14
 8001598:	eef0 0a67 	vmov.f32	s1, s15
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	40590000 	.word	0x40590000
 80015ac:	00000000 	.word	0x00000000
 80015b0:	40efffe0 	.word	0x40efffe0

080015b4 <calcParticle>:

static uint32_t calcParticle(uint8_t highByte, uint8_t lowByte) {
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71bb      	strb	r3, [r7, #6]
	uint32_t word = (highByte << 8) | (lowByte);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	021a      	lsls	r2, r3, #8
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
	return word;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <calcAvg>:

static uint32_t calcAvg(uint32_t Table[20]){
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	uint32_t val = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i < 20; i++){
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	e00a      	b.n	8001604 <calcAvg+0x28>
		val = Table[i] + val;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = 0; i < 20; i++){
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3301      	adds	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2b13      	cmp	r3, #19
 8001608:	d9f1      	bls.n	80015ee <calcAvg+0x12>
	}
	val = val/20;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <calcAvg+0x48>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	60fb      	str	r3, [r7, #12]
	return val;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	cccccccd 	.word	0xcccccccd

08001628 <sensor1>:



void sensor1(void *argument) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af04      	add	r7, sp, #16
 800162e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t read_buf[9];
	MG_INFO(("start"));
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <sensor1+0x14c>)
 8001632:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8001636:	4950      	ldr	r1, [pc, #320]	; (8001778 <sensor1+0x150>)
 8001638:	2002      	movs	r0, #2
 800163a:	f004 fff9 	bl	8006630 <mg_log_prefix>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <sensor1+0x22>
 8001644:	484d      	ldr	r0, [pc, #308]	; (800177c <sensor1+0x154>)
 8001646:	f005 f84d 	bl	80066e4 <mg_log>

	uint8_t data_buf[] = {0x21, 0xb1};
 800164a:	f24b 1321 	movw	r3, #45345	; 0xb121
 800164e:	81bb      	strh	r3, [r7, #12]
	//uint32_t x;

	// particle sensor
	uint16_t PMSENSOR_ADDR = 0x33 << 1;
 8001650:	2366      	movs	r3, #102	; 0x66
 8001652:	83bb      	strh	r3, [r7, #28]
	uint8_t read_buf_particle[2];
	uint8_t step = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]
	status = HAL_I2C_Master_Transmit(&hi2c1, SCD40_ADDR << 1, data_buf, sizeof(data_buf), 500);
 8001658:	f107 020c 	add.w	r2, r7, #12
 800165c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2302      	movs	r3, #2
 8001664:	21c4      	movs	r1, #196	; 0xc4
 8001666:	4846      	ldr	r0, [pc, #280]	; (8001780 <sensor1+0x158>)
 8001668:	f00b f916 	bl	800c898 <HAL_I2C_Master_Transmit>
 800166c:	4603      	mov	r3, r0
 800166e:	76fb      	strb	r3, [r7, #27]
	for(;;){
		if(step > 19){
 8001670:	7ffb      	ldrb	r3, [r7, #31]
 8001672:	2b13      	cmp	r3, #19
 8001674:	d901      	bls.n	800167a <sensor1+0x52>
			step = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	77fb      	strb	r3, [r7, #31]
		}
		HAL_Delay(5000);
 800167a:	f241 3088 	movw	r0, #5000	; 0x1388
 800167e:	f00a fa89 	bl	800bb94 <HAL_Delay>
		status = HAL_I2C_Mem_Read(&hi2c1, SCD40_ADDR << 1, 0xec05, 2, read_buf, sizeof(read_buf), 5000);
 8001682:	f241 3388 	movw	r3, #5000	; 0x1388
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2309      	movs	r3, #9
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2302      	movs	r3, #2
 8001694:	f64e 4205 	movw	r2, #60421	; 0xec05
 8001698:	21c4      	movs	r1, #196	; 0xc4
 800169a:	4839      	ldr	r0, [pc, #228]	; (8001780 <sensor1+0x158>)
 800169c:	f00b f9f0 	bl	800ca80 <HAL_I2C_Mem_Read>
 80016a0:	4603      	mov	r3, r0
 80016a2:	76fb      	strb	r3, [r7, #27]
		Carb = (read_buf[0] << 8) | (read_buf[1]);
 80016a4:	7c3b      	ldrb	r3, [r7, #16]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	7c7a      	ldrb	r2, [r7, #17]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <sensor1+0x15c>)
 80016b0:	601a      	str	r2, [r3, #0]
		Temp = calcTemp(read_buf[3], read_buf[4]);
 80016b2:	7cfb      	ldrb	r3, [r7, #19]
 80016b4:	7d3a      	ldrb	r2, [r7, #20]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff01 	bl	80014c0 <calcTemp>
 80016be:	eeb0 7a40 	vmov.f32	s14, s0
 80016c2:	eef0 7a60 	vmov.f32	s15, s1
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <sensor1+0x160>)
 80016c8:	ed83 7b00 	vstr	d7, [r3]
		Hum = calcHum(read_buf[6], read_buf[7]);
 80016cc:	7dbb      	ldrb	r3, [r7, #22]
 80016ce:	7dfa      	ldrb	r2, [r7, #23]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff38 	bl	8001548 <calcHum>
 80016d8:	eeb0 7a40 	vmov.f32	s14, s0
 80016dc:	eef0 7a60 	vmov.f32	s15, s1
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <sensor1+0x164>)
 80016e2:	ed83 7b00 	vstr	d7, [r3]
		MG_INFO(("SCD status: %d", status));
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <sensor1+0x14c>)
 80016e8:	f240 2201 	movw	r2, #513	; 0x201
 80016ec:	4922      	ldr	r1, [pc, #136]	; (8001778 <sensor1+0x150>)
 80016ee:	2002      	movs	r0, #2
 80016f0:	f004 ff9e 	bl	8006630 <mg_log_prefix>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <sensor1+0xdc>
 80016fa:	7efb      	ldrb	r3, [r7, #27]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4824      	ldr	r0, [pc, #144]	; (8001790 <sensor1+0x168>)
 8001700:	f004 fff0 	bl	80066e4 <mg_log>

		// particle sensor
		status = HAL_I2C_Mem_Read(&hi2c2, PMSENSOR_ADDR, 0x04, 1, read_buf_particle, sizeof(read_buf_particle), 50);
 8001704:	8bb9      	ldrh	r1, [r7, #28]
 8001706:	2332      	movs	r3, #50	; 0x32
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2302      	movs	r3, #2
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2204      	movs	r2, #4
 8001718:	481e      	ldr	r0, [pc, #120]	; (8001794 <sensor1+0x16c>)
 800171a:	f00b f9b1 	bl	800ca80 <HAL_I2C_Mem_Read>
 800171e:	4603      	mov	r3, r0
 8001720:	76fb      	strb	r3, [r7, #27]
		Pm = calcParticle(read_buf_particle[1], read_buf_particle[0]);
 8001722:	7a7b      	ldrb	r3, [r7, #9]
 8001724:	7a3a      	ldrb	r2, [r7, #8]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff43 	bl	80015b4 <calcParticle>
 800172e:	4603      	mov	r3, r0
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <sensor1+0x170>)
 8001732:	6013      	str	r3, [r2, #0]
		Pm_Table[step] = Pm;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <sensor1+0x170>)
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	4918      	ldr	r1, [pc, #96]	; (800179c <sensor1+0x174>)
 800173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Pm_Avg = calcAvg(Pm_Table);
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <sensor1+0x174>)
 8001742:	f7ff ff4b 	bl	80015dc <calcAvg>
 8001746:	4603      	mov	r3, r0
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <sensor1+0x178>)
 800174a:	6013      	str	r3, [r2, #0]
		MG_INFO(("Particle Status: %d", status));
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <sensor1+0x14c>)
 800174e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001752:	4909      	ldr	r1, [pc, #36]	; (8001778 <sensor1+0x150>)
 8001754:	2002      	movs	r0, #2
 8001756:	f004 ff6b 	bl	8006630 <mg_log_prefix>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <sensor1+0x142>
 8001760:	7efb      	ldrb	r3, [r7, #27]
 8001762:	4619      	mov	r1, r3
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <sensor1+0x17c>)
 8001766:	f004 ffbd 	bl	80066e4 <mg_log>
		step++;
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	3301      	adds	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]
		if(step > 19){
 8001770:	e77e      	b.n	8001670 <sensor1+0x48>
 8001772:	bf00      	nop
 8001774:	08014e24 	.word	0x08014e24
 8001778:	08013370 	.word	0x08013370
 800177c:	080133e0 	.word	0x080133e0
 8001780:	2000059c 	.word	0x2000059c
 8001784:	20000660 	.word	0x20000660
 8001788:	20000650 	.word	0x20000650
 800178c:	20000658 	.word	0x20000658
 8001790:	080133e8 	.word	0x080133e8
 8001794:	200005f0 	.word	0x200005f0
 8001798:	20000664 	.word	0x20000664
 800179c:	20000668 	.word	0x20000668
 80017a0:	200006b8 	.word	0x200006b8
 80017a4:	080133f8 	.word	0x080133f8

080017a8 <fn>:
 * 	accepts the HTTP requests and feeds sensor *
 * 	values back in JSON format for the client  *
 * 	to receive then the javascript code takes  *
 *  over and displays the values on our UI.    *
 ***********************************************/
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b0a2      	sub	sp, #136	; 0x88
 80017ac:	af14      	add	r7, sp, #80	; 0x50
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]


	if (ev == MG_EV_HTTP_MSG) {
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b0a      	cmp	r3, #10
 80017ba:	f040 808d 	bne.w	80018d8 <fn+0x130>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
		if (mg_http_match_uri(hm, "/api/dispAQI")){
 80017c2:	4947      	ldr	r1, [pc, #284]	; (80018e0 <fn+0x138>)
 80017c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017c6:	f003 fd41 	bl	800524c <mg_http_match_uri>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d010      	beq.n	80017f2 <fn+0x4a>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 80017d0:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <fn+0x13c>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017da:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <fn+0x140>)
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	2300      	movs	r3, #0
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	4b42      	ldr	r3, [pc, #264]	; (80018ec <fn+0x144>)
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <fn+0x148>)
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <fn+0x14c>)
 80017ea:	21c8      	movs	r1, #200	; 0xc8
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f002 fe27 	bl	8004440 <mg_http_reply>
					"{%m:%f}\n", MG_ESC("aqi"), aqi);
		}
		if(mg_http_match_uri(hm, "/api/AQI")){
 80017f2:	4941      	ldr	r1, [pc, #260]	; (80018f8 <fn+0x150>)
 80017f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017f6:	f003 fd29 	bl	800524c <mg_http_match_uri>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d015      	beq.n	800182c <fn+0x84>
			struct mg_str json = hm -> body;
 8001800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800180a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800180e:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_json_get_num(json, "$.aqi", &aqi);
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <fn+0x13c>)
 8001814:	4a39      	ldr	r2, [pc, #228]	; (80018fc <fn+0x154>)
 8001816:	f107 0114 	add.w	r1, r7, #20
 800181a:	c903      	ldmia	r1, {r0, r1}
 800181c:	f004 fe6e 	bl	80064fc <mg_json_get_num>
//			str = mg_json_get_str(json, "&.health_level");
			mg_http_reply(c, 200, NULL, NULL);
 8001820:	2300      	movs	r3, #0
 8001822:	2200      	movs	r2, #0
 8001824:	21c8      	movs	r1, #200	; 0xc8
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f002 fe0a 	bl	8004440 <mg_http_reply>
		}
		if(mg_http_match_uri(hm, "/api/sensors")){
 800182c:	4934      	ldr	r1, [pc, #208]	; (8001900 <fn+0x158>)
 800182e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001830:	f003 fd0c 	bl	800524c <mg_http_match_uri>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d02d      	beq.n	8001896 <fn+0xee>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <fn+0x15c>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	4931      	ldr	r1, [pc, #196]	; (8001908 <fn+0x160>)
 8001842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001846:	4c31      	ldr	r4, [pc, #196]	; (800190c <fn+0x164>)
 8001848:	6824      	ldr	r4, [r4, #0]
 800184a:	4d31      	ldr	r5, [pc, #196]	; (8001910 <fn+0x168>)
 800184c:	682d      	ldr	r5, [r5, #0]
 800184e:	9513      	str	r5, [sp, #76]	; 0x4c
 8001850:	4d30      	ldr	r5, [pc, #192]	; (8001914 <fn+0x16c>)
 8001852:	9512      	str	r5, [sp, #72]	; 0x48
 8001854:	2500      	movs	r5, #0
 8001856:	9511      	str	r5, [sp, #68]	; 0x44
 8001858:	4d24      	ldr	r5, [pc, #144]	; (80018ec <fn+0x144>)
 800185a:	9510      	str	r5, [sp, #64]	; 0x40
 800185c:	940f      	str	r4, [sp, #60]	; 0x3c
 800185e:	4c2e      	ldr	r4, [pc, #184]	; (8001918 <fn+0x170>)
 8001860:	940e      	str	r4, [sp, #56]	; 0x38
 8001862:	2400      	movs	r4, #0
 8001864:	940d      	str	r4, [sp, #52]	; 0x34
 8001866:	4c21      	ldr	r4, [pc, #132]	; (80018ec <fn+0x144>)
 8001868:	940c      	str	r4, [sp, #48]	; 0x30
 800186a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800186e:	492b      	ldr	r1, [pc, #172]	; (800191c <fn+0x174>)
 8001870:	9108      	str	r1, [sp, #32]
 8001872:	2100      	movs	r1, #0
 8001874:	9107      	str	r1, [sp, #28]
 8001876:	491d      	ldr	r1, [pc, #116]	; (80018ec <fn+0x144>)
 8001878:	9106      	str	r1, [sp, #24]
 800187a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <fn+0x178>)
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2300      	movs	r3, #0
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <fn+0x144>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <fn+0x17c>)
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <fn+0x14c>)
 800188e:	21c8      	movs	r1, #200	; 0xc8
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f002 fdd5 	bl	8004440 <mg_http_reply>
					"{%m:%.2f,%m:%.2f,%m:%u,%m:%u}\n", MG_ESC("temperature"), Temp,
												   MG_ESC("humidity"), Hum,
												   MG_ESC("pm25"), Pm_Avg,
												   MG_ESC("co2"), Carb);
		}
		MG_INFO(("connection established"));
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <fn+0x180>)
 8001898:	f240 223a 	movw	r2, #570	; 0x23a
 800189c:	4923      	ldr	r1, [pc, #140]	; (800192c <fn+0x184>)
 800189e:	2002      	movs	r0, #2
 80018a0:	f004 fec6 	bl	8006630 <mg_log_prefix>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <fn+0x108>
 80018aa:	4821      	ldr	r0, [pc, #132]	; (8001930 <fn+0x188>)
 80018ac:	f004 ff1a 	bl	80066e4 <mg_log>
	    struct mg_http_serve_opts opts = {
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
 80018c0:	615a      	str	r2, [r3, #20]
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <fn+0x18c>)
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <fn+0x190>)
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
	        .root_dir = "/web_root",
	        .fs = &mg_fs_packed
	      };
	    mg_http_serve_dir(c, ev_data, &opts);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	461a      	mov	r2, r3
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f003 fc5e 	bl	8005194 <mg_http_serve_dir>
	  }
	  (void) fn_data;
}
 80018d8:	bf00      	nop
 80018da:	3738      	adds	r7, #56	; 0x38
 80018dc:	46bd      	mov	sp, r7
 80018de:	bdb0      	pop	{r4, r5, r7, pc}
 80018e0:	08013428 	.word	0x08013428
 80018e4:	200006c0 	.word	0x200006c0
 80018e8:	08013468 	.word	0x08013468
 80018ec:	080070cd 	.word	0x080070cd
 80018f0:	08013438 	.word	0x08013438
 80018f4:	08013444 	.word	0x08013444
 80018f8:	0801346c 	.word	0x0801346c
 80018fc:	08013478 	.word	0x08013478
 8001900:	08013480 	.word	0x08013480
 8001904:	20000650 	.word	0x20000650
 8001908:	20000658 	.word	0x20000658
 800190c:	200006b8 	.word	0x200006b8
 8001910:	20000660 	.word	0x20000660
 8001914:	080134b0 	.word	0x080134b0
 8001918:	080134b4 	.word	0x080134b4
 800191c:	080134bc 	.word	0x080134bc
 8001920:	080134c8 	.word	0x080134c8
 8001924:	08013490 	.word	0x08013490
 8001928:	08014e2c 	.word	0x08014e2c
 800192c:	08013370 	.word	0x08013370
 8001930:	080134d4 	.word	0x080134d4
 8001934:	080134ec 	.word	0x080134ec
 8001938:	20000000 	.word	0x20000000

0800193c <server>:

void server(void *argument)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b0b6      	sub	sp, #216	; 0xd8
 8001940:	af04      	add	r7, sp, #16
 8001942:	6078      	str	r0, [r7, #4]
	Pm = 2;
 8001944:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <server+0x148>)
 8001946:	2202      	movs	r2, #2
 8001948:	601a      	str	r2, [r3, #0]

	struct mg_mgr mgr;        // Initialise Mongoose event manager
	mg_mgr_init(&mgr);        // and attach it to the interface
 800194a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800194e:	4618      	mov	r0, r3
 8001950:	f005 f93c 	bl	8006bcc <mg_mgr_init>
	mg_log_set(MG_LL_DEBUG);  // Set log level
 8001954:	2003      	movs	r0, #3
 8001956:	f004 fe49 	bl	80065ec <mg_log_set>

		// Initialise Mongoose network stack
	  struct mg_tcpip_driver_stm32_data driver_data = {.mdc_cr = 4};
 800195a:	2304      	movs	r3, #4
 800195c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 8001960:	f107 0308 	add.w	r3, r7, #8
 8001964:	2278      	movs	r2, #120	; 0x78
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f010 fea6 	bl	80126ba <memset>
 800196e:	2302      	movs	r3, #2
 8001970:	723b      	strb	r3, [r7, #8]
 8001972:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <server+0x14c>)
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <server+0x150>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4053      	eors	r3, r2
 800197c:	b2db      	uxtb	r3, r3
 800197e:	727b      	strb	r3, [r7, #9]
 8001980:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <server+0x154>)
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <server+0x158>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4053      	eors	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	72bb      	strb	r3, [r7, #10]
 800198e:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <server+0x15c>)
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <server+0x160>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4053      	eors	r3, r2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	72fb      	strb	r3, [r7, #11]
 800199c:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <server+0x164>)
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <server+0x168>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4053      	eors	r3, r2
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <server+0x16c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4053      	eors	r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	733b      	strb	r3, [r7, #12]
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <server+0x170>)
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <server+0x174>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4053      	eors	r3, r2
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <server+0x178>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4053      	eors	r3, r2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	737b      	strb	r3, [r7, #13]
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <server+0x17c>)
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80019cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		                          .driver = &mg_tcpip_driver_stm32,
		                          .driver_data = &driver_data};
		mg_tcpip_init(&mgr, &mif);
 80019d2:	f107 0208 	add.w	r2, r7, #8
 80019d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 fa31 	bl	800ae44 <mg_tcpip_init>
		mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 80019e2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <server+0x180>)
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2301      	movs	r3, #1
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	4608      	mov	r0, r1
 80019fe:	f005 f8bb 	bl	8006b78 <mg_timer_add>
		MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <server+0x184>)
 8001a04:	f240 2253 	movw	r2, #595	; 0x253
 8001a08:	492e      	ldr	r1, [pc, #184]	; (8001ac4 <server+0x188>)
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f004 fe10 	bl	8006630 <mg_log_prefix>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00d      	beq.n	8001a32 <server+0xf6>
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	492a      	ldr	r1, [pc, #168]	; (8001ac8 <server+0x18c>)
 8001a1e:	482b      	ldr	r0, [pc, #172]	; (8001acc <server+0x190>)
 8001a20:	f004 fe60 	bl	80066e4 <mg_log>
		while (mif.state != MG_TCPIP_STATE_READY) {
 8001a24:	e005      	b.n	8001a32 <server+0xf6>
		    mg_mgr_poll(&mgr, 0);
 8001a26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f009 fba7 	bl	800b180 <mg_mgr_poll>
		while (mif.state != MG_TCPIP_STATE_READY) {
 8001a32:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d1f5      	bne.n	8001a26 <server+0xea>
		}

		MG_INFO(("Initialising application..."));
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <server+0x184>)
 8001a3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a40:	4920      	ldr	r1, [pc, #128]	; (8001ac4 <server+0x188>)
 8001a42:	2002      	movs	r0, #2
 8001a44:	f004 fdf4 	bl	8006630 <mg_log_prefix>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <server+0x118>
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <server+0x194>)
 8001a50:	f004 fe48 	bl	80066e4 <mg_log>
		mg_http_listen(&mgr, HTTP_URL, fn, &mgr);
 8001a54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a58:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <server+0x198>)
 8001a5e:	491e      	ldr	r1, [pc, #120]	; (8001ad8 <server+0x19c>)
 8001a60:	f003 ff14 	bl	800588c <mg_http_listen>
		mg_http_listen(&mgr, HTTPS_URL, fn, &mgr);
 8001a64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a68:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <server+0x198>)
 8001a6e:	491b      	ldr	r1, [pc, #108]	; (8001adc <server+0x1a0>)
 8001a70:	f003 ff0c 	bl	800588c <mg_http_listen>
		for (;;) {
			mg_mgr_poll(&mgr, 1);
 8001a74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f009 fb80 	bl	800b180 <mg_mgr_poll>
 8001a80:	e7f8      	b.n	8001a74 <server+0x138>
 8001a82:	bf00      	nop
 8001a84:	20000664 	.word	0x20000664
 8001a88:	1ff0f420 	.word	0x1ff0f420
 8001a8c:	1ff0f421 	.word	0x1ff0f421
 8001a90:	1ff0f422 	.word	0x1ff0f422
 8001a94:	1ff0f423 	.word	0x1ff0f423
 8001a98:	1ff0f424 	.word	0x1ff0f424
 8001a9c:	1ff0f425 	.word	0x1ff0f425
 8001aa0:	1ff0f426 	.word	0x1ff0f426
 8001aa4:	1ff0f427 	.word	0x1ff0f427
 8001aa8:	1ff0f428 	.word	0x1ff0f428
 8001aac:	1ff0f429 	.word	0x1ff0f429
 8001ab0:	1ff0f42a 	.word	0x1ff0f42a
 8001ab4:	1ff0f42b 	.word	0x1ff0f42b
 8001ab8:	20000240 	.word	0x20000240
 8001abc:	0800143d 	.word	0x0800143d
 8001ac0:	08014e30 	.word	0x08014e30
 8001ac4:	08013370 	.word	0x08013370
 8001ac8:	08006f45 	.word	0x08006f45
 8001acc:	080134f8 	.word	0x080134f8
 8001ad0:	08013514 	.word	0x08013514
 8001ad4:	080017a9 	.word	0x080017a9
 8001ad8:	08013530 	.word	0x08013530
 8001adc:	08013544 	.word	0x08013544

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>

08001aea <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	3330      	adds	r3, #48	; 0x30
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e002      	b.n	8001b04 <mg_dns_free+0x1a>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d1f7      	bne.n	8001afe <mg_dns_free+0x14>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 8001b16:	6838      	ldr	r0, [r7, #0]
 8001b18:	f010 fb18 	bl	801214c <free>
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 8001b34:	e00d      	b.n	8001b52 <mg_resolve_cancel+0x2e>
    tmp = d->next;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d103      	bne.n	8001b4e <mg_resolve_cancel+0x2a>
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffce 	bl	8001aea <mg_dns_free>
  for (; d != NULL; d = tmp) {
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <mg_resolve_cancel+0x12>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8001b62:	b590      	push	{r4, r7, lr}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <mg_call+0x24>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <mg_call+0x3c>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	47a0      	blx	r4
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
	...

08001ba8 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8001ba8:	b40e      	push	{r1, r2, r3}
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b095      	sub	sp, #84	; 0x54
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8001bb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bb6:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	f107 0010 	add.w	r0, r7, #16
 8001bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	f005 f88a 	bl	8006cdc <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <mg_error+0x70>)
 8001bca:	f240 1293 	movw	r2, #403	; 0x193
 8001bce:	4913      	ldr	r1, [pc, #76]	; (8001c1c <mg_error+0x74>)
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f004 fd2d 	bl	8006630 <mg_log_prefix>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <mg_error+0x46>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <mg_error+0x78>)
 8001bea:	f004 fd7b 	bl	80066e4 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8001bf4:	f043 0320 	orr.w	r3, r3, #32
 8001bf8:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	461a      	mov	r2, r3
 8001c02:	2100      	movs	r1, #0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ffac 	bl	8001b62 <mg_call>
}
 8001c0a:	bf00      	nop
 8001c0c:	3754      	adds	r7, #84	; 0x54
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c14:	b003      	add	sp, #12
 8001c16:	4770      	bx	lr
 8001c18:	08014e40 	.word	0x08014e40
 8001c1c:	08013568 	.word	0x08013568
 8001c20:	08013674 	.word	0x08013674

08001c24 <is_digit>:
#endif




static bool is_digit(int c) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b2f      	cmp	r3, #47	; 0x2f
 8001c30:	dd04      	ble.n	8001c3c <is_digit+0x18>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b39      	cmp	r3, #57	; 0x39
 8001c36:	dc01      	bgt.n	8001c3c <is_digit+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <is_digit+0x1a>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  int n = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	617a      	str	r2, [r7, #20]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	2265      	movs	r2, #101	; 0x65
 8001c6e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	617a      	str	r2, [r7, #20]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001c88:	dd01      	ble.n	8001c8e <addexp+0x3e>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e057      	b.n	8001d3e <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b09      	cmp	r3, #9
 8001c92:	dc07      	bgt.n	8001ca4 <addexp+0x54>
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	617a      	str	r2, [r7, #20]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2230      	movs	r2, #48	; 0x30
 8001ca2:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b63      	cmp	r3, #99	; 0x63
 8001ca8:	dd1c      	ble.n	8001ce4 <addexp+0x94>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <addexp+0xfc>)
 8001cae:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb2:	1152      	asrs	r2, r2, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1c59      	adds	r1, r3, #1
 8001cbe:	6179      	str	r1, [r7, #20]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3230      	adds	r2, #48	; 0x30
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <addexp+0xfc>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1151      	asrs	r1, r2, #5
 8001cd6:	17da      	asrs	r2, r3, #31
 8001cd8:	1a8a      	subs	r2, r1, r2
 8001cda:	2164      	movs	r1, #100	; 0x64
 8001cdc:	fb01 f202 	mul.w	r2, r1, r2
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b09      	cmp	r3, #9
 8001ce8:	dd1d      	ble.n	8001d26 <addexp+0xd6>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <addexp+0x100>)
 8001cee:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf2:	1092      	asrs	r2, r2, #2
 8001cf4:	17db      	asrs	r3, r3, #31
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	1c59      	adds	r1, r3, #1
 8001cfe:	6179      	str	r1, [r7, #20]
 8001d00:	4619      	mov	r1, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	440b      	add	r3, r1
 8001d06:	3230      	adds	r2, #48	; 0x30
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <addexp+0x100>)
 8001d10:	fb83 1302 	smull	r1, r3, r3, r2
 8001d14:	1099      	asrs	r1, r3, #2
 8001d16:	17d3      	asrs	r3, r2, #31
 8001d18:	1ac9      	subs	r1, r1, r3
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	6179      	str	r1, [r7, #20]
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	440b      	add	r3, r1
 8001d36:	3230      	adds	r2, #48	; 0x30
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
  return n;
 8001d3c:	697b      	ldr	r3, [r7, #20]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	51eb851f 	.word	0x51eb851f
 8001d50:	66666667 	.word	0x66666667

08001d54 <xisinf>:

static int xisinf(double x) {
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d62:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001d66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	000a      	movs	r2, r1
 8001d74:	2300      	movs	r3, #0
 8001d76:	4613      	mov	r3, r2
 8001d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d7c:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <xisinf+0x4c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d106      	bne.n	8001d90 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8001d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d86:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <xisinf+0x3c>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <xisinf+0x3e>
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	7ff00000 	.word	0x7ff00000

08001da4 <xisnan>:

static int xisnan(double x) {
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001db2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001db6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001ddc:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001dde:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <xisnan+0x54>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	bf8c      	ite	hi
 8001de4:	2301      	movhi	r3, #1
 8001de6:	2300      	movls	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	7ff00000 	.word	0x7ff00000
 8001dfc:	00000000 	.word	0x00000000

08001e00 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b09e      	sub	sp, #120	; 0x78
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	6178      	str	r0, [r7, #20]
 8001e08:	6139      	str	r1, [r7, #16]
 8001e0a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e16:	2300      	movs	r3, #0
 8001e18:	667b      	str	r3, [r7, #100]	; 0x64
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e2a:	f7fe fe7d 	bl	8000b28 <__aeabi_dcmpeq>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <mg_dtoa+0x44>
 8001e34:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <mg_dtoa+0x234>)
 8001e36:	4a80      	ldr	r2, [pc, #512]	; (8002038 <mg_dtoa+0x238>)
 8001e38:	6939      	ldr	r1, [r7, #16]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f004 ff76 	bl	8006d2c <mg_snprintf>
 8001e40:	4603      	mov	r3, r0
 8001e42:	e2c9      	b.n	80023d8 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8001e44:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e48:	f7ff ff84 	bl	8001d54 <xisinf>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d014      	beq.n	8001e7c <mg_dtoa+0x7c>
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e5e:	f7fe fe8b 	bl	8000b78 <__aeabi_dcmpgt>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <mg_dtoa+0x6c>
 8001e68:	4b74      	ldr	r3, [pc, #464]	; (800203c <mg_dtoa+0x23c>)
 8001e6a:	e000      	b.n	8001e6e <mg_dtoa+0x6e>
 8001e6c:	4b74      	ldr	r3, [pc, #464]	; (8002040 <mg_dtoa+0x240>)
 8001e6e:	4a72      	ldr	r2, [pc, #456]	; (8002038 <mg_dtoa+0x238>)
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f004 ff5a 	bl	8006d2c <mg_snprintf>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	e2ad      	b.n	80023d8 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8001e7c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e80:	f7ff ff90 	bl	8001da4 <xisnan>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <mg_dtoa+0x9a>
 8001e8a:	4b6e      	ldr	r3, [pc, #440]	; (8002044 <mg_dtoa+0x244>)
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <mg_dtoa+0x238>)
 8001e8e:	6939      	ldr	r1, [r7, #16]
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f004 ff4b 	bl	8006d2c <mg_snprintf>
 8001e96:	4603      	mov	r3, r0
 8001e98:	e29e      	b.n	80023d8 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ea6:	f7fe fe49 	bl	8000b3c <__aeabi_dcmplt>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00d      	beq.n	8001ecc <mg_dtoa+0xcc>
 8001eb0:	68bc      	ldr	r4, [r7, #8]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eb8:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	66ba      	str	r2, [r7, #104]	; 0x68
 8001ec2:	3370      	adds	r3, #112	; 0x70
 8001ec4:	443b      	add	r3, r7
 8001ec6:	222d      	movs	r2, #45	; 0x2d
 8001ec8:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8001ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ed0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	4b5b      	ldr	r3, [pc, #364]	; (8002048 <mg_dtoa+0x248>)
 8001eda:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001ede:	e00a      	b.n	8001ef6 <mg_dtoa+0xf6>
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <mg_dtoa+0x24c>)
 8001ee6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001eea:	f7fe fbb5 	bl	8000658 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <mg_dtoa+0x24c>)
 8001efc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f00:	f7fe fe30 	bl	8000b64 <__aeabi_dcmpge>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d011      	beq.n	8001f2e <mg_dtoa+0x12e>
 8001f0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f12:	f7fe fccb 	bl	80008ac <__aeabi_ddiv>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <mg_dtoa+0x24c>)
 8001f24:	f7fe fe1e 	bl	8000b64 <__aeabi_dcmpge>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1d8      	bne.n	8001ee0 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8001f2e:	e00a      	b.n	8001f46 <mg_dtoa+0x146>
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b45      	ldr	r3, [pc, #276]	; (800204c <mg_dtoa+0x24c>)
 8001f36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f3a:	f7fe fcb7 	bl	80008ac <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <mg_dtoa+0x248>)
 8001f4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f50:	f7fe fdfe 	bl	8000b50 <__aeabi_dcmple>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d011      	beq.n	8001f7e <mg_dtoa+0x17e>
 8001f5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f62:	f7fe fca3 	bl	80008ac <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <mg_dtoa+0x248>)
 8001f74:	f7fe fdec 	bl	8000b50 <__aeabi_dcmple>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1d8      	bne.n	8001f30 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <mg_dtoa+0x250>)
 8001f88:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f8c:	f7fe fb64 	bl	8000658 <__aeabi_dmul>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f98:	e00d      	b.n	8001fb6 <mg_dtoa+0x1b6>
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <mg_dtoa+0x24c>)
 8001fa0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fa4:	f7fe fc82 	bl	80008ac <__aeabi_ddiv>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbed      	blt.n	8001f9a <mg_dtoa+0x19a>
  d += t;
 8001fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fc6:	f7fe f991 	bl	80002ec <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <mg_dtoa+0x248>)
 8001fd8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8001fdc:	e00d      	b.n	8001ffa <mg_dtoa+0x1fa>
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <mg_dtoa+0x24c>)
 8001fe4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001fe8:	f7fe fb36 	bl	8000658 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001ff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <mg_dtoa+0x24c>)
 8002000:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002004:	f7fe fdae 	bl	8000b64 <__aeabi_dcmpge>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d011      	beq.n	8002032 <mg_dtoa+0x232>
 800200e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002016:	f7fe fc49 	bl	80008ac <__aeabi_ddiv>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <mg_dtoa+0x24c>)
 8002028:	f7fe fd9c 	bl	8000b64 <__aeabi_dcmpge>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1d5      	bne.n	8001fde <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8002032:	e01d      	b.n	8002070 <mg_dtoa+0x270>
 8002034:	08013680 	.word	0x08013680
 8002038:	08013684 	.word	0x08013684
 800203c:	08013688 	.word	0x08013688
 8002040:	0801368c 	.word	0x0801368c
 8002044:	08013694 	.word	0x08013694
 8002048:	3ff00000 	.word	0x3ff00000
 800204c:	40240000 	.word	0x40240000
 8002050:	40140000 	.word	0x40140000
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4b9d      	ldr	r3, [pc, #628]	; (80022d0 <mg_dtoa+0x4d0>)
 800205a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800205e:	f7fe fc25 	bl	80008ac <__aeabi_ddiv>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800206a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800206c:	3b01      	subs	r3, #1
 800206e:	663b      	str	r3, [r7, #96]	; 0x60
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	4b97      	ldr	r3, [pc, #604]	; (80022d4 <mg_dtoa+0x4d4>)
 8002076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800207a:	f7fe fd5f 	bl	8000b3c <__aeabi_dcmplt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d011      	beq.n	80020a8 <mg_dtoa+0x2a8>
 8002084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800208c:	f7fe fc0e 	bl	80008ac <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	4b8d      	ldr	r3, [pc, #564]	; (80022d4 <mg_dtoa+0x4d4>)
 800209e:	f7fe fd4d 	bl	8000b3c <__aeabi_dcmplt>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1d5      	bne.n	8002054 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 80020a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	db33      	blt.n	8002118 <mg_dtoa+0x318>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	dd30      	ble.n	8002118 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80020b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020be:	f7fe fbf5 	bl	80008ac <__aeabi_ddiv>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	ec43 2b17 	vmov	d7, r2, r3
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f107 0018 	add.w	r0, r7, #24
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	eeb0 0a47 	vmov.f32	s0, s14
 80020d6:	eef0 0a67 	vmov.f32	s1, s15
 80020da:	2128      	movs	r1, #40	; 0x28
 80020dc:	f7ff fe90 	bl	8001e00 <mg_dtoa>
 80020e0:	4603      	mov	r3, r0
 80020e2:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 80020e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e8:	4413      	add	r3, r2
 80020ea:	f107 0218 	add.w	r2, r7, #24
 80020ee:	4413      	add	r3, r2
 80020f0:	222b      	movs	r2, #43	; 0x2b
 80020f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fdab 	bl	8001c50 <addexp>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020fe:	4413      	add	r3, r2
 8002100:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002102:	f107 0318 	add.w	r3, r7, #24
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800210a:	4a73      	ldr	r2, [pc, #460]	; (80022d8 <mg_dtoa+0x4d8>)
 800210c:	6939      	ldr	r1, [r7, #16]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f004 fe0c 	bl	8006d2c <mg_snprintf>
 8002114:	4603      	mov	r3, r0
 8002116:	e15f      	b.n	80023d8 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	425b      	negs	r3, r3
 800211c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800211e:	429a      	cmp	r2, r3
 8002120:	dc34      	bgt.n	800218c <mg_dtoa+0x38c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b01      	cmp	r3, #1
 8002126:	dd31      	ble.n	800218c <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800212c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002130:	f7fe fbbc 	bl	80008ac <__aeabi_ddiv>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	ec43 2b17 	vmov	d7, r2, r3
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f107 0018 	add.w	r0, r7, #24
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	eeb0 0a47 	vmov.f32	s0, s14
 8002148:	eef0 0a67 	vmov.f32	s1, s15
 800214c:	2128      	movs	r1, #40	; 0x28
 800214e:	f7ff fe57 	bl	8001e00 <mg_dtoa>
 8002152:	4603      	mov	r3, r0
 8002154:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8002156:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800215a:	4413      	add	r3, r2
 800215c:	f107 0218 	add.w	r2, r7, #24
 8002160:	18d0      	adds	r0, r2, r3
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002164:	425b      	negs	r3, r3
 8002166:	222d      	movs	r2, #45	; 0x2d
 8002168:	4619      	mov	r1, r3
 800216a:	f7ff fd71 	bl	8001c50 <addexp>
 800216e:	4602      	mov	r2, r0
 8002170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002172:	4413      	add	r3, r2
 8002174:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002176:	f107 0318 	add.w	r3, r7, #24
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800217e:	4a56      	ldr	r2, [pc, #344]	; (80022d8 <mg_dtoa+0x4d8>)
 8002180:	6939      	ldr	r1, [r7, #16]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f004 fdd2 	bl	8006d2c <mg_snprintf>
 8002188:	4603      	mov	r3, r0
 800218a:	e125      	b.n	80023d8 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800218c:	2300      	movs	r3, #0
 800218e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002194:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002198:	e03f      	b.n	800221a <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 800219a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800219e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a2:	f7fe fb83 	bl	80008ac <__aeabi_ddiv>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fced 	bl	8000b8c <__aeabi_d2iz>
 80021b2:	4603      	mov	r3, r0
 80021b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80021b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dc02      	bgt.n	80021c2 <mg_dtoa+0x3c2>
 80021bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dd0c      	ble.n	80021dc <mg_dtoa+0x3dc>
 80021c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c8:	1c59      	adds	r1, r3, #1
 80021ca:	6679      	str	r1, [r7, #100]	; 0x64
 80021cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021ce:	440b      	add	r3, r1
 80021d0:	3230      	adds	r2, #48	; 0x30
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	3370      	adds	r3, #112	; 0x70
 80021d6:	443b      	add	r3, r7
 80021d8:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 80021dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80021de:	f7fe f9d1 	bl	8000584 <__aeabi_i2d>
 80021e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021e6:	f7fe fa37 	bl	8000658 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021f2:	f7fe f879 	bl	80002e8 <__aeabi_dsub>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <mg_dtoa+0x4d0>)
 8002204:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002208:	f7fe fb50 	bl	80008ac <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	3301      	adds	r3, #1
 8002218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <mg_dtoa+0x4d4>)
 8002220:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002224:	f7fe fc9e 	bl	8000b64 <__aeabi_dcmpge>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <mg_dtoa+0x438>
 800222e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002232:	4413      	add	r3, r2
 8002234:	2b27      	cmp	r3, #39	; 0x27
 8002236:	ddb0      	ble.n	800219a <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8002238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11b      	bne.n	8002276 <mg_dtoa+0x476>
 800223e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	66ba      	str	r2, [r7, #104]	; 0x68
 8002244:	3370      	adds	r3, #112	; 0x70
 8002246:	443b      	add	r3, r7
 8002248:	2230      	movs	r2, #48	; 0x30
 800224a:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 800224e:	e012      	b.n	8002276 <mg_dtoa+0x476>
 8002250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	667a      	str	r2, [r7, #100]	; 0x64
 8002256:	3370      	adds	r3, #112	; 0x70
 8002258:	443b      	add	r3, r7
 800225a:	2230      	movs	r2, #48	; 0x30
 800225c:	f803 2c58 	strb.w	r2, [r3, #-88]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <mg_dtoa+0x4d0>)
 8002266:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800226a:	f7fe fb1f 	bl	80008ac <__aeabi_ddiv>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <mg_dtoa+0x4d4>)
 800227c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002280:	f7fe fc70 	bl	8000b64 <__aeabi_dcmpge>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <mg_dtoa+0x494>
 800228a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800228c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800228e:	4413      	add	r3, r2
 8002290:	2b27      	cmp	r3, #39	; 0x27
 8002292:	dddd      	ble.n	8002250 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8002294:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002298:	4413      	add	r3, r2
 800229a:	2b27      	cmp	r3, #39	; 0x27
 800229c:	dc09      	bgt.n	80022b2 <mg_dtoa+0x4b2>
 800229e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	66ba      	str	r2, [r7, #104]	; 0x68
 80022a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022a6:	4413      	add	r3, r2
 80022a8:	3370      	adds	r3, #112	; 0x70
 80022aa:	443b      	add	r3, r7
 80022ac:	222e      	movs	r2, #46	; 0x2e
 80022ae:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80022b2:	2300      	movs	r3, #0
 80022b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022b6:	a304      	add	r3, pc, #16	; (adr r3, 80022c8 <mg_dtoa+0x4c8>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80022c0:	e046      	b.n	8002350 <mg_dtoa+0x550>
 80022c2:	bf00      	nop
 80022c4:	f3af 8000 	nop.w
 80022c8:	9999999a 	.word	0x9999999a
 80022cc:	3fb99999 	.word	0x3fb99999
 80022d0:	40240000 	.word	0x40240000
 80022d4:	3ff00000 	.word	0x3ff00000
 80022d8:	08013698 	.word	0x08013698
      int ch = (int) (d / t);
 80022dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022e4:	f7fe fae2 	bl	80008ac <__aeabi_ddiv>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7fe fc4c 	bl	8000b8c <__aeabi_d2iz>
 80022f4:	4603      	mov	r3, r0
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 80022f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022fe:	1c59      	adds	r1, r3, #1
 8002300:	6679      	str	r1, [r7, #100]	; 0x64
 8002302:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002304:	440b      	add	r3, r1
 8002306:	3230      	adds	r2, #48	; 0x30
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	3370      	adds	r3, #112	; 0x70
 800230c:	443b      	add	r3, r7
 800230e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002312:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002314:	f7fe f936 	bl	8000584 <__aeabi_i2d>
 8002318:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800231c:	f7fe f99c 	bl	8000658 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002328:	f7fd ffde 	bl	80002e8 <__aeabi_dsub>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <mg_dtoa+0x5e0>)
 800233a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800233e:	f7fe fab5 	bl	80008ac <__aeabi_ddiv>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	3301      	adds	r3, #1
 800234e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002350:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002354:	4413      	add	r3, r2
 8002356:	2b27      	cmp	r3, #39	; 0x27
 8002358:	dc07      	bgt.n	800236a <mg_dtoa+0x56a>
 800235a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	dbbc      	blt.n	80022dc <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8002362:	e002      	b.n	800236a <mg_dtoa+0x56a>
 8002364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002366:	3b01      	subs	r3, #1
 8002368:	667b      	str	r3, [r7, #100]	; 0x64
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00c      	beq.n	800238a <mg_dtoa+0x58a>
 8002370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002372:	2b00      	cmp	r3, #0
 8002374:	dd09      	ble.n	800238a <mg_dtoa+0x58a>
 8002376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800237a:	4413      	add	r3, r2
 800237c:	3b01      	subs	r3, #1
 800237e:	3370      	adds	r3, #112	; 0x70
 8002380:	443b      	add	r3, r7
 8002382:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002386:	2b30      	cmp	r3, #48	; 0x30
 8002388:	d0ec      	beq.n	8002364 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 800238a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800238c:	2b00      	cmp	r3, #0
 800238e:	dd0c      	ble.n	80023aa <mg_dtoa+0x5aa>
 8002390:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002394:	4413      	add	r3, r2
 8002396:	3b01      	subs	r3, #1
 8002398:	3370      	adds	r3, #112	; 0x70
 800239a:	443b      	add	r3, r7
 800239c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80023a0:	2b2e      	cmp	r3, #46	; 0x2e
 80023a2:	d102      	bne.n	80023aa <mg_dtoa+0x5aa>
 80023a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023a6:	3b01      	subs	r3, #1
 80023a8:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 80023aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ae:	4413      	add	r3, r2
 80023b0:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80023b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023b4:	2b27      	cmp	r3, #39	; 0x27
 80023b6:	dd01      	ble.n	80023bc <mg_dtoa+0x5bc>
 80023b8:	2327      	movs	r3, #39	; 0x27
 80023ba:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 80023bc:	f107 0218 	add.w	r2, r7, #24
 80023c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c2:	4413      	add	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <mg_dtoa+0x5e4>)
 80023ce:	6939      	ldr	r1, [r7, #16]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f004 fcab 	bl	8006d2c <mg_snprintf>
 80023d6:	4603      	mov	r3, r0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3770      	adds	r7, #112	; 0x70
 80023dc:	46bd      	mov	sp, r7
 80023de:	bdb0      	pop	{r4, r5, r7, pc}
 80023e0:	40240000 	.word	0x40240000
 80023e4:	08013684 	.word	0x08013684

080023e8 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <mg_lld+0x15c>)
 80023f6:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80023f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002404:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <mg_lld+0x4a>
 800240c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da0e      	bge.n	8002432 <mg_lld+0x4a>
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	627a      	str	r2, [r7, #36]	; 0x24
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	222d      	movs	r2, #45	; 0x2d
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002426:	2100      	movs	r1, #0
 8002428:	4254      	negs	r4, r2
 800242a:	eb61 0503 	sbc.w	r5, r1, r3
 800242e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002432:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002436:	2b00      	cmp	r3, #0
 8002438:	d021      	beq.n	800247e <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e019      	b.n	8002474 <mg_lld+0x8c>
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	441a      	add	r2, r3
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	6239      	str	r1, [r7, #32]
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	440b      	add	r3, r1
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	440b      	add	r3, r1
 8002458:	7812      	ldrb	r2, [r2, #0]
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	0902      	lsrs	r2, r0, #4
 800246a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800246e:	090b      	lsrs	r3, r1, #4
 8002470:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002478:	4313      	orrs	r3, r2
 800247a:	d1e1      	bne.n	8002440 <mg_lld+0x58>
 800247c:	e025      	b.n	80024ca <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	e01e      	b.n	80024c2 <mg_lld+0xda>
 8002484:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002488:	f04f 020a 	mov.w	r2, #10
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f7fe fba4 	bl	8000bdc <__aeabi_uldivmod>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	441a      	add	r2, r3
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	6239      	str	r1, [r7, #32]
 800249e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a0:	440b      	add	r3, r1
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	440b      	add	r3, r1
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ae:	f04f 020a 	mov.w	r2, #10
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	f7fe fb91 	bl	8000bdc <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80024c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c6:	4313      	orrs	r3, r2
 80024c8:	d1dc      	bne.n	8002484 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e022      	b.n	8002516 <mg_lld+0x12e>
    char t = buf[s + i];
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	441a      	add	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	441a      	add	r2, r3
 80024ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	440b      	add	r3, r1
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	440b      	add	r3, r1
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	441a      	add	r2, r3
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	7dfa      	ldrb	r2, [r7, #23]
 800250e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	3301      	adds	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	429a      	cmp	r2, r3
 800251e:	d3d7      	bcc.n	80024d0 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002524:	4313      	orrs	r3, r2
 8002526:	d106      	bne.n	8002536 <mg_lld+0x14e>
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	623a      	str	r2, [r7, #32]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	2230      	movs	r2, #48	; 0x30
 8002534:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002536:	6a3a      	ldr	r2, [r7, #32]
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	4413      	add	r3, r2
}
 800253c:	4618      	mov	r0, r3
 800253e:	3730      	adds	r7, #48	; 0x30
 8002540:	46bd      	mov	sp, r7
 8002542:	bdb0      	pop	{r4, r5, r7, pc}
 8002544:	080136a0 	.word	0x080136a0

08002548 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 800255a:	e009      	b.n	8002570 <scpy+0x28>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	617a      	str	r2, [r7, #20]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d205      	bcs.n	8002584 <scpy+0x3c>
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1eb      	bne.n	800255c <scpy+0x14>
  return i;
 8002584:	697b      	ldr	r3, [r7, #20]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 800258e:	b40c      	push	{r2, r3}
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f809 	bl	80025c4 <mg_vxprintf>
 80025b2:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025c0:	b002      	add	sp, #8
 80025c2:	4770      	bx	lr

080025c4 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80025c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025c8:	b0a6      	sub	sp, #152	; 0x98
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 80025e0:	e383      	b.n	8002cea <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b25      	cmp	r3, #37	; 0x25
 80025ee:	f040 8369 	bne.w	8002cc4 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80025f2:	2300      	movs	r3, #0
 80025f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025f6:	2300      	movs	r3, #0
 80025f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80025fa:	2300      	movs	r3, #0
 80025fc:	677b      	str	r3, [r7, #116]	; 0x74
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002604:	2320      	movs	r3, #32
 8002606:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800260a:	2300      	movs	r3, #0
 800260c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002614:	3301      	adds	r3, #1
 8002616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 8002628:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800262c:	2b23      	cmp	r3, #35	; 0x23
 800262e:	d10e      	bne.n	800264e <mg_vxprintf+0x8a>
 8002630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002632:	3301      	adds	r3, #1
 8002634:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263a:	3301      	adds	r3, #1
 800263c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 800264e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002652:	2b2d      	cmp	r3, #45	; 0x2d
 8002654:	d110      	bne.n	8002678 <mg_vxprintf+0xb4>
 8002656:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800265a:	3301      	adds	r3, #1
 800265c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002664:	3301      	adds	r3, #1
 8002666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002670:	4413      	add	r3, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8002678:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800267c:	2b30      	cmp	r3, #48	; 0x30
 800267e:	d127      	bne.n	80026d0 <mg_vxprintf+0x10c>
 8002680:	2330      	movs	r3, #48	; 0x30
 8002682:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268a:	3301      	adds	r3, #1
 800268c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002696:	4413      	add	r3, r2
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 800269e:	e017      	b.n	80026d0 <mg_vxprintf+0x10c>
 80026a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	677b      	str	r3, [r7, #116]	; 0x74
 80026ac:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80026b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	677b      	str	r3, [r7, #116]	; 0x74
 80026b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026bc:	3301      	adds	r3, #1
 80026be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80026d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff faa5 	bl	8001c24 <is_digit>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1df      	bne.n	80026a0 <mg_vxprintf+0xdc>
      if (c == '.') {
 80026e0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80026e4:	2b2e      	cmp	r3, #46	; 0x2e
 80026e6:	d153      	bne.n	8002790 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80026e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ec:	3301      	adds	r3, #1
 80026ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8002700:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002704:	2b2a      	cmp	r3, #42	; 0x2a
 8002706:	d113      	bne.n	8002730 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1d19      	adds	r1, r3, #4
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	6011      	str	r1, [r2, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8002716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800271a:	3301      	adds	r3, #1
 800271c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800272e:	e02f      	b.n	8002790 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002734:	e017      	b.n	8002766 <mg_vxprintf+0x1a2>
 8002736:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	673b      	str	r3, [r7, #112]	; 0x70
 8002742:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002748:	4413      	add	r3, r2
 800274a:	3b30      	subs	r3, #48	; 0x30
 800274c:	673b      	str	r3, [r7, #112]	; 0x70
 800274e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002752:	3301      	adds	r3, #1
 8002754:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275e:	4413      	add	r3, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002766:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa5a 	bl	8001c24 <is_digit>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1df      	bne.n	8002736 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8002776:	e00b      	b.n	8002790 <mg_vxprintf+0x1cc>
 8002778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800277c:	3301      	adds	r3, #1
 800277e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002788:	4413      	add	r3, r2
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002790:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002794:	2b68      	cmp	r3, #104	; 0x68
 8002796:	d0ef      	beq.n	8002778 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8002798:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800279c:	2b6c      	cmp	r3, #108	; 0x6c
 800279e:	d121      	bne.n	80027e4 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80027a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a2:	3301      	adds	r3, #1
 80027a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80027a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027aa:	3301      	adds	r3, #1
 80027ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80027be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027c2:	2b6c      	cmp	r3, #108	; 0x6c
 80027c4:	d10e      	bne.n	80027e4 <mg_vxprintf+0x220>
 80027c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c8:	3301      	adds	r3, #1
 80027ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	3301      	adds	r3, #1
 80027d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027dc:	4413      	add	r3, r2
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 80027e4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027e8:	2b70      	cmp	r3, #112	; 0x70
 80027ea:	d103      	bne.n	80027f4 <mg_vxprintf+0x230>
 80027ec:	2301      	movs	r3, #1
 80027ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027f0:	2301      	movs	r3, #1
 80027f2:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80027f4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d018      	beq.n	800282e <mg_vxprintf+0x26a>
 80027fc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002800:	2b75      	cmp	r3, #117	; 0x75
 8002802:	d014      	beq.n	800282e <mg_vxprintf+0x26a>
 8002804:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002808:	2b78      	cmp	r3, #120	; 0x78
 800280a:	d010      	beq.n	800282e <mg_vxprintf+0x26a>
 800280c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002810:	2b58      	cmp	r3, #88	; 0x58
 8002812:	d00c      	beq.n	800282e <mg_vxprintf+0x26a>
 8002814:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d008      	beq.n	800282e <mg_vxprintf+0x26a>
 800281c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002820:	2b67      	cmp	r3, #103	; 0x67
 8002822:	d004      	beq.n	800282e <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002824:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002828:	2b66      	cmp	r3, #102	; 0x66
 800282a:	f040 816c 	bne.w	8002b06 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 800282e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800283e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002842:	2b78      	cmp	r3, #120	; 0x78
 8002844:	d007      	beq.n	8002856 <mg_vxprintf+0x292>
 8002846:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800284a:	2b58      	cmp	r3, #88	; 0x58
 800284c:	d003      	beq.n	8002856 <mg_vxprintf+0x292>
 800284e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002852:	2b70      	cmp	r3, #112	; 0x70
 8002854:	d101      	bne.n	800285a <mg_vxprintf+0x296>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <mg_vxprintf+0x298>
 800285a:	2300      	movs	r3, #0
 800285c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8002860:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 800286c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <mg_vxprintf+0x2b2>
 8002872:	2302      	movs	r3, #2
 8002874:	e000      	b.n	8002878 <mg_vxprintf+0x2b4>
 8002876:	2300      	movs	r3, #0
 8002878:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 800287a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800287e:	2b67      	cmp	r3, #103	; 0x67
 8002880:	d003      	beq.n	800288a <mg_vxprintf+0x2c6>
 8002882:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002886:	2b66      	cmp	r3, #102	; 0x66
 8002888:	d124      	bne.n	80028d4 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3307      	adds	r3, #7
 8002890:	f023 0307 	bic.w	r3, r3, #7
 8002894:	f103 0108 	add.w	r1, r3, #8
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	6011      	str	r1, [r2, #0]
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 80028a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d101      	bne.n	80028b0 <mg_vxprintf+0x2ec>
 80028ac:	2306      	movs	r3, #6
 80028ae:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80028b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028b2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028b6:	2b67      	cmp	r3, #103	; 0x67
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f107 0014 	add.w	r0, r7, #20
 80028c4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80028c8:	2128      	movs	r1, #40	; 0x28
 80028ca:	f7ff fa99 	bl	8001e00 <mg_dtoa>
 80028ce:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 80028d2:	e069      	b.n	80029a8 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80028d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d11c      	bne.n	8002914 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3307      	adds	r3, #7
 80028e0:	f023 0307 	bic.w	r3, r3, #7
 80028e4:	f103 0108 	add.w	r1, r3, #8
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	6011      	str	r1, [r2, #0]
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 80028f4:	f107 0114 	add.w	r1, r7, #20
 80028f8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002908:	4608      	mov	r0, r1
 800290a:	f7ff fd6d 	bl	80023e8 <mg_lld>
 800290e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002912:	e049      	b.n	80029a8 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002916:	2b01      	cmp	r3, #1
 8002918:	d123      	bne.n	8002962 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1d19      	adds	r1, r3, #4
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6011      	str	r1, [r2, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <mg_vxprintf+0x376>
 8002930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002932:	17da      	asrs	r2, r3, #31
 8002934:	461c      	mov	r4, r3
 8002936:	4615      	mov	r5, r2
 8002938:	e003      	b.n	8002942 <mg_vxprintf+0x37e>
 800293a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293c:	2200      	movs	r2, #0
 800293e:	461c      	mov	r4, r3
 8002940:	4615      	mov	r5, r2
 8002942:	f107 0114 	add.w	r1, r7, #20
 8002946:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	4608      	mov	r0, r1
 8002958:	f7ff fd46 	bl	80023e8 <mg_lld>
 800295c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002960:	e022      	b.n	80029a8 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1d19      	adds	r1, r3, #4
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	6011      	str	r1, [r2, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8002970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <mg_vxprintf+0x3be>
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	17da      	asrs	r2, r3, #31
 800297c:	4698      	mov	r8, r3
 800297e:	4691      	mov	r9, r2
 8002980:	e003      	b.n	800298a <mg_vxprintf+0x3c6>
 8002982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002984:	2200      	movs	r2, #0
 8002986:	4698      	mov	r8, r3
 8002988:	4691      	mov	r9, r2
 800298a:	f107 0114 	add.w	r1, r7, #20
 800298e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4642      	mov	r2, r8
 800299c:	464b      	mov	r3, r9
 800299e:	4608      	mov	r0, r1
 80029a0:	f7ff fd22 	bl	80023e8 <mg_lld>
 80029a4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029ae:	e007      	b.n	80029c0 <mg_vxprintf+0x3fc>
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	3b01      	subs	r3, #1
 80029b4:	677b      	str	r3, [r7, #116]	; 0x74
 80029b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ba:	3301      	adds	r3, #1
 80029bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80029c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d202      	bcs.n	80029d0 <mg_vxprintf+0x40c>
 80029ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ef      	bne.n	80029b0 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029d6:	e011      	b.n	80029fc <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80029d8:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80029dc:	2301      	movs	r3, #1
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff fdb1 	bl	8002548 <scpy>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ec:	4413      	add	r3, r2
 80029ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80029f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029f6:	3301      	adds	r3, #1
 80029f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d110      	bne.n	8002a26 <mg_vxprintf+0x462>
 8002a04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <mg_vxprintf+0x462>
 8002a0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d207      	bcs.n	8002a26 <mg_vxprintf+0x462>
 8002a16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a1e:	4413      	add	r3, r2
 8002a20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d8d8      	bhi.n	80029d8 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8002a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a28:	4ab7      	ldr	r2, [pc, #732]	; (8002d08 <mg_vxprintf+0x744>)
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fd8b 	bl	8002548 <scpy>
 8002a32:	4602      	mov	r2, r0
 8002a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a44:	e011      	b.n	8002a6a <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8002a46:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff fd7a 	bl	8002548 <scpy>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a64:	3301      	adds	r3, #1
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a6e:	2b30      	cmp	r3, #48	; 0x30
 8002a70:	d10c      	bne.n	8002a8c <mg_vxprintf+0x4c8>
 8002a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <mg_vxprintf+0x4c8>
 8002a7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a84:	4413      	add	r3, r2
 8002a86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8dc      	bhi.n	8002a46 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8002a8c:	f107 0214 	add.w	r2, r7, #20
 8002a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fd56 	bl	8002548 <scpy>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002aae:	e011      	b.n	8002ad4 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002ab0:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7ff fd45 	bl	8002548 <scpy>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	f040 80ea 	bne.w	8002cb2 <mg_vxprintf+0x6ee>
 8002ade:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80e5 	beq.w	8002cb2 <mg_vxprintf+0x6ee>
 8002ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aee:	429a      	cmp	r2, r3
 8002af0:	f080 80df 	bcs.w	8002cb2 <mg_vxprintf+0x6ee>
 8002af4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002afc:	4413      	add	r3, r2
 8002afe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d8d5      	bhi.n	8002ab0 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002b04:	e0d5      	b.n	8002cb2 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8002b06:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b0a:	2b6d      	cmp	r3, #109	; 0x6d
 8002b0c:	d003      	beq.n	8002b16 <mg_vxprintf+0x552>
 8002b0e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b12:	2b4d      	cmp	r3, #77	; 0x4d
 8002b14:	d128      	bne.n	8002b68 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1d19      	adds	r1, r3, #4
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	6011      	str	r1, [r2, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 8002b24:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b28:	2b6d      	cmp	r3, #109	; 0x6d
 8002b2a:	d103      	bne.n	8002b34 <mg_vxprintf+0x570>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	2022      	movs	r0, #34	; 0x22
 8002b32:	4798      	blx	r3
        n += f(out, param, ap);
 8002b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	4798      	blx	r3
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b44:	4413      	add	r3, r2
 8002b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 8002b4a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b4e:	2b6d      	cmp	r3, #109	; 0x6d
 8002b50:	f040 80b1 	bne.w	8002cb6 <mg_vxprintf+0x6f2>
 8002b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	2022      	movs	r0, #34	; 0x22
 8002b64:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8002b66:	e0a6      	b.n	8002cb6 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8002b68:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b6c:	2b63      	cmp	r3, #99	; 0x63
 8002b6e:	d112      	bne.n	8002b96 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1d19      	adds	r1, r3, #4
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	6011      	str	r1, [r2, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 8002b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	4610      	mov	r0, r2
 8002b88:	4798      	blx	r3
        n++;
 8002b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b94:	e090      	b.n	8002cb8 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8002b96:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b9a:	2b73      	cmp	r3, #115	; 0x73
 8002b9c:	d16b      	bne.n	8002c76 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	1d19      	adds	r1, r3, #4
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	6011      	str	r1, [r2, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8002bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d109      	bne.n	8002bc8 <mg_vxprintf+0x604>
 8002bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <mg_vxprintf+0x600>
 8002bba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002bbc:	f7fd fb88 	bl	80002d0 <strlen>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	e000      	b.n	8002bc6 <mg_vxprintf+0x602>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bce:	e011      	b.n	8002bf4 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002bd0:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fcb5 	bl	8002548 <scpy>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002be4:	4413      	add	r3, r2
 8002be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bf4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <mg_vxprintf+0x64e>
 8002bfc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d206      	bcs.n	8002c12 <mg_vxprintf+0x64e>
 8002c04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c0a:	4413      	add	r3, r2
 8002c0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d8de      	bhi.n	8002bd0 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8002c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff fc95 	bl	8002548 <scpy>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c24:	4413      	add	r3, r2
 8002c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c30:	e011      	b.n	8002c56 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8002c32:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002c36:	2301      	movs	r3, #1
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff fc84 	bl	8002548 <scpy>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c46:	4413      	add	r3, r2
 8002c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8002c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c50:	3301      	adds	r3, #1
 8002c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d02c      	beq.n	8002cb8 <mg_vxprintf+0x6f4>
 8002c5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d228      	bcs.n	8002cb8 <mg_vxprintf+0x6f4>
 8002c66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6c:	4413      	add	r3, r2
 8002c6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d8de      	bhi.n	8002c32 <mg_vxprintf+0x66e>
 8002c74:	e020      	b.n	8002cb8 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8002c76:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c7a:	2b25      	cmp	r3, #37	; 0x25
 8002c7c:	d109      	bne.n	8002c92 <mg_vxprintf+0x6ce>
        out('%', param);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	2025      	movs	r0, #37	; 0x25
 8002c84:	4798      	blx	r3
        n++;
 8002c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c90:	e012      	b.n	8002cb8 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	2025      	movs	r0, #37	; 0x25
 8002c98:	4798      	blx	r3
        out(c, param);
 8002c9a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4798      	blx	r3
        n += 2;
 8002ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002caa:	3302      	adds	r3, #2
 8002cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cb0:	e002      	b.n	8002cb8 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8002cb6:	bf00      	nop
      }
      i++;
 8002cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002cc2:	e012      	b.n	8002cea <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cca:	4413      	add	r3, r2
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4798      	blx	r3
 8002cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f ac74 	bne.w	80025e2 <mg_vxprintf+0x1e>
    }
  }
  return n;
 8002cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3790      	adds	r7, #144	; 0x90
 8002d02:	46bd      	mov	sp, r7
 8002d04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d08:	080136b4 	.word	0x080136b4

08002d0c <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8002d18:	2108      	movs	r1, #8
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f00f f9f0 	bl	8012100 <calloc>
 8002d20:	4603      	mov	r3, r0
 8002d22:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d013      	beq.n	8002d52 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	4798      	blx	r3
 8002d34:	4602      	mov	r2, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <mg_fs_open+0x46>
      free(fd);
 8002d48:	6978      	ldr	r0, [r7, #20]
 8002d4a:	f00f f9ff 	bl	801214c <free>
      fd = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8002d52:	697b      	ldr	r3, [r7, #20]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4610      	mov	r0, r2
 8002d76:	4798      	blx	r3
    free(fd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f00f f9e7 	bl	801214c <free>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd fa9c 	bl	80002d0 <strlen>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d219      	bcs.n	8002dd4 <is_dir_prefix+0x4e>
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f00f fc9d 	bl	80126e4 <strncmp>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d111      	bne.n	8002dd4 <is_dir_prefix+0x4e>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b2f      	cmp	r3, #47	; 0x2f
 8002dc0:	d006      	beq.n	8002dd0 <is_dir_prefix+0x4a>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8002dce:	d101      	bne.n	8002dd4 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <is_dir_prefix+0x50>
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7fd fa70 	bl	80002d0 <strlen>
 8002df0:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f008 fab0 	bl	800b35c <mg_unpack>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <packed_stat+0x28>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e017      	b.n	8002e36 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	e00c      	b.n	8002e26 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff ffb8 	bl	8002d86 <is_dir_prefix>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <packed_stat+0x42>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	e00a      	b.n	8002e36 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	3301      	adds	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	69f8      	ldr	r0, [r7, #28]
 8002e28:	f008 fa84 	bl	800b334 <mg_unlist>
 8002e2c:	6178      	str	r0, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1eb      	bne.n	8002e0c <packed_stat+0x2e>
  }
  return 0;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0cc      	sub	sp, #304	; 0x130
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e4a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e4e:	6018      	str	r0, [r3, #0]
 8002e50:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e54:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e58:	6019      	str	r1, [r3, #0]
 8002e5a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e5e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e62:	601a      	str	r2, [r3, #0]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8002e64:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	f7fd fa2f 	bl	80002d0 <strlen>
 8002e72:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  tmp[0] = '\0';  // Previously listed entry
 8002e76:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e88:	e065      	b.n	8002f56 <packed_list+0x116>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002e8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002e8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e96:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	f7ff ff73 	bl	8002d86 <is_dir_prefix>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d04f      	beq.n	8002f46 <packed_list+0x106>
    begin = &path[n + 1];
 8002ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    end = strchr(begin, '/');
 8002eb6:	212f      	movs	r1, #47	; 0x2f
 8002eb8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002ebc:	f00f fc05 	bl	80126ca <strchr>
 8002ec0:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (end == NULL) end = begin + strlen(begin);
 8002ec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <packed_list+0xa0>
 8002ecc:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002ed0:	f7fd f9fe 	bl	80002d0 <strlen>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eda:	4413      	add	r3, r2
 8002edc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8002ee0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee8:	1ad2      	subs	r2, r2, r3
 8002eea:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <packed_list+0x138>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	f003 ff17 	bl	8006d2c <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8002f04:	f107 0214 	add.w	r2, r7, #20
 8002f08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd f97e 	bl	8000210 <strcmp>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d017      	beq.n	8002f4a <packed_list+0x10a>
    fn(buf, userdata);  // Not yet listed, call user function
 8002f1a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002f1e:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8002f22:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002f26:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002f2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6811      	ldr	r1, [r2, #0]
 8002f32:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8002f34:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00f fc7d 	bl	801283e <strcpy>
 8002f44:	e002      	b.n	8002f4c <packed_list+0x10c>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <packed_list+0x10c>
    if (strcmp(buf, tmp) == 0) continue;
 8002f4a:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002f4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f50:	3301      	adds	r3, #1
 8002f52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f56:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002f5a:	f008 f9eb 	bl	800b334 <mg_unlist>
 8002f5e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8002f62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d18f      	bne.n	8002e8a <packed_list+0x4a>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	08013698 	.word	0x08013698

08002f7c <packed_open>:

static void *packed_open(const char *path, int flags) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4619      	mov	r1, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f008 f9e2 	bl	800b35c <mg_unpack>
 8002f98:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <packed_open+0x2c>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e016      	b.n	8002fd6 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <packed_open+0x3a>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e00f      	b.n	8002fd6 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8002fb6:	210c      	movs	r1, #12
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f00f f8a1 	bl	8012100 <calloc>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <packed_open+0x58>
    fp->size = size;
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8002fd4:	693b      	ldr	r3, [r7, #16]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <packed_close>:

static void packed_close(void *fp) {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <packed_close+0x14>
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f00f f8ad 	bl	801214c <free>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	441a      	add	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	d905      	bls.n	8003026 <packed_read+0x2c>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4413      	add	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4619      	mov	r1, r3
 8003034:	68b8      	ldr	r0, [r7, #8]
 8003036:	f00f fc0a 	bl	801284e <memcpy>
  fp->pos += len;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	441a      	add	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	609a      	str	r2, [r3, #8]
  return len;
 8003046:	687b      	ldr	r3, [r7, #4]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d903      	bls.n	8003092 <packed_seek+0x28>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <packed_remove>:

static bool packed_remove(const char *path) {
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <p_open>:
static void *p_open(const char *path, int flags) {
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <p_close>:
static void p_close(void *fp) {
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <p_remove>:
static bool p_remove(const char *path) {
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <p_mkdir>:
static bool p_mkdir(const char *path) {
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80031d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031dc:	b08f      	sub	sp, #60	; 0x3c
 80031de:	af00      	add	r7, sp, #0
 80031e0:	f107 0318 	add.w	r3, r7, #24
 80031e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80031e8:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80031f6:	a340      	add	r3, pc, #256	; (adr r3, 80032f8 <mg_to_size_t+0x120>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 8003204:	e002      	b.n	800320c <mg_to_size_t+0x34>
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	3301      	adds	r3, #1
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003210:	429a      	cmp	r2, r3
 8003212:	d20b      	bcs.n	800322c <mg_to_size_t+0x54>
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b20      	cmp	r3, #32
 800321e:	d0f2      	beq.n	8003206 <mg_to_size_t+0x2e>
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	4413      	add	r3, r2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b09      	cmp	r3, #9
 800322a:	d0ec      	beq.n	8003206 <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d244      	bcs.n	80032be <mg_to_size_t+0xe6>
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	4413      	add	r3, r2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b2d      	cmp	r3, #45	; 0x2d
 800323e:	d13e      	bne.n	80032be <mg_to_size_t+0xe6>
 8003240:	2300      	movs	r3, #0
 8003242:	e050      	b.n	80032e6 <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 8003244:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800324c:	4290      	cmp	r0, r2
 800324e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003252:	d201      	bcs.n	8003258 <mg_to_size_t+0x80>
 8003254:	2300      	movs	r3, #0
 8003256:	e046      	b.n	80032e6 <mg_to_size_t+0x10e>
    result *= 10;
 8003258:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800325c:	4642      	mov	r2, r8
 800325e:	464b      	mov	r3, r9
 8003260:	f04f 0000 	mov.w	r0, #0
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	0099      	lsls	r1, r3, #2
 800326a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800326e:	0090      	lsls	r0, r2, #2
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	eb12 0408 	adds.w	r4, r2, r8
 8003278:	eb43 0509 	adc.w	r5, r3, r9
 800327c:	1923      	adds	r3, r4, r4
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	eb45 0305 	adc.w	r3, r5, r5
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328a:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	3b30      	subs	r3, #48	; 0x30
 8003298:	461a      	mov	r2, r3
 800329a:	2300      	movs	r3, #0
 800329c:	4692      	mov	sl, r2
 800329e:	469b      	mov	fp, r3
 80032a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032a4:	eb12 010a 	adds.w	r1, r2, sl
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	eb43 030b 	adc.w	r3, r3, fp
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	3301      	adds	r3, #1
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d20b      	bcs.n	80032de <mg_to_size_t+0x106>
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b2f      	cmp	r3, #47	; 0x2f
 80032d0:	d905      	bls.n	80032de <mg_to_size_t+0x106>
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b39      	cmp	r3, #57	; 0x39
 80032dc:	d9b2      	bls.n	8003244 <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 80032de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	601a      	str	r2, [r3, #0]
  return true;
 80032e4:	2301      	movs	r3, #1
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	373c      	adds	r7, #60	; 0x3c
 80032ea:	46bd      	mov	sp, r7
 80032ec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	f3af 8000 	nop.w
 80032f8:	99999998 	.word	0x99999998
 80032fc:	19999999 	.word	0x19999999

08003300 <isx>:
    }
  }
  return len;
}

static bool isx(int c) {
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b2f      	cmp	r3, #47	; 0x2f
 800330c:	dd02      	ble.n	8003314 <isx+0x14>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b39      	cmp	r3, #57	; 0x39
 8003312:	dd0b      	ble.n	800332c <isx+0x2c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b60      	cmp	r3, #96	; 0x60
 8003318:	dd02      	ble.n	8003320 <isx+0x20>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b66      	cmp	r3, #102	; 0x66
 800331e:	dd05      	ble.n	800332c <isx+0x2c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	dd04      	ble.n	8003330 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b46      	cmp	r3, #70	; 0x46
 800332a:	dc01      	bgt.n	8003330 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <isx+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	e04f      	b.n	80033fc <mg_url_decode+0xb8>
    if (src[i] == '%') {
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4413      	add	r3, r2
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b25      	cmp	r3, #37	; 0x25
 8003366:	d12c      	bne.n	80033c2 <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3302      	adds	r3, #2
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	d924      	bls.n	80033bc <mg_url_decode+0x78>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ffbf 	bl	8003300 <isx>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d019      	beq.n	80033bc <mg_url_decode+0x78>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3302      	adds	r3, #2
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ffb4 	bl	8003300 <isx>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00e      	beq.n	80033bc <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3301      	adds	r3, #1
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	18d0      	adds	r0, r2, r3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	461a      	mov	r2, r3
 80033ae:	2102      	movs	r1, #2
 80033b0:	f004 fb81 	bl	8007ab6 <mg_unhex>
        i += 2;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3302      	adds	r3, #2
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e019      	b.n	80033f0 <mg_url_decode+0xac>
      } else {
        return -1;
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
 80033c0:	e03a      	b.n	8003438 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <mg_url_decode+0x9c>
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4413      	add	r3, r2
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b2b      	cmp	r3, #43	; 0x2b
 80033d2:	d105      	bne.n	80033e0 <mg_url_decode+0x9c>
      dst[j] = ' ';
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	2220      	movs	r2, #32
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e007      	b.n	80033f0 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	441a      	add	r2, r3
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	440b      	add	r3, r1
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3301      	adds	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	3301      	adds	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d204      	bcs.n	800340e <mg_url_decode+0xca>
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3301      	adds	r3, #1
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d8a6      	bhi.n	800335c <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d204      	bcs.n	8003420 <mg_url_decode+0xdc>
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	d305      	bcc.n	8003434 <mg_url_decode+0xf0>
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d201      	bcs.n	8003434 <mg_url_decode+0xf0>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	e001      	b.n	8003438 <mg_url_decode+0xf4>
 8003434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <isok>:

static bool isok(uint8_t c) {
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	2b0a      	cmp	r3, #10
 800344e:	d005      	beq.n	800345c <isok+0x1c>
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	2b0d      	cmp	r3, #13
 8003454:	d002      	beq.n	800345c <isok+0x1c>
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	2b1f      	cmp	r3, #31
 800345a:	d901      	bls.n	8003460 <isok+0x20>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <isok+0x22>
 8003460:	2300      	movs	r3, #0
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	b2db      	uxtb	r3, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e03c      	b.n	80034fe <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ffd7 	bl	8003440 <isok>
 8003492:	4603      	mov	r3, r0
 8003494:	f083 0301 	eor.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <mg_http_get_request_len+0x30>
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	e031      	b.n	8003508 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <mg_http_get_request_len+0x50>
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b0a      	cmp	r3, #10
 80034b4:	d106      	bne.n	80034c4 <mg_http_get_request_len+0x50>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b0a      	cmp	r3, #10
 80034c2:	d016      	beq.n	80034f2 <mg_http_get_request_len+0x7e>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d916      	bls.n	80034f8 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d110      	bne.n	80034f8 <mg_http_get_request_len+0x84>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3b01      	subs	r3, #1
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b0d      	cmp	r3, #13
 80034e2:	d109      	bne.n	80034f8 <mg_http_get_request_len+0x84>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3b02      	subs	r3, #2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4413      	add	r3, r2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b0a      	cmp	r3, #10
 80034f0:	d102      	bne.n	80034f8 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3301      	adds	r3, #1
 80034f6:	e007      	b.n	8003508 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3301      	adds	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d3be      	bcc.n	8003484 <mg_http_get_request_len+0x10>
  }
  return 0;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	f7fc fed8 	bl	80002d0 <strlen>
 8003520:	61b8      	str	r0, [r7, #24]
 8003522:	231e      	movs	r3, #30
 8003524:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e01f      	b.n	800356c <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3302      	adds	r3, #2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	3328      	adds	r3, #40	; 0x28
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	429a      	cmp	r2, r3
 800354c:	d10b      	bne.n	8003566 <mg_http_get_header+0x56>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f003 ff7e 	bl	8007458 <mg_ncasecmp>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <mg_http_get_header+0x56>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	e010      	b.n	8003588 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d208      	bcs.n	8003586 <mg_http_get_header+0x76>
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3302      	adds	r3, #2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	3304      	adds	r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1d2      	bne.n	800352c <mg_http_get_header+0x1c>
  }
  return NULL;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <clen>:

// Get character length. Used to parse method, URI, headers
static size_t clen(const char *s) {
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint8_t c = *(uint8_t *) s;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	73fb      	strb	r3, [r7, #15]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d904      	bls.n	80035ae <clen+0x1e>
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b7d      	cmp	r3, #125	; 0x7d
 80035a8:	d801      	bhi.n	80035ae <clen+0x1e>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e015      	b.n	80035da <clen+0x4a>
  if ((c & 0xe0) == 0xc0) return 2;  // 2-byte UTF8
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80035b4:	2bc0      	cmp	r3, #192	; 0xc0
 80035b6:	d101      	bne.n	80035bc <clen+0x2c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e00e      	b.n	80035da <clen+0x4a>
  if ((c & 0xf0) == 0xe0) return 3;  // 3-byte UTF8
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c2:	2be0      	cmp	r3, #224	; 0xe0
 80035c4:	d101      	bne.n	80035ca <clen+0x3a>
 80035c6:	2303      	movs	r3, #3
 80035c8:	e007      	b.n	80035da <clen+0x4a>
  if ((c & 0xf8) == 0xf0) return 4;  // 4-byte UTF8
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80035d0:	2bf0      	cmp	r3, #240	; 0xf0
 80035d2:	d101      	bne.n	80035d8 <clen+0x48>
 80035d4:	2304      	movs	r3, #4
 80035d6:	e000      	b.n	80035da <clen+0x4a>
  return 0;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
  v->ptr = s;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80035f8:	e007      	b.n	800360a <skiptorn+0x24>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d207      	bcs.n	8003622 <skiptorn+0x3c>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b0a      	cmp	r3, #10
 8003618:	d003      	beq.n	8003622 <skiptorn+0x3c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b0d      	cmp	r3, #13
 8003620:	d1eb      	bne.n	80035fa <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	d208      	bcs.n	800363c <skiptorn+0x56>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b0d      	cmp	r3, #13
 8003630:	d106      	bne.n	8003640 <skiptorn+0x5a>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3301      	adds	r3, #1
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b0a      	cmp	r3, #10
 800363a:	d001      	beq.n	8003640 <skiptorn+0x5a>
 800363c:	2300      	movs	r3, #0
 800363e:	e017      	b.n	8003670 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	d206      	bcs.n	8003656 <skiptorn+0x70>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b0d      	cmp	r3, #13
 800364e:	d102      	bne.n	8003656 <skiptorn+0x70>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3301      	adds	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d205      	bcs.n	800366a <skiptorn+0x84>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	60fa      	str	r2, [r7, #12]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b0a      	cmp	r3, #10
 8003668:	d001      	beq.n	800366e <skiptorn+0x88>
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <skiptorn+0x8a>
  return s;
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
 800368e:	e083      	b.n	8003798 <mg_http_parse_headers+0x11c>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d301      	bcc.n	80036ac <mg_http_parse_headers+0x30>
 80036a8:	2300      	movs	r3, #0
 80036aa:	e07b      	b.n	80037a4 <mg_http_parse_headers+0x128>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b0a      	cmp	r3, #10
 80036b2:	d076      	beq.n	80037a2 <mg_http_parse_headers+0x126>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b0d      	cmp	r3, #13
 80036ba:	d104      	bne.n	80036c6 <mg_http_parse_headers+0x4a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3301      	adds	r3, #1
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b0a      	cmp	r3, #10
 80036c4:	d06d      	beq.n	80037a2 <mg_http_parse_headers+0x126>
    k.ptr = s;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s)) > 0) s += n, k.len += n;
 80036ca:	e007      	b.n	80036dc <mg_http_parse_headers+0x60>
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	4413      	add	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d20a      	bcs.n	80036fa <mg_http_parse_headers+0x7e>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b3a      	cmp	r3, #58	; 0x3a
 80036ea:	d006      	beq.n	80036fa <mg_http_parse_headers+0x7e>
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff ff4f 	bl	8003590 <clen>
 80036f2:	6238      	str	r0, [r7, #32]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e8      	bne.n	80036cc <mg_http_parse_headers+0x50>
    if (k.len == 0) return false;               // Empty name
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <mg_http_parse_headers+0x88>
 8003700:	2300      	movs	r3, #0
 8003702:	e04f      	b.n	80037a4 <mg_http_parse_headers+0x128>
    if (s >= end || *s++ != ':') return false;  // Invalid, not followed by :
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d205      	bcs.n	8003718 <mg_http_parse_headers+0x9c>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	60fa      	str	r2, [r7, #12]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b3a      	cmp	r3, #58	; 0x3a
 8003716:	d004      	beq.n	8003722 <mg_http_parse_headers+0xa6>
 8003718:	2300      	movs	r3, #0
 800371a:	e043      	b.n	80037a4 <mg_http_parse_headers+0x128>
    while (s < end && s[0] == ' ') s++;         // Skip spaces
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d203      	bcs.n	8003732 <mg_http_parse_headers+0xb6>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d0f4      	beq.n	800371c <mg_http_parse_headers+0xa0>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8003732:	f107 0310 	add.w	r3, r7, #16
 8003736:	461a      	mov	r2, r3
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff ff53 	bl	80035e6 <skiptorn>
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <mg_http_parse_headers+0xd6>
 8003748:	2300      	movs	r3, #0
 800374a:	e02b      	b.n	80037a4 <mg_http_parse_headers+0x128>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3b01      	subs	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <mg_http_parse_headers+0xea>
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3b01      	subs	r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b20      	cmp	r3, #32
 8003764:	d0f2      	beq.n	800374c <mg_http_parse_headers+0xd0>
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	461a      	mov	r2, r3
 8003770:	f107 0318 	add.w	r3, r7, #24
 8003774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003778:	e882 0003 	stmia.w	r2, {r0, r1}
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	3308      	adds	r3, #8
 8003786:	f107 0210 	add.w	r2, r7, #16
 800378a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800378e:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	3301      	adds	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	f4ff af77 	bcc.w	8003690 <mg_http_parse_headers+0x14>
  }
  return true;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff fe5a 	bl	8003474 <mg_http_get_request_len>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <mg_http_parse+0x24>
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	e000      	b.n	80037d2 <mg_http_parse+0x26>
 80037d0:	2300      	movs	r3, #0
 80037d2:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 80037d4:	f44f 7208 	mov.w	r2, #544	; 0x220
 80037d8:	2100      	movs	r1, #0
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f00e ff6d 	bl	80126ba <memset>
  if (req_len <= 0) return req_len;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dc01      	bgt.n	80037ea <mg_http_parse+0x3e>
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	e120      	b.n	8003a2c <mg_http_parse+0x280>

  hm->message.ptr = hm->head.ptr = s;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a3a      	ldr	r2, [r7, #32]
 8003812:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  hm->method.ptr = s;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s)) > 0) s += n, hm->method.len += n;
 8003832:	e009      	b.n	8003848 <mg_http_parse+0x9c>
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d20a      	bcs.n	8003866 <mg_http_parse+0xba>
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff fe9d 	bl	8003590 <clen>
 8003856:	61f8      	str	r0, [r7, #28]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ea      	bne.n	8003834 <mg_http_parse+0x88>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800385e:	e002      	b.n	8003866 <mg_http_parse+0xba>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3301      	adds	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	429a      	cmp	r2, r3
 800386c:	d203      	bcs.n	8003876 <mg_http_parse+0xca>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b20      	cmp	r3, #32
 8003874:	d0f4      	beq.n	8003860 <mg_http_parse+0xb4>
  hm->uri.ptr = s;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s)) > 0) s += n, hm->uri.len += n;
 800387c:	e009      	b.n	8003892 <mg_http_parse+0xe6>
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	441a      	add	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	429a      	cmp	r2, r3
 8003898:	d20a      	bcs.n	80038b0 <mg_http_parse+0x104>
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7ff fe78 	bl	8003590 <clen>
 80038a0:	61f8      	str	r0, [r7, #28]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ea      	bne.n	800387e <mg_http_parse+0xd2>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80038a8:	e002      	b.n	80038b0 <mg_http_parse+0x104>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3301      	adds	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d203      	bcs.n	80038c0 <mg_http_parse+0x114>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d0f4      	beq.n	80038aa <mg_http_parse+0xfe>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3318      	adds	r3, #24
 80038c4:	461a      	mov	r2, r3
 80038c6:	6a39      	ldr	r1, [r7, #32]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fe8c 	bl	80035e6 <skiptorn>
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <mg_http_parse+0x12e>
 80038d6:	2300      	movs	r3, #0
 80038d8:	e0a8      	b.n	8003a2c <mg_http_parse+0x280>

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <mg_http_parse+0x13e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <mg_http_parse+0x144>
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e09d      	b.n	8003a2c <mg_http_parse+0x280>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6898      	ldr	r0, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	461a      	mov	r2, r3
 80038fa:	213f      	movs	r1, #63	; 0x3f
 80038fc:	f7fc fc98 	bl	8000230 <memchr>
 8003900:	61b8      	str	r0, [r7, #24]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <mg_http_parse+0x188>
    hm->query.ptr = qs + 1;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	441a      	add	r2, r3
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3301      	adds	r3, #1
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f103 0220 	add.w	r2, r3, #32
 800393a:	231e      	movs	r3, #30
 800393c:	6a39      	ldr	r1, [r7, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff fe9c 	bl	800367c <mg_http_parse_headers>
 8003944:	4603      	mov	r3, r0
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <mg_http_parse+0x1aa>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e06a      	b.n	8003a2c <mg_http_parse+0x280>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8003956:	4937      	ldr	r1, [pc, #220]	; (8003a34 <mg_http_parse+0x288>)
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff fdd9 	bl	8003510 <mg_http_get_header>
 800395e:	6178      	str	r0, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <mg_http_parse+0x1ec>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 7201 	add.w	r2, r3, #516	; 0x204
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003972:	f7ff fc31 	bl	80031d8 <mg_to_size_t>
 8003976:	4603      	mov	r3, r0
 8003978:	f083 0301 	eor.w	r3, r3, #1
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <mg_http_parse+0x1dc>
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e051      	b.n	8003a2c <mg_http_parse+0x280>
    hm->message.len = (size_t) req_len + hm->body.len;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2205      	movs	r2, #5
 800399e:	4926      	ldr	r1, [pc, #152]	; (8003a38 <mg_http_parse+0x28c>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 fd59 	bl	8007458 <mg_ncasecmp>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	613b      	str	r3, [r7, #16]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d11a      	bne.n	80039f6 <mg_http_parse+0x24a>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d117      	bne.n	80039f6 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	491c      	ldr	r1, [pc, #112]	; (8003a3c <mg_http_parse+0x290>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 fd96 	bl	80074fc <mg_vcasecmp>
 80039d0:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00f      	beq.n	80039f6 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4919      	ldr	r1, [pc, #100]	; (8003a40 <mg_http_parse+0x294>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fd8e 	bl	80074fc <mg_vcasecmp>
 80039e0:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <mg_http_parse+0x24a>
    hm->body.len = 0;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d113      	bne.n	8003a2a <mg_http_parse+0x27e>
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <mg_http_parse+0x27e>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	490d      	ldr	r1, [pc, #52]	; (8003a44 <mg_http_parse+0x298>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 fd74 	bl	80074fc <mg_vcasecmp>
 8003a14:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <mg_http_parse+0x27e>
    hm->body.len = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08013714 	.word	0x08013714
 8003a38:	08013724 	.word	0x08013724
 8003a3c:	0801372c 	.word	0x0801372c
 8003a40:	08013730 	.word	0x08013730
 8003a44:	08013738 	.word	0x08013738

08003a48 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b64      	subs	r3, #100	; 0x64
 8003a54:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	f200 8469 	bhi.w	8004330 <mg_http_status_code_str+0x8e8>
 8003a5e:	a101      	add	r1, pc, #4	; (adr r1, 8003a64 <mg_http_status_code_str+0x1c>)
 8003a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a64:	08004235 	.word	0x08004235
 8003a68:	08004239 	.word	0x08004239
 8003a6c:	0800423d 	.word	0x0800423d
 8003a70:	08004331 	.word	0x08004331
 8003a74:	08004331 	.word	0x08004331
 8003a78:	08004331 	.word	0x08004331
 8003a7c:	08004331 	.word	0x08004331
 8003a80:	08004331 	.word	0x08004331
 8003a84:	08004331 	.word	0x08004331
 8003a88:	08004331 	.word	0x08004331
 8003a8c:	08004331 	.word	0x08004331
 8003a90:	08004331 	.word	0x08004331
 8003a94:	08004331 	.word	0x08004331
 8003a98:	08004331 	.word	0x08004331
 8003a9c:	08004331 	.word	0x08004331
 8003aa0:	08004331 	.word	0x08004331
 8003aa4:	08004331 	.word	0x08004331
 8003aa8:	08004331 	.word	0x08004331
 8003aac:	08004331 	.word	0x08004331
 8003ab0:	08004331 	.word	0x08004331
 8003ab4:	08004331 	.word	0x08004331
 8003ab8:	08004331 	.word	0x08004331
 8003abc:	08004331 	.word	0x08004331
 8003ac0:	08004331 	.word	0x08004331
 8003ac4:	08004331 	.word	0x08004331
 8003ac8:	08004331 	.word	0x08004331
 8003acc:	08004331 	.word	0x08004331
 8003ad0:	08004331 	.word	0x08004331
 8003ad4:	08004331 	.word	0x08004331
 8003ad8:	08004331 	.word	0x08004331
 8003adc:	08004331 	.word	0x08004331
 8003ae0:	08004331 	.word	0x08004331
 8003ae4:	08004331 	.word	0x08004331
 8003ae8:	08004331 	.word	0x08004331
 8003aec:	08004331 	.word	0x08004331
 8003af0:	08004331 	.word	0x08004331
 8003af4:	08004331 	.word	0x08004331
 8003af8:	08004331 	.word	0x08004331
 8003afc:	08004331 	.word	0x08004331
 8003b00:	08004331 	.word	0x08004331
 8003b04:	08004331 	.word	0x08004331
 8003b08:	08004331 	.word	0x08004331
 8003b0c:	08004331 	.word	0x08004331
 8003b10:	08004331 	.word	0x08004331
 8003b14:	08004331 	.word	0x08004331
 8003b18:	08004331 	.word	0x08004331
 8003b1c:	08004331 	.word	0x08004331
 8003b20:	08004331 	.word	0x08004331
 8003b24:	08004331 	.word	0x08004331
 8003b28:	08004331 	.word	0x08004331
 8003b2c:	08004331 	.word	0x08004331
 8003b30:	08004331 	.word	0x08004331
 8003b34:	08004331 	.word	0x08004331
 8003b38:	08004331 	.word	0x08004331
 8003b3c:	08004331 	.word	0x08004331
 8003b40:	08004331 	.word	0x08004331
 8003b44:	08004331 	.word	0x08004331
 8003b48:	08004331 	.word	0x08004331
 8003b4c:	08004331 	.word	0x08004331
 8003b50:	08004331 	.word	0x08004331
 8003b54:	08004331 	.word	0x08004331
 8003b58:	08004331 	.word	0x08004331
 8003b5c:	08004331 	.word	0x08004331
 8003b60:	08004331 	.word	0x08004331
 8003b64:	08004331 	.word	0x08004331
 8003b68:	08004331 	.word	0x08004331
 8003b6c:	08004331 	.word	0x08004331
 8003b70:	08004331 	.word	0x08004331
 8003b74:	08004331 	.word	0x08004331
 8003b78:	08004331 	.word	0x08004331
 8003b7c:	08004331 	.word	0x08004331
 8003b80:	08004331 	.word	0x08004331
 8003b84:	08004331 	.word	0x08004331
 8003b88:	08004331 	.word	0x08004331
 8003b8c:	08004331 	.word	0x08004331
 8003b90:	08004331 	.word	0x08004331
 8003b94:	08004331 	.word	0x08004331
 8003b98:	08004331 	.word	0x08004331
 8003b9c:	08004331 	.word	0x08004331
 8003ba0:	08004331 	.word	0x08004331
 8003ba4:	08004331 	.word	0x08004331
 8003ba8:	08004331 	.word	0x08004331
 8003bac:	08004331 	.word	0x08004331
 8003bb0:	08004331 	.word	0x08004331
 8003bb4:	08004331 	.word	0x08004331
 8003bb8:	08004331 	.word	0x08004331
 8003bbc:	08004331 	.word	0x08004331
 8003bc0:	08004331 	.word	0x08004331
 8003bc4:	08004331 	.word	0x08004331
 8003bc8:	08004331 	.word	0x08004331
 8003bcc:	08004331 	.word	0x08004331
 8003bd0:	08004331 	.word	0x08004331
 8003bd4:	08004331 	.word	0x08004331
 8003bd8:	08004331 	.word	0x08004331
 8003bdc:	08004331 	.word	0x08004331
 8003be0:	08004331 	.word	0x08004331
 8003be4:	08004331 	.word	0x08004331
 8003be8:	08004331 	.word	0x08004331
 8003bec:	08004331 	.word	0x08004331
 8003bf0:	08004331 	.word	0x08004331
 8003bf4:	08004241 	.word	0x08004241
 8003bf8:	08004245 	.word	0x08004245
 8003bfc:	08004249 	.word	0x08004249
 8003c00:	0800424d 	.word	0x0800424d
 8003c04:	08004251 	.word	0x08004251
 8003c08:	08004255 	.word	0x08004255
 8003c0c:	08004259 	.word	0x08004259
 8003c10:	0800425d 	.word	0x0800425d
 8003c14:	08004261 	.word	0x08004261
 8003c18:	08004331 	.word	0x08004331
 8003c1c:	08004331 	.word	0x08004331
 8003c20:	08004331 	.word	0x08004331
 8003c24:	08004331 	.word	0x08004331
 8003c28:	08004331 	.word	0x08004331
 8003c2c:	08004331 	.word	0x08004331
 8003c30:	08004331 	.word	0x08004331
 8003c34:	08004331 	.word	0x08004331
 8003c38:	08004331 	.word	0x08004331
 8003c3c:	08004331 	.word	0x08004331
 8003c40:	08004331 	.word	0x08004331
 8003c44:	08004331 	.word	0x08004331
 8003c48:	08004331 	.word	0x08004331
 8003c4c:	08004331 	.word	0x08004331
 8003c50:	08004331 	.word	0x08004331
 8003c54:	08004331 	.word	0x08004331
 8003c58:	08004331 	.word	0x08004331
 8003c5c:	08004265 	.word	0x08004265
 8003c60:	08004331 	.word	0x08004331
 8003c64:	08004331 	.word	0x08004331
 8003c68:	08004331 	.word	0x08004331
 8003c6c:	08004331 	.word	0x08004331
 8003c70:	08004331 	.word	0x08004331
 8003c74:	08004331 	.word	0x08004331
 8003c78:	08004331 	.word	0x08004331
 8003c7c:	08004331 	.word	0x08004331
 8003c80:	08004331 	.word	0x08004331
 8003c84:	08004331 	.word	0x08004331
 8003c88:	08004331 	.word	0x08004331
 8003c8c:	08004331 	.word	0x08004331
 8003c90:	08004331 	.word	0x08004331
 8003c94:	08004331 	.word	0x08004331
 8003c98:	08004331 	.word	0x08004331
 8003c9c:	08004331 	.word	0x08004331
 8003ca0:	08004331 	.word	0x08004331
 8003ca4:	08004331 	.word	0x08004331
 8003ca8:	08004331 	.word	0x08004331
 8003cac:	08004331 	.word	0x08004331
 8003cb0:	08004331 	.word	0x08004331
 8003cb4:	08004331 	.word	0x08004331
 8003cb8:	08004331 	.word	0x08004331
 8003cbc:	08004331 	.word	0x08004331
 8003cc0:	08004331 	.word	0x08004331
 8003cc4:	08004331 	.word	0x08004331
 8003cc8:	08004331 	.word	0x08004331
 8003ccc:	08004331 	.word	0x08004331
 8003cd0:	08004331 	.word	0x08004331
 8003cd4:	08004331 	.word	0x08004331
 8003cd8:	08004331 	.word	0x08004331
 8003cdc:	08004331 	.word	0x08004331
 8003ce0:	08004331 	.word	0x08004331
 8003ce4:	08004331 	.word	0x08004331
 8003ce8:	08004331 	.word	0x08004331
 8003cec:	08004331 	.word	0x08004331
 8003cf0:	08004331 	.word	0x08004331
 8003cf4:	08004331 	.word	0x08004331
 8003cf8:	08004331 	.word	0x08004331
 8003cfc:	08004331 	.word	0x08004331
 8003d00:	08004331 	.word	0x08004331
 8003d04:	08004331 	.word	0x08004331
 8003d08:	08004331 	.word	0x08004331
 8003d0c:	08004331 	.word	0x08004331
 8003d10:	08004331 	.word	0x08004331
 8003d14:	08004331 	.word	0x08004331
 8003d18:	08004331 	.word	0x08004331
 8003d1c:	08004331 	.word	0x08004331
 8003d20:	08004331 	.word	0x08004331
 8003d24:	08004331 	.word	0x08004331
 8003d28:	08004331 	.word	0x08004331
 8003d2c:	08004331 	.word	0x08004331
 8003d30:	08004331 	.word	0x08004331
 8003d34:	08004331 	.word	0x08004331
 8003d38:	08004331 	.word	0x08004331
 8003d3c:	08004331 	.word	0x08004331
 8003d40:	08004331 	.word	0x08004331
 8003d44:	08004331 	.word	0x08004331
 8003d48:	08004331 	.word	0x08004331
 8003d4c:	08004331 	.word	0x08004331
 8003d50:	08004331 	.word	0x08004331
 8003d54:	08004331 	.word	0x08004331
 8003d58:	08004331 	.word	0x08004331
 8003d5c:	08004331 	.word	0x08004331
 8003d60:	08004331 	.word	0x08004331
 8003d64:	08004331 	.word	0x08004331
 8003d68:	08004331 	.word	0x08004331
 8003d6c:	08004331 	.word	0x08004331
 8003d70:	08004331 	.word	0x08004331
 8003d74:	08004331 	.word	0x08004331
 8003d78:	08004331 	.word	0x08004331
 8003d7c:	08004331 	.word	0x08004331
 8003d80:	08004331 	.word	0x08004331
 8003d84:	08004269 	.word	0x08004269
 8003d88:	0800426d 	.word	0x0800426d
 8003d8c:	08004271 	.word	0x08004271
 8003d90:	08004275 	.word	0x08004275
 8003d94:	08004279 	.word	0x08004279
 8003d98:	0800427d 	.word	0x0800427d
 8003d9c:	08004331 	.word	0x08004331
 8003da0:	08004281 	.word	0x08004281
 8003da4:	08004285 	.word	0x08004285
 8003da8:	08004331 	.word	0x08004331
 8003dac:	08004331 	.word	0x08004331
 8003db0:	08004331 	.word	0x08004331
 8003db4:	08004331 	.word	0x08004331
 8003db8:	08004331 	.word	0x08004331
 8003dbc:	08004331 	.word	0x08004331
 8003dc0:	08004331 	.word	0x08004331
 8003dc4:	08004331 	.word	0x08004331
 8003dc8:	08004331 	.word	0x08004331
 8003dcc:	08004331 	.word	0x08004331
 8003dd0:	08004331 	.word	0x08004331
 8003dd4:	08004331 	.word	0x08004331
 8003dd8:	08004331 	.word	0x08004331
 8003ddc:	08004331 	.word	0x08004331
 8003de0:	08004331 	.word	0x08004331
 8003de4:	08004331 	.word	0x08004331
 8003de8:	08004331 	.word	0x08004331
 8003dec:	08004331 	.word	0x08004331
 8003df0:	08004331 	.word	0x08004331
 8003df4:	08004331 	.word	0x08004331
 8003df8:	08004331 	.word	0x08004331
 8003dfc:	08004331 	.word	0x08004331
 8003e00:	08004331 	.word	0x08004331
 8003e04:	08004331 	.word	0x08004331
 8003e08:	08004331 	.word	0x08004331
 8003e0c:	08004331 	.word	0x08004331
 8003e10:	08004331 	.word	0x08004331
 8003e14:	08004331 	.word	0x08004331
 8003e18:	08004331 	.word	0x08004331
 8003e1c:	08004331 	.word	0x08004331
 8003e20:	08004331 	.word	0x08004331
 8003e24:	08004331 	.word	0x08004331
 8003e28:	08004331 	.word	0x08004331
 8003e2c:	08004331 	.word	0x08004331
 8003e30:	08004331 	.word	0x08004331
 8003e34:	08004331 	.word	0x08004331
 8003e38:	08004331 	.word	0x08004331
 8003e3c:	08004331 	.word	0x08004331
 8003e40:	08004331 	.word	0x08004331
 8003e44:	08004331 	.word	0x08004331
 8003e48:	08004331 	.word	0x08004331
 8003e4c:	08004331 	.word	0x08004331
 8003e50:	08004331 	.word	0x08004331
 8003e54:	08004331 	.word	0x08004331
 8003e58:	08004331 	.word	0x08004331
 8003e5c:	08004331 	.word	0x08004331
 8003e60:	08004331 	.word	0x08004331
 8003e64:	08004331 	.word	0x08004331
 8003e68:	08004331 	.word	0x08004331
 8003e6c:	08004331 	.word	0x08004331
 8003e70:	08004331 	.word	0x08004331
 8003e74:	08004331 	.word	0x08004331
 8003e78:	08004331 	.word	0x08004331
 8003e7c:	08004331 	.word	0x08004331
 8003e80:	08004331 	.word	0x08004331
 8003e84:	08004331 	.word	0x08004331
 8003e88:	08004331 	.word	0x08004331
 8003e8c:	08004331 	.word	0x08004331
 8003e90:	08004331 	.word	0x08004331
 8003e94:	08004331 	.word	0x08004331
 8003e98:	08004331 	.word	0x08004331
 8003e9c:	08004331 	.word	0x08004331
 8003ea0:	08004331 	.word	0x08004331
 8003ea4:	08004331 	.word	0x08004331
 8003ea8:	08004331 	.word	0x08004331
 8003eac:	08004331 	.word	0x08004331
 8003eb0:	08004331 	.word	0x08004331
 8003eb4:	08004331 	.word	0x08004331
 8003eb8:	08004331 	.word	0x08004331
 8003ebc:	08004331 	.word	0x08004331
 8003ec0:	08004331 	.word	0x08004331
 8003ec4:	08004331 	.word	0x08004331
 8003ec8:	08004331 	.word	0x08004331
 8003ecc:	08004331 	.word	0x08004331
 8003ed0:	08004331 	.word	0x08004331
 8003ed4:	08004331 	.word	0x08004331
 8003ed8:	08004331 	.word	0x08004331
 8003edc:	08004331 	.word	0x08004331
 8003ee0:	08004331 	.word	0x08004331
 8003ee4:	08004331 	.word	0x08004331
 8003ee8:	08004331 	.word	0x08004331
 8003eec:	08004331 	.word	0x08004331
 8003ef0:	08004331 	.word	0x08004331
 8003ef4:	08004331 	.word	0x08004331
 8003ef8:	08004331 	.word	0x08004331
 8003efc:	08004331 	.word	0x08004331
 8003f00:	08004331 	.word	0x08004331
 8003f04:	08004331 	.word	0x08004331
 8003f08:	08004331 	.word	0x08004331
 8003f0c:	08004331 	.word	0x08004331
 8003f10:	08004331 	.word	0x08004331
 8003f14:	08004289 	.word	0x08004289
 8003f18:	0800428d 	.word	0x0800428d
 8003f1c:	08004291 	.word	0x08004291
 8003f20:	08004295 	.word	0x08004295
 8003f24:	08004299 	.word	0x08004299
 8003f28:	0800429d 	.word	0x0800429d
 8003f2c:	080042a1 	.word	0x080042a1
 8003f30:	080042a5 	.word	0x080042a5
 8003f34:	080042a9 	.word	0x080042a9
 8003f38:	080042ad 	.word	0x080042ad
 8003f3c:	080042b1 	.word	0x080042b1
 8003f40:	080042b5 	.word	0x080042b5
 8003f44:	080042b9 	.word	0x080042b9
 8003f48:	080042bd 	.word	0x080042bd
 8003f4c:	080042c1 	.word	0x080042c1
 8003f50:	080042c5 	.word	0x080042c5
 8003f54:	080042c9 	.word	0x080042c9
 8003f58:	080042cd 	.word	0x080042cd
 8003f5c:	080042d1 	.word	0x080042d1
 8003f60:	08004331 	.word	0x08004331
 8003f64:	08004331 	.word	0x08004331
 8003f68:	080042d5 	.word	0x080042d5
 8003f6c:	080042d9 	.word	0x080042d9
 8003f70:	080042dd 	.word	0x080042dd
 8003f74:	080042e1 	.word	0x080042e1
 8003f78:	08004331 	.word	0x08004331
 8003f7c:	080042e5 	.word	0x080042e5
 8003f80:	08004331 	.word	0x08004331
 8003f84:	080042e9 	.word	0x080042e9
 8003f88:	080042ed 	.word	0x080042ed
 8003f8c:	08004331 	.word	0x08004331
 8003f90:	080042f1 	.word	0x080042f1
 8003f94:	08004331 	.word	0x08004331
 8003f98:	08004331 	.word	0x08004331
 8003f9c:	08004331 	.word	0x08004331
 8003fa0:	08004331 	.word	0x08004331
 8003fa4:	08004331 	.word	0x08004331
 8003fa8:	08004331 	.word	0x08004331
 8003fac:	08004331 	.word	0x08004331
 8003fb0:	08004331 	.word	0x08004331
 8003fb4:	08004331 	.word	0x08004331
 8003fb8:	08004331 	.word	0x08004331
 8003fbc:	08004331 	.word	0x08004331
 8003fc0:	08004331 	.word	0x08004331
 8003fc4:	080042f5 	.word	0x080042f5
 8003fc8:	08004331 	.word	0x08004331
 8003fcc:	08004331 	.word	0x08004331
 8003fd0:	08004331 	.word	0x08004331
 8003fd4:	08004331 	.word	0x08004331
 8003fd8:	08004331 	.word	0x08004331
 8003fdc:	08004331 	.word	0x08004331
 8003fe0:	080042f9 	.word	0x080042f9
 8003fe4:	08004331 	.word	0x08004331
 8003fe8:	08004331 	.word	0x08004331
 8003fec:	08004331 	.word	0x08004331
 8003ff0:	08004331 	.word	0x08004331
 8003ff4:	08004331 	.word	0x08004331
 8003ff8:	08004331 	.word	0x08004331
 8003ffc:	08004331 	.word	0x08004331
 8004000:	08004331 	.word	0x08004331
 8004004:	08004331 	.word	0x08004331
 8004008:	08004331 	.word	0x08004331
 800400c:	08004331 	.word	0x08004331
 8004010:	08004331 	.word	0x08004331
 8004014:	08004331 	.word	0x08004331
 8004018:	08004331 	.word	0x08004331
 800401c:	08004331 	.word	0x08004331
 8004020:	08004331 	.word	0x08004331
 8004024:	08004331 	.word	0x08004331
 8004028:	08004331 	.word	0x08004331
 800402c:	08004331 	.word	0x08004331
 8004030:	08004331 	.word	0x08004331
 8004034:	08004331 	.word	0x08004331
 8004038:	08004331 	.word	0x08004331
 800403c:	08004331 	.word	0x08004331
 8004040:	08004331 	.word	0x08004331
 8004044:	08004331 	.word	0x08004331
 8004048:	08004331 	.word	0x08004331
 800404c:	08004331 	.word	0x08004331
 8004050:	08004331 	.word	0x08004331
 8004054:	08004331 	.word	0x08004331
 8004058:	08004331 	.word	0x08004331
 800405c:	08004331 	.word	0x08004331
 8004060:	08004331 	.word	0x08004331
 8004064:	08004331 	.word	0x08004331
 8004068:	08004331 	.word	0x08004331
 800406c:	08004331 	.word	0x08004331
 8004070:	08004331 	.word	0x08004331
 8004074:	08004331 	.word	0x08004331
 8004078:	08004331 	.word	0x08004331
 800407c:	08004331 	.word	0x08004331
 8004080:	08004331 	.word	0x08004331
 8004084:	08004331 	.word	0x08004331
 8004088:	08004331 	.word	0x08004331
 800408c:	08004331 	.word	0x08004331
 8004090:	08004331 	.word	0x08004331
 8004094:	08004331 	.word	0x08004331
 8004098:	08004331 	.word	0x08004331
 800409c:	08004331 	.word	0x08004331
 80040a0:	080042fd 	.word	0x080042fd
 80040a4:	08004301 	.word	0x08004301
 80040a8:	08004305 	.word	0x08004305
 80040ac:	08004309 	.word	0x08004309
 80040b0:	0800430d 	.word	0x0800430d
 80040b4:	08004311 	.word	0x08004311
 80040b8:	08004315 	.word	0x08004315
 80040bc:	08004319 	.word	0x08004319
 80040c0:	0800431d 	.word	0x0800431d
 80040c4:	08004321 	.word	0x08004321
 80040c8:	08004331 	.word	0x08004331
 80040cc:	08004325 	.word	0x08004325
 80040d0:	08004329 	.word	0x08004329
 80040d4:	08004331 	.word	0x08004331
 80040d8:	08004331 	.word	0x08004331
 80040dc:	08004331 	.word	0x08004331
 80040e0:	08004331 	.word	0x08004331
 80040e4:	08004331 	.word	0x08004331
 80040e8:	08004331 	.word	0x08004331
 80040ec:	08004331 	.word	0x08004331
 80040f0:	08004331 	.word	0x08004331
 80040f4:	08004331 	.word	0x08004331
 80040f8:	08004331 	.word	0x08004331
 80040fc:	08004331 	.word	0x08004331
 8004100:	08004331 	.word	0x08004331
 8004104:	08004331 	.word	0x08004331
 8004108:	08004331 	.word	0x08004331
 800410c:	08004331 	.word	0x08004331
 8004110:	08004331 	.word	0x08004331
 8004114:	08004331 	.word	0x08004331
 8004118:	08004331 	.word	0x08004331
 800411c:	08004331 	.word	0x08004331
 8004120:	08004331 	.word	0x08004331
 8004124:	08004331 	.word	0x08004331
 8004128:	08004331 	.word	0x08004331
 800412c:	08004331 	.word	0x08004331
 8004130:	08004331 	.word	0x08004331
 8004134:	08004331 	.word	0x08004331
 8004138:	08004331 	.word	0x08004331
 800413c:	08004331 	.word	0x08004331
 8004140:	08004331 	.word	0x08004331
 8004144:	08004331 	.word	0x08004331
 8004148:	08004331 	.word	0x08004331
 800414c:	08004331 	.word	0x08004331
 8004150:	08004331 	.word	0x08004331
 8004154:	08004331 	.word	0x08004331
 8004158:	08004331 	.word	0x08004331
 800415c:	08004331 	.word	0x08004331
 8004160:	08004331 	.word	0x08004331
 8004164:	08004331 	.word	0x08004331
 8004168:	08004331 	.word	0x08004331
 800416c:	08004331 	.word	0x08004331
 8004170:	08004331 	.word	0x08004331
 8004174:	08004331 	.word	0x08004331
 8004178:	08004331 	.word	0x08004331
 800417c:	08004331 	.word	0x08004331
 8004180:	08004331 	.word	0x08004331
 8004184:	08004331 	.word	0x08004331
 8004188:	08004331 	.word	0x08004331
 800418c:	08004331 	.word	0x08004331
 8004190:	08004331 	.word	0x08004331
 8004194:	08004331 	.word	0x08004331
 8004198:	08004331 	.word	0x08004331
 800419c:	08004331 	.word	0x08004331
 80041a0:	08004331 	.word	0x08004331
 80041a4:	08004331 	.word	0x08004331
 80041a8:	08004331 	.word	0x08004331
 80041ac:	08004331 	.word	0x08004331
 80041b0:	08004331 	.word	0x08004331
 80041b4:	08004331 	.word	0x08004331
 80041b8:	08004331 	.word	0x08004331
 80041bc:	08004331 	.word	0x08004331
 80041c0:	08004331 	.word	0x08004331
 80041c4:	08004331 	.word	0x08004331
 80041c8:	08004331 	.word	0x08004331
 80041cc:	08004331 	.word	0x08004331
 80041d0:	08004331 	.word	0x08004331
 80041d4:	08004331 	.word	0x08004331
 80041d8:	08004331 	.word	0x08004331
 80041dc:	08004331 	.word	0x08004331
 80041e0:	08004331 	.word	0x08004331
 80041e4:	08004331 	.word	0x08004331
 80041e8:	08004331 	.word	0x08004331
 80041ec:	08004331 	.word	0x08004331
 80041f0:	08004331 	.word	0x08004331
 80041f4:	08004331 	.word	0x08004331
 80041f8:	08004331 	.word	0x08004331
 80041fc:	08004331 	.word	0x08004331
 8004200:	08004331 	.word	0x08004331
 8004204:	08004331 	.word	0x08004331
 8004208:	08004331 	.word	0x08004331
 800420c:	08004331 	.word	0x08004331
 8004210:	08004331 	.word	0x08004331
 8004214:	08004331 	.word	0x08004331
 8004218:	08004331 	.word	0x08004331
 800421c:	08004331 	.word	0x08004331
 8004220:	08004331 	.word	0x08004331
 8004224:	08004331 	.word	0x08004331
 8004228:	08004331 	.word	0x08004331
 800422c:	08004331 	.word	0x08004331
 8004230:	0800432d 	.word	0x0800432d
    case 100: return "Continue";
 8004234:	4b42      	ldr	r3, [pc, #264]	; (8004340 <mg_http_status_code_str+0x8f8>)
 8004236:	e07c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8004238:	4b42      	ldr	r3, [pc, #264]	; (8004344 <mg_http_status_code_str+0x8fc>)
 800423a:	e07a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 800423c:	4b42      	ldr	r3, [pc, #264]	; (8004348 <mg_http_status_code_str+0x900>)
 800423e:	e078      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8004240:	4b42      	ldr	r3, [pc, #264]	; (800434c <mg_http_status_code_str+0x904>)
 8004242:	e076      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8004244:	4b42      	ldr	r3, [pc, #264]	; (8004350 <mg_http_status_code_str+0x908>)
 8004246:	e074      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8004248:	4b42      	ldr	r3, [pc, #264]	; (8004354 <mg_http_status_code_str+0x90c>)
 800424a:	e072      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 800424c:	4b42      	ldr	r3, [pc, #264]	; (8004358 <mg_http_status_code_str+0x910>)
 800424e:	e070      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8004250:	4b42      	ldr	r3, [pc, #264]	; (800435c <mg_http_status_code_str+0x914>)
 8004252:	e06e      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8004254:	4b42      	ldr	r3, [pc, #264]	; (8004360 <mg_http_status_code_str+0x918>)
 8004256:	e06c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8004258:	4b42      	ldr	r3, [pc, #264]	; (8004364 <mg_http_status_code_str+0x91c>)
 800425a:	e06a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 800425c:	4b42      	ldr	r3, [pc, #264]	; (8004368 <mg_http_status_code_str+0x920>)
 800425e:	e068      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8004260:	4b42      	ldr	r3, [pc, #264]	; (800436c <mg_http_status_code_str+0x924>)
 8004262:	e066      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8004264:	4b42      	ldr	r3, [pc, #264]	; (8004370 <mg_http_status_code_str+0x928>)
 8004266:	e064      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <mg_http_status_code_str+0x92c>)
 800426a:	e062      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 800426c:	4b42      	ldr	r3, [pc, #264]	; (8004378 <mg_http_status_code_str+0x930>)
 800426e:	e060      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8004270:	4b42      	ldr	r3, [pc, #264]	; (800437c <mg_http_status_code_str+0x934>)
 8004272:	e05e      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8004274:	4b42      	ldr	r3, [pc, #264]	; (8004380 <mg_http_status_code_str+0x938>)
 8004276:	e05c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <mg_http_status_code_str+0x93c>)
 800427a:	e05a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 800427c:	4b42      	ldr	r3, [pc, #264]	; (8004388 <mg_http_status_code_str+0x940>)
 800427e:	e058      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8004280:	4b42      	ldr	r3, [pc, #264]	; (800438c <mg_http_status_code_str+0x944>)
 8004282:	e056      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8004284:	4b42      	ldr	r3, [pc, #264]	; (8004390 <mg_http_status_code_str+0x948>)
 8004286:	e054      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8004288:	4b42      	ldr	r3, [pc, #264]	; (8004394 <mg_http_status_code_str+0x94c>)
 800428a:	e052      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 800428c:	4b42      	ldr	r3, [pc, #264]	; (8004398 <mg_http_status_code_str+0x950>)
 800428e:	e050      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8004290:	4b42      	ldr	r3, [pc, #264]	; (800439c <mg_http_status_code_str+0x954>)
 8004292:	e04e      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8004294:	4b42      	ldr	r3, [pc, #264]	; (80043a0 <mg_http_status_code_str+0x958>)
 8004296:	e04c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <mg_http_status_code_str+0x95c>)
 800429a:	e04a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 800429c:	4b42      	ldr	r3, [pc, #264]	; (80043a8 <mg_http_status_code_str+0x960>)
 800429e:	e048      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 80042a0:	4b42      	ldr	r3, [pc, #264]	; (80043ac <mg_http_status_code_str+0x964>)
 80042a2:	e046      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 80042a4:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <mg_http_status_code_str+0x968>)
 80042a6:	e044      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <mg_http_status_code_str+0x96c>)
 80042aa:	e042      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 80042ac:	4b42      	ldr	r3, [pc, #264]	; (80043b8 <mg_http_status_code_str+0x970>)
 80042ae:	e040      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 80042b0:	4b42      	ldr	r3, [pc, #264]	; (80043bc <mg_http_status_code_str+0x974>)
 80042b2:	e03e      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 80042b4:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <mg_http_status_code_str+0x978>)
 80042b6:	e03c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 80042b8:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <mg_http_status_code_str+0x97c>)
 80042ba:	e03a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 80042bc:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <mg_http_status_code_str+0x980>)
 80042be:	e038      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 80042c0:	4b42      	ldr	r3, [pc, #264]	; (80043cc <mg_http_status_code_str+0x984>)
 80042c2:	e036      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 80042c4:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <mg_http_status_code_str+0x988>)
 80042c6:	e034      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 80042c8:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <mg_http_status_code_str+0x98c>)
 80042ca:	e032      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <mg_http_status_code_str+0x990>)
 80042ce:	e030      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 80042d0:	4b42      	ldr	r3, [pc, #264]	; (80043dc <mg_http_status_code_str+0x994>)
 80042d2:	e02e      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <mg_http_status_code_str+0x998>)
 80042d6:	e02c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 80042d8:	4b42      	ldr	r3, [pc, #264]	; (80043e4 <mg_http_status_code_str+0x99c>)
 80042da:	e02a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 80042dc:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <mg_http_status_code_str+0x9a0>)
 80042de:	e028      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 80042e0:	4b42      	ldr	r3, [pc, #264]	; (80043ec <mg_http_status_code_str+0x9a4>)
 80042e2:	e026      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 80042e4:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <mg_http_status_code_str+0x9a8>)
 80042e6:	e024      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 80042e8:	4b42      	ldr	r3, [pc, #264]	; (80043f4 <mg_http_status_code_str+0x9ac>)
 80042ea:	e022      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80042ec:	4b42      	ldr	r3, [pc, #264]	; (80043f8 <mg_http_status_code_str+0x9b0>)
 80042ee:	e020      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80042f0:	4b42      	ldr	r3, [pc, #264]	; (80043fc <mg_http_status_code_str+0x9b4>)
 80042f2:	e01e      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80042f4:	4b42      	ldr	r3, [pc, #264]	; (8004400 <mg_http_status_code_str+0x9b8>)
 80042f6:	e01c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <mg_http_status_code_str+0x9bc>)
 80042fa:	e01a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <mg_http_status_code_str+0x9c0>)
 80042fe:	e018      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8004300:	4b42      	ldr	r3, [pc, #264]	; (800440c <mg_http_status_code_str+0x9c4>)
 8004302:	e016      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <mg_http_status_code_str+0x9c8>)
 8004306:	e014      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8004308:	4b42      	ldr	r3, [pc, #264]	; (8004414 <mg_http_status_code_str+0x9cc>)
 800430a:	e012      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 800430c:	4b42      	ldr	r3, [pc, #264]	; (8004418 <mg_http_status_code_str+0x9d0>)
 800430e:	e010      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8004310:	4b42      	ldr	r3, [pc, #264]	; (800441c <mg_http_status_code_str+0x9d4>)
 8004312:	e00e      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <mg_http_status_code_str+0x9d8>)
 8004316:	e00c      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8004318:	4b42      	ldr	r3, [pc, #264]	; (8004424 <mg_http_status_code_str+0x9dc>)
 800431a:	e00a      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <mg_http_status_code_str+0x9e0>)
 800431e:	e008      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8004320:	4b42      	ldr	r3, [pc, #264]	; (800442c <mg_http_status_code_str+0x9e4>)
 8004322:	e006      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8004324:	4b42      	ldr	r3, [pc, #264]	; (8004430 <mg_http_status_code_str+0x9e8>)
 8004326:	e004      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8004328:	4b42      	ldr	r3, [pc, #264]	; (8004434 <mg_http_status_code_str+0x9ec>)
 800432a:	e002      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <mg_http_status_code_str+0x9f0>)
 800432e:	e000      	b.n	8004332 <mg_http_status_code_str+0x8ea>
    default: return "";
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <mg_http_status_code_str+0x9f4>)
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	08013758 	.word	0x08013758
 8004344:	08013764 	.word	0x08013764
 8004348:	08013778 	.word	0x08013778
 800434c:	08013784 	.word	0x08013784
 8004350:	08013788 	.word	0x08013788
 8004354:	08013790 	.word	0x08013790
 8004358:	0801379c 	.word	0x0801379c
 800435c:	080137bc 	.word	0x080137bc
 8004360:	080137c8 	.word	0x080137c8
 8004364:	080137d8 	.word	0x080137d8
 8004368:	080137e8 	.word	0x080137e8
 800436c:	080137f8 	.word	0x080137f8
 8004370:	0801380c 	.word	0x0801380c
 8004374:	08013814 	.word	0x08013814
 8004378:	08013828 	.word	0x08013828
 800437c:	0801383c 	.word	0x0801383c
 8004380:	08013844 	.word	0x08013844
 8004384:	08013850 	.word	0x08013850
 8004388:	08013860 	.word	0x08013860
 800438c:	0801386c 	.word	0x0801386c
 8004390:	08013880 	.word	0x08013880
 8004394:	08013894 	.word	0x08013894
 8004398:	080138a0 	.word	0x080138a0
 800439c:	080138b0 	.word	0x080138b0
 80043a0:	080138c4 	.word	0x080138c4
 80043a4:	080138d0 	.word	0x080138d0
 80043a8:	080138dc 	.word	0x080138dc
 80043ac:	080138f0 	.word	0x080138f0
 80043b0:	08013900 	.word	0x08013900
 80043b4:	08013920 	.word	0x08013920
 80043b8:	08013930 	.word	0x08013930
 80043bc:	0801393c 	.word	0x0801393c
 80043c0:	08013944 	.word	0x08013944
 80043c4:	08013954 	.word	0x08013954
 80043c8:	08013968 	.word	0x08013968
 80043cc:	0801397c 	.word	0x0801397c
 80043d0:	08013994 	.word	0x08013994
 80043d4:	080139ac 	.word	0x080139ac
 80043d8:	080139cc 	.word	0x080139cc
 80043dc:	080139e0 	.word	0x080139e0
 80043e0:	080139f0 	.word	0x080139f0
 80043e4:	08013a04 	.word	0x08013a04
 80043e8:	08013a1c 	.word	0x08013a1c
 80043ec:	08013a24 	.word	0x08013a24
 80043f0:	08013a38 	.word	0x08013a38
 80043f4:	08013a4c 	.word	0x08013a4c
 80043f8:	08013a64 	.word	0x08013a64
 80043fc:	08013a78 	.word	0x08013a78
 8004400:	08013a98 	.word	0x08013a98
 8004404:	08013abc 	.word	0x08013abc
 8004408:	08013adc 	.word	0x08013adc
 800440c:	08013af4 	.word	0x08013af4
 8004410:	08013b0c 	.word	0x08013b0c
 8004414:	08013b1c 	.word	0x08013b1c
 8004418:	08013b28 	.word	0x08013b28
 800441c:	08013b3c 	.word	0x08013b3c
 8004420:	08013b4c 	.word	0x08013b4c
 8004424:	08013b68 	.word	0x08013b68
 8004428:	08013b80 	.word	0x08013b80
 800442c:	08013b98 	.word	0x08013b98
 8004430:	08013ba8 	.word	0x08013ba8
 8004434:	08013bb8 	.word	0x08013bb8
 8004438:	08013bd8 	.word	0x08013bd8
 800443c:	08013bf8 	.word	0x08013bf8

08004440 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8004440:	b408      	push	{r3}
 8004442:	b580      	push	{r7, lr}
 8004444:	b08b      	sub	sp, #44	; 0x2c
 8004446:	af02      	add	r7, sp, #8
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f7ff fafa 	bl	8003a48 <mg_http_status_code_str>
 8004454:	4602      	mov	r2, r0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <mg_http_reply+0x20>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	e000      	b.n	8004462 <mg_http_reply+0x22>
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <mg_http_reply+0xa0>)
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	491e      	ldr	r1, [pc, #120]	; (80044e4 <mg_http_reply+0xa4>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f002 fa40 	bl	80068f0 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004474:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8004476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800447a:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004482:	f107 0314 	add.w	r3, r7, #20
 8004486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004488:	4817      	ldr	r0, [pc, #92]	; (80044e8 <mg_http_reply+0xa8>)
 800448a:	f7fe f89b 	bl	80025c4 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	2b10      	cmp	r3, #16
 8004494:	d916      	bls.n	80044c4 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3b0f      	subs	r3, #15
 800449e:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80044a8:	4a10      	ldr	r2, [pc, #64]	; (80044ec <mg_http_reply+0xac>)
 80044aa:	210b      	movs	r1, #11
 80044ac:	f002 fc3e 	bl	8006d2c <mg_snprintf>
 80044b0:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044b6:	69f9      	ldr	r1, [r7, #28]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	440b      	add	r3, r1
 80044bc:	3b0f      	subs	r3, #15
 80044be:	4413      	add	r3, r2
 80044c0:	2220      	movs	r2, #32
 80044c2:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80044ca:	f36f 13c7 	bfc	r3, #7, #1
 80044ce:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 80044d2:	bf00      	nop
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044dc:	b001      	add	sp, #4
 80044de:	4770      	bx	lr
 80044e0:	08013bf8 	.word	0x08013bf8
 80044e4:	08013bfc 	.word	0x08013bfc
 80044e8:	08006cbd 	.word	0x08006cbd
 80044ec:	08013c30 	.word	0x08013c30

080044f0 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fc2d 	bl	8002d5c <mg_fs_close>
  c->pfn_data = NULL;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a06      	ldr	r2, [pc, #24]	; (8004524 <restore_http_cb+0x34>)
 800450c:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004514:	f36f 13c7 	bfc	r3, #7, #1
 8004518:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	08005649 	.word	0x08005649

08004528 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8004528:	b5b0      	push	{r4, r5, r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af04      	add	r7, sp, #16
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	461c      	mov	r4, r3
 800453a:	4615      	mov	r5, r2
 800453c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004540:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004544:	e9cd 2300 	strd	r2, r3, [sp]
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <mg_http_etag+0x34>)
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f002 fbed 	bl	8006d2c <mg_snprintf>
  return buf;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bdb0      	pop	{r4, r5, r7, pc}
 800455c:	08013c38 	.word	0x08013c38

08004560 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d002      	beq.n	800457a <static_cb+0x1a>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d146      	bne.n	8004608 <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800457e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004582:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3384      	adds	r3, #132	; 0x84
 8004588:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	429a      	cmp	r2, r3
 8004592:	d905      	bls.n	80045a0 <static_cb+0x40>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3348      	adds	r3, #72	; 0x48
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	4618      	mov	r0, r3
 800459c:	f001 f9c6 	bl	800592c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d234      	bcs.n	8004616 <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045be:	429a      	cmp	r2, r3
 80045c0:	d902      	bls.n	80045c8 <static_cb+0x68>
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	6810      	ldr	r0, [r2, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045da:	4411      	add	r1, r2
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	4798      	blx	r3
 80045e0:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	441a      	add	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	1ad2      	subs	r2, r2, r3
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <static_cb+0xba>
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff ff75 	bl	80044f0 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004606:	e008      	b.n	800461a <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b09      	cmp	r3, #9
 800460c:	d106      	bne.n	800461c <static_cb+0xbc>
    restore_http_cb(c);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff ff6e 	bl	80044f0 <restore_http_cb>
 8004614:	e002      	b.n	800461c <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800461a:	bf00      	nop
  }
  (void) ev_data;
}
 800461c:	3728      	adds	r7, #40	; 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b08d      	sub	sp, #52	; 0x34
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	1d38      	adds	r0, r7, #4
 800462e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004632:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f002 fec0 	bl	80073c0 <mg_str_s>
  size_t i = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 8004644:	e002      	b.n	800464c <guess_content_type+0x28>
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	3301      	adds	r3, #1
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004650:	429a      	cmp	r2, r3
 8004652:	d208      	bcs.n	8004666 <guess_content_type+0x42>
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	1acb      	subs	r3, r1, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b2e      	cmp	r3, #46	; 0x2e
 8004664:	d1ef      	bne.n	8004646 <guess_content_type+0x22>
  path.ptr += path.len - i;
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	1acb      	subs	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	607b      	str	r3, [r7, #4]
  path.len = i;
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 8004676:	e012      	b.n	800469e <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 8004678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467c:	cb0c      	ldmia	r3, {r2, r3}
 800467e:	1d39      	adds	r1, r7, #4
 8004680:	c903      	ldmia	r1, {r0, r1}
 8004682:	f002 ff5f 	bl	8007544 <mg_strcmp>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d108      	bne.n	800469e <guess_content_type+0x7a>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	f107 031c 	add.w	r3, r7, #28
 8004694:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004698:	e882 0003 	stmia.w	r2, {r0, r1}
 800469c:	e034      	b.n	8004708 <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 800469e:	f107 021c 	add.w	r2, r7, #28
 80046a2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80046a6:	f107 0314 	add.w	r3, r7, #20
 80046aa:	4618      	mov	r0, r3
 80046ac:	f003 f9a9 	bl	8007a02 <mg_commalist>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e0      	bne.n	8004678 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 80046b6:	2300      	movs	r3, #0
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ba:	e01a      	b.n	80046f2 <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <guess_content_type+0xec>)
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	cb0c      	ldmia	r3, {r2, r3}
 80046c6:	1d39      	adds	r1, r7, #4
 80046c8:	c903      	ldmia	r1, {r0, r1}
 80046ca:	f002 ff3b 	bl	8007544 <mg_strcmp>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <guess_content_type+0xc8>
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	3301      	adds	r3, #1
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <guess_content_type+0xec>)
 80046dc:	460c      	mov	r4, r1
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80046ea:	e00d      	b.n	8004708 <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	3302      	adds	r3, #2
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f2:	4a07      	ldr	r2, [pc, #28]	; (8004710 <guess_content_type+0xec>)
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1de      	bne.n	80046bc <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4904      	ldr	r1, [pc, #16]	; (8004714 <guess_content_type+0xf0>)
 8004702:	4618      	mov	r0, r3
 8004704:	f002 fe5c 	bl	80073c0 <mg_str_s>
}
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	3734      	adds	r7, #52	; 0x34
 800470c:	46bd      	mov	sp, r7
 800470e:	bd90      	pop	{r4, r7, pc}
 8004710:	20000050 	.word	0x20000050
 8004714:	08013d20 	.word	0x08013d20

08004718 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	e076      	b.n	800481c <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	2206      	movs	r2, #6
 8004738:	493f      	ldr	r1, [pc, #252]	; (8004838 <getrange+0x120>)
 800473a:	4618      	mov	r0, r3
 800473c:	f00d ff93 	bl	8012666 <memcmp>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d167      	bne.n	8004816 <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3306      	adds	r3, #6
 800474e:	18d1      	adds	r1, r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	1f9a      	subs	r2, r3, #6
 800475a:	f107 0310 	add.w	r3, r7, #16
 800475e:	4618      	mov	r0, r3
 8004760:	f002 fe4b 	bl	80073fa <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <getrange+0x68>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b2f      	cmp	r3, #47	; 0x2f
 8004770:	d906      	bls.n	8004780 <getrange+0x68>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b39      	cmp	r3, #57	; 0x39
 8004778:	d802      	bhi.n	8004780 <getrange+0x68>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	3301      	adds	r3, #1
 800477e:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	e893 0003 	ldmia.w	r3, {r0, r1}
 800478a:	f7fe fd25 	bl	80031d8 <mg_to_size_t>
 800478e:	4603      	mov	r3, r0
 8004790:	f083 0301 	eor.w	r3, r3, #1
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <getrange+0x92>
 800479a:	2300      	movs	r3, #0
 800479c:	e047      	b.n	800482e <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3301      	adds	r3, #1
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <getrange+0xa8>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b2f      	cmp	r3, #47	; 0x2f
 80047b6:	d903      	bls.n	80047c0 <getrange+0xa8>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b39      	cmp	r3, #57	; 0x39
 80047be:	d9ee      	bls.n	800479e <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <getrange+0xc2>
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b2d      	cmp	r3, #45	; 0x2d
 80047cc:	d105      	bne.n	80047da <getrange+0xc2>
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	3301      	adds	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047e4:	f7fe fcf8 	bl	80031d8 <mg_to_size_t>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f083 0301 	eor.w	r3, r3, #1
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <getrange+0xe0>
 80047f4:	2300      	movs	r3, #0
 80047f6:	e01a      	b.n	800482e <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d015      	beq.n	800482a <getrange+0x112>
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b2f      	cmp	r3, #47	; 0x2f
 8004804:	d911      	bls.n	800482a <getrange+0x112>
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b39      	cmp	r3, #57	; 0x39
 800480c:	d80d      	bhi.n	800482a <getrange+0x112>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3301      	adds	r3, #1
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e00a      	b.n	800482c <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3301      	adds	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	1d9a      	adds	r2, r3, #6
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d382      	bcc.n	800472e <getrange+0x16>
 8004828:	e000      	b.n	800482c <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 800482a:	bf00      	nop
    }
  }
  return (int) numparsed;
 800482c:	69bb      	ldr	r3, [r7, #24]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	08013ea4 	.word	0x08013ea4

0800483c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800483c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004840:	b0f7      	sub	sp, #476	; 0x1dc
 8004842:	af0a      	add	r7, sp, #40	; 0x28
 8004844:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 8004848:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 800484c:	6020      	str	r0, [r4, #0]
 800484e:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004852:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 8004856:	6001      	str	r1, [r0, #0]
 8004858:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800485c:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 8004860:	600a      	str	r2, [r1, #0]
 8004862:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004866:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800486a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800486c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004870:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d006      	beq.n	800488a <mg_http_serve_file+0x4e>
 800487c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004880:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	e000      	b.n	800488c <mg_http_serve_file+0x50>
 800488a:	4b9d      	ldr	r3, [pc, #628]	; (8004b00 <mg_http_serve_file+0x2c4>)
 800488c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  struct mg_fd *fd = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  size_t size = 0;
 8004896:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800489a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 80048b4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80048b8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048bc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	4610      	mov	r0, r2
 80048c4:	f002 fd7c 	bl	80073c0 <mg_str_s>
 80048c8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80048d8:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 80048dc:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80048e0:	ca06      	ldmia	r2, {r1, r2}
 80048e2:	f7ff fe9f 	bl	8004624 <guess_content_type>
  bool gzip = false;
 80048e6:	2300      	movs	r3, #0
 80048e8:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

  if (path != NULL) {
 80048ec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d051      	beq.n	800499e <mg_http_serve_file+0x162>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 80048fa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004902:	4980      	ldr	r1, [pc, #512]	; (8004b04 <mg_http_serve_file+0x2c8>)
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	f7fe fe03 	bl	8003510 <mg_http_get_header>
 800490a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 800490e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004912:	2b00      	cmp	r3, #0
 8004914:	d033      	beq.n	800497e <mg_http_serve_file+0x142>
 8004916:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800491a:	497b      	ldr	r1, [pc, #492]	; (8004b08 <mg_http_serve_file+0x2cc>)
 800491c:	4618      	mov	r0, r3
 800491e:	f002 fd4f 	bl	80073c0 <mg_str_s>
 8004922:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8004926:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800492a:	cb0c      	ldmia	r3, {r2, r3}
 800492c:	c903      	ldmia	r1, {r0, r1}
 800492e:	f002 fe4b 	bl	80075c8 <mg_strstr>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d022      	beq.n	800497e <mg_http_serve_file+0x142>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8004938:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800493c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004940:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a71      	ldr	r2, [pc, #452]	; (8004b0c <mg_http_serve_file+0x2d0>)
 8004948:	2180      	movs	r1, #128	; 0x80
 800494a:	f002 f9ef 	bl	8006d2c <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800494e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004952:	2201      	movs	r2, #1
 8004954:	4619      	mov	r1, r3
 8004956:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800495a:	f7fe f9d7 	bl	8002d0c <mg_fs_open>
 800495e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
      if (fd != NULL) gzip = true, path = tmp;
 8004962:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <mg_http_serve_file+0x142>
 800496a:	2301      	movs	r3, #1
 800496c:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8004970:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004974:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004978:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800497c:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 800497e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <mg_http_serve_file+0x162>
 8004986:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800498a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800498e:	2201      	movs	r2, #1
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8004996:	f7fe f9b9 	bl	8002d0c <mg_fs_open>
 800499a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 800499e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d144      	bne.n	8004a30 <mg_http_serve_file+0x1f4>
 80049a6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d03c      	beq.n	8004a30 <mg_http_serve_file+0x1f4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 80049b6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2201      	movs	r2, #1
 80049c4:	4619      	mov	r1, r3
 80049c6:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80049ca:	f7fe f99f 	bl	8002d0c <mg_fs_open>
 80049ce:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    mime = guess_content_type(mg_str(path), opts->mime_types);
 80049d2:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80049d6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	4610      	mov	r0, r2
 80049e2:	f002 fced 	bl	80073c0 <mg_str_s>
 80049e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80049f6:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 80049fa:	f107 0010 	add.w	r0, r7, #16
 80049fe:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004a02:	ca06      	ldmia	r2, {r1, r2}
 8004a04:	f7ff fe0e 	bl	8004624 <guess_content_type>
 8004a08:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a0c:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8004a10:	4623      	mov	r3, r4
 8004a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a16:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 8004a1a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004a22:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004a26:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	6912      	ldr	r2, [r2, #16]
 8004a2e:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8004a30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00f      	beq.n	8004a58 <mg_http_serve_file+0x21c>
 8004a38:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004a42:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8004a46:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a4a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	47a0      	blx	r4
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d114      	bne.n	8004a82 <mg_http_serve_file+0x246>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8004a58:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a68:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <mg_http_serve_file+0x2d4>)
 8004a6e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004a72:	6800      	ldr	r0, [r0, #0]
 8004a74:	f7ff fce4 	bl	8004440 <mg_http_reply>
    mg_fs_close(fd);
 8004a78:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004a7c:	f7fe f96e 	bl	8002d5c <mg_fs_close>
 8004a80:	e193      	b.n	8004daa <mg_http_serve_file+0x56e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004a82:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004a90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a94:	e9cd 2300 	strd	r2, r3, [sp]
 8004a98:	460a      	mov	r2, r1
 8004a9a:	2140      	movs	r1, #64	; 0x40
 8004a9c:	f7ff fd44 	bl	8004528 <mg_http_etag>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d03a      	beq.n	8004b1c <mg_http_serve_file+0x2e0>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004aa6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004aaa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004aae:	4919      	ldr	r1, [pc, #100]	; (8004b14 <mg_http_serve_file+0x2d8>)
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	f7fe fd2d 	bl	8003510 <mg_http_get_header>
 8004ab6:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004aba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02c      	beq.n	8004b1c <mg_http_serve_file+0x2e0>
             mg_vcasecmp(inm, etag) == 0) {
 8004ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 8004acc:	f002 fd16 	bl	80074fc <mg_vcasecmp>
 8004ad0:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d122      	bne.n	8004b1c <mg_http_serve_file+0x2e0>
    mg_fs_close(fd);
 8004ad6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004ada:	f7fe f93f 	bl	8002d5c <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8004ade:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ae2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004aee:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <mg_http_serve_file+0x2dc>)
 8004af4:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004af8:	6800      	ldr	r0, [r0, #0]
 8004afa:	f7ff fca1 	bl	8004440 <mg_http_reply>
 8004afe:	e154      	b.n	8004daa <mg_http_serve_file+0x56e>
 8004b00:	20000028 	.word	0x20000028
 8004b04:	08013eac 	.word	0x08013eac
 8004b08:	08013ebc 	.word	0x08013ebc
 8004b0c:	08013ec4 	.word	0x08013ec4
 8004b10:	08013ecc 	.word	0x08013ecc
 8004b14:	08013ed8 	.word	0x08013ed8
 8004b18:	08013bf8 	.word	0x08013bf8
  } else {
    int n, status = 200;
 8004b1c:	23c8      	movs	r3, #200	; 0xc8
 8004b1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8004b22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8004b48:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b50:	4999      	ldr	r1, [pc, #612]	; (8004db8 <mg_http_serve_file+0x57c>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	f7fe fcdc 	bl	8003510 <mg_http_get_header>
 8004b58:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    range[0] = '\0';
 8004b5c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004b60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8004b68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8095 	beq.w	8004c9c <mg_http_serve_file+0x460>
 8004b72:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004b76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8004b80:	f7ff fdca 	bl	8004718 <getrange>
 8004b84:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8004b88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f340 8085 	ble.w	8004c9c <mg_http_serve_file+0x460>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8004b92:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <mg_http_serve_file+0x36e>
 8004b9a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b9e:	1e5a      	subs	r2, r3, #1
 8004ba0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ba4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ba8:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8004baa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004bae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004bb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d808      	bhi.n	8004bd4 <mg_http_serve_file+0x398>
 8004bc2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004bc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d81a      	bhi.n	8004c0a <mg_http_serve_file+0x3ce>
        status = 416;
 8004bd4:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004bd8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8004be2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2200      	movs	r2, #0
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	60fa      	str	r2, [r7, #12]
 8004bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bf6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bfa:	e9cd 1200 	strd	r1, r2, [sp]
 8004bfe:	4a6f      	ldr	r2, [pc, #444]	; (8004dbc <mg_http_serve_file+0x580>)
 8004c00:	2164      	movs	r1, #100	; 0x64
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 f892 	bl	8006d2c <mg_snprintf>
 8004c08:	e048      	b.n	8004c9c <mg_http_serve_file+0x460>
                    (int64_t) size);
      } else {
        status = 206;
 8004c0a:	23ce      	movs	r3, #206	; 0xce
 8004c0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = r2 - r1 + 1;
 8004c10:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range),
 8004c2c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	469a      	mov	sl, r3
 8004c3a:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8004c3c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8004c4e:	2200      	movs	r2, #0
 8004c50:	461d      	mov	r5, r3
 8004c52:	4616      	mov	r6, r2
 8004c54:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c6c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004c70:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8004c74:	e9cd ab00 	strd	sl, fp, [sp]
 8004c78:	4a51      	ldr	r2, [pc, #324]	; (8004dc0 <mg_http_serve_file+0x584>)
 8004c7a:	2164      	movs	r1, #100	; 0x64
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f002 f855 	bl	8006d2c <mg_snprintf>
        fs->sk(fd->fd, r1);
 8004c82:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8004c8c:	6810      	ldr	r0, [r2, #0]
 8004c8e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004c92:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8004c9c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8004ca0:	f7fe fed2 	bl	8003a48 <mg_http_status_code_str>
 8004ca4:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 8004ca6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004caa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cae:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8004cb0:	461d      	mov	r5, r3
 8004cb2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004cb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4698      	mov	r8, r3
 8004cc4:	4689      	mov	r9, r1
 8004cc6:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <mg_http_serve_file+0x496>
 8004cce:	493d      	ldr	r1, [pc, #244]	; (8004dc4 <mg_http_serve_file+0x588>)
 8004cd0:	e000      	b.n	8004cd4 <mg_http_serve_file+0x498>
 8004cd2:	493d      	ldr	r1, [pc, #244]	; (8004dc8 <mg_http_serve_file+0x58c>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8004cd4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004cd8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <mg_http_serve_file+0x4b6>
 8004ce4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004ce8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	e000      	b.n	8004cf4 <mg_http_serve_file+0x4b8>
 8004cf2:	4b35      	ldr	r3, [pc, #212]	; (8004dc8 <mg_http_serve_file+0x58c>)
 8004cf4:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004cf8:	f5a0 70c6 	sub.w	r0, r0, #396	; 0x18c
 8004cfc:	9308      	str	r3, [sp, #32]
 8004cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d02:	9307      	str	r3, [sp, #28]
 8004d04:	9106      	str	r1, [sp, #24]
 8004d06:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	9201      	str	r2, [sp, #4]
 8004d12:	9500      	str	r5, [sp, #0]
 8004d14:	4623      	mov	r3, r4
 8004d16:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004d1a:	492c      	ldr	r1, [pc, #176]	; (8004dcc <mg_http_serve_file+0x590>)
 8004d1c:	6800      	ldr	r0, [r0, #0]
 8004d1e:	f001 fde7 	bl	80068f0 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8004d22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4928      	ldr	r1, [pc, #160]	; (8004dd0 <mg_http_serve_file+0x594>)
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 fbe4 	bl	80074fc <mg_vcasecmp>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11a      	bne.n	8004d70 <mg_http_serve_file+0x534>
      c->is_draining = 1;
 8004d3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d3e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004d48:	f043 0310 	orr.w	r3, r3, #16
 8004d4c:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 8004d50:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004d5e:	f36f 13c7 	bfc	r3, #7, #1
 8004d62:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 8004d66:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8004d6a:	f7fd fff7 	bl	8002d5c <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8004d6e:	e01c      	b.n	8004daa <mg_http_serve_file+0x56e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004d70:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3384      	adds	r3, #132	; 0x84
 8004d7c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      c->pfn = static_cb;
 8004d80:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <mg_http_serve_file+0x598>)
 8004d8c:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 8004d8e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004d92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8004d9c:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 8004d9e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004da2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	e7ff      	b.n	8004daa <mg_http_serve_file+0x56e>
 8004daa:	bf00      	nop
 8004dac:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db6:	bf00      	nop
 8004db8:	08013ee8 	.word	0x08013ee8
 8004dbc:	08013ef0 	.word	0x08013ef0
 8004dc0:	08013f10 	.word	0x08013f10
 8004dc4:	08013f38 	.word	0x08013f38
 8004dc8:	08013bf8 	.word	0x08013bf8
 8004dcc:	08013f54 	.word	0x08013f54
 8004dd0:	08013fa4 	.word	0x08013fa4
 8004dd4:	08004561 	.word	0x08004561

08004dd8 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8004dd8:	b082      	sub	sp, #8
 8004dda:	b590      	push	{r4, r7, lr}
 8004ddc:	b08b      	sub	sp, #44	; 0x2c
 8004dde:	af02      	add	r7, sp, #8
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 8004de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dea:	461a      	mov	r2, r3
 8004dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	4a97      	ldr	r2, [pc, #604]	; (8005050 <uri_to_path2+0x278>)
 8004df4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004df6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004df8:	f001 ff98 	bl	8006d2c <mg_snprintf>
 8004dfc:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d909      	bls.n	8004e1a <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8004e06:	4b93      	ldr	r3, [pc, #588]	; (8005054 <uri_to_path2+0x27c>)
 8004e08:	4a93      	ldr	r2, [pc, #588]	; (8005058 <uri_to_path2+0x280>)
 8004e0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff fb16 	bl	8004440 <mg_http_reply>
    return -1;
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	e113      	b.n	8005042 <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 8004e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e20:	4413      	add	r3, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d912      	bls.n	8004e56 <uri_to_path2+0x7e>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e36:	4413      	add	r3, r2
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b2f      	cmp	r3, #47	; 0x2f
 8004e3c:	d00b      	beq.n	8004e56 <uri_to_path2+0x7e>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	617a      	str	r2, [r7, #20]
 8004e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e46:	4413      	add	r3, r2
 8004e48:	222f      	movs	r2, #47	; 0x2f
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	4413      	add	r3, r2
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	18d0      	adds	r0, r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	1ad1      	subs	r1, r2, r3
 8004e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	18d4      	adds	r4, r2, r3
 8004e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2200      	movs	r2, #0
 8004e74:	9200      	str	r2, [sp, #0]
 8004e76:	4622      	mov	r2, r4
 8004e78:	f7fe fa64 	bl	8003344 <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 8004e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e82:	4413      	add	r3, r2
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 8004e88:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004e8a:	f002 fe37 	bl	8007afc <mg_path_is_sane>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f083 0301 	eor.w	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 8004e9a:	4b70      	ldr	r3, [pc, #448]	; (800505c <uri_to_path2+0x284>)
 8004e9c:	4a6e      	ldr	r2, [pc, #440]	; (8005058 <uri_to_path2+0x280>)
 8004e9e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff facc 	bl	8004440 <mg_http_reply>
    return -1;
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	e0c9      	b.n	8005042 <uri_to_path2+0x26a>
  }
  n = strlen(path);
 8004eae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004eb0:	f7fb fa0e 	bl	80002d0 <strlen>
 8004eb4:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8004eb6:	e007      	b.n	8004ec8 <uri_to_path2+0xf0>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d906      	bls.n	8004edc <uri_to_path2+0x104>
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed4:	4413      	add	r3, r2
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b2f      	cmp	r3, #47	; 0x2f
 8004eda:	d0ed      	beq.n	8004eb8 <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	495f      	ldr	r1, [pc, #380]	; (8005060 <uri_to_path2+0x288>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f002 fae6 	bl	80074b4 <mg_vcmp>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <uri_to_path2+0x126>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004ef8:	4798      	blx	r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	e000      	b.n	8004f00 <uri_to_path2+0x128>
 8004efe:	2304      	movs	r3, #4
 8004f00:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 8004f02:	4b58      	ldr	r3, [pc, #352]	; (8005064 <uri_to_path2+0x28c>)
 8004f04:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8004f08:	4957      	ldr	r1, [pc, #348]	; (8005068 <uri_to_path2+0x290>)
 8004f0a:	2004      	movs	r0, #4
 8004f0c:	f001 fb90 	bl	8006630 <mg_log_prefix>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00f      	beq.n	8004f36 <uri_to_path2+0x15e>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	4602      	mov	r2, r0
 8004f30:	484e      	ldr	r0, [pc, #312]	; (800506c <uri_to_path2+0x294>)
 8004f32:	f001 fbd7 	bl	80066e4 <mg_log>
              flags));
  if (flags == 0) {
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8081 	beq.w	8005040 <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <uri_to_path2+0x1b2>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01c      	beq.n	8004f8a <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004f5e:	2b2f      	cmp	r3, #47	; 0x2f
 8004f60:	d013      	beq.n	8004f8a <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8004f66:	461a      	mov	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4940      	ldr	r1, [pc, #256]	; (8005070 <uri_to_path2+0x298>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f001 fcbe 	bl	80068f0 <mg_printf>
    c->is_resp = 0;
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004f7a:	f36f 13c7 	bfc	r3, #7, #1
 8004f7e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	e05a      	b.n	8005040 <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d055      	beq.n	8005040 <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	18d0      	adds	r0, r2, r3
 8004f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	4a34      	ldr	r2, [pc, #208]	; (8005074 <uri_to_path2+0x29c>)
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f001 fec2 	bl	8006d2c <mg_snprintf>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004fb8:	4798      	blx	r3
 8004fba:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d116      	bne.n	8004ff0 <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	18d0      	adds	r0, r2, r3
 8004fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <uri_to_path2+0x2a0>)
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f001 feab 	bl	8006d2c <mg_snprintf>
 8004fd6:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00c      	beq.n	8004ff6 <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004fe6:	4798      	blx	r3
 8004fe8:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <uri_to_path2+0x21e>
      flags = tmp;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e024      	b.n	8005040 <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8004ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	18d0      	adds	r0, r2, r3
 8004ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a1e      	ldr	r2, [pc, #120]	; (800507c <uri_to_path2+0x2a4>)
 8005004:	4619      	mov	r1, r3
 8005006:	f001 fe91 	bl	8006d2c <mg_snprintf>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d012      	beq.n	8005036 <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2200      	movs	r2, #0
 8005016:	2100      	movs	r1, #0
 8005018:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800501a:	4798      	blx	r3
 800501c:	61b8      	str	r0, [r7, #24]
                    0 &&
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	330b      	adds	r3, #11
 800502c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800502e:	4413      	add	r3, r2
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e004      	b.n	8005040 <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8005036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8005040:	69fb      	ldr	r3, [r7, #28]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3724      	adds	r7, #36	; 0x24
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800504c:	b002      	add	sp, #8
 800504e:	4770      	bx	lr
 8005050:	08013698 	.word	0x08013698
 8005054:	08013fac 	.word	0x08013fac
 8005058:	08013bf8 	.word	0x08013bf8
 800505c:	08013fc0 	.word	0x08013fc0
 8005060:	08013fd0 	.word	0x08013fd0
 8005064:	08014e4c 	.word	0x08014e4c
 8005068:	08013568 	.word	0x08013568
 800506c:	08013fd4 	.word	0x08013fd4
 8005070:	08013fe8 	.word	0x08013fe8
 8005074:	08014024 	.word	0x08014024
 8005078:	08014030 	.word	0x08014030
 800507c:	08014040 	.word	0x08014040

08005080 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b09a      	sub	sp, #104	; 0x68
 8005084:	af06      	add	r7, sp, #24
 8005086:	6178      	str	r0, [r7, #20]
 8005088:	6139      	str	r1, [r7, #16]
 800508a:	60fa      	str	r2, [r7, #12]
 800508c:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <uri_to_path+0x1c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	e000      	b.n	800509e <uri_to_path+0x1e>
 800509c:	4b3b      	ldr	r3, [pc, #236]	; (800518c <uri_to_path+0x10c>)
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 f988 	bl	80073c0 <mg_str_s>
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	2300      	movs	r3, #0
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	2300      	movs	r3, #0
 80050be:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 80050c0:	e040      	b.n	8005144 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d113      	bne.n	80050f0 <uri_to_path+0x70>
 80050c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80050d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80050d8:	463b      	mov	r3, r7
 80050da:	492d      	ldr	r1, [pc, #180]	; (8005190 <uri_to_path+0x110>)
 80050dc:	4618      	mov	r0, r3
 80050de:	f002 f96f 	bl	80073c0 <mg_str_s>
 80050e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050e6:	463a      	mov	r2, r7
 80050e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050ec:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d200      	bcs.n	80050fc <uri_to_path+0x7c>
 80050fa:	e023      	b.n	8005144 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6899      	ldr	r1, [r3, #8]
 8005100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005102:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005106:	4618      	mov	r0, r3
 8005108:	f002 f977 	bl	80073fa <mg_str_n>
 800510c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005110:	cb0c      	ldmia	r3, {r2, r3}
 8005112:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005116:	c903      	ldmia	r1, {r0, r1}
 8005118:	f002 fa14 	bl	8007544 <mg_strcmp>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d000      	beq.n	8005124 <uri_to_path+0xa4>
 8005122:	e00f      	b.n	8005144 <uri_to_path+0xc4>
    u = k, p = v;
 8005124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005128:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800512c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005130:	e883 0003 	stmia.w	r3, {r0, r1}
 8005134:	f107 031c 	add.w	r3, r7, #28
 8005138:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800513c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005140:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 8005144:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005148:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800514c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005150:	4618      	mov	r0, r3
 8005152:	f002 fc56 	bl	8007a02 <mg_commalist>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1b2      	bne.n	80050c2 <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800515c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	9303      	str	r3, [sp, #12]
 8005164:	aa01      	add	r2, sp, #4
 8005166:	f107 031c 	add.w	r3, r7, #28
 800516a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800516e:	e882 0003 	stmia.w	r2, {r0, r1}
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	6978      	ldr	r0, [r7, #20]
 800517e:	f7ff fe2b 	bl	8004dd8 <uri_to_path2>
 8005182:	4603      	mov	r3, r0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3750      	adds	r7, #80	; 0x50
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000028 	.word	0x20000028
 8005190:	08013fd0 	.word	0x08013fd0

08005194 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b0a9      	sub	sp, #164	; 0xa4
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 80051a8:	f107 0310 	add.w	r3, r7, #16
 80051ac:	2280      	movs	r2, #128	; 0x80
 80051ae:	9200      	str	r2, [sp, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff ff63 	bl	8005080 <uri_to_path>
 80051ba:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (flags < 0) {
 80051be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	db3a      	blt.n	800523c <mg_http_serve_dir+0xa8>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 80051c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <mg_http_serve_dir+0xb0>)
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <mg_http_serve_dir+0xb4>)
 80051d6:	f240 1193 	movw	r1, #403	; 0x193
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f7ff f930 	bl	8004440 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 80051e0:	e02c      	b.n	800523c <mg_http_serve_dir+0xa8>
  } else if (flags && sp != NULL &&
 80051e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d021      	beq.n	800522e <mg_http_serve_dir+0x9a>
 80051ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01d      	beq.n	800522e <mg_http_serve_dir+0x9a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 80051f2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80051f6:	f7fb f86b 	bl	80002d0 <strlen>
 80051fa:	4604      	mov	r4, r0
 80051fc:	f107 0310 	add.w	r3, r7, #16
 8005200:	4618      	mov	r0, r3
 8005202:	f7fb f865 	bl	80002d0 <strlen>
 8005206:	4603      	mov	r3, r0
 8005208:	f107 0210 	add.w	r2, r7, #16
 800520c:	4621      	mov	r1, r4
 800520e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005212:	f002 faf5 	bl	8007800 <mg_globmatch>
 8005216:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <mg_http_serve_dir+0x9a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f107 0210 	add.w	r2, r7, #16
 8005224:	4619      	mov	r1, r3
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f002 f8b6 	bl	8007398 <mg_http_serve_ssi>
}
 800522c:	e006      	b.n	800523c <mg_http_serve_dir+0xa8>
    mg_http_serve_file(c, hm, path, opts);
 800522e:	f107 0210 	add.w	r2, r7, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fb00 	bl	800483c <mg_http_serve_file>
}
 800523c:	bf00      	nop
 800523e:	379c      	adds	r7, #156	; 0x9c
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}
 8005244:	08014050 	.word	0x08014050
 8005248:	08013bf8 	.word	0x08013bf8

0800524c <mg_http_match_uri>:
    }
  }
  return mg_str_n(NULL, 0);
}

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8005256:	f107 0308 	add.w	r3, r7, #8
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f002 f8af 	bl	80073c0 <mg_str_s>
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	2300      	movs	r3, #0
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	cb0c      	ldmia	r3, {r2, r3}
 800526e:	3108      	adds	r1, #8
 8005270:	c903      	ldmia	r1, {r0, r1}
 8005272:	f002 f9de 	bl	8007632 <mg_match>
 8005276:	4603      	mov	r3, r0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	f107 0408 	add.w	r4, r7, #8
 800528a:	e884 0003 	stmia.w	r4, {r0, r1}
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 8005296:	e002      	b.n	800529e <getchunk+0x1e>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3301      	adds	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d20b      	bcs.n	80052be <getchunk+0x3e>
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b0d      	cmp	r3, #13
 80052b0:	d005      	beq.n	80052be <getchunk+0x3e>
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b0a      	cmp	r3, #10
 80052bc:	d1ec      	bne.n	8005298 <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 fbd0 	bl	8007a68 <mg_unhexn>
 80052c8:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	440b      	add	r3, r1
 80052d2:	3304      	adds	r3, #4
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d201      	bcs.n	80052dc <getchunk+0x5c>
 80052d8:	2300      	movs	r3, #0
 80052da:	e02a      	b.n	8005332 <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b0d      	cmp	r3, #13
 80052e6:	d106      	bne.n	80052f6 <getchunk+0x76>
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	3301      	adds	r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b0a      	cmp	r3, #10
 80052f4:	d001      	beq.n	80052fa <getchunk+0x7a>
 80052f6:	2300      	movs	r3, #0
 80052f8:	e01b      	b.n	8005332 <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	440b      	add	r3, r1
 8005302:	3302      	adds	r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b0d      	cmp	r3, #13
 800530a:	d108      	bne.n	800531e <getchunk+0x9e>
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	6979      	ldr	r1, [r7, #20]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	440b      	add	r3, r1
 8005314:	3303      	adds	r3, #3
 8005316:	4413      	add	r3, r2
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b0a      	cmp	r3, #10
 800531c:	d001      	beq.n	8005322 <getchunk+0xa2>
 800531e:	2300      	movs	r3, #0
 8005320:	e007      	b.n	8005332 <getchunk+0xb2>
  *prefixlen = i + 2;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	1c9a      	adds	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
  *datalen = n;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	601a      	str	r2, [r3, #0]
  return true;
 8005330:	2301      	movs	r3, #1
}
 8005332:	4618      	mov	r0, r3
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd90      	pop	{r4, r7, pc}
	...

0800533c <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8005344:	4b0d      	ldr	r3, [pc, #52]	; (800537c <mg_is_chunked+0x40>)
 8005346:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8005348:	490d      	ldr	r1, [pc, #52]	; (8005380 <mg_is_chunked+0x44>)
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fe f8e0 	bl	8003510 <mg_http_get_header>
 8005350:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <mg_is_chunked+0x2e>
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f002 f8ce 	bl	80074fc <mg_vcasecmp>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <mg_is_chunked+0x2e>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <mg_is_chunked+0x30>
 800536a:	2300      	movs	r3, #0
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	b2db      	uxtb	r3, r3
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	08014108 	.word	0x08014108
 8005380:	08014110 	.word	0x08014110

08005384 <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b095      	sub	sp, #84	; 0x54
 8005388:	af00      	add	r7, sp, #0
 800538a:	6178      	str	r0, [r7, #20]
 800538c:	6139      	str	r1, [r7, #16]
 800538e:	60fa      	str	r2, [r7, #12]
 8005390:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40
 80053b8:	2300      	movs	r3, #0
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 80053c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d851      	bhi.n	800546e <deliver_chunked_chunks+0xea>
 80053ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d6:	4413      	add	r3, r2
 80053d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 80053da:	e048      	b.n	800546e <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 80053e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e6:	18d0      	adds	r0, r2, r3
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	4413      	add	r3, r2
 80053ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053f0:	4413      	add	r3, r2
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	4619      	mov	r1, r3
 80053f6:	f00d f946 	bl	8012686 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 80053fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	18d1      	adds	r1, r2, r3
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	68fc      	ldr	r4, [r7, #12]
 8005404:	463b      	mov	r3, r7
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fff7 	bl	80073fa <mg_str_n>
 800540c:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005410:	463a      	mov	r2, r7
 8005412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005416:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	210b      	movs	r1, #11
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	f7fc fb9f 	bl	8001b62 <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	441a      	add	r2, r3
 800542a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542c:	4413      	add	r3, r2
 800542e:	3302      	adds	r3, #2
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005432:	6a3a      	ldr	r2, [r7, #32]
 8005434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005436:	4413      	add	r3, r2
 8005438:	3302      	adds	r3, #2
 800543a:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005440:	4413      	add	r3, r2
 8005442:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544a:	429a      	cmp	r2, r3
 800544c:	d008      	beq.n	8005460 <deliver_chunked_chunks+0xdc>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	647b      	str	r3, [r7, #68]	; 0x44
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	425b      	negs	r3, r3
 800545a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800545c:	4413      	add	r3, r2
 800545e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b00      	cmp	r3, #0
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 800546e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005472:	f083 0301 	eor.w	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d016      	beq.n	80054aa <deliver_chunked_chunks+0x126>
 800547c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800547e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005480:	18d1      	adds	r1, r2, r3
 8005482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548c:	4618      	mov	r0, r3
 800548e:	f001 ffb4 	bl	80073fa <mg_str_n>
 8005492:	f107 031c 	add.w	r3, r7, #28
 8005496:	f107 0220 	add.w	r2, r7, #32
 800549a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800549e:	c903      	ldmia	r1, {r0, r1}
 80054a0:	f7ff feee 	bl	8005280 <getchunk>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d198      	bne.n	80053dc <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b4:	4413      	add	r3, r2
 80054b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b8:	4619      	mov	r1, r3
 80054ba:	f000 fac1 	bl	8005a40 <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 80054c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	4313      	orrs	r3, r2
 80054ce:	461a      	mov	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 80054d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d019      	beq.n	8005510 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e8:	441a      	add	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <deliver_chunked_chunks+0x18c>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	3338      	adds	r3, #56	; 0x38
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fa9b 	bl	8005a40 <mg_iobuf_del>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2201      	movs	r2, #1
 800550e:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 8005510:	bf00      	nop
 8005512:	3754      	adds	r7, #84	; 0x54
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b08b      	sub	sp, #44	; 0x2c
 800551c:	af00      	add	r7, sp, #0
 800551e:	6178      	str	r0, [r7, #20]
 8005520:	6139      	str	r1, [r7, #16]
 8005522:	60fa      	str	r2, [r7, #12]
 8005524:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005538:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	18d1      	adds	r1, r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad2      	subs	r2, r2, r3
 800554a:	68fc      	ldr	r4, [r7, #12]
 800554c:	463b      	mov	r3, r7
 800554e:	4618      	mov	r0, r3
 8005550:	f001 ff53 	bl	80073fa <mg_str_n>
 8005554:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005558:	463a      	mov	r2, r7
 800555a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800555e:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	429a      	cmp	r2, r3
 800556c:	d812      	bhi.n	8005594 <deliver_normal_chunks+0x7c>
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10f      	bne.n	8005594 <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad2      	subs	r2, r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	441a      	add	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	429a      	cmp	r2, r3
 800559e:	d805      	bhi.n	80055ac <deliver_normal_chunks+0x94>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	e000      	b.n	80055ae <deliver_normal_chunks+0x96>
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d203      	bcs.n	80055c4 <deliver_normal_chunks+0xac>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <deliver_normal_chunks+0xc0>
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	210b      	movs	r1, #11
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f7fc fac5 	bl	8001b62 <mg_call>
  processed += hm->chunk.len;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e0:	4413      	add	r3, r2
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ec:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d31c      	bcc.n	8005634 <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	210b      	movs	r1, #11
 8005606:	6978      	ldr	r0, [r7, #20]
 8005608:	f7fc faab 	bl	8001b62 <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2200      	movs	r2, #0
 8005610:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d013      	beq.n	8005640 <deliver_normal_chunks+0x128>
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <deliver_normal_chunks+0x128>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	3338      	adds	r3, #56	; 0x38
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fa0a 	bl	8005a40 <mg_iobuf_del>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 8005632:	e005      	b.n	8005640 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 8005634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	4313      	orrs	r3, r2
 800563a:	461a      	mov	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005640:	bf00      	nop
 8005642:	372c      	adds	r7, #44	; 0x2c
 8005644:	46bd      	mov	sp, r7
 8005646:	bd90      	pop	{r4, r7, pc}

08005648 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800564e:	af00      	add	r7, sp, #0
 8005650:	f507 740e 	add.w	r4, r7, #568	; 0x238
 8005654:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8005658:	6020      	str	r0, [r4, #0]
 800565a:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800565e:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 8005662:	6001      	str	r1, [r0, #0]
 8005664:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8005668:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 800566c:	600a      	str	r2, [r1, #0]
 800566e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005672:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005676:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 8005678:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800567c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b07      	cmp	r3, #7
 8005684:	f000 80e9 	beq.w	800585a <http_cb+0x212>
 8005688:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800568c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b09      	cmp	r3, #9
 8005694:	f040 80f2 	bne.w	800587c <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005698:	e0df      	b.n	800585a <http_cb+0x212>
      bool next = false;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 80056a0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056a4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80056ac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056b0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f107 0210 	add.w	r2, r7, #16
 80056bc:	4619      	mov	r1, r3
 80056be:	f7fe f875 	bl	80037ac <mg_http_parse>
 80056c2:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 80056c6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da17      	bge.n	80056fe <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 80056ce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056d2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4619      	mov	r1, r3
 80056dc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056e0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80056ec:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 80056f0:	460a      	mov	r2, r1
 80056f2:	4965      	ldr	r1, [pc, #404]	; (8005888 <http_cb+0x240>)
 80056f4:	6800      	ldr	r0, [r0, #0]
 80056f6:	f7fc fa57 	bl	8001ba8 <mg_error>
        break;
 80056fa:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 80056fc:	e0be      	b.n	800587c <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 80056fe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005702:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800570c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 809b 	bne.w	800584e <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 8005718:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8098 	beq.w	8005852 <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 8005722:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005726:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b09      	cmp	r3, #9
 800572e:	d125      	bne.n	800577c <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 8005730:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005734:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800573c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005740:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005744:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 8005748:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800574c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005750:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005754:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005758:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800575c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8005760:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005764:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8005768:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 800576c:	1a8a      	subs	r2, r1, r2
 800576e:	1a9a      	subs	r2, r3, r2
 8005770:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005774:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005778:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 800577c:	f107 0310 	add.w	r3, r7, #16
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fddb 	bl	800533c <mg_is_chunked>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 800578c:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005790:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005794:	f107 0210 	add.w	r2, r7, #16
 8005798:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800579c:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 80057a0:	6800      	ldr	r0, [r0, #0]
 80057a2:	f7ff fdef 	bl	8005384 <deliver_chunked_chunks>
 80057a6:	e00c      	b.n	80057c2 <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 80057a8:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 80057ac:	f207 2333 	addw	r3, r7, #563	; 0x233
 80057b0:	f107 0210 	add.w	r2, r7, #16
 80057b4:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80057b8:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f7ff feab 	bl	8005518 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 80057c2:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d000      	beq.n	80057cc <http_cb+0x184>
 80057ca:	e046      	b.n	800585a <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 80057cc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80057d0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80057dc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80057e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d336      	bcc.n	8005856 <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80057e8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80057ec:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <http_cb+0x1ce>
 8005800:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005804:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800580e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005812:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8005816:	f107 0210 	add.w	r2, r7, #16
 800581a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800581e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005822:	210a      	movs	r1, #10
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	f7fc f99c 	bl	8001b62 <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 800582a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800582e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005838:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800583c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005840:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005844:	461a      	mov	r2, r3
 8005846:	2100      	movs	r1, #0
 8005848:	f000 f8fa 	bl	8005a40 <mg_iobuf_del>
 800584c:	e005      	b.n	800585a <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 800584e:	bf00      	nop
 8005850:	e014      	b.n	800587c <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 8005852:	bf00      	nop
 8005854:	e012      	b.n	800587c <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 8005856:	bf00      	nop
}
 8005858:	e010      	b.n	800587c <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 800585a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800585e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <http_cb+0x234>
 800586a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800586e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	f47f af0f 	bne.w	800569a <http_cb+0x52>
}
 800587c:	bf00      	nop
 800587e:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8005882:	46bd      	mov	sp, r7
 8005884:	bd90      	pop	{r4, r7, pc}
 8005886:	bf00      	nop
 8005888:	08014124 	.word	0x08014124

0800588c <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f001 f8cb 	bl	8006a3c <mg_listen>
 80058a6:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <mg_http_listen+0x28>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4a03      	ldr	r2, [pc, #12]	; (80058c0 <mg_http_listen+0x34>)
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 80058b4:	697b      	ldr	r3, [r7, #20]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	08005649 	.word	0x08005649

080058c4 <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <zeromem+0x26>
    while (len--) *buf++ = 0;
 80058d4:	e004      	b.n	80058e0 <zeromem+0x1c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	1e5a      	subs	r2, r3, #1
 80058e4:	603a      	str	r2, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f5      	bne.n	80058d6 <zeromem+0x12>
  }
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <roundup>:

static size_t roundup(size_t size, size_t align) {
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <roundup+0x26>
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	4413      	add	r3, r2
 800590c:	1e5a      	subs	r2, r3, #1
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	e000      	b.n	800591e <roundup+0x28>
 800591c:	687b      	ldr	r3, [r7, #4]
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800592c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005930:	b088      	sub	sp, #32
 8005932:	af02      	add	r7, sp, #8
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8005938:	2301      	movs	r3, #1
 800593a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4619      	mov	r1, r3
 8005942:	6838      	ldr	r0, [r7, #0]
 8005944:	f7ff ffd7 	bl	80058f6 <roundup>
 8005948:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d117      	bne.n	8005980 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f7ff ffb2 	bl	80058c4 <zeromem>
    free(io->buf);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f00c fbf1 	bl	801214c <free>
    io->buf = NULL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	e052      	b.n	8005a26 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d04d      	beq.n	8005a26 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	2001      	movs	r0, #1
 800598e:	f00c fbb7 	bl	8012100 <calloc>
 8005992:	4603      	mov	r3, r0
 8005994:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d028      	beq.n	80059ee <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bf28      	it	cs
 80059a6:	4613      	movcs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <mg_iobuf_resize+0x9a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d006      	beq.n	80059c6 <mg_iobuf_resize+0x9a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4619      	mov	r1, r3
 80059c0:	6938      	ldr	r0, [r7, #16]
 80059c2:	f00c fe60 	bl	8012686 <memmove>
      zeromem(io->buf, io->size);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7ff ff77 	bl	80058c4 <zeromem>
      free(io->buf);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f00c fbb6 	bl	801214c <free>
      io->buf = (unsigned char *) p;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	e01b      	b.n	8005a26 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <mg_iobuf_resize+0x108>)
 80059f4:	f640 1255 	movw	r2, #2389	; 0x955
 80059f8:	490f      	ldr	r1, [pc, #60]	; (8005a38 <mg_iobuf_resize+0x10c>)
 80059fa:	2001      	movs	r0, #1
 80059fc:	f000 fe18 	bl	8006630 <mg_log_prefix>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00f      	beq.n	8005a26 <mg_iobuf_resize+0xfa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	4698      	mov	r8, r3
 8005a0e:	4691      	mov	r9, r2
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	461c      	mov	r4, r3
 8005a16:	4615      	mov	r5, r2
 8005a18:	e9cd 4500 	strd	r4, r5, [sp]
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	4806      	ldr	r0, [pc, #24]	; (8005a3c <mg_iobuf_resize+0x110>)
 8005a22:	f000 fe5f 	bl	80066e4 <mg_log>
    }
  }
  return ok;
 8005a26:	697b      	ldr	r3, [r7, #20]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a32:	bf00      	nop
 8005a34:	08014e5c 	.word	0x08014e5c
 8005a38:	08013568 	.word	0x08013568
 8005a3c:	08014170 	.word	0x08014170

08005a40 <mg_iobuf_del>:
  if (ofs > io->len) io->len += ofs - io->len;
  io->len += len;
  return len;
}

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d902      	bls.n	8005a5c <mg_iobuf_del+0x1c>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	441a      	add	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d904      	bls.n	8005a74 <mg_iobuf_del+0x34>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d012      	beq.n	8005aa2 <mg_iobuf_del+0x62>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	18d0      	adds	r0, r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	440b      	add	r3, r1
 8005a8e:	18d1      	adds	r1, r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f00c fdf2 	bl	8012686 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <mg_iobuf_del+0x80>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6899      	ldr	r1, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1acb      	subs	r3, r1, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ff02 	bl	80058c4 <zeromem>
  io->len -= len;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	609a      	str	r2, [r3, #8]
  return len;
 8005acc:	687b      	ldr	r3, [r7, #4]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b082      	sub	sp, #8
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8005ade:	2100      	movs	r1, #0
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ff23 	bl	800592c <mg_iobuf_resize>
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <escapeseq+0x12>
 8005afe:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <escapeseq+0x20>)
 8005b00:	e000      	b.n	8005b04 <escapeseq+0x14>
 8005b02:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <escapeseq+0x24>)
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	0801417c 	.word	0x0801417c
 8005b14:	08014184 	.word	0x08014184

08005b18 <json_esc>:

static char json_esc(int c, int esc) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8005b22:	6838      	ldr	r0, [r7, #0]
 8005b24:	f7ff ffe4 	bl	8005af0 <escapeseq>
 8005b28:	6138      	str	r0, [r7, #16]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff ffda 	bl	8005af0 <escapeseq>
 8005b3c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	e010      	b.n	8005b66 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d107      	bne.n	8005b60 <json_esc+0x48>
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	e007      	b.n	8005b70 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3301      	adds	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ea      	bne.n	8005b44 <json_esc+0x2c>
  }
  return 0;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e02e      	b.n	8005be6 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b5c      	cmp	r3, #92	; 0x5c
 8005b92:	d114      	bne.n	8005bbe <mg_pass_string+0x46>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	dd0f      	ble.n	8005bbe <mg_pass_string+0x46>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2101      	movs	r1, #1
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff ffb4 	bl	8005b18 <json_esc>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <mg_pass_string+0x46>
      i++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e010      	b.n	8005be0 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 8005bca:	f06f 0301 	mvn.w	r3, #1
 8005bce:	e010      	b.n	8005bf2 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b22      	cmp	r3, #34	; 0x22
 8005bda:	d101      	bne.n	8005be0 <mg_pass_string+0x68>
      return i;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	e008      	b.n	8005bf2 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	dbcc      	blt.n	8005b88 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 8005bee:	f06f 0301 	mvn.w	r3, #1
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	0000      	movs	r0, r0
 8005bfc:	0000      	movs	r0, r0
	...

08005c00 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b090      	sub	sp, #64	; 0x40
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 8005c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	da0a      	bge.n	8005c3e <mg_atod+0x3e>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b2d      	cmp	r3, #45	; 0x2d
 8005c2e:	d106      	bne.n	8005c3e <mg_atod+0x3e>
    sign = -1, i++;
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	3301      	adds	r3, #1
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3c:	e00a      	b.n	8005c54 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 8005c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	da27      	bge.n	8005c96 <mg_atod+0x96>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b2b      	cmp	r3, #43	; 0x2b
 8005c4c:	d123      	bne.n	8005c96 <mg_atod+0x96>
    i++;
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	3301      	adds	r3, #1
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005c54:	e01f      	b.n	8005c96 <mg_atod+0x96>
    d *= 10.0;
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	4b9d      	ldr	r3, [pc, #628]	; (8005ed0 <mg_atod+0x2d0>)
 8005c5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005c60:	f7fa fcfa 	bl	8000658 <__aeabi_dmul>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    d += p[i] - '0';
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	3b30      	subs	r3, #48	; 0x30
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fa fc84 	bl	8000584 <__aeabi_i2d>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005c84:	f7fa fb32 	bl	80002ec <__adddf3>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	3301      	adds	r3, #1
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
 8005c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	da0b      	bge.n	8005cb6 <mg_atod+0xb6>
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b2f      	cmp	r3, #47	; 0x2f
 8005ca8:	d905      	bls.n	8005cb6 <mg_atod+0xb6>
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b39      	cmp	r3, #57	; 0x39
 8005cb4:	d9cf      	bls.n	8005c56 <mg_atod+0x56>
  }
  d *= sign;
 8005cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb8:	f7fa fc64 	bl	8000584 <__aeabi_i2d>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005cc4:	f7fa fcc8 	bl	8000658 <__aeabi_dmul>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8005cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	da59      	bge.n	8005d8c <mg_atod+0x18c>
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce2:	d153      	bne.n	8005d8c <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005cf0:	a375      	add	r3, pc, #468	; (adr r3, 8005ec8 <mg_atod+0x2c8>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005d00:	e023      	b.n	8005d4a <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	3b30      	subs	r3, #48	; 0x30
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fa fc39 	bl	8000584 <__aeabi_i2d>
 8005d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d16:	f7fa fc9f 	bl	8000658 <__aeabi_dmul>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d22:	f7fa fae3 	bl	80002ec <__adddf3>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      base /= 10.0;
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	4b67      	ldr	r3, [pc, #412]	; (8005ed0 <mg_atod+0x2d0>)
 8005d34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d38:	f7fa fdb8 	bl	80008ac <__aeabi_ddiv>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	3301      	adds	r3, #1
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	da0b      	bge.n	8005d6a <mg_atod+0x16a>
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b2f      	cmp	r3, #47	; 0x2f
 8005d5c:	d905      	bls.n	8005d6a <mg_atod+0x16a>
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b39      	cmp	r3, #57	; 0x39
 8005d68:	d9cb      	bls.n	8005d02 <mg_atod+0x102>
    }
    d += frac * sign;
 8005d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6c:	f7fa fc0a 	bl	8000584 <__aeabi_i2d>
 8005d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d74:	f7fa fc70 	bl	8000658 <__aeabi_dmul>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005d80:	f7fa fab4 	bl	80002ec <__adddf3>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8005d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	f280 8085 	bge.w	8005ea0 <mg_atod+0x2a0>
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b65      	cmp	r3, #101	; 0x65
 8005da0:	d005      	beq.n	8005dae <mg_atod+0x1ae>
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b45      	cmp	r3, #69	; 0x45
 8005dac:	d178      	bne.n	8005ea0 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
    i++;
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	3301      	adds	r3, #1
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 8005dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	da0a      	bge.n	8005dda <mg_atod+0x1da>
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b2d      	cmp	r3, #45	; 0x2d
 8005dce:	d104      	bne.n	8005dda <mg_atod+0x1da>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8005dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	da19      	bge.n	8005e16 <mg_atod+0x216>
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b2b      	cmp	r3, #43	; 0x2b
 8005dec:	d113      	bne.n	8005e16 <mg_atod+0x216>
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	3301      	adds	r3, #1
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005df4:	e00f      	b.n	8005e16 <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	4619      	mov	r1, r3
 8005e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	637a      	str	r2, [r7, #52]	; 0x34
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	3b30      	subs	r3, #48	; 0x30
 8005e12:	440b      	add	r3, r1
 8005e14:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	da0f      	bge.n	8005e3e <mg_atod+0x23e>
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b2f      	cmp	r3, #47	; 0x2f
 8005e28:	d909      	bls.n	8005e3e <mg_atod+0x23e>
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b39      	cmp	r3, #57	; 0x39
 8005e34:	d803      	bhi.n	8005e3e <mg_atod+0x23e>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005e3c:	dbdb      	blt.n	8005df6 <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <mg_atod+0x24a>
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	425b      	negs	r3, r3
 8005e48:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	e00d      	b.n	8005e6c <mg_atod+0x26c>
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	4b1e      	ldr	r3, [pc, #120]	; (8005ed0 <mg_atod+0x2d0>)
 8005e56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005e5a:	f7fa fbfd 	bl	8000658 <__aeabi_dmul>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	dbed      	blt.n	8005e50 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e00d      	b.n	8005e96 <mg_atod+0x296>
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <mg_atod+0x2d0>)
 8005e80:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005e84:	f7fa fd12 	bl	80008ac <__aeabi_ddiv>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	425b      	negs	r3, r3
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	dbec      	blt.n	8005e7a <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <mg_atod+0x2ac>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eaa:	601a      	str	r2, [r3, #0]
  return d;
 8005eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005eb0:	ec43 2b17 	vmov	d7, r2, r3
}
 8005eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8005eb8:	eef0 0a67 	vmov.f32	s1, s15
 8005ebc:	3740      	adds	r7, #64	; 0x40
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	9999999a 	.word	0x9999999a
 8005ecc:	3fb99999 	.word	0x3fb99999
 8005ed0:	40240000 	.word	0x40240000

08005ed4 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b09b      	sub	sp, #108	; 0x6c
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	f107 0408 	add.w	r4, r7, #8
 8005ede:	e884 0003 	stmia.w	r4, {r0, r1}
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8005efc:	2300      	movs	r3, #0
 8005efe:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 8005f00:	2300      	movs	r3, #0
 8005f02:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 8005f04:	2301      	movs	r3, #1
 8005f06:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <mg_json_get+0x4c>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b24      	cmp	r3, #36	; 0x24
 8005f26:	d002      	beq.n	8005f2e <mg_json_get+0x5a>
 8005f28:	f06f 0301 	mvn.w	r3, #1
 8005f2c:	e2e2      	b.n	80064f4 <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8005f2e:	2300      	movs	r3, #0
 8005f30:	663b      	str	r3, [r7, #96]	; 0x60
 8005f32:	e2d8      	b.n	80064e6 <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 8005f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f38:	4413      	add	r3, r2
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8005f40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	f000 82c8 	beq.w	80064da <mg_json_get+0x606>
 8005f4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	f000 82c3 	beq.w	80064da <mg_json_get+0x606>
 8005f54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f58:	2b0a      	cmp	r3, #10
 8005f5a:	f000 82be 	beq.w	80064da <mg_json_get+0x606>
 8005f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f62:	2b0d      	cmp	r3, #13
 8005f64:	f000 82b9 	beq.w	80064da <mg_json_get+0x606>
    switch (expecting) {
 8005f68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	f200 82b7 	bhi.w	80064e0 <mg_json_get+0x60c>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <mg_json_get+0xa4>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08006271 	.word	0x08006271
 8005f80:	080063fb 	.word	0x080063fb
 8005f84:	08006411 	.word	0x08006411
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8005f88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d101      	bne.n	8005f94 <mg_json_get+0xc0>
 8005f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f92:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 8005f94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f98:	2b7b      	cmp	r3, #123	; 0x7b
 8005f9a:	d12b      	bne.n	8005ff4 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f9e:	2b1d      	cmp	r3, #29
 8005fa0:	dd02      	ble.n	8005fa8 <mg_json_get+0xd4>
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa6:	e2a5      	b.n	80064f4 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8005fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d114      	bne.n	8005fda <mg_json_get+0x106>
 8005fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8005fba:	d10e      	bne.n	8005fda <mg_json_get+0x106>
 8005fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d10a      	bne.n	8005fda <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	657b      	str	r3, [r7, #84]	; 0x54
 8005fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fcc:	3301      	adds	r3, #1
 8005fce:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8005fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fe0:	3368      	adds	r3, #104	; 0x68
 8005fe2:	443b      	add	r3, r7
 8005fe4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005fe8:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8005ff2:	e275      	b.n	80064e0 <mg_json_get+0x60c>
        } else if (c == '[') {
 8005ff4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ff8:	2b5b      	cmp	r3, #91	; 0x5b
 8005ffa:	d14e      	bne.n	800609a <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ffe:	2b1d      	cmp	r3, #29
 8006000:	dd02      	ble.n	8006008 <mg_json_get+0x134>
 8006002:	f04f 33ff 	mov.w	r3, #4294967295
 8006006:	e275      	b.n	80064f4 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8006008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800600a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600c:	429a      	cmp	r2, r3
 800600e:	d13a      	bne.n	8006086 <mg_json_get+0x1b2>
 8006010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b5b      	cmp	r3, #91	; 0x5b
 800601a:	d134      	bne.n	8006086 <mg_json_get+0x1b2>
 800601c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800601e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006020:	429a      	cmp	r2, r3
 8006022:	d130      	bne.n	8006086 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8006024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006026:	3301      	adds	r3, #1
 8006028:	657b      	str	r3, [r7, #84]	; 0x54
 800602a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602c:	3301      	adds	r3, #1
 800602e:	653b      	str	r3, [r7, #80]	; 0x50
 8006030:	2300      	movs	r3, #0
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006034:	2300      	movs	r3, #0
 8006036:	64bb      	str	r3, [r7, #72]	; 0x48
 8006038:	e010      	b.n	800605c <mg_json_get+0x188>
              ei *= 10;
 800603a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 8006046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4413      	add	r3, r2
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	3b30      	subs	r3, #48	; 0x30
 8006050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006052:	4413      	add	r3, r2
 8006054:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006058:	3301      	adds	r3, #1
 800605a:	653b      	str	r3, [r7, #80]	; 0x50
 800605c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b5d      	cmp	r3, #93	; 0x5d
 8006066:	d005      	beq.n	8006074 <mg_json_get+0x1a0>
 8006068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e2      	bne.n	800603a <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8006074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4413      	add	r3, r2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <mg_json_get+0x1b2>
 8006080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006082:	3301      	adds	r3, #1
 8006084:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 8006086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	65ba      	str	r2, [r7, #88]	; 0x58
 800608c:	3368      	adds	r3, #104	; 0x68
 800608e:	443b      	add	r3, r7
 8006090:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006094:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8006098:	e222      	b.n	80064e0 <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 800609a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800609e:	2b5d      	cmp	r3, #93	; 0x5d
 80060a0:	d13a      	bne.n	8006118 <mg_json_get+0x244>
 80060a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	dd37      	ble.n	8006118 <mg_json_get+0x244>
          MG_EOO(']');
 80060a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d106      	bne.n	80060be <mg_json_get+0x1ea>
 80060b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d002      	beq.n	80060be <mg_json_get+0x1ea>
 80060b8:	f06f 0302 	mvn.w	r3, #2
 80060bc:	e21a      	b.n	80064f4 <mg_json_get+0x620>
 80060be:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80060c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c4:	3b01      	subs	r3, #1
 80060c6:	3368      	adds	r3, #104	; 0x68
 80060c8:	443b      	add	r3, r7
 80060ca:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80060ce:	3302      	adds	r3, #2
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d002      	beq.n	80060da <mg_json_get+0x206>
 80060d4:	f06f 0301 	mvn.w	r3, #1
 80060d8:	e20c      	b.n	80064f4 <mg_json_get+0x620>
 80060da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060dc:	3b01      	subs	r3, #1
 80060de:	65bb      	str	r3, [r7, #88]	; 0x58
 80060e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e4:	429a      	cmp	r2, r3
 80060e6:	f040 809c 	bne.w	8006222 <mg_json_get+0x34e>
 80060ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 8095 	bne.w	8006222 <mg_json_get+0x34e>
 80060f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fc:	429a      	cmp	r2, r3
 80060fe:	f040 8090 	bne.w	8006222 <mg_json_get+0x34e>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <mg_json_get+0x240>
 8006108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800610a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006116:	e1ed      	b.n	80064f4 <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8006118:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800611c:	2b74      	cmp	r3, #116	; 0x74
 800611e:	d113      	bne.n	8006148 <mg_json_get+0x274>
 8006120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006122:	3303      	adds	r3, #3
 8006124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006126:	429a      	cmp	r2, r3
 8006128:	dd0e      	ble.n	8006148 <mg_json_get+0x274>
 800612a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800612e:	4413      	add	r3, r2
 8006130:	2204      	movs	r2, #4
 8006132:	4998      	ldr	r1, [pc, #608]	; (8006394 <mg_json_get+0x4c0>)
 8006134:	4618      	mov	r0, r3
 8006136:	f00c fa96 	bl	8012666 <memcmp>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <mg_json_get+0x274>
          i += 3;
 8006140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006142:	3303      	adds	r3, #3
 8006144:	663b      	str	r3, [r7, #96]	; 0x60
 8006146:	e06c      	b.n	8006222 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8006148:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800614c:	2b6e      	cmp	r3, #110	; 0x6e
 800614e:	d113      	bne.n	8006178 <mg_json_get+0x2a4>
 8006150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006152:	3303      	adds	r3, #3
 8006154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006156:	429a      	cmp	r2, r3
 8006158:	dd0e      	ble.n	8006178 <mg_json_get+0x2a4>
 800615a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800615c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800615e:	4413      	add	r3, r2
 8006160:	2204      	movs	r2, #4
 8006162:	498d      	ldr	r1, [pc, #564]	; (8006398 <mg_json_get+0x4c4>)
 8006164:	4618      	mov	r0, r3
 8006166:	f00c fa7e 	bl	8012666 <memcmp>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <mg_json_get+0x2a4>
          i += 3;
 8006170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006172:	3303      	adds	r3, #3
 8006174:	663b      	str	r3, [r7, #96]	; 0x60
 8006176:	e054      	b.n	8006222 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8006178:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800617c:	2b66      	cmp	r3, #102	; 0x66
 800617e:	d113      	bne.n	80061a8 <mg_json_get+0x2d4>
 8006180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006182:	3304      	adds	r3, #4
 8006184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006186:	429a      	cmp	r2, r3
 8006188:	dd0e      	ble.n	80061a8 <mg_json_get+0x2d4>
 800618a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800618c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800618e:	4413      	add	r3, r2
 8006190:	2205      	movs	r2, #5
 8006192:	4982      	ldr	r1, [pc, #520]	; (800639c <mg_json_get+0x4c8>)
 8006194:	4618      	mov	r0, r3
 8006196:	f00c fa66 	bl	8012666 <memcmp>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <mg_json_get+0x2d4>
          i += 4;
 80061a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a2:	3304      	adds	r3, #4
 80061a4:	663b      	str	r3, [r7, #96]	; 0x60
 80061a6:	e03c      	b.n	8006222 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80061a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061ac:	2b2d      	cmp	r3, #45	; 0x2d
 80061ae:	d007      	beq.n	80061c0 <mg_json_get+0x2ec>
 80061b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061b4:	2b2f      	cmp	r3, #47	; 0x2f
 80061b6:	d916      	bls.n	80061e6 <mg_json_get+0x312>
 80061b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061bc:	2b39      	cmp	r3, #57	; 0x39
 80061be:	d812      	bhi.n	80061e6 <mg_json_get+0x312>
          int numlen = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 80061c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c8:	18d0      	adds	r0, r2, r3
 80061ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f107 0210 	add.w	r2, r7, #16
 80061d4:	4619      	mov	r1, r3
 80061d6:	f7ff fd13 	bl	8005c00 <mg_atod>
          i += numlen - 1;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	3b01      	subs	r3, #1
 80061de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061e0:	4413      	add	r3, r2
 80061e2:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 80061e4:	e01d      	b.n	8006222 <mg_json_get+0x34e>
        } else if (c == '"') {
 80061e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061ea:	2b22      	cmp	r3, #34	; 0x22
 80061ec:	d116      	bne.n	800621c <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80061ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f0:	3301      	adds	r3, #1
 80061f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f4:	18d0      	adds	r0, r2, r3
 80061f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4619      	mov	r1, r3
 8006200:	f7ff fcba 	bl	8005b78 <mg_pass_string>
 8006204:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	2b00      	cmp	r3, #0
 800620a:	da01      	bge.n	8006210 <mg_json_get+0x33c>
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	e171      	b.n	80064f4 <mg_json_get+0x620>
          i += n + 1;
 8006210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006212:	3301      	adds	r3, #1
 8006214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006216:	4413      	add	r3, r2
 8006218:	663b      	str	r3, [r7, #96]	; 0x60
 800621a:	e002      	b.n	8006222 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800621c:	f06f 0301 	mvn.w	r3, #1
 8006220:	e168      	b.n	80064f4 <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 8006222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006226:	429a      	cmp	r2, r3
 8006228:	d114      	bne.n	8006254 <mg_json_get+0x380>
 800622a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10e      	bne.n	8006254 <mg_json_get+0x380>
 8006236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623a:	429a      	cmp	r2, r3
 800623c:	d10a      	bne.n	8006254 <mg_json_get+0x380>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <mg_json_get+0x37c>
 8006244:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006252:	e14f      	b.n	80064f4 <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 8006254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006258:	429a      	cmp	r2, r3
 800625a:	d105      	bne.n	8006268 <mg_json_get+0x394>
 800625c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625e:	2b00      	cmp	r3, #0
 8006260:	db02      	blt.n	8006268 <mg_json_get+0x394>
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	3301      	adds	r3, #1
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8006268:	2303      	movs	r3, #3
 800626a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 800626e:	e137      	b.n	80064e0 <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 8006270:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006274:	2b22      	cmp	r3, #34	; 0x22
 8006276:	d170      	bne.n	800635a <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800627a:	3301      	adds	r3, #1
 800627c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627e:	18d0      	adds	r0, r2, r3
 8006280:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	4619      	mov	r1, r3
 800628a:	f7ff fc75 	bl	8005b78 <mg_pass_string>
 800628e:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	2b00      	cmp	r3, #0
 8006294:	da01      	bge.n	800629a <mg_json_get+0x3c6>
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	e12c      	b.n	80064f4 <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800629a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	4413      	add	r3, r2
 80062a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062a4:	429a      	cmp	r2, r3
 80062a6:	dc02      	bgt.n	80062ae <mg_json_get+0x3da>
 80062a8:	f06f 0302 	mvn.w	r3, #2
 80062ac:	e122      	b.n	80064f4 <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80062ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b2:	429a      	cmp	r2, r3
 80062b4:	da02      	bge.n	80062bc <mg_json_get+0x3e8>
 80062b6:	f06f 0302 	mvn.w	r3, #2
 80062ba:	e11b      	b.n	80064f4 <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80062bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d109      	bne.n	80062d8 <mg_json_get+0x404>
 80062c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c6:	3b01      	subs	r3, #1
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b2e      	cmp	r3, #46	; 0x2e
 80062d0:	d002      	beq.n	80062d8 <mg_json_get+0x404>
 80062d2:	f06f 0302 	mvn.w	r3, #2
 80062d6:	e10d      	b.n	80064f4 <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 80062d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062dc:	429a      	cmp	r2, r3
 80062de:	d133      	bne.n	8006348 <mg_json_get+0x474>
 80062e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e2:	3b01      	subs	r3, #1
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b2e      	cmp	r3, #46	; 0x2e
 80062ec:	d12c      	bne.n	8006348 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 80062ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f0:	3301      	adds	r3, #1
 80062f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062f4:	18d0      	adds	r0, r2, r3
 80062f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062fe:	4619      	mov	r1, r3
 8006300:	f00c f9f0 	bl	80126e4 <strncmp>
 8006304:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8006306:	2b00      	cmp	r3, #0
 8006308:	d11e      	bne.n	8006348 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800630a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	4413      	add	r3, r2
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006318:	2b00      	cmp	r3, #0
 800631a:	d011      	beq.n	8006340 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800631c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	4413      	add	r3, r2
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4413      	add	r3, r2
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b2e      	cmp	r3, #46	; 0x2e
 800632c:	d008      	beq.n	8006340 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800632e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	4413      	add	r3, r2
 8006334:	461a      	mov	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4413      	add	r3, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800633c:	2b5b      	cmp	r3, #91	; 0x5b
 800633e:	d103      	bne.n	8006348 <mg_json_get+0x474>
            pos += n;
 8006340:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	4413      	add	r3, r2
 8006346:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	3301      	adds	r3, #1
 800634c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800634e:	4413      	add	r3, r2
 8006350:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 8006352:	2302      	movs	r3, #2
 8006354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006358:	e0c1      	b.n	80064de <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 800635a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800635e:	2b7d      	cmp	r3, #125	; 0x7d
 8006360:	d148      	bne.n	80063f4 <mg_json_get+0x520>
          MG_EOO('}');
 8006362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006366:	429a      	cmp	r2, r3
 8006368:	d106      	bne.n	8006378 <mg_json_get+0x4a4>
 800636a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800636c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636e:	429a      	cmp	r2, r3
 8006370:	d002      	beq.n	8006378 <mg_json_get+0x4a4>
 8006372:	f06f 0302 	mvn.w	r3, #2
 8006376:	e0bd      	b.n	80064f4 <mg_json_get+0x620>
 8006378:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800637c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800637e:	3b01      	subs	r3, #1
 8006380:	3368      	adds	r3, #104	; 0x68
 8006382:	443b      	add	r3, r7
 8006384:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006388:	3302      	adds	r3, #2
 800638a:	429a      	cmp	r2, r3
 800638c:	d008      	beq.n	80063a0 <mg_json_get+0x4cc>
 800638e:	f06f 0301 	mvn.w	r3, #1
 8006392:	e0af      	b.n	80064f4 <mg_json_get+0x620>
 8006394:	0801418c 	.word	0x0801418c
 8006398:	08014194 	.word	0x08014194
 800639c:	0801419c 	.word	0x0801419c
 80063a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063a2:	3b01      	subs	r3, #1
 80063a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80063a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d114      	bne.n	80063d8 <mg_json_get+0x504>
 80063ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10e      	bne.n	80063d8 <mg_json_get+0x504>
 80063ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063be:	429a      	cmp	r2, r3
 80063c0:	d10a      	bne.n	80063d8 <mg_json_get+0x504>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <mg_json_get+0x500>
 80063c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d6:	e08d      	b.n	80064f4 <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 80063d8:	2303      	movs	r3, #3
 80063da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 80063de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d17b      	bne.n	80064de <mg_json_get+0x60a>
 80063e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	db78      	blt.n	80064de <mg_json_get+0x60a>
 80063ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ee:	3301      	adds	r3, #1
 80063f0:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 80063f2:	e074      	b.n	80064de <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 80063f4:	f06f 0301 	mvn.w	r3, #1
 80063f8:	e07c      	b.n	80064f4 <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 80063fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063fe:	2b3a      	cmp	r3, #58	; 0x3a
 8006400:	d103      	bne.n	800640a <mg_json_get+0x536>
          expecting = S_VALUE;
 8006402:	2300      	movs	r3, #0
 8006404:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006408:	e06a      	b.n	80064e0 <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 800640a:	f06f 0301 	mvn.w	r3, #1
 800640e:	e071      	b.n	80064f4 <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8006410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006412:	2b00      	cmp	r3, #0
 8006414:	dc02      	bgt.n	800641c <mg_json_get+0x548>
          return MG_JSON_INVALID;
 8006416:	f06f 0301 	mvn.w	r3, #1
 800641a:	e06b      	b.n	80064f4 <mg_json_get+0x620>
        } else if (c == ',') {
 800641c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006420:	2b2c      	cmp	r3, #44	; 0x2c
 8006422:	d10d      	bne.n	8006440 <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8006424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006426:	3b01      	subs	r3, #1
 8006428:	3368      	adds	r3, #104	; 0x68
 800642a:	443b      	add	r3, r7
 800642c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006430:	2b7b      	cmp	r3, #123	; 0x7b
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800643e:	e04f      	b.n	80064e0 <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 8006440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006444:	2b5d      	cmp	r3, #93	; 0x5d
 8006446:	d003      	beq.n	8006450 <mg_json_get+0x57c>
 8006448:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800644c:	2b7d      	cmp	r3, #125	; 0x7d
 800644e:	d13f      	bne.n	80064d0 <mg_json_get+0x5fc>
          MG_EOO('O');
 8006450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006454:	429a      	cmp	r2, r3
 8006456:	d106      	bne.n	8006466 <mg_json_get+0x592>
 8006458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645c:	429a      	cmp	r2, r3
 800645e:	d002      	beq.n	8006466 <mg_json_get+0x592>
 8006460:	f06f 0302 	mvn.w	r3, #2
 8006464:	e046      	b.n	80064f4 <mg_json_get+0x620>
 8006466:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800646a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800646c:	3b01      	subs	r3, #1
 800646e:	3368      	adds	r3, #104	; 0x68
 8006470:	443b      	add	r3, r7
 8006472:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006476:	3302      	adds	r3, #2
 8006478:	429a      	cmp	r2, r3
 800647a:	d002      	beq.n	8006482 <mg_json_get+0x5ae>
 800647c:	f06f 0301 	mvn.w	r3, #1
 8006480:	e038      	b.n	80064f4 <mg_json_get+0x620>
 8006482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006484:	3b01      	subs	r3, #1
 8006486:	65bb      	str	r3, [r7, #88]	; 0x58
 8006488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800648a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648c:	429a      	cmp	r2, r3
 800648e:	d114      	bne.n	80064ba <mg_json_get+0x5e6>
 8006490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4413      	add	r3, r2
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10e      	bne.n	80064ba <mg_json_get+0x5e6>
 800649c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800649e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d10a      	bne.n	80064ba <mg_json_get+0x5e6>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <mg_json_get+0x5e2>
 80064aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b8:	e01c      	b.n	80064f4 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 80064ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064be:	429a      	cmp	r2, r3
 80064c0:	d109      	bne.n	80064d6 <mg_json_get+0x602>
 80064c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db06      	blt.n	80064d6 <mg_json_get+0x602>
 80064c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ca:	3301      	adds	r3, #1
 80064cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ce:	e002      	b.n	80064d6 <mg_json_get+0x602>
          return MG_JSON_INVALID;
 80064d0:	f06f 0301 	mvn.w	r3, #1
 80064d4:	e00e      	b.n	80064f4 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 80064d6:	bf00      	nop
        break;
 80064d8:	e002      	b.n	80064e0 <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <mg_json_get+0x60c>
        break;
 80064de:	bf00      	nop
  for (i = 0; i < len; i++) {
 80064e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e2:	3301      	adds	r3, #1
 80064e4:	663b      	str	r3, [r7, #96]	; 0x60
 80064e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f6ff ad22 	blt.w	8005f34 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 80064f0:	f06f 0302 	mvn.w	r3, #2
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	376c      	adds	r7, #108	; 0x6c
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd90      	pop	{r4, r7, pc}

080064fc <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80064fc:	b590      	push	{r4, r7, lr}
 80064fe:	b089      	sub	sp, #36	; 0x24
 8006500:	af00      	add	r7, sp, #0
 8006502:	f107 0408 	add.w	r4, r7, #8
 8006506:	e884 0003 	stmia.w	r4, {r0, r1}
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006512:	f107 0314 	add.w	r3, r7, #20
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	f107 0108 	add.w	r1, r7, #8
 800651c:	c903      	ldmia	r1, {r0, r1}
 800651e:	f7ff fcd9 	bl	8005ed4 <mg_json_get>
 8006522:	61b8      	str	r0, [r7, #24]
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	db25      	blt.n	8006576 <mg_json_get_num+0x7a>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	4413      	add	r3, r2
 8006530:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006532:	2b2d      	cmp	r3, #45	; 0x2d
 8006534:	d00b      	beq.n	800654e <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	4413      	add	r3, r2
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b2f      	cmp	r3, #47	; 0x2f
 8006540:	d919      	bls.n	8006576 <mg_json_get_num+0x7a>
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	4413      	add	r3, r2
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b39      	cmp	r3, #57	; 0x39
 800654c:	d813      	bhi.n	8006576 <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00e      	beq.n	8006572 <mg_json_get_num+0x76>
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	4413      	add	r3, r2
 800655a:	6979      	ldr	r1, [r7, #20]
 800655c:	2200      	movs	r2, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fb4e 	bl	8005c00 <mg_atod>
 8006564:	eeb0 7a40 	vmov.f32	s14, s0
 8006568:	eef0 7a60 	vmov.f32	s15, s1
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8006572:	2301      	movs	r3, #1
 8006574:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
}
 8006582:	4618      	mov	r0, r3
 8006584:	3724      	adds	r7, #36	; 0x24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd90      	pop	{r4, r7, pc}
	...

0800658c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <logc+0x20>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <logc+0x24>)
 800659c:	6811      	ldr	r1, [r2, #0]
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	2000023c 	.word	0x2000023c
 80065b0:	200006d0 	.word	0x200006d0

080065b4 <logs>:

static void logs(const char *buf, size_t len) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	e009      	b.n	80065d8 <logs+0x24>
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ffdd 	bl	800658c <logc>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d3f1      	bcc.n	80065c4 <logs+0x10>
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <mg_log_set>:

void mg_log_set(int log_level) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <mg_log_set+0x34>)
 80065f6:	f640 22c8 	movw	r2, #2760	; 0xac8
 80065fa:	490a      	ldr	r1, [pc, #40]	; (8006624 <mg_log_set+0x38>)
 80065fc:	2003      	movs	r0, #3
 80065fe:	f000 f817 	bl	8006630 <mg_log_prefix>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <mg_log_set+0x24>
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4807      	ldr	r0, [pc, #28]	; (8006628 <mg_log_set+0x3c>)
 800660c:	f000 f86a 	bl	80066e4 <mg_log>
  s_level = log_level;
 8006610:	4a06      	ldr	r2, [pc, #24]	; (800662c <mg_log_set+0x40>)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6013      	str	r3, [r2, #0]
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	08014e6c 	.word	0x08014e6c
 8006624:	08013568 	.word	0x08013568
 8006628:	080141a4 	.word	0x080141a4
 800662c:	20000238 	.word	0x20000238

08006630 <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8006630:	b590      	push	{r4, r7, lr}
 8006632:	b099      	sub	sp, #100	; 0x64
 8006634:	af06      	add	r7, sp, #24
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 800663e:	4b27      	ldr	r3, [pc, #156]	; (80066dc <mg_log_prefix+0xac>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	429a      	cmp	r2, r3
 8006646:	dc43      	bgt.n	80066d0 <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 8006648:	212f      	movs	r1, #47	; 0x2f
 800664a:	68b8      	ldr	r0, [r7, #8]
 800664c:	f00c f85c 	bl	8012708 <strrchr>
 8006650:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 8006652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <mg_log_prefix+0x32>
 8006658:	215c      	movs	r1, #92	; 0x5c
 800665a:	68b8      	ldr	r0, [r7, #8]
 800665c:	f00c f854 	bl	8012708 <strrchr>
 8006660:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8006662:	f001 fd55 	bl	8008110 <mg_millis>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800666c:	2900      	cmp	r1, #0
 800666e:	d002      	beq.n	8006676 <mg_log_prefix+0x46>
 8006670:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006672:	3101      	adds	r1, #1
 8006674:	e000      	b.n	8006678 <mg_log_prefix+0x48>
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	f107 0414 	add.w	r4, r7, #20
 800667c:	6838      	ldr	r0, [r7, #0]
 800667e:	9005      	str	r0, [sp, #20]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	9004      	str	r0, [sp, #16]
 8006684:	9103      	str	r1, [sp, #12]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	9102      	str	r1, [sp, #8]
 800668a:	e9cd 2300 	strd	r2, r3, [sp]
 800668e:	4a14      	ldr	r2, [pc, #80]	; (80066e0 <mg_log_prefix+0xb0>)
 8006690:	2129      	movs	r1, #41	; 0x29
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fb4a 	bl	8006d2c <mg_snprintf>
 8006698:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800669a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669c:	2b27      	cmp	r3, #39	; 0x27
 800669e:	d90a      	bls.n	80066b6 <mg_log_prefix+0x86>
 80066a0:	2327      	movs	r3, #39	; 0x27
 80066a2:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 80066a4:	e007      	b.n	80066b6 <mg_log_prefix+0x86>
 80066a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	643a      	str	r2, [r7, #64]	; 0x40
 80066ac:	3348      	adds	r3, #72	; 0x48
 80066ae:	443b      	add	r3, r7
 80066b0:	2220      	movs	r2, #32
 80066b2:	f803 2c34 	strb.w	r2, [r3, #-52]
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	2b28      	cmp	r3, #40	; 0x28
 80066ba:	d9f4      	bls.n	80066a6 <mg_log_prefix+0x76>
    logs(buf, n - 1);
 80066bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066be:	1e5a      	subs	r2, r3, #1
 80066c0:	f107 0314 	add.w	r3, r7, #20
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff ff74 	bl	80065b4 <logs>
    return true;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <mg_log_prefix+0xa2>
  } else {
    return false;
 80066d0:	2300      	movs	r3, #0
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	374c      	adds	r7, #76	; 0x4c
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd90      	pop	{r4, r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000238 	.word	0x20000238
 80066e0:	080141bc 	.word	0x080141bc

080066e4 <mg_log>:

void mg_log(const char *fmt, ...) {
 80066e4:	b40f      	push	{r0, r1, r2, r3}
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <mg_log+0x34>)
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	4b09      	ldr	r3, [pc, #36]	; (800671c <mg_log+0x38>)
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	f7fb ff61 	bl	80025c4 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8006702:	2102      	movs	r1, #2
 8006704:	4806      	ldr	r0, [pc, #24]	; (8006720 <mg_log+0x3c>)
 8006706:	f7ff ff55 	bl	80065b4 <logs>
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006714:	b004      	add	sp, #16
 8006716:	4770      	bx	lr
 8006718:	2000023c 	.word	0x2000023c
 800671c:	200006d0 	.word	0x200006d0
 8006720:	08013700 	.word	0x08013700

08006724 <nibble>:

static unsigned char nibble(unsigned c) {
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b09      	cmp	r3, #9
 8006730:	d804      	bhi.n	800673c <nibble+0x18>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	3330      	adds	r3, #48	; 0x30
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e003      	b.n	8006744 <nibble+0x20>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	3357      	adds	r3, #87	; 0x57
 8006742:	b2db      	uxtb	r3, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b08a      	sub	sp, #40	; 0x28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8006764:	2300      	movs	r3, #0
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	e07a      	b.n	8006860 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	2b00      	cmp	r3, #0
 8006772:	d13a      	bne.n	80067ea <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00f      	beq.n	800679a <mg_hexdump+0x4a>
 800677a:	2102      	movs	r1, #2
 800677c:	484c      	ldr	r0, [pc, #304]	; (80068b0 <mg_hexdump+0x160>)
 800677e:	f7ff ff19 	bl	80065b4 <logs>
 8006782:	f107 030c 	add.w	r3, r7, #12
 8006786:	2110      	movs	r1, #16
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff ff13 	bl	80065b4 <logs>
 800678e:	200a      	movs	r0, #10
 8006790:	f7ff fefc 	bl	800658c <logc>
 8006794:	2300      	movs	r3, #0
 8006796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	0b1b      	lsrs	r3, r3, #12
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff ffbe 	bl	8006724 <nibble>
 80067a8:	4603      	mov	r3, r0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff feee 	bl	800658c <logc>
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff ffb3 	bl	8006724 <nibble>
 80067be:	4603      	mov	r3, r0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fee3 	bl	800658c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff ffa8 	bl	8006724 <nibble>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fed8 	bl	800658c <logc>
 80067dc:	2030      	movs	r0, #48	; 0x30
 80067de:	f7ff fed5 	bl	800658c <logc>
 80067e2:	2103      	movs	r1, #3
 80067e4:	4833      	ldr	r0, [pc, #204]	; (80068b4 <mg_hexdump+0x164>)
 80067e6:	f7ff fee5 	bl	80065b4 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	4413      	add	r3, r2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff94 	bl	8006724 <nibble>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fec4 	bl	800658c <logc>
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	4413      	add	r3, r2
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff ff87 	bl	8006724 <nibble>
 8006816:	4603      	mov	r3, r0
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff feb7 	bl	800658c <logc>
    logc(' ');                                         // Space after hex number
 800681e:	2020      	movs	r0, #32
 8006820:	f7ff feb4 	bl	800658c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	4413      	add	r3, r2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b1f      	cmp	r3, #31
 800682e:	d90a      	bls.n	8006846 <mg_hexdump+0xf6>
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b7e      	cmp	r3, #126	; 0x7e
 800683a:	d804      	bhi.n	8006846 <mg_hexdump+0xf6>
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	4413      	add	r3, r2
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	e000      	b.n	8006848 <mg_hexdump+0xf8>
 8006846:	222e      	movs	r2, #46	; 0x2e
 8006848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8006852:	3328      	adds	r3, #40	; 0x28
 8006854:	443b      	add	r3, r7
 8006856:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	3301      	adds	r3, #1
 800685e:	623b      	str	r3, [r7, #32]
 8006860:	6a3a      	ldr	r2, [r7, #32]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d380      	bcc.n	800676a <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8006868:	e00d      	b.n	8006886 <mg_hexdump+0x136>
 800686a:	2103      	movs	r1, #3
 800686c:	4811      	ldr	r0, [pc, #68]	; (80068b4 <mg_hexdump+0x164>)
 800686e:	f7ff fea1 	bl	80065b4 <logs>
 8006872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800687c:	3328      	adds	r3, #40	; 0x28
 800687e:	443b      	add	r3, r7
 8006880:	2220      	movs	r2, #32
 8006882:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8006886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d9ed      	bls.n	800686a <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 800688e:	2102      	movs	r1, #2
 8006890:	4807      	ldr	r0, [pc, #28]	; (80068b0 <mg_hexdump+0x160>)
 8006892:	f7ff fe8f 	bl	80065b4 <logs>
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	2110      	movs	r1, #16
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fe89 	bl	80065b4 <logs>
 80068a2:	200a      	movs	r0, #10
 80068a4:	f7ff fe72 	bl	800658c <logc>
}
 80068a8:	bf00      	nop
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	080141d0 	.word	0x080141d0
 80068b4:	080141d4 	.word	0x080141d4

080068b8 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c8:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4805      	ldr	r0, [pc, #20]	; (80068ec <mg_vprintf+0x34>)
 80068d6:	f7fb fe75 	bl	80025c4 <mg_vxprintf>
  return c->send.len - old;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1ad3      	subs	r3, r2, r3
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08006cbd 	.word	0x08006cbd

080068f0 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 80068f0:	b40e      	push	{r1, r2, r3}
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80068fe:	f107 0320 	add.w	r3, r7, #32
 8006902:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8006904:	f107 0308 	add.w	r3, r7, #8
 8006908:	461a      	mov	r2, r3
 800690a:	69f9      	ldr	r1, [r7, #28]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ffd3 	bl	80068b8 <mg_vprintf>
 8006912:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8006914:	68fb      	ldr	r3, [r7, #12]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006920:	b003      	add	sp, #12
 8006922:	4770      	bx	lr

08006924 <mg_alloc_conn>:
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
         mg_aton6(str, addr);
}

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	3390      	adds	r3, #144	; 0x90
 8006932:	4619      	mov	r1, r3
 8006934:	2001      	movs	r0, #1
 8006936:	f00b fbe3 	bl	8012100 <calloc>
 800693a:	4603      	mov	r3, r0
 800693c:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <mg_alloc_conn+0x48>
    c->mgr = mgr;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	61da      	str	r2, [r3, #28]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fb f8cf 	bl	8001b24 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e002      	b.n	8006994 <mg_close_conn+0x1c>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d1f7      	bne.n	800698e <mg_close_conn+0x16>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d103      	bne.n	80069ba <mg_close_conn+0x42>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d103      	bne.n	80069ce <mg_close_conn+0x56>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80069ce:	2200      	movs	r2, #0
 80069d0:	2109      	movs	r1, #9
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fb f8c5 	bl	8001b62 <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 80069d8:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <mg_close_conn+0xb8>)
 80069da:	f640 626c 	movw	r2, #3692	; 0xe6c
 80069de:	4915      	ldr	r1, [pc, #84]	; (8006a34 <mg_close_conn+0xbc>)
 80069e0:	2003      	movs	r0, #3
 80069e2:	f7ff fe25 	bl	8006630 <mg_log_prefix>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <mg_close_conn+0x84>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	461a      	mov	r2, r3
 80069f6:	4810      	ldr	r0, [pc, #64]	; (8006a38 <mg_close_conn+0xc0>)
 80069f8:	f7ff fe74 	bl	80066e4 <mg_log>

  mg_tls_free(c);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f9bd 	bl	8007d7c <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3338      	adds	r3, #56	; 0x38
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff f865 	bl	8005ad6 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3348      	adds	r3, #72	; 0x48
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff f860 	bl	8005ad6 <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 8006a16:	2290      	movs	r2, #144	; 0x90
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f00b fe4d 	bl	80126ba <memset>
  free(c);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f00b fb93 	bl	801214c <free>
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	08014e78 	.word	0x08014e78
 8006a34:	08013568 	.word	0x08013568
 8006a38:	0801426c 	.word	0x0801426c

08006a3c <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff ff68 	bl	8006924 <mg_alloc_conn>
 8006a54:	6178      	str	r0, [r7, #20]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10e      	bne.n	8006a7a <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 8006a5c:	4b40      	ldr	r3, [pc, #256]	; (8006b60 <mg_listen+0x124>)
 8006a5e:	f640 6292 	movw	r2, #3730	; 0xe92
 8006a62:	4940      	ldr	r1, [pc, #256]	; (8006b64 <mg_listen+0x128>)
 8006a64:	2001      	movs	r0, #1
 8006a66:	f7ff fde3 	bl	8006630 <mg_log_prefix>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d071      	beq.n	8006b54 <mg_listen+0x118>
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	483d      	ldr	r0, [pc, #244]	; (8006b68 <mg_listen+0x12c>)
 8006a74:	f7ff fe36 	bl	80066e4 <mg_log>
 8006a78:	e06c      	b.n	8006b54 <mg_listen+0x118>
  } else if (!mg_open_listener(c, url)) {
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	6978      	ldr	r0, [r7, #20]
 8006a7e:	f004 fab1 	bl	800afe4 <mg_open_listener>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f083 0301 	eor.w	r3, r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d018      	beq.n	8006ac0 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8006a8e:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <mg_listen+0x124>)
 8006a90:	f640 6294 	movw	r2, #3732	; 0xe94
 8006a94:	4933      	ldr	r1, [pc, #204]	; (8006b64 <mg_listen+0x128>)
 8006a96:	2001      	movs	r0, #1
 8006a98:	f7ff fdca 	bl	8006630 <mg_log_prefix>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <mg_listen+0x78>
 8006aa2:	f00b fe9f 	bl	80127e4 <__errno>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	482f      	ldr	r0, [pc, #188]	; (8006b6c <mg_listen+0x130>)
 8006ab0:	f7ff fe18 	bl	80066e4 <mg_log>
    free(c);
 8006ab4:	6978      	ldr	r0, [r7, #20]
 8006ab6:	f00b fb49 	bl	801214c <free>
    c = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e049      	b.n	8006b54 <mg_listen+0x118>
  } else {
    c->is_listening = 1;
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8006ace:	2204      	movs	r2, #4
 8006ad0:	4927      	ldr	r1, [pc, #156]	; (8006b70 <mg_listen+0x134>)
 8006ad2:	68b8      	ldr	r0, [r7, #8]
 8006ad4:	f00b fe06 	bl	80126e4 <strncmp>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bf0c      	ite	eq
 8006ade:	2301      	moveq	r3, #1
 8006ae0:	2300      	movne	r3, #0
 8006ae2:	b2d9      	uxtb	r1, r3
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8006aea:	f361 0300 	bfi	r3, r1, #0, #1
 8006aee:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2101      	movs	r1, #1
 8006b10:	6978      	ldr	r0, [r7, #20]
 8006b12:	f7fb f826 	bl	8001b62 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1; // Accepted connection must
 8006b16:	68b8      	ldr	r0, [r7, #8]
 8006b18:	f001 f96c 	bl	8007df4 <mg_url_is_ssl>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d006      	beq.n	8006b30 <mg_listen+0xf4>
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8006b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b2c:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <mg_listen+0x124>)
 8006b32:	f640 629f 	movw	r2, #3743	; 0xe9f
 8006b36:	490b      	ldr	r1, [pc, #44]	; (8006b64 <mg_listen+0x128>)
 8006b38:	2003      	movs	r0, #3
 8006b3a:	f7ff fd79 	bl	8006630 <mg_log_prefix>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <mg_listen+0x118>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4809      	ldr	r0, [pc, #36]	; (8006b74 <mg_listen+0x138>)
 8006b50:	f7ff fdc8 	bl	80066e4 <mg_log>
  }
  return c;
 8006b54:	697b      	ldr	r3, [r7, #20]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	08014e88 	.word	0x08014e88
 8006b64:	08013568 	.word	0x08013568
 8006b68:	08014294 	.word	0x08014294
 8006b6c:	0801429c 	.word	0x0801429c
 8006b70:	0801428c 	.word	0x0801428c
 8006b74:	08013674 	.word	0x08013674

08006b78 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08a      	sub	sp, #40	; 0x28
 8006b7c:	af04      	add	r7, sp, #16
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8006b84:	2128      	movs	r1, #40	; 0x28
 8006b86:	2001      	movs	r0, #1
 8006b88:	f00b faba 	bl	8012100 <calloc>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d014      	beq.n	8006bc0 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	9302      	str	r3, [sp, #8]
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bac:	6979      	ldr	r1, [r7, #20]
 8006bae:	f000 ffd2 	bl	8007b56 <mg_timer_init>
    t->id = mgr->timerid++;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	6211      	str	r1, [r2, #32]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	6013      	str	r3, [r2, #0]
  }
  return t;
 8006bc0:	697b      	ldr	r3, [r7, #20]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8006bd4:	2244      	movs	r2, #68	; 0x44
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f00b fd6e 	bl	80126ba <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f04f 32ff 	mov.w	r2, #4294967295
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006bec:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <mg_mgr_init+0x38>)
 8006bf2:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <mg_mgr_init+0x3c>)
 8006bf8:	60da      	str	r2, [r3, #12]
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	080142cc 	.word	0x080142cc
 8006c08:	080142e0 	.word	0x080142e0

08006c0c <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	71fb      	strb	r3, [r7, #7]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8006c20:	79bb      	ldrb	r3, [r7, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00d      	beq.n	8006c42 <mg_pfn_iobuf_private+0x36>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	1c9a      	adds	r2, r3, #2
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d906      	bls.n	8006c42 <mg_pfn_iobuf_private+0x36>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	3302      	adds	r3, #2
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7fe fe75 	bl	800592c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d811      	bhi.n	8006c74 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	1c58      	adds	r0, r3, #1
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	6088      	str	r0, [r1, #8]
 8006c5e:	4413      	add	r3, r2
 8006c60:	79fa      	ldrb	r2, [r7, #7]
 8006c62:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8006c72:	e00f      	b.n	8006c94 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d209      	bcs.n	8006c94 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	1c58      	adds	r0, r3, #1
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6088      	str	r0, [r1, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	2200      	movs	r2, #0
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff ffac 	bl	8006c0c <mg_pfn_iobuf_private>
}
 8006cb4:	bf00      	nop
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6039      	str	r1, [r7, #0]
 8006cc6:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff ff9c 	bl	8006c0c <mg_pfn_iobuf_private>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8006cfa:	f107 0114 	add.w	r1, r7, #20
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	4809      	ldr	r0, [pc, #36]	; (8006d28 <mg_vsnprintf+0x4c>)
 8006d04:	f7fb fc5e 	bl	80025c4 <mg_vxprintf>
 8006d08:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 8006d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d204      	bcs.n	8006d1c <mg_vsnprintf+0x40>
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	4413      	add	r3, r2
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
  return n;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	08006c9d 	.word	0x08006c9d

08006d2c <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8006d2c:	b40c      	push	{r2, r3}
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8006d38:	f107 031c 	add.w	r3, r7, #28
 8006d3c:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff ffc8 	bl	8006cdc <mg_vsnprintf>
 8006d4c:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d5a:	b002      	add	sp, #8
 8006d5c:	4770      	bx	lr

08006d5e <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	4603      	mov	r3, r0
 8006d66:	6039      	str	r1, [r7, #0]
 8006d68:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f00b fc2f 	bl	80125d0 <putchar>
  (void) param;
}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af04      	add	r7, sp, #16
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3301      	adds	r3, #1
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3302      	adds	r3, #2
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3303      	adds	r3, #3
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	9302      	str	r3, [sp, #8]
 8006da6:	9101      	str	r1, [sp, #4]
 8006da8:	9200      	str	r2, [sp, #0]
 8006daa:	4603      	mov	r3, r0
 8006dac:	4a04      	ldr	r2, [pc, #16]	; (8006dc0 <print_ip4+0x44>)
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7fb fbec 	bl	800258e <mg_xprintf>
 8006db6:	4603      	mov	r3, r0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	08014300 	.word	0x08014300

08006dc4 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	b08e      	sub	sp, #56	; 0x38
 8006dca:	af08      	add	r7, sp, #32
 8006dcc:	6178      	str	r0, [r7, #20]
 8006dce:	6139      	str	r1, [r7, #16]
 8006dd0:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 f949 	bl	800806e <mg_ntohs>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3302      	adds	r3, #2
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 f941 	bl	800806e <mg_ntohs>
 8006dec:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006dee:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3304      	adds	r3, #4
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 f939 	bl	800806e <mg_ntohs>
 8006dfc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006dfe:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3306      	adds	r3, #6
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 f931 	bl	800806e <mg_ntohs>
 8006e0c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006e0e:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3308      	adds	r3, #8
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 f929 	bl	800806e <mg_ntohs>
 8006e1c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006e1e:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	330a      	adds	r3, #10
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f921 	bl	800806e <mg_ntohs>
 8006e2c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006e2e:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	330c      	adds	r3, #12
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f919 	bl	800806e <mg_ntohs>
 8006e3c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006e3e:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	330e      	adds	r3, #14
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 f911 	bl	800806e <mg_ntohs>
 8006e4c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006e4e:	9306      	str	r3, [sp, #24]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	9205      	str	r2, [sp, #20]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	9204      	str	r2, [sp, #16]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	9303      	str	r3, [sp, #12]
 8006e5c:	9602      	str	r6, [sp, #8]
 8006e5e:	9501      	str	r5, [sp, #4]
 8006e60:	9400      	str	r4, [sp, #0]
 8006e62:	4643      	mov	r3, r8
 8006e64:	4a05      	ldr	r2, [pc, #20]	; (8006e7c <print_ip6+0xb8>)
 8006e66:	6939      	ldr	r1, [r7, #16]
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	f7fb fb90 	bl	800258e <mg_xprintf>
 8006e6e:	4603      	mov	r3, r0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e7a:	bf00      	nop
 8006e7c:	0801430c 	.word	0x0801430c

08006e80 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	1d19      	adds	r1, r3, #4
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6011      	str	r1, [r2, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff ff6c 	bl	8006d7c <print_ip4>
 8006ea4:	4603      	mov	r3, r0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	1d19      	adds	r1, r3, #4
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6011      	str	r1, [r2, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	7c9b      	ldrb	r3, [r3, #18]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <mg_print_ip+0x32>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff ff74 	bl	8006dc4 <print_ip6>
 8006edc:	4603      	mov	r3, r0
 8006ede:	e006      	b.n	8006eee <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f7ff ff48 	bl	8006d7c <print_ip4>
 8006eec:	4603      	mov	r3, r0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	1d19      	adds	r1, r3, #4
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6011      	str	r1, [r2, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	8a1b      	ldrh	r3, [r3, #16]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f001 f8a9 	bl	800806e <mg_ntohs>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <mg_print_ip_port+0x44>)
 8006f26:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <mg_print_ip_port+0x48>)
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7fb fb2f 	bl	800258e <mg_xprintf>
 8006f30:	4603      	mov	r3, r0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	08006eaf 	.word	0x08006eaf
 8006f40:	08014328 	.word	0x08014328

08006f44 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8006f44:	b5b0      	push	{r4, r5, r7, lr}
 8006f46:	b08c      	sub	sp, #48	; 0x30
 8006f48:	af06      	add	r7, sp, #24
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	1d19      	adds	r1, r3, #4
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6011      	str	r1, [r2, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	461d      	mov	r5, r3
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	3301      	adds	r3, #1
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	3302      	adds	r3, #2
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3303      	adds	r3, #3
 8006f78:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006f7a:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006f82:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	3305      	adds	r3, #5
 8006f88:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	9403      	str	r4, [sp, #12]
 8006f8e:	9002      	str	r0, [sp, #8]
 8006f90:	9101      	str	r1, [sp, #4]
 8006f92:	9200      	str	r2, [sp, #0]
 8006f94:	462b      	mov	r3, r5
 8006f96:	4a05      	ldr	r2, [pc, #20]	; (8006fac <mg_print_mac+0x68>)
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7fb faf7 	bl	800258e <mg_xprintf>
 8006fa0:	4603      	mov	r3, r0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8006faa:	bf00      	nop
 8006fac:	08014330 	.word	0x08014330

08006fb0 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8006fbc:	4b19      	ldr	r3, [pc, #100]	; (8007024 <mg_esc+0x74>)
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	4b19      	ldr	r3, [pc, #100]	; (8007028 <mg_esc+0x78>)
 8006fc2:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <mg_esc+0x1e>
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	e000      	b.n	8006fd0 <mg_esc+0x20>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e01b      	b.n	800700c <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d112      	bne.n	8007006 <mg_esc+0x56>
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <mg_esc+0x46>
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	e00f      	b.n	8007016 <mg_esc+0x66>
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	4413      	add	r3, r2
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	e007      	b.n	8007016 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	3301      	adds	r3, #1
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1df      	bne.n	8006fd4 <mg_esc+0x24>
  }
  return 0;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	0801417c 	.word	0x0801417c
 8007028:	08014184 	.word	0x08014184

0800702c <mg_escape>:

static char mg_escape(int c) {
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8007034:	2101      	movs	r1, #1
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff ffba 	bl	8006fb0 <mg_esc>
 800703c:	4603      	mov	r3, r0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8007046:	b580      	push	{r7, lr}
 8007048:	b088      	sub	sp, #32
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	2300      	movs	r3, #0
 800705a:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800705c:	2300      	movs	r3, #0
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	e023      	b.n	80070aa <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff ffde 	bl	800702c <mg_escape>
 8007070:	4603      	mov	r3, r0
 8007072:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00c      	beq.n	8007094 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	205c      	movs	r0, #92	; 0x5c
 8007080:	4798      	blx	r3
 8007082:	7dfa      	ldrb	r2, [r7, #23]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	3301      	adds	r3, #1
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e007      	b.n	80070a4 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	781a      	ldrb	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3301      	adds	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d205      	bcs.n	80070be <qcpy+0x78>
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1d1      	bne.n	8007062 <qcpy+0x1c>
    }
  }
  return i + extra;
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	4413      	add	r3, r2
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3720      	adds	r7, #32
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6011      	str	r1, [r2, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6011      	str	r1, [r2, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <mg_print_esc+0x42>
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <mg_print_esc+0x3e>
 8007100:	6938      	ldr	r0, [r7, #16]
 8007102:	f7f9 f8e5 	bl	80002d0 <strlen>
 8007106:	4603      	mov	r3, r0
 8007108:	e000      	b.n	800710c <mg_print_esc+0x40>
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff ff96 	bl	8007046 <qcpy>
 800711a:	4603      	mov	r3, r0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8007130:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	4413      	add	r3, r2
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d906      	bls.n	8007162 <mg_queue_read_len+0x3e>
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <mg_queue_read_len+0x48>)
 8007156:	4a06      	ldr	r2, [pc, #24]	; (8007170 <mg_queue_read_len+0x4c>)
 8007158:	f640 71c5 	movw	r1, #4037	; 0xfc5
 800715c:	4805      	ldr	r0, [pc, #20]	; (8007174 <mg_queue_read_len+0x50>)
 800715e:	f00a ffad 	bl	80120bc <__assert_func>
  return n;
 8007162:	68fb      	ldr	r3, [r7, #12]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	08014394 	.word	0x08014394
 8007170:	08014e94 	.word	0x08014e94
 8007174:	08013568 	.word	0x08013568

08007178 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	4413      	add	r3, r2
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8007194:	f3bf 8f5b 	dmb	ish
}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	2308      	movs	r3, #8
 80071b6:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d312      	bcc.n	80071ea <mg_queue_book+0x46>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	441a      	add	r2, r3
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d808      	bhi.n	80071ea <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e011      	b.n	800720e <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d30b      	bcc.n	800720e <mg_queue_book+0x6a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d206      	bcs.n	800720e <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8007200:	2100      	movs	r1, #0
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff ffb8 	bl	8007178 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	441a      	add	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	441a      	add	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	d207      	bcs.n	8007232 <mg_queue_book+0x8e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	1ad2      	subs	r2, r2, r3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <mg_queue_book+0xa4>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	3304      	adds	r3, #4
 8007242:	441a      	add	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	601a      	str	r2, [r3, #0]
  return space;
 8007248:	697b      	ldr	r3, [r7, #20]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	429a      	cmp	r2, r3
 800726c:	d013      	beq.n	8007296 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff ff58 	bl	8007124 <mg_queue_read_len>
 8007274:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10c      	bne.n	8007296 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	429a      	cmp	r2, r3
 800728c:	d903      	bls.n	8007296 <mg_queue_next+0x42>
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff ff48 	bl	8007124 <mg_queue_read_len>
 8007294:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <mg_queue_next+0x58>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	3304      	adds	r3, #4
 80072a6:	441a      	add	r2, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	441a      	add	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d906      	bls.n	80072ca <mg_queue_next+0x76>
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <mg_queue_next+0x80>)
 80072be:	4a06      	ldr	r2, [pc, #24]	; (80072d8 <mg_queue_next+0x84>)
 80072c0:	f640 71e6 	movw	r1, #4070	; 0xfe6
 80072c4:	4805      	ldr	r0, [pc, #20]	; (80072dc <mg_queue_next+0x88>)
 80072c6:	f00a fef9 	bl	80120bc <__assert_func>
  return len;
 80072ca:	68fb      	ldr	r3, [r7, #12]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	080143b8 	.word	0x080143b8
 80072d8:	08014ea8 	.word	0x08014ea8
 80072dc:	08013568 	.word	0x08013568

080072e0 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <mg_queue_add+0x1e>
 80072f0:	4b13      	ldr	r3, [pc, #76]	; (8007340 <mg_queue_add+0x60>)
 80072f2:	4a14      	ldr	r2, [pc, #80]	; (8007344 <mg_queue_add+0x64>)
 80072f4:	f640 71eb 	movw	r1, #4075	; 0xfeb
 80072f8:	4813      	ldr	r0, [pc, #76]	; (8007348 <mg_queue_add+0x68>)
 80072fa:	f00a fedf 	bl	80120bc <__assert_func>
  mg_queue_write_len(q, len);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff ff39 	bl	8007178 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	4413      	add	r3, r2
 800730e:	f103 0208 	add.w	r2, r3, #8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	429a      	cmp	r2, r3
 8007318:	d906      	bls.n	8007328 <mg_queue_add+0x48>
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <mg_queue_add+0x6c>)
 800731c:	4a09      	ldr	r2, [pc, #36]	; (8007344 <mg_queue_add+0x64>)
 800731e:	f640 71ed 	movw	r1, #4077	; 0xfed
 8007322:	4809      	ldr	r0, [pc, #36]	; (8007348 <mg_queue_add+0x68>)
 8007324:	f00a feca 	bl	80120bc <__assert_func>
  q->head += len + sizeof(uint32_t);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	4413      	add	r3, r2
 8007330:	1d1a      	adds	r2, r3, #4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60da      	str	r2, [r3, #12]
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	080143d4 	.word	0x080143d4
 8007344:	08014eb8 	.word	0x08014eb8
 8007348:	08013568 	.word	0x08013568
 800734c:	080143dc 	.word	0x080143dc

08007350 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	4413      	add	r3, r2
 8007362:	1d1a      	adds	r2, r3, #4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d906      	bls.n	8007384 <mg_queue_del+0x34>
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <mg_queue_del+0x3c>)
 8007378:	4a05      	ldr	r2, [pc, #20]	; (8007390 <mg_queue_del+0x40>)
 800737a:	f640 71f3 	movw	r1, #4083	; 0xff3
 800737e:	4805      	ldr	r0, [pc, #20]	; (8007394 <mg_queue_del+0x44>)
 8007380:	f00a fe9c 	bl	80120bc <__assert_func>
}
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	0801440c 	.word	0x0801440c
 8007390:	08014ec8 	.word	0x08014ec8
 8007394:	08013568 	.word	0x08013568

08007398 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <mg_http_serve_ssi+0x24>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	f240 11f5 	movw	r1, #501	; 0x1f5
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7fd f847 	bl	8004440 <mg_http_reply>
  (void) root, (void) fullpath;
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	080145bc 	.word	0x080145bc

080073c0 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <mg_str_s+0x1e>
 80073d4:	6838      	ldr	r0, [r7, #0]
 80073d6:	f7f8 ff7b 	bl	80002d0 <strlen>
 80073da:	4603      	mov	r3, r0
 80073dc:	e000      	b.n	80073e0 <mg_str_s+0x20>
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
  return str;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	461a      	mov	r2, r3
 80073e6:	f107 0308 	add.w	r3, r7, #8
 80073ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80073ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80073fa:	b480      	push	{r7}
 80073fc:	b087      	sub	sp, #28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	617b      	str	r3, [r7, #20]
  return str;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	461a      	mov	r2, r3
 8007412:	f107 0310 	add.w	r3, r7, #16
 8007416:	e893 0003 	ldmia.w	r3, {r0, r1}
 800741a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <mg_lower>:

int mg_lower(const char *s) {
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  int c = *s;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	dd05      	ble.n	800744a <mg_lower+0x20>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b5a      	cmp	r3, #90	; 0x5a
 8007442:	dc02      	bgt.n	800744a <mg_lower+0x20>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3320      	adds	r3, #32
 8007448:	60fb      	str	r3, [r7, #12]
  return c;
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01d      	beq.n	80074aa <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	60fa      	str	r2, [r7, #12]
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ffd8 	bl	800742a <mg_lower>
 800747a:	4604      	mov	r4, r0
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	60ba      	str	r2, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff ffd1 	bl	800742a <mg_lower>
 8007488:	4603      	mov	r3, r0
 800748a:	1ae3      	subs	r3, r4, r3
 800748c:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <mg_ncasecmp+0x52>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3b01      	subs	r3, #1
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <mg_ncasecmp+0x52>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	607b      	str	r3, [r7, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e1      	bne.n	800746e <mg_ncasecmp+0x16>
  return diff;
 80074aa:	697b      	ldr	r3, [r7, #20]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd90      	pop	{r4, r7, pc}

080074b4 <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 80074be:	6838      	ldr	r0, [r7, #0]
 80074c0:	f7f8 ff06 	bl	80002d0 <strlen>
 80074c4:	6178      	str	r0, [r7, #20]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	4293      	cmp	r3, r2
 80074d6:	bf28      	it	cs
 80074d8:	4613      	movcs	r3, r2
 80074da:	461a      	mov	r2, r3
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	f00b f901 	bl	80126e4 <strncmp>
 80074e2:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <mg_vcmp+0x3e>
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	e000      	b.n	80074f4 <mg_vcmp+0x40>
  return r;
 80074f2:	68fb      	ldr	r3, [r7, #12]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 8007506:	6838      	ldr	r0, [r7, #0]
 8007508:	f7f8 fee2 	bl	80002d0 <strlen>
 800750c:	6178      	str	r0, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4293      	cmp	r3, r2
 800751e:	bf28      	it	cs
 8007520:	4613      	movcs	r3, r2
 8007522:	461a      	mov	r2, r3
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	f7ff ff97 	bl	8007458 <mg_ncasecmp>
 800752a:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d103      	bne.n	800753a <mg_vcasecmp+0x3e>
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	e000      	b.n	800753c <mg_vcasecmp+0x40>
  return r;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8007544:	b490      	push	{r4, r7}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	f107 0408 	add.w	r4, r7, #8
 800754e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007552:	4639      	mov	r1, r7
 8007554:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800755c:	e019      	b.n	8007592 <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	4413      	add	r3, r2
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	429a      	cmp	r2, r3
 8007578:	da02      	bge.n	8007580 <mg_strcmp+0x3c>
 800757a:	f04f 33ff 	mov.w	r3, #4294967295
 800757e:	e01e      	b.n	80075be <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	429a      	cmp	r2, r3
 8007586:	dd01      	ble.n	800758c <mg_strcmp+0x48>
 8007588:	2301      	movs	r3, #1
 800758a:	e018      	b.n	80075be <mg_strcmp+0x7a>
    i++;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	3301      	adds	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	429a      	cmp	r2, r3
 8007598:	d203      	bcs.n	80075a2 <mg_strcmp+0x5e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d3dd      	bcc.n	800755e <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d201      	bcs.n	80075ae <mg_strcmp+0x6a>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e007      	b.n	80075be <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d202      	bcs.n	80075bc <mg_strcmp+0x78>
 80075b6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ba:	e000      	b.n	80075be <mg_strcmp+0x7a>
  return 0;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3720      	adds	r7, #32
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc90      	pop	{r4, r7}
 80075c6:	4770      	bx	lr

080075c8 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 80075c8:	b590      	push	{r4, r7, lr}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	f107 0408 	add.w	r4, r7, #8
 80075d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80075d6:	4639      	mov	r1, r7
 80075d8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d901      	bls.n	80075e8 <mg_strstr+0x20>
 80075e4:	2300      	movs	r3, #0
 80075e6:	e020      	b.n	800762a <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <mg_strstr+0x2a>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	e01b      	b.n	800762a <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e011      	b.n	800761c <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	4413      	add	r3, r2
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	4618      	mov	r0, r3
 8007604:	f00b f82f 	bl	8012666 <memcmp>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <mg_strstr+0x4e>
      return haystack.ptr + i;
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	4413      	add	r3, r2
 8007614:	e009      	b.n	800762a <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	3301      	adds	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	429a      	cmp	r2, r3
 8007626:	d9e7      	bls.n	80075f8 <mg_strstr+0x30>
    }
  }
  return NULL;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	bd90      	pop	{r4, r7, pc}

08007632 <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8007632:	b490      	push	{r4, r7}
 8007634:	b088      	sub	sp, #32
 8007636:	af00      	add	r7, sp, #0
 8007638:	f107 0408 	add.w	r4, r7, #8
 800763c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007640:	4639      	mov	r1, r7
 8007642:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	2300      	movs	r3, #0
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80ad 	beq.w	80077b8 <mg_match+0x186>
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	2200      	movs	r2, #0
 8007668:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 800766a:	e0a5      	b.n	80077b8 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	429a      	cmp	r2, r3
 8007672:	d24f      	bcs.n	8007714 <mg_match+0xe2>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	429a      	cmp	r2, r3
 800767a:	d24b      	bcs.n	8007714 <mg_match+0xe2>
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b3f      	cmp	r3, #63	; 0x3f
 8007686:	d009      	beq.n	800769c <mg_match+0x6a>
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	4413      	add	r3, r2
 800768e:	781a      	ldrb	r2, [r3, #0]
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	440b      	add	r3, r1
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d13b      	bne.n	8007714 <mg_match+0xe2>
      if (caps == NULL) {
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d031      	beq.n	8007706 <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b3f      	cmp	r3, #63	; 0x3f
 80076ac:	d111      	bne.n	80076d2 <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	441a      	add	r2, r3
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2201      	movs	r2, #1
 80076bc:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	3308      	adds	r3, #8
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
 80076d0:	e019      	b.n	8007706 <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d015      	beq.n	8007706 <mg_match+0xd4>
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d111      	bne.n	8007706 <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	441a      	add	r2, r3
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	3308      	adds	r3, #8
 80076f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	2200      	movs	r2, #0
 80076fe:	605a      	str	r2, [r3, #4]
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	3301      	adds	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	3301      	adds	r3, #1
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	e051      	b.n	80077b8 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	429a      	cmp	r2, r3
 800771a:	d222      	bcs.n	8007762 <mg_match+0x130>
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b2a      	cmp	r3, #42	; 0x2a
 8007726:	d005      	beq.n	8007734 <mg_match+0x102>
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b23      	cmp	r3, #35	; 0x23
 8007732:	d116      	bne.n	8007762 <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <mg_match+0x120>
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d107      	bne.n	8007752 <mg_match+0x120>
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	2200      	movs	r2, #0
 8007746:	605a      	str	r2, [r3, #4]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	441a      	add	r2, r3
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	61fa      	str	r2, [r7, #28]
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3301      	adds	r3, #1
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	e02a      	b.n	80077b8 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d025      	beq.n	80077b4 <mg_match+0x182>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	d821      	bhi.n	80077b4 <mg_match+0x182>
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4413      	add	r3, r2
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b23      	cmp	r3, #35	; 0x23
 800777a:	d005      	beq.n	8007788 <mg_match+0x156>
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	4413      	add	r3, r2
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b2f      	cmp	r3, #47	; 0x2f
 8007786:	d015      	beq.n	80077b4 <mg_match+0x182>
      i = ni, j = nj;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	d010      	beq.n	80077b8 <mg_match+0x186>
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10c      	bne.n	80077b8 <mg_match+0x186>
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d108      	bne.n	80077b8 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	3b08      	subs	r3, #8
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	2200      	movs	r2, #0
 80077b0:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 80077b2:	e001      	b.n	80077b8 <mg_match+0x186>
      }
    } else {
      return false;
 80077b4:	2300      	movs	r3, #0
 80077b6:	e01e      	b.n	80077f6 <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	429a      	cmp	r2, r3
 80077be:	f4ff af55 	bcc.w	800766c <mg_match+0x3a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	f4ff af50 	bcc.w	800766c <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d010      	beq.n	80077f4 <mg_match+0x1c2>
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00c      	beq.n	80077f4 <mg_match+0x1c2>
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d108      	bne.n	80077f4 <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	441a      	add	r2, r3
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	605a      	str	r2, [r3, #4]
  }
  return true;
 80077f4:	2301      	movs	r3, #1
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc90      	pop	{r4, r7}
 80077fe:	4770      	bx	lr

08007800 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 800780e:	f107 0310 	add.w	r3, r7, #16
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fdef 	bl	80073fa <mg_str_n>
 800781c:	f107 0318 	add.w	r3, r7, #24
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fde8 	bl	80073fa <mg_str_n>
 800782a:	2300      	movs	r3, #0
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	f107 0318 	add.w	r3, r7, #24
 8007832:	cb0c      	ldmia	r3, {r2, r3}
 8007834:	f107 0110 	add.w	r1, r7, #16
 8007838:	c903      	ldmia	r1, {r0, r1}
 800783a:	f7ff fefa 	bl	8007632 <mg_match>
 800783e:	4603      	mov	r3, r0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3720      	adds	r7, #32
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	e002      	b.n	8007862 <mg_nce+0x1a>
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3301      	adds	r3, #1
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	429a      	cmp	r2, r3
 800786c:	d909      	bls.n	8007882 <mg_nce+0x3a>
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800787e:	429a      	cmp	r2, r3
 8007880:	d1ec      	bne.n	800785c <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	e002      	b.n	800788e <mg_nce+0x46>
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3301      	adds	r3, #1
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	429a      	cmp	r2, r3
 8007894:	d207      	bcs.n	80078a6 <mg_nce+0x5e>
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4413      	add	r3, r2
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b3d      	cmp	r3, #61	; 0x3d
 80078a4:	d1f0      	bne.n	8007888 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <mg_nce+0x6a>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <mg_nce+0x76>
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00b      	beq.n	80078dc <mg_nce+0x94>
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d204      	bcs.n	80078d6 <mg_nce+0x8e>
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4413      	add	r3, r2
 80078d2:	3301      	adds	r3, #1
 80078d4:	e000      	b.n	80078d8 <mg_nce+0x90>
 80078d6:	2300      	movs	r3, #0
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <mg_nce+0xb2>
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d204      	bcs.n	80078f4 <mg_nce+0xac>
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	e000      	b.n	80078f6 <mg_nce+0xae>
 80078f4:	2300      	movs	r3, #0
 80078f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078f8:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4413      	add	r3, r2
 8007900:	3301      	adds	r3, #1
 8007902:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4293      	cmp	r3, r2
 800790a:	bf28      	it	cs
 800790c:	4613      	movcs	r3, r2
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 800791a:	b590      	push	{r4, r7, lr}
 800791c:	b091      	sub	sp, #68	; 0x44
 800791e:	af04      	add	r7, sp, #16
 8007920:	6178      	str	r0, [r7, #20]
 8007922:	6139      	str	r1, [r7, #16]
 8007924:	60fa      	str	r2, [r7, #12]
 8007926:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
 8007930:	2300      	movs	r3, #0
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	2300      	movs	r3, #0
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	2300      	movs	r3, #0
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <mg_split+0x32>
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <mg_split+0x36>
 800794c:	2300      	movs	r3, #0
 800794e:	e054      	b.n	80079fa <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	6859      	ldr	r1, [r3, #4]
 8007958:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	f107 031c 	add.w	r3, r7, #28
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	f107 0320 	add.w	r3, r7, #32
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	4613      	mov	r3, r2
 8007974:	2200      	movs	r2, #0
 8007976:	f7ff ff67 	bl	8007848 <mg_nce>
 800797a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00f      	beq.n	80079a2 <mg_split+0x88>
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	18d1      	adds	r1, r2, r3
 800798a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798c:	693c      	ldr	r4, [r7, #16]
 800798e:	463b      	mov	r3, r7
 8007990:	4618      	mov	r0, r3
 8007992:	f7ff fd32 	bl	80073fa <mg_str_n>
 8007996:	4622      	mov	r2, r4
 8007998:	463b      	mov	r3, r7
 800799a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800799e:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00f      	beq.n	80079c8 <mg_split+0xae>
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	18d1      	adds	r1, r2, r3
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	68fc      	ldr	r4, [r7, #12]
 80079b4:	463b      	mov	r3, r7
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff fd1f 	bl	80073fa <mg_str_n>
 80079bc:	4622      	mov	r2, r4
 80079be:	463b      	mov	r3, r7
 80079c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80079c4:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	18d1      	adds	r1, r2, r3
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	697c      	ldr	r4, [r7, #20]
 80079da:	463b      	mov	r3, r7
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff fd0c 	bl	80073fa <mg_str_n>
 80079e2:	4622      	mov	r2, r4
 80079e4:	463b      	mov	r3, r7
 80079e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80079ea:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bf14      	ite	ne
 80079f4:	2301      	movne	r3, #1
 80079f6:	2300      	moveq	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3734      	adds	r7, #52	; 0x34
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd90      	pop	{r4, r7, pc}

08007a02 <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 8007a0e:	232c      	movs	r3, #44	; 0x2c
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	68b9      	ldr	r1, [r7, #8]
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7ff ff80 	bl	800791a <mg_split>
 8007a1a:	4603      	mov	r3, r0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <mg_unhex_nimble>:
  }
  to[i] = '\0';
  return to;
}

static unsigned char mg_unhex_nimble(unsigned char c) {
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	2b2f      	cmp	r3, #47	; 0x2f
 8007a32:	d906      	bls.n	8007a42 <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	2b39      	cmp	r3, #57	; 0x39
 8007a38:	d803      	bhi.n	8007a42 <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	3b30      	subs	r3, #48	; 0x30
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	e00c      	b.n	8007a5c <mg_unhex_nimble+0x38>
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d906      	bls.n	8007a56 <mg_unhex_nimble+0x32>
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b46      	cmp	r3, #70	; 0x46
 8007a4c:	d803      	bhi.n	8007a56 <mg_unhex_nimble+0x32>
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	3b37      	subs	r3, #55	; 0x37
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	e002      	b.n	8007a5c <mg_unhex_nimble+0x38>
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	3b57      	subs	r3, #87	; 0x57
 8007a5a:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	2300      	movs	r3, #0
 8007a78:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e011      	b.n	8007aa4 <mg_unhexn+0x3c>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff ffc8 	bl	8007a24 <mg_unhex_nimble>
 8007a94:	4603      	mov	r3, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d3e9      	bcc.n	8007a80 <mg_unhexn+0x18>
  return v;
 8007aac:	68bb      	ldr	r3, [r7, #8]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b086      	sub	sp, #24
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	e010      	b.n	8007aea <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	4413      	add	r3, r2
 8007ace:	2102      	movs	r1, #2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff ffc9 	bl	8007a68 <mg_unhexn>
 8007ad6:	4601      	mov	r1, r0
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	085b      	lsrs	r3, r3, #1
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	b2ca      	uxtb	r2, r1
 8007ae2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	3302      	adds	r3, #2
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d3ea      	bcc.n	8007ac8 <mg_unhex+0x12>
  }
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  const char *s = path;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 8007b08:	e01a      	b.n	8007b40 <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d007      	beq.n	8007b22 <mg_path_is_sane+0x26>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b2f      	cmp	r3, #47	; 0x2f
 8007b18:	d003      	beq.n	8007b22 <mg_path_is_sane+0x26>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b5c      	cmp	r3, #92	; 0x5c
 8007b20:	d10b      	bne.n	8007b3a <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b2e      	cmp	r3, #46	; 0x2e
 8007b2a:	d106      	bne.n	8007b3a <mg_path_is_sane+0x3e>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3302      	adds	r3, #2
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b2e      	cmp	r3, #46	; 0x2e
 8007b34:	d101      	bne.n	8007b3a <mg_path_is_sane+0x3e>
 8007b36:	2300      	movs	r3, #0
 8007b38:	e007      	b.n	8007b4a <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e0      	bne.n	8007b0a <mg_path_is_sane+0xe>
    }
  }
  return true;
 8007b48:	2301      	movs	r3, #1
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b70:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	619a      	str	r2, [r3, #24]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	61da      	str	r2, [r3, #28]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	6a3a      	ldr	r2, [r7, #32]
 8007b92:	621a      	str	r2, [r3, #32]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	601a      	str	r2, [r3, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8007bae:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6178      	str	r0, [r7, #20]
 8007bb8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8007bbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bc4:	eb10 0a02 	adds.w	sl, r0, r2
 8007bc8:	eb41 0b03 	adc.w	fp, r1, r3
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	4592      	cmp	sl, r2
 8007bd4:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007bd8:	d206      	bcs.n	8007be8 <mg_timer_expired+0x3a>
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	d10d      	bne.n	8007c0e <mg_timer_expired+0x60>
 8007bf2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bfa:	1886      	adds	r6, r0, r2
 8007bfc:	603e      	str	r6, [r7, #0]
 8007bfe:	eb41 0303 	adc.w	r3, r1, r3
 8007c02:	607b      	str	r3, [r7, #4]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c0a:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c18:	4290      	cmp	r0, r2
 8007c1a:	eb71 0303 	sbcs.w	r3, r1, r3
 8007c1e:	d201      	bcs.n	8007c24 <mg_timer_expired+0x76>
 8007c20:	2300      	movs	r3, #0
 8007c22:	e022      	b.n	8007c6a <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c2e:	ebb0 0802 	subs.w	r8, r0, r2
 8007c32:	eb61 0903 	sbc.w	r9, r1, r3
 8007c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c3a:	4542      	cmp	r2, r8
 8007c3c:	eb73 0309 	sbcs.w	r3, r3, r9
 8007c40:	d207      	bcs.n	8007c52 <mg_timer_expired+0xa4>
 8007c42:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c4a:	1884      	adds	r4, r0, r2
 8007c4c:	eb41 0503 	adc.w	r5, r1, r3
 8007c50:	e007      	b.n	8007c62 <mg_timer_expired+0xb4>
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c5c:	1884      	adds	r4, r0, r2
 8007c5e:	eb41 0503 	adc.w	r5, r1, r3
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8007c68:	2301      	movs	r3, #1
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c74:	4770      	bx	lr

08007c76 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8007c76:	b590      	push	{r4, r7, lr}
 8007c78:	b08b      	sub	sp, #44	; 0x2c
 8007c7a:	af02      	add	r7, sp, #8
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	61fb      	str	r3, [r7, #28]
 8007c88:	e054      	b.n	8007d34 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	d10d      	bne.n	8007cb0 <mg_timer_poll+0x3a>
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <mg_timer_poll+0x3a>
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <mg_timer_poll+0x3c>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	76fb      	strb	r3, [r7, #27]
 8007cb4:	7efb      	ldrb	r3, [r7, #27]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f103 0410 	add.w	r4, r3, #16
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f7ff ff6a 	bl	8007bae <mg_timer_expired>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8007ce4:	7efb      	ldrb	r3, [r7, #27]
 8007ce6:	f083 0301 	eor.w	r3, r3, #1
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <mg_timer_poll+0x86>
 8007cf0:	7ebb      	ldrb	r3, [r7, #26]
 8007cf2:	f083 0301 	eor.w	r3, r3, #1
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d118      	bne.n	8007d2e <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d105      	bne.n	8007d14 <mg_timer_poll+0x9e>
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d105      	bne.n	8007d20 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	6a12      	ldr	r2, [r2, #32]
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	f043 0204 	orr.w	r2, r3, #4
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	619a      	str	r2, [r3, #24]
 8007d2c:	e000      	b.n	8007d30 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 8007d2e:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1a7      	bne.n	8007c8a <mg_timer_poll+0x14>
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	3724      	adds	r7, #36	; 0x24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd90      	pop	{r4, r7, pc}

08007d44 <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, struct mg_str hostname) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	1d3b      	adds	r3, r7, #4
 8007d4e:	e883 0006 	stmia.w	r3, {r1, r2}
  (void) hostname;
  mg_error(c, "TLS is not enabled");
 8007d52:	4904      	ldr	r1, [pc, #16]	; (8007d64 <mg_tls_init+0x20>)
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7f9 ff27 	bl	8001ba8 <mg_error>
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	080145cc 	.word	0x080145cc

08007d68 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d005      	beq.n	8007dae <mg_tls_recv+0x1e>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <mg_tls_recv+0x1e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <mg_tls_recv+0x22>
 8007dae:	2300      	movs	r3, #0
 8007db0:	e001      	b.n	8007db6 <mg_tls_recv+0x26>
 8007db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <mg_tls_send+0x1e>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <mg_tls_send+0x1e>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <mg_tls_send+0x22>
 8007de0:	2300      	movs	r3, #0
 8007de2:	e001      	b.n	8007de8 <mg_tls_send+0x26>
 8007de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	4917      	ldr	r1, [pc, #92]	; (8007e5c <mg_url_is_ssl+0x68>)
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f00a fc6f 	bl	80126e4 <strncmp>
 8007e06:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01f      	beq.n	8007e4c <mg_url_is_ssl+0x58>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007e0c:	2206      	movs	r2, #6
 8007e0e:	4914      	ldr	r1, [pc, #80]	; (8007e60 <mg_url_is_ssl+0x6c>)
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f00a fc67 	bl	80126e4 <strncmp>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d017      	beq.n	8007e4c <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007e1c:	2206      	movs	r2, #6
 8007e1e:	4911      	ldr	r1, [pc, #68]	; (8007e64 <mg_url_is_ssl+0x70>)
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f00a fc5f 	bl	80126e4 <strncmp>
 8007e26:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00f      	beq.n	8007e4c <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	490e      	ldr	r1, [pc, #56]	; (8007e68 <mg_url_is_ssl+0x74>)
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f00a fc57 	bl	80126e4 <strncmp>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d007      	beq.n	8007e4c <mg_url_is_ssl+0x58>
         strncmp(url, "tls:", 4) == 0;
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	490b      	ldr	r1, [pc, #44]	; (8007e6c <mg_url_is_ssl+0x78>)
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f00a fc4f 	bl	80126e4 <strncmp>
 8007e46:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <mg_url_is_ssl+0x5c>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <mg_url_is_ssl+0x5e>
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	080145e0 	.word	0x080145e0
 8007e60:	080145e8 	.word	0x080145e8
 8007e64:	080145f0 	.word	0x080145f0
 8007e68:	080145f8 	.word	0x080145f8
 8007e6c:	08014600 	.word	0x08014600

08007e70 <urlparse>:

static struct url urlparse(const char *url) {
 8007e70:	b5b0      	push	{r4, r5, r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	221c      	movs	r2, #28
 8007e80:	2100      	movs	r1, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f00a fc19 	bl	80126ba <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8007e88:	2300      	movs	r3, #0
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8c:	e05b      	b.n	8007f46 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	4413      	add	r3, r2
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b2f      	cmp	r3, #47	; 0x2f
 8007e98:	d112      	bne.n	8007ec0 <urlparse+0x50>
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00f      	beq.n	8007ec0 <urlparse+0x50>
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10c      	bne.n	8007ec0 <urlparse+0x50>
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b2f      	cmp	r3, #47	; 0x2f
 8007eb2:	d105      	bne.n	8007ec0 <urlparse+0x50>
      u.host = i + 1;
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	e03f      	b.n	8007f40 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	4413      	add	r3, r2
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b5d      	cmp	r3, #93	; 0x5d
 8007eca:	d102      	bne.n	8007ed2 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	e036      	b.n	8007f40 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	4413      	add	r3, r2
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b3a      	cmp	r3, #58	; 0x3a
 8007edc:	d109      	bne.n	8007ef2 <urlparse+0x82>
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <urlparse+0x82>
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <urlparse+0x82>
      u.port = i + 1;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	3301      	adds	r3, #1
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	e026      	b.n	8007f40 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	4413      	add	r3, r2
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d112      	bne.n	8007f24 <urlparse+0xb4>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10f      	bne.n	8007f24 <urlparse+0xb4>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10c      	bne.n	8007f24 <urlparse+0xb4>
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <urlparse+0xb4>
      u.user = u.host;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61bb      	str	r3, [r7, #24]
 8007f22:	e00d      	b.n	8007f40 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	4413      	add	r3, r2
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b2f      	cmp	r3, #47	; 0x2f
 8007f2e:	d107      	bne.n	8007f40 <urlparse+0xd0>
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <urlparse+0xd0>
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <urlparse+0xd0>
      u.uri = i;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	3301      	adds	r3, #1
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	4413      	add	r3, r2
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d19d      	bne.n	8007e8e <urlparse+0x1e>
    }
  }
  u.end = i;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	461d      	mov	r5, r3
 8007f5a:	f107 0408 	add.w	r4, r7, #8
 8007f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007f66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	3728      	adds	r7, #40	; 0x28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007f74 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08a      	sub	sp, #40	; 0x28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8007f7c:	f107 0308 	add.w	r3, r7, #8
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff ff74 	bl	8007e70 <urlparse>
  unsigned short port = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	4925      	ldr	r1, [pc, #148]	; (8008024 <mg_url_port+0xb0>)
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f00a fba7 	bl	80126e4 <strncmp>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <mg_url_port+0x38>
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	4922      	ldr	r1, [pc, #136]	; (8008028 <mg_url_port+0xb4>)
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f00a fb9f 	bl	80126e4 <strncmp>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <mg_url_port+0x3c>
 8007fac:	2350      	movs	r3, #80	; 0x50
 8007fae:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	491e      	ldr	r1, [pc, #120]	; (800802c <mg_url_port+0xb8>)
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f00a fb95 	bl	80126e4 <strncmp>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <mg_url_port+0x5c>
 8007fc0:	2206      	movs	r2, #6
 8007fc2:	491b      	ldr	r1, [pc, #108]	; (8008030 <mg_url_port+0xbc>)
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f00a fb8d 	bl	80126e4 <strncmp>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <mg_url_port+0x62>
    port = 443;
 8007fd0:	f240 13bb 	movw	r3, #443	; 0x1bb
 8007fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8007fd6:	2205      	movs	r2, #5
 8007fd8:	4916      	ldr	r1, [pc, #88]	; (8008034 <mg_url_port+0xc0>)
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f00a fb82 	bl	80126e4 <strncmp>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <mg_url_port+0x78>
 8007fe6:	f240 735b 	movw	r3, #1883	; 0x75b
 8007fea:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8007fec:	2206      	movs	r2, #6
 8007fee:	4912      	ldr	r1, [pc, #72]	; (8008038 <mg_url_port+0xc4>)
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f00a fb77 	bl	80126e4 <strncmp>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <mg_url_port+0x8e>
 8007ffc:	f242 23b3 	movw	r3, #8883	; 0x22b3
 8008000:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d007      	beq.n	8008018 <mg_url_port+0xa4>
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f00a f872 	bl	80120f8 <atoi>
 8008014:	4603      	mov	r3, r0
 8008016:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 8008018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800801a:	4618      	mov	r0, r3
 800801c:	3728      	adds	r7, #40	; 0x28
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	08014608 	.word	0x08014608
 8008028:	08014610 	.word	0x08014610
 800802c:	080145e0 	.word	0x080145e0
 8008030:	080145e8 	.word	0x080145e8
 8008034:	08014614 	.word	0x08014614
 8008038:	080145f0 	.word	0x080145f0

0800803c <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 800804a:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	461a      	mov	r2, r3
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8008056:	7b7b      	ldrb	r3, [r7, #13]
 8008058:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800805a:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 800805c:	7b3b      	ldrb	r3, [r7, #12]
 800805e:	061b      	lsls	r3, r3, #24
 8008060:	4313      	orrs	r3, r2
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	4603      	mov	r3, r0
 8008076:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8008078:	2300      	movs	r3, #0
 800807a:	81bb      	strh	r3, [r7, #12]
 800807c:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 800807e:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8008080:	7b7b      	ldrb	r3, [r7, #13]
 8008082:	b21a      	sxth	r2, r3
 8008084:	7b3b      	ldrb	r3, [r7, #12]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	b21b      	sxth	r3, r3
 800808a:	4313      	orrs	r3, r2
 800808c:	b21b      	sxth	r3, r3
 800808e:	b29b      	uxth	r3, r3
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	43db      	mvns	r3, r3
 80080ac:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80080ae:	e01f      	b.n	80080f0 <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *) buf++;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	60ba      	str	r2, [r7, #8]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 80080ba:	7dfa      	ldrb	r2, [r7, #23]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4053      	eors	r3, r2
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	4a11      	ldr	r2, [pc, #68]	; (800810c <mg_crc32+0x70>)
 80080c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	4053      	eors	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4053      	eors	r3, r2
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	4a0a      	ldr	r2, [pc, #40]	; (800810c <mg_crc32+0x70>)
 80080e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	4053      	eors	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	1e5a      	subs	r2, r3, #1
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1da      	bne.n	80080b0 <mg_crc32+0x14>
  }
  return ~crc;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	43db      	mvns	r3, r3
}
 80080fe:	4618      	mov	r0, r3
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	08014ed8 	.word	0x08014ed8

08008110 <mg_millis>:
  return allowed == '+';
}

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8008110:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
 8008114:	af00      	add	r7, sp, #0
#elif MG_ARCH == MG_ARCH_ZEPHYR
  return (uint64_t) k_uptime_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS1
  return (uint64_t) rt_time_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS2
  return (uint64_t) ((osKernelGetTickCount() * 1000) / osKernelGetTickFreq());
 8008116:	f007 fa8d 	bl	800f634 <osKernelGetTickCount>
 800811a:	4603      	mov	r3, r0
 800811c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008120:	fb02 f403 	mul.w	r4, r2, r3
 8008124:	f007 faae 	bl	800f684 <osKernelGetTickFreq>
 8008128:	4603      	mov	r3, r0
 800812a:	fbb4 f3f3 	udiv	r3, r4, r3
 800812e:	2200      	movs	r2, #0
 8008130:	4698      	mov	r8, r3
 8008132:	4691      	mov	r9, r2
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}

08008140 <eth_read_phy>:
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface
enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1, PHY_CSCR = 31 };

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	460a      	mov	r2, r1
 800814a:	71fb      	strb	r3, [r7, #7]
 800814c:	4613      	mov	r3, r2
 800814e:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 8008150:	4b12      	ldr	r3, [pc, #72]	; (800819c <eth_read_phy+0x5c>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	4a11      	ldr	r2, [pc, #68]	; (800819c <eth_read_phy+0x5c>)
 8008156:	f003 031c 	and.w	r3, r3, #28
 800815a:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 800815c:	4b0f      	ldr	r3, [pc, #60]	; (800819c <eth_read_phy+0x5c>)
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	02d9      	lsls	r1, r3, #11
 8008164:	79bb      	ldrb	r3, [r7, #6]
 8008166:	019b      	lsls	r3, r3, #6
 8008168:	430b      	orrs	r3, r1
 800816a:	490c      	ldr	r1, [pc, #48]	; (800819c <eth_read_phy+0x5c>)
 800816c:	4313      	orrs	r3, r2
 800816e:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= BIT(0);
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <eth_read_phy+0x5c>)
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	4a09      	ldr	r2, [pc, #36]	; (800819c <eth_read_phy+0x5c>)
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 800817c:	bf00      	nop
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <eth_read_phy+0x5c>)
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f9      	bne.n	800817e <eth_read_phy+0x3e>
  return ETH->MACMIIDR;
 800818a:	4b04      	ldr	r3, [pc, #16]	; (800819c <eth_read_phy+0x5c>)
 800818c:	695b      	ldr	r3, [r3, #20]
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40028000 	.word	0x40028000

080081a0 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	603a      	str	r2, [r7, #0]
 80081aa:	71fb      	strb	r3, [r7, #7]
 80081ac:	460b      	mov	r3, r1
 80081ae:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIDR = val;
 80081b0:	4a14      	ldr	r2, [pc, #80]	; (8008204 <eth_write_phy+0x64>)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 80081b6:	4b13      	ldr	r3, [pc, #76]	; (8008204 <eth_write_phy+0x64>)
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	4a12      	ldr	r2, [pc, #72]	; (8008204 <eth_write_phy+0x64>)
 80081bc:	f003 031c 	and.w	r3, r3, #28
 80081c0:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | BIT(1);
 80081c2:	4b10      	ldr	r3, [pc, #64]	; (8008204 <eth_write_phy+0x64>)
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	02d9      	lsls	r1, r3, #11
 80081ca:	79bb      	ldrb	r3, [r7, #6]
 80081cc:	019b      	lsls	r3, r3, #6
 80081ce:	430b      	orrs	r3, r1
 80081d0:	4313      	orrs	r3, r2
 80081d2:	4a0c      	ldr	r2, [pc, #48]	; (8008204 <eth_write_phy+0x64>)
 80081d4:	f043 0302 	orr.w	r3, r3, #2
 80081d8:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= BIT(0);
 80081da:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <eth_write_phy+0x64>)
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	4a09      	ldr	r2, [pc, #36]	; (8008204 <eth_write_phy+0x64>)
 80081e0:	f043 0301 	orr.w	r3, r3, #1
 80081e4:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 80081e6:	bf00      	nop
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <eth_write_phy+0x64>)
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1f9      	bne.n	80081e8 <eth_write_phy+0x48>
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40028000 	.word	0x40028000

08008208 <get_hclk>:

static uint32_t get_hclk(void) {
 8008208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800820c:	b08d      	sub	sp, #52	; 0x34
 800820e:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 8008210:	4e3c      	ldr	r6, [pc, #240]	; (8008304 <get_hclk+0xfc>)
 8008212:	62be      	str	r6, [r7, #40]	; 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8008214:	2600      	movs	r6, #0
 8008216:	62fe      	str	r6, [r7, #44]	; 0x2c
 8008218:	4e3b      	ldr	r6, [pc, #236]	; (8008308 <get_hclk+0x100>)
 800821a:	627e      	str	r6, [r7, #36]	; 0x24
 800821c:	4e3b      	ldr	r6, [pc, #236]	; (800830c <get_hclk+0x104>)
 800821e:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 8008220:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008222:	68b6      	ldr	r6, [r6, #8]
 8008224:	f006 0604 	and.w	r6, r6, #4
 8008228:	2e00      	cmp	r6, #0
 800822a:	d002      	beq.n	8008232 <get_hclk+0x2a>
    clk = hse;
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008230:	e049      	b.n	80082c6 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 8008232:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008234:	68b6      	ldr	r6, [r6, #8]
 8008236:	f006 0608 	and.w	r6, r6, #8
 800823a:	2e00      	cmp	r6, #0
 800823c:	d041      	beq.n	80082c2 <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 800823e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008240:	6876      	ldr	r6, [r6, #4]
 8008242:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8008246:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8008248:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800824a:	6876      	ldr	r6, [r6, #4]
 800824c:	09b6      	lsrs	r6, r6, #6
 800824e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8008252:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 8008254:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008256:	6876      	ldr	r6, [r6, #4]
 8008258:	0c36      	lsrs	r6, r6, #16
 800825a:	f006 0603 	and.w	r6, r6, #3
 800825e:	3601      	adds	r6, #1
 8008260:	0076      	lsls	r6, r6, #1
 8008262:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 8008264:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008266:	6876      	ldr	r6, [r6, #4]
 8008268:	f406 0680 	and.w	r6, r6, #4194304	; 0x400000
 800826c:	2e00      	cmp	r6, #0
 800826e:	d001      	beq.n	8008274 <get_hclk+0x6c>
 8008270:	6a3e      	ldr	r6, [r7, #32]
 8008272:	e000      	b.n	8008276 <get_hclk+0x6e>
 8008274:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008276:	62fe      	str	r6, [r7, #44]	; 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8008278:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800827a:	f04f 0c00 	mov.w	ip, #0
 800827e:	4634      	mov	r4, r6
 8008280:	4665      	mov	r5, ip
 8008282:	69be      	ldr	r6, [r7, #24]
 8008284:	f04f 0c00 	mov.w	ip, #0
 8008288:	4632      	mov	r2, r6
 800828a:	4663      	mov	r3, ip
 800828c:	fb02 fc05 	mul.w	ip, r2, r5
 8008290:	fb04 f603 	mul.w	r6, r4, r3
 8008294:	4466      	add	r6, ip
 8008296:	fba4 0102 	umull	r0, r1, r4, r2
 800829a:	1873      	adds	r3, r6, r1
 800829c:	4619      	mov	r1, r3
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2200      	movs	r2, #0
 80082a2:	4698      	mov	r8, r3
 80082a4:	4691      	mov	r9, r2
 80082a6:	4642      	mov	r2, r8
 80082a8:	464b      	mov	r3, r9
 80082aa:	f7f8 fc97 	bl	8000bdc <__aeabi_uldivmod>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4613      	mov	r3, r2
 80082b4:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c0:	e001      	b.n	80082c6 <get_hclk+0xbe>
  } else {
    clk = hsi;
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	091b      	lsrs	r3, r3, #4
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b07      	cmp	r3, #7
 80082d6:	d801      	bhi.n	80082dc <get_hclk+0xd4>
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	e00e      	b.n	80082fa <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 80082dc:	4a0c      	ldr	r2, [pc, #48]	; (8008310 <get_hclk+0x108>)
 80082de:	1d3b      	adds	r3, r7, #4
 80082e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082e4:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3b08      	subs	r3, #8
 80082ec:	3330      	adds	r3, #48	; 0x30
 80082ee:	443b      	add	r3, r7
 80082f0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80082f4:	461a      	mov	r2, r3
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	40d3      	lsrs	r3, r2
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3734      	adds	r7, #52	; 0x34
 80082fe:	46bd      	mov	sp, r7
 8008300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008304:	40023800 	.word	0x40023800
 8008308:	00f42400 	.word	0x00f42400
 800830c:	007a1200 	.word	0x007a1200
 8008310:	08014814 	.word	0x08014814

08008314 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 800831a:	4a33      	ldr	r2, [pc, #204]	; (80083e8 <guess_mdc_cr+0xd4>)
 800831c:	f107 030c 	add.w	r3, r7, #12
 8008320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008324:	6018      	str	r0, [r3, #0]
 8008326:	3304      	adds	r3, #4
 8008328:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 800832a:	4a30      	ldr	r2, [pc, #192]	; (80083ec <guess_mdc_cr+0xd8>)
 800832c:	1d3b      	adds	r3, r7, #4
 800832e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008332:	6018      	str	r0, [r3, #0]
 8008334:	3304      	adds	r3, #4
 8008336:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 8008338:	f7ff ff66 	bl	8008208 <get_hclk>
 800833c:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 800833e:	f04f 33ff 	mov.w	r3, #4294967295
 8008342:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	4a2a      	ldr	r2, [pc, #168]	; (80083f0 <guess_mdc_cr+0xdc>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d80d      	bhi.n	8008368 <guess_mdc_cr+0x54>
    MG_ERROR(("HCLK too low"));
 800834c:	4b29      	ldr	r3, [pc, #164]	; (80083f4 <guess_mdc_cr+0xe0>)
 800834e:	f641 3238 	movw	r2, #6968	; 0x1b38
 8008352:	4929      	ldr	r1, [pc, #164]	; (80083f8 <guess_mdc_cr+0xe4>)
 8008354:	2001      	movs	r0, #1
 8008356:	f7fe f96b 	bl	8006630 <mg_log_prefix>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d02e      	beq.n	80083be <guess_mdc_cr+0xaa>
 8008360:	4826      	ldr	r0, [pc, #152]	; (80083fc <guess_mdc_cr+0xe8>)
 8008362:	f7fe f9bf 	bl	80066e4 <mg_log>
 8008366:	e02a      	b.n	80083be <guess_mdc_cr+0xaa>
  } else {
    for (int i = 0; i < 6; i++) {
 8008368:	2300      	movs	r3, #0
 800836a:	61bb      	str	r3, [r7, #24]
 800836c:	e014      	b.n	8008398 <guess_mdc_cr+0x84>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 800836e:	1d3a      	adds	r2, r7, #4
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	4413      	add	r3, r2
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	fbb3 f3f2 	udiv	r3, r3, r2
 800837e:	4a20      	ldr	r2, [pc, #128]	; (8008400 <guess_mdc_cr+0xec>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d806      	bhi.n	8008392 <guess_mdc_cr+0x7e>
        result = crs[i];
 8008384:	f107 020c 	add.w	r2, r7, #12
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	4413      	add	r3, r2
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	61fb      	str	r3, [r7, #28]
        break;
 8008390:	e005      	b.n	800839e <guess_mdc_cr+0x8a>
    for (int i = 0; i < 6; i++) {
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	3301      	adds	r3, #1
 8008396:	61bb      	str	r3, [r7, #24]
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b05      	cmp	r3, #5
 800839c:	dde7      	ble.n	800836e <guess_mdc_cr+0x5a>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	da0c      	bge.n	80083be <guess_mdc_cr+0xaa>
 80083a4:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <guess_mdc_cr+0xe0>)
 80083a6:	f44f 52da 	mov.w	r2, #6976	; 0x1b40
 80083aa:	4913      	ldr	r1, [pc, #76]	; (80083f8 <guess_mdc_cr+0xe4>)
 80083ac:	2001      	movs	r0, #1
 80083ae:	f7fe f93f 	bl	8006630 <mg_log_prefix>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <guess_mdc_cr+0xaa>
 80083b8:	4812      	ldr	r0, [pc, #72]	; (8008404 <guess_mdc_cr+0xf0>)
 80083ba:	f7fe f993 	bl	80066e4 <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 80083be:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <guess_mdc_cr+0xe0>)
 80083c0:	f641 3242 	movw	r2, #6978	; 0x1b42
 80083c4:	490c      	ldr	r1, [pc, #48]	; (80083f8 <guess_mdc_cr+0xe4>)
 80083c6:	2003      	movs	r0, #3
 80083c8:	f7fe f932 	bl	8006630 <mg_log_prefix>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <guess_mdc_cr+0xc8>
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	6979      	ldr	r1, [r7, #20]
 80083d6:	480c      	ldr	r0, [pc, #48]	; (8008408 <guess_mdc_cr+0xf4>)
 80083d8:	f7fe f984 	bl	80066e4 <mg_log>
  return result;
 80083dc:	69fb      	ldr	r3, [r7, #28]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	08014850 	.word	0x08014850
 80083ec:	08014858 	.word	0x08014858
 80083f0:	017d783f 	.word	0x017d783f
 80083f4:	08014f18 	.word	0x08014f18
 80083f8:	08013568 	.word	0x08013568
 80083fc:	0801481c 	.word	0x0801481c
 8008400:	00243d58 	.word	0x00243d58
 8008404:	0801482c 	.word	0x0801482c
 8008408:	0801483c 	.word	0x0801483c

0800840c <mg_tcpip_driver_stm32_init>:

static bool mg_tcpip_driver_stm32_init(struct mg_tcpip_if *ifp) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32_data *d =
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32_data *) ifp->driver_data;
  s_ifp = ifp;
 800841a:	4a6d      	ldr	r2, [pc, #436]	; (80085d0 <mg_tcpip_driver_stm32_init+0x1c4>)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
 8008424:	e032      	b.n	800848c <mg_tcpip_driver_stm32_init+0x80>
    s_rxdesc[i][0] = BIT(31);                            // Own
 8008426:	4a6b      	ldr	r2, [pc, #428]	; (80085d4 <mg_tcpip_driver_stm32_init+0x1c8>)
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	4413      	add	r3, r2
 800842e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008432:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | BIT(14);       // 2nd address chained
 8008434:	4a67      	ldr	r2, [pc, #412]	; (80085d4 <mg_tcpip_driver_stm32_init+0x1c8>)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	4413      	add	r3, r2
 800843c:	3304      	adds	r3, #4
 800843e:	f244 6204 	movw	r2, #17924	; 0x4604
 8008442:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f240 6204 	movw	r2, #1540	; 0x604
 800844a:	fb02 f303 	mul.w	r3, r2, r3
 800844e:	4a62      	ldr	r2, [pc, #392]	; (80085d8 <mg_tcpip_driver_stm32_init+0x1cc>)
 8008450:	4413      	add	r3, r2
 8008452:	4619      	mov	r1, r3
 8008454:	4a5f      	ldr	r2, [pc, #380]	; (80085d4 <mg_tcpip_driver_stm32_init+0x1c8>)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	4413      	add	r3, r2
 800845c:	3308      	adds	r3, #8
 800845e:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	3301      	adds	r3, #1
 8008464:	425a      	negs	r2, r3
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	f002 0203 	and.w	r2, r2, #3
 800846e:	bf58      	it	pl
 8008470:	4253      	negpl	r3, r2
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	4a57      	ldr	r2, [pc, #348]	; (80085d4 <mg_tcpip_driver_stm32_init+0x1c8>)
 8008476:	4413      	add	r3, r2
 8008478:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 800847a:	4a56      	ldr	r2, [pc, #344]	; (80085d4 <mg_tcpip_driver_stm32_init+0x1c8>)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	4413      	add	r3, r2
 8008482:	330c      	adds	r3, #12
 8008484:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	3301      	adds	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b03      	cmp	r3, #3
 8008490:	ddc9      	ble.n	8008426 <mg_tcpip_driver_stm32_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008492:	2300      	movs	r3, #0
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	e023      	b.n	80084e0 <mg_tcpip_driver_stm32_init+0xd4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f240 6204 	movw	r2, #1540	; 0x604
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	4a4e      	ldr	r2, [pc, #312]	; (80085dc <mg_tcpip_driver_stm32_init+0x1d0>)
 80084a4:	4413      	add	r3, r2
 80084a6:	4619      	mov	r1, r3
 80084a8:	4a4d      	ldr	r2, [pc, #308]	; (80085e0 <mg_tcpip_driver_stm32_init+0x1d4>)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	4413      	add	r3, r2
 80084b0:	3308      	adds	r3, #8
 80084b2:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3301      	adds	r3, #1
 80084b8:	425a      	negs	r2, r3
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	f002 0203 	and.w	r2, r2, #3
 80084c2:	bf58      	it	pl
 80084c4:	4253      	negpl	r3, r2
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	4a45      	ldr	r2, [pc, #276]	; (80085e0 <mg_tcpip_driver_stm32_init+0x1d4>)
 80084ca:	4413      	add	r3, r2
 80084cc:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 80084ce:	4a44      	ldr	r2, [pc, #272]	; (80085e0 <mg_tcpip_driver_stm32_init+0x1d4>)
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	4413      	add	r3, r2
 80084d6:	330c      	adds	r3, #12
 80084d8:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	3301      	adds	r3, #1
 80084de:	613b      	str	r3, [r7, #16]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	ddd8      	ble.n	8008498 <mg_tcpip_driver_stm32_init+0x8c>
  }

  ETH->DMABMR |= BIT(0);                         // Software reset
 80084e6:	4b3f      	ldr	r3, [pc, #252]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 80084e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a3d      	ldr	r2, [pc, #244]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 80084f0:	f043 0301 	orr.w	r3, r3, #1
 80084f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084f8:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & BIT(0)) != 0) (void) 0;  // Wait until done
 80084fa:	bf00      	nop
 80084fc:	4b39      	ldr	r3, [pc, #228]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 80084fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f7      	bne.n	80084fc <mg_tcpip_driver_stm32_init+0xf0>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <mg_tcpip_driver_stm32_init+0x10e>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	da03      	bge.n	8008522 <mg_tcpip_driver_stm32_init+0x116>
 800851a:	f7ff fefb 	bl	8008314 <guess_mdc_cr>
 800851e:	4603      	mov	r3, r0
 8008520:	e001      	b.n	8008526 <mg_tcpip_driver_stm32_init+0x11a>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60bb      	str	r3, [r7, #8]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4a2d      	ldr	r2, [pc, #180]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 800852e:	f003 031c 	and.w	r3, r3, #28
 8008532:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = BIT(13) | BIT(16) | BIT(22) | BIT(23) | BIT(25);
  ETH->MACIMR = BIT(3) | BIT(9);  // Mask timestamp & PMT IT
 8008534:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008536:	f44f 7202 	mov.w	r2, #520	; 0x208
 800853a:	63da      	str	r2, [r3, #60]	; 0x3c
  ETH->MACFCR = BIT(7);           // Disable zero quarta pause
 800853c:	4b29      	ldr	r3, [pc, #164]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 800853e:	2280      	movs	r2, #128	; 0x80
 8008540:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = BIT(31);                            // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));           // Reset PHY
 8008542:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008546:	2100      	movs	r1, #0
 8008548:	2000      	movs	r0, #0
 800854a:	f7ff fe29 	bl	80081a0 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));           // Set autonegotiation
 800854e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008552:	2100      	movs	r1, #0
 8008554:	2000      	movs	r0, #0
 8008556:	f7ff fe23 	bl	80081a0 <eth_write_phy>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;     // RX descriptors
 800855a:	4a22      	ldr	r2, [pc, #136]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 800855c:	4b1d      	ldr	r3, [pc, #116]	; (80085d4 <mg_tcpip_driver_stm32_init+0x1c8>)
 800855e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008562:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;     // RX descriptors
 8008564:	4a1f      	ldr	r2, [pc, #124]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008566:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800856c:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = BIT(6) | BIT(16);                      // RIE, NISE
 800856e:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008574:	461a      	mov	r2, r3
 8008576:	4b1c      	ldr	r3, [pc, #112]	; (80085e8 <mg_tcpip_driver_stm32_init+0x1dc>)
 8008578:	61d3      	str	r3, [r2, #28]
  ETH->MACCR = BIT(2) | BIT(3) | BIT(11) | BIT(14);    // RE, TE, Duplex, Fast
 800857a:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 800857c:	f644 020c 	movw	r2, #18444	; 0x480c
 8008580:	601a      	str	r2, [r3, #0]
  ETH->DMAOMR = BIT(1) | BIT(13) | BIT(21) | BIT(25);  // SR, ST, TSF, RSF
 8008582:	4b18      	ldr	r3, [pc, #96]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008588:	461a      	mov	r2, r3
 800858a:	4b18      	ldr	r3, [pc, #96]	; (80085ec <mg_tcpip_driver_stm32_init+0x1e0>)
 800858c:	6193      	str	r3, [r2, #24]

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	795b      	ldrb	r3, [r3, #5]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	7912      	ldrb	r2, [r2, #4]
 8008598:	4611      	mov	r1, r2
 800859a:	4a12      	ldr	r2, [pc, #72]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
 800859c:	430b      	orrs	r3, r1
 800859e:	6413      	str	r3, [r2, #64]	; 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	78db      	ldrb	r3, [r3, #3]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	789b      	ldrb	r3, [r3, #2]
 80085ac:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80085ae:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 80085b6:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7812      	ldrb	r2, [r2, #0]
 80085bc:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80085be:	4a09      	ldr	r2, [pc, #36]	; (80085e4 <mg_tcpip_driver_stm32_init+0x1d8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80085c0:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80085c2:	6453      	str	r3, [r2, #68]	; 0x44
  return true;
 80085c4:	2301      	movs	r3, #1
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20003778 	.word	0x20003778
 80085d4:	200006d4 	.word	0x200006d4
 80085d8:	20000754 	.word	0x20000754
 80085dc:	20001f64 	.word	0x20001f64
 80085e0:	20000714 	.word	0x20000714
 80085e4:	40028000 	.word	0x40028000
 80085e8:	00010040 	.word	0x00010040
 80085ec:	02202002 	.word	0x02202002

080085f0 <mg_tcpip_driver_stm32_tx>:

static size_t mg_tcpip_driver_stm32_tx(const void *buf, size_t len,
                                       struct mg_tcpip_if *ifp) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f240 6204 	movw	r2, #1540	; 0x604
 8008602:	4293      	cmp	r3, r2
 8008604:	d911      	bls.n	800862a <mg_tcpip_driver_stm32_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8008606:	4b3d      	ldr	r3, [pc, #244]	; (80086fc <mg_tcpip_driver_stm32_tx+0x10c>)
 8008608:	f641 327b 	movw	r2, #7035	; 0x1b7b
 800860c:	493c      	ldr	r1, [pc, #240]	; (8008700 <mg_tcpip_driver_stm32_tx+0x110>)
 800860e:	2001      	movs	r0, #1
 8008610:	f7fe f80e 	bl	8006630 <mg_log_prefix>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d004      	beq.n	8008624 <mg_tcpip_driver_stm32_tx+0x34>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4619      	mov	r1, r3
 800861e:	4839      	ldr	r0, [pc, #228]	; (8008704 <mg_tcpip_driver_stm32_tx+0x114>)
 8008620:	f7fe f860 	bl	80066e4 <mg_log>
    len = 0;  // Frame is too big
 8008624:	2300      	movs	r3, #0
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	e055      	b.n	80086d6 <mg_tcpip_driver_stm32_tx+0xe6>
  } else if ((s_txdesc[s_txno][0] & BIT(31))) {
 800862a:	4b37      	ldr	r3, [pc, #220]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	4a37      	ldr	r2, [pc, #220]	; (800870c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	4413      	add	r3, r2
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da14      	bge.n	8008664 <mg_tcpip_driver_stm32_tx+0x74>
    ifp->nerr++;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	671a      	str	r2, [r3, #112]	; 0x70
    MG_ERROR(("No free descriptors"));
 8008644:	4b2d      	ldr	r3, [pc, #180]	; (80086fc <mg_tcpip_driver_stm32_tx+0x10c>)
 8008646:	f641 327f 	movw	r2, #7039	; 0x1b7f
 800864a:	492d      	ldr	r1, [pc, #180]	; (8008700 <mg_tcpip_driver_stm32_tx+0x110>)
 800864c:	2001      	movs	r0, #1
 800864e:	f7fd ffef 	bl	8006630 <mg_log_prefix>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <mg_tcpip_driver_stm32_tx+0x6e>
 8008658:	482d      	ldr	r0, [pc, #180]	; (8008710 <mg_tcpip_driver_stm32_tx+0x120>)
 800865a:	f7fe f843 	bl	80066e4 <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]
 8008662:	e038      	b.n	80086d6 <mg_tcpip_driver_stm32_tx+0xe6>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);     // Copy data
 8008664:	4b28      	ldr	r3, [pc, #160]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	f240 6304 	movw	r3, #1540	; 0x604
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	4a28      	ldr	r2, [pc, #160]	; (8008714 <mg_tcpip_driver_stm32_tx+0x124>)
 8008674:	4413      	add	r3, r2
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	68f9      	ldr	r1, [r7, #12]
 800867a:	4618      	mov	r0, r3
 800867c:	f00a f8e7 	bl	801284e <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;  // Set data len
 8008680:	4b21      	ldr	r3, [pc, #132]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4a21      	ldr	r2, [pc, #132]	; (800870c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	4413      	add	r3, r2
 800868a:	3304      	adds	r3, #4
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = BIT(20) | BIT(28) | BIT(29);  // Chain,FS,LS
 8008690:	4b1d      	ldr	r3, [pc, #116]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	4a1d      	ldr	r2, [pc, #116]	; (800870c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	4413      	add	r3, r2
 800869a:	4a1f      	ldr	r2, [pc, #124]	; (8008718 <mg_tcpip_driver_stm32_tx+0x128>)
 800869c:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= BIT(31);  // Set OWN bit - let DMA take over
 800869e:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	4a1a      	ldr	r2, [pc, #104]	; (800870c <mg_tcpip_driver_stm32_tx+0x11c>)
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	4413      	add	r3, r2
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a17      	ldr	r2, [pc, #92]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	4610      	mov	r0, r2
 80086b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086b4:	4915      	ldr	r1, [pc, #84]	; (800870c <mg_tcpip_driver_stm32_tx+0x11c>)
 80086b6:	0103      	lsls	r3, r0, #4
 80086b8:	440b      	add	r3, r1
 80086ba:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80086bc:	4b12      	ldr	r3, [pc, #72]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	4b10      	ldr	r3, [pc, #64]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d902      	bls.n	80086d6 <mg_tcpip_driver_stm32_tx+0xe6>
 80086d0:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <mg_tcpip_driver_stm32_tx+0x118>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
  }
  DSB();                         // ensure descriptors have been written
 80086d6:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = BIT(2) | BIT(5);  // Clear any prior TBUS/TUS
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <mg_tcpip_driver_stm32_tx+0x12c>)
 80086dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e0:	461a      	mov	r2, r3
 80086e2:	2324      	movs	r3, #36	; 0x24
 80086e4:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;              // and resume
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <mg_tcpip_driver_stm32_tx+0x12c>)
 80086e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ec:	461a      	mov	r2, r3
 80086ee:	2300      	movs	r3, #0
 80086f0:	6053      	str	r3, [r2, #4]
  return len;
 80086f2:	68bb      	ldr	r3, [r7, #8]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	08014f28 	.word	0x08014f28
 8008700:	08013568 	.word	0x08013568
 8008704:	08014860 	.word	0x08014860
 8008708:	20003774 	.word	0x20003774
 800870c:	20000714 	.word	0x20000714
 8008710:	08014874 	.word	0x08014874
 8008714:	20001f64 	.word	0x20001f64
 8008718:	30100000 	.word	0x30100000
 800871c:	40028000 	.word	0x40028000

08008720 <mg_tcpip_driver_stm32_up>:

static bool mg_tcpip_driver_stm32_up(struct mg_tcpip_if *ifp) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 8008728:	2101      	movs	r1, #1
 800872a:	2000      	movs	r0, #0
 800872c:	f7ff fd08 	bl	8008140 <eth_read_phy>
 8008730:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	089b      	lsrs	r3, r3, #2
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	bf14      	ite	ne
 800873e:	2301      	movne	r3, #1
 8008740:	2300      	moveq	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800874a:	2b00      	cmp	r3, #0
 800874c:	d13f      	bne.n	80087ce <mg_tcpip_driver_stm32_up+0xae>
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d03c      	beq.n	80087ce <mg_tcpip_driver_stm32_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 8008754:	211f      	movs	r1, #31
 8008756:	2000      	movs	r0, #0
 8008758:	f7ff fcf2 	bl	8008140 <eth_read_phy>
 800875c:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(11);  // 100M, Full-duplex
 800875e:	4b1e      	ldr	r3, [pc, #120]	; (80087d8 <mg_tcpip_driver_stm32_up+0xb8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 8008766:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d103      	bne.n	800877a <mg_tcpip_driver_stm32_up+0x5a>
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008778:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(11);      // Half-duplex
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	d103      	bne.n	800878c <mg_tcpip_driver_stm32_up+0x6c>
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800878a:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 800878c:	4a12      	ldr	r2, [pc, #72]	; (80087d8 <mg_tcpip_driver_stm32_up+0xb8>)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 8008792:	4b12      	ldr	r3, [pc, #72]	; (80087dc <mg_tcpip_driver_stm32_up+0xbc>)
 8008794:	f641 3298 	movw	r2, #7064	; 0x1b98
 8008798:	4911      	ldr	r1, [pc, #68]	; (80087e0 <mg_tcpip_driver_stm32_up+0xc0>)
 800879a:	2003      	movs	r0, #3
 800879c:	f7fd ff48 	bl	8006630 <mg_log_prefix>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d013      	beq.n	80087ce <mg_tcpip_driver_stm32_up+0xae>
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <mg_tcpip_driver_stm32_up+0x94>
 80087b0:	2164      	movs	r1, #100	; 0x64
 80087b2:	e000      	b.n	80087b6 <mg_tcpip_driver_stm32_up+0x96>
 80087b4:	210a      	movs	r1, #10
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <mg_tcpip_driver_stm32_up+0xa4>
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <mg_tcpip_driver_stm32_up+0xc4>)
 80087c2:	e000      	b.n	80087c6 <mg_tcpip_driver_stm32_up+0xa6>
 80087c4:	4b08      	ldr	r3, [pc, #32]	; (80087e8 <mg_tcpip_driver_stm32_up+0xc8>)
 80087c6:	461a      	mov	r2, r3
 80087c8:	4808      	ldr	r0, [pc, #32]	; (80087ec <mg_tcpip_driver_stm32_up+0xcc>)
 80087ca:	f7fd ff8b 	bl	80066e4 <mg_log>
              maccr & BIT(11) ? "full" : "half"));
  }
  return up;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	40028000 	.word	0x40028000
 80087dc:	08014f44 	.word	0x08014f44
 80087e0:	08013568 	.word	0x08013568
 80087e4:	08014888 	.word	0x08014888
 80087e8:	08014890 	.word	0x08014890
 80087ec:	08014898 	.word	0x08014898

080087f0 <ETH_IRQHandler>:

void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
  if (ETH->DMASR & BIT(6)) {             // Frame received, loop
 80087f6:	4b3d      	ldr	r3, [pc, #244]	; (80088ec <ETH_IRQHandler+0xfc>)
 80087f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008802:	2b00      	cmp	r3, #0
 8008804:	d061      	beq.n	80088ca <ETH_IRQHandler+0xda>
    ETH->DMASR = BIT(16) | BIT(6);       // Clear flag
 8008806:	4b39      	ldr	r3, [pc, #228]	; (80088ec <ETH_IRQHandler+0xfc>)
 8008808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800880c:	461a      	mov	r2, r3
 800880e:	4b38      	ldr	r3, [pc, #224]	; (80088f0 <ETH_IRQHandler+0x100>)
 8008810:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8008812:	2300      	movs	r3, #0
 8008814:	607b      	str	r3, [r7, #4]
 8008816:	e053      	b.n	80088c0 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8008818:	4b36      	ldr	r3, [pc, #216]	; (80088f4 <ETH_IRQHandler+0x104>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	4a36      	ldr	r2, [pc, #216]	; (80088f8 <ETH_IRQHandler+0x108>)
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	4413      	add	r3, r2
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	db4f      	blt.n	80088c8 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 8008828:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <ETH_IRQHandler+0x104>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	4a32      	ldr	r2, [pc, #200]	; (80088f8 <ETH_IRQHandler+0x108>)
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	4413      	add	r3, r2
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800883c:	d128      	bne.n	8008890 <ETH_IRQHandler+0xa0>
          !(s_rxdesc[s_rxno][0] & BIT(15))) {  // skip partial/errored frames
 800883e:	4b2d      	ldr	r3, [pc, #180]	; (80088f4 <ETH_IRQHandler+0x104>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	4a2d      	ldr	r2, [pc, #180]	; (80088f8 <ETH_IRQHandler+0x108>)
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	4413      	add	r3, r2
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 800884e:	2b00      	cmp	r3, #0
 8008850:	d11e      	bne.n	8008890 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (BIT(14) - 1));
 8008852:	4b28      	ldr	r3, [pc, #160]	; (80088f4 <ETH_IRQHandler+0x104>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	4a28      	ldr	r2, [pc, #160]	; (80088f8 <ETH_IRQHandler+0x108>)
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	4413      	add	r3, r2
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	0c1b      	lsrs	r3, r3, #16
 8008860:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008864:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8008866:	4b23      	ldr	r3, [pc, #140]	; (80088f4 <ETH_IRQHandler+0x104>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f240 6304 	movw	r3, #1540	; 0x604
 8008870:	fb02 f303 	mul.w	r3, r2, r3
 8008874:	4a21      	ldr	r2, [pc, #132]	; (80088fc <ETH_IRQHandler+0x10c>)
 8008876:	1898      	adds	r0, r3, r2
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b04      	cmp	r3, #4
 800887c:	d902      	bls.n	8008884 <ETH_IRQHandler+0x94>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	3b04      	subs	r3, #4
 8008882:	e000      	b.n	8008886 <ETH_IRQHandler+0x96>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	4a1e      	ldr	r2, [pc, #120]	; (8008900 <ETH_IRQHandler+0x110>)
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	f002 faac 	bl	800ade8 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = BIT(31);
 8008890:	4b18      	ldr	r3, [pc, #96]	; (80088f4 <ETH_IRQHandler+0x104>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	4a18      	ldr	r2, [pc, #96]	; (80088f8 <ETH_IRQHandler+0x108>)
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	4413      	add	r3, r2
 800889a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800889e:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <ETH_IRQHandler+0x104>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	4b12      	ldr	r3, [pc, #72]	; (80088f4 <ETH_IRQHandler+0x104>)
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	4b11      	ldr	r3, [pc, #68]	; (80088f4 <ETH_IRQHandler+0x104>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d902      	bls.n	80088ba <ETH_IRQHandler+0xca>
 80088b4:	4b0f      	ldr	r3, [pc, #60]	; (80088f4 <ETH_IRQHandler+0x104>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3301      	adds	r3, #1
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b09      	cmp	r3, #9
 80088c4:	d9a8      	bls.n	8008818 <ETH_IRQHandler+0x28>
 80088c6:	e000      	b.n	80088ca <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 80088c8:	bf00      	nop
    }
  }
  ETH->DMASR = BIT(7);  // Clear possible RBUS while processing
 80088ca:	4b08      	ldr	r3, [pc, #32]	; (80088ec <ETH_IRQHandler+0xfc>)
 80088cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d0:	461a      	mov	r2, r3
 80088d2:	2380      	movs	r3, #128	; 0x80
 80088d4:	6153      	str	r3, [r2, #20]
  ETH->DMARPDR = 0;     // and resume RX
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <ETH_IRQHandler+0xfc>)
 80088d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088dc:	461a      	mov	r2, r3
 80088de:	2300      	movs	r3, #0
 80088e0:	6093      	str	r3, [r2, #8]
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	40028000 	.word	0x40028000
 80088f0:	00010040 	.word	0x00010040
 80088f4:	20003775 	.word	0x20003775
 80088f8:	200006d4 	.word	0x200006d4
 80088fc:	20000754 	.word	0x20000754
 8008900:	20003778 	.word	0x20003778

08008904 <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 8008904:	b590      	push	{r4, r7, lr}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	441a      	add	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	461a      	mov	r2, r3
 800891e:	68fc      	ldr	r4, [r7, #12]
 8008920:	463b      	mov	r3, r7
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fd68 	bl	80073fa <mg_str_n>
 800892a:	f104 0308 	add.w	r3, r4, #8
 800892e:	463a      	mov	r2, r7
 8008930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008934:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8008938:	bf00      	nop
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	bd90      	pop	{r4, r7, pc}

08008940 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	e016      	b.n	8008984 <csumup+0x44>
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <csumup+0x2c>
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	4413      	add	r3, r2
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	e005      	b.n	8008978 <csumup+0x38>
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	461a      	mov	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	3301      	adds	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	429a      	cmp	r2, r3
 800898a:	d3e4      	bcc.n	8008956 <csumup+0x16>
  return sum;
 800898c:	68fb      	ldr	r3, [r7, #12]
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 80089a2:	e005      	b.n	80089b0 <csumfin+0x16>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	0c1b      	lsrs	r3, r3, #16
 80089ac:	4413      	add	r3, r2
 80089ae:	607b      	str	r3, [r7, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1f5      	bne.n	80089a4 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	43db      	mvns	r3, r3
 80089be:	b29b      	uxth	r3, r3
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff fb54 	bl	800806e <mg_ntohs>
 80089c6:	4603      	mov	r3, r0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	2000      	movs	r0, #0
 80089e0:	f7ff ffae 	bl	8008940 <csumup>
 80089e4:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7ff ffd7 	bl	800899a <csumfin>
 80089ec:	4603      	mov	r3, r0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6950      	ldr	r0, [r2, #20]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	4798      	blx	r3
 8008a10:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d104      	bne.n	8008a24 <ether_output+0x2e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 8008a24:	68fb      	ldr	r3, [r7, #12]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	330e      	adds	r3, #14
 8008a42:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2206      	movs	r2, #6
 8008a48:	21ff      	movs	r1, #255	; 0xff
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f009 fe35 	bl	80126ba <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3306      	adds	r3, #6
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	2206      	movs	r2, #6
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f009 fef8 	bl	801284e <memcpy>
  eth->type = mg_htons(0x806);
 8008a5e:	f640 0006 	movw	r0, #2054	; 0x806
 8008a62:	f7ff fb04 	bl	800806e <mg_ntohs>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8008a6e:	221c      	movs	r2, #28
 8008a70:	2100      	movs	r1, #0
 8008a72:	68b8      	ldr	r0, [r7, #8]
 8008a74:	f009 fe21 	bl	80126ba <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8008a78:	2001      	movs	r0, #1
 8008a7a:	f7ff faf8 	bl	800806e <mg_ntohs>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461a      	mov	r2, r3
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008a8a:	f7ff faf0 	bl	800806e <mg_ntohs>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	461a      	mov	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	805a      	strh	r2, [r3, #2]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2206      	movs	r2, #6
 8008a9a:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2204      	movs	r2, #4
 8008aa0:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	f7ff fae3 	bl	800806e <mg_ntohs>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	461a      	mov	r2, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	80da      	strh	r2, [r3, #6]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	619a      	str	r2, [r3, #24]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	2206      	movs	r2, #6
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f009 fec0 	bl	801284e <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f103 021c 	add.w	r2, r3, #28
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7ff ff8b 	bl	80089f6 <ether_output>
}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d138      	bne.n	8008b6c <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8008afa:	4b35      	ldr	r3, [pc, #212]	; (8008bd0 <onstatechange+0xe8>)
 8008afc:	f641 62dd 	movw	r2, #7901	; 0x1edd
 8008b00:	4934      	ldr	r1, [pc, #208]	; (8008bd4 <onstatechange+0xec>)
 8008b02:	2002      	movs	r0, #2
 8008b04:	f7fd fd94 	bl	8006630 <mg_log_prefix>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d006      	beq.n	8008b1c <onstatechange+0x34>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3308      	adds	r3, #8
 8008b12:	461a      	mov	r2, r3
 8008b14:	4930      	ldr	r1, [pc, #192]	; (8008bd8 <onstatechange+0xf0>)
 8008b16:	4831      	ldr	r0, [pc, #196]	; (8008bdc <onstatechange+0xf4>)
 8008b18:	f7fd fde4 	bl	80066e4 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8008b1c:	4b2c      	ldr	r3, [pc, #176]	; (8008bd0 <onstatechange+0xe8>)
 8008b1e:	f641 62de 	movw	r2, #7902	; 0x1ede
 8008b22:	492c      	ldr	r1, [pc, #176]	; (8008bd4 <onstatechange+0xec>)
 8008b24:	2002      	movs	r0, #2
 8008b26:	f7fd fd83 	bl	8006630 <mg_log_prefix>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d006      	beq.n	8008b3e <onstatechange+0x56>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3310      	adds	r3, #16
 8008b34:	461a      	mov	r2, r3
 8008b36:	4928      	ldr	r1, [pc, #160]	; (8008bd8 <onstatechange+0xf0>)
 8008b38:	4829      	ldr	r0, [pc, #164]	; (8008be0 <onstatechange+0xf8>)
 8008b3a:	f7fd fdd3 	bl	80066e4 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8008b3e:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <onstatechange+0xe8>)
 8008b40:	f641 62df 	movw	r2, #7903	; 0x1edf
 8008b44:	4923      	ldr	r1, [pc, #140]	; (8008bd4 <onstatechange+0xec>)
 8008b46:	2002      	movs	r0, #2
 8008b48:	f7fd fd72 	bl	8006630 <mg_log_prefix>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d005      	beq.n	8008b5e <onstatechange+0x76>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	461a      	mov	r2, r3
 8008b56:	4923      	ldr	r1, [pc, #140]	; (8008be4 <onstatechange+0xfc>)
 8008b58:	4823      	ldr	r0, [pc, #140]	; (8008be8 <onstatechange+0x100>)
 8008b5a:	f7fd fdc3 	bl	80066e4 <mg_log>
    arp_ask(ifp, ifp->gw);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff62 	bl	8008a2e <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 8008b6a:	e02c      	b.n	8008bc6 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d115      	bne.n	8008ba2 <onstatechange+0xba>
    MG_ERROR(("Link up"));
 8008b76:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <onstatechange+0xe8>)
 8008b78:	f641 62e2 	movw	r2, #7906	; 0x1ee2
 8008b7c:	4915      	ldr	r1, [pc, #84]	; (8008bd4 <onstatechange+0xec>)
 8008b7e:	2001      	movs	r0, #1
 8008b80:	f7fd fd56 	bl	8006630 <mg_log_prefix>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <onstatechange+0xa8>
 8008b8a:	4818      	ldr	r0, [pc, #96]	; (8008bec <onstatechange+0x104>)
 8008b8c:	f7fd fdaa 	bl	80066e4 <mg_log>
    srand((unsigned int) mg_millis());
 8008b90:	f7ff fabe 	bl	8008110 <mg_millis>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4613      	mov	r3, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f009 fb8a 	bl	80122b4 <srand>
}
 8008ba0:	e011      	b.n	8008bc6 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10c      	bne.n	8008bc6 <onstatechange+0xde>
    MG_ERROR(("Link down"));
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <onstatechange+0xe8>)
 8008bae:	f641 62e5 	movw	r2, #7909	; 0x1ee5
 8008bb2:	4908      	ldr	r1, [pc, #32]	; (8008bd4 <onstatechange+0xec>)
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	f7fd fd3b 	bl	8006630 <mg_log_prefix>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <onstatechange+0xde>
 8008bc0:	480b      	ldr	r0, [pc, #44]	; (8008bf0 <onstatechange+0x108>)
 8008bc2:	f7fd fd8f 	bl	80066e4 <mg_log>
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	08014f60 	.word	0x08014f60
 8008bd4:	08013568 	.word	0x08013568
 8008bd8:	08006e81 	.word	0x08006e81
 8008bdc:	080148b0 	.word	0x080148b0
 8008be0:	080148c0 	.word	0x080148c0
 8008be4:	08006f45 	.word	0x08006f45
 8008be8:	080148d0 	.word	0x080148d0
 8008bec:	080148e0 	.word	0x080148e0
 8008bf0:	080148e8 	.word	0x080148e8

08008bf4 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	330e      	adds	r3, #14
 8008c0e:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2206      	movs	r2, #6
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f009 fe19 	bl	801284e <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	3306      	adds	r3, #6
 8008c20:	68f9      	ldr	r1, [r7, #12]
 8008c22:	2206      	movs	r2, #6
 8008c24:	4618      	mov	r0, r3
 8008c26:	f009 fe12 	bl	801284e <memcpy>
  eth->type = mg_htons(0x800);
 8008c2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c2e:	f7ff fa1e 	bl	800806e <mg_ntohs>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 8008c3a:	2214      	movs	r2, #20
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6938      	ldr	r0, [r7, #16]
 8008c40:	f009 fd3b 	bl	80126ba <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2245      	movs	r2, #69	; 0x45
 8008c48:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c52:	719a      	strb	r2, [r3, #6]
 8008c54:	2200      	movs	r2, #0
 8008c56:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3314      	adds	r3, #20
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff fa04 	bl	800806e <mg_ntohs>
 8008c66:	4603      	mov	r3, r0
 8008c68:	461a      	mov	r2, r3
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2240      	movs	r2, #64	; 0x40
 8008c72:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	79fa      	ldrb	r2, [r7, #7]
 8008c78:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6a3a      	ldr	r2, [r7, #32]
 8008c84:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8008c86:	2114      	movs	r1, #20
 8008c88:	6938      	ldr	r0, [r7, #16]
 8008c8a:	f7ff fea1 	bl	80089d0 <ipcsum>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	461a      	mov	r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	815a      	strh	r2, [r3, #10]
  return ip;
 8008c96:	693b      	ldr	r3, [r7, #16]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08a      	sub	sp, #40	; 0x28
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2211      	movs	r2, #17
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff ff98 	bl	8008bf4 <tx_ip>
 8008cc4:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	3314      	adds	r3, #20
 8008cca:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	887a      	ldrh	r2, [r7, #2]
 8008cd0:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008cd6:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3308      	adds	r3, #8
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff f9c4 	bl	800806e <mg_ntohs>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	719a      	strb	r2, [r3, #6]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	69b9      	ldr	r1, [r7, #24]
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f7ff fe1f 	bl	8008940 <csumup>
 8008d02:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8008d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d08:	6978      	ldr	r0, [r7, #20]
 8008d0a:	f7ff fe19 	bl	8008940 <csumup>
 8008d0e:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	330c      	adds	r3, #12
 8008d14:	2204      	movs	r2, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	6978      	ldr	r0, [r7, #20]
 8008d1a:	f7ff fe11 	bl	8008940 <csumup>
 8008d1e:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	3310      	adds	r3, #16
 8008d24:	2204      	movs	r2, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	6978      	ldr	r0, [r7, #20]
 8008d2a:	f7ff fe09 	bl	8008940 <csumup>
 8008d2e:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	7a5b      	ldrb	r3, [r3, #9]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	441a      	add	r2, r3
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	3308      	adds	r3, #8
 8008d40:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f7ff fe29 	bl	800899a <csumfin>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	3308      	adds	r3, #8
 8008d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f009 fc94 	bl	8012686 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d60:	332a      	adds	r3, #42	; 0x2a
 8008d62:	4619      	mov	r1, r3
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7ff fe46 	bl	80089f6 <ether_output>
}
 8008d6a:	bf00      	nop
 8008d6c:	3720      	adds	r7, #32
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8008d74:	b5b0      	push	{r4, r5, r7, lr}
 8008d76:	b0cc      	sub	sp, #304	; 0x130
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008d7e:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8008d82:	6020      	str	r0, [r4, #0]
 8008d84:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008d88:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8008d8c:	6001      	str	r1, [r0, #0]
 8008d8e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8008d92:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8008d96:	600a      	str	r2, [r1, #0]
 8008d98:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008d9c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008da0:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8008da2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008da6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008daa:	4a38      	ldr	r2, [pc, #224]	; (8008e8c <tx_dhcp+0x118>)
 8008dac:	4618      	mov	r0, r3
 8008dae:	4611      	mov	r1, r2
 8008db0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008db4:	461a      	mov	r2, r3
 8008db6:	f009 fd4a 	bl	801284e <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8008dba:	4835      	ldr	r0, [pc, #212]	; (8008e90 <tx_dhcp+0x11c>)
 8008dbc:	f7ff f93e 	bl	800803c <mg_ntohl>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008dc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008dca:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8008dce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008dd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dd6:	6819      	ldr	r1, [r3, #0]
 8008dd8:	f107 0310 	add.w	r3, r7, #16
 8008ddc:	331c      	adds	r3, #28
 8008dde:	2206      	movs	r2, #6
 8008de0:	4618      	mov	r0, r3
 8008de2:	f009 fd34 	bl	801284e <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8008de6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008dea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3302      	adds	r3, #2
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008dfa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008dfe:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8008e00:	f107 0310 	add.w	r3, r7, #16
 8008e04:	33f0      	adds	r3, #240	; 0xf0
 8008e06:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008e0a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f009 fd1d 	bl	801284e <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8008e14:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <tx_dhcp+0xbc>
 8008e1c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008e24:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008e28:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008e2c:	6812      	ldr	r2, [r2, #0]
 8008e2e:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8008e30:	2044      	movs	r0, #68	; 0x44
 8008e32:	f7ff f91c 	bl	800806e <mg_ntohs>
 8008e36:	4603      	mov	r3, r0
 8008e38:	461d      	mov	r5, r3
 8008e3a:	2043      	movs	r0, #67	; 0x43
 8008e3c:	f7ff f917 	bl	800806e <mg_ntohs>
 8008e40:	4603      	mov	r3, r0
 8008e42:	461c      	mov	r4, r3
 8008e44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e48:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008e4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e50:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8008e54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e58:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008e5c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e60:	9303      	str	r3, [sp, #12]
 8008e62:	f107 0310 	add.w	r3, r7, #16
 8008e66:	9302      	str	r3, [sp, #8]
 8008e68:	9401      	str	r4, [sp, #4]
 8008e6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462b      	mov	r3, r5
 8008e78:	6812      	ldr	r2, [r2, #0]
 8008e7a:	6809      	ldr	r1, [r1, #0]
 8008e7c:	6800      	ldr	r0, [r0, #0]
 8008e7e:	f7ff ff0f 	bl	8008ca0 <tx_udp>
         sizeof(dhcp));
}
 8008e82:	bf00      	nop
 8008e84:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e8c:	080148f4 	.word	0x080148f4
 8008e90:	63825363 	.word	0x63825363

08008e94 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	b090      	sub	sp, #64	; 0x40
 8008e98:	af04      	add	r7, sp, #16
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8008ea0:	4b19      	ldr	r3, [pc, #100]	; (8008f08 <tx_dhcp_request_sel+0x74>)
 8008ea2:	f107 0414 	add.w	r4, r7, #20
 8008ea6:	461d      	mov	r5, r3
 8008ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008eac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008eb0:	c403      	stmia	r4!, {r0, r1}
 8008eb2:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	330e      	adds	r3, #14
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 8008ebe:	f107 0314 	add.w	r3, r7, #20
 8008ec2:	3314      	adds	r3, #20
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9302      	str	r3, [sp, #8]
 8008ecc:	2319      	movs	r3, #25
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	f107 0314 	add.w	r3, r7, #20
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eda:	2200      	movs	r2, #0
 8008edc:	490b      	ldr	r1, [pc, #44]	; (8008f0c <tx_dhcp_request_sel+0x78>)
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff ff48 	bl	8008d74 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <tx_dhcp_request_sel+0x7c>)
 8008ee6:	f641 7231 	movw	r2, #7985	; 0x1f31
 8008eea:	490a      	ldr	r1, [pc, #40]	; (8008f14 <tx_dhcp_request_sel+0x80>)
 8008eec:	2003      	movs	r0, #3
 8008eee:	f7fd fb9f 	bl	8006630 <mg_log_prefix>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <tx_dhcp_request_sel+0x6a>
 8008ef8:	4807      	ldr	r0, [pc, #28]	; (8008f18 <tx_dhcp_request_sel+0x84>)
 8008efa:	f7fd fbf3 	bl	80066e4 <mg_log>
}
 8008efe:	bf00      	nop
 8008f00:	3730      	adds	r7, #48	; 0x30
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bdb0      	pop	{r4, r5, r7, pc}
 8008f06:	bf00      	nop
 8008f08:	08014a14 	.word	0x08014a14
 8008f0c:	08014e38 	.word	0x08014e38
 8008f10:	08014f70 	.word	0x08014f70
 8008f14:	08013568 	.word	0x08013568
 8008f18:	08014a04 	.word	0x08014a04

08008f1c <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	; 0x28
 8008f20:	af04      	add	r7, sp, #16
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 8008f2a:	4b10      	ldr	r3, [pc, #64]	; (8008f6c <tx_dhcp_request_re+0x50>)
 8008f2c:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8008f2e:	2301      	movs	r3, #1
 8008f30:	9302      	str	r3, [sp, #8]
 8008f32:	2304      	movs	r3, #4
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	f107 0314 	add.w	r3, r7, #20
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7ff ff16 	bl	8008d74 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008f48:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <tx_dhcp_request_re+0x54>)
 8008f4a:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8008f4e:	4909      	ldr	r1, [pc, #36]	; (8008f74 <tx_dhcp_request_re+0x58>)
 8008f50:	2003      	movs	r0, #3
 8008f52:	f7fd fb6d 	bl	8006630 <mg_log_prefix>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <tx_dhcp_request_re+0x46>
 8008f5c:	4806      	ldr	r0, [pc, #24]	; (8008f78 <tx_dhcp_request_re+0x5c>)
 8008f5e:	f7fd fbc1 	bl	80066e4 <mg_log>
}
 8008f62:	bf00      	nop
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	ff030135 	.word	0xff030135
 8008f70:	08014f84 	.word	0x08014f84
 8008f74:	08013568 	.word	0x08013568
 8008f78:	08014a04 	.word	0x08014a04

08008f7c <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af04      	add	r7, sp, #16
 8008f82:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 8008f84:	4a14      	ldr	r2, [pc, #80]	; (8008fd8 <tx_dhcp_discover+0x5c>)
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f8e:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008f92:	2300      	movs	r3, #0
 8008f94:	9302      	str	r3, [sp, #8]
 8008f96:	2308      	movs	r3, #8
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	f107 0308 	add.w	r3, r7, #8
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	490d      	ldr	r1, [pc, #52]	; (8008fdc <tx_dhcp_discover+0x60>)
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff fee3 	bl	8008d74 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8008fae:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <tx_dhcp_discover+0x64>)
 8008fb0:	f641 7246 	movw	r2, #8006	; 0x1f46
 8008fb4:	490b      	ldr	r1, [pc, #44]	; (8008fe4 <tx_dhcp_discover+0x68>)
 8008fb6:	2003      	movs	r0, #3
 8008fb8:	f7fd fb3a 	bl	8006630 <mg_log_prefix>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <tx_dhcp_discover+0x52>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4908      	ldr	r1, [pc, #32]	; (8008fe8 <tx_dhcp_discover+0x6c>)
 8008fc8:	4808      	ldr	r0, [pc, #32]	; (8008fec <tx_dhcp_discover+0x70>)
 8008fca:	f7fd fb8b 	bl	80066e4 <mg_log>
}
 8008fce:	bf00      	nop
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	08014a50 	.word	0x08014a50
 8008fdc:	08014e38 	.word	0x08014e38
 8008fe0:	08014f98 	.word	0x08014f98
 8008fe4:	08013568 	.word	0x08013568
 8008fe8:	08006f45 	.word	0x08006f45
 8008fec:	08014a30 	.word	0x08014a30

08008ff0 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	617b      	str	r3, [r7, #20]
 8009008:	e03e      	b.n	8009088 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <getpeer+0x42>
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d007      	beq.n	8009032 <getpeer+0x42>
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	8b1a      	ldrh	r2, [r3, #24]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	885b      	ldrh	r3, [r3, #2]
 800902c:	b29b      	uxth	r3, r3
 800902e:	429a      	cmp	r2, r3
 8009030:	d02e      	beq.n	8009090 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d11f      	bne.n	8009082 <getpeer+0x92>
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01b      	beq.n	8009082 <getpeer+0x92>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	8b1a      	ldrh	r2, [r3, #24]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009052:	885b      	ldrh	r3, [r3, #2]
 8009054:	b29b      	uxth	r3, r3
 8009056:	429a      	cmp	r2, r3
 8009058:	d113      	bne.n	8009082 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009060:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009064:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8009066:	79fa      	ldrb	r2, [r7, #7]
 8009068:	429a      	cmp	r2, r3
 800906a:	d10a      	bne.n	8009082 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10f      	bne.n	8009092 <getpeer+0xa2>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	429a      	cmp	r2, r3
 8009080:	d007      	beq.n	8009092 <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1bd      	bne.n	800900a <getpeer+0x1a>
 800908e:	e000      	b.n	8009092 <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8009090:	bf00      	nop
      break;
  }
  return c;
 8009092:	697b      	ldr	r3, [r7, #20]
}
 8009094:	4618      	mov	r0, r3
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80090a0:	b5b0      	push	{r4, r5, r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	88db      	ldrh	r3, [r3, #6]
 80090b0:	b29c      	uxth	r4, r3
 80090b2:	2001      	movs	r0, #1
 80090b4:	f7fe ffdb 	bl	800806e <mg_ntohs>
 80090b8:	4603      	mov	r3, r0
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d176      	bne.n	80091ac <rx_arp+0x10c>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	699a      	ldr	r2, [r3, #24]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d16f      	bne.n	80091ac <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	330e      	adds	r3, #14
 80090d6:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80090d8:	6978      	ldr	r0, [r7, #20]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	3306      	adds	r3, #6
 80090e0:	2206      	movs	r2, #6
 80090e2:	4619      	mov	r1, r3
 80090e4:	f009 fbb3 	bl	801284e <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	3306      	adds	r3, #6
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	2206      	movs	r2, #6
 80090f0:	4618      	mov	r0, r3
 80090f2:	f009 fbac 	bl	801284e <memcpy>
    eth->type = mg_htons(0x806);
 80090f6:	f640 0006 	movw	r0, #2054	; 0x806
 80090fa:	f7fe ffb8 	bl	800806e <mg_ntohs>
 80090fe:	4603      	mov	r3, r0
 8009100:	461a      	mov	r2, r3
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	6814      	ldr	r4, [r2, #0]
 800910e:	6850      	ldr	r0, [r2, #4]
 8009110:	6891      	ldr	r1, [r2, #8]
 8009112:	68d5      	ldr	r5, [r2, #12]
 8009114:	601c      	str	r4, [r3, #0]
 8009116:	6058      	str	r0, [r3, #4]
 8009118:	6099      	str	r1, [r3, #8]
 800911a:	60dd      	str	r5, [r3, #12]
 800911c:	6914      	ldr	r4, [r2, #16]
 800911e:	6950      	ldr	r0, [r2, #20]
 8009120:	6991      	ldr	r1, [r2, #24]
 8009122:	611c      	str	r4, [r3, #16]
 8009124:	6158      	str	r0, [r3, #20]
 8009126:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8009128:	2002      	movs	r0, #2
 800912a:	f7fe ffa0 	bl	800806e <mg_ntohs>
 800912e:	4603      	mov	r3, r0
 8009130:	461a      	mov	r2, r3
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f103 0012 	add.w	r0, r3, #18
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	3308      	adds	r3, #8
 8009142:	2206      	movs	r2, #6
 8009144:	4619      	mov	r1, r3
 8009146:	f009 fb82 	bl	801284e <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3308      	adds	r3, #8
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	2206      	movs	r2, #6
 8009152:	4618      	mov	r0, r3
 8009154:	f009 fb7b 	bl	801284e <memcpy>
    arp->tpa = pkt->arp->spa;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 800916e:	4b46      	ldr	r3, [pc, #280]	; (8009288 <rx_arp+0x1e8>)
 8009170:	f641 7265 	movw	r2, #8037	; 0x1f65
 8009174:	4945      	ldr	r1, [pc, #276]	; (800928c <rx_arp+0x1ec>)
 8009176:	2003      	movs	r0, #3
 8009178:	f7fd fa5a 	bl	8006630 <mg_log_prefix>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <rx_arp+0xf8>
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f103 0218 	add.w	r2, r3, #24
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3308      	adds	r3, #8
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	4b40      	ldr	r3, [pc, #256]	; (8009290 <rx_arp+0x1f0>)
 8009190:	493f      	ldr	r1, [pc, #252]	; (8009290 <rx_arp+0x1f0>)
 8009192:	4840      	ldr	r0, [pc, #256]	; (8009294 <rx_arp+0x1f4>)
 8009194:	f7fd faa6 	bl	80066e4 <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f103 021c 	add.w	r2, r3, #28
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fc26 	bl	80089f6 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80091aa:	e069      	b.n	8009280 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	88db      	ldrh	r3, [r3, #6]
 80091b2:	b29c      	uxth	r4, r3
 80091b4:	2002      	movs	r0, #2
 80091b6:	f7fe ff5a 	bl	800806e <mg_ntohs>
 80091ba:	4603      	mov	r3, r0
 80091bc:	429c      	cmp	r4, r3
 80091be:	d15f      	bne.n	8009280 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	3312      	adds	r3, #18
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	2206      	movs	r2, #6
 80091ca:	4618      	mov	r0, r3
 80091cc:	f009 fa4b 	bl	8012666 <memcmp>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d153      	bne.n	800927e <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	f8d3 200e 	ldr.w	r2, [r3, #14]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d10a      	bne.n	80091fc <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	3308      	adds	r3, #8
 80091f2:	2206      	movs	r2, #6
 80091f4:	4619      	mov	r1, r3
 80091f6:	f009 fb2a 	bl	801284e <memcpy>
 80091fa:	e041      	b.n	8009280 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	2200      	movs	r2, #0
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff fef3 	bl	8008ff0 <getpeer>
 800920a:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d036      	beq.n	8009280 <rx_arp+0x1e0>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d02e      	beq.n	8009280 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3390      	adds	r3, #144	; 0x90
 8009226:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f103 0010 	add.w	r0, r3, #16
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	3308      	adds	r3, #8
 8009234:	2206      	movs	r2, #6
 8009236:	4619      	mov	r1, r3
 8009238:	f009 fb09 	bl	801284e <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800923c:	4b12      	ldr	r3, [pc, #72]	; (8009288 <rx_arp+0x1e8>)
 800923e:	f641 7272 	movw	r2, #8050	; 0x1f72
 8009242:	4912      	ldr	r1, [pc, #72]	; (800928c <rx_arp+0x1ec>)
 8009244:	2003      	movs	r0, #3
 8009246:	f7fd f9f3 	bl	8006630 <mg_log_prefix>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00e      	beq.n	800926e <rx_arp+0x1ce>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f103 021c 	add.w	r2, r3, #28
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3310      	adds	r3, #16
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <rx_arp+0x1f8>)
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	4613      	mov	r3, r2
 8009266:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <rx_arp+0x1f0>)
 8009268:	480c      	ldr	r0, [pc, #48]	; (800929c <rx_arp+0x1fc>)
 800926a:	f7fd fa3b 	bl	80066e4 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8009274:	f36f 1304 	bfc	r3, #4, #1
 8009278:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 800927c:	e000      	b.n	8009280 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800927e:	bf00      	nop
      }
    }
  }
}
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bdb0      	pop	{r4, r5, r7, pc}
 8009286:	bf00      	nop
 8009288:	08014fac 	.word	0x08014fac
 800928c:	08013568 	.word	0x08013568
 8009290:	08006e81 	.word	0x08006e81
 8009294:	08014a58 	.word	0x08014a58
 8009298:	08006f45 	.word	0x08006f45
 800929c:	08014a70 	.word	0x08014a70

080092a0 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d14d      	bne.n	8009350 <rx_icmp+0xb0>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d049      	beq.n	8009350 <rx_icmp+0xb0>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d142      	bne.n	8009350 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 80092ca:	2326      	movs	r3, #38	; 0x26
 80092cc:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 80092de:	69fa      	ldr	r2, [r7, #28]
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d901      	bls.n	80092ea <rx_icmp+0x4a>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	1d99      	adds	r1, r3, #6
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6898      	ldr	r0, [r3, #8]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	3204      	adds	r2, #4
 80092fe:	9201      	str	r2, [sp, #4]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	4603      	mov	r3, r0
 8009304:	2201      	movs	r2, #1
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff fc74 	bl	8008bf4 <tx_ip>
 800930c:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	3314      	adds	r3, #20
 8009312:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8009314:	2204      	movs	r2, #4
 8009316:	2100      	movs	r1, #0
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f009 f9ce 	bl	80126ba <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	1d18      	adds	r0, r3, #4
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	69fa      	ldr	r2, [r7, #28]
 8009328:	4619      	mov	r1, r3
 800932a:	f009 fa90 	bl	801284e <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	3304      	adds	r3, #4
 8009332:	4619      	mov	r1, r3
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff fb4b 	bl	80089d0 <ipcsum>
 800933a:	4603      	mov	r3, r0
 800933c:	461a      	mov	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	4413      	add	r3, r2
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fb53 	bl	80089f6 <ether_output>
  }
}
 8009350:	bf00      	nop
 8009352:	3720      	adds	r7, #32
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800935c:	b08e      	sub	sp, #56	; 0x38
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
 8009368:	2300      	movs	r3, #0
 800936a:	623b      	str	r3, [r7, #32]
 800936c:	2300      	movs	r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	2300      	movs	r3, #0
 8009372:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 8009374:	2300      	movs	r3, #0
 8009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009388:	33f0      	adds	r3, #240	; 0xf0
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	4413      	add	r3, r2
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80093a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a2:	429a      	cmp	r2, r3
 80093a4:	f0c0 8151 	bcc.w	800964a <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ac:	1d18      	adds	r0, r3, #4
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3302      	adds	r3, #2
 80093b2:	2204      	movs	r2, #4
 80093b4:	4619      	mov	r1, r3
 80093b6:	f009 f956 	bl	8012666 <memcmp>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f040 8146 	bne.w	800964e <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80093c2:	e05b      	b.n	800947c <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d10e      	bne.n	80093ea <rx_dhcp_client+0x92>
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	3301      	adds	r3, #1
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d109      	bne.n	80093ea <rx_dhcp_client+0x92>
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	3306      	adds	r3, #6
 80093da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093dc:	429a      	cmp	r2, r3
 80093de:	d904      	bls.n	80093ea <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	3302      	adds	r3, #2
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e041      	b.n	800946e <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d112      	bne.n	8009418 <rx_dhcp_client+0xc0>
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	3301      	adds	r3, #1
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d10d      	bne.n	8009418 <rx_dhcp_client+0xc0>
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	3306      	adds	r3, #6
 8009400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009402:	429a      	cmp	r2, r3
 8009404:	d908      	bls.n	8009418 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 8009406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009408:	3302      	adds	r3, #2
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	637b      	str	r3, [r7, #52]	; 0x34
 8009416:	e02a      	b.n	800946e <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b33      	cmp	r3, #51	; 0x33
 800941e:	d114      	bne.n	800944a <rx_dhcp_client+0xf2>
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	3301      	adds	r3, #1
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b04      	cmp	r3, #4
 8009428:	d10f      	bne.n	800944a <rx_dhcp_client+0xf2>
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	3306      	adds	r3, #6
 800942e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009430:	429a      	cmp	r2, r3
 8009432:	d90a      	bls.n	800944a <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	3302      	adds	r3, #2
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fdfc 	bl	800803c <mg_ntohl>
 8009444:	4603      	mov	r3, r0
 8009446:	61bb      	str	r3, [r7, #24]
 8009448:	e011      	b.n	800946e <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800944a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b35      	cmp	r3, #53	; 0x35
 8009450:	d10d      	bne.n	800946e <rx_dhcp_client+0x116>
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	3301      	adds	r3, #1
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d108      	bne.n	800946e <rx_dhcp_client+0x116>
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	3306      	adds	r3, #6
 8009460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009462:	429a      	cmp	r2, r3
 8009464:	d903      	bls.n	800946e <rx_dhcp_client+0x116>
      msgtype = p[2];
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	789b      	ldrb	r3, [r3, #2]
 800946a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	3301      	adds	r3, #1
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	3302      	adds	r3, #2
 8009476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009478:	4413      	add	r3, r2
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	3301      	adds	r3, #1
 8009480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009482:	429a      	cmp	r2, r3
 8009484:	d903      	bls.n	800948e <rx_dhcp_client+0x136>
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2bff      	cmp	r3, #255	; 0xff
 800948c:	d19a      	bne.n	80093c4 <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800948e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009492:	2b06      	cmp	r3, #6
 8009494:	d10c      	bne.n	80094b0 <rx_dhcp_client+0x158>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800949c:	429a      	cmp	r2, r3
 800949e:	d107      	bne.n	80094b0 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	609a      	str	r2, [r3, #8]
 80094ae:	e0c1      	b.n	8009634 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 80094b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d11a      	bne.n	80094ee <rx_dhcp_client+0x196>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d115      	bne.n	80094ee <rx_dhcp_client+0x196>
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d012      	beq.n	80094ee <rx_dhcp_client+0x196>
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00f      	beq.n	80094ee <rx_dhcp_client+0x196>
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00c      	beq.n	80094ee <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	461a      	mov	r2, r3
 80094dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7ff fcd8 	bl	8008e94 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2202      	movs	r2, #2
 80094e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80094ec:	e0a2      	b.n	8009634 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 80094ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	f040 809e 	bne.w	8009634 <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d162      	bne.n	80095c8 <rx_dhcp_client+0x270>
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	2b00      	cmp	r3, #0
 8009506:	d05f      	beq.n	80095c8 <rx_dhcp_client+0x270>
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d05c      	beq.n	80095c8 <rx_dhcp_client+0x270>
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d059      	beq.n	80095c8 <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800951a:	69b9      	ldr	r1, [r7, #24]
 800951c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009520:	fb00 f101 	mul.w	r1, r0, r1
 8009524:	2000      	movs	r0, #0
 8009526:	4688      	mov	r8, r1
 8009528:	4681      	mov	r9, r0
 800952a:	eb12 0108 	adds.w	r1, r2, r8
 800952e:	6039      	str	r1, [r7, #0]
 8009530:	eb43 0309 	adc.w	r3, r3, r9
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	e9d7 1200 	ldrd	r1, r2, [r7]
 800953c:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8009540:	4b45      	ldr	r3, [pc, #276]	; (8009658 <rx_dhcp_client+0x300>)
 8009542:	f641 72aa 	movw	r2, #8106	; 0x1faa
 8009546:	4945      	ldr	r1, [pc, #276]	; (800965c <rx_dhcp_client+0x304>)
 8009548:	2002      	movs	r0, #2
 800954a:	f7fd f871 	bl	8006630 <mg_log_prefix>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00f      	beq.n	8009574 <rx_dhcp_client+0x21c>
 8009554:	69bc      	ldr	r4, [r7, #24]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800955c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	f7f7 fb3a 	bl	8000bdc <__aeabi_uldivmod>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4621      	mov	r1, r4
 800956e:	483c      	ldr	r0, [pc, #240]	; (8009660 <rx_dhcp_client+0x308>)
 8009570:	f7fd f8b8 	bl	80066e4 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	3306      	adds	r3, #6
 8009580:	2206      	movs	r2, #6
 8009582:	4619      	mov	r1, r3
 8009584:	f009 f963 	bl	801284e <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800958c:	609a      	str	r2, [r3, #8]
 800958e:	6a3a      	ldr	r2, [r7, #32]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	611a      	str	r2, [r3, #16]
 8009594:	69fa      	ldr	r2, [r7, #28]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2203      	movs	r2, #3
 800959e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 80095a2:	f107 0310 	add.w	r3, r7, #16
 80095a6:	2108      	movs	r1, #8
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7f7 ff19 	bl	80013e0 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 80095ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095b2:	4614      	mov	r4, r2
 80095b4:	f7fe fdac 	bl	8008110 <mg_millis>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4613      	mov	r3, r2
 80095be:	4423      	add	r3, r4
 80095c0:	4618      	mov	r0, r3
 80095c2:	f008 fe77 	bl	80122b4 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80095c6:	e035      	b.n	8009634 <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d130      	bne.n	8009634 <rx_dhcp_client+0x2dc>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d8:	429a      	cmp	r2, r3
 80095da:	d12b      	bne.n	8009634 <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80095e2:	69b9      	ldr	r1, [r7, #24]
 80095e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095e8:	fb00 f101 	mul.w	r1, r0, r1
 80095ec:	2000      	movs	r0, #0
 80095ee:	460c      	mov	r4, r1
 80095f0:	4605      	mov	r5, r0
 80095f2:	eb12 0a04 	adds.w	sl, r2, r4
 80095f6:	eb43 0b05 	adc.w	fp, r3, r5
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8009600:	4b15      	ldr	r3, [pc, #84]	; (8009658 <rx_dhcp_client+0x300>)
 8009602:	f641 72b4 	movw	r2, #8116	; 0x1fb4
 8009606:	4915      	ldr	r1, [pc, #84]	; (800965c <rx_dhcp_client+0x304>)
 8009608:	2002      	movs	r0, #2
 800960a:	f7fd f811 	bl	8006630 <mg_log_prefix>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00f      	beq.n	8009634 <rx_dhcp_client+0x2dc>
 8009614:	69bc      	ldr	r4, [r7, #24]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800961c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009620:	f04f 0300 	mov.w	r3, #0
 8009624:	f7f7 fada 	bl	8000bdc <__aeabi_uldivmod>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4621      	mov	r1, r4
 800962e:	480c      	ldr	r0, [pc, #48]	; (8009660 <rx_dhcp_client+0x308>)
 8009630:	f7fd f858 	bl	80066e4 <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800963a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800963e:	429a      	cmp	r2, r3
 8009640:	d006      	beq.n	8009650 <rx_dhcp_client+0x2f8>
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7ff fa50 	bl	8008ae8 <onstatechange>
 8009648:	e002      	b.n	8009650 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800964a:	bf00      	nop
 800964c:	e000      	b.n	8009650 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800964e:	bf00      	nop
}
 8009650:	3738      	adds	r7, #56	; 0x38
 8009652:	46bd      	mov	sp, r7
 8009654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009658:	08014fb4 	.word	0x08014fb4
 800965c:	08013568 	.word	0x08013568
 8009660:	08014a8c 	.word	0x08014a8c

08009664 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009668:	b0d6      	sub	sp, #344	; 0x158
 800966a:	af04      	add	r7, sp, #16
 800966c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009670:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009674:	6018      	str	r0, [r3, #0]
 8009676:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800967a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800967e:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8009680:	2300      	movs	r3, #0
 8009682:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8009686:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800968a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	33f0      	adds	r3, #240	; 0xf0
 8009694:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 8009698:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800969c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80096b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096ba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80096c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	f0c0 818b 	bcc.w	80099e6 <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 80096d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80096d8:	4ac6      	ldr	r2, [pc, #792]	; (80099f4 <rx_dhcp_server+0x390>)
 80096da:	4618      	mov	r0, r3
 80096dc:	4611      	mov	r1, r2
 80096de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80096e2:	461a      	mov	r2, r3
 80096e4:	f009 f8b3 	bl	801284e <memcpy>
  res.yiaddr = ifp->ip;
 80096e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80096fc:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80096fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009702:	3310      	adds	r3, #16
 8009704:	3303      	adds	r3, #3
 8009706:	781a      	ldrb	r2, [r3, #0]
 8009708:	3201      	adds	r2, #1
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800970e:	e020      	b.n	8009752 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8009710:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b35      	cmp	r3, #53	; 0x35
 8009718:	d111      	bne.n	800973e <rx_dhcp_server+0xda>
 800971a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800971e:	3301      	adds	r3, #1
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d10b      	bne.n	800973e <rx_dhcp_server+0xda>
 8009726:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800972a:	3302      	adds	r3, #2
 800972c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009730:	429a      	cmp	r2, r3
 8009732:	d904      	bls.n	800973e <rx_dhcp_server+0xda>
      op = p[2];
 8009734:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009738:	789b      	ldrb	r3, [r3, #2]
 800973a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 800973e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009742:	3301      	adds	r3, #1
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	3302      	adds	r3, #2
 8009748:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800974c:	4413      	add	r3, r2
 800974e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8009752:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009756:	3301      	adds	r3, #1
 8009758:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800975c:	429a      	cmp	r2, r3
 800975e:	d904      	bls.n	800976a <rx_dhcp_server+0x106>
 8009760:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2bff      	cmp	r3, #255	; 0xff
 8009768:	d1d2      	bne.n	8009710 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800976a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800976e:	2b01      	cmp	r3, #1
 8009770:	d004      	beq.n	800977c <rx_dhcp_server+0x118>
 8009772:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009776:	2b03      	cmp	r3, #3
 8009778:	f040 8136 	bne.w	80099e8 <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800977c:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <rx_dhcp_server+0x124>
 8009784:	2302      	movs	r3, #2
 8009786:	e000      	b.n	800978a <rx_dhcp_server+0x126>
 8009788:	2305      	movs	r3, #5
 800978a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 800978e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009792:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009796:	2235      	movs	r2, #53	; 0x35
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800979e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097a2:	2201      	movs	r2, #1
 80097a4:	705a      	strb	r2, [r3, #1]
 80097a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097ae:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 80097b2:	709a      	strb	r2, [r3, #2]
 80097b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097bc:	2201      	movs	r2, #1
 80097be:	70da      	strb	r2, [r3, #3]
 80097c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097c8:	2204      	movs	r2, #4
 80097ca:	711a      	strb	r2, [r3, #4]
 80097cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097d4:	2200      	movs	r2, #0
 80097d6:	715a      	strb	r2, [r3, #5]
 80097d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097e0:	2200      	movs	r2, #0
 80097e2:	719a      	strb	r2, [r3, #6]
 80097e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097ec:	2200      	movs	r2, #0
 80097ee:	71da      	strb	r2, [r3, #7]
 80097f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80097f8:	2200      	movs	r2, #0
 80097fa:	721a      	strb	r2, [r3, #8]
 80097fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009800:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009804:	2236      	movs	r2, #54	; 0x36
 8009806:	725a      	strb	r2, [r3, #9]
 8009808:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800980c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009810:	2204      	movs	r2, #4
 8009812:	729a      	strb	r2, [r3, #10]
 8009814:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009818:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800981c:	2200      	movs	r2, #0
 800981e:	72da      	strb	r2, [r3, #11]
 8009820:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009824:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009828:	2200      	movs	r2, #0
 800982a:	731a      	strb	r2, [r3, #12]
 800982c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009830:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009834:	2200      	movs	r2, #0
 8009836:	735a      	strb	r2, [r3, #13]
 8009838:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800983c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009840:	2200      	movs	r2, #0
 8009842:	739a      	strb	r2, [r3, #14]
 8009844:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009848:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800984c:	220c      	movs	r2, #12
 800984e:	73da      	strb	r2, [r3, #15]
 8009850:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009854:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009858:	2203      	movs	r2, #3
 800985a:	741a      	strb	r2, [r3, #16]
 800985c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009860:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009864:	226d      	movs	r2, #109	; 0x6d
 8009866:	745a      	strb	r2, [r3, #17]
 8009868:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800986c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009870:	2269      	movs	r2, #105	; 0x69
 8009872:	749a      	strb	r2, [r3, #18]
 8009874:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009878:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800987c:	2270      	movs	r2, #112	; 0x70
 800987e:	74da      	strb	r2, [r3, #19]
 8009880:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009884:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009888:	2233      	movs	r2, #51	; 0x33
 800988a:	751a      	strb	r2, [r3, #20]
 800988c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009890:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009894:	2204      	movs	r2, #4
 8009896:	755a      	strb	r2, [r3, #21]
 8009898:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800989c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80098a0:	22ff      	movs	r2, #255	; 0xff
 80098a2:	759a      	strb	r2, [r3, #22]
 80098a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80098ac:	22ff      	movs	r2, #255	; 0xff
 80098ae:	75da      	strb	r2, [r3, #23]
 80098b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80098b8:	22ff      	movs	r2, #255	; 0xff
 80098ba:	761a      	strb	r2, [r3, #24]
 80098bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80098c4:	22ff      	movs	r2, #255	; 0xff
 80098c6:	765a      	strb	r2, [r3, #25]
 80098c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80098d0:	22ff      	movs	r2, #255	; 0xff
 80098d2:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80098d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80098d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e0:	f103 011c 	add.w	r1, r3, #28
 80098e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098e8:	331c      	adds	r3, #28
 80098ea:	2206      	movs	r2, #6
 80098ec:	4618      	mov	r0, r3
 80098ee:	f008 ffae 	bl	801284e <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 80098f2:	f107 030c 	add.w	r3, r7, #12
 80098f6:	3305      	adds	r3, #5
 80098f8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80098fc:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8009900:	6812      	ldr	r2, [r2, #0]
 8009902:	320c      	adds	r2, #12
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8009908:	f107 030c 	add.w	r3, r7, #12
 800990c:	330b      	adds	r3, #11
 800990e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009912:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8009916:	6812      	ldr	r2, [r2, #0]
 8009918:	3208      	adds	r2, #8
 800991a:	6812      	ldr	r2, [r2, #0]
 800991c:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800991e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009922:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009926:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800992a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800992e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8009932:	4615      	mov	r5, r2
 8009934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009938:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800993c:	c403      	stmia	r4!, {r0, r1}
 800993e:	8022      	strh	r2, [r4, #0]
 8009940:	3402      	adds	r4, #2
 8009942:	0c13      	lsrs	r3, r2, #16
 8009944:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 8009946:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800994a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009952:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8009956:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800995a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800995e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 8009962:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009966:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009974:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009978:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800997a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800997e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	1d9d      	adds	r5, r3, #6
 8009988:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800998c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689e      	ldr	r6, [r3, #8]
 8009994:	2043      	movs	r0, #67	; 0x43
 8009996:	f7fe fb6a 	bl	800806e <mg_ntohs>
 800999a:	4603      	mov	r3, r0
 800999c:	4698      	mov	r8, r3
 800999e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d005      	beq.n	80099b2 <rx_dhcp_server+0x34e>
 80099a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80099ae:	691c      	ldr	r4, [r3, #16]
 80099b0:	e001      	b.n	80099b6 <rx_dhcp_server+0x352>
 80099b2:	f04f 34ff 	mov.w	r4, #4294967295
 80099b6:	2044      	movs	r0, #68	; 0x44
 80099b8:	f7fe fb59 	bl	800806e <mg_ntohs>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099c4:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 80099c8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80099cc:	9303      	str	r3, [sp, #12]
 80099ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	9201      	str	r2, [sp, #4]
 80099d6:	9400      	str	r4, [sp, #0]
 80099d8:	4643      	mov	r3, r8
 80099da:	4632      	mov	r2, r6
 80099dc:	4629      	mov	r1, r5
 80099de:	6800      	ldr	r0, [r0, #0]
 80099e0:	f7ff f95e 	bl	8008ca0 <tx_udp>
 80099e4:	e000      	b.n	80099e8 <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80099e6:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 80099e8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80099ec:	46bd      	mov	sp, r7
 80099ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f2:	bf00      	nop
 80099f4:	08014aa4 	.word	0x08014aa4

080099f8 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a06:	2201      	movs	r2, #1
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff faf0 	bl	8008ff0 <getpeer>
 8009a10:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d059      	beq.n	8009acc <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	331c      	adds	r3, #28
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	69d2      	ldr	r2, [r2, #28]
 8009a2c:	320c      	adds	r2, #12
 8009a2e:	6812      	ldr	r2, [r2, #0]
 8009a30:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3390      	adds	r3, #144	; 0x90
 8009a36:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f103 0010 	add.w	r0, r3, #16
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	3306      	adds	r3, #6
 8009a44:	2206      	movs	r2, #6
 8009a46:	4619      	mov	r1, r3
 8009a48:	f008 ff01 	bl	801284e <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a54:	d304      	bcc.n	8009a60 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 8009a56:	491f      	ldr	r1, [pc, #124]	; (8009ad4 <rx_udp+0xdc>)
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f7f8 f8a5 	bl	8001ba8 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8009a5e:	e035      	b.n	8009acc <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d212      	bcs.n	8009a98 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	4413      	add	r3, r2
 8009a82:	4619      	mov	r1, r3
 8009a84:	f7fb ff52 	bl	800592c <mg_iobuf_resize>
 8009a88:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <rx_udp+0xa0>
      mg_error(c, "oom");
 8009a8e:	4912      	ldr	r1, [pc, #72]	; (8009ad8 <rx_udp+0xe0>)
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7f8 f889 	bl	8001ba8 <mg_error>
}
 8009a96:	e019      	b.n	8009acc <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	18d0      	adds	r0, r2, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	6899      	ldr	r1, [r3, #8]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f008 fecf 	bl	801284e <memcpy>
      c->recv.len += pkt->pay.len;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	441a      	add	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	2107      	movs	r1, #7
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7f8 f84b 	bl	8001b62 <mg_call>
}
 8009acc:	bf00      	nop
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	08014bb4 	.word	0x08014bb4
 8009ad8:	08014bd0 	.word	0x08014bd0

08009adc <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 8009adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ade:	b091      	sub	sp, #68	; 0x44
 8009ae0:	af06      	add	r7, sp, #24
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	689a      	ldr	r2, [r3, #8]
 8009aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009af0:	3314      	adds	r3, #20
 8009af2:	9301      	str	r3, [sp, #4]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4613      	mov	r3, r2
 8009afa:	2206      	movs	r2, #6
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff f878 	bl	8008bf4 <tx_ip>
 8009b04:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	3314      	adds	r3, #20
 8009b0a:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8009b0c:	2214      	movs	r2, #20
 8009b0e:	2100      	movs	r1, #0
 8009b10:	6a38      	ldr	r0, [r7, #32]
 8009b12:	f008 fdd2 	bl	80126ba <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8009b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d009      	beq.n	8009b30 <tx_tcp+0x54>
 8009b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d006      	beq.n	8009b30 <tx_tcp+0x54>
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	3314      	adds	r3, #20
 8009b26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f008 fdab 	bl	8012686 <memmove>
  tcp->sport = sport;
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009b36:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009b3e:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b44:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b4a:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	78fa      	ldrb	r2, [r7, #3]
 8009b50:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 8009b52:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009b56:	f7fe fa8a 	bl	800806e <mg_ntohs>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	2250      	movs	r2, #80	; 0x50
 8009b66:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8009b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3314      	adds	r3, #20
 8009b72:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8009b74:	2300      	movs	r3, #0
 8009b76:	753b      	strb	r3, [r7, #20]
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	7a5b      	ldrb	r3, [r3, #9]
 8009b7c:	757b      	strb	r3, [r7, #21]
 8009b7e:	8b7b      	ldrh	r3, [r7, #26]
 8009b80:	0a1b      	lsrs	r3, r3, #8
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	75bb      	strb	r3, [r7, #22]
 8009b88:	8b7b      	ldrh	r3, [r7, #26]
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 8009b8e:	8b7b      	ldrh	r3, [r7, #26]
 8009b90:	461a      	mov	r2, r3
 8009b92:	6a39      	ldr	r1, [r7, #32]
 8009b94:	69f8      	ldr	r0, [r7, #28]
 8009b96:	f7fe fed3 	bl	8008940 <csumup>
 8009b9a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	330c      	adds	r3, #12
 8009ba0:	2204      	movs	r2, #4
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	69f8      	ldr	r0, [r7, #28]
 8009ba6:	f7fe fecb 	bl	8008940 <csumup>
 8009baa:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	3310      	adds	r3, #16
 8009bb0:	2204      	movs	r2, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	69f8      	ldr	r0, [r7, #28]
 8009bb6:	f7fe fec3 	bl	8008940 <csumup>
 8009bba:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8009bbc:	f107 0314 	add.w	r3, r7, #20
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	69f8      	ldr	r0, [r7, #28]
 8009bc6:	f7fe febb 	bl	8008940 <csumup>
 8009bca:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 8009bcc:	69f8      	ldr	r0, [r7, #28]
 8009bce:	f7fe fee4 	bl	800899a <csumfin>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8009bda:	4b21      	ldr	r3, [pc, #132]	; (8009c60 <tx_tcp+0x184>)
 8009bdc:	f242 020c 	movw	r2, #8204	; 0x200c
 8009be0:	4920      	ldr	r1, [pc, #128]	; (8009c64 <tx_tcp+0x188>)
 8009be2:	2003      	movs	r0, #3
 8009be4:	f7fc fd24 	bl	8006630 <mg_log_prefix>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d025      	beq.n	8009c3a <tx_tcp+0x15e>
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	f103 050c 	add.w	r5, r3, #12
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe fa37 	bl	800806e <mg_ntohs>
 8009c00:	4603      	mov	r3, r0
 8009c02:	461e      	mov	r6, r3
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	f103 0410 	add.w	r4, r3, #16
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe fa2c 	bl	800806e <mg_ntohs>
 8009c16:	4603      	mov	r3, r0
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	7b5b      	ldrb	r3, [r3, #13]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	9103      	str	r1, [sp, #12]
 8009c26:	9202      	str	r2, [sp, #8]
 8009c28:	9401      	str	r4, [sp, #4]
 8009c2a:	4b0f      	ldr	r3, [pc, #60]	; (8009c68 <tx_tcp+0x18c>)
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	4633      	mov	r3, r6
 8009c30:	462a      	mov	r2, r5
 8009c32:	490d      	ldr	r1, [pc, #52]	; (8009c68 <tx_tcp+0x18c>)
 8009c34:	480d      	ldr	r0, [pc, #52]	; (8009c6c <tx_tcp+0x190>)
 8009c36:	f7fc fd55 	bl	80066e4 <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f103 0214 	add.w	r2, r3, #20
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	461a      	mov	r2, r3
 8009c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c4a:	4413      	add	r3, r2
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7fe fed1 	bl	80089f6 <ether_output>
 8009c54:	4603      	mov	r3, r0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	372c      	adds	r7, #44	; 0x2c
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	08014fc4 	.word	0x08014fc4
 8009c64:	08013568 	.word	0x08013568
 8009c68:	08006e81 	.word	0x08006e81
 8009c6c:	08014bd4 	.word	0x08014bd4

08009c70 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8009c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c74:	b08c      	sub	sp, #48	; 0x30
 8009c76:	af06      	add	r7, sp, #24
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	603b      	str	r3, [r7, #0]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c86:	7b5b      	ldrb	r3, [r3, #13]
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bf14      	ite	ne
 8009c90:	2301      	movne	r3, #1
 8009c92:	2300      	moveq	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	1d9e      	adds	r6, r3, #6
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009caa:	885b      	ldrh	r3, [r3, #2]
 8009cac:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe f9bd 	bl	800803c <mg_ntohl>
 8009cc2:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe f9b7 	bl	800803c <mg_ntohl>
 8009cce:	4601      	mov	r1, r0
 8009cd0:	79fa      	ldrb	r2, [r7, #7]
 8009cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	9304      	str	r3, [sp, #16]
 8009cda:	9103      	str	r1, [sp, #12]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	9501      	str	r5, [sp, #4]
 8009ce2:	9400      	str	r4, [sp, #0]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	4642      	mov	r2, r8
 8009ce8:	4631      	mov	r1, r6
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7ff fef6 	bl	8009adc <tx_tcp>
 8009cf0:	4603      	mov	r3, r0
                buf, len);
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009cfc <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8009cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d00:	b088      	sub	sp, #32
 8009d02:	af02      	add	r7, sp, #8
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d10:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3390      	adds	r3, #144	; 0x90
 8009d16:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <settmout+0x26>
 8009d1e:	2396      	movs	r3, #150	; 0x96
 8009d20:	e001      	b.n	8009d26 <settmout+0x2a>
 8009d22:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8009d26:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	2000      	movs	r0, #0
 8009d32:	460c      	mov	r4, r1
 8009d34:	4605      	mov	r5, r0
 8009d36:	eb12 0804 	adds.w	r8, r2, r4
 8009d3a:	eb43 0905 	adc.w	r9, r3, r5
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8009d4a:	4b0d      	ldr	r3, [pc, #52]	; (8009d80 <settmout+0x84>)
 8009d4c:	f242 0221 	movw	r2, #8225	; 0x2021
 8009d50:	490c      	ldr	r1, [pc, #48]	; (8009d84 <settmout+0x88>)
 8009d52:	2004      	movs	r0, #4
 8009d54:	f7fc fc6c 	bl	8006630 <mg_log_prefix>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <settmout+0x7a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d62:	78f8      	ldrb	r0, [r7, #3]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8009d6e:	4602      	mov	r2, r0
 8009d70:	4805      	ldr	r0, [pc, #20]	; (8009d88 <settmout+0x8c>)
 8009d72:	f7fc fcb7 	bl	80066e4 <mg_log>
}
 8009d76:	bf00      	nop
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009d80:	08014fcc 	.word	0x08014fcc
 8009d84:	08013568 	.word	0x08013568
 8009d88:	08014bf8 	.word	0x08014bf8

08009d8c <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8009d8c:	b5b0      	push	{r4, r5, r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fc fdc2 	bl	8006924 <mg_alloc_conn>
 8009da0:	6178      	str	r0, [r7, #20]
  if (c == NULL) {
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10e      	bne.n	8009dc6 <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 8009da8:	4b55      	ldr	r3, [pc, #340]	; (8009f00 <accept_conn+0x174>)
 8009daa:	f242 0228 	movw	r2, #8232	; 0x2028
 8009dae:	4955      	ldr	r1, [pc, #340]	; (8009f04 <accept_conn+0x178>)
 8009db0:	2001      	movs	r0, #1
 8009db2:	f7fc fc3d 	bl	8006630 <mg_log_prefix>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <accept_conn+0x36>
 8009dbc:	4852      	ldr	r0, [pc, #328]	; (8009f08 <accept_conn+0x17c>)
 8009dbe:	f7fc fc91 	bl	80066e4 <mg_log>
    return NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e098      	b.n	8009ef8 <accept_conn+0x16c>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	3390      	adds	r3, #144	; 0x90
 8009dca:	613b      	str	r3, [r7, #16]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe f932 	bl	800803c <mg_ntohl>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe f929 	bl	800803c <mg_ntohl>
 8009dea:	4602      	mov	r2, r0
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f103 0010 	add.w	r0, r3, #16
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	3306      	adds	r3, #6
 8009dfc:	2206      	movs	r2, #6
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f008 fd25 	bl	801284e <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8009e04:	2100      	movs	r1, #0
 8009e06:	6978      	ldr	r0, [r7, #20]
 8009e08:	f7ff ff78 	bl	8009cfc <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	331c      	adds	r3, #28
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	69d2      	ldr	r2, [r2, #28]
 8009e14:	320c      	adds	r2, #12
 8009e16:	6812      	ldr	r2, [r2, #0]
 8009e18:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8009e26:	4b36      	ldr	r3, [pc, #216]	; (8009f00 <accept_conn+0x174>)
 8009e28:	f242 0231 	movw	r2, #8241	; 0x2031
 8009e2c:	4935      	ldr	r1, [pc, #212]	; (8009f04 <accept_conn+0x178>)
 8009e2e:	2003      	movs	r0, #3
 8009e30:	f7fc fbfe 	bl	8006630 <mg_log_prefix>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <accept_conn+0xbe>
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	331c      	adds	r3, #28
 8009e42:	4a32      	ldr	r2, [pc, #200]	; (8009f0c <accept_conn+0x180>)
 8009e44:	4832      	ldr	r0, [pc, #200]	; (8009f10 <accept_conn+0x184>)
 8009e46:	f7fc fc4d 	bl	80066e4 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8009e62:	f043 0304 	orr.w	r3, r3, #4
 8009e66:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009e70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009e74:	b2d9      	uxtb	r1, r3
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009e7c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009e80:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f102 0408 	add.w	r4, r2, #8
 8009e94:	f103 0508 	add.w	r5, r3, #8
 8009e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2101      	movs	r1, #1
 8009ebc:	6978      	ldr	r0, [r7, #20]
 8009ebe:	f7f7 fe50 	bl	8001b62 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2105      	movs	r1, #5
 8009ec6:	6978      	ldr	r0, [r7, #20]
 8009ec8:	f7f7 fe4b 	bl	8001b62 <mg_call>
  if (lsn->is_tls) mg_tls_init(c, mg_str(""));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00c      	beq.n	8009ef6 <accept_conn+0x16a>
 8009edc:	f107 0308 	add.w	r3, r7, #8
 8009ee0:	490c      	ldr	r1, [pc, #48]	; (8009f14 <accept_conn+0x188>)
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fd fa6c 	bl	80073c0 <mg_str_s>
 8009ee8:	f107 0308 	add.w	r3, r7, #8
 8009eec:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ef0:	6978      	ldr	r0, [r7, #20]
 8009ef2:	f7fd ff27 	bl	8007d44 <mg_tls_init>
  return c;
 8009ef6:	697b      	ldr	r3, [r7, #20]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bdb0      	pop	{r4, r5, r7, pc}
 8009f00:	08014fd8 	.word	0x08014fd8
 8009f04:	08013568 	.word	0x08013568
 8009f08:	08014288 	.word	0x08014288
 8009f0c:	08006ef9 	.word	0x08006ef9
 8009f10:	08014c08 	.word	0x08014c08
 8009f14:	08013bf8 	.word	0x08013bf8

08009f18 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f1a:	b093      	sub	sp, #76	; 0x4c
 8009f1c:	af06      	add	r7, sp, #24
 8009f1e:	6178      	str	r0, [r7, #20]
 8009f20:	6139      	str	r1, [r7, #16]
 8009f22:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	3390      	adds	r3, #144	; 0x90
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	331c      	adds	r3, #28
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d024      	beq.n	8009f94 <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 8009f4a:	232e      	movs	r3, #46	; 0x2e
 8009f4c:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	441a      	add	r2, r3
 8009f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d904      	bls.n	8009f66 <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	699a      	ldr	r2, [r3, #24]
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	f103 0010 	add.w	r0, r3, #16
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	689c      	ldr	r4, [r3, #8]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	8b1d      	ldrh	r5, [r3, #24]
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	9103      	str	r1, [sp, #12]
 8009f7e:	6939      	ldr	r1, [r7, #16]
 8009f80:	9102      	str	r1, [sp, #8]
 8009f82:	9201      	str	r2, [sp, #4]
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	462b      	mov	r3, r5
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f8e:	f7fe fe87 	bl	8008ca0 <tx_udp>
 8009f92:	e046      	b.n	800a022 <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 8009f94:	2362      	movs	r3, #98	; 0x62
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	441a      	add	r2, r3
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d904      	bls.n	8009fb0 <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 8009fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa8:	699a      	ldr	r2, [r3, #24]
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	f103 0610 	add.w	r6, r3, #16
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	60bb      	str	r3, [r7, #8]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	8b1c      	ldrh	r4, [r3, #24]
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe f838 	bl	800803c <mg_ntohl>
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe f832 	bl	800803c <mg_ntohl>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	9305      	str	r3, [sp, #20]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	9203      	str	r2, [sp, #12]
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	9102      	str	r1, [sp, #8]
 8009fe8:	9501      	str	r5, [sp, #4]
 8009fea:	9400      	str	r4, [sp, #0]
 8009fec:	2318      	movs	r3, #24
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ff4:	f7ff fd72 	bl	8009adc <tx_tcp>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00e      	beq.n	800a01c <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	441a      	add	r2, r3
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	7d9b      	ldrb	r3, [r3, #22]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d107      	bne.n	800a022 <mg_io_send+0x10a>
 800a012:	2100      	movs	r1, #0
 800a014:	6978      	ldr	r0, [r7, #20]
 800a016:	f7ff fe71 	bl	8009cfc <settmout>
 800a01a:	e002      	b.n	800a022 <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 800a01c:	f04f 33ff 	mov.w	r3, #4294967295
 800a020:	e000      	b.n	800a024 <mg_io_send+0x10c>
    }
  }
  return (long) len;
 800a022:	68fb      	ldr	r3, [r7, #12]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3734      	adds	r7, #52	; 0x34
 800a028:	46bd      	mov	sp, r7
 800a02a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a02c <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a030:	b090      	sub	sp, #64	; 0x40
 800a032:	af06      	add	r7, sp, #24
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3390      	adds	r3, #144	; 0x90
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <read_conn+0x28>
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	3318      	adds	r3, #24
 800a052:	e001      	b.n	800a058 <read_conn+0x2c>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3338      	adds	r3, #56	; 0x38
 800a058:	623b      	str	r3, [r7, #32]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4618      	mov	r0, r3
 800a062:	f7fd ffeb 	bl	800803c <mg_ntohl>
 800a066:	61f8      	str	r0, [r7, #28]
  s->raw.align = c->recv.align;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a074:	7b5b      	ldrb	r3, [r3, #13]
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d01a      	beq.n	800a0b4 <read_conn+0x88>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	4618      	mov	r0, r3
 800a086:	f7fd ffd9 	bl	800803c <mg_ntohl>
 800a08a:	4603      	mov	r3, r0
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	605a      	str	r2, [r3, #4]
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fd ffcf 	bl	800803c <mg_ntohl>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800a0aa:	f043 0320 	orr.w	r3, r3, #32
 800a0ae:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800a0b2:	e116      	b.n	800a2e2 <read_conn+0x2b6>
  } else if (pkt->pay.len == 0) {
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 8112 	beq.w	800a2e2 <read_conn+0x2b6>
  } else if (seq != s->ack) {
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d05b      	beq.n	800a180 <read_conn+0x154>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fd ffb4 	bl	800803c <mg_ntohl>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	61bb      	str	r3, [r7, #24]
    if (s->ack == ack) {
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d10e      	bne.n	800a106 <read_conn+0xda>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800a0e8:	4b80      	ldr	r3, [pc, #512]	; (800a2ec <read_conn+0x2c0>)
 800a0ea:	f242 0271 	movw	r2, #8305	; 0x2071
 800a0ee:	4980      	ldr	r1, [pc, #512]	; (800a2f0 <read_conn+0x2c4>)
 800a0f0:	2004      	movs	r0, #4
 800a0f2:	f7fc fa9d 	bl	8006630 <mg_log_prefix>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 80f2 	beq.w	800a2e2 <read_conn+0x2b6>
 800a0fe:	487d      	ldr	r0, [pc, #500]	; (800a2f4 <read_conn+0x2c8>)
 800a100:	f7fc faf0 	bl	80066e4 <mg_log>
}
 800a104:	e0ed      	b.n	800a2e2 <read_conn+0x2b6>
      memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	331c      	adds	r3, #28
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	617b      	str	r3, [r7, #20]
      MG_DEBUG(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800a10e:	4b77      	ldr	r3, [pc, #476]	; (800a2ec <read_conn+0x2c0>)
 800a110:	f242 0275 	movw	r2, #8309	; 0x2075
 800a114:	4976      	ldr	r1, [pc, #472]	; (800a2f0 <read_conn+0x2c4>)
 800a116:	2003      	movs	r0, #3
 800a118:	f7fc fa8a 	bl	8006630 <mg_log_prefix>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <read_conn+0x104>
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	69f9      	ldr	r1, [r7, #28]
 800a12a:	4873      	ldr	r0, [pc, #460]	; (800a2f8 <read_conn+0x2cc>)
 800a12c:	f7fc fada 	bl	80066e4 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	f103 0810 	add.w	r8, r3, #16
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	607b      	str	r3, [r7, #4]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8b1c      	ldrh	r4, [r3, #24]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fd ff75 	bl	800803c <mg_ntohl>
 800a152:	6038      	str	r0, [r7, #0]
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fd ff6f 	bl	800803c <mg_ntohl>
 800a15e:	4603      	mov	r3, r0
 800a160:	2200      	movs	r2, #0
 800a162:	9205      	str	r2, [sp, #20]
 800a164:	4a65      	ldr	r2, [pc, #404]	; (800a2fc <read_conn+0x2d0>)
 800a166:	9204      	str	r2, [sp, #16]
 800a168:	9303      	str	r3, [sp, #12]
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	9102      	str	r1, [sp, #8]
 800a16e:	9501      	str	r5, [sp, #4]
 800a170:	9400      	str	r4, [sp, #0]
 800a172:	2310      	movs	r3, #16
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	4641      	mov	r1, r8
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff fcaf 	bl	8009adc <tx_tcp>
}
 800a17e:	e0b0      	b.n	800a2e2 <read_conn+0x2b6>
  } else if (io->size - io->len < pkt->pay.len &&
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d210      	bcs.n	800a1b4 <read_conn+0x188>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	689a      	ldr	r2, [r3, #8]
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	4619      	mov	r1, r3
 800a19e:	6a38      	ldr	r0, [r7, #32]
 800a1a0:	f7fb fbc4 	bl	800592c <mg_iobuf_resize>
 800a1a4:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <read_conn+0x188>
    mg_error(c, "oom");
 800a1aa:	4955      	ldr	r1, [pc, #340]	; (800a300 <read_conn+0x2d4>)
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7f7 fcfb 	bl	8001ba8 <mg_error>
 800a1b2:	e096      	b.n	800a2e2 <read_conn+0x2b6>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	18d0      	adds	r0, r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6899      	ldr	r1, [r3, #8]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f008 fb41 	bl	801284e <memcpy>
    io->len += pkt->pay.len;
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	441a      	add	r2, r3
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800a1da:	4b44      	ldr	r3, [pc, #272]	; (800a2ec <read_conn+0x2c0>)
 800a1dc:	f242 0286 	movw	r2, #8326	; 0x2086
 800a1e0:	4943      	ldr	r1, [pc, #268]	; (800a2f0 <read_conn+0x2c4>)
 800a1e2:	2003      	movs	r0, #3
 800a1e4:	f7fc fa24 	bl	8006630 <mg_log_prefix>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00e      	beq.n	800a20c <read_conn+0x1e0>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fd ff1f 	bl	800803c <mg_ntohl>
 800a1fe:	4602      	mov	r2, r0
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	4621      	mov	r1, r4
 800a206:	483f      	ldr	r0, [pc, #252]	; (800a304 <read_conn+0x2d8>)
 800a208:	f7fc fa6c 	bl	80066e4 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4618      	mov	r0, r3
 800a214:	f7fd ff12 	bl	800803c <mg_ntohl>
 800a218:	4602      	mov	r2, r0
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	441a      	add	r2, r3
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	7d9b      	ldrb	r3, [r3, #22]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d003      	beq.n	800a234 <read_conn+0x208>
 800a22c:	2101      	movs	r1, #1
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff fd64 	bl	8009cfc <settmout>
    if (c->is_tls) {
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d046      	beq.n	800a2d2 <read_conn+0x2a6>
      io = &c->recv;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3338      	adds	r3, #56	; 0x38
 800a248:	623b      	str	r3, [r7, #32]
      if (io->size - io->len < pkt->pay.len &&
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	1ad2      	subs	r2, r2, r3
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d210      	bcs.n	800a27e <read_conn+0x252>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	4413      	add	r3, r2
 800a266:	4619      	mov	r1, r3
 800a268:	6a38      	ldr	r0, [r7, #32]
 800a26a:	f7fb fb5f 	bl	800592c <mg_iobuf_resize>
 800a26e:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800a270:	2b00      	cmp	r3, #0
 800a272:	d104      	bne.n	800a27e <read_conn+0x252>
        mg_error(c, "oom");
 800a274:	4922      	ldr	r1, [pc, #136]	; (800a300 <read_conn+0x2d4>)
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f7f7 fc96 	bl	8001ba8 <mg_error>
 800a27c:	e031      	b.n	800a2e2 <read_conn+0x2b6>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	18d1      	adds	r1, r2, r3
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	461a      	mov	r2, r3
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7fd fd7b 	bl	8007d90 <mg_tls_recv>
 800a29a:	4603      	mov	r3, r0
 800a29c:	613b      	str	r3, [r7, #16]
        if (n == MG_IO_ERR) {
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a4:	d104      	bne.n	800a2b0 <read_conn+0x284>
          mg_error(c, "TLS recv error");
 800a2a6:	4918      	ldr	r1, [pc, #96]	; (800a308 <read_conn+0x2dc>)
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7f7 fc7d 	bl	8001ba8 <mg_error>
}
 800a2ae:	e018      	b.n	800a2e2 <read_conn+0x2b6>
        } else if (n > 0) {
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd15      	ble.n	800a2e2 <read_conn+0x2b6>
          io->len += (size_t) n;
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	441a      	add	r2, r3
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 800a2c2:	f107 0310 	add.w	r3, r7, #16
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	2107      	movs	r1, #7
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f7f7 fc49 	bl	8001b62 <mg_call>
}
 800a2d0:	e007      	b.n	800a2e2 <read_conn+0x2b6>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	330c      	adds	r3, #12
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	2107      	movs	r1, #7
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7f7 fc41 	bl	8001b62 <mg_call>
}
 800a2e0:	e7ff      	b.n	800a2e2 <read_conn+0x2b6>
 800a2e2:	bf00      	nop
 800a2e4:	3728      	adds	r7, #40	; 0x28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ec:	08014fe4 	.word	0x08014fe4
 800a2f0:	08013568 	.word	0x08013568
 800a2f4:	08014c1c 	.word	0x08014c1c
 800a2f8:	08014c34 	.word	0x08014c34
 800a2fc:	08013bf8 	.word	0x08013bf8
 800a300:	08014bd0 	.word	0x08014bd0
 800a304:	08014c4c 	.word	0x08014c4c
 800a308:	08014c60 	.word	0x08014c60

0800a30c <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a30c:	b590      	push	{r4, r7, lr}
 800a30e:	b089      	sub	sp, #36	; 0x24
 800a310:	af02      	add	r7, sp, #8
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31a:	2200      	movs	r2, #0
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fe66 	bl	8008ff0 <getpeer>
 800a324:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <rx_tcp+0x26>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	3390      	adds	r3, #144	; 0x90
 800a330:	e000      	b.n	800a334 <rx_tcp+0x28>
 800a332:	2300      	movs	r3, #0
 800a334:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d03e      	beq.n	800a3ba <rx_tcp+0xae>
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d036      	beq.n	800a3ba <rx_tcp+0xae>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a350:	7b5b      	ldrb	r3, [r3, #13]
 800a352:	f003 0312 	and.w	r3, r3, #18
 800a356:	2b00      	cmp	r3, #0
 800a358:	d02f      	beq.n	800a3ba <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	4618      	mov	r0, r3
 800a362:	f7fd fe6b 	bl	800803c <mg_ntohl>
 800a366:	4602      	mov	r2, r0
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	601a      	str	r2, [r3, #0]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	4618      	mov	r0, r3
 800a374:	f7fd fe62 	bl	800803c <mg_ntohl>
 800a378:	4603      	mov	r3, r0
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	2200      	movs	r2, #0
 800a388:	9201      	str	r2, [sp, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	9200      	str	r2, [sp, #0]
 800a38e:	2210      	movs	r2, #16
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff fc6c 	bl	8009c70 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800a39e:	f36f 1345 	bfc	r3, #5, #1
 800a3a2:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	6978      	ldr	r0, [r7, #20]
 800a3aa:	f7ff fca7 	bl	8009cfc <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2104      	movs	r1, #4
 800a3b2:	6978      	ldr	r0, [r7, #20]
 800a3b4:	f7f7 fbd5 	bl	8001b62 <mg_call>
 800a3b8:	e0c3      	b.n	800a542 <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d014      	beq.n	800a3ea <rx_tcp+0xde>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a3c6:	f003 0320 	and.w	r3, r3, #32
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00c      	beq.n	800a3ea <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	9201      	str	r2, [sp, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	9200      	str	r2, [sp, #0]
 800a3de:	2214      	movs	r2, #20
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff fc44 	bl	8009c70 <tx_tcp_pkt>
 800a3e8:	e0ab      	b.n	800a542 <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <rx_tcp+0xfc>
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f4:	7b5b      	ldrb	r3, [r3, #13]
 800a3f6:	f003 0304 	and.w	r3, r3, #4
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d004      	beq.n	800a408 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a3fe:	4953      	ldr	r1, [pc, #332]	; (800a54c <rx_tcp+0x240>)
 800a400:	6978      	ldr	r0, [r7, #20]
 800a402:	f7f7 fbd1 	bl	8001ba8 <mg_error>
 800a406:	e09c      	b.n	800a542 <rx_tcp+0x236>
  } else if (c != NULL) {
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00f      	beq.n	800a42e <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2200      	movs	r2, #0
 800a412:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	7d9b      	ldrb	r3, [r3, #22]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <rx_tcp+0x118>
      settmout(c,
 800a41c:	2100      	movs	r1, #0
 800a41e:	6978      	ldr	r0, [r7, #20]
 800a420:	f7ff fc6c 	bl	8009cfc <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff fe00 	bl	800a02c <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800a42c:	e089      	b.n	800a542 <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a432:	2201      	movs	r2, #1
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fdda 	bl	8008ff0 <getpeer>
 800a43c:	6178      	str	r0, [r7, #20]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10c      	bne.n	800a45e <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2200      	movs	r2, #0
 800a44c:	9201      	str	r2, [sp, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	9200      	str	r2, [sp, #0]
 800a452:	2214      	movs	r2, #20
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fc0a 	bl	8009c70 <tx_tcp_pkt>
}
 800a45c:	e071      	b.n	800a542 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a462:	7b5b      	ldrb	r3, [r3, #13]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00c      	beq.n	800a486 <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a472:	f003 0304 	and.w	r3, r3, #4
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d062      	beq.n	800a542 <rx_tcp+0x236>
 800a47c:	4933      	ldr	r1, [pc, #204]	; (800a54c <rx_tcp+0x240>)
 800a47e:	6978      	ldr	r0, [r7, #20]
 800a480:	f7f7 fb92 	bl	8001ba8 <mg_error>
}
 800a484:	e05d      	b.n	800a542 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	7b5b      	ldrb	r3, [r3, #13]
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d016      	beq.n	800a4c2 <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fd fde6 	bl	800806e <mg_ntohs>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fd fdc9 	bl	800803c <mg_ntohl>
 800a4aa:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2212      	movs	r2, #18
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff fbd8 	bl	8009c70 <tx_tcp_pkt>
}
 800a4c0:	e03f      	b.n	800a542 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	7b5b      	ldrb	r3, [r3, #13]
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00c      	beq.n	800a4ea <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	9201      	str	r2, [sp, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	9200      	str	r2, [sp, #0]
 800a4de:	2211      	movs	r2, #17
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fbc4 	bl	8009c70 <tx_tcp_pkt>
}
 800a4e8:	e02b      	b.n	800a542 <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fd fda3 	bl	800803c <mg_ntohl>
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4618      	mov	r0, r3
 800a502:	f7fd fdb4 	bl	800806e <mg_ntohs>
 800a506:	4603      	mov	r3, r0
 800a508:	3301      	adds	r3, #1
 800a50a:	429c      	cmp	r4, r3
 800a50c:	d104      	bne.n	800a518 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6978      	ldr	r0, [r7, #20]
 800a512:	f7ff fc3b 	bl	8009d8c <accept_conn>
}
 800a516:	e014      	b.n	800a542 <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a51e:	f003 0304 	and.w	r3, r3, #4
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10c      	bne.n	800a542 <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	2200      	movs	r2, #0
 800a530:	9201      	str	r2, [sp, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	9200      	str	r2, [sp, #0]
 800a536:	2214      	movs	r2, #20
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff fb98 	bl	8009c70 <tx_tcp_pkt>
}
 800a540:	e7ff      	b.n	800a542 <rx_tcp+0x236>
 800a542:	bf00      	nop
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd90      	pop	{r4, r7, pc}
 800a54a:	bf00      	nop
 800a54c:	08014c70 	.word	0x08014c70

0800a550 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a552:	b089      	sub	sp, #36	; 0x24
 800a554:	af04      	add	r7, sp, #16
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	7a5b      	ldrb	r3, [r3, #9]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d116      	bne.n	800a592 <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	69db      	ldr	r3, [r3, #28]
 800a568:	f103 0214 	add.w	r2, r3, #20
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	2b03      	cmp	r3, #3
 800a576:	f240 8105 	bls.w	800a784 <rx_ip+0x234>
    mkpay(pkt, pkt->icmp + 1);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	3304      	adds	r3, #4
 800a580:	4619      	mov	r1, r3
 800a582:	6838      	ldr	r0, [r7, #0]
 800a584:	f7fe f9be 	bl	8008904 <mkpay>
    rx_icmp(ifp, pkt);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7fe fe88 	bl	80092a0 <rx_icmp>
 800a590:	e0fd      	b.n	800a78e <rx_ip+0x23e>
  } else if (pkt->ip->proto == 17) {
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	7a5b      	ldrb	r3, [r3, #9]
 800a598:	2b11      	cmp	r3, #17
 800a59a:	f040 808a 	bne.w	800a6b2 <rx_ip+0x162>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	f103 0214 	add.w	r2, r3, #20
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	f240 80ea 	bls.w	800a788 <rx_ip+0x238>
    mkpay(pkt, pkt->udp + 1);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6838      	ldr	r0, [r7, #0]
 800a5be:	f7fe f9a1 	bl	8008904 <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a5c2:	4b74      	ldr	r3, [pc, #464]	; (800a794 <rx_ip+0x244>)
 800a5c4:	f242 02e8 	movw	r2, #8424	; 0x20e8
 800a5c8:	4973      	ldr	r1, [pc, #460]	; (800a798 <rx_ip+0x248>)
 800a5ca:	2003      	movs	r0, #3
 800a5cc:	f7fc f830 	bl	8006630 <mg_log_prefix>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d026      	beq.n	800a624 <rx_ip+0xd4>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f103 050c 	add.w	r5, r3, #12
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e2:	881b      	ldrh	r3, [r3, #0]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fd fd41 	bl	800806e <mg_ntohs>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	461e      	mov	r6, r3
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	f103 0410 	add.w	r4, r3, #16
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	885b      	ldrh	r3, [r3, #2]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	4618      	mov	r0, r3
 800a602:	f7fd fd34 	bl	800806e <mg_ntohs>
 800a606:	4603      	mov	r3, r0
 800a608:	461a      	mov	r2, r3
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	9202      	str	r2, [sp, #8]
 800a612:	9401      	str	r4, [sp, #4]
 800a614:	4b61      	ldr	r3, [pc, #388]	; (800a79c <rx_ip+0x24c>)
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	4633      	mov	r3, r6
 800a61a:	462a      	mov	r2, r5
 800a61c:	495f      	ldr	r1, [pc, #380]	; (800a79c <rx_ip+0x24c>)
 800a61e:	4860      	ldr	r0, [pc, #384]	; (800a7a0 <rx_ip+0x250>)
 800a620:	f7fc f860 	bl	80066e4 <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	7f1b      	ldrb	r3, [r3, #28]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01c      	beq.n	800a666 <rx_ip+0x116>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	885b      	ldrh	r3, [r3, #2]
 800a632:	b29c      	uxth	r4, r3
 800a634:	2044      	movs	r0, #68	; 0x44
 800a636:	f7fd fd1a 	bl	800806e <mg_ntohs>
 800a63a:	4603      	mov	r3, r0
 800a63c:	429c      	cmp	r4, r3
 800a63e:	d112      	bne.n	800a666 <rx_ip+0x116>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	f103 0208 	add.w	r2, r3, #8
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a650:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a654:	4619      	mov	r1, r3
 800a656:	6838      	ldr	r0, [r7, #0]
 800a658:	f7fe f954 	bl	8008904 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7fe fe7a 	bl	8009358 <rx_dhcp_client>
 800a664:	e093      	b.n	800a78e <rx_ip+0x23e>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	7f5b      	ldrb	r3, [r3, #29]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01c      	beq.n	800a6a8 <rx_ip+0x158>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a672:	885b      	ldrh	r3, [r3, #2]
 800a674:	b29c      	uxth	r4, r3
 800a676:	2043      	movs	r0, #67	; 0x43
 800a678:	f7fd fcf9 	bl	800806e <mg_ntohs>
 800a67c:	4603      	mov	r3, r0
 800a67e:	429c      	cmp	r4, r3
 800a680:	d112      	bne.n	800a6a8 <rx_ip+0x158>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	f103 0208 	add.w	r2, r3, #8
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a696:	4619      	mov	r1, r3
 800a698:	6838      	ldr	r0, [r7, #0]
 800a69a:	f7fe f933 	bl	8008904 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7fe ffdf 	bl	8009664 <rx_dhcp_server>
 800a6a6:	e072      	b.n	800a78e <rx_ip+0x23e>
    } else {
      rx_udp(ifp, pkt);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff f9a4 	bl	80099f8 <rx_udp>
 800a6b0:	e06d      	b.n	800a78e <rx_ip+0x23e>
    }
  } else if (pkt->ip->proto == 6) {
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	7a5b      	ldrb	r3, [r3, #9]
 800a6b8:	2b06      	cmp	r3, #6
 800a6ba:	d168      	bne.n	800a78e <rx_ip+0x23e>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f103 0214 	add.w	r2, r3, #20
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	2b13      	cmp	r3, #19
 800a6ce:	d95d      	bls.n	800a78c <rx_ip+0x23c>
    mkpay(pkt, pkt->tcp + 1);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d4:	3314      	adds	r3, #20
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6838      	ldr	r0, [r7, #0]
 800a6da:	f7fe f913 	bl	8008904 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	885b      	ldrh	r3, [r3, #2]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd fcc1 	bl	800806e <mg_ntohs>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	7b1b      	ldrb	r3, [r3, #12]
 800a6f6:	091b      	lsrs	r3, r3, #4
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	3305      	adds	r3, #5
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800a704:	89fa      	ldrh	r2, [r7, #14]
 800a706:	89bb      	ldrh	r3, [r7, #12]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d305      	bcc.n	800a718 <rx_ip+0x1c8>
 800a70c:	89fa      	ldrh	r2, [r7, #14]
 800a70e:	89bb      	ldrh	r3, [r7, #12]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	461a      	mov	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a718:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <rx_ip+0x244>)
 800a71a:	f242 02fd 	movw	r2, #8445	; 0x20fd
 800a71e:	491e      	ldr	r1, [pc, #120]	; (800a798 <rx_ip+0x248>)
 800a720:	2003      	movs	r0, #3
 800a722:	f7fb ff85 	bl	8006630 <mg_log_prefix>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d026      	beq.n	800a77a <rx_ip+0x22a>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	69db      	ldr	r3, [r3, #28]
 800a730:	f103 050c 	add.w	r5, r3, #12
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fd fc96 	bl	800806e <mg_ntohs>
 800a742:	4603      	mov	r3, r0
 800a744:	461e      	mov	r6, r3
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	f103 0410 	add.w	r4, r3, #16
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a752:	885b      	ldrh	r3, [r3, #2]
 800a754:	b29b      	uxth	r3, r3
 800a756:	4618      	mov	r0, r3
 800a758:	f7fd fc89 	bl	800806e <mg_ntohs>
 800a75c:	4603      	mov	r3, r0
 800a75e:	461a      	mov	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	9303      	str	r3, [sp, #12]
 800a766:	9202      	str	r2, [sp, #8]
 800a768:	9401      	str	r4, [sp, #4]
 800a76a:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <rx_ip+0x24c>)
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	4633      	mov	r3, r6
 800a770:	462a      	mov	r2, r5
 800a772:	490a      	ldr	r1, [pc, #40]	; (800a79c <rx_ip+0x24c>)
 800a774:	480b      	ldr	r0, [pc, #44]	; (800a7a4 <rx_ip+0x254>)
 800a776:	f7fb ffb5 	bl	80066e4 <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff fdc5 	bl	800a30c <rx_tcp>
 800a782:	e004      	b.n	800a78e <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a784:	bf00      	nop
 800a786:	e002      	b.n	800a78e <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a788:	bf00      	nop
 800a78a:	e000      	b.n	800a78e <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a78c:	bf00      	nop
  }
}
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a794:	08014ff0 	.word	0x08014ff0
 800a798:	08013568 	.word	0x08013568
 800a79c:	08006e81 	.word	0x08006e81
 800a7a0:	08014c7c 	.word	0x08014c7c
 800a7a4:	08014c98 	.word	0x08014c98

0800a7a8 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	799b      	ldrb	r3, [r3, #6]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d004      	beq.n	800a7c6 <rx_ip6+0x1e>
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	799b      	ldrb	r3, [r3, #6]
 800a7c2:	2b3a      	cmp	r3, #58	; 0x3a
 800a7c4:	d115      	bne.n	800a7f2 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d922      	bls.n	800a820 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6838      	ldr	r0, [r7, #0]
 800a7e4:	f7fe f88e 	bl	8008904 <mkpay>
    rx_icmp(ifp, pkt);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7fe fd58 	bl	80092a0 <rx_icmp>
 800a7f0:	e019      	b.n	800a826 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	799b      	ldrb	r3, [r3, #6]
 800a7f8:	2b11      	cmp	r3, #17
 800a7fa:	d114      	bne.n	800a826 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	2b07      	cmp	r3, #7
 800a80e:	d909      	bls.n	800a824 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	3308      	adds	r3, #8
 800a816:	4619      	mov	r1, r3
 800a818:	6838      	ldr	r0, [r7, #0]
 800a81a:	f7fe f873 	bl	8008904 <mkpay>
 800a81e:	e002      	b.n	800a826 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a820:	bf00      	nop
 800a822:	e000      	b.n	800a826 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a824:	bf00      	nop
  }
}
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800a82c:	b590      	push	{r4, r7, lr}
 800a82e:	b093      	sub	sp, #76	; 0x4c
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800a838:	f107 0314 	add.w	r3, r7, #20
 800a83c:	2234      	movs	r2, #52	; 0x34
 800a83e:	2100      	movs	r1, #0
 800a840:	4618      	mov	r0, r3
 800a842:	f007 ff3a 	bl	80126ba <memset>
  pkt.raw.ptr = (char *) buf;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	2b0d      	cmp	r3, #13
 800a856:	f240 80d1 	bls.w	800a9fc <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	7fdb      	ldrb	r3, [r3, #31]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d013      	beq.n	800a88a <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	4618      	mov	r0, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2206      	movs	r2, #6
 800a86a:	4619      	mov	r1, r3
 800a86c:	f007 fefb 	bl	8012666 <memcmp>
 800a870:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	2206      	movs	r2, #6
 800a87a:	496a      	ldr	r1, [pc, #424]	; (800aa24 <mg_tcpip_rx+0x1f8>)
 800a87c:	4618      	mov	r0, r3
 800a87e:	f007 fef2 	bl	8012666 <memcmp>
 800a882:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a884:	2b00      	cmp	r3, #0
 800a886:	f040 80bb 	bne.w	800aa00 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	7f9b      	ldrb	r3, [r3, #30]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d01a      	beq.n	800a8c8 <mg_tcpip_rx+0x9c>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b04      	cmp	r3, #4
 800a896:	d917      	bls.n	800a8c8 <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3b04      	subs	r3, #4
 800a89c:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	f7fd fbfa 	bl	800809c <mg_crc32>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f107 0310 	add.w	r3, r7, #16
 800a8b8:	2204      	movs	r2, #4
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	f007 fed3 	bl	8012666 <memcmp>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f040 809e 	bne.w	800aa04 <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	899b      	ldrh	r3, [r3, #12]
 800a8cc:	b29c      	uxth	r4, r3
 800a8ce:	f640 0006 	movw	r0, #2054	; 0x806
 800a8d2:	f7fd fbcc 	bl	800806e <mg_ntohs>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	d10d      	bne.n	800a8f8 <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	330e      	adds	r3, #14
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	2b29      	cmp	r3, #41	; 0x29
 800a8e6:	f240 808f 	bls.w	800aa08 <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800a8ea:	f107 0314 	add.w	r3, r7, #20
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7fe fbd5 	bl	80090a0 <rx_arp>
 800a8f6:	e092      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	899b      	ldrh	r3, [r3, #12]
 800a8fc:	b29c      	uxth	r4, r3
 800a8fe:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800a902:	f7fd fbb4 	bl	800806e <mg_ntohs>
 800a906:	4603      	mov	r3, r0
 800a908:	429c      	cmp	r4, r3
 800a90a:	d11b      	bne.n	800a944 <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	330e      	adds	r3, #14
 800a910:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	2b35      	cmp	r3, #53	; 0x35
 800a916:	d979      	bls.n	800aa0c <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	091b      	lsrs	r3, r3, #4
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b06      	cmp	r3, #6
 800a922:	d175      	bne.n	800aa10 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800a924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a926:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a92a:	f107 0314 	add.w	r3, r7, #20
 800a92e:	4611      	mov	r1, r2
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd ffe7 	bl	8008904 <mkpay>
    rx_ip6(ifp, &pkt);
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	4619      	mov	r1, r3
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff ff33 	bl	800a7a8 <rx_ip6>
 800a942:	e06c      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	899b      	ldrh	r3, [r3, #12]
 800a948:	b29c      	uxth	r4, r3
 800a94a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a94e:	f7fd fb8e 	bl	800806e <mg_ntohs>
 800a952:	4603      	mov	r3, r0
 800a954:	429c      	cmp	r4, r3
 800a956:	d133      	bne.n	800a9c0 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	330e      	adds	r3, #14
 800a95c:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b21      	cmp	r3, #33	; 0x21
 800a962:	d957      	bls.n	800aa14 <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	885b      	ldrh	r3, [r3, #2]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fd fb7f 	bl	800806e <mg_ntohs>
 800a970:	4603      	mov	r3, r0
 800a972:	f103 020e 	add.w	r2, r3, #14
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d208      	bcs.n	800a98e <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	885b      	ldrh	r3, [r3, #2]
 800a980:	b29b      	uxth	r3, r3
 800a982:	4618      	mov	r0, r3
 800a984:	f7fd fb73 	bl	800806e <mg_ntohs>
 800a988:	4603      	mov	r3, r0
 800a98a:	330e      	adds	r3, #14
 800a98c:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b21      	cmp	r3, #33	; 0x21
 800a992:	d941      	bls.n	800aa18 <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	091b      	lsrs	r3, r3, #4
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d13d      	bne.n	800aa1c <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	f103 0214 	add.w	r2, r3, #20
 800a9a6:	f107 0314 	add.w	r3, r7, #20
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fd ffa9 	bl	8008904 <mkpay>
    rx_ip(ifp, &pkt);
 800a9b2:	f107 0314 	add.w	r3, r7, #20
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fdc9 	bl	800a550 <rx_ip>
 800a9be:	e02e      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800a9c0:	4b19      	ldr	r3, [pc, #100]	; (800aa28 <mg_tcpip_rx+0x1fc>)
 800a9c2:	f242 123a 	movw	r2, #8506	; 0x213a
 800a9c6:	4919      	ldr	r1, [pc, #100]	; (800aa2c <mg_tcpip_rx+0x200>)
 800a9c8:	2003      	movs	r0, #3
 800a9ca:	f7fb fe31 	bl	8006630 <mg_log_prefix>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00a      	beq.n	800a9ea <mg_tcpip_rx+0x1be>
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	899b      	ldrh	r3, [r3, #12]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fd fb47 	bl	800806e <mg_ntohs>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4812      	ldr	r0, [pc, #72]	; (800aa30 <mg_tcpip_rx+0x204>)
 800a9e6:	f7fb fe7d 	bl	80066e4 <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b10      	cmp	r3, #16
 800a9ee:	bf28      	it	cs
 800a9f0:	2310      	movcs	r3, #16
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	68b8      	ldr	r0, [r7, #8]
 800a9f6:	f7fb feab 	bl	8006750 <mg_hexdump>
 800a9fa:	e010      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a9fc:	bf00      	nop
 800a9fe:	e00e      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    return;
 800aa00:	bf00      	nop
 800aa02:	e00c      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800aa04:	bf00      	nop
 800aa06:	e00a      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800aa08:	bf00      	nop
 800aa0a:	e008      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800aa0c:	bf00      	nop
 800aa0e:	e006      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800aa10:	bf00      	nop
 800aa12:	e004      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800aa14:	bf00      	nop
 800aa16:	e002      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800aa18:	bf00      	nop
 800aa1a:	e000      	b.n	800aa1e <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800aa1c:	bf00      	nop
  }
}
 800aa1e:	374c      	adds	r7, #76	; 0x4c
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd90      	pop	{r4, r7, pc}
 800aa24:	08014e38 	.word	0x08014e38
 800aa28:	08014ff8 	.word	0x08014ff8
 800aa2c:	08013568 	.word	0x08013568
 800aa30:	08014cb4 	.word	0x08014cb4

0800aa34 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa36:	b095      	sub	sp, #84	; 0x54
 800aa38:	af06      	add	r7, sp, #24
 800aa3a:	6178      	str	r0, [r7, #20]
 800aa3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 81b9 	beq.w	800adba <mg_tcpip_poll+0x386>
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 81b4 	beq.w	800adba <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800aa58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa5c:	e9cd 2300 	strd	r2, r3, [sp]
 800aa60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	f7fd f8a0 	bl	8007bae <mg_timer_expired>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800aa74:	6979      	ldr	r1, [r7, #20]
 800aa76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa7a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800aa7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d03f      	beq.n	800ab06 <mg_tcpip_poll+0xd2>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d03a      	beq.n	800ab06 <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	6978      	ldr	r0, [r7, #20]
 800aa98:	4798      	blx	r3
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bf14      	ite	ne
 800aaaa:	2301      	movne	r3, #1
 800aaac:	2300      	moveq	r3, #0
 800aaae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800aab2:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800aab6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d023      	beq.n	800ab06 <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800aabe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aac2:	f083 0301 	eor.w	r3, r3, #1
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <mg_tcpip_poll+0x9c>
 800aacc:	2300      	movs	r3, #0
 800aace:	e006      	b.n	800aade <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <mg_tcpip_poll+0xa8>
 800aad8:	2301      	movs	r3, #1
 800aada:	e000      	b.n	800aade <mg_tcpip_poll+0xaa>
 800aadc:	2303      	movs	r3, #3
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800aae4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aae8:	f083 0301 	eor.w	r3, r3, #1
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d006      	beq.n	800ab00 <mg_tcpip_poll+0xcc>
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	7f1b      	ldrb	r3, [r3, #28]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <mg_tcpip_poll+0xcc>
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2200      	movs	r2, #0
 800aafe:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800ab00:	6978      	ldr	r0, [r7, #20]
 800ab02:	f7fd fff1 	bl	8008ae8 <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8156 	beq.w	800adbe <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d107      	bne.n	800ab2c <mg_tcpip_poll+0xf8>
 800ab1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800ab24:	6978      	ldr	r0, [r7, #20]
 800ab26:	f7fe fa29 	bl	8008f7c <tx_dhcp_discover>
 800ab2a:	e04c      	b.n	800abc6 <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800ab2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d048      	beq.n	800abc6 <mg_tcpip_poll+0x192>
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d143      	bne.n	800abc6 <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800ab44:	4313      	orrs	r3, r2
 800ab46:	d03e      	beq.n	800abc6 <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800ab54:	4290      	cmp	r0, r2
 800ab56:	eb71 0303 	sbcs.w	r3, r1, r3
 800ab5a:	d30a      	bcc.n	800ab72 <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2200      	movs	r2, #0
 800ab68:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800ab6a:	6978      	ldr	r0, [r7, #20]
 800ab6c:	f7fd ffbc 	bl	8008ae8 <onstatechange>
 800ab70:	e029      	b.n	800abc6 <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ab78:	4993      	ldr	r1, [pc, #588]	; (800adc8 <mg_tcpip_poll+0x394>)
 800ab7a:	1854      	adds	r4, r2, r1
 800ab7c:	f143 0500 	adc.w	r5, r3, #0
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800ab86:	42a2      	cmp	r2, r4
 800ab88:	41ab      	sbcs	r3, r5
 800ab8a:	d21c      	bcs.n	800abc6 <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800ab92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab96:	f04f 0300 	mov.w	r3, #0
 800ab9a:	f7f6 f81f 	bl	8000bdc <__aeabi_uldivmod>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	4610      	mov	r0, r2
 800aba4:	4619      	mov	r1, r3
 800aba6:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800abaa:	f04f 0300 	mov.w	r3, #0
 800abae:	f7f6 f815 	bl	8000bdc <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800abb2:	4313      	orrs	r3, r2
 800abb4:	d107      	bne.n	800abc6 <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	f04f 33ff 	mov.w	r3, #4294967295
 800abbe:	4983      	ldr	r1, [pc, #524]	; (800adcc <mg_tcpip_poll+0x398>)
 800abc0:	6978      	ldr	r0, [r7, #20]
 800abc2:	f7fe f9ab 	bl	8008f1c <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d014      	beq.n	800abfa <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	4798      	blx	r3
 800abe2:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d01f      	beq.n	800ac2a <mg_tcpip_poll+0x1f6>
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf0:	4619      	mov	r1, r3
 800abf2:	6978      	ldr	r0, [r7, #20]
 800abf4:	f7ff fe1a 	bl	800a82c <mg_tcpip_rx>
 800abf8:	e017      	b.n	800ac2a <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	332c      	adds	r3, #44	; 0x2c
 800abfe:	f107 0220 	add.w	r2, r7, #32
 800ac02:	4611      	mov	r1, r2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fc fb25 	bl	8007254 <mg_queue_next>
 800ac0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00b      	beq.n	800ac2a <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac16:	4619      	mov	r1, r3
 800ac18:	6978      	ldr	r0, [r7, #20]
 800ac1a:	f7ff fe07 	bl	800a82c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	332c      	adds	r3, #44	; 0x2c
 800ac22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fc fb93 	bl	8007350 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34
 800ac32:	e0bd      	b.n	800adb0 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f040 80af 	bne.w	800ada4 <mg_tcpip_poll+0x370>
 800ac46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac48:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 80a6 	bne.w	800ada4 <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800ac58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f040 809f 	bne.w	800ada8 <mg_tcpip_poll+0x374>
 800ac6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ac70:	f003 0308 	and.w	r3, r3, #8
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f040 8096 	bne.w	800ada8 <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	3390      	adds	r3, #144	; 0x90
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ac82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac84:	331c      	adds	r3, #28
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ac90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac94:	4290      	cmp	r0, r2
 800ac96:	eb71 0303 	sbcs.w	r3, r1, r3
 800ac9a:	f080 8086 	bcs.w	800adaa <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	7d9b      	ldrb	r3, [r3, #22]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d137      	bne.n	800ad16 <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800aca6:	4b4a      	ldr	r3, [pc, #296]	; (800add0 <mg_tcpip_poll+0x39c>)
 800aca8:	f242 1278 	movw	r2, #8568	; 0x2178
 800acac:	4949      	ldr	r1, [pc, #292]	; (800add4 <mg_tcpip_poll+0x3a0>)
 800acae:	2003      	movs	r0, #3
 800acb0:	f7fb fcbe 	bl	8006630 <mg_log_prefix>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d008      	beq.n	800accc <mg_tcpip_poll+0x298>
 800acba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	4844      	ldr	r0, [pc, #272]	; (800add8 <mg_tcpip_poll+0x3a4>)
 800acc8:	f7fb fd0c 	bl	80066e4 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	f103 0610 	add.w	r6, r3, #16
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd8:	8b1c      	ldrh	r4, [r3, #24]
 800acda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acdc:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fd f9aa 	bl	800803c <mg_ntohl>
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fd f9a4 	bl	800803c <mg_ntohl>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2200      	movs	r2, #0
 800acf8:	9205      	str	r2, [sp, #20]
 800acfa:	4a38      	ldr	r2, [pc, #224]	; (800addc <mg_tcpip_poll+0x3a8>)
 800acfc:	9204      	str	r2, [sp, #16]
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	6879      	ldr	r1, [r7, #4]
 800ad02:	9102      	str	r1, [sp, #8]
 800ad04:	9501      	str	r5, [sp, #4]
 800ad06:	9400      	str	r4, [sp, #0]
 800ad08:	2310      	movs	r3, #16
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	6978      	ldr	r0, [r7, #20]
 800ad10:	f7fe fee4 	bl	8009adc <tx_tcp>
 800ad14:	e041      	b.n	800ad9a <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800ad16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad18:	7ddb      	ldrb	r3, [r3, #23]
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	b2d1      	uxtb	r1, r2
 800ad1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad20:	75d1      	strb	r1, [r2, #23]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d904      	bls.n	800ad30 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800ad26:	492e      	ldr	r1, [pc, #184]	; (800ade0 <mg_tcpip_poll+0x3ac>)
 800ad28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad2a:	f7f6 ff3d 	bl	8001ba8 <mg_error>
 800ad2e:	e034      	b.n	800ad9a <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800ad30:	4b27      	ldr	r3, [pc, #156]	; (800add0 <mg_tcpip_poll+0x39c>)
 800ad32:	f242 127f 	movw	r2, #8575	; 0x217f
 800ad36:	4927      	ldr	r1, [pc, #156]	; (800add4 <mg_tcpip_poll+0x3a0>)
 800ad38:	2003      	movs	r0, #3
 800ad3a:	f7fb fc79 	bl	8006630 <mg_log_prefix>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d005      	beq.n	800ad50 <mg_tcpip_poll+0x31c>
 800ad44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4826      	ldr	r0, [pc, #152]	; (800ade4 <mg_tcpip_poll+0x3b0>)
 800ad4c:	f7fb fcca 	bl	80066e4 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	f103 0610 	add.w	r6, r3, #16
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	613b      	str	r3, [r7, #16]
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	8b1c      	ldrh	r4, [r3, #24]
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad60:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800ad66:	3b01      	subs	r3, #1
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fd f967 	bl	800803c <mg_ntohl>
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fd f961 	bl	800803c <mg_ntohl>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	9205      	str	r2, [sp, #20]
 800ad80:	4a16      	ldr	r2, [pc, #88]	; (800addc <mg_tcpip_poll+0x3a8>)
 800ad82:	9204      	str	r2, [sp, #16]
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	9102      	str	r1, [sp, #8]
 800ad8a:	9501      	str	r5, [sp, #4]
 800ad8c:	9400      	str	r4, [sp, #0]
 800ad8e:	2310      	movs	r3, #16
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4631      	mov	r1, r6
 800ad94:	6978      	ldr	r0, [r7, #20]
 800ad96:	f7fe fea1 	bl	8009adc <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ad9e:	f7fe ffad 	bl	8009cfc <settmout>
 800ada2:	e002      	b.n	800adaa <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800ada4:	bf00      	nop
 800ada6:	e000      	b.n	800adaa <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800ada8:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800adaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	637b      	str	r3, [r7, #52]	; 0x34
 800adb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f47f af3e 	bne.w	800ac34 <mg_tcpip_poll+0x200>
 800adb8:	e002      	b.n	800adc0 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800adba:	bf00      	nop
 800adbc:	e000      	b.n	800adc0 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800adbe:	bf00      	nop
    }
  }
}
 800adc0:	373c      	adds	r7, #60	; 0x3c
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc6:	bf00      	nop
 800adc8:	001b7740 	.word	0x001b7740
 800adcc:	08014e38 	.word	0x08014e38
 800add0:	08015004 	.word	0x08015004
 800add4:	08013568 	.word	0x08013568
 800add8:	08014ccc 	.word	0x08014ccc
 800addc:	08013bf8 	.word	0x08013bf8
 800ade0:	08014cdc 	.word	0x08014cdc
 800ade4:	08014ce8 	.word	0x08014ce8

0800ade8 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	332c      	adds	r3, #44	; 0x2c
 800adf8:	f107 0114 	add.w	r1, r7, #20
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fc f9d0 	bl	80071a4 <mg_queue_book>
 800ae04:	4602      	mov	r2, r0
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d811      	bhi.n	800ae30 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	68f9      	ldr	r1, [r7, #12]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f007 fd1b 	bl	801284e <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	332c      	adds	r3, #44	; 0x2c
 800ae1c:	68b9      	ldr	r1, [r7, #8]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fc fa5e 	bl	80072e0 <mg_queue_add>
    ifp->nrecv++;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800ae2e:	e004      	b.n	800ae3a <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ae3a:	bf00      	nop
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d12c      	bne.n	800aeb0 <mg_tcpip_init+0x6c>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	785b      	ldrb	r3, [r3, #1]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d128      	bne.n	800aeb0 <mg_tcpip_init+0x6c>
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	789b      	ldrb	r3, [r3, #2]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d124      	bne.n	800aeb0 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d120      	bne.n	800aeb0 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	791b      	ldrb	r3, [r3, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d11c      	bne.n	800aeb0 <mg_tcpip_init+0x6c>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	795b      	ldrb	r3, [r3, #5]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d118      	bne.n	800aeb0 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	2202      	movs	r2, #2
 800ae82:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	3301      	adds	r3, #1
 800ae88:	2105      	movs	r1, #5
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7f6 faa8 	bl	80013e0 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800ae90:	4b4d      	ldr	r3, [pc, #308]	; (800afc8 <mg_tcpip_init+0x184>)
 800ae92:	f242 129d 	movw	r2, #8605	; 0x219d
 800ae96:	494d      	ldr	r1, [pc, #308]	; (800afcc <mg_tcpip_init+0x188>)
 800ae98:	2002      	movs	r0, #2
 800ae9a:	f7fb fbc9 	bl	8006630 <mg_log_prefix>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <mg_tcpip_init+0x6c>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	4949      	ldr	r1, [pc, #292]	; (800afd0 <mg_tcpip_init+0x18c>)
 800aeaa:	484a      	ldr	r0, [pc, #296]	; (800afd4 <mg_tcpip_init+0x190>)
 800aeac:	f7fb fc1a 	bl	80066e4 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d018      	beq.n	800aeec <mg_tcpip_init+0xa8>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6838      	ldr	r0, [r7, #0]
 800aec2:	4798      	blx	r3
 800aec4:	4603      	mov	r3, r0
 800aec6:	f083 0301 	eor.w	r3, r3, #1
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00d      	beq.n	800aeec <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800aed0:	4b3d      	ldr	r3, [pc, #244]	; (800afc8 <mg_tcpip_init+0x184>)
 800aed2:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800aed6:	493d      	ldr	r1, [pc, #244]	; (800afcc <mg_tcpip_init+0x188>)
 800aed8:	2001      	movs	r0, #1
 800aeda:	f7fb fba9 	bl	8006630 <mg_log_prefix>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d06d      	beq.n	800afc0 <mg_tcpip_init+0x17c>
 800aee4:	483c      	ldr	r0, [pc, #240]	; (800afd8 <mg_tcpip_init+0x194>)
 800aee6:	f7fb fbfd 	bl	80066e4 <mg_log>
 800aeea:	e069      	b.n	800afc0 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800aeec:	f240 6304 	movw	r3, #1540	; 0x604
 800aef0:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	2001      	movs	r0, #1
 800aef6:	f007 f903 	bl	8012100 <calloc>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461a      	mov	r2, r3
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	615a      	str	r2, [r3, #20]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <mg_tcpip_init+0xda>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	e001      	b.n	800af22 <mg_tcpip_init+0xde>
 800af1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2a:	4619      	mov	r1, r3
 800af2c:	2001      	movs	r0, #1
 800af2e:	f007 f8e7 	bl	8012100 <calloc>
 800af32:	4603      	mov	r3, r0
 800af34:	461a      	mov	r2, r3
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800af3a:	f7fd f8e9 	bl	8008110 <mg_millis>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2228      	movs	r2, #40	; 0x28
 800af58:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d102      	bne.n	800af68 <mg_tcpip_init+0x124>
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2201      	movs	r2, #1
 800af66:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	333c      	adds	r3, #60	; 0x3c
 800af6c:	2206      	movs	r2, #6
 800af6e:	21ff      	movs	r1, #255	; 0xff
 800af70:	4618      	mov	r0, r3
 800af72:	f007 fba2 	bl	80126ba <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	3360      	adds	r3, #96	; 0x60
 800af7a:	2102      	movs	r1, #2
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7f6 fa2f 	bl	80013e0 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af88:	4b14      	ldr	r3, [pc, #80]	; (800afdc <mg_tcpip_init+0x198>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <mg_tcpip_init+0x160>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10d      	bne.n	800afc0 <mg_tcpip_init+0x17c>
 800afa4:	4b08      	ldr	r3, [pc, #32]	; (800afc8 <mg_tcpip_init+0x184>)
 800afa6:	f242 12b1 	movw	r2, #8625	; 0x21b1
 800afaa:	4908      	ldr	r1, [pc, #32]	; (800afcc <mg_tcpip_init+0x188>)
 800afac:	2001      	movs	r0, #1
 800afae:	f7fb fb3f 	bl	8006630 <mg_log_prefix>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <mg_tcpip_init+0x17c>
 800afb8:	4809      	ldr	r0, [pc, #36]	; (800afe0 <mg_tcpip_init+0x19c>)
 800afba:	f7fb fb93 	bl	80066e4 <mg_log>
  }
}
 800afbe:	e7ff      	b.n	800afc0 <mg_tcpip_init+0x17c>
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	08015014 	.word	0x08015014
 800afcc:	08013568 	.word	0x08013568
 800afd0:	08006f45 	.word	0x08006f45
 800afd4:	08014cf8 	.word	0x08014cf8
 800afd8:	08014d1c 	.word	0x08014d1c
 800afdc:	ffff8000 	.word	0xffff8000
 800afe0:	08014288 	.word	0x08014288

0800afe4 <mg_open_listener>:
      c->is_connecting = 1;
    }
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800afee:	6838      	ldr	r0, [r7, #0]
 800aff0:	f7fc ffc0 	bl	8007f74 <mg_url_port>
 800aff4:	4603      	mov	r3, r0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fd f839 	bl	800806e <mg_ntohs>
 800affc:	4603      	mov	r3, r0
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	831a      	strh	r2, [r3, #24]
  return true;
 800b004:	2301      	movs	r3, #1
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <write_conn>:

static void write_conn(struct mg_connection *c) {
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b020:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b02e:	461a      	mov	r2, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7fc fec6 	bl	8007dc2 <mg_tls_send>
 800b036:	4603      	mov	r3, r0
 800b038:	e008      	b.n	800b04c <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b042:	461a      	mov	r2, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7fe ff67 	bl	8009f18 <mg_io_send>
 800b04a:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800b04c:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	dd0d      	ble.n	800b070 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3348      	adds	r3, #72	; 0x48
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	2100      	movs	r1, #0
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fa fcef 	bl	8005a40 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800b062:	f107 030c 	add.w	r3, r7, #12
 800b066:	461a      	mov	r2, r3
 800b068:	2108      	movs	r1, #8
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7f6 fd79 	bl	8001b62 <mg_call>
  }
}
 800b070:	bf00      	nop
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800b078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b07a:	b08f      	sub	sp, #60	; 0x3c
 800b07c:	af06      	add	r7, sp, #24
 800b07e:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3390      	adds	r3, #144	; 0x90
 800b084:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	331c      	adds	r3, #28
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	3318      	adds	r3, #24
 800b092:	4618      	mov	r0, r3
 800b094:	f7fa fd1f 	bl	8005ad6 <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d12f      	bne.n	800b108 <close_conn+0x90>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d127      	bne.n	800b108 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800b0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0be:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	f103 0610 	add.w	r6, r3, #16
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	60bb      	str	r3, [r7, #8]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	8b1c      	ldrh	r4, [r3, #24]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fc ffb0 	bl	800803c <mg_ntohl>
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fc ffaa 	bl	800803c <mg_ntohl>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	9205      	str	r2, [sp, #20]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	9204      	str	r2, [sp, #16]
 800b0f2:	9303      	str	r3, [sp, #12]
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	9102      	str	r1, [sp, #8]
 800b0f8:	9501      	str	r5, [sp, #4]
 800b0fa:	9400      	str	r4, [sp, #0]
 800b0fc:	2311      	movs	r3, #17
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	4631      	mov	r1, r6
 800b102:	69b8      	ldr	r0, [r7, #24]
 800b104:	f7fe fcea 	bl	8009adc <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7fb fc35 	bl	8006978 <mg_close_conn>
}
 800b10e:	bf00      	nop
 800b110:	3724      	adds	r7, #36	; 0x24
 800b112:	46bd      	mov	sp, r7
 800b114:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b116 <can_write>:

static bool can_write(struct mg_connection *c) {
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b124:	f003 0320 	and.w	r3, r3, #32
 800b128:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d11d      	bne.n	800b16a <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d115      	bne.n	800b16a <can_write+0x54>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b142:	2b00      	cmp	r3, #0
 800b144:	d011      	beq.n	800b16a <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b14c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b150:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800b152:	2b00      	cmp	r3, #0
 800b154:	d109      	bne.n	800b16a <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b15c:	f003 0310 	and.w	r3, r3, #16
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <can_write+0x54>
 800b166:	2301      	movs	r3, #1
 800b168:	e000      	b.n	800b16c <can_write+0x56>
 800b16a:	2300      	movs	r3, #0
 800b16c:	f003 0301 	and.w	r3, r3, #1
 800b170:	b2db      	uxtb	r3, r3
}
 800b172:	4618      	mov	r0, r3
 800b174:	370c      	adds	r7, #12
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
	...

0800b180 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800b180:	b5b0      	push	{r4, r5, r7, lr}
 800b182:	b08a      	sub	sp, #40	; 0x28
 800b184:	af04      	add	r7, sp, #16
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800b18a:	f7fc ffc1 	bl	8008110 <mg_millis>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b19a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b19e:	4608      	mov	r0, r1
 800b1a0:	f7ff fc48 	bl	800aa34 <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b1aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1ae:	4608      	mov	r0, r1
 800b1b0:	f7fc fd61 	bl	8007c76 <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	e089      	b.n	800b2d0 <mg_mgr_poll+0x150>
    tmp = c->next;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800b1c2:	f107 0308 	add.w	r3, r7, #8
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2102      	movs	r1, #2
 800b1ca:	6978      	ldr	r0, [r7, #20]
 800b1cc:	f7f6 fcc9 	bl	8001b62 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800b1d0:	4b44      	ldr	r3, [pc, #272]	; (800b2e4 <mg_mgr_poll+0x164>)
 800b1d2:	f242 2218 	movw	r2, #8728	; 0x2218
 800b1d6:	4944      	ldr	r1, [pc, #272]	; (800b2e8 <mg_mgr_poll+0x168>)
 800b1d8:	2004      	movs	r0, #4
 800b1da:	f7fb fa29 	bl	8006630 <mg_log_prefix>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d041      	beq.n	800b268 <mg_mgr_poll+0xe8>
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <mg_mgr_poll+0x7c>
 800b1f8:	2454      	movs	r4, #84	; 0x54
 800b1fa:	e000      	b.n	800b1fe <mg_mgr_poll+0x7e>
 800b1fc:	2474      	movs	r4, #116	; 0x74
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <mg_mgr_poll+0x92>
 800b20e:	2543      	movs	r5, #67	; 0x43
 800b210:	e000      	b.n	800b214 <mg_mgr_poll+0x94>
 800b212:	2563      	movs	r5, #99	; 0x63
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b21a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <mg_mgr_poll+0xa8>
 800b224:	2348      	movs	r3, #72	; 0x48
 800b226:	e000      	b.n	800b22a <mg_mgr_poll+0xaa>
 800b228:	2368      	movs	r3, #104	; 0x68
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800b230:	f002 0208 	and.w	r2, r2, #8
 800b234:	b2d2      	uxtb	r2, r2
 800b236:	2a00      	cmp	r2, #0
 800b238:	d001      	beq.n	800b23e <mg_mgr_poll+0xbe>
 800b23a:	2252      	movs	r2, #82	; 0x52
 800b23c:	e000      	b.n	800b240 <mg_mgr_poll+0xc0>
 800b23e:	2272      	movs	r2, #114	; 0x72
 800b240:	6979      	ldr	r1, [r7, #20]
 800b242:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800b246:	f001 0120 	and.w	r1, r1, #32
 800b24a:	b2c9      	uxtb	r1, r1
 800b24c:	2900      	cmp	r1, #0
 800b24e:	d001      	beq.n	800b254 <mg_mgr_poll+0xd4>
 800b250:	2143      	movs	r1, #67	; 0x43
 800b252:	e000      	b.n	800b256 <mg_mgr_poll+0xd6>
 800b254:	2163      	movs	r1, #99	; 0x63
 800b256:	9102      	str	r1, [sp, #8]
 800b258:	9201      	str	r2, [sp, #4]
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	462b      	mov	r3, r5
 800b25e:	4622      	mov	r2, r4
 800b260:	4601      	mov	r1, r0
 800b262:	4822      	ldr	r0, [pc, #136]	; (800b2ec <mg_mgr_poll+0x16c>)
 800b264:	f7fb fa3e 	bl	80066e4 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b26e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <mg_mgr_poll+0xfe>
 800b278:	6978      	ldr	r0, [r7, #20]
 800b27a:	f7fc fd75 	bl	8007d68 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800b27e:	6978      	ldr	r0, [r7, #20]
 800b280:	f7ff ff49 	bl	800b116 <can_write>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <mg_mgr_poll+0x110>
 800b28a:	6978      	ldr	r0, [r7, #20]
 800b28c:	f7ff febf 	bl	800b00e <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b296:	f003 0310 	and.w	r3, r3, #16
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00a      	beq.n	800b2b6 <mg_mgr_poll+0x136>
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d106      	bne.n	800b2b6 <mg_mgr_poll+0x136>
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b2ae:	f043 0320 	orr.w	r3, r3, #32
 800b2b2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b2bc:	f003 0320 	and.w	r3, r3, #32
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <mg_mgr_poll+0x14c>
 800b2c6:	6978      	ldr	r0, [r7, #20]
 800b2c8:	f7ff fed6 	bl	800b078 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f47f af72 	bne.w	800b1bc <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	08015024 	.word	0x08015024
 800b2e8:	08013568 	.word	0x08013568
 800b2ec:	08014d68 	.word	0x08014d68

0800b2f0 <scmp>:
  {"/web_root/index.html.gz", v1, sizeof(v1), 1717207326},
  {"/web_root/styles.css.gz", v2, sizeof(v2), 1717207333},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800b2fa:	e005      	b.n	800b308 <scmp+0x18>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3301      	adds	r3, #1
 800b300:	607b      	str	r3, [r7, #4]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	3301      	adds	r3, #1
 800b306:	603b      	str	r3, [r7, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <scmp+0x2c>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d0ef      	beq.n	800b2fc <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	461a      	mov	r2, r3
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	1ad3      	subs	r3, r2, r3
}
 800b328:	4618      	mov	r0, r3
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <mg_unlist>:
const char *mg_unlist(size_t no) {
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800b33c:	4906      	ldr	r1, [pc, #24]	; (800b358 <mg_unlist+0x24>)
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	4613      	mov	r3, r2
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	4413      	add	r3, r2
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	440b      	add	r3, r1
 800b34a:	681b      	ldr	r3, [r3, #0]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	080153d8 	.word	0x080153d8

0800b35c <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800b368:	4b16      	ldr	r3, [pc, #88]	; (800b3c4 <mg_unpack+0x68>)
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e020      	b.n	800b3b0 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68f9      	ldr	r1, [r7, #12]
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff ffbb 	bl	800b2f0 <scmp>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d113      	bne.n	800b3a8 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d004      	beq.n	800b390 <mg_unpack+0x34>
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	1e5a      	subs	r2, r3, #1
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <mg_unpack+0x46>
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b39c:	6879      	ldr	r1, [r7, #4]
 800b39e:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	e008      	b.n	800b3ba <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800b3a8:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	3318      	adds	r3, #24
 800b3ae:	617b      	str	r3, [r7, #20]
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1da      	bne.n	800b36e <mg_unpack+0x12>
  }
  return NULL;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	080153d8 	.word	0x080153d8

0800b3c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b3ce:	4b11      	ldr	r3, [pc, #68]	; (800b414 <HAL_MspInit+0x4c>)
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	4a10      	ldr	r2, [pc, #64]	; (800b414 <HAL_MspInit+0x4c>)
 800b3d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b3da:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <HAL_MspInit+0x4c>)
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3e2:	607b      	str	r3, [r7, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	; (800b414 <HAL_MspInit+0x4c>)
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	4a0a      	ldr	r2, [pc, #40]	; (800b414 <HAL_MspInit+0x4c>)
 800b3ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3f0:	6453      	str	r3, [r2, #68]	; 0x44
 800b3f2:	4b08      	ldr	r3, [pc, #32]	; (800b414 <HAL_MspInit+0x4c>)
 800b3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3fa:	603b      	str	r3, [r7, #0]
 800b3fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b3fe:	2200      	movs	r2, #0
 800b400:	210f      	movs	r1, #15
 800b402:	f06f 0001 	mvn.w	r0, #1
 800b406:	f000 fca1 	bl	800bd4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b40a:	bf00      	nop
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	40023800 	.word	0x40023800

0800b418 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b08e      	sub	sp, #56	; 0x38
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	605a      	str	r2, [r3, #4]
 800b42a:	609a      	str	r2, [r3, #8]
 800b42c:	60da      	str	r2, [r3, #12]
 800b42e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a52      	ldr	r2, [pc, #328]	; (800b580 <HAL_ETH_MspInit+0x168>)
 800b436:	4293      	cmp	r3, r2
 800b438:	f040 809e 	bne.w	800b578 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b43c:	4b51      	ldr	r3, [pc, #324]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b440:	4a50      	ldr	r2, [pc, #320]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b446:	6313      	str	r3, [r2, #48]	; 0x30
 800b448:	4b4e      	ldr	r3, [pc, #312]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	4b4b      	ldr	r3, [pc, #300]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b458:	4a4a      	ldr	r2, [pc, #296]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b45a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b45e:	6313      	str	r3, [r2, #48]	; 0x30
 800b460:	4b48      	ldr	r3, [pc, #288]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b468:	61fb      	str	r3, [r7, #28]
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	4b45      	ldr	r3, [pc, #276]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b470:	4a44      	ldr	r2, [pc, #272]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b472:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b476:	6313      	str	r3, [r2, #48]	; 0x30
 800b478:	4b42      	ldr	r3, [pc, #264]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b484:	4b3f      	ldr	r3, [pc, #252]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	4a3e      	ldr	r2, [pc, #248]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b48a:	f043 0304 	orr.w	r3, r3, #4
 800b48e:	6313      	str	r3, [r2, #48]	; 0x30
 800b490:	4b3c      	ldr	r3, [pc, #240]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b49c:	4b39      	ldr	r3, [pc, #228]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a0:	4a38      	ldr	r2, [pc, #224]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4a2:	f043 0301 	orr.w	r3, r3, #1
 800b4a6:	6313      	str	r3, [r2, #48]	; 0x30
 800b4a8:	4b36      	ldr	r3, [pc, #216]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ac:	f003 0301 	and.w	r3, r3, #1
 800b4b0:	613b      	str	r3, [r7, #16]
 800b4b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4b4:	4b33      	ldr	r3, [pc, #204]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b8:	4a32      	ldr	r2, [pc, #200]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4ba:	f043 0302 	orr.w	r3, r3, #2
 800b4be:	6313      	str	r3, [r2, #48]	; 0x30
 800b4c0:	4b30      	ldr	r3, [pc, #192]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b4cc:	4b2d      	ldr	r3, [pc, #180]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d0:	4a2c      	ldr	r2, [pc, #176]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d6:	6313      	str	r3, [r2, #48]	; 0x30
 800b4d8:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <HAL_ETH_MspInit+0x16c>)
 800b4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e0:	60bb      	str	r3, [r7, #8]
 800b4e2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b4e4:	2332      	movs	r3, #50	; 0x32
 800b4e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b4f4:	230b      	movs	r3, #11
 800b4f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4822      	ldr	r0, [pc, #136]	; (800b588 <HAL_ETH_MspInit+0x170>)
 800b500:	f000 ff74 	bl	800c3ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b504:	2386      	movs	r3, #134	; 0x86
 800b506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b508:	2302      	movs	r3, #2
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b50c:	2300      	movs	r3, #0
 800b50e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b510:	2303      	movs	r3, #3
 800b512:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b514:	230b      	movs	r3, #11
 800b516:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b51c:	4619      	mov	r1, r3
 800b51e:	481b      	ldr	r0, [pc, #108]	; (800b58c <HAL_ETH_MspInit+0x174>)
 800b520:	f000 ff64 	bl	800c3ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b52a:	2302      	movs	r3, #2
 800b52c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b532:	2303      	movs	r3, #3
 800b534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b536:	230b      	movs	r3, #11
 800b538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b53e:	4619      	mov	r1, r3
 800b540:	4813      	ldr	r0, [pc, #76]	; (800b590 <HAL_ETH_MspInit+0x178>)
 800b542:	f000 ff53 	bl	800c3ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b546:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b54a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b54c:	2302      	movs	r3, #2
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b550:	2300      	movs	r3, #0
 800b552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b554:	2303      	movs	r3, #3
 800b556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b558:	230b      	movs	r3, #11
 800b55a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b55c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b560:	4619      	mov	r1, r3
 800b562:	480c      	ldr	r0, [pc, #48]	; (800b594 <HAL_ETH_MspInit+0x17c>)
 800b564:	f000 ff42 	bl	800c3ec <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b568:	2200      	movs	r2, #0
 800b56a:	2105      	movs	r1, #5
 800b56c:	203d      	movs	r0, #61	; 0x3d
 800b56e:	f000 fbed 	bl	800bd4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b572:	203d      	movs	r0, #61	; 0x3d
 800b574:	f000 fc06 	bl	800bd84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800b578:	bf00      	nop
 800b57a:	3738      	adds	r7, #56	; 0x38
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	40028000 	.word	0x40028000
 800b584:	40023800 	.word	0x40023800
 800b588:	40020800 	.word	0x40020800
 800b58c:	40020000 	.word	0x40020000
 800b590:	40020400 	.word	0x40020400
 800b594:	40021800 	.word	0x40021800

0800b598 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b0a4      	sub	sp, #144	; 0x90
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b5a0:	f107 030c 	add.w	r3, r7, #12
 800b5a4:	2284      	movs	r2, #132	; 0x84
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f007 f886 	bl	80126ba <memset>
  if(hrng->Instance==RNG)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a11      	ldr	r2, [pc, #68]	; (800b5f8 <HAL_RNG_MspInit+0x60>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d11b      	bne.n	800b5f0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b5b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f002 fb9d 	bl	800dd08 <HAL_RCCEx_PeriphCLKConfig>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800b5d4:	f7f6 fa84 	bl	8001ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b5d8:	4b08      	ldr	r3, [pc, #32]	; (800b5fc <HAL_RNG_MspInit+0x64>)
 800b5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5dc:	4a07      	ldr	r2, [pc, #28]	; (800b5fc <HAL_RNG_MspInit+0x64>)
 800b5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e2:	6353      	str	r3, [r2, #52]	; 0x34
 800b5e4:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <HAL_RNG_MspInit+0x64>)
 800b5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ec:	60bb      	str	r3, [r7, #8]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b5f0:	bf00      	nop
 800b5f2:	3790      	adds	r7, #144	; 0x90
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	50060800 	.word	0x50060800
 800b5fc:	40023800 	.word	0x40023800

0800b600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b0aa      	sub	sp, #168	; 0xa8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b608:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b60c:	2200      	movs	r2, #0
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	605a      	str	r2, [r3, #4]
 800b612:	609a      	str	r2, [r3, #8]
 800b614:	60da      	str	r2, [r3, #12]
 800b616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b618:	f107 0310 	add.w	r3, r7, #16
 800b61c:	2284      	movs	r2, #132	; 0x84
 800b61e:	2100      	movs	r1, #0
 800b620:	4618      	mov	r0, r3
 800b622:	f007 f84a 	bl	80126ba <memset>
  if(huart->Instance==USART3)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a22      	ldr	r2, [pc, #136]	; (800b6b4 <HAL_UART_MspInit+0xb4>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d13c      	bne.n	800b6aa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b630:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b634:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b636:	2300      	movs	r3, #0
 800b638:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b63a:	f107 0310 	add.w	r3, r7, #16
 800b63e:	4618      	mov	r0, r3
 800b640:	f002 fb62 	bl	800dd08 <HAL_RCCEx_PeriphCLKConfig>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b64a:	f7f6 fa49 	bl	8001ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b64e:	4b1a      	ldr	r3, [pc, #104]	; (800b6b8 <HAL_UART_MspInit+0xb8>)
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	4a19      	ldr	r2, [pc, #100]	; (800b6b8 <HAL_UART_MspInit+0xb8>)
 800b654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b658:	6413      	str	r3, [r2, #64]	; 0x40
 800b65a:	4b17      	ldr	r3, [pc, #92]	; (800b6b8 <HAL_UART_MspInit+0xb8>)
 800b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b666:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <HAL_UART_MspInit+0xb8>)
 800b668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66a:	4a13      	ldr	r2, [pc, #76]	; (800b6b8 <HAL_UART_MspInit+0xb8>)
 800b66c:	f043 0308 	orr.w	r3, r3, #8
 800b670:	6313      	str	r3, [r2, #48]	; 0x30
 800b672:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <HAL_UART_MspInit+0xb8>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	f003 0308 	and.w	r3, r3, #8
 800b67a:	60bb      	str	r3, [r7, #8]
 800b67c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b67e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b686:	2302      	movs	r3, #2
 800b688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b692:	2303      	movs	r3, #3
 800b694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b698:	2307      	movs	r3, #7
 800b69a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b69e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	4805      	ldr	r0, [pc, #20]	; (800b6bc <HAL_UART_MspInit+0xbc>)
 800b6a6:	f000 fea1 	bl	800c3ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b6aa:	bf00      	nop
 800b6ac:	37a8      	adds	r7, #168	; 0xa8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	40004800 	.word	0x40004800
 800b6b8:	40023800 	.word	0x40023800
 800b6bc:	40020c00 	.word	0x40020c00

0800b6c0 <HAL_I2C_MspInit>:

}


void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b0ac      	sub	sp, #176	; 0xb0
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	605a      	str	r2, [r3, #4]
 800b6d2:	609a      	str	r2, [r3, #8]
 800b6d4:	60da      	str	r2, [r3, #12]
 800b6d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b6d8:	f107 0318 	add.w	r3, r7, #24
 800b6dc:	2284      	movs	r2, #132	; 0x84
 800b6de:	2100      	movs	r1, #0
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f006 ffea 	bl	80126ba <memset>
  if(hi2c->Instance==I2C1)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a43      	ldr	r2, [pc, #268]	; (800b7f8 <HAL_I2C_MspInit+0x138>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d13c      	bne.n	800b76a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800b6f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b6fa:	f107 0318 	add.w	r3, r7, #24
 800b6fe:	4618      	mov	r0, r3
 800b700:	f002 fb02 	bl	800dd08 <HAL_RCCEx_PeriphCLKConfig>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800b70a:	f7f6 f9e9 	bl	8001ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b70e:	4b3b      	ldr	r3, [pc, #236]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b712:	4a3a      	ldr	r2, [pc, #232]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b714:	f043 0302 	orr.w	r3, r3, #2
 800b718:	6313      	str	r3, [r2, #48]	; 0x30
 800b71a:	4b38      	ldr	r3, [pc, #224]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71e:	f003 0302 	and.w	r3, r3, #2
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b726:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b72a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b72e:	2312      	movs	r3, #18
 800b730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b734:	2300      	movs	r3, #0
 800b736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b73a:	2303      	movs	r3, #3
 800b73c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b740:	2304      	movs	r3, #4
 800b742:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b746:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b74a:	4619      	mov	r1, r3
 800b74c:	482c      	ldr	r0, [pc, #176]	; (800b800 <HAL_I2C_MspInit+0x140>)
 800b74e:	f000 fe4d 	bl	800c3ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b752:	4b2a      	ldr	r3, [pc, #168]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b756:	4a29      	ldr	r2, [pc, #164]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b75c:	6413      	str	r3, [r2, #64]	; 0x40
 800b75e:	4b27      	ldr	r3, [pc, #156]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b766:	613b      	str	r3, [r7, #16]
 800b768:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  if(hi2c->Instance==I2C2)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a25      	ldr	r2, [pc, #148]	; (800b804 <HAL_I2C_MspInit+0x144>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d13c      	bne.n	800b7ee <HAL_I2C_MspInit+0x12e>

    /* USER CODE END I2C2_MspInit 0 */

    /** Initializes the peripherals clock
    */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800b774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b778:	61bb      	str	r3, [r7, #24]
      PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b77a:	2300      	movs	r3, #0
 800b77c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b780:	f107 0318 	add.w	r3, r7, #24
 800b784:	4618      	mov	r0, r3
 800b786:	f002 fabf 	bl	800dd08 <HAL_RCCEx_PeriphCLKConfig>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d001      	beq.n	800b794 <HAL_I2C_MspInit+0xd4>
      {
        Error_Handler();
 800b790:	f7f6 f9a6 	bl	8001ae0 <Error_Handler>
      }

      __HAL_RCC_GPIOF_CLK_ENABLE();
 800b794:	4b19      	ldr	r3, [pc, #100]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b798:	4a18      	ldr	r2, [pc, #96]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b79a:	f043 0320 	orr.w	r3, r3, #32
 800b79e:	6313      	str	r3, [r2, #48]	; 0x30
 800b7a0:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a4:	f003 0320 	and.w	r3, r3, #32
 800b7a8:	60fb      	str	r3, [r7, #12]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
      /**I2C2 GPIO Configuration
      PF0     ------> I2C2_SDA
      PF1     ------> I2C2_SCL
      */
      GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b7b2:	2312      	movs	r3, #18
 800b7b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b7c4:	2304      	movs	r3, #4
 800b7c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b7ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	480d      	ldr	r0, [pc, #52]	; (800b808 <HAL_I2C_MspInit+0x148>)
 800b7d2:	f000 fe0b 	bl	800c3ec <HAL_GPIO_Init>

      /* Peripheral clock enable */
      __HAL_RCC_I2C2_CLK_ENABLE();
 800b7d6:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	4a08      	ldr	r2, [pc, #32]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b7dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b7e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b7e2:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <HAL_I2C_MspInit+0x13c>)
 800b7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7ea:	60bb      	str	r3, [r7, #8]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
    }

}
 800b7ee:	bf00      	nop
 800b7f0:	37b0      	adds	r7, #176	; 0xb0
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	40005400 	.word	0x40005400
 800b7fc:	40023800 	.word	0x40023800
 800b800:	40020400 	.word	0x40020400
 800b804:	40005800 	.word	0x40005800
 800b808:	40021400 	.word	0x40021400

0800b80c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08e      	sub	sp, #56	; 0x38
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800b818:	2300      	movs	r3, #0
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b81c:	4b33      	ldr	r3, [pc, #204]	; (800b8ec <HAL_InitTick+0xe0>)
 800b81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b820:	4a32      	ldr	r2, [pc, #200]	; (800b8ec <HAL_InitTick+0xe0>)
 800b822:	f043 0310 	orr.w	r3, r3, #16
 800b826:	6413      	str	r3, [r2, #64]	; 0x40
 800b828:	4b30      	ldr	r3, [pc, #192]	; (800b8ec <HAL_InitTick+0xe0>)
 800b82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82c:	f003 0310 	and.w	r3, r3, #16
 800b830:	60fb      	str	r3, [r7, #12]
 800b832:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b834:	f107 0210 	add.w	r2, r7, #16
 800b838:	f107 0314 	add.w	r3, r7, #20
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f002 fa30 	bl	800dca4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b844:	6a3b      	ldr	r3, [r7, #32]
 800b846:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d103      	bne.n	800b856 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b84e:	f002 fa01 	bl	800dc54 <HAL_RCC_GetPCLK1Freq>
 800b852:	6378      	str	r0, [r7, #52]	; 0x34
 800b854:	e004      	b.n	800b860 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b856:	f002 f9fd 	bl	800dc54 <HAL_RCC_GetPCLK1Freq>
 800b85a:	4603      	mov	r3, r0
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b862:	4a23      	ldr	r2, [pc, #140]	; (800b8f0 <HAL_InitTick+0xe4>)
 800b864:	fba2 2303 	umull	r2, r3, r2, r3
 800b868:	0c9b      	lsrs	r3, r3, #18
 800b86a:	3b01      	subs	r3, #1
 800b86c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b86e:	4b21      	ldr	r3, [pc, #132]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b870:	4a21      	ldr	r2, [pc, #132]	; (800b8f8 <HAL_InitTick+0xec>)
 800b872:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b874:	4b1f      	ldr	r3, [pc, #124]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b876:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b87a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b87c:	4a1d      	ldr	r2, [pc, #116]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b882:	4b1c      	ldr	r3, [pc, #112]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b884:	2200      	movs	r2, #0
 800b886:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b888:	4b1a      	ldr	r3, [pc, #104]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b88e:	4b19      	ldr	r3, [pc, #100]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b890:	2200      	movs	r2, #0
 800b892:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b894:	4817      	ldr	r0, [pc, #92]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b896:	f002 fea7 	bl	800e5e8 <HAL_TIM_Base_Init>
 800b89a:	4603      	mov	r3, r0
 800b89c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800b8a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d11b      	bne.n	800b8e0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b8a8:	4812      	ldr	r0, [pc, #72]	; (800b8f4 <HAL_InitTick+0xe8>)
 800b8aa:	f002 feff 	bl	800e6ac <HAL_TIM_Base_Start_IT>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800b8b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d111      	bne.n	800b8e0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b8bc:	2036      	movs	r0, #54	; 0x36
 800b8be:	f000 fa61 	bl	800bd84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b0f      	cmp	r3, #15
 800b8c6:	d808      	bhi.n	800b8da <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	2036      	movs	r0, #54	; 0x36
 800b8ce:	f000 fa3d 	bl	800bd4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b8d2:	4a0a      	ldr	r2, [pc, #40]	; (800b8fc <HAL_InitTick+0xf0>)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	e002      	b.n	800b8e0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b8e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3738      	adds	r7, #56	; 0x38
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	40023800 	.word	0x40023800
 800b8f0:	431bde83 	.word	0x431bde83
 800b8f4:	2000377c 	.word	0x2000377c
 800b8f8:	40001000 	.word	0x40001000
 800b8fc:	20000254 	.word	0x20000254

0800b900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b900:	b480      	push	{r7}
 800b902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b904:	e7fe      	b.n	800b904 <NMI_Handler+0x4>

0800b906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b906:	b480      	push	{r7}
 800b908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b90a:	e7fe      	b.n	800b90a <HardFault_Handler+0x4>

0800b90c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b910:	e7fe      	b.n	800b910 <MemManage_Handler+0x4>

0800b912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b912:	b480      	push	{r7}
 800b914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b916:	e7fe      	b.n	800b916 <BusFault_Handler+0x4>

0800b918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b918:	b480      	push	{r7}
 800b91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b91c:	e7fe      	b.n	800b91c <UsageFault_Handler+0x4>

0800b91e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b91e:	b480      	push	{r7}
 800b920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b922:	bf00      	nop
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b930:	4802      	ldr	r0, [pc, #8]	; (800b93c <TIM6_DAC_IRQHandler+0x10>)
 800b932:	f002 ff33 	bl	800e79c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b936:	bf00      	nop
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000377c 	.word	0x2000377c

0800b940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b940:	b480      	push	{r7}
 800b942:	af00      	add	r7, sp, #0
  return 1;
 800b944:	2301      	movs	r3, #1
}
 800b946:	4618      	mov	r0, r3
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <_kill>:

int _kill(int pid, int sig)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b95a:	f006 ff43 	bl	80127e4 <__errno>
 800b95e:	4603      	mov	r3, r0
 800b960:	2216      	movs	r2, #22
 800b962:	601a      	str	r2, [r3, #0]
  return -1;
 800b964:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <_exit>:

void _exit (int status)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b978:	f04f 31ff 	mov.w	r1, #4294967295
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7ff ffe7 	bl	800b950 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b982:	e7fe      	b.n	800b982 <_exit+0x12>

0800b984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
 800b994:	e00a      	b.n	800b9ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b996:	f3af 8000 	nop.w
 800b99a:	4601      	mov	r1, r0
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	1c5a      	adds	r2, r3, #1
 800b9a0:	60ba      	str	r2, [r7, #8]
 800b9a2:	b2ca      	uxtb	r2, r1
 800b9a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	dbf0      	blt.n	800b996 <_read+0x12>
  }

  return len;
 800b9b4:	687b      	ldr	r3, [r7, #4]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
	...

0800b9c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d107      	bne.n	800b9e2 <_write+0x22>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9da:	68b9      	ldr	r1, [r7, #8]
 800b9dc:	4803      	ldr	r0, [pc, #12]	; (800b9ec <_write+0x2c>)
 800b9de:	f003 f931 	bl	800ec44 <HAL_UART_Transmit>
	 return len;
 800b9e2:	687b      	ldr	r3, [r7, #4]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20000514 	.word	0x20000514

0800b9f0 <_close>:
//#endif

int _close(int file)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b9f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ba18:	605a      	str	r2, [r3, #4]
  return 0;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <_isatty>:

int _isatty(int file)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ba30:	2301      	movs	r3, #1
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	60f8      	str	r0, [r7, #12]
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ba60:	4a14      	ldr	r2, [pc, #80]	; (800bab4 <_sbrk+0x5c>)
 800ba62:	4b15      	ldr	r3, [pc, #84]	; (800bab8 <_sbrk+0x60>)
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ba6c:	4b13      	ldr	r3, [pc, #76]	; (800babc <_sbrk+0x64>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ba74:	4b11      	ldr	r3, [pc, #68]	; (800babc <_sbrk+0x64>)
 800ba76:	4a12      	ldr	r2, [pc, #72]	; (800bac0 <_sbrk+0x68>)
 800ba78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ba7a:	4b10      	ldr	r3, [pc, #64]	; (800babc <_sbrk+0x64>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4413      	add	r3, r2
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d207      	bcs.n	800ba98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ba88:	f006 feac 	bl	80127e4 <__errno>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	220c      	movs	r2, #12
 800ba90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ba92:	f04f 33ff 	mov.w	r3, #4294967295
 800ba96:	e009      	b.n	800baac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ba98:	4b08      	ldr	r3, [pc, #32]	; (800babc <_sbrk+0x64>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ba9e:	4b07      	ldr	r3, [pc, #28]	; (800babc <_sbrk+0x64>)
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4413      	add	r3, r2
 800baa6:	4a05      	ldr	r2, [pc, #20]	; (800babc <_sbrk+0x64>)
 800baa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800baaa:	68fb      	ldr	r3, [r7, #12]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	20050000 	.word	0x20050000
 800bab8:	00000400 	.word	0x00000400
 800babc:	200037c8 	.word	0x200037c8
 800bac0:	20008268 	.word	0x20008268

0800bac4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <SystemInit+0x20>)
 800baca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bace:	4a05      	ldr	r2, [pc, #20]	; (800bae4 <SystemInit+0x20>)
 800bad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800bad8:	bf00      	nop
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	e000ed00 	.word	0xe000ed00

0800bae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800baec:	480d      	ldr	r0, [pc, #52]	; (800bb24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800baee:	490e      	ldr	r1, [pc, #56]	; (800bb28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800baf0:	4a0e      	ldr	r2, [pc, #56]	; (800bb2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800baf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800baf4:	e002      	b.n	800bafc <LoopCopyDataInit>

0800baf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800baf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800baf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bafa:	3304      	adds	r3, #4

0800bafc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bafc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bafe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bb00:	d3f9      	bcc.n	800baf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bb02:	4a0b      	ldr	r2, [pc, #44]	; (800bb30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800bb04:	4c0b      	ldr	r4, [pc, #44]	; (800bb34 <LoopFillZerobss+0x26>)
  movs r3, #0
 800bb06:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bb08:	e001      	b.n	800bb0e <LoopFillZerobss>

0800bb0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bb0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bb0c:	3204      	adds	r2, #4

0800bb0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bb0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bb10:	d3fb      	bcc.n	800bb0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bb12:	f7ff ffd7 	bl	800bac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb16:	f006 fe6b 	bl	80127f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb1a:	f7f5 f9dd 	bl	8000ed8 <main>
  bx  lr    
 800bb1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bb20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800bb24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bb28:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 800bb2c:	08015628 	.word	0x08015628
  ldr r2, =_sbss
 800bb30:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800bb34:	20008264 	.word	0x20008264

0800bb38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb38:	e7fe      	b.n	800bb38 <ADC_IRQHandler>

0800bb3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb3e:	2003      	movs	r0, #3
 800bb40:	f000 f8f9 	bl	800bd36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bb44:	200f      	movs	r0, #15
 800bb46:	f7ff fe61 	bl	800b80c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bb4a:	f7ff fc3d 	bl	800b3c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bb54:	b480      	push	{r7}
 800bb56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <HAL_IncTick+0x20>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <HAL_IncTick+0x24>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4413      	add	r3, r2
 800bb64:	4a04      	ldr	r2, [pc, #16]	; (800bb78 <HAL_IncTick+0x24>)
 800bb66:	6013      	str	r3, [r2, #0]
}
 800bb68:	bf00      	nop
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	20000258 	.word	0x20000258
 800bb78:	200037cc 	.word	0x200037cc

0800bb7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  return uwTick;
 800bb80:	4b03      	ldr	r3, [pc, #12]	; (800bb90 <HAL_GetTick+0x14>)
 800bb82:	681b      	ldr	r3, [r3, #0]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	200037cc 	.word	0x200037cc

0800bb94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bb9c:	f7ff ffee 	bl	800bb7c <HAL_GetTick>
 800bba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbac:	d005      	beq.n	800bbba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bbae:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <HAL_Delay+0x44>)
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bbba:	bf00      	nop
 800bbbc:	f7ff ffde 	bl	800bb7c <HAL_GetTick>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d8f7      	bhi.n	800bbbc <HAL_Delay+0x28>
  {
  }
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20000258 	.word	0x20000258

0800bbdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bbec:	4b0b      	ldr	r3, [pc, #44]	; (800bc1c <__NVIC_SetPriorityGrouping+0x40>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bc04:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <__NVIC_SetPriorityGrouping+0x44>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc0a:	4a04      	ldr	r2, [pc, #16]	; (800bc1c <__NVIC_SetPriorityGrouping+0x40>)
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	60d3      	str	r3, [r2, #12]
}
 800bc10:	bf00      	nop
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	e000ed00 	.word	0xe000ed00
 800bc20:	05fa0000 	.word	0x05fa0000

0800bc24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bc24:	b480      	push	{r7}
 800bc26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc28:	4b04      	ldr	r3, [pc, #16]	; (800bc3c <__NVIC_GetPriorityGrouping+0x18>)
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	0a1b      	lsrs	r3, r3, #8
 800bc2e:	f003 0307 	and.w	r3, r3, #7
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	e000ed00 	.word	0xe000ed00

0800bc40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	4603      	mov	r3, r0
 800bc48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	db0b      	blt.n	800bc6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	f003 021f 	and.w	r2, r3, #31
 800bc58:	4907      	ldr	r1, [pc, #28]	; (800bc78 <__NVIC_EnableIRQ+0x38>)
 800bc5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc5e:	095b      	lsrs	r3, r3, #5
 800bc60:	2001      	movs	r0, #1
 800bc62:	fa00 f202 	lsl.w	r2, r0, r2
 800bc66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	e000e100 	.word	0xe000e100

0800bc7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	6039      	str	r1, [r7, #0]
 800bc86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	db0a      	blt.n	800bca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	490c      	ldr	r1, [pc, #48]	; (800bcc8 <__NVIC_SetPriority+0x4c>)
 800bc96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc9a:	0112      	lsls	r2, r2, #4
 800bc9c:	b2d2      	uxtb	r2, r2
 800bc9e:	440b      	add	r3, r1
 800bca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bca4:	e00a      	b.n	800bcbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4908      	ldr	r1, [pc, #32]	; (800bccc <__NVIC_SetPriority+0x50>)
 800bcac:	79fb      	ldrb	r3, [r7, #7]
 800bcae:	f003 030f 	and.w	r3, r3, #15
 800bcb2:	3b04      	subs	r3, #4
 800bcb4:	0112      	lsls	r2, r2, #4
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	440b      	add	r3, r1
 800bcba:	761a      	strb	r2, [r3, #24]
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	e000e100 	.word	0xe000e100
 800bccc:	e000ed00 	.word	0xe000ed00

0800bcd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b089      	sub	sp, #36	; 0x24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	f1c3 0307 	rsb	r3, r3, #7
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	bf28      	it	cs
 800bcee:	2304      	movcs	r3, #4
 800bcf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	2b06      	cmp	r3, #6
 800bcf8:	d902      	bls.n	800bd00 <NVIC_EncodePriority+0x30>
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	3b03      	subs	r3, #3
 800bcfe:	e000      	b.n	800bd02 <NVIC_EncodePriority+0x32>
 800bd00:	2300      	movs	r3, #0
 800bd02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd04:	f04f 32ff 	mov.w	r2, #4294967295
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd0e:	43da      	mvns	r2, r3
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	401a      	ands	r2, r3
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd18:	f04f 31ff 	mov.w	r1, #4294967295
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd22:	43d9      	mvns	r1, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd28:	4313      	orrs	r3, r2
         );
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3724      	adds	r7, #36	; 0x24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b082      	sub	sp, #8
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff ff4c 	bl	800bbdc <__NVIC_SetPriorityGrouping>
}
 800bd44:	bf00      	nop
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bd5e:	f7ff ff61 	bl	800bc24 <__NVIC_GetPriorityGrouping>
 800bd62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	68b9      	ldr	r1, [r7, #8]
 800bd68:	6978      	ldr	r0, [r7, #20]
 800bd6a:	f7ff ffb1 	bl	800bcd0 <NVIC_EncodePriority>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff ff80 	bl	800bc7c <__NVIC_SetPriority>
}
 800bd7c:	bf00      	nop
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bd8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff ff54 	bl	800bc40 <__NVIC_EnableIRQ>
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e06a      	b.n	800be88 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2223      	movs	r2, #35	; 0x23
 800bdc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fb27 	bl	800b418 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bdca:	4b31      	ldr	r3, [pc, #196]	; (800be90 <HAL_ETH_Init+0xf0>)
 800bdcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdce:	4a30      	ldr	r2, [pc, #192]	; (800be90 <HAL_ETH_Init+0xf0>)
 800bdd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdd4:	6453      	str	r3, [r2, #68]	; 0x44
 800bdd6:	4b2e      	ldr	r3, [pc, #184]	; (800be90 <HAL_ETH_Init+0xf0>)
 800bdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdde:	60bb      	str	r3, [r7, #8]
 800bde0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800bde2:	4b2c      	ldr	r3, [pc, #176]	; (800be94 <HAL_ETH_Init+0xf4>)
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	4a2b      	ldr	r2, [pc, #172]	; (800be94 <HAL_ETH_Init+0xf4>)
 800bde8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bdec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800bdee:	4b29      	ldr	r3, [pc, #164]	; (800be94 <HAL_ETH_Init+0xf4>)
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	4927      	ldr	r1, [pc, #156]	; (800be94 <HAL_ETH_Init+0xf4>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800bdfc:	4b25      	ldr	r3, [pc, #148]	; (800be94 <HAL_ETH_Init+0xf4>)
 800bdfe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6812      	ldr	r2, [r2, #0]
 800be0e:	f043 0301 	orr.w	r3, r3, #1
 800be12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800be16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be18:	f7ff feb0 	bl	800bb7c <HAL_GetTick>
 800be1c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800be1e:	e011      	b.n	800be44 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800be20:	f7ff feac 	bl	800bb7c <HAL_GetTick>
 800be24:	4602      	mov	r2, r0
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800be2e:	d909      	bls.n	800be44 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2204      	movs	r2, #4
 800be34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	22e0      	movs	r2, #224	; 0xe0
 800be3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e021      	b.n	800be88 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1e4      	bne.n	800be20 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f958 	bl	800c10c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f9ff 	bl	800c260 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa55 	bl	800c312 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	461a      	mov	r2, r3
 800be6e:	2100      	movs	r1, #0
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f9bd 	bl	800c1f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2210      	movs	r2, #16
 800be82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	40023800 	.word	0x40023800
 800be94:	40013800 	.word	0x40013800

0800be98 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4b51      	ldr	r3, [pc, #324]	; (800bff4 <ETH_SetMACConfig+0x15c>)
 800beae:	4013      	ands	r3, r2
 800beb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	7c1b      	ldrb	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d102      	bne.n	800bec0 <ETH_SetMACConfig+0x28>
 800beba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bebe:	e000      	b.n	800bec2 <ETH_SetMACConfig+0x2a>
 800bec0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	7c5b      	ldrb	r3, [r3, #17]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <ETH_SetMACConfig+0x38>
 800beca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bece:	e000      	b.n	800bed2 <ETH_SetMACConfig+0x3a>
 800bed0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bed2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800bed8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	7fdb      	ldrb	r3, [r3, #31]
 800bede:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800bee0:	431a      	orrs	r2, r3
                        macconf->Speed |
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800bee6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	7f92      	ldrb	r2, [r2, #30]
 800beec:	2a00      	cmp	r2, #0
 800beee:	d102      	bne.n	800bef6 <ETH_SetMACConfig+0x5e>
 800bef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bef4:	e000      	b.n	800bef8 <ETH_SetMACConfig+0x60>
 800bef6:	2200      	movs	r2, #0
                        macconf->Speed |
 800bef8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	7f1b      	ldrb	r3, [r3, #28]
 800befe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800bf00:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800bf06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	791b      	ldrb	r3, [r3, #4]
 800bf0c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800bf0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800bf10:	683a      	ldr	r2, [r7, #0]
 800bf12:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bf16:	2a00      	cmp	r2, #0
 800bf18:	d102      	bne.n	800bf20 <ETH_SetMACConfig+0x88>
 800bf1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf1e:	e000      	b.n	800bf22 <ETH_SetMACConfig+0x8a>
 800bf20:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800bf22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	7bdb      	ldrb	r3, [r3, #15]
 800bf28:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800bf2a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800bf30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf38:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bf52:	2001      	movs	r0, #1
 800bf54:	f7ff fe1e 	bl	800bb94 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800bf6e:	4013      	ands	r3, r2
 800bf70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf76:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800bf7e:	2a00      	cmp	r2, #0
 800bf80:	d101      	bne.n	800bf86 <ETH_SetMACConfig+0xee>
 800bf82:	2280      	movs	r2, #128	; 0x80
 800bf84:	e000      	b.n	800bf88 <ETH_SetMACConfig+0xf0>
 800bf86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bf88:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800bf8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800bf96:	2a01      	cmp	r2, #1
 800bf98:	d101      	bne.n	800bf9e <ETH_SetMACConfig+0x106>
 800bf9a:	2208      	movs	r2, #8
 800bf9c:	e000      	b.n	800bfa0 <ETH_SetMACConfig+0x108>
 800bf9e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800bfa0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800bfa8:	2a01      	cmp	r2, #1
 800bfaa:	d101      	bne.n	800bfb0 <ETH_SetMACConfig+0x118>
 800bfac:	2204      	movs	r2, #4
 800bfae:	e000      	b.n	800bfb2 <ETH_SetMACConfig+0x11a>
 800bfb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bfb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800bfba:	2a01      	cmp	r2, #1
 800bfbc:	d101      	bne.n	800bfc2 <ETH_SetMACConfig+0x12a>
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	e000      	b.n	800bfc4 <ETH_SetMACConfig+0x12c>
 800bfc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bfdc:	2001      	movs	r0, #1
 800bfde:	f7ff fdd9 	bl	800bb94 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	619a      	str	r2, [r3, #24]
}
 800bfea:	bf00      	nop
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	ff20810f 	.word	0xff20810f

0800bff8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	4b3d      	ldr	r3, [pc, #244]	; (800c108 <ETH_SetDMAConfig+0x110>)
 800c012:	4013      	ands	r3, r2
 800c014:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	7b1b      	ldrb	r3, [r3, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <ETH_SetDMAConfig+0x2c>
 800c01e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c022:	e000      	b.n	800c026 <ETH_SetDMAConfig+0x2e>
 800c024:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	7b5b      	ldrb	r3, [r3, #13]
 800c02a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800c02c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	7f52      	ldrb	r2, [r2, #29]
 800c032:	2a00      	cmp	r2, #0
 800c034:	d102      	bne.n	800c03c <ETH_SetDMAConfig+0x44>
 800c036:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c03a:	e000      	b.n	800c03e <ETH_SetDMAConfig+0x46>
 800c03c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800c03e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	7b9b      	ldrb	r3, [r3, #14]
 800c044:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800c046:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800c04c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	7f1b      	ldrb	r3, [r3, #28]
 800c052:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800c054:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	7f9b      	ldrb	r3, [r3, #30]
 800c05a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800c05c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800c062:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c06a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800c06c:	4313      	orrs	r3, r2
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	4313      	orrs	r3, r2
 800c072:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c07c:	461a      	mov	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800c08e:	2001      	movs	r0, #1
 800c090:	f7ff fd80 	bl	800bb94 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09c:	461a      	mov	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	791b      	ldrb	r3, [r3, #4]
 800c0a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800c0ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800c0b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800c0b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c0c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800c0c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800c0ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800c0d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	6812      	ldr	r2, [r2, #0]
 800c0d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c0de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	f7ff fd51 	bl	800bb94 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6013      	str	r3, [r2, #0]
}
 800c100:	bf00      	nop
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	f8de3f23 	.word	0xf8de3f23

0800c10c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b0a6      	sub	sp, #152	; 0x98
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800c114:	2301      	movs	r3, #1
 800c116:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800c120:	2300      	movs	r3, #0
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800c124:	2300      	movs	r3, #0
 800c126:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800c12a:	2301      	movs	r3, #1
 800c12c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800c130:	2300      	movs	r3, #0
 800c132:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800c136:	2301      	movs	r3, #1
 800c138:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800c13c:	2300      	movs	r3, #0
 800c13e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800c142:	2300      	movs	r3, #0
 800c144:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800c148:	2300      	movs	r3, #0
 800c14a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800c152:	2300      	movs	r3, #0
 800c154:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800c156:	2300      	movs	r3, #0
 800c158:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800c15c:	2300      	movs	r3, #0
 800c15e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800c162:	2300      	movs	r3, #0
 800c164:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800c168:	2300      	movs	r3, #0
 800c16a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800c16e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c172:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c178:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800c17a:	2300      	movs	r3, #0
 800c17c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800c180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff fe86 	bl	800be98 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800c18c:	2301      	movs	r3, #1
 800c18e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800c190:	2301      	movs	r3, #1
 800c192:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800c194:	2301      	movs	r3, #1
 800c196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800c19a:	2301      	movs	r3, #1
 800c19c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800c1bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c1c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800c1c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800c1c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800c1dc:	f107 0308 	add.w	r3, r7, #8
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff ff08 	bl	800bff8 <ETH_SetDMAConfig>
}
 800c1e8:	bf00      	nop
 800c1ea:	3798      	adds	r7, #152	; 0x98
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3305      	adds	r3, #5
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	021b      	lsls	r3, r3, #8
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	3204      	adds	r2, #4
 800c208:	7812      	ldrb	r2, [r2, #0]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	4b11      	ldr	r3, [pc, #68]	; (800c258 <ETH_MACAddressConfig+0x68>)
 800c212:	4413      	add	r3, r2
 800c214:	461a      	mov	r2, r3
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3303      	adds	r3, #3
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	061a      	lsls	r2, r3, #24
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3302      	adds	r3, #2
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	041b      	lsls	r3, r3, #16
 800c22a:	431a      	orrs	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3301      	adds	r3, #1
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	021b      	lsls	r3, r3, #8
 800c234:	4313      	orrs	r3, r2
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	7812      	ldrb	r2, [r2, #0]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	4b06      	ldr	r3, [pc, #24]	; (800c25c <ETH_MACAddressConfig+0x6c>)
 800c242:	4413      	add	r3, r2
 800c244:	461a      	mov	r2, r3
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	6013      	str	r3, [r2, #0]
}
 800c24a:	bf00      	nop
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	40028040 	.word	0x40028040
 800c25c:	40028044 	.word	0x40028044

0800c260 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	e03e      	b.n	800c2ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68d9      	ldr	r1, [r3, #12]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	4613      	mov	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	440b      	add	r3, r1
 800c27e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2200      	movs	r2, #0
 800c28a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2200      	movs	r2, #0
 800c290:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2200      	movs	r2, #0
 800c296:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	3206      	adds	r2, #6
 800c2a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d80c      	bhi.n	800c2d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	68d9      	ldr	r1, [r3, #12]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	4613      	mov	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	00db      	lsls	r3, r3, #3
 800c2c6:	440b      	add	r3, r1
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	60da      	str	r2, [r3, #12]
 800c2ce:	e004      	b.n	800c2da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b03      	cmp	r3, #3
 800c2f0:	d9bd      	bls.n	800c26e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68da      	ldr	r2, [r3, #12]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c304:	611a      	str	r2, [r3, #16]
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800c312:	b480      	push	{r7}
 800c314:	b085      	sub	sp, #20
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	e046      	b.n	800c3ae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6919      	ldr	r1, [r3, #16]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	4613      	mov	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	440b      	add	r3, r1
 800c330:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2200      	movs	r2, #0
 800c33c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2200      	movs	r2, #0
 800c342:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2200      	movs	r2, #0
 800c348:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	2200      	movs	r2, #0
 800c34e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2200      	movs	r2, #0
 800c354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c35c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c364:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	3212      	adds	r2, #18
 800c37a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d80c      	bhi.n	800c39e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6919      	ldr	r1, [r3, #16]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	4613      	mov	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	440b      	add	r3, r1
 800c396:	461a      	mov	r2, r3
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	60da      	str	r2, [r3, #12]
 800c39c:	e004      	b.n	800c3a8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	60fb      	str	r3, [r7, #12]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b03      	cmp	r3, #3
 800c3b2:	d9b5      	bls.n	800c320 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691a      	ldr	r2, [r3, #16]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3de:	60da      	str	r2, [r3, #12]
}
 800c3e0:	bf00      	nop
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b089      	sub	sp, #36	; 0x24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c3fe:	2300      	movs	r3, #0
 800c400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c402:	2300      	movs	r3, #0
 800c404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c406:	2300      	movs	r3, #0
 800c408:	61fb      	str	r3, [r7, #28]
 800c40a:	e175      	b.n	800c6f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c40c:	2201      	movs	r2, #1
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	fa02 f303 	lsl.w	r3, r2, r3
 800c414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	4013      	ands	r3, r2
 800c41e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	429a      	cmp	r2, r3
 800c426:	f040 8164 	bne.w	800c6f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f003 0303 	and.w	r3, r3, #3
 800c432:	2b01      	cmp	r3, #1
 800c434:	d005      	beq.n	800c442 <HAL_GPIO_Init+0x56>
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f003 0303 	and.w	r3, r3, #3
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d130      	bne.n	800c4a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	2203      	movs	r2, #3
 800c44e:	fa02 f303 	lsl.w	r3, r2, r3
 800c452:	43db      	mvns	r3, r3
 800c454:	69ba      	ldr	r2, [r7, #24]
 800c456:	4013      	ands	r3, r2
 800c458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	68da      	ldr	r2, [r3, #12]
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	005b      	lsls	r3, r3, #1
 800c462:	fa02 f303 	lsl.w	r3, r2, r3
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	4313      	orrs	r3, r2
 800c46a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	69ba      	ldr	r2, [r7, #24]
 800c470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c478:	2201      	movs	r2, #1
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	fa02 f303 	lsl.w	r3, r2, r3
 800c480:	43db      	mvns	r3, r3
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	4013      	ands	r3, r2
 800c486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	091b      	lsrs	r3, r3, #4
 800c48e:	f003 0201 	and.w	r2, r3, #1
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	fa02 f303 	lsl.w	r3, r2, r3
 800c498:	69ba      	ldr	r2, [r7, #24]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	f003 0303 	and.w	r3, r3, #3
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d017      	beq.n	800c4e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	2203      	movs	r2, #3
 800c4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c0:	43db      	mvns	r3, r3
 800c4c2:	69ba      	ldr	r2, [r7, #24]
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	689a      	ldr	r2, [r3, #8]
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d4:	69ba      	ldr	r2, [r7, #24]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	69ba      	ldr	r2, [r7, #24]
 800c4de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	f003 0303 	and.w	r3, r3, #3
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d123      	bne.n	800c534 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	08da      	lsrs	r2, r3, #3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3208      	adds	r2, #8
 800c4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	f003 0307 	and.w	r3, r3, #7
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	220f      	movs	r2, #15
 800c504:	fa02 f303 	lsl.w	r3, r2, r3
 800c508:	43db      	mvns	r3, r3
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	4013      	ands	r3, r2
 800c50e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	691a      	ldr	r2, [r3, #16]
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	fa02 f303 	lsl.w	r3, r2, r3
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	4313      	orrs	r3, r2
 800c524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	08da      	lsrs	r2, r3, #3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3208      	adds	r2, #8
 800c52e:	69b9      	ldr	r1, [r7, #24]
 800c530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	005b      	lsls	r3, r3, #1
 800c53e:	2203      	movs	r2, #3
 800c540:	fa02 f303 	lsl.w	r3, r2, r3
 800c544:	43db      	mvns	r3, r3
 800c546:	69ba      	ldr	r2, [r7, #24]
 800c548:	4013      	ands	r3, r2
 800c54a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	f003 0203 	and.w	r2, r3, #3
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	fa02 f303 	lsl.w	r3, r2, r3
 800c55c:	69ba      	ldr	r2, [r7, #24]
 800c55e:	4313      	orrs	r3, r2
 800c560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	69ba      	ldr	r2, [r7, #24]
 800c566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 80be 	beq.w	800c6f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c576:	4b66      	ldr	r3, [pc, #408]	; (800c710 <HAL_GPIO_Init+0x324>)
 800c578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c57a:	4a65      	ldr	r2, [pc, #404]	; (800c710 <HAL_GPIO_Init+0x324>)
 800c57c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c580:	6453      	str	r3, [r2, #68]	; 0x44
 800c582:	4b63      	ldr	r3, [pc, #396]	; (800c710 <HAL_GPIO_Init+0x324>)
 800c584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c58e:	4a61      	ldr	r2, [pc, #388]	; (800c714 <HAL_GPIO_Init+0x328>)
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	089b      	lsrs	r3, r3, #2
 800c594:	3302      	adds	r3, #2
 800c596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c59a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	f003 0303 	and.w	r3, r3, #3
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	220f      	movs	r2, #15
 800c5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5aa:	43db      	mvns	r3, r3
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a58      	ldr	r2, [pc, #352]	; (800c718 <HAL_GPIO_Init+0x32c>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d037      	beq.n	800c62a <HAL_GPIO_Init+0x23e>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a57      	ldr	r2, [pc, #348]	; (800c71c <HAL_GPIO_Init+0x330>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d031      	beq.n	800c626 <HAL_GPIO_Init+0x23a>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a56      	ldr	r2, [pc, #344]	; (800c720 <HAL_GPIO_Init+0x334>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d02b      	beq.n	800c622 <HAL_GPIO_Init+0x236>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a55      	ldr	r2, [pc, #340]	; (800c724 <HAL_GPIO_Init+0x338>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d025      	beq.n	800c61e <HAL_GPIO_Init+0x232>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a54      	ldr	r2, [pc, #336]	; (800c728 <HAL_GPIO_Init+0x33c>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d01f      	beq.n	800c61a <HAL_GPIO_Init+0x22e>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a53      	ldr	r2, [pc, #332]	; (800c72c <HAL_GPIO_Init+0x340>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d019      	beq.n	800c616 <HAL_GPIO_Init+0x22a>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a52      	ldr	r2, [pc, #328]	; (800c730 <HAL_GPIO_Init+0x344>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d013      	beq.n	800c612 <HAL_GPIO_Init+0x226>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a51      	ldr	r2, [pc, #324]	; (800c734 <HAL_GPIO_Init+0x348>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d00d      	beq.n	800c60e <HAL_GPIO_Init+0x222>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a50      	ldr	r2, [pc, #320]	; (800c738 <HAL_GPIO_Init+0x34c>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d007      	beq.n	800c60a <HAL_GPIO_Init+0x21e>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a4f      	ldr	r2, [pc, #316]	; (800c73c <HAL_GPIO_Init+0x350>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d101      	bne.n	800c606 <HAL_GPIO_Init+0x21a>
 800c602:	2309      	movs	r3, #9
 800c604:	e012      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c606:	230a      	movs	r3, #10
 800c608:	e010      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c60a:	2308      	movs	r3, #8
 800c60c:	e00e      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c60e:	2307      	movs	r3, #7
 800c610:	e00c      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c612:	2306      	movs	r3, #6
 800c614:	e00a      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c616:	2305      	movs	r3, #5
 800c618:	e008      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c61a:	2304      	movs	r3, #4
 800c61c:	e006      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c61e:	2303      	movs	r3, #3
 800c620:	e004      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c622:	2302      	movs	r3, #2
 800c624:	e002      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c626:	2301      	movs	r3, #1
 800c628:	e000      	b.n	800c62c <HAL_GPIO_Init+0x240>
 800c62a:	2300      	movs	r3, #0
 800c62c:	69fa      	ldr	r2, [r7, #28]
 800c62e:	f002 0203 	and.w	r2, r2, #3
 800c632:	0092      	lsls	r2, r2, #2
 800c634:	4093      	lsls	r3, r2
 800c636:	69ba      	ldr	r2, [r7, #24]
 800c638:	4313      	orrs	r3, r2
 800c63a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c63c:	4935      	ldr	r1, [pc, #212]	; (800c714 <HAL_GPIO_Init+0x328>)
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	089b      	lsrs	r3, r3, #2
 800c642:	3302      	adds	r3, #2
 800c644:	69ba      	ldr	r2, [r7, #24]
 800c646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c64a:	4b3d      	ldr	r3, [pc, #244]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	43db      	mvns	r3, r3
 800c654:	69ba      	ldr	r2, [r7, #24]
 800c656:	4013      	ands	r3, r2
 800c658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c662:	2b00      	cmp	r3, #0
 800c664:	d003      	beq.n	800c66e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c66e:	4a34      	ldr	r2, [pc, #208]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c670:	69bb      	ldr	r3, [r7, #24]
 800c672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c674:	4b32      	ldr	r3, [pc, #200]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	43db      	mvns	r3, r3
 800c67e:	69ba      	ldr	r2, [r7, #24]
 800c680:	4013      	ands	r3, r2
 800c682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	4313      	orrs	r3, r2
 800c696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c698:	4a29      	ldr	r2, [pc, #164]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c69e:	4b28      	ldr	r3, [pc, #160]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	43db      	mvns	r3, r3
 800c6a8:	69ba      	ldr	r2, [r7, #24]
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c6ba:	69ba      	ldr	r2, [r7, #24]
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c6c2:	4a1f      	ldr	r2, [pc, #124]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c6c8:	4b1d      	ldr	r3, [pc, #116]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	43db      	mvns	r3, r3
 800c6d2:	69ba      	ldr	r2, [r7, #24]
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c6ec:	4a14      	ldr	r2, [pc, #80]	; (800c740 <HAL_GPIO_Init+0x354>)
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	61fb      	str	r3, [r7, #28]
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	2b0f      	cmp	r3, #15
 800c6fc:	f67f ae86 	bls.w	800c40c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c700:	bf00      	nop
 800c702:	bf00      	nop
 800c704:	3724      	adds	r7, #36	; 0x24
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	40023800 	.word	0x40023800
 800c714:	40013800 	.word	0x40013800
 800c718:	40020000 	.word	0x40020000
 800c71c:	40020400 	.word	0x40020400
 800c720:	40020800 	.word	0x40020800
 800c724:	40020c00 	.word	0x40020c00
 800c728:	40021000 	.word	0x40021000
 800c72c:	40021400 	.word	0x40021400
 800c730:	40021800 	.word	0x40021800
 800c734:	40021c00 	.word	0x40021c00
 800c738:	40022000 	.word	0x40022000
 800c73c:	40022400 	.word	0x40022400
 800c740:	40013c00 	.word	0x40013c00

0800c744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	460b      	mov	r3, r1
 800c74e:	807b      	strh	r3, [r7, #2]
 800c750:	4613      	mov	r3, r2
 800c752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c754:	787b      	ldrb	r3, [r7, #1]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c75a:	887a      	ldrh	r2, [r7, #2]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c760:	e003      	b.n	800c76a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c762:	887b      	ldrh	r3, [r7, #2]
 800c764:	041a      	lsls	r2, r3, #16
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	619a      	str	r2, [r3, #24]
}
 800c76a:	bf00      	nop
 800c76c:	370c      	adds	r7, #12
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
	...

0800c778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e07f      	b.n	800c88a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d106      	bne.n	800c7a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7fe ff8e 	bl	800b6c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2224      	movs	r2, #36	; 0x24
 800c7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f022 0201 	bic.w	r2, r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685a      	ldr	r2, [r3, #4]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c7c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c7d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d107      	bne.n	800c7f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	689a      	ldr	r2, [r3, #8]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c7ee:	609a      	str	r2, [r3, #8]
 800c7f0:	e006      	b.n	800c800 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689a      	ldr	r2, [r3, #8]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c7fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d104      	bne.n	800c812 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c810:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	6859      	ldr	r1, [r3, #4]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	4b1d      	ldr	r3, [pc, #116]	; (800c894 <HAL_I2C_Init+0x11c>)
 800c81e:	430b      	orrs	r3, r1
 800c820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68da      	ldr	r2, [r3, #12]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	691a      	ldr	r2, [r3, #16]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	430a      	orrs	r2, r1
 800c84a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	69d9      	ldr	r1, [r3, #28]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a1a      	ldr	r2, [r3, #32]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	430a      	orrs	r2, r1
 800c85a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f042 0201 	orr.w	r2, r2, #1
 800c86a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2220      	movs	r2, #32
 800c876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	02008000 	.word	0x02008000

0800c898 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af02      	add	r7, sp, #8
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	607a      	str	r2, [r7, #4]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	817b      	strh	r3, [r7, #10]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	2b20      	cmp	r3, #32
 800c8b6:	f040 80da 	bne.w	800ca6e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d101      	bne.n	800c8c8 <HAL_I2C_Master_Transmit+0x30>
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	e0d3      	b.n	800ca70 <HAL_I2C_Master_Transmit+0x1d8>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c8d0:	f7ff f954 	bl	800bb7c <HAL_GetTick>
 800c8d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	2319      	movs	r3, #25
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f000 fa5e 	bl	800cda4 <I2C_WaitOnFlagUntilTimeout>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e0be      	b.n	800ca70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2221      	movs	r2, #33	; 0x21
 800c8f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2210      	movs	r2, #16
 800c8fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	893a      	ldrh	r2, [r7, #8]
 800c912:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c91e:	b29b      	uxth	r3, r3
 800c920:	2bff      	cmp	r3, #255	; 0xff
 800c922:	d90e      	bls.n	800c942 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	22ff      	movs	r2, #255	; 0xff
 800c928:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	8979      	ldrh	r1, [r7, #10]
 800c932:	4b51      	ldr	r3, [pc, #324]	; (800ca78 <HAL_I2C_Master_Transmit+0x1e0>)
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f000 fbce 	bl	800d0dc <I2C_TransferConfig>
 800c940:	e06c      	b.n	800ca1c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c946:	b29a      	uxth	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c950:	b2da      	uxtb	r2, r3
 800c952:	8979      	ldrh	r1, [r7, #10]
 800c954:	4b48      	ldr	r3, [pc, #288]	; (800ca78 <HAL_I2C_Master_Transmit+0x1e0>)
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f000 fbbd 	bl	800d0dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c962:	e05b      	b.n	800ca1c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	6a39      	ldr	r1, [r7, #32]
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 fa5b 	bl	800ce24 <I2C_WaitOnTXISFlagUntilTimeout>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e07b      	b.n	800ca70 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	781a      	ldrb	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c992:	b29b      	uxth	r3, r3
 800c994:	3b01      	subs	r3, #1
 800c996:	b29a      	uxth	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d034      	beq.n	800ca1c <HAL_I2C_Master_Transmit+0x184>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d130      	bne.n	800ca1c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	2180      	movs	r1, #128	; 0x80
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f9ed 	bl	800cda4 <I2C_WaitOnFlagUntilTimeout>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e04d      	b.n	800ca70 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	2bff      	cmp	r3, #255	; 0xff
 800c9dc:	d90e      	bls.n	800c9fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	22ff      	movs	r2, #255	; 0xff
 800c9e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	8979      	ldrh	r1, [r7, #10]
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f000 fb71 	bl	800d0dc <I2C_TransferConfig>
 800c9fa:	e00f      	b.n	800ca1c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	8979      	ldrh	r1, [r7, #10]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f000 fb60 	bl	800d0dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d19e      	bne.n	800c964 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca26:	697a      	ldr	r2, [r7, #20]
 800ca28:	6a39      	ldr	r1, [r7, #32]
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f000 fa3a 	bl	800cea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e01a      	b.n	800ca70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2220      	movs	r2, #32
 800ca40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6859      	ldr	r1, [r3, #4]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	4b0b      	ldr	r3, [pc, #44]	; (800ca7c <HAL_I2C_Master_Transmit+0x1e4>)
 800ca4e:	400b      	ands	r3, r1
 800ca50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2220      	movs	r2, #32
 800ca56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e000      	b.n	800ca70 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ca6e:	2302      	movs	r3, #2
  }
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	80002000 	.word	0x80002000
 800ca7c:	fe00e800 	.word	0xfe00e800

0800ca80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	4608      	mov	r0, r1
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	4603      	mov	r3, r0
 800ca90:	817b      	strh	r3, [r7, #10]
 800ca92:	460b      	mov	r3, r1
 800ca94:	813b      	strh	r3, [r7, #8]
 800ca96:	4613      	mov	r3, r2
 800ca98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b20      	cmp	r3, #32
 800caa4:	f040 80fd 	bne.w	800cca2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <HAL_I2C_Mem_Read+0x34>
 800caae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d105      	bne.n	800cac0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
 800cabe:	e0f1      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d101      	bne.n	800cace <HAL_I2C_Mem_Read+0x4e>
 800caca:	2302      	movs	r3, #2
 800cacc:	e0ea      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cad6:	f7ff f851 	bl	800bb7c <HAL_GetTick>
 800cada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	2319      	movs	r3, #25
 800cae2:	2201      	movs	r2, #1
 800cae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f95b 	bl	800cda4 <I2C_WaitOnFlagUntilTimeout>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e0d5      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2222      	movs	r2, #34	; 0x22
 800cafc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2240      	movs	r2, #64	; 0x40
 800cb04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6a3a      	ldr	r2, [r7, #32]
 800cb12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cb20:	88f8      	ldrh	r0, [r7, #6]
 800cb22:	893a      	ldrh	r2, [r7, #8]
 800cb24:	8979      	ldrh	r1, [r7, #10]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	4603      	mov	r3, r0
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f000 f8bf 	bl	800ccb4 <I2C_RequestMemoryRead>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e0ad      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	2bff      	cmp	r3, #255	; 0xff
 800cb50:	d90e      	bls.n	800cb70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	22ff      	movs	r2, #255	; 0xff
 800cb56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	8979      	ldrh	r1, [r7, #10]
 800cb60:	4b52      	ldr	r3, [pc, #328]	; (800ccac <HAL_I2C_Mem_Read+0x22c>)
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f000 fab7 	bl	800d0dc <I2C_TransferConfig>
 800cb6e:	e00f      	b.n	800cb90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	8979      	ldrh	r1, [r7, #10]
 800cb82:	4b4a      	ldr	r3, [pc, #296]	; (800ccac <HAL_I2C_Mem_Read+0x22c>)
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f000 faa6 	bl	800d0dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	2200      	movs	r2, #0
 800cb98:	2104      	movs	r1, #4
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f000 f902 	bl	800cda4 <I2C_WaitOnFlagUntilTimeout>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e07c      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb4:	b2d2      	uxtb	r2, r2
 800cbb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d034      	beq.n	800cc50 <HAL_I2C_Mem_Read+0x1d0>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d130      	bne.n	800cc50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2180      	movs	r1, #128	; 0x80
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f000 f8d3 	bl	800cda4 <I2C_WaitOnFlagUntilTimeout>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e04d      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	2bff      	cmp	r3, #255	; 0xff
 800cc10:	d90e      	bls.n	800cc30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	22ff      	movs	r2, #255	; 0xff
 800cc16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc1c:	b2da      	uxtb	r2, r3
 800cc1e:	8979      	ldrh	r1, [r7, #10]
 800cc20:	2300      	movs	r3, #0
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 fa57 	bl	800d0dc <I2C_TransferConfig>
 800cc2e:	e00f      	b.n	800cc50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	8979      	ldrh	r1, [r7, #10]
 800cc42:	2300      	movs	r3, #0
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f000 fa46 	bl	800d0dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d19a      	bne.n	800cb90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 f920 	bl	800cea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e01a      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2220      	movs	r2, #32
 800cc74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	6859      	ldr	r1, [r3, #4]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <HAL_I2C_Mem_Read+0x230>)
 800cc82:	400b      	ands	r3, r1
 800cc84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2220      	movs	r2, #32
 800cc8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e000      	b.n	800cca4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800cca2:	2302      	movs	r3, #2
  }
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	80002400 	.word	0x80002400
 800ccb0:	fe00e800 	.word	0xfe00e800

0800ccb4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af02      	add	r7, sp, #8
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	4611      	mov	r1, r2
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	817b      	strh	r3, [r7, #10]
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	813b      	strh	r3, [r7, #8]
 800ccca:	4613      	mov	r3, r2
 800cccc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ccce:	88fb      	ldrh	r3, [r7, #6]
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	8979      	ldrh	r1, [r7, #10]
 800ccd4:	4b20      	ldr	r3, [pc, #128]	; (800cd58 <I2C_RequestMemoryRead+0xa4>)
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	2300      	movs	r3, #0
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f000 f9fe 	bl	800d0dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cce0:	69fa      	ldr	r2, [r7, #28]
 800cce2:	69b9      	ldr	r1, [r7, #24]
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 f89d 	bl	800ce24 <I2C_WaitOnTXISFlagUntilTimeout>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e02c      	b.n	800cd4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ccf4:	88fb      	ldrh	r3, [r7, #6]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d105      	bne.n	800cd06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ccfa:	893b      	ldrh	r3, [r7, #8]
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	629a      	str	r2, [r3, #40]	; 0x28
 800cd04:	e015      	b.n	800cd32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cd06:	893b      	ldrh	r3, [r7, #8]
 800cd08:	0a1b      	lsrs	r3, r3, #8
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd14:	69fa      	ldr	r2, [r7, #28]
 800cd16:	69b9      	ldr	r1, [r7, #24]
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f000 f883 	bl	800ce24 <I2C_WaitOnTXISFlagUntilTimeout>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e012      	b.n	800cd4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cd28:	893b      	ldrh	r3, [r7, #8]
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	2140      	movs	r1, #64	; 0x40
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f831 	bl	800cda4 <I2C_WaitOnFlagUntilTimeout>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e000      	b.n	800cd4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	80002000 	.word	0x80002000

0800cd5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	699b      	ldr	r3, [r3, #24]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d103      	bne.n	800cd7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2200      	movs	r2, #0
 800cd78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d007      	beq.n	800cd98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	699a      	ldr	r2, [r3, #24]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f042 0201 	orr.w	r2, r2, #1
 800cd96:	619a      	str	r2, [r3, #24]
  }
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cdb4:	e022      	b.n	800cdfc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdbc:	d01e      	beq.n	800cdfc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdbe:	f7fe fedd 	bl	800bb7c <HAL_GetTick>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	683a      	ldr	r2, [r7, #0]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d302      	bcc.n	800cdd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d113      	bne.n	800cdfc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd8:	f043 0220 	orr.w	r2, r3, #32
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2220      	movs	r2, #32
 800cde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	e00f      	b.n	800ce1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	699a      	ldr	r2, [r3, #24]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	4013      	ands	r3, r2
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	bf0c      	ite	eq
 800ce0c:	2301      	moveq	r3, #1
 800ce0e:	2300      	movne	r3, #0
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	461a      	mov	r2, r3
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d0cd      	beq.n	800cdb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ce30:	e02c      	b.n	800ce8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	68b9      	ldr	r1, [r7, #8]
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f000 f870 	bl	800cf1c <I2C_IsErrorOccurred>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e02a      	b.n	800ce9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4c:	d01e      	beq.n	800ce8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce4e:	f7fe fe95 	bl	800bb7c <HAL_GetTick>
 800ce52:	4602      	mov	r2, r0
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	1ad3      	subs	r3, r2, r3
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d302      	bcc.n	800ce64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d113      	bne.n	800ce8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce68:	f043 0220 	orr.w	r2, r3, #32
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2220      	movs	r2, #32
 800ce74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e007      	b.n	800ce9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	f003 0302 	and.w	r3, r3, #2
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d1cb      	bne.n	800ce32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ceb0:	e028      	b.n	800cf04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	68b9      	ldr	r1, [r7, #8]
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f000 f830 	bl	800cf1c <I2C_IsErrorOccurred>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e026      	b.n	800cf14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cec6:	f7fe fe59 	bl	800bb7c <HAL_GetTick>
 800ceca:	4602      	mov	r2, r0
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d302      	bcc.n	800cedc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d113      	bne.n	800cf04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee0:	f043 0220 	orr.w	r2, r3, #32
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2220      	movs	r2, #32
 800ceec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	e007      	b.n	800cf14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	f003 0320 	and.w	r3, r3, #32
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	d1cf      	bne.n	800ceb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08a      	sub	sp, #40	; 0x28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	f003 0310 	and.w	r3, r3, #16
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d068      	beq.n	800d01a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2210      	movs	r2, #16
 800cf4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cf50:	e049      	b.n	800cfe6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf58:	d045      	beq.n	800cfe6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cf5a:	f7fe fe0f 	bl	800bb7c <HAL_GetTick>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d302      	bcc.n	800cf70 <I2C_IsErrorOccurred+0x54>
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d13a      	bne.n	800cfe6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf92:	d121      	bne.n	800cfd8 <I2C_IsErrorOccurred+0xbc>
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf9a:	d01d      	beq.n	800cfd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800cf9c:	7cfb      	ldrb	r3, [r7, #19]
 800cf9e:	2b20      	cmp	r3, #32
 800cfa0:	d01a      	beq.n	800cfd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cfb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cfb2:	f7fe fde3 	bl	800bb7c <HAL_GetTick>
 800cfb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cfb8:	e00e      	b.n	800cfd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cfba:	f7fe fddf 	bl	800bb7c <HAL_GetTick>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	2b19      	cmp	r3, #25
 800cfc6:	d907      	bls.n	800cfd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800cfc8:	6a3b      	ldr	r3, [r7, #32]
 800cfca:	f043 0320 	orr.w	r3, r3, #32
 800cfce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800cfd6:	e006      	b.n	800cfe6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	f003 0320 	and.w	r3, r3, #32
 800cfe2:	2b20      	cmp	r3, #32
 800cfe4:	d1e9      	bne.n	800cfba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	f003 0320 	and.w	r3, r3, #32
 800cff0:	2b20      	cmp	r3, #32
 800cff2:	d003      	beq.n	800cffc <I2C_IsErrorOccurred+0xe0>
 800cff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d0aa      	beq.n	800cf52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d000:	2b00      	cmp	r3, #0
 800d002:	d103      	bne.n	800d00c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2220      	movs	r2, #32
 800d00a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	f043 0304 	orr.w	r3, r3, #4
 800d012:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d014:	2301      	movs	r3, #1
 800d016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	699b      	ldr	r3, [r3, #24]
 800d020:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00b      	beq.n	800d044 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d02c:	6a3b      	ldr	r3, [r7, #32]
 800d02e:	f043 0301 	orr.w	r3, r3, #1
 800d032:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d03c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d03e:	2301      	movs	r3, #1
 800d040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00b      	beq.n	800d066 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	f043 0308 	orr.w	r3, r3, #8
 800d054:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d05e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d060:	2301      	movs	r3, #1
 800d062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	f043 0302 	orr.w	r3, r3, #2
 800d076:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d080:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01c      	beq.n	800d0ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f7ff fe63 	bl	800cd5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6859      	ldr	r1, [r3, #4]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <I2C_IsErrorOccurred+0x1bc>)
 800d0a2:	400b      	ands	r3, r1
 800d0a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2220      	movs	r2, #32
 800d0b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d0ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3728      	adds	r7, #40	; 0x28
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	fe00e800 	.word	0xfe00e800

0800d0dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b087      	sub	sp, #28
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	607b      	str	r3, [r7, #4]
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	817b      	strh	r3, [r7, #10]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d0ee:	897b      	ldrh	r3, [r7, #10]
 800d0f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d0f4:	7a7b      	ldrb	r3, [r7, #9]
 800d0f6:	041b      	lsls	r3, r3, #16
 800d0f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d0fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	4313      	orrs	r3, r2
 800d106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d10a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	685a      	ldr	r2, [r3, #4]
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	0d5b      	lsrs	r3, r3, #21
 800d116:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d11a:	4b08      	ldr	r3, [pc, #32]	; (800d13c <I2C_TransferConfig+0x60>)
 800d11c:	430b      	orrs	r3, r1
 800d11e:	43db      	mvns	r3, r3
 800d120:	ea02 0103 	and.w	r1, r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	697a      	ldr	r2, [r7, #20]
 800d12a:	430a      	orrs	r2, r1
 800d12c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d12e:	bf00      	nop
 800d130:	371c      	adds	r7, #28
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	03ff63ff 	.word	0x03ff63ff

0800d140 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d150:	b2db      	uxtb	r3, r3
 800d152:	2b20      	cmp	r3, #32
 800d154:	d138      	bne.n	800d1c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d101      	bne.n	800d164 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d160:	2302      	movs	r3, #2
 800d162:	e032      	b.n	800d1ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2224      	movs	r2, #36	; 0x24
 800d170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f022 0201 	bic.w	r2, r2, #1
 800d182:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d192:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6819      	ldr	r1, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	430a      	orrs	r2, r1
 800d1a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f042 0201 	orr.w	r2, r2, #1
 800d1b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e000      	b.n	800d1ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d1c8:	2302      	movs	r3, #2
  }
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b20      	cmp	r3, #32
 800d1ea:	d139      	bne.n	800d260 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d101      	bne.n	800d1fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	e033      	b.n	800d262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2224      	movs	r2, #36	; 0x24
 800d206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f022 0201 	bic.w	r2, r2, #1
 800d218:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d228:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	4313      	orrs	r3, r2
 800d232:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f042 0201 	orr.w	r2, r2, #1
 800d24a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2220      	movs	r2, #32
 800d250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	e000      	b.n	800d262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d260:	2302      	movs	r3, #2
  }
}
 800d262:	4618      	mov	r0, r3
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
	...

0800d270 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d27a:	4b23      	ldr	r3, [pc, #140]	; (800d308 <HAL_PWREx_EnableOverDrive+0x98>)
 800d27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27e:	4a22      	ldr	r2, [pc, #136]	; (800d308 <HAL_PWREx_EnableOverDrive+0x98>)
 800d280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d284:	6413      	str	r3, [r2, #64]	; 0x40
 800d286:	4b20      	ldr	r3, [pc, #128]	; (800d308 <HAL_PWREx_EnableOverDrive+0x98>)
 800d288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d28e:	603b      	str	r3, [r7, #0]
 800d290:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d292:	4b1e      	ldr	r3, [pc, #120]	; (800d30c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a1d      	ldr	r2, [pc, #116]	; (800d30c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d29c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d29e:	f7fe fc6d 	bl	800bb7c <HAL_GetTick>
 800d2a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d2a4:	e009      	b.n	800d2ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d2a6:	f7fe fc69 	bl	800bb7c <HAL_GetTick>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2b4:	d901      	bls.n	800d2ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	e022      	b.n	800d300 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d2ba:	4b14      	ldr	r3, [pc, #80]	; (800d30c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2c6:	d1ee      	bne.n	800d2a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d2c8:	4b10      	ldr	r3, [pc, #64]	; (800d30c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a0f      	ldr	r2, [pc, #60]	; (800d30c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d2ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d2d4:	f7fe fc52 	bl	800bb7c <HAL_GetTick>
 800d2d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d2da:	e009      	b.n	800d2f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d2dc:	f7fe fc4e 	bl	800bb7c <HAL_GetTick>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ea:	d901      	bls.n	800d2f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	e007      	b.n	800d300 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d2f0:	4b06      	ldr	r3, [pc, #24]	; (800d30c <HAL_PWREx_EnableOverDrive+0x9c>)
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2fc:	d1ee      	bne.n	800d2dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	40023800 	.word	0x40023800
 800d30c:	40007000 	.word	0x40007000

0800d310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b086      	sub	sp, #24
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d318:	2300      	movs	r3, #0
 800d31a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e291      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 8087 	beq.w	800d442 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d334:	4b96      	ldr	r3, [pc, #600]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	f003 030c 	and.w	r3, r3, #12
 800d33c:	2b04      	cmp	r3, #4
 800d33e:	d00c      	beq.n	800d35a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d340:	4b93      	ldr	r3, [pc, #588]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	f003 030c 	and.w	r3, r3, #12
 800d348:	2b08      	cmp	r3, #8
 800d34a:	d112      	bne.n	800d372 <HAL_RCC_OscConfig+0x62>
 800d34c:	4b90      	ldr	r3, [pc, #576]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d358:	d10b      	bne.n	800d372 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d35a:	4b8d      	ldr	r3, [pc, #564]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d362:	2b00      	cmp	r3, #0
 800d364:	d06c      	beq.n	800d440 <HAL_RCC_OscConfig+0x130>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d168      	bne.n	800d440 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e26b      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d37a:	d106      	bne.n	800d38a <HAL_RCC_OscConfig+0x7a>
 800d37c:	4b84      	ldr	r3, [pc, #528]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a83      	ldr	r2, [pc, #524]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	e02e      	b.n	800d3e8 <HAL_RCC_OscConfig+0xd8>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10c      	bne.n	800d3ac <HAL_RCC_OscConfig+0x9c>
 800d392:	4b7f      	ldr	r3, [pc, #508]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a7e      	ldr	r2, [pc, #504]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d39c:	6013      	str	r3, [r2, #0]
 800d39e:	4b7c      	ldr	r3, [pc, #496]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a7b      	ldr	r2, [pc, #492]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3a8:	6013      	str	r3, [r2, #0]
 800d3aa:	e01d      	b.n	800d3e8 <HAL_RCC_OscConfig+0xd8>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d3b4:	d10c      	bne.n	800d3d0 <HAL_RCC_OscConfig+0xc0>
 800d3b6:	4b76      	ldr	r3, [pc, #472]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a75      	ldr	r2, [pc, #468]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	4b73      	ldr	r3, [pc, #460]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a72      	ldr	r2, [pc, #456]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	e00b      	b.n	800d3e8 <HAL_RCC_OscConfig+0xd8>
 800d3d0:	4b6f      	ldr	r3, [pc, #444]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a6e      	ldr	r2, [pc, #440]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	4b6c      	ldr	r3, [pc, #432]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a6b      	ldr	r2, [pc, #428]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d3e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d013      	beq.n	800d418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3f0:	f7fe fbc4 	bl	800bb7c <HAL_GetTick>
 800d3f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d3f6:	e008      	b.n	800d40a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d3f8:	f7fe fbc0 	bl	800bb7c <HAL_GetTick>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	2b64      	cmp	r3, #100	; 0x64
 800d404:	d901      	bls.n	800d40a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d406:	2303      	movs	r3, #3
 800d408:	e21f      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d40a:	4b61      	ldr	r3, [pc, #388]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d412:	2b00      	cmp	r3, #0
 800d414:	d0f0      	beq.n	800d3f8 <HAL_RCC_OscConfig+0xe8>
 800d416:	e014      	b.n	800d442 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d418:	f7fe fbb0 	bl	800bb7c <HAL_GetTick>
 800d41c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d41e:	e008      	b.n	800d432 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d420:	f7fe fbac 	bl	800bb7c <HAL_GetTick>
 800d424:	4602      	mov	r2, r0
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	2b64      	cmp	r3, #100	; 0x64
 800d42c:	d901      	bls.n	800d432 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d42e:	2303      	movs	r3, #3
 800d430:	e20b      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d432:	4b57      	ldr	r3, [pc, #348]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1f0      	bne.n	800d420 <HAL_RCC_OscConfig+0x110>
 800d43e:	e000      	b.n	800d442 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d069      	beq.n	800d522 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d44e:	4b50      	ldr	r3, [pc, #320]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	f003 030c 	and.w	r3, r3, #12
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00b      	beq.n	800d472 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d45a:	4b4d      	ldr	r3, [pc, #308]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	f003 030c 	and.w	r3, r3, #12
 800d462:	2b08      	cmp	r3, #8
 800d464:	d11c      	bne.n	800d4a0 <HAL_RCC_OscConfig+0x190>
 800d466:	4b4a      	ldr	r3, [pc, #296]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d116      	bne.n	800d4a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d472:	4b47      	ldr	r3, [pc, #284]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f003 0302 	and.w	r3, r3, #2
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <HAL_RCC_OscConfig+0x17a>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d001      	beq.n	800d48a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e1df      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d48a:	4b41      	ldr	r3, [pc, #260]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	00db      	lsls	r3, r3, #3
 800d498:	493d      	ldr	r1, [pc, #244]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d49a:	4313      	orrs	r3, r2
 800d49c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d49e:	e040      	b.n	800d522 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d023      	beq.n	800d4f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d4a8:	4b39      	ldr	r3, [pc, #228]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a38      	ldr	r2, [pc, #224]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d4ae:	f043 0301 	orr.w	r3, r3, #1
 800d4b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4b4:	f7fe fb62 	bl	800bb7c <HAL_GetTick>
 800d4b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d4ba:	e008      	b.n	800d4ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d4bc:	f7fe fb5e 	bl	800bb7c <HAL_GetTick>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	d901      	bls.n	800d4ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	e1bd      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d4ce:	4b30      	ldr	r3, [pc, #192]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f003 0302 	and.w	r3, r3, #2
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d0f0      	beq.n	800d4bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d4da:	4b2d      	ldr	r3, [pc, #180]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	4929      	ldr	r1, [pc, #164]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	600b      	str	r3, [r1, #0]
 800d4ee:	e018      	b.n	800d522 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d4f0:	4b27      	ldr	r3, [pc, #156]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a26      	ldr	r2, [pc, #152]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d4f6:	f023 0301 	bic.w	r3, r3, #1
 800d4fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4fc:	f7fe fb3e 	bl	800bb7c <HAL_GetTick>
 800d500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d502:	e008      	b.n	800d516 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d504:	f7fe fb3a 	bl	800bb7c <HAL_GetTick>
 800d508:	4602      	mov	r2, r0
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d901      	bls.n	800d516 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e199      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d516:	4b1e      	ldr	r3, [pc, #120]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0302 	and.w	r3, r3, #2
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1f0      	bne.n	800d504 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 0308 	and.w	r3, r3, #8
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d038      	beq.n	800d5a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d019      	beq.n	800d56a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d536:	4b16      	ldr	r3, [pc, #88]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d53a:	4a15      	ldr	r2, [pc, #84]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d53c:	f043 0301 	orr.w	r3, r3, #1
 800d540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d542:	f7fe fb1b 	bl	800bb7c <HAL_GetTick>
 800d546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d548:	e008      	b.n	800d55c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d54a:	f7fe fb17 	bl	800bb7c <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	2b02      	cmp	r3, #2
 800d556:	d901      	bls.n	800d55c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	e176      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d55c:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d55e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d560:	f003 0302 	and.w	r3, r3, #2
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0f0      	beq.n	800d54a <HAL_RCC_OscConfig+0x23a>
 800d568:	e01a      	b.n	800d5a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d56a:	4b09      	ldr	r3, [pc, #36]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d56e:	4a08      	ldr	r2, [pc, #32]	; (800d590 <HAL_RCC_OscConfig+0x280>)
 800d570:	f023 0301 	bic.w	r3, r3, #1
 800d574:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d576:	f7fe fb01 	bl	800bb7c <HAL_GetTick>
 800d57a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d57c:	e00a      	b.n	800d594 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d57e:	f7fe fafd 	bl	800bb7c <HAL_GetTick>
 800d582:	4602      	mov	r2, r0
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d903      	bls.n	800d594 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e15c      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
 800d590:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d594:	4b91      	ldr	r3, [pc, #580]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d598:	f003 0302 	and.w	r3, r3, #2
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1ee      	bne.n	800d57e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 0304 	and.w	r3, r3, #4
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 80a4 	beq.w	800d6f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d5ae:	4b8b      	ldr	r3, [pc, #556]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10d      	bne.n	800d5d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d5ba:	4b88      	ldr	r3, [pc, #544]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5be:	4a87      	ldr	r2, [pc, #540]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d5c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5c4:	6413      	str	r3, [r2, #64]	; 0x40
 800d5c6:	4b85      	ldr	r3, [pc, #532]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5ce:	60bb      	str	r3, [r7, #8]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d5d6:	4b82      	ldr	r3, [pc, #520]	; (800d7e0 <HAL_RCC_OscConfig+0x4d0>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d118      	bne.n	800d614 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d5e2:	4b7f      	ldr	r3, [pc, #508]	; (800d7e0 <HAL_RCC_OscConfig+0x4d0>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a7e      	ldr	r2, [pc, #504]	; (800d7e0 <HAL_RCC_OscConfig+0x4d0>)
 800d5e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d5ee:	f7fe fac5 	bl	800bb7c <HAL_GetTick>
 800d5f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d5f4:	e008      	b.n	800d608 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d5f6:	f7fe fac1 	bl	800bb7c <HAL_GetTick>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	2b64      	cmp	r3, #100	; 0x64
 800d602:	d901      	bls.n	800d608 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d604:	2303      	movs	r3, #3
 800d606:	e120      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d608:	4b75      	ldr	r3, [pc, #468]	; (800d7e0 <HAL_RCC_OscConfig+0x4d0>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d610:	2b00      	cmp	r3, #0
 800d612:	d0f0      	beq.n	800d5f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d106      	bne.n	800d62a <HAL_RCC_OscConfig+0x31a>
 800d61c:	4b6f      	ldr	r3, [pc, #444]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d620:	4a6e      	ldr	r2, [pc, #440]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d622:	f043 0301 	orr.w	r3, r3, #1
 800d626:	6713      	str	r3, [r2, #112]	; 0x70
 800d628:	e02d      	b.n	800d686 <HAL_RCC_OscConfig+0x376>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d10c      	bne.n	800d64c <HAL_RCC_OscConfig+0x33c>
 800d632:	4b6a      	ldr	r3, [pc, #424]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d636:	4a69      	ldr	r2, [pc, #420]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d638:	f023 0301 	bic.w	r3, r3, #1
 800d63c:	6713      	str	r3, [r2, #112]	; 0x70
 800d63e:	4b67      	ldr	r3, [pc, #412]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d642:	4a66      	ldr	r2, [pc, #408]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d644:	f023 0304 	bic.w	r3, r3, #4
 800d648:	6713      	str	r3, [r2, #112]	; 0x70
 800d64a:	e01c      	b.n	800d686 <HAL_RCC_OscConfig+0x376>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	2b05      	cmp	r3, #5
 800d652:	d10c      	bne.n	800d66e <HAL_RCC_OscConfig+0x35e>
 800d654:	4b61      	ldr	r3, [pc, #388]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d658:	4a60      	ldr	r2, [pc, #384]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d65a:	f043 0304 	orr.w	r3, r3, #4
 800d65e:	6713      	str	r3, [r2, #112]	; 0x70
 800d660:	4b5e      	ldr	r3, [pc, #376]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d664:	4a5d      	ldr	r2, [pc, #372]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d666:	f043 0301 	orr.w	r3, r3, #1
 800d66a:	6713      	str	r3, [r2, #112]	; 0x70
 800d66c:	e00b      	b.n	800d686 <HAL_RCC_OscConfig+0x376>
 800d66e:	4b5b      	ldr	r3, [pc, #364]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d672:	4a5a      	ldr	r2, [pc, #360]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d674:	f023 0301 	bic.w	r3, r3, #1
 800d678:	6713      	str	r3, [r2, #112]	; 0x70
 800d67a:	4b58      	ldr	r3, [pc, #352]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d67e:	4a57      	ldr	r2, [pc, #348]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d680:	f023 0304 	bic.w	r3, r3, #4
 800d684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d015      	beq.n	800d6ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d68e:	f7fe fa75 	bl	800bb7c <HAL_GetTick>
 800d692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d694:	e00a      	b.n	800d6ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d696:	f7fe fa71 	bl	800bb7c <HAL_GetTick>
 800d69a:	4602      	mov	r2, r0
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d901      	bls.n	800d6ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e0ce      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d6ac:	4b4b      	ldr	r3, [pc, #300]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d6ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d0ee      	beq.n	800d696 <HAL_RCC_OscConfig+0x386>
 800d6b8:	e014      	b.n	800d6e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6ba:	f7fe fa5f 	bl	800bb7c <HAL_GetTick>
 800d6be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d6c0:	e00a      	b.n	800d6d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6c2:	f7fe fa5b 	bl	800bb7c <HAL_GetTick>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d901      	bls.n	800d6d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	e0b8      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d6d8:	4b40      	ldr	r3, [pc, #256]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6dc:	f003 0302 	and.w	r3, r3, #2
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1ee      	bne.n	800d6c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d105      	bne.n	800d6f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6ea:	4b3c      	ldr	r3, [pc, #240]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ee:	4a3b      	ldr	r2, [pc, #236]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d6f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f000 80a4 	beq.w	800d848 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d700:	4b36      	ldr	r3, [pc, #216]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	f003 030c 	and.w	r3, r3, #12
 800d708:	2b08      	cmp	r3, #8
 800d70a:	d06b      	beq.n	800d7e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	699b      	ldr	r3, [r3, #24]
 800d710:	2b02      	cmp	r3, #2
 800d712:	d149      	bne.n	800d7a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d714:	4b31      	ldr	r3, [pc, #196]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a30      	ldr	r2, [pc, #192]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d71a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d71e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d720:	f7fe fa2c 	bl	800bb7c <HAL_GetTick>
 800d724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d726:	e008      	b.n	800d73a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d728:	f7fe fa28 	bl	800bb7c <HAL_GetTick>
 800d72c:	4602      	mov	r2, r0
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	2b02      	cmp	r3, #2
 800d734:	d901      	bls.n	800d73a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e087      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d73a:	4b28      	ldr	r3, [pc, #160]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1f0      	bne.n	800d728 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	69da      	ldr	r2, [r3, #28]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a1b      	ldr	r3, [r3, #32]
 800d74e:	431a      	orrs	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d754:	019b      	lsls	r3, r3, #6
 800d756:	431a      	orrs	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75c:	085b      	lsrs	r3, r3, #1
 800d75e:	3b01      	subs	r3, #1
 800d760:	041b      	lsls	r3, r3, #16
 800d762:	431a      	orrs	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d768:	061b      	lsls	r3, r3, #24
 800d76a:	4313      	orrs	r3, r2
 800d76c:	4a1b      	ldr	r2, [pc, #108]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d76e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d772:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d774:	4b19      	ldr	r3, [pc, #100]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a18      	ldr	r2, [pc, #96]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d77a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d77e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d780:	f7fe f9fc 	bl	800bb7c <HAL_GetTick>
 800d784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d786:	e008      	b.n	800d79a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d788:	f7fe f9f8 	bl	800bb7c <HAL_GetTick>
 800d78c:	4602      	mov	r2, r0
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	2b02      	cmp	r3, #2
 800d794:	d901      	bls.n	800d79a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800d796:	2303      	movs	r3, #3
 800d798:	e057      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d79a:	4b10      	ldr	r3, [pc, #64]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0f0      	beq.n	800d788 <HAL_RCC_OscConfig+0x478>
 800d7a6:	e04f      	b.n	800d848 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7a8:	4b0c      	ldr	r3, [pc, #48]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a0b      	ldr	r2, [pc, #44]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d7ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d7b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7b4:	f7fe f9e2 	bl	800bb7c <HAL_GetTick>
 800d7b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7ba:	e008      	b.n	800d7ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7bc:	f7fe f9de 	bl	800bb7c <HAL_GetTick>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	d901      	bls.n	800d7ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	e03d      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7ce:	4b03      	ldr	r3, [pc, #12]	; (800d7dc <HAL_RCC_OscConfig+0x4cc>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1f0      	bne.n	800d7bc <HAL_RCC_OscConfig+0x4ac>
 800d7da:	e035      	b.n	800d848 <HAL_RCC_OscConfig+0x538>
 800d7dc:	40023800 	.word	0x40023800
 800d7e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d7e4:	4b1b      	ldr	r3, [pc, #108]	; (800d854 <HAL_RCC_OscConfig+0x544>)
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d028      	beq.n	800d844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d121      	bne.n	800d844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d11a      	bne.n	800d844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d814:	4013      	ands	r3, r2
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d81a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d111      	bne.n	800d844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82a:	085b      	lsrs	r3, r3, #1
 800d82c:	3b01      	subs	r3, #1
 800d82e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d830:	429a      	cmp	r2, r3
 800d832:	d107      	bne.n	800d844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d840:	429a      	cmp	r2, r3
 800d842:	d001      	beq.n	800d848 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	e000      	b.n	800d84a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	40023800 	.word	0x40023800

0800d858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d862:	2300      	movs	r3, #0
 800d864:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d101      	bne.n	800d870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	e0d0      	b.n	800da12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d870:	4b6a      	ldr	r3, [pc, #424]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f003 030f 	and.w	r3, r3, #15
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d910      	bls.n	800d8a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d87e:	4b67      	ldr	r3, [pc, #412]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f023 020f 	bic.w	r2, r3, #15
 800d886:	4965      	ldr	r1, [pc, #404]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	4313      	orrs	r3, r2
 800d88c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d88e:	4b63      	ldr	r3, [pc, #396]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f003 030f 	and.w	r3, r3, #15
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d001      	beq.n	800d8a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e0b8      	b.n	800da12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f003 0302 	and.w	r3, r3, #2
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d020      	beq.n	800d8ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f003 0304 	and.w	r3, r3, #4
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d005      	beq.n	800d8c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d8b8:	4b59      	ldr	r3, [pc, #356]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	4a58      	ldr	r2, [pc, #352]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d8be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d8c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f003 0308 	and.w	r3, r3, #8
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d005      	beq.n	800d8dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d8d0:	4b53      	ldr	r3, [pc, #332]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	4a52      	ldr	r2, [pc, #328]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d8d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d8da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d8dc:	4b50      	ldr	r3, [pc, #320]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	494d      	ldr	r1, [pc, #308]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 0301 	and.w	r3, r3, #1
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d040      	beq.n	800d97c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d107      	bne.n	800d912 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d902:	4b47      	ldr	r3, [pc, #284]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d115      	bne.n	800d93a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e07f      	b.n	800da12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	2b02      	cmp	r3, #2
 800d918:	d107      	bne.n	800d92a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d91a:	4b41      	ldr	r3, [pc, #260]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d926:	2301      	movs	r3, #1
 800d928:	e073      	b.n	800da12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d92a:	4b3d      	ldr	r3, [pc, #244]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 0302 	and.w	r3, r3, #2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e06b      	b.n	800da12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d93a:	4b39      	ldr	r3, [pc, #228]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	f023 0203 	bic.w	r2, r3, #3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	4936      	ldr	r1, [pc, #216]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d948:	4313      	orrs	r3, r2
 800d94a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d94c:	f7fe f916 	bl	800bb7c <HAL_GetTick>
 800d950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d952:	e00a      	b.n	800d96a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d954:	f7fe f912 	bl	800bb7c <HAL_GetTick>
 800d958:	4602      	mov	r2, r0
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	1ad3      	subs	r3, r2, r3
 800d95e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d962:	4293      	cmp	r3, r2
 800d964:	d901      	bls.n	800d96a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d966:	2303      	movs	r3, #3
 800d968:	e053      	b.n	800da12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d96a:	4b2d      	ldr	r3, [pc, #180]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	f003 020c 	and.w	r2, r3, #12
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	429a      	cmp	r2, r3
 800d97a:	d1eb      	bne.n	800d954 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d97c:	4b27      	ldr	r3, [pc, #156]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f003 030f 	and.w	r3, r3, #15
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	d210      	bcs.n	800d9ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d98a:	4b24      	ldr	r3, [pc, #144]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f023 020f 	bic.w	r2, r3, #15
 800d992:	4922      	ldr	r1, [pc, #136]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	4313      	orrs	r3, r2
 800d998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d99a:	4b20      	ldr	r3, [pc, #128]	; (800da1c <HAL_RCC_ClockConfig+0x1c4>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f003 030f 	and.w	r3, r3, #15
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d001      	beq.n	800d9ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e032      	b.n	800da12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f003 0304 	and.w	r3, r3, #4
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d008      	beq.n	800d9ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d9b8:	4b19      	ldr	r3, [pc, #100]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	4916      	ldr	r1, [pc, #88]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 0308 	and.w	r3, r3, #8
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d009      	beq.n	800d9ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d9d6:	4b12      	ldr	r3, [pc, #72]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	490e      	ldr	r1, [pc, #56]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d9ea:	f000 f821 	bl	800da30 <HAL_RCC_GetSysClockFreq>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	4b0b      	ldr	r3, [pc, #44]	; (800da20 <HAL_RCC_ClockConfig+0x1c8>)
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	091b      	lsrs	r3, r3, #4
 800d9f6:	f003 030f 	and.w	r3, r3, #15
 800d9fa:	490a      	ldr	r1, [pc, #40]	; (800da24 <HAL_RCC_ClockConfig+0x1cc>)
 800d9fc:	5ccb      	ldrb	r3, [r1, r3]
 800d9fe:	fa22 f303 	lsr.w	r3, r2, r3
 800da02:	4a09      	ldr	r2, [pc, #36]	; (800da28 <HAL_RCC_ClockConfig+0x1d0>)
 800da04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800da06:	4b09      	ldr	r3, [pc, #36]	; (800da2c <HAL_RCC_ClockConfig+0x1d4>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd fefe 	bl	800b80c <HAL_InitTick>

  return HAL_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	40023c00 	.word	0x40023c00
 800da20:	40023800 	.word	0x40023800
 800da24:	08015420 	.word	0x08015420
 800da28:	20000250 	.word	0x20000250
 800da2c:	20000254 	.word	0x20000254

0800da30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800da30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da34:	b094      	sub	sp, #80	; 0x50
 800da36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800da38:	2300      	movs	r3, #0
 800da3a:	647b      	str	r3, [r7, #68]	; 0x44
 800da3c:	2300      	movs	r3, #0
 800da3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da40:	2300      	movs	r3, #0
 800da42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da48:	4b79      	ldr	r3, [pc, #484]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x200>)
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	f003 030c 	and.w	r3, r3, #12
 800da50:	2b08      	cmp	r3, #8
 800da52:	d00d      	beq.n	800da70 <HAL_RCC_GetSysClockFreq+0x40>
 800da54:	2b08      	cmp	r3, #8
 800da56:	f200 80e1 	bhi.w	800dc1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <HAL_RCC_GetSysClockFreq+0x34>
 800da5e:	2b04      	cmp	r3, #4
 800da60:	d003      	beq.n	800da6a <HAL_RCC_GetSysClockFreq+0x3a>
 800da62:	e0db      	b.n	800dc1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800da64:	4b73      	ldr	r3, [pc, #460]	; (800dc34 <HAL_RCC_GetSysClockFreq+0x204>)
 800da66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800da68:	e0db      	b.n	800dc22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800da6a:	4b73      	ldr	r3, [pc, #460]	; (800dc38 <HAL_RCC_GetSysClockFreq+0x208>)
 800da6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800da6e:	e0d8      	b.n	800dc22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800da70:	4b6f      	ldr	r3, [pc, #444]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x200>)
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800da7a:	4b6d      	ldr	r3, [pc, #436]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x200>)
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da82:	2b00      	cmp	r3, #0
 800da84:	d063      	beq.n	800db4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da86:	4b6a      	ldr	r3, [pc, #424]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x200>)
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	099b      	lsrs	r3, r3, #6
 800da8c:	2200      	movs	r2, #0
 800da8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800da90:	63fa      	str	r2, [r7, #60]	; 0x3c
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da98:	633b      	str	r3, [r7, #48]	; 0x30
 800da9a:	2300      	movs	r3, #0
 800da9c:	637b      	str	r3, [r7, #52]	; 0x34
 800da9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800daa2:	4622      	mov	r2, r4
 800daa4:	462b      	mov	r3, r5
 800daa6:	f04f 0000 	mov.w	r0, #0
 800daaa:	f04f 0100 	mov.w	r1, #0
 800daae:	0159      	lsls	r1, r3, #5
 800dab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dab4:	0150      	lsls	r0, r2, #5
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4621      	mov	r1, r4
 800dabc:	1a51      	subs	r1, r2, r1
 800dabe:	6139      	str	r1, [r7, #16]
 800dac0:	4629      	mov	r1, r5
 800dac2:	eb63 0301 	sbc.w	r3, r3, r1
 800dac6:	617b      	str	r3, [r7, #20]
 800dac8:	f04f 0200 	mov.w	r2, #0
 800dacc:	f04f 0300 	mov.w	r3, #0
 800dad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dad4:	4659      	mov	r1, fp
 800dad6:	018b      	lsls	r3, r1, #6
 800dad8:	4651      	mov	r1, sl
 800dada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dade:	4651      	mov	r1, sl
 800dae0:	018a      	lsls	r2, r1, #6
 800dae2:	4651      	mov	r1, sl
 800dae4:	ebb2 0801 	subs.w	r8, r2, r1
 800dae8:	4659      	mov	r1, fp
 800daea:	eb63 0901 	sbc.w	r9, r3, r1
 800daee:	f04f 0200 	mov.w	r2, #0
 800daf2:	f04f 0300 	mov.w	r3, #0
 800daf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dafa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dafe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800db02:	4690      	mov	r8, r2
 800db04:	4699      	mov	r9, r3
 800db06:	4623      	mov	r3, r4
 800db08:	eb18 0303 	adds.w	r3, r8, r3
 800db0c:	60bb      	str	r3, [r7, #8]
 800db0e:	462b      	mov	r3, r5
 800db10:	eb49 0303 	adc.w	r3, r9, r3
 800db14:	60fb      	str	r3, [r7, #12]
 800db16:	f04f 0200 	mov.w	r2, #0
 800db1a:	f04f 0300 	mov.w	r3, #0
 800db1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800db22:	4629      	mov	r1, r5
 800db24:	024b      	lsls	r3, r1, #9
 800db26:	4621      	mov	r1, r4
 800db28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800db2c:	4621      	mov	r1, r4
 800db2e:	024a      	lsls	r2, r1, #9
 800db30:	4610      	mov	r0, r2
 800db32:	4619      	mov	r1, r3
 800db34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db36:	2200      	movs	r2, #0
 800db38:	62bb      	str	r3, [r7, #40]	; 0x28
 800db3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800db40:	f7f3 f84c 	bl	8000bdc <__aeabi_uldivmod>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4613      	mov	r3, r2
 800db4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db4c:	e058      	b.n	800dc00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db4e:	4b38      	ldr	r3, [pc, #224]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x200>)
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	099b      	lsrs	r3, r3, #6
 800db54:	2200      	movs	r2, #0
 800db56:	4618      	mov	r0, r3
 800db58:	4611      	mov	r1, r2
 800db5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800db5e:	623b      	str	r3, [r7, #32]
 800db60:	2300      	movs	r3, #0
 800db62:	627b      	str	r3, [r7, #36]	; 0x24
 800db64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800db68:	4642      	mov	r2, r8
 800db6a:	464b      	mov	r3, r9
 800db6c:	f04f 0000 	mov.w	r0, #0
 800db70:	f04f 0100 	mov.w	r1, #0
 800db74:	0159      	lsls	r1, r3, #5
 800db76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800db7a:	0150      	lsls	r0, r2, #5
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4641      	mov	r1, r8
 800db82:	ebb2 0a01 	subs.w	sl, r2, r1
 800db86:	4649      	mov	r1, r9
 800db88:	eb63 0b01 	sbc.w	fp, r3, r1
 800db8c:	f04f 0200 	mov.w	r2, #0
 800db90:	f04f 0300 	mov.w	r3, #0
 800db94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800db98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800db9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800dba0:	ebb2 040a 	subs.w	r4, r2, sl
 800dba4:	eb63 050b 	sbc.w	r5, r3, fp
 800dba8:	f04f 0200 	mov.w	r2, #0
 800dbac:	f04f 0300 	mov.w	r3, #0
 800dbb0:	00eb      	lsls	r3, r5, #3
 800dbb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dbb6:	00e2      	lsls	r2, r4, #3
 800dbb8:	4614      	mov	r4, r2
 800dbba:	461d      	mov	r5, r3
 800dbbc:	4643      	mov	r3, r8
 800dbbe:	18e3      	adds	r3, r4, r3
 800dbc0:	603b      	str	r3, [r7, #0]
 800dbc2:	464b      	mov	r3, r9
 800dbc4:	eb45 0303 	adc.w	r3, r5, r3
 800dbc8:	607b      	str	r3, [r7, #4]
 800dbca:	f04f 0200 	mov.w	r2, #0
 800dbce:	f04f 0300 	mov.w	r3, #0
 800dbd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	028b      	lsls	r3, r1, #10
 800dbda:	4621      	mov	r1, r4
 800dbdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	028a      	lsls	r2, r1, #10
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbea:	2200      	movs	r2, #0
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	61fa      	str	r2, [r7, #28]
 800dbf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dbf4:	f7f2 fff2 	bl	8000bdc <__aeabi_uldivmod>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800dc00:	4b0b      	ldr	r3, [pc, #44]	; (800dc30 <HAL_RCC_GetSysClockFreq+0x200>)
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	0c1b      	lsrs	r3, r3, #16
 800dc06:	f003 0303 	and.w	r3, r3, #3
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800dc10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dc1a:	e002      	b.n	800dc22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dc1c:	4b05      	ldr	r3, [pc, #20]	; (800dc34 <HAL_RCC_GetSysClockFreq+0x204>)
 800dc1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dc20:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dc22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3750      	adds	r7, #80	; 0x50
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc2e:	bf00      	nop
 800dc30:	40023800 	.word	0x40023800
 800dc34:	00f42400 	.word	0x00f42400
 800dc38:	007a1200 	.word	0x007a1200

0800dc3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dc40:	4b03      	ldr	r3, [pc, #12]	; (800dc50 <HAL_RCC_GetHCLKFreq+0x14>)
 800dc42:	681b      	ldr	r3, [r3, #0]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	20000250 	.word	0x20000250

0800dc54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dc58:	f7ff fff0 	bl	800dc3c <HAL_RCC_GetHCLKFreq>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	4b05      	ldr	r3, [pc, #20]	; (800dc74 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	0a9b      	lsrs	r3, r3, #10
 800dc64:	f003 0307 	and.w	r3, r3, #7
 800dc68:	4903      	ldr	r1, [pc, #12]	; (800dc78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dc6a:	5ccb      	ldrb	r3, [r1, r3]
 800dc6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	40023800 	.word	0x40023800
 800dc78:	08015430 	.word	0x08015430

0800dc7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dc80:	f7ff ffdc 	bl	800dc3c <HAL_RCC_GetHCLKFreq>
 800dc84:	4602      	mov	r2, r0
 800dc86:	4b05      	ldr	r3, [pc, #20]	; (800dc9c <HAL_RCC_GetPCLK2Freq+0x20>)
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	0b5b      	lsrs	r3, r3, #13
 800dc8c:	f003 0307 	and.w	r3, r3, #7
 800dc90:	4903      	ldr	r1, [pc, #12]	; (800dca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc92:	5ccb      	ldrb	r3, [r1, r3]
 800dc94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	40023800 	.word	0x40023800
 800dca0:	08015430 	.word	0x08015430

0800dca4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	220f      	movs	r2, #15
 800dcb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dcb4:	4b12      	ldr	r3, [pc, #72]	; (800dd00 <HAL_RCC_GetClockConfig+0x5c>)
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	f003 0203 	and.w	r2, r3, #3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dcc0:	4b0f      	ldr	r3, [pc, #60]	; (800dd00 <HAL_RCC_GetClockConfig+0x5c>)
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dccc:	4b0c      	ldr	r3, [pc, #48]	; (800dd00 <HAL_RCC_GetClockConfig+0x5c>)
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800dcd8:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <HAL_RCC_GetClockConfig+0x5c>)
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	08db      	lsrs	r3, r3, #3
 800dcde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dce6:	4b07      	ldr	r3, [pc, #28]	; (800dd04 <HAL_RCC_GetClockConfig+0x60>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f003 020f 	and.w	r2, r3, #15
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	601a      	str	r2, [r3, #0]
}
 800dcf2:	bf00      	nop
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	40023800 	.word	0x40023800
 800dd04:	40023c00 	.word	0x40023c00

0800dd08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b088      	sub	sp, #32
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d012      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dd30:	4b69      	ldr	r3, [pc, #420]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	4a68      	ldr	r2, [pc, #416]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dd3a:	6093      	str	r3, [r2, #8]
 800dd3c:	4b66      	ldr	r3, [pc, #408]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd3e:	689a      	ldr	r2, [r3, #8]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd44:	4964      	ldr	r1, [pc, #400]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd46:	4313      	orrs	r3, r2
 800dd48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800dd52:	2301      	movs	r3, #1
 800dd54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d017      	beq.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dd62:	4b5d      	ldr	r3, [pc, #372]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd70:	4959      	ldr	r1, [pc, #356]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dd72:	4313      	orrs	r3, r2
 800dd74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd80:	d101      	bne.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800dd82:	2301      	movs	r3, #1
 800dd84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d017      	beq.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dd9e:	4b4e      	ldr	r3, [pc, #312]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dda0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dda4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddac:	494a      	ldr	r1, [pc, #296]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddbc:	d101      	bne.n	800ddc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d101      	bne.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ddda:	2301      	movs	r3, #1
 800dddc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 0320 	and.w	r3, r3, #32
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f000 808b 	beq.w	800df02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ddec:	4b3a      	ldr	r3, [pc, #232]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf0:	4a39      	ldr	r2, [pc, #228]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddf6:	6413      	str	r3, [r2, #64]	; 0x40
 800ddf8:	4b37      	ldr	r3, [pc, #220]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de00:	60bb      	str	r3, [r7, #8]
 800de02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800de04:	4b35      	ldr	r3, [pc, #212]	; (800dedc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a34      	ldr	r2, [pc, #208]	; (800dedc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800de0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de10:	f7fd feb4 	bl	800bb7c <HAL_GetTick>
 800de14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800de16:	e008      	b.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de18:	f7fd feb0 	bl	800bb7c <HAL_GetTick>
 800de1c:	4602      	mov	r2, r0
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	2b64      	cmp	r3, #100	; 0x64
 800de24:	d901      	bls.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e357      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800de2a:	4b2c      	ldr	r3, [pc, #176]	; (800dedc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de32:	2b00      	cmp	r3, #0
 800de34:	d0f0      	beq.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800de36:	4b28      	ldr	r3, [pc, #160]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d035      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	429a      	cmp	r2, r3
 800de52:	d02e      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800de54:	4b20      	ldr	r3, [pc, #128]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800de5e:	4b1e      	ldr	r3, [pc, #120]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de62:	4a1d      	ldr	r2, [pc, #116]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800de6a:	4b1b      	ldr	r3, [pc, #108]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de6e:	4a1a      	ldr	r2, [pc, #104]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800de76:	4a18      	ldr	r2, [pc, #96]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800de7c:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b01      	cmp	r3, #1
 800de86:	d114      	bne.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de88:	f7fd fe78 	bl	800bb7c <HAL_GetTick>
 800de8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de8e:	e00a      	b.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800de90:	f7fd fe74 	bl	800bb7c <HAL_GetTick>
 800de94:	4602      	mov	r2, r0
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d901      	bls.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800dea2:	2303      	movs	r3, #3
 800dea4:	e319      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dea6:	4b0c      	ldr	r3, [pc, #48]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deaa:	f003 0302 	and.w	r3, r3, #2
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d0ee      	beq.n	800de90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800deba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800debe:	d111      	bne.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800dec0:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800decc:	4b04      	ldr	r3, [pc, #16]	; (800dee0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800dece:	400b      	ands	r3, r1
 800ded0:	4901      	ldr	r1, [pc, #4]	; (800ded8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ded2:	4313      	orrs	r3, r2
 800ded4:	608b      	str	r3, [r1, #8]
 800ded6:	e00b      	b.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ded8:	40023800 	.word	0x40023800
 800dedc:	40007000 	.word	0x40007000
 800dee0:	0ffffcff 	.word	0x0ffffcff
 800dee4:	4baa      	ldr	r3, [pc, #680]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	4aa9      	ldr	r2, [pc, #676]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800deea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800deee:	6093      	str	r3, [r2, #8]
 800def0:	4ba7      	ldr	r3, [pc, #668]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800def2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800defc:	49a4      	ldr	r1, [pc, #656]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800defe:	4313      	orrs	r3, r2
 800df00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f003 0310 	and.w	r3, r3, #16
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d010      	beq.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800df0e:	4ba0      	ldr	r3, [pc, #640]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df14:	4a9e      	ldr	r2, [pc, #632]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800df1e:	4b9c      	ldr	r3, [pc, #624]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	4999      	ldr	r1, [pc, #612]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df2a:	4313      	orrs	r3, r2
 800df2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00a      	beq.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800df3c:	4b94      	ldr	r3, [pc, #592]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df4a:	4991      	ldr	r1, [pc, #580]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df4c:	4313      	orrs	r3, r2
 800df4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00a      	beq.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800df5e:	4b8c      	ldr	r3, [pc, #560]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df6c:	4988      	ldr	r1, [pc, #544]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df6e:	4313      	orrs	r3, r2
 800df70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00a      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800df80:	4b83      	ldr	r3, [pc, #524]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df8e:	4980      	ldr	r1, [pc, #512]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800df90:	4313      	orrs	r3, r2
 800df92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00a      	beq.n	800dfb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dfa2:	4b7b      	ldr	r3, [pc, #492]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfb0:	4977      	ldr	r1, [pc, #476]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00a      	beq.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dfc4:	4b72      	ldr	r3, [pc, #456]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfca:	f023 0203 	bic.w	r2, r3, #3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfd2:	496f      	ldr	r1, [pc, #444]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00a      	beq.n	800dffc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dfe6:	4b6a      	ldr	r3, [pc, #424]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfec:	f023 020c 	bic.w	r2, r3, #12
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dff4:	4966      	ldr	r1, [pc, #408]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800dff6:	4313      	orrs	r3, r2
 800dff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00a      	beq.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e008:	4b61      	ldr	r3, [pc, #388]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e00e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e016:	495e      	ldr	r1, [pc, #376]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e018:	4313      	orrs	r3, r2
 800e01a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00a      	beq.n	800e040 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e02a:	4b59      	ldr	r3, [pc, #356]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e030:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e038:	4955      	ldr	r1, [pc, #340]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e03a:	4313      	orrs	r3, r2
 800e03c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00a      	beq.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e04c:	4b50      	ldr	r3, [pc, #320]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e05a:	494d      	ldr	r1, [pc, #308]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e05c:	4313      	orrs	r3, r2
 800e05e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00a      	beq.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e06e:	4b48      	ldr	r3, [pc, #288]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e074:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e07c:	4944      	ldr	r1, [pc, #272]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e07e:	4313      	orrs	r3, r2
 800e080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00a      	beq.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e090:	4b3f      	ldr	r3, [pc, #252]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e096:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e09e:	493c      	ldr	r1, [pc, #240]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00a      	beq.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e0b2:	4b37      	ldr	r3, [pc, #220]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0c0:	4933      	ldr	r1, [pc, #204]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d00a      	beq.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e0d4:	4b2e      	ldr	r3, [pc, #184]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0e2:	492b      	ldr	r1, [pc, #172]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d011      	beq.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e0f6:	4b26      	ldr	r3, [pc, #152]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e104:	4922      	ldr	r1, [pc, #136]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e106:	4313      	orrs	r3, r2
 800e108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e114:	d101      	bne.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e116:	2301      	movs	r3, #1
 800e118:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f003 0308 	and.w	r3, r3, #8
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e126:	2301      	movs	r3, #1
 800e128:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00a      	beq.n	800e14c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e136:	4b16      	ldr	r3, [pc, #88]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e13c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e144:	4912      	ldr	r1, [pc, #72]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e146:	4313      	orrs	r3, r2
 800e148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e158:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e15e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e168:	4909      	ldr	r1, [pc, #36]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e16a:	4313      	orrs	r3, r2
 800e16c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d006      	beq.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 80d9 	beq.w	800e336 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e184:	4b02      	ldr	r3, [pc, #8]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a01      	ldr	r2, [pc, #4]	; (800e190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e18a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e18e:	e001      	b.n	800e194 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800e190:	40023800 	.word	0x40023800
 800e194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e196:	f7fd fcf1 	bl	800bb7c <HAL_GetTick>
 800e19a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e19c:	e008      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e19e:	f7fd fced 	bl	800bb7c <HAL_GetTick>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	2b64      	cmp	r3, #100	; 0x64
 800e1aa:	d901      	bls.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	e194      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e1b0:	4b6c      	ldr	r3, [pc, #432]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1f0      	bne.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d021      	beq.n	800e20c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d11d      	bne.n	800e20c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e1d0:	4b64      	ldr	r3, [pc, #400]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1d6:	0c1b      	lsrs	r3, r3, #16
 800e1d8:	f003 0303 	and.w	r3, r3, #3
 800e1dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e1de:	4b61      	ldr	r3, [pc, #388]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1e4:	0e1b      	lsrs	r3, r3, #24
 800e1e6:	f003 030f 	and.w	r3, r3, #15
 800e1ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	019a      	lsls	r2, r3, #6
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	041b      	lsls	r3, r3, #16
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	061b      	lsls	r3, r3, #24
 800e1fc:	431a      	orrs	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	071b      	lsls	r3, r3, #28
 800e204:	4957      	ldr	r1, [pc, #348]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e206:	4313      	orrs	r3, r2
 800e208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e21c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e220:	d00a      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d02e      	beq.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e236:	d129      	bne.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e238:	4b4a      	ldr	r3, [pc, #296]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e23a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e23e:	0c1b      	lsrs	r3, r3, #16
 800e240:	f003 0303 	and.w	r3, r3, #3
 800e244:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e246:	4b47      	ldr	r3, [pc, #284]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e24c:	0f1b      	lsrs	r3, r3, #28
 800e24e:	f003 0307 	and.w	r3, r3, #7
 800e252:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	019a      	lsls	r2, r3, #6
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	041b      	lsls	r3, r3, #16
 800e25e:	431a      	orrs	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	061b      	lsls	r3, r3, #24
 800e266:	431a      	orrs	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	071b      	lsls	r3, r3, #28
 800e26c:	493d      	ldr	r1, [pc, #244]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e26e:	4313      	orrs	r3, r2
 800e270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e274:	4b3b      	ldr	r3, [pc, #236]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e27a:	f023 021f 	bic.w	r2, r3, #31
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e282:	3b01      	subs	r3, #1
 800e284:	4937      	ldr	r1, [pc, #220]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e286:	4313      	orrs	r3, r2
 800e288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e294:	2b00      	cmp	r3, #0
 800e296:	d01d      	beq.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e298:	4b32      	ldr	r3, [pc, #200]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e29e:	0e1b      	lsrs	r3, r3, #24
 800e2a0:	f003 030f 	and.w	r3, r3, #15
 800e2a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e2a6:	4b2f      	ldr	r3, [pc, #188]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2ac:	0f1b      	lsrs	r3, r3, #28
 800e2ae:	f003 0307 	and.w	r3, r3, #7
 800e2b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	019a      	lsls	r2, r3, #6
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	041b      	lsls	r3, r3, #16
 800e2c0:	431a      	orrs	r2, r3
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	061b      	lsls	r3, r3, #24
 800e2c6:	431a      	orrs	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	071b      	lsls	r3, r3, #28
 800e2cc:	4925      	ldr	r1, [pc, #148]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d011      	beq.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	019a      	lsls	r2, r3, #6
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	041b      	lsls	r3, r3, #16
 800e2ec:	431a      	orrs	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	061b      	lsls	r3, r3, #24
 800e2f4:	431a      	orrs	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	071b      	lsls	r3, r3, #28
 800e2fc:	4919      	ldr	r1, [pc, #100]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e304:	4b17      	ldr	r3, [pc, #92]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a16      	ldr	r2, [pc, #88]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e30a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e30e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e310:	f7fd fc34 	bl	800bb7c <HAL_GetTick>
 800e314:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e316:	e008      	b.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e318:	f7fd fc30 	bl	800bb7c <HAL_GetTick>
 800e31c:	4602      	mov	r2, r0
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	2b64      	cmp	r3, #100	; 0x64
 800e324:	d901      	bls.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e326:	2303      	movs	r3, #3
 800e328:	e0d7      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e32a:	4b0e      	ldr	r3, [pc, #56]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e332:	2b00      	cmp	r3, #0
 800e334:	d0f0      	beq.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	f040 80cd 	bne.w	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e33e:	4b09      	ldr	r3, [pc, #36]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a08      	ldr	r2, [pc, #32]	; (800e364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800e344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e34a:	f7fd fc17 	bl	800bb7c <HAL_GetTick>
 800e34e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e350:	e00a      	b.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e352:	f7fd fc13 	bl	800bb7c <HAL_GetTick>
 800e356:	4602      	mov	r2, r0
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	2b64      	cmp	r3, #100	; 0x64
 800e35e:	d903      	bls.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e360:	2303      	movs	r3, #3
 800e362:	e0ba      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800e364:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e368:	4b5e      	ldr	r3, [pc, #376]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e374:	d0ed      	beq.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d003      	beq.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d009      	beq.n	800e39e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e392:	2b00      	cmp	r3, #0
 800e394:	d02e      	beq.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d12a      	bne.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e39e:	4b51      	ldr	r3, [pc, #324]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3a4:	0c1b      	lsrs	r3, r3, #16
 800e3a6:	f003 0303 	and.w	r3, r3, #3
 800e3aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e3ac:	4b4d      	ldr	r3, [pc, #308]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3b2:	0f1b      	lsrs	r3, r3, #28
 800e3b4:	f003 0307 	and.w	r3, r3, #7
 800e3b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	695b      	ldr	r3, [r3, #20]
 800e3be:	019a      	lsls	r2, r3, #6
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	041b      	lsls	r3, r3, #16
 800e3c4:	431a      	orrs	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	699b      	ldr	r3, [r3, #24]
 800e3ca:	061b      	lsls	r3, r3, #24
 800e3cc:	431a      	orrs	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	071b      	lsls	r3, r3, #28
 800e3d2:	4944      	ldr	r1, [pc, #272]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e3da:	4b42      	ldr	r3, [pc, #264]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e3dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	021b      	lsls	r3, r3, #8
 800e3ec:	493d      	ldr	r1, [pc, #244]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d022      	beq.n	800e446 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e408:	d11d      	bne.n	800e446 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e40a:	4b36      	ldr	r3, [pc, #216]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e410:	0e1b      	lsrs	r3, r3, #24
 800e412:	f003 030f 	and.w	r3, r3, #15
 800e416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e418:	4b32      	ldr	r3, [pc, #200]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e41e:	0f1b      	lsrs	r3, r3, #28
 800e420:	f003 0307 	and.w	r3, r3, #7
 800e424:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	695b      	ldr	r3, [r3, #20]
 800e42a:	019a      	lsls	r2, r3, #6
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6a1b      	ldr	r3, [r3, #32]
 800e430:	041b      	lsls	r3, r3, #16
 800e432:	431a      	orrs	r2, r3
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	061b      	lsls	r3, r3, #24
 800e438:	431a      	orrs	r2, r3
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	071b      	lsls	r3, r3, #28
 800e43e:	4929      	ldr	r1, [pc, #164]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e440:	4313      	orrs	r3, r2
 800e442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f003 0308 	and.w	r3, r3, #8
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d028      	beq.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e452:	4b24      	ldr	r3, [pc, #144]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e458:	0e1b      	lsrs	r3, r3, #24
 800e45a:	f003 030f 	and.w	r3, r3, #15
 800e45e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e460:	4b20      	ldr	r3, [pc, #128]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e466:	0c1b      	lsrs	r3, r3, #16
 800e468:	f003 0303 	and.w	r3, r3, #3
 800e46c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	695b      	ldr	r3, [r3, #20]
 800e472:	019a      	lsls	r2, r3, #6
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	041b      	lsls	r3, r3, #16
 800e478:	431a      	orrs	r2, r3
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	061b      	lsls	r3, r3, #24
 800e47e:	431a      	orrs	r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	69db      	ldr	r3, [r3, #28]
 800e484:	071b      	lsls	r3, r3, #28
 800e486:	4917      	ldr	r1, [pc, #92]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e488:	4313      	orrs	r3, r2
 800e48a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e48e:	4b15      	ldr	r3, [pc, #84]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e49c:	4911      	ldr	r1, [pc, #68]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e4a4:	4b0f      	ldr	r3, [pc, #60]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4a0e      	ldr	r2, [pc, #56]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4b0:	f7fd fb64 	bl	800bb7c <HAL_GetTick>
 800e4b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e4b6:	e008      	b.n	800e4ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e4b8:	f7fd fb60 	bl	800bb7c <HAL_GetTick>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	2b64      	cmp	r3, #100	; 0x64
 800e4c4:	d901      	bls.n	800e4ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e4c6:	2303      	movs	r3, #3
 800e4c8:	e007      	b.n	800e4da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e4ca:	4b06      	ldr	r3, [pc, #24]	; (800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4d6:	d1ef      	bne.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3720      	adds	r7, #32
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	40023800 	.word	0x40023800

0800e4e8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e01c      	b.n	800e534 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	795b      	ldrb	r3, [r3, #5]
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	d105      	bne.n	800e510 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7fd f844 	bl	800b598 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2202      	movs	r2, #2
 800e514:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f042 0204 	orr.w	r2, r2, #4
 800e524:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2201      	movs	r2, #1
 800e52a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800e532:	2300      	movs	r3, #0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	791b      	ldrb	r3, [r3, #4]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d101      	bne.n	800e556 <HAL_RNG_GenerateRandomNumber+0x1a>
 800e552:	2302      	movs	r3, #2
 800e554:	e044      	b.n	800e5e0 <HAL_RNG_GenerateRandomNumber+0xa4>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	795b      	ldrb	r3, [r3, #5]
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b01      	cmp	r3, #1
 800e564:	d133      	bne.n	800e5ce <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2202      	movs	r2, #2
 800e56a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e56c:	f7fd fb06 	bl	800bb7c <HAL_GetTick>
 800e570:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e572:	e018      	b.n	800e5a6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e574:	f7fd fb02 	bl	800bb7c <HAL_GetTick>
 800e578:	4602      	mov	r2, r0
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	2b02      	cmp	r3, #2
 800e580:	d911      	bls.n	800e5a6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	f003 0301 	and.w	r3, r3, #1
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d00a      	beq.n	800e5a6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2202      	movs	r2, #2
 800e59a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e01c      	b.n	800e5e0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d1df      	bne.n	800e574 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	689a      	ldr	r2, [r3, #8]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68da      	ldr	r2, [r3, #12]
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	715a      	strb	r2, [r3, #5]
 800e5cc:	e004      	b.n	800e5d8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2204      	movs	r2, #4
 800e5d2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	711a      	strb	r2, [r3, #4]

  return status;
 800e5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e049      	b.n	800e68e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e600:	b2db      	uxtb	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d106      	bne.n	800e614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 f841 	bl	800e696 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2202      	movs	r2, #2
 800e618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3304      	adds	r3, #4
 800e624:	4619      	mov	r1, r3
 800e626:	4610      	mov	r0, r2
 800e628:	f000 fa00 	bl	800ea2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2201      	movs	r2, #1
 800e648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2201      	movs	r2, #1
 800e660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2201      	movs	r2, #1
 800e670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e696:	b480      	push	{r7}
 800e698:	b083      	sub	sp, #12
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e69e:	bf00      	nop
 800e6a0:	370c      	adds	r7, #12
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr
	...

0800e6ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d001      	beq.n	800e6c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e054      	b.n	800e76e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2202      	movs	r2, #2
 800e6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	68da      	ldr	r2, [r3, #12]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f042 0201 	orr.w	r2, r2, #1
 800e6da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a26      	ldr	r2, [pc, #152]	; (800e77c <HAL_TIM_Base_Start_IT+0xd0>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d022      	beq.n	800e72c <HAL_TIM_Base_Start_IT+0x80>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ee:	d01d      	beq.n	800e72c <HAL_TIM_Base_Start_IT+0x80>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a22      	ldr	r2, [pc, #136]	; (800e780 <HAL_TIM_Base_Start_IT+0xd4>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d018      	beq.n	800e72c <HAL_TIM_Base_Start_IT+0x80>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4a21      	ldr	r2, [pc, #132]	; (800e784 <HAL_TIM_Base_Start_IT+0xd8>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d013      	beq.n	800e72c <HAL_TIM_Base_Start_IT+0x80>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a1f      	ldr	r2, [pc, #124]	; (800e788 <HAL_TIM_Base_Start_IT+0xdc>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d00e      	beq.n	800e72c <HAL_TIM_Base_Start_IT+0x80>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4a1e      	ldr	r2, [pc, #120]	; (800e78c <HAL_TIM_Base_Start_IT+0xe0>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d009      	beq.n	800e72c <HAL_TIM_Base_Start_IT+0x80>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a1c      	ldr	r2, [pc, #112]	; (800e790 <HAL_TIM_Base_Start_IT+0xe4>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d004      	beq.n	800e72c <HAL_TIM_Base_Start_IT+0x80>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a1b      	ldr	r2, [pc, #108]	; (800e794 <HAL_TIM_Base_Start_IT+0xe8>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d115      	bne.n	800e758 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	689a      	ldr	r2, [r3, #8]
 800e732:	4b19      	ldr	r3, [pc, #100]	; (800e798 <HAL_TIM_Base_Start_IT+0xec>)
 800e734:	4013      	ands	r3, r2
 800e736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b06      	cmp	r3, #6
 800e73c:	d015      	beq.n	800e76a <HAL_TIM_Base_Start_IT+0xbe>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e744:	d011      	beq.n	800e76a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f042 0201 	orr.w	r2, r2, #1
 800e754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e756:	e008      	b.n	800e76a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f042 0201 	orr.w	r2, r2, #1
 800e766:	601a      	str	r2, [r3, #0]
 800e768:	e000      	b.n	800e76c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e76a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	40010000 	.word	0x40010000
 800e780:	40000400 	.word	0x40000400
 800e784:	40000800 	.word	0x40000800
 800e788:	40000c00 	.word	0x40000c00
 800e78c:	40010400 	.word	0x40010400
 800e790:	40014000 	.word	0x40014000
 800e794:	40001800 	.word	0x40001800
 800e798:	00010007 	.word	0x00010007

0800e79c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	691b      	ldr	r3, [r3, #16]
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d122      	bne.n	800e7f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	f003 0302 	and.w	r3, r3, #2
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d11b      	bne.n	800e7f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f06f 0202 	mvn.w	r2, #2
 800e7c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	699b      	ldr	r3, [r3, #24]
 800e7d6:	f003 0303 	and.w	r3, r3, #3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 f905 	bl	800e9ee <HAL_TIM_IC_CaptureCallback>
 800e7e4:	e005      	b.n	800e7f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 f8f7 	bl	800e9da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f908 	bl	800ea02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	f003 0304 	and.w	r3, r3, #4
 800e802:	2b04      	cmp	r3, #4
 800e804:	d122      	bne.n	800e84c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	f003 0304 	and.w	r3, r3, #4
 800e810:	2b04      	cmp	r3, #4
 800e812:	d11b      	bne.n	800e84c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f06f 0204 	mvn.w	r2, #4
 800e81c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2202      	movs	r2, #2
 800e822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d003      	beq.n	800e83a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 f8db 	bl	800e9ee <HAL_TIM_IC_CaptureCallback>
 800e838:	e005      	b.n	800e846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 f8cd 	bl	800e9da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f8de 	bl	800ea02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2200      	movs	r2, #0
 800e84a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	f003 0308 	and.w	r3, r3, #8
 800e856:	2b08      	cmp	r3, #8
 800e858:	d122      	bne.n	800e8a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	f003 0308 	and.w	r3, r3, #8
 800e864:	2b08      	cmp	r3, #8
 800e866:	d11b      	bne.n	800e8a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f06f 0208 	mvn.w	r2, #8
 800e870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2204      	movs	r2, #4
 800e876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	69db      	ldr	r3, [r3, #28]
 800e87e:	f003 0303 	and.w	r3, r3, #3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f8b1 	bl	800e9ee <HAL_TIM_IC_CaptureCallback>
 800e88c:	e005      	b.n	800e89a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f8a3 	bl	800e9da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f8b4 	bl	800ea02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	f003 0310 	and.w	r3, r3, #16
 800e8aa:	2b10      	cmp	r3, #16
 800e8ac:	d122      	bne.n	800e8f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	f003 0310 	and.w	r3, r3, #16
 800e8b8:	2b10      	cmp	r3, #16
 800e8ba:	d11b      	bne.n	800e8f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f06f 0210 	mvn.w	r2, #16
 800e8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2208      	movs	r2, #8
 800e8ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	69db      	ldr	r3, [r3, #28]
 800e8d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d003      	beq.n	800e8e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 f887 	bl	800e9ee <HAL_TIM_IC_CaptureCallback>
 800e8e0:	e005      	b.n	800e8ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f879 	bl	800e9da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 f88a 	bl	800ea02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d10e      	bne.n	800e920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	f003 0301 	and.w	r3, r3, #1
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d107      	bne.n	800e920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f06f 0201 	mvn.w	r2, #1
 800e918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7f2 fd4e 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e92a:	2b80      	cmp	r3, #128	; 0x80
 800e92c:	d10e      	bne.n	800e94c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e938:	2b80      	cmp	r3, #128	; 0x80
 800e93a:	d107      	bne.n	800e94c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 f91a 	bl	800eb80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	691b      	ldr	r3, [r3, #16]
 800e952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e95a:	d10e      	bne.n	800e97a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e966:	2b80      	cmp	r3, #128	; 0x80
 800e968:	d107      	bne.n	800e97a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f90d 	bl	800eb94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e984:	2b40      	cmp	r3, #64	; 0x40
 800e986:	d10e      	bne.n	800e9a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e992:	2b40      	cmp	r3, #64	; 0x40
 800e994:	d107      	bne.n	800e9a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 f838 	bl	800ea16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	f003 0320 	and.w	r3, r3, #32
 800e9b0:	2b20      	cmp	r3, #32
 800e9b2:	d10e      	bne.n	800e9d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	f003 0320 	and.w	r3, r3, #32
 800e9be:	2b20      	cmp	r3, #32
 800e9c0:	d107      	bne.n	800e9d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f06f 0220 	mvn.w	r2, #32
 800e9ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f8cd 	bl	800eb6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e9d2:	bf00      	nop
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9da:	b480      	push	{r7}
 800e9dc:	b083      	sub	sp, #12
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9e2:	bf00      	nop
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e9ee:	b480      	push	{r7}
 800e9f0:	b083      	sub	sp, #12
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e9f6:	bf00      	nop
 800e9f8:	370c      	adds	r7, #12
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr

0800ea02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ea02:	b480      	push	{r7}
 800ea04:	b083      	sub	sp, #12
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ea0a:	bf00      	nop
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr

0800ea16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea16:	b480      	push	{r7}
 800ea18:	b083      	sub	sp, #12
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea1e:	bf00      	nop
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
	...

0800ea2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a40      	ldr	r2, [pc, #256]	; (800eb40 <TIM_Base_SetConfig+0x114>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d013      	beq.n	800ea6c <TIM_Base_SetConfig+0x40>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea4a:	d00f      	beq.n	800ea6c <TIM_Base_SetConfig+0x40>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a3d      	ldr	r2, [pc, #244]	; (800eb44 <TIM_Base_SetConfig+0x118>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d00b      	beq.n	800ea6c <TIM_Base_SetConfig+0x40>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a3c      	ldr	r2, [pc, #240]	; (800eb48 <TIM_Base_SetConfig+0x11c>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d007      	beq.n	800ea6c <TIM_Base_SetConfig+0x40>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a3b      	ldr	r2, [pc, #236]	; (800eb4c <TIM_Base_SetConfig+0x120>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d003      	beq.n	800ea6c <TIM_Base_SetConfig+0x40>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a3a      	ldr	r2, [pc, #232]	; (800eb50 <TIM_Base_SetConfig+0x124>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d108      	bne.n	800ea7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4a2f      	ldr	r2, [pc, #188]	; (800eb40 <TIM_Base_SetConfig+0x114>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d02b      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea8c:	d027      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4a2c      	ldr	r2, [pc, #176]	; (800eb44 <TIM_Base_SetConfig+0x118>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d023      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4a2b      	ldr	r2, [pc, #172]	; (800eb48 <TIM_Base_SetConfig+0x11c>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d01f      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a2a      	ldr	r2, [pc, #168]	; (800eb4c <TIM_Base_SetConfig+0x120>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d01b      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4a29      	ldr	r2, [pc, #164]	; (800eb50 <TIM_Base_SetConfig+0x124>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d017      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a28      	ldr	r2, [pc, #160]	; (800eb54 <TIM_Base_SetConfig+0x128>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d013      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a27      	ldr	r2, [pc, #156]	; (800eb58 <TIM_Base_SetConfig+0x12c>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00f      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a26      	ldr	r2, [pc, #152]	; (800eb5c <TIM_Base_SetConfig+0x130>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d00b      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a25      	ldr	r2, [pc, #148]	; (800eb60 <TIM_Base_SetConfig+0x134>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d007      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a24      	ldr	r2, [pc, #144]	; (800eb64 <TIM_Base_SetConfig+0x138>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d003      	beq.n	800eade <TIM_Base_SetConfig+0xb2>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a23      	ldr	r2, [pc, #140]	; (800eb68 <TIM_Base_SetConfig+0x13c>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d108      	bne.n	800eaf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	68fa      	ldr	r2, [r7, #12]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	4313      	orrs	r3, r2
 800eafc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	689a      	ldr	r2, [r3, #8]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a0a      	ldr	r2, [pc, #40]	; (800eb40 <TIM_Base_SetConfig+0x114>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d003      	beq.n	800eb24 <TIM_Base_SetConfig+0xf8>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	4a0c      	ldr	r2, [pc, #48]	; (800eb50 <TIM_Base_SetConfig+0x124>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d103      	bne.n	800eb2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	691a      	ldr	r2, [r3, #16]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	615a      	str	r2, [r3, #20]
}
 800eb32:	bf00      	nop
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	40010000 	.word	0x40010000
 800eb44:	40000400 	.word	0x40000400
 800eb48:	40000800 	.word	0x40000800
 800eb4c:	40000c00 	.word	0x40000c00
 800eb50:	40010400 	.word	0x40010400
 800eb54:	40014000 	.word	0x40014000
 800eb58:	40014400 	.word	0x40014400
 800eb5c:	40014800 	.word	0x40014800
 800eb60:	40001800 	.word	0x40001800
 800eb64:	40001c00 	.word	0x40001c00
 800eb68:	40002000 	.word	0x40002000

0800eb6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb74:	bf00      	nop
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb88:	bf00      	nop
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e040      	b.n	800ec3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d106      	bne.n	800ebd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f7fc fd18 	bl	800b600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2224      	movs	r2, #36	; 0x24
 800ebd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f022 0201 	bic.w	r2, r2, #1
 800ebe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f8b0 	bl	800ed4c <UART_SetConfig>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d101      	bne.n	800ebf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e022      	b.n	800ec3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d002      	beq.n	800ec04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f000 fb08 	bl	800f214 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	685a      	ldr	r2, [r3, #4]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	689a      	ldr	r2, [r3, #8]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ec22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f042 0201 	orr.w	r2, r2, #1
 800ec32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fb8f 	bl	800f358 <UART_CheckIdleState>
 800ec3a:	4603      	mov	r3, r0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08a      	sub	sp, #40	; 0x28
 800ec48:	af02      	add	r7, sp, #8
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	603b      	str	r3, [r7, #0]
 800ec50:	4613      	mov	r3, r2
 800ec52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec58:	2b20      	cmp	r3, #32
 800ec5a:	d171      	bne.n	800ed40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <HAL_UART_Transmit+0x24>
 800ec62:	88fb      	ldrh	r3, [r7, #6]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d101      	bne.n	800ec6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e06a      	b.n	800ed42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2221      	movs	r2, #33	; 0x21
 800ec78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec7a:	f7fc ff7f 	bl	800bb7c <HAL_GetTick>
 800ec7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	88fa      	ldrh	r2, [r7, #6]
 800ec84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	88fa      	ldrh	r2, [r7, #6]
 800ec8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec98:	d108      	bne.n	800ecac <HAL_UART_Transmit+0x68>
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d104      	bne.n	800ecac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800eca2:	2300      	movs	r3, #0
 800eca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	61bb      	str	r3, [r7, #24]
 800ecaa:	e003      	b.n	800ecb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ecb4:	e02c      	b.n	800ed10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	2180      	movs	r1, #128	; 0x80
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f000 fb80 	bl	800f3c6 <UART_WaitOnFlagUntilTimeout>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d001      	beq.n	800ecd0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800eccc:	2303      	movs	r3, #3
 800ecce:	e038      	b.n	800ed42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10b      	bne.n	800ecee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	461a      	mov	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ece4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	3302      	adds	r3, #2
 800ecea:	61bb      	str	r3, [r7, #24]
 800ecec:	e007      	b.n	800ecfe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	781a      	ldrb	r2, [r3, #0]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	3b01      	subs	r3, #1
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1cc      	bne.n	800ecb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	2200      	movs	r2, #0
 800ed24:	2140      	movs	r1, #64	; 0x40
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f000 fb4d 	bl	800f3c6 <UART_WaitOnFlagUntilTimeout>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e005      	b.n	800ed42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2220      	movs	r2, #32
 800ed3a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	e000      	b.n	800ed42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ed40:	2302      	movs	r3, #2
  }
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3720      	adds	r7, #32
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
	...

0800ed4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b088      	sub	sp, #32
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	689a      	ldr	r2, [r3, #8]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	431a      	orrs	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	431a      	orrs	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	69db      	ldr	r3, [r3, #28]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	4ba6      	ldr	r3, [pc, #664]	; (800f010 <UART_SetConfig+0x2c4>)
 800ed78:	4013      	ands	r3, r2
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	6812      	ldr	r2, [r2, #0]
 800ed7e:	6979      	ldr	r1, [r7, #20]
 800ed80:	430b      	orrs	r3, r1
 800ed82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	68da      	ldr	r2, [r3, #12]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	430a      	orrs	r2, r1
 800ed98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6a1b      	ldr	r3, [r3, #32]
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	4313      	orrs	r3, r2
 800eda8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	430a      	orrs	r2, r1
 800edbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4a94      	ldr	r2, [pc, #592]	; (800f014 <UART_SetConfig+0x2c8>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d120      	bne.n	800ee0a <UART_SetConfig+0xbe>
 800edc8:	4b93      	ldr	r3, [pc, #588]	; (800f018 <UART_SetConfig+0x2cc>)
 800edca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edce:	f003 0303 	and.w	r3, r3, #3
 800edd2:	2b03      	cmp	r3, #3
 800edd4:	d816      	bhi.n	800ee04 <UART_SetConfig+0xb8>
 800edd6:	a201      	add	r2, pc, #4	; (adr r2, 800eddc <UART_SetConfig+0x90>)
 800edd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eddc:	0800eded 	.word	0x0800eded
 800ede0:	0800edf9 	.word	0x0800edf9
 800ede4:	0800edf3 	.word	0x0800edf3
 800ede8:	0800edff 	.word	0x0800edff
 800edec:	2301      	movs	r3, #1
 800edee:	77fb      	strb	r3, [r7, #31]
 800edf0:	e150      	b.n	800f094 <UART_SetConfig+0x348>
 800edf2:	2302      	movs	r3, #2
 800edf4:	77fb      	strb	r3, [r7, #31]
 800edf6:	e14d      	b.n	800f094 <UART_SetConfig+0x348>
 800edf8:	2304      	movs	r3, #4
 800edfa:	77fb      	strb	r3, [r7, #31]
 800edfc:	e14a      	b.n	800f094 <UART_SetConfig+0x348>
 800edfe:	2308      	movs	r3, #8
 800ee00:	77fb      	strb	r3, [r7, #31]
 800ee02:	e147      	b.n	800f094 <UART_SetConfig+0x348>
 800ee04:	2310      	movs	r3, #16
 800ee06:	77fb      	strb	r3, [r7, #31]
 800ee08:	e144      	b.n	800f094 <UART_SetConfig+0x348>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a83      	ldr	r2, [pc, #524]	; (800f01c <UART_SetConfig+0x2d0>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d132      	bne.n	800ee7a <UART_SetConfig+0x12e>
 800ee14:	4b80      	ldr	r3, [pc, #512]	; (800f018 <UART_SetConfig+0x2cc>)
 800ee16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee1a:	f003 030c 	and.w	r3, r3, #12
 800ee1e:	2b0c      	cmp	r3, #12
 800ee20:	d828      	bhi.n	800ee74 <UART_SetConfig+0x128>
 800ee22:	a201      	add	r2, pc, #4	; (adr r2, 800ee28 <UART_SetConfig+0xdc>)
 800ee24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee28:	0800ee5d 	.word	0x0800ee5d
 800ee2c:	0800ee75 	.word	0x0800ee75
 800ee30:	0800ee75 	.word	0x0800ee75
 800ee34:	0800ee75 	.word	0x0800ee75
 800ee38:	0800ee69 	.word	0x0800ee69
 800ee3c:	0800ee75 	.word	0x0800ee75
 800ee40:	0800ee75 	.word	0x0800ee75
 800ee44:	0800ee75 	.word	0x0800ee75
 800ee48:	0800ee63 	.word	0x0800ee63
 800ee4c:	0800ee75 	.word	0x0800ee75
 800ee50:	0800ee75 	.word	0x0800ee75
 800ee54:	0800ee75 	.word	0x0800ee75
 800ee58:	0800ee6f 	.word	0x0800ee6f
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	77fb      	strb	r3, [r7, #31]
 800ee60:	e118      	b.n	800f094 <UART_SetConfig+0x348>
 800ee62:	2302      	movs	r3, #2
 800ee64:	77fb      	strb	r3, [r7, #31]
 800ee66:	e115      	b.n	800f094 <UART_SetConfig+0x348>
 800ee68:	2304      	movs	r3, #4
 800ee6a:	77fb      	strb	r3, [r7, #31]
 800ee6c:	e112      	b.n	800f094 <UART_SetConfig+0x348>
 800ee6e:	2308      	movs	r3, #8
 800ee70:	77fb      	strb	r3, [r7, #31]
 800ee72:	e10f      	b.n	800f094 <UART_SetConfig+0x348>
 800ee74:	2310      	movs	r3, #16
 800ee76:	77fb      	strb	r3, [r7, #31]
 800ee78:	e10c      	b.n	800f094 <UART_SetConfig+0x348>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a68      	ldr	r2, [pc, #416]	; (800f020 <UART_SetConfig+0x2d4>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d120      	bne.n	800eec6 <UART_SetConfig+0x17a>
 800ee84:	4b64      	ldr	r3, [pc, #400]	; (800f018 <UART_SetConfig+0x2cc>)
 800ee86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee8e:	2b30      	cmp	r3, #48	; 0x30
 800ee90:	d013      	beq.n	800eeba <UART_SetConfig+0x16e>
 800ee92:	2b30      	cmp	r3, #48	; 0x30
 800ee94:	d814      	bhi.n	800eec0 <UART_SetConfig+0x174>
 800ee96:	2b20      	cmp	r3, #32
 800ee98:	d009      	beq.n	800eeae <UART_SetConfig+0x162>
 800ee9a:	2b20      	cmp	r3, #32
 800ee9c:	d810      	bhi.n	800eec0 <UART_SetConfig+0x174>
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d002      	beq.n	800eea8 <UART_SetConfig+0x15c>
 800eea2:	2b10      	cmp	r3, #16
 800eea4:	d006      	beq.n	800eeb4 <UART_SetConfig+0x168>
 800eea6:	e00b      	b.n	800eec0 <UART_SetConfig+0x174>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	77fb      	strb	r3, [r7, #31]
 800eeac:	e0f2      	b.n	800f094 <UART_SetConfig+0x348>
 800eeae:	2302      	movs	r3, #2
 800eeb0:	77fb      	strb	r3, [r7, #31]
 800eeb2:	e0ef      	b.n	800f094 <UART_SetConfig+0x348>
 800eeb4:	2304      	movs	r3, #4
 800eeb6:	77fb      	strb	r3, [r7, #31]
 800eeb8:	e0ec      	b.n	800f094 <UART_SetConfig+0x348>
 800eeba:	2308      	movs	r3, #8
 800eebc:	77fb      	strb	r3, [r7, #31]
 800eebe:	e0e9      	b.n	800f094 <UART_SetConfig+0x348>
 800eec0:	2310      	movs	r3, #16
 800eec2:	77fb      	strb	r3, [r7, #31]
 800eec4:	e0e6      	b.n	800f094 <UART_SetConfig+0x348>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4a56      	ldr	r2, [pc, #344]	; (800f024 <UART_SetConfig+0x2d8>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d120      	bne.n	800ef12 <UART_SetConfig+0x1c6>
 800eed0:	4b51      	ldr	r3, [pc, #324]	; (800f018 <UART_SetConfig+0x2cc>)
 800eed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eeda:	2bc0      	cmp	r3, #192	; 0xc0
 800eedc:	d013      	beq.n	800ef06 <UART_SetConfig+0x1ba>
 800eede:	2bc0      	cmp	r3, #192	; 0xc0
 800eee0:	d814      	bhi.n	800ef0c <UART_SetConfig+0x1c0>
 800eee2:	2b80      	cmp	r3, #128	; 0x80
 800eee4:	d009      	beq.n	800eefa <UART_SetConfig+0x1ae>
 800eee6:	2b80      	cmp	r3, #128	; 0x80
 800eee8:	d810      	bhi.n	800ef0c <UART_SetConfig+0x1c0>
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d002      	beq.n	800eef4 <UART_SetConfig+0x1a8>
 800eeee:	2b40      	cmp	r3, #64	; 0x40
 800eef0:	d006      	beq.n	800ef00 <UART_SetConfig+0x1b4>
 800eef2:	e00b      	b.n	800ef0c <UART_SetConfig+0x1c0>
 800eef4:	2300      	movs	r3, #0
 800eef6:	77fb      	strb	r3, [r7, #31]
 800eef8:	e0cc      	b.n	800f094 <UART_SetConfig+0x348>
 800eefa:	2302      	movs	r3, #2
 800eefc:	77fb      	strb	r3, [r7, #31]
 800eefe:	e0c9      	b.n	800f094 <UART_SetConfig+0x348>
 800ef00:	2304      	movs	r3, #4
 800ef02:	77fb      	strb	r3, [r7, #31]
 800ef04:	e0c6      	b.n	800f094 <UART_SetConfig+0x348>
 800ef06:	2308      	movs	r3, #8
 800ef08:	77fb      	strb	r3, [r7, #31]
 800ef0a:	e0c3      	b.n	800f094 <UART_SetConfig+0x348>
 800ef0c:	2310      	movs	r3, #16
 800ef0e:	77fb      	strb	r3, [r7, #31]
 800ef10:	e0c0      	b.n	800f094 <UART_SetConfig+0x348>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a44      	ldr	r2, [pc, #272]	; (800f028 <UART_SetConfig+0x2dc>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d125      	bne.n	800ef68 <UART_SetConfig+0x21c>
 800ef1c:	4b3e      	ldr	r3, [pc, #248]	; (800f018 <UART_SetConfig+0x2cc>)
 800ef1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef2a:	d017      	beq.n	800ef5c <UART_SetConfig+0x210>
 800ef2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef30:	d817      	bhi.n	800ef62 <UART_SetConfig+0x216>
 800ef32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef36:	d00b      	beq.n	800ef50 <UART_SetConfig+0x204>
 800ef38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef3c:	d811      	bhi.n	800ef62 <UART_SetConfig+0x216>
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <UART_SetConfig+0x1fe>
 800ef42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef46:	d006      	beq.n	800ef56 <UART_SetConfig+0x20a>
 800ef48:	e00b      	b.n	800ef62 <UART_SetConfig+0x216>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	77fb      	strb	r3, [r7, #31]
 800ef4e:	e0a1      	b.n	800f094 <UART_SetConfig+0x348>
 800ef50:	2302      	movs	r3, #2
 800ef52:	77fb      	strb	r3, [r7, #31]
 800ef54:	e09e      	b.n	800f094 <UART_SetConfig+0x348>
 800ef56:	2304      	movs	r3, #4
 800ef58:	77fb      	strb	r3, [r7, #31]
 800ef5a:	e09b      	b.n	800f094 <UART_SetConfig+0x348>
 800ef5c:	2308      	movs	r3, #8
 800ef5e:	77fb      	strb	r3, [r7, #31]
 800ef60:	e098      	b.n	800f094 <UART_SetConfig+0x348>
 800ef62:	2310      	movs	r3, #16
 800ef64:	77fb      	strb	r3, [r7, #31]
 800ef66:	e095      	b.n	800f094 <UART_SetConfig+0x348>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a2f      	ldr	r2, [pc, #188]	; (800f02c <UART_SetConfig+0x2e0>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d125      	bne.n	800efbe <UART_SetConfig+0x272>
 800ef72:	4b29      	ldr	r3, [pc, #164]	; (800f018 <UART_SetConfig+0x2cc>)
 800ef74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ef7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef80:	d017      	beq.n	800efb2 <UART_SetConfig+0x266>
 800ef82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef86:	d817      	bhi.n	800efb8 <UART_SetConfig+0x26c>
 800ef88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef8c:	d00b      	beq.n	800efa6 <UART_SetConfig+0x25a>
 800ef8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef92:	d811      	bhi.n	800efb8 <UART_SetConfig+0x26c>
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d003      	beq.n	800efa0 <UART_SetConfig+0x254>
 800ef98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef9c:	d006      	beq.n	800efac <UART_SetConfig+0x260>
 800ef9e:	e00b      	b.n	800efb8 <UART_SetConfig+0x26c>
 800efa0:	2301      	movs	r3, #1
 800efa2:	77fb      	strb	r3, [r7, #31]
 800efa4:	e076      	b.n	800f094 <UART_SetConfig+0x348>
 800efa6:	2302      	movs	r3, #2
 800efa8:	77fb      	strb	r3, [r7, #31]
 800efaa:	e073      	b.n	800f094 <UART_SetConfig+0x348>
 800efac:	2304      	movs	r3, #4
 800efae:	77fb      	strb	r3, [r7, #31]
 800efb0:	e070      	b.n	800f094 <UART_SetConfig+0x348>
 800efb2:	2308      	movs	r3, #8
 800efb4:	77fb      	strb	r3, [r7, #31]
 800efb6:	e06d      	b.n	800f094 <UART_SetConfig+0x348>
 800efb8:	2310      	movs	r3, #16
 800efba:	77fb      	strb	r3, [r7, #31]
 800efbc:	e06a      	b.n	800f094 <UART_SetConfig+0x348>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4a1b      	ldr	r2, [pc, #108]	; (800f030 <UART_SetConfig+0x2e4>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d138      	bne.n	800f03a <UART_SetConfig+0x2ee>
 800efc8:	4b13      	ldr	r3, [pc, #76]	; (800f018 <UART_SetConfig+0x2cc>)
 800efca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800efd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efd6:	d017      	beq.n	800f008 <UART_SetConfig+0x2bc>
 800efd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efdc:	d82a      	bhi.n	800f034 <UART_SetConfig+0x2e8>
 800efde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efe2:	d00b      	beq.n	800effc <UART_SetConfig+0x2b0>
 800efe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efe8:	d824      	bhi.n	800f034 <UART_SetConfig+0x2e8>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d003      	beq.n	800eff6 <UART_SetConfig+0x2aa>
 800efee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eff2:	d006      	beq.n	800f002 <UART_SetConfig+0x2b6>
 800eff4:	e01e      	b.n	800f034 <UART_SetConfig+0x2e8>
 800eff6:	2300      	movs	r3, #0
 800eff8:	77fb      	strb	r3, [r7, #31]
 800effa:	e04b      	b.n	800f094 <UART_SetConfig+0x348>
 800effc:	2302      	movs	r3, #2
 800effe:	77fb      	strb	r3, [r7, #31]
 800f000:	e048      	b.n	800f094 <UART_SetConfig+0x348>
 800f002:	2304      	movs	r3, #4
 800f004:	77fb      	strb	r3, [r7, #31]
 800f006:	e045      	b.n	800f094 <UART_SetConfig+0x348>
 800f008:	2308      	movs	r3, #8
 800f00a:	77fb      	strb	r3, [r7, #31]
 800f00c:	e042      	b.n	800f094 <UART_SetConfig+0x348>
 800f00e:	bf00      	nop
 800f010:	efff69f3 	.word	0xefff69f3
 800f014:	40011000 	.word	0x40011000
 800f018:	40023800 	.word	0x40023800
 800f01c:	40004400 	.word	0x40004400
 800f020:	40004800 	.word	0x40004800
 800f024:	40004c00 	.word	0x40004c00
 800f028:	40005000 	.word	0x40005000
 800f02c:	40011400 	.word	0x40011400
 800f030:	40007800 	.word	0x40007800
 800f034:	2310      	movs	r3, #16
 800f036:	77fb      	strb	r3, [r7, #31]
 800f038:	e02c      	b.n	800f094 <UART_SetConfig+0x348>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a72      	ldr	r2, [pc, #456]	; (800f208 <UART_SetConfig+0x4bc>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d125      	bne.n	800f090 <UART_SetConfig+0x344>
 800f044:	4b71      	ldr	r3, [pc, #452]	; (800f20c <UART_SetConfig+0x4c0>)
 800f046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f04a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f04e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f052:	d017      	beq.n	800f084 <UART_SetConfig+0x338>
 800f054:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f058:	d817      	bhi.n	800f08a <UART_SetConfig+0x33e>
 800f05a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f05e:	d00b      	beq.n	800f078 <UART_SetConfig+0x32c>
 800f060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f064:	d811      	bhi.n	800f08a <UART_SetConfig+0x33e>
 800f066:	2b00      	cmp	r3, #0
 800f068:	d003      	beq.n	800f072 <UART_SetConfig+0x326>
 800f06a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f06e:	d006      	beq.n	800f07e <UART_SetConfig+0x332>
 800f070:	e00b      	b.n	800f08a <UART_SetConfig+0x33e>
 800f072:	2300      	movs	r3, #0
 800f074:	77fb      	strb	r3, [r7, #31]
 800f076:	e00d      	b.n	800f094 <UART_SetConfig+0x348>
 800f078:	2302      	movs	r3, #2
 800f07a:	77fb      	strb	r3, [r7, #31]
 800f07c:	e00a      	b.n	800f094 <UART_SetConfig+0x348>
 800f07e:	2304      	movs	r3, #4
 800f080:	77fb      	strb	r3, [r7, #31]
 800f082:	e007      	b.n	800f094 <UART_SetConfig+0x348>
 800f084:	2308      	movs	r3, #8
 800f086:	77fb      	strb	r3, [r7, #31]
 800f088:	e004      	b.n	800f094 <UART_SetConfig+0x348>
 800f08a:	2310      	movs	r3, #16
 800f08c:	77fb      	strb	r3, [r7, #31]
 800f08e:	e001      	b.n	800f094 <UART_SetConfig+0x348>
 800f090:	2310      	movs	r3, #16
 800f092:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	69db      	ldr	r3, [r3, #28]
 800f098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f09c:	d15b      	bne.n	800f156 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f09e:	7ffb      	ldrb	r3, [r7, #31]
 800f0a0:	2b08      	cmp	r3, #8
 800f0a2:	d828      	bhi.n	800f0f6 <UART_SetConfig+0x3aa>
 800f0a4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ac <UART_SetConfig+0x360>)
 800f0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0aa:	bf00      	nop
 800f0ac:	0800f0d1 	.word	0x0800f0d1
 800f0b0:	0800f0d9 	.word	0x0800f0d9
 800f0b4:	0800f0e1 	.word	0x0800f0e1
 800f0b8:	0800f0f7 	.word	0x0800f0f7
 800f0bc:	0800f0e7 	.word	0x0800f0e7
 800f0c0:	0800f0f7 	.word	0x0800f0f7
 800f0c4:	0800f0f7 	.word	0x0800f0f7
 800f0c8:	0800f0f7 	.word	0x0800f0f7
 800f0cc:	0800f0ef 	.word	0x0800f0ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0d0:	f7fe fdc0 	bl	800dc54 <HAL_RCC_GetPCLK1Freq>
 800f0d4:	61b8      	str	r0, [r7, #24]
        break;
 800f0d6:	e013      	b.n	800f100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0d8:	f7fe fdd0 	bl	800dc7c <HAL_RCC_GetPCLK2Freq>
 800f0dc:	61b8      	str	r0, [r7, #24]
        break;
 800f0de:	e00f      	b.n	800f100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0e0:	4b4b      	ldr	r3, [pc, #300]	; (800f210 <UART_SetConfig+0x4c4>)
 800f0e2:	61bb      	str	r3, [r7, #24]
        break;
 800f0e4:	e00c      	b.n	800f100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0e6:	f7fe fca3 	bl	800da30 <HAL_RCC_GetSysClockFreq>
 800f0ea:	61b8      	str	r0, [r7, #24]
        break;
 800f0ec:	e008      	b.n	800f100 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0f2:	61bb      	str	r3, [r7, #24]
        break;
 800f0f4:	e004      	b.n	800f100 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	77bb      	strb	r3, [r7, #30]
        break;
 800f0fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d074      	beq.n	800f1f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	005a      	lsls	r2, r3, #1
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	085b      	lsrs	r3, r3, #1
 800f110:	441a      	add	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	fbb2 f3f3 	udiv	r3, r2, r3
 800f11a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	2b0f      	cmp	r3, #15
 800f120:	d916      	bls.n	800f150 <UART_SetConfig+0x404>
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f128:	d212      	bcs.n	800f150 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	f023 030f 	bic.w	r3, r3, #15
 800f132:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	085b      	lsrs	r3, r3, #1
 800f138:	b29b      	uxth	r3, r3
 800f13a:	f003 0307 	and.w	r3, r3, #7
 800f13e:	b29a      	uxth	r2, r3
 800f140:	89fb      	ldrh	r3, [r7, #14]
 800f142:	4313      	orrs	r3, r2
 800f144:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	89fa      	ldrh	r2, [r7, #14]
 800f14c:	60da      	str	r2, [r3, #12]
 800f14e:	e04f      	b.n	800f1f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	77bb      	strb	r3, [r7, #30]
 800f154:	e04c      	b.n	800f1f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f156:	7ffb      	ldrb	r3, [r7, #31]
 800f158:	2b08      	cmp	r3, #8
 800f15a:	d828      	bhi.n	800f1ae <UART_SetConfig+0x462>
 800f15c:	a201      	add	r2, pc, #4	; (adr r2, 800f164 <UART_SetConfig+0x418>)
 800f15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f162:	bf00      	nop
 800f164:	0800f189 	.word	0x0800f189
 800f168:	0800f191 	.word	0x0800f191
 800f16c:	0800f199 	.word	0x0800f199
 800f170:	0800f1af 	.word	0x0800f1af
 800f174:	0800f19f 	.word	0x0800f19f
 800f178:	0800f1af 	.word	0x0800f1af
 800f17c:	0800f1af 	.word	0x0800f1af
 800f180:	0800f1af 	.word	0x0800f1af
 800f184:	0800f1a7 	.word	0x0800f1a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f188:	f7fe fd64 	bl	800dc54 <HAL_RCC_GetPCLK1Freq>
 800f18c:	61b8      	str	r0, [r7, #24]
        break;
 800f18e:	e013      	b.n	800f1b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f190:	f7fe fd74 	bl	800dc7c <HAL_RCC_GetPCLK2Freq>
 800f194:	61b8      	str	r0, [r7, #24]
        break;
 800f196:	e00f      	b.n	800f1b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f198:	4b1d      	ldr	r3, [pc, #116]	; (800f210 <UART_SetConfig+0x4c4>)
 800f19a:	61bb      	str	r3, [r7, #24]
        break;
 800f19c:	e00c      	b.n	800f1b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f19e:	f7fe fc47 	bl	800da30 <HAL_RCC_GetSysClockFreq>
 800f1a2:	61b8      	str	r0, [r7, #24]
        break;
 800f1a4:	e008      	b.n	800f1b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1aa:	61bb      	str	r3, [r7, #24]
        break;
 800f1ac:	e004      	b.n	800f1b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	77bb      	strb	r3, [r7, #30]
        break;
 800f1b6:	bf00      	nop
    }

    if (pclk != 0U)
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d018      	beq.n	800f1f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	085a      	lsrs	r2, r3, #1
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	441a      	add	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	2b0f      	cmp	r3, #15
 800f1d6:	d909      	bls.n	800f1ec <UART_SetConfig+0x4a0>
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1de:	d205      	bcs.n	800f1ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	60da      	str	r2, [r3, #12]
 800f1ea:	e001      	b.n	800f1f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800f1fc:	7fbb      	ldrb	r3, [r7, #30]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3720      	adds	r7, #32
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	40007c00 	.word	0x40007c00
 800f20c:	40023800 	.word	0x40023800
 800f210:	00f42400 	.word	0x00f42400

0800f214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f220:	f003 0301 	and.w	r3, r3, #1
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00a      	beq.n	800f23e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	430a      	orrs	r2, r1
 800f23c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f242:	f003 0302 	and.w	r3, r3, #2
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00a      	beq.n	800f260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	430a      	orrs	r2, r1
 800f25e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	f003 0304 	and.w	r3, r3, #4
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00a      	beq.n	800f282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	430a      	orrs	r2, r1
 800f280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f286:	f003 0308 	and.w	r3, r3, #8
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00a      	beq.n	800f2a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	430a      	orrs	r2, r1
 800f2a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a8:	f003 0310 	and.w	r3, r3, #16
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00a      	beq.n	800f2c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	430a      	orrs	r2, r1
 800f2c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ca:	f003 0320 	and.w	r3, r3, #32
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d00a      	beq.n	800f2e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	430a      	orrs	r2, r1
 800f2e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d01a      	beq.n	800f32a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	430a      	orrs	r2, r1
 800f308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f312:	d10a      	bne.n	800f32a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	430a      	orrs	r2, r1
 800f328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00a      	beq.n	800f34c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	430a      	orrs	r2, r1
 800f34a:	605a      	str	r2, [r3, #4]
  }
}
 800f34c:	bf00      	nop
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f368:	f7fc fc08 	bl	800bb7c <HAL_GetTick>
 800f36c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b08      	cmp	r3, #8
 800f37a:	d10e      	bne.n	800f39a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f37c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f81b 	bl	800f3c6 <UART_WaitOnFlagUntilTimeout>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f396:	2303      	movs	r3, #3
 800f398:	e011      	b.n	800f3be <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2220      	movs	r2, #32
 800f39e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2220      	movs	r2, #32
 800f3a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b09c      	sub	sp, #112	; 0x70
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	60f8      	str	r0, [r7, #12]
 800f3ce:	60b9      	str	r1, [r7, #8]
 800f3d0:	603b      	str	r3, [r7, #0]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3d6:	e0a7      	b.n	800f528 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3de:	f000 80a3 	beq.w	800f528 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3e2:	f7fc fbcb 	bl	800bb7c <HAL_GetTick>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	1ad3      	subs	r3, r2, r3
 800f3ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d302      	bcc.n	800f3f8 <UART_WaitOnFlagUntilTimeout+0x32>
 800f3f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d13f      	bne.n	800f478 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f400:	e853 3f00 	ldrex	r3, [r3]
 800f404:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f40c:	667b      	str	r3, [r7, #100]	; 0x64
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f416:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f418:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f41c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f41e:	e841 2300 	strex	r3, r2, [r1]
 800f422:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e6      	bne.n	800f3f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3308      	adds	r3, #8
 800f430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43c:	f023 0301 	bic.w	r3, r3, #1
 800f440:	663b      	str	r3, [r7, #96]	; 0x60
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	3308      	adds	r3, #8
 800f448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f44a:	64ba      	str	r2, [r7, #72]	; 0x48
 800f44c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f452:	e841 2300 	strex	r3, r2, [r1]
 800f456:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e5      	bne.n	800f42a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2220      	movs	r2, #32
 800f462:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2220      	movs	r2, #32
 800f468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800f474:	2303      	movs	r3, #3
 800f476:	e068      	b.n	800f54a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f003 0304 	and.w	r3, r3, #4
 800f482:	2b00      	cmp	r3, #0
 800f484:	d050      	beq.n	800f528 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	69db      	ldr	r3, [r3, #28]
 800f48c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f494:	d148      	bne.n	800f528 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f49e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a8:	e853 3f00 	ldrex	r3, [r3]
 800f4ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4be:	637b      	str	r3, [r7, #52]	; 0x34
 800f4c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4c6:	e841 2300 	strex	r3, r2, [r1]
 800f4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1e6      	bne.n	800f4a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3308      	adds	r3, #8
 800f4d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	e853 3f00 	ldrex	r3, [r3]
 800f4e0:	613b      	str	r3, [r7, #16]
   return(result);
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	f023 0301 	bic.w	r3, r3, #1
 800f4e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4f2:	623a      	str	r2, [r7, #32]
 800f4f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f6:	69f9      	ldr	r1, [r7, #28]
 800f4f8:	6a3a      	ldr	r2, [r7, #32]
 800f4fa:	e841 2300 	strex	r3, r2, [r1]
 800f4fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1e5      	bne.n	800f4d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2220      	movs	r2, #32
 800f50a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2220      	movs	r2, #32
 800f510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2220      	movs	r2, #32
 800f518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800f524:	2303      	movs	r3, #3
 800f526:	e010      	b.n	800f54a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	69da      	ldr	r2, [r3, #28]
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	4013      	ands	r3, r2
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	429a      	cmp	r2, r3
 800f536:	bf0c      	ite	eq
 800f538:	2301      	moveq	r3, #1
 800f53a:	2300      	movne	r3, #0
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	461a      	mov	r2, r3
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	429a      	cmp	r2, r3
 800f544:	f43f af48 	beq.w	800f3d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3770      	adds	r7, #112	; 0x70
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f552:	b480      	push	{r7}
 800f554:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f556:	bf00      	nop
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f566:	f3ef 8305 	mrs	r3, IPSR
 800f56a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f56c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d10f      	bne.n	800f592 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f572:	f3ef 8310 	mrs	r3, PRIMASK
 800f576:	607b      	str	r3, [r7, #4]
  return(result);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d105      	bne.n	800f58a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f57e:	f3ef 8311 	mrs	r3, BASEPRI
 800f582:	603b      	str	r3, [r7, #0]
  return(result);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d007      	beq.n	800f59a <osKernelInitialize+0x3a>
 800f58a:	4b0e      	ldr	r3, [pc, #56]	; (800f5c4 <osKernelInitialize+0x64>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d103      	bne.n	800f59a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f592:	f06f 0305 	mvn.w	r3, #5
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	e00c      	b.n	800f5b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f59a:	4b0a      	ldr	r3, [pc, #40]	; (800f5c4 <osKernelInitialize+0x64>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d105      	bne.n	800f5ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f5a2:	4b08      	ldr	r3, [pc, #32]	; (800f5c4 <osKernelInitialize+0x64>)
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	60fb      	str	r3, [r7, #12]
 800f5ac:	e002      	b.n	800f5b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3714      	adds	r7, #20
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	200037d0 	.word	0x200037d0

0800f5c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5ce:	f3ef 8305 	mrs	r3, IPSR
 800f5d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10f      	bne.n	800f5fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5da:	f3ef 8310 	mrs	r3, PRIMASK
 800f5de:	607b      	str	r3, [r7, #4]
  return(result);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d105      	bne.n	800f5f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5e6:	f3ef 8311 	mrs	r3, BASEPRI
 800f5ea:	603b      	str	r3, [r7, #0]
  return(result);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d007      	beq.n	800f602 <osKernelStart+0x3a>
 800f5f2:	4b0f      	ldr	r3, [pc, #60]	; (800f630 <osKernelStart+0x68>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d103      	bne.n	800f602 <osKernelStart+0x3a>
    stat = osErrorISR;
 800f5fa:	f06f 0305 	mvn.w	r3, #5
 800f5fe:	60fb      	str	r3, [r7, #12]
 800f600:	e010      	b.n	800f624 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f602:	4b0b      	ldr	r3, [pc, #44]	; (800f630 <osKernelStart+0x68>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d109      	bne.n	800f61e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f60a:	f7ff ffa2 	bl	800f552 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f60e:	4b08      	ldr	r3, [pc, #32]	; (800f630 <osKernelStart+0x68>)
 800f610:	2202      	movs	r2, #2
 800f612:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f614:	f001 f882 	bl	801071c <vTaskStartScheduler>
      stat = osOK;
 800f618:	2300      	movs	r3, #0
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	e002      	b.n	800f624 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f61e:	f04f 33ff 	mov.w	r3, #4294967295
 800f622:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f624:	68fb      	ldr	r3, [r7, #12]
}
 800f626:	4618      	mov	r0, r3
 800f628:	3710      	adds	r7, #16
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	200037d0 	.word	0x200037d0

0800f634 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f63a:	f3ef 8305 	mrs	r3, IPSR
 800f63e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f640:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f642:	2b00      	cmp	r3, #0
 800f644:	d10f      	bne.n	800f666 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f646:	f3ef 8310 	mrs	r3, PRIMASK
 800f64a:	607b      	str	r3, [r7, #4]
  return(result);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d105      	bne.n	800f65e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f652:	f3ef 8311 	mrs	r3, BASEPRI
 800f656:	603b      	str	r3, [r7, #0]
  return(result);
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d007      	beq.n	800f66e <osKernelGetTickCount+0x3a>
 800f65e:	4b08      	ldr	r3, [pc, #32]	; (800f680 <osKernelGetTickCount+0x4c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b02      	cmp	r3, #2
 800f664:	d103      	bne.n	800f66e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800f666:	f001 f981 	bl	801096c <xTaskGetTickCountFromISR>
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	e002      	b.n	800f674 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800f66e:	f001 f96d 	bl	801094c <xTaskGetTickCount>
 800f672:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800f674:	68fb      	ldr	r3, [r7, #12]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	200037d0 	.word	0x200037d0

0800f684 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800f688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
	...

0800f698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f698:	b580      	push	{r7, lr}
 800f69a:	b090      	sub	sp, #64	; 0x40
 800f69c:	af04      	add	r7, sp, #16
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6a8:	f3ef 8305 	mrs	r3, IPSR
 800f6ac:	61fb      	str	r3, [r7, #28]
  return(result);
 800f6ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f040 808f 	bne.w	800f7d4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6b6:	f3ef 8310 	mrs	r3, PRIMASK
 800f6ba:	61bb      	str	r3, [r7, #24]
  return(result);
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d105      	bne.n	800f6ce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6c2:	f3ef 8311 	mrs	r3, BASEPRI
 800f6c6:	617b      	str	r3, [r7, #20]
  return(result);
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d003      	beq.n	800f6d6 <osThreadNew+0x3e>
 800f6ce:	4b44      	ldr	r3, [pc, #272]	; (800f7e0 <osThreadNew+0x148>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d07e      	beq.n	800f7d4 <osThreadNew+0x13c>
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d07b      	beq.n	800f7d4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f6dc:	2380      	movs	r3, #128	; 0x80
 800f6de:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f6e0:	2318      	movs	r3, #24
 800f6e2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d045      	beq.n	800f780 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d002      	beq.n	800f702 <osThreadNew+0x6a>
        name = attr->name;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	699b      	ldr	r3, [r3, #24]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d002      	beq.n	800f710 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	2b00      	cmp	r3, #0
 800f714:	d008      	beq.n	800f728 <osThreadNew+0x90>
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	2b38      	cmp	r3, #56	; 0x38
 800f71a:	d805      	bhi.n	800f728 <osThreadNew+0x90>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	f003 0301 	and.w	r3, r3, #1
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <osThreadNew+0x94>
        return (NULL);
 800f728:	2300      	movs	r3, #0
 800f72a:	e054      	b.n	800f7d6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	695b      	ldr	r3, [r3, #20]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d003      	beq.n	800f73c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	695b      	ldr	r3, [r3, #20]
 800f738:	089b      	lsrs	r3, r3, #2
 800f73a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d00e      	beq.n	800f762 <osThreadNew+0xca>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	2b5b      	cmp	r3, #91	; 0x5b
 800f74a:	d90a      	bls.n	800f762 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f750:	2b00      	cmp	r3, #0
 800f752:	d006      	beq.n	800f762 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	695b      	ldr	r3, [r3, #20]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <osThreadNew+0xca>
        mem = 1;
 800f75c:	2301      	movs	r3, #1
 800f75e:	623b      	str	r3, [r7, #32]
 800f760:	e010      	b.n	800f784 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d10c      	bne.n	800f784 <osThreadNew+0xec>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d108      	bne.n	800f784 <osThreadNew+0xec>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	691b      	ldr	r3, [r3, #16]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d104      	bne.n	800f784 <osThreadNew+0xec>
          mem = 0;
 800f77a:	2300      	movs	r3, #0
 800f77c:	623b      	str	r3, [r7, #32]
 800f77e:	e001      	b.n	800f784 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f780:	2300      	movs	r3, #0
 800f782:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f784:	6a3b      	ldr	r3, [r7, #32]
 800f786:	2b01      	cmp	r3, #1
 800f788:	d110      	bne.n	800f7ac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f792:	9202      	str	r2, [sp, #8]
 800f794:	9301      	str	r3, [sp, #4]
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f79e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f000 fe11 	bl	80103c8 <xTaskCreateStatic>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	613b      	str	r3, [r7, #16]
 800f7aa:	e013      	b.n	800f7d4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f7ac:	6a3b      	ldr	r3, [r7, #32]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d110      	bne.n	800f7d4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	f107 0310 	add.w	r3, r7, #16
 800f7ba:	9301      	str	r3, [sp, #4]
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f000 fe62 	bl	801048e <xTaskCreate>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d001      	beq.n	800f7d4 <osThreadNew+0x13c>
          hTask = NULL;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f7d4:	693b      	ldr	r3, [r7, #16]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3730      	adds	r7, #48	; 0x30
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	200037d0 	.word	0x200037d0

0800f7e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	4a07      	ldr	r2, [pc, #28]	; (800f810 <vApplicationGetIdleTaskMemory+0x2c>)
 800f7f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	4a06      	ldr	r2, [pc, #24]	; (800f814 <vApplicationGetIdleTaskMemory+0x30>)
 800f7fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2280      	movs	r2, #128	; 0x80
 800f800:	601a      	str	r2, [r3, #0]
}
 800f802:	bf00      	nop
 800f804:	3714      	adds	r7, #20
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	200037d4 	.word	0x200037d4
 800f814:	20003830 	.word	0x20003830

0800f818 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4a07      	ldr	r2, [pc, #28]	; (800f844 <vApplicationGetTimerTaskMemory+0x2c>)
 800f828:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	4a06      	ldr	r2, [pc, #24]	; (800f848 <vApplicationGetTimerTaskMemory+0x30>)
 800f82e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f836:	601a      	str	r2, [r3, #0]
}
 800f838:	bf00      	nop
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	20003a30 	.word	0x20003a30
 800f848:	20003a8c 	.word	0x20003a8c

0800f84c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f103 0208 	add.w	r2, r3, #8
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f04f 32ff 	mov.w	r2, #4294967295
 800f864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f103 0208 	add.w	r2, r3, #8
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f103 0208 	add.w	r2, r3, #8
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f880:	bf00      	nop
 800f882:	370c      	adds	r7, #12
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f89a:	bf00      	nop
 800f89c:	370c      	adds	r7, #12
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr

0800f8a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f8a6:	b480      	push	{r7}
 800f8a8:	b085      	sub	sp, #20
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
 800f8ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	689a      	ldr	r2, [r3, #8]
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	683a      	ldr	r2, [r7, #0]
 800f8ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	683a      	ldr	r2, [r7, #0]
 800f8d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	687a      	ldr	r2, [r7, #4]
 800f8d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	1c5a      	adds	r2, r3, #1
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	601a      	str	r2, [r3, #0]
}
 800f8e2:	bf00      	nop
 800f8e4:	3714      	adds	r7, #20
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr

0800f8ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f8ee:	b480      	push	{r7}
 800f8f0:	b085      	sub	sp, #20
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
 800f8f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f904:	d103      	bne.n	800f90e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	e00c      	b.n	800f928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	3308      	adds	r3, #8
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	e002      	b.n	800f91c <vListInsert+0x2e>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	60fb      	str	r3, [r7, #12]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	429a      	cmp	r2, r3
 800f926:	d2f6      	bcs.n	800f916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	685a      	ldr	r2, [r3, #4]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	683a      	ldr	r2, [r7, #0]
 800f936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	601a      	str	r2, [r3, #0]
}
 800f954:	bf00      	nop
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	691b      	ldr	r3, [r3, #16]
 800f96c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	6892      	ldr	r2, [r2, #8]
 800f976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	6852      	ldr	r2, [r2, #4]
 800f980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d103      	bne.n	800f994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2200      	movs	r2, #0
 800f998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	1e5a      	subs	r2, r3, #1
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3714      	adds	r7, #20
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d10c      	bne.n	800f9e2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9cc:	b672      	cpsid	i
 800f9ce:	f383 8811 	msr	BASEPRI, r3
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	b662      	cpsie	i
 800f9dc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f9de:	bf00      	nop
 800f9e0:	e7fe      	b.n	800f9e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f9e2:	f002 f85b 	bl	8011a9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ee:	68f9      	ldr	r1, [r7, #12]
 800f9f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f9f2:	fb01 f303 	mul.w	r3, r1, r3
 800f9f6:	441a      	add	r2, r3
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa12:	3b01      	subs	r3, #1
 800fa14:	68f9      	ldr	r1, [r7, #12]
 800fa16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fa18:	fb01 f303 	mul.w	r3, r1, r3
 800fa1c:	441a      	add	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	22ff      	movs	r2, #255	; 0xff
 800fa26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	22ff      	movs	r2, #255	; 0xff
 800fa2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d114      	bne.n	800fa62 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	691b      	ldr	r3, [r3, #16]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01a      	beq.n	800fa76 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	3310      	adds	r3, #16
 800fa44:	4618      	mov	r0, r3
 800fa46:	f001 f913 	bl	8010c70 <xTaskRemoveFromEventList>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d012      	beq.n	800fa76 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fa50:	4b0c      	ldr	r3, [pc, #48]	; (800fa84 <xQueueGenericReset+0xd0>)
 800fa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa56:	601a      	str	r2, [r3, #0]
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	f3bf 8f6f 	isb	sy
 800fa60:	e009      	b.n	800fa76 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	3310      	adds	r3, #16
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7ff fef0 	bl	800f84c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	3324      	adds	r3, #36	; 0x24
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff feeb 	bl	800f84c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fa76:	f002 f845 	bl	8011b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fa7a:	2301      	movs	r3, #1
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3710      	adds	r7, #16
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	e000ed04 	.word	0xe000ed04

0800fa88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b08e      	sub	sp, #56	; 0x38
 800fa8c:	af02      	add	r7, sp, #8
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
 800fa94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10c      	bne.n	800fab6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa0:	b672      	cpsid	i
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	b662      	cpsie	i
 800fab0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fab2:	bf00      	nop
 800fab4:	e7fe      	b.n	800fab4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10c      	bne.n	800fad6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	b672      	cpsid	i
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	b662      	cpsie	i
 800fad0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fad2:	bf00      	nop
 800fad4:	e7fe      	b.n	800fad4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <xQueueGenericCreateStatic+0x5a>
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <xQueueGenericCreateStatic+0x5e>
 800fae2:	2301      	movs	r3, #1
 800fae4:	e000      	b.n	800fae8 <xQueueGenericCreateStatic+0x60>
 800fae6:	2300      	movs	r3, #0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d10c      	bne.n	800fb06 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800faec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf0:	b672      	cpsid	i
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	b662      	cpsie	i
 800fb00:	623b      	str	r3, [r7, #32]
}
 800fb02:	bf00      	nop
 800fb04:	e7fe      	b.n	800fb04 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d102      	bne.n	800fb12 <xQueueGenericCreateStatic+0x8a>
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d101      	bne.n	800fb16 <xQueueGenericCreateStatic+0x8e>
 800fb12:	2301      	movs	r3, #1
 800fb14:	e000      	b.n	800fb18 <xQueueGenericCreateStatic+0x90>
 800fb16:	2300      	movs	r3, #0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10c      	bne.n	800fb36 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	b672      	cpsid	i
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	b662      	cpsie	i
 800fb30:	61fb      	str	r3, [r7, #28]
}
 800fb32:	bf00      	nop
 800fb34:	e7fe      	b.n	800fb34 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fb36:	2350      	movs	r3, #80	; 0x50
 800fb38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	2b50      	cmp	r3, #80	; 0x50
 800fb3e:	d00c      	beq.n	800fb5a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	b672      	cpsid	i
 800fb46:	f383 8811 	msr	BASEPRI, r3
 800fb4a:	f3bf 8f6f 	isb	sy
 800fb4e:	f3bf 8f4f 	dsb	sy
 800fb52:	b662      	cpsie	i
 800fb54:	61bb      	str	r3, [r7, #24]
}
 800fb56:	bf00      	nop
 800fb58:	e7fe      	b.n	800fb58 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fb5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00d      	beq.n	800fb82 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	2201      	movs	r2, #1
 800fb6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fb6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb74:	9300      	str	r3, [sp, #0]
 800fb76:	4613      	mov	r3, r2
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	68b9      	ldr	r1, [r7, #8]
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f000 f805 	bl	800fb8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3730      	adds	r7, #48	; 0x30
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
 800fb98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d103      	bne.n	800fba8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	69ba      	ldr	r2, [r7, #24]
 800fba4:	601a      	str	r2, [r3, #0]
 800fba6:	e002      	b.n	800fbae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fbba:	2101      	movs	r1, #1
 800fbbc:	69b8      	ldr	r0, [r7, #24]
 800fbbe:	f7ff fef9 	bl	800f9b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	78fa      	ldrb	r2, [r7, #3]
 800fbc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
	...

0800fbd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b08e      	sub	sp, #56	; 0x38
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
 800fbe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d10c      	bne.n	800fc0a <xQueueGenericSend+0x36>
	__asm volatile
 800fbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf4:	b672      	cpsid	i
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	b662      	cpsie	i
 800fc04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fc06:	bf00      	nop
 800fc08:	e7fe      	b.n	800fc08 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d103      	bne.n	800fc18 <xQueueGenericSend+0x44>
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d101      	bne.n	800fc1c <xQueueGenericSend+0x48>
 800fc18:	2301      	movs	r3, #1
 800fc1a:	e000      	b.n	800fc1e <xQueueGenericSend+0x4a>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d10c      	bne.n	800fc3c <xQueueGenericSend+0x68>
	__asm volatile
 800fc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc26:	b672      	cpsid	i
 800fc28:	f383 8811 	msr	BASEPRI, r3
 800fc2c:	f3bf 8f6f 	isb	sy
 800fc30:	f3bf 8f4f 	dsb	sy
 800fc34:	b662      	cpsie	i
 800fc36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc38:	bf00      	nop
 800fc3a:	e7fe      	b.n	800fc3a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2b02      	cmp	r3, #2
 800fc40:	d103      	bne.n	800fc4a <xQueueGenericSend+0x76>
 800fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d101      	bne.n	800fc4e <xQueueGenericSend+0x7a>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e000      	b.n	800fc50 <xQueueGenericSend+0x7c>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10c      	bne.n	800fc6e <xQueueGenericSend+0x9a>
	__asm volatile
 800fc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc58:	b672      	cpsid	i
 800fc5a:	f383 8811 	msr	BASEPRI, r3
 800fc5e:	f3bf 8f6f 	isb	sy
 800fc62:	f3bf 8f4f 	dsb	sy
 800fc66:	b662      	cpsie	i
 800fc68:	623b      	str	r3, [r7, #32]
}
 800fc6a:	bf00      	nop
 800fc6c:	e7fe      	b.n	800fc6c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc6e:	f001 f9c5 	bl	8010ffc <xTaskGetSchedulerState>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d102      	bne.n	800fc7e <xQueueGenericSend+0xaa>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d101      	bne.n	800fc82 <xQueueGenericSend+0xae>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e000      	b.n	800fc84 <xQueueGenericSend+0xb0>
 800fc82:	2300      	movs	r3, #0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10c      	bne.n	800fca2 <xQueueGenericSend+0xce>
	__asm volatile
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	b672      	cpsid	i
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	b662      	cpsie	i
 800fc9c:	61fb      	str	r3, [r7, #28]
}
 800fc9e:	bf00      	nop
 800fca0:	e7fe      	b.n	800fca0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fca2:	f001 fefb 	bl	8011a9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d302      	bcc.n	800fcb8 <xQueueGenericSend+0xe4>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b02      	cmp	r3, #2
 800fcb6:	d129      	bne.n	800fd0c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fcb8:	683a      	ldr	r2, [r7, #0]
 800fcba:	68b9      	ldr	r1, [r7, #8]
 800fcbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcbe:	f000 fa15 	bl	80100ec <prvCopyDataToQueue>
 800fcc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d010      	beq.n	800fcee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcce:	3324      	adds	r3, #36	; 0x24
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f000 ffcd 	bl	8010c70 <xTaskRemoveFromEventList>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d013      	beq.n	800fd04 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fcdc:	4b3f      	ldr	r3, [pc, #252]	; (800fddc <xQueueGenericSend+0x208>)
 800fcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fce2:	601a      	str	r2, [r3, #0]
 800fce4:	f3bf 8f4f 	dsb	sy
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	e00a      	b.n	800fd04 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d007      	beq.n	800fd04 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fcf4:	4b39      	ldr	r3, [pc, #228]	; (800fddc <xQueueGenericSend+0x208>)
 800fcf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcfa:	601a      	str	r2, [r3, #0]
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fd04:	f001 fefe 	bl	8011b04 <vPortExitCritical>
				return pdPASS;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	e063      	b.n	800fdd4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d103      	bne.n	800fd1a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd12:	f001 fef7 	bl	8011b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e05c      	b.n	800fdd4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d106      	bne.n	800fd2e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd20:	f107 0314 	add.w	r3, r7, #20
 800fd24:	4618      	mov	r0, r3
 800fd26:	f001 f809 	bl	8010d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd2e:	f001 fee9 	bl	8011b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd32:	f000 fd5d 	bl	80107f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd36:	f001 feb1 	bl	8011a9c <vPortEnterCritical>
 800fd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd40:	b25b      	sxtb	r3, r3
 800fd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd46:	d103      	bne.n	800fd50 <xQueueGenericSend+0x17c>
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd56:	b25b      	sxtb	r3, r3
 800fd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd5c:	d103      	bne.n	800fd66 <xQueueGenericSend+0x192>
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd60:	2200      	movs	r2, #0
 800fd62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd66:	f001 fecd 	bl	8011b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd6a:	1d3a      	adds	r2, r7, #4
 800fd6c:	f107 0314 	add.w	r3, r7, #20
 800fd70:	4611      	mov	r1, r2
 800fd72:	4618      	mov	r0, r3
 800fd74:	f000 fff8 	bl	8010d68 <xTaskCheckForTimeOut>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d124      	bne.n	800fdc8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fd7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd80:	f000 faac 	bl	80102dc <prvIsQueueFull>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d018      	beq.n	800fdbc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	3310      	adds	r3, #16
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	4611      	mov	r1, r2
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 ff18 	bl	8010bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fd98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd9a:	f000 fa37 	bl	801020c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fd9e:	f000 fd35 	bl	801080c <xTaskResumeAll>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f47f af7c 	bne.w	800fca2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fdaa:	4b0c      	ldr	r3, [pc, #48]	; (800fddc <xQueueGenericSend+0x208>)
 800fdac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdb0:	601a      	str	r2, [r3, #0]
 800fdb2:	f3bf 8f4f 	dsb	sy
 800fdb6:	f3bf 8f6f 	isb	sy
 800fdba:	e772      	b.n	800fca2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fdbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdbe:	f000 fa25 	bl	801020c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdc2:	f000 fd23 	bl	801080c <xTaskResumeAll>
 800fdc6:	e76c      	b.n	800fca2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdca:	f000 fa1f 	bl	801020c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdce:	f000 fd1d 	bl	801080c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fdd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3738      	adds	r7, #56	; 0x38
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	e000ed04 	.word	0xe000ed04

0800fde0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b08e      	sub	sp, #56	; 0x38
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10c      	bne.n	800fe12 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	b672      	cpsid	i
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	b662      	cpsie	i
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe0e:	bf00      	nop
 800fe10:	e7fe      	b.n	800fe10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d103      	bne.n	800fe20 <xQueueGenericSendFromISR+0x40>
 800fe18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d101      	bne.n	800fe24 <xQueueGenericSendFromISR+0x44>
 800fe20:	2301      	movs	r3, #1
 800fe22:	e000      	b.n	800fe26 <xQueueGenericSendFromISR+0x46>
 800fe24:	2300      	movs	r3, #0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10c      	bne.n	800fe44 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	b672      	cpsid	i
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	b662      	cpsie	i
 800fe3e:	623b      	str	r3, [r7, #32]
}
 800fe40:	bf00      	nop
 800fe42:	e7fe      	b.n	800fe42 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d103      	bne.n	800fe52 <xQueueGenericSendFromISR+0x72>
 800fe4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d101      	bne.n	800fe56 <xQueueGenericSendFromISR+0x76>
 800fe52:	2301      	movs	r3, #1
 800fe54:	e000      	b.n	800fe58 <xQueueGenericSendFromISR+0x78>
 800fe56:	2300      	movs	r3, #0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10c      	bne.n	800fe76 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fe5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe60:	b672      	cpsid	i
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	b662      	cpsie	i
 800fe70:	61fb      	str	r3, [r7, #28]
}
 800fe72:	bf00      	nop
 800fe74:	e7fe      	b.n	800fe74 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe76:	f001 fef9 	bl	8011c6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fe7a:	f3ef 8211 	mrs	r2, BASEPRI
 800fe7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe82:	b672      	cpsid	i
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	b662      	cpsie	i
 800fe92:	61ba      	str	r2, [r7, #24]
 800fe94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fe96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d302      	bcc.n	800feac <xQueueGenericSendFromISR+0xcc>
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	2b02      	cmp	r3, #2
 800feaa:	d12c      	bne.n	800ff06 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800feb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800feb6:	683a      	ldr	r2, [r7, #0]
 800feb8:	68b9      	ldr	r1, [r7, #8]
 800feba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800febc:	f000 f916 	bl	80100ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fec0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec8:	d112      	bne.n	800fef0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d016      	beq.n	800ff00 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed4:	3324      	adds	r3, #36	; 0x24
 800fed6:	4618      	mov	r0, r3
 800fed8:	f000 feca 	bl	8010c70 <xTaskRemoveFromEventList>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00e      	beq.n	800ff00 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00b      	beq.n	800ff00 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	e007      	b.n	800ff00 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fef4:	3301      	adds	r3, #1
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	b25a      	sxtb	r2, r3
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ff00:	2301      	movs	r3, #1
 800ff02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ff04:	e001      	b.n	800ff0a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff06:	2300      	movs	r3, #0
 800ff08:	637b      	str	r3, [r7, #52]	; 0x34
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ff14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3738      	adds	r7, #56	; 0x38
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b08c      	sub	sp, #48	; 0x30
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d10c      	bne.n	800ff54 <xQueueReceive+0x34>
	__asm volatile
 800ff3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3e:	b672      	cpsid	i
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	b662      	cpsie	i
 800ff4e:	623b      	str	r3, [r7, #32]
}
 800ff50:	bf00      	nop
 800ff52:	e7fe      	b.n	800ff52 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d103      	bne.n	800ff62 <xQueueReceive+0x42>
 800ff5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d101      	bne.n	800ff66 <xQueueReceive+0x46>
 800ff62:	2301      	movs	r3, #1
 800ff64:	e000      	b.n	800ff68 <xQueueReceive+0x48>
 800ff66:	2300      	movs	r3, #0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10c      	bne.n	800ff86 <xQueueReceive+0x66>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	b672      	cpsid	i
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	b662      	cpsie	i
 800ff80:	61fb      	str	r3, [r7, #28]
}
 800ff82:	bf00      	nop
 800ff84:	e7fe      	b.n	800ff84 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff86:	f001 f839 	bl	8010ffc <xTaskGetSchedulerState>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d102      	bne.n	800ff96 <xQueueReceive+0x76>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d101      	bne.n	800ff9a <xQueueReceive+0x7a>
 800ff96:	2301      	movs	r3, #1
 800ff98:	e000      	b.n	800ff9c <xQueueReceive+0x7c>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10c      	bne.n	800ffba <xQueueReceive+0x9a>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa4:	b672      	cpsid	i
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	b662      	cpsie	i
 800ffb4:	61bb      	str	r3, [r7, #24]
}
 800ffb6:	bf00      	nop
 800ffb8:	e7fe      	b.n	800ffb8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffba:	f001 fd6f 	bl	8011a9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d01f      	beq.n	801000a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffca:	68b9      	ldr	r1, [r7, #8]
 800ffcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffce:	f000 f8f7 	bl	80101c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	1e5a      	subs	r2, r3, #1
 800ffd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffdc:	691b      	ldr	r3, [r3, #16]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00f      	beq.n	8010002 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe4:	3310      	adds	r3, #16
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f000 fe42 	bl	8010c70 <xTaskRemoveFromEventList>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d007      	beq.n	8010002 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fff2:	4b3d      	ldr	r3, [pc, #244]	; (80100e8 <xQueueReceive+0x1c8>)
 800fff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fff8:	601a      	str	r2, [r3, #0]
 800fffa:	f3bf 8f4f 	dsb	sy
 800fffe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010002:	f001 fd7f 	bl	8011b04 <vPortExitCritical>
				return pdPASS;
 8010006:	2301      	movs	r3, #1
 8010008:	e069      	b.n	80100de <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d103      	bne.n	8010018 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010010:	f001 fd78 	bl	8011b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010014:	2300      	movs	r3, #0
 8010016:	e062      	b.n	80100de <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	2b00      	cmp	r3, #0
 801001c:	d106      	bne.n	801002c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801001e:	f107 0310 	add.w	r3, r7, #16
 8010022:	4618      	mov	r0, r3
 8010024:	f000 fe8a 	bl	8010d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010028:	2301      	movs	r3, #1
 801002a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801002c:	f001 fd6a 	bl	8011b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010030:	f000 fbde 	bl	80107f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010034:	f001 fd32 	bl	8011a9c <vPortEnterCritical>
 8010038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801003e:	b25b      	sxtb	r3, r3
 8010040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010044:	d103      	bne.n	801004e <xQueueReceive+0x12e>
 8010046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010048:	2200      	movs	r2, #0
 801004a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801004e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010054:	b25b      	sxtb	r3, r3
 8010056:	f1b3 3fff 	cmp.w	r3, #4294967295
 801005a:	d103      	bne.n	8010064 <xQueueReceive+0x144>
 801005c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010064:	f001 fd4e 	bl	8011b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010068:	1d3a      	adds	r2, r7, #4
 801006a:	f107 0310 	add.w	r3, r7, #16
 801006e:	4611      	mov	r1, r2
 8010070:	4618      	mov	r0, r3
 8010072:	f000 fe79 	bl	8010d68 <xTaskCheckForTimeOut>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d123      	bne.n	80100c4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801007c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801007e:	f000 f917 	bl	80102b0 <prvIsQueueEmpty>
 8010082:	4603      	mov	r3, r0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d017      	beq.n	80100b8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008a:	3324      	adds	r3, #36	; 0x24
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	4611      	mov	r1, r2
 8010090:	4618      	mov	r0, r3
 8010092:	f000 fd99 	bl	8010bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010098:	f000 f8b8 	bl	801020c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801009c:	f000 fbb6 	bl	801080c <xTaskResumeAll>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d189      	bne.n	800ffba <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80100a6:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <xQueueReceive+0x1c8>)
 80100a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	f3bf 8f4f 	dsb	sy
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	e780      	b.n	800ffba <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80100b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100ba:	f000 f8a7 	bl	801020c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100be:	f000 fba5 	bl	801080c <xTaskResumeAll>
 80100c2:	e77a      	b.n	800ffba <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80100c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100c6:	f000 f8a1 	bl	801020c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100ca:	f000 fb9f 	bl	801080c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100d0:	f000 f8ee 	bl	80102b0 <prvIsQueueEmpty>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f43f af6f 	beq.w	800ffba <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80100dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3730      	adds	r7, #48	; 0x30
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	e000ed04 	.word	0xe000ed04

080100ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80100f8:	2300      	movs	r3, #0
 80100fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010100:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010106:	2b00      	cmp	r3, #0
 8010108:	d10d      	bne.n	8010126 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d14d      	bne.n	80101ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	689b      	ldr	r3, [r3, #8]
 8010116:	4618      	mov	r0, r3
 8010118:	f000 ff8e 	bl	8011038 <xTaskPriorityDisinherit>
 801011c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2200      	movs	r2, #0
 8010122:	609a      	str	r2, [r3, #8]
 8010124:	e043      	b.n	80101ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d119      	bne.n	8010160 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6858      	ldr	r0, [r3, #4]
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010134:	461a      	mov	r2, r3
 8010136:	68b9      	ldr	r1, [r7, #8]
 8010138:	f002 fb89 	bl	801284e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	685a      	ldr	r2, [r3, #4]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010144:	441a      	add	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	685a      	ldr	r2, [r3, #4]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	689b      	ldr	r3, [r3, #8]
 8010152:	429a      	cmp	r2, r3
 8010154:	d32b      	bcc.n	80101ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681a      	ldr	r2, [r3, #0]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	605a      	str	r2, [r3, #4]
 801015e:	e026      	b.n	80101ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	68d8      	ldr	r0, [r3, #12]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010168:	461a      	mov	r2, r3
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	f002 fb6f 	bl	801284e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	68da      	ldr	r2, [r3, #12]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010178:	425b      	negs	r3, r3
 801017a:	441a      	add	r2, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	68da      	ldr	r2, [r3, #12]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	429a      	cmp	r2, r3
 801018a:	d207      	bcs.n	801019c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	689a      	ldr	r2, [r3, #8]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010194:	425b      	negs	r3, r3
 8010196:	441a      	add	r2, r3
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d105      	bne.n	80101ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d002      	beq.n	80101ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	3b01      	subs	r3, #1
 80101ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	1c5a      	adds	r2, r3, #1
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80101b6:	697b      	ldr	r3, [r7, #20]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3718      	adds	r7, #24
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d018      	beq.n	8010204 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68da      	ldr	r2, [r3, #12]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101da:	441a      	add	r2, r3
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	68da      	ldr	r2, [r3, #12]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d303      	bcc.n	80101f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	68d9      	ldr	r1, [r3, #12]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fc:	461a      	mov	r2, r3
 80101fe:	6838      	ldr	r0, [r7, #0]
 8010200:	f002 fb25 	bl	801284e <memcpy>
	}
}
 8010204:	bf00      	nop
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010214:	f001 fc42 	bl	8011a9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801021e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010220:	e011      	b.n	8010246 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010226:	2b00      	cmp	r3, #0
 8010228:	d012      	beq.n	8010250 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	3324      	adds	r3, #36	; 0x24
 801022e:	4618      	mov	r0, r3
 8010230:	f000 fd1e 	bl	8010c70 <xTaskRemoveFromEventList>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d001      	beq.n	801023e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801023a:	f000 fdfb 	bl	8010e34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801023e:	7bfb      	ldrb	r3, [r7, #15]
 8010240:	3b01      	subs	r3, #1
 8010242:	b2db      	uxtb	r3, r3
 8010244:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801024a:	2b00      	cmp	r3, #0
 801024c:	dce9      	bgt.n	8010222 <prvUnlockQueue+0x16>
 801024e:	e000      	b.n	8010252 <prvUnlockQueue+0x46>
					break;
 8010250:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	22ff      	movs	r2, #255	; 0xff
 8010256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801025a:	f001 fc53 	bl	8011b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801025e:	f001 fc1d 	bl	8011a9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010268:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801026a:	e011      	b.n	8010290 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	691b      	ldr	r3, [r3, #16]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d012      	beq.n	801029a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3310      	adds	r3, #16
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fcf9 	bl	8010c70 <xTaskRemoveFromEventList>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d001      	beq.n	8010288 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010284:	f000 fdd6 	bl	8010e34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010288:	7bbb      	ldrb	r3, [r7, #14]
 801028a:	3b01      	subs	r3, #1
 801028c:	b2db      	uxtb	r3, r3
 801028e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010294:	2b00      	cmp	r3, #0
 8010296:	dce9      	bgt.n	801026c <prvUnlockQueue+0x60>
 8010298:	e000      	b.n	801029c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801029a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	22ff      	movs	r2, #255	; 0xff
 80102a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80102a4:	f001 fc2e 	bl	8011b04 <vPortExitCritical>
}
 80102a8:	bf00      	nop
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80102b8:	f001 fbf0 	bl	8011a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d102      	bne.n	80102ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80102c4:	2301      	movs	r3, #1
 80102c6:	60fb      	str	r3, [r7, #12]
 80102c8:	e001      	b.n	80102ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80102ca:	2300      	movs	r3, #0
 80102cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80102ce:	f001 fc19 	bl	8011b04 <vPortExitCritical>

	return xReturn;
 80102d2:	68fb      	ldr	r3, [r7, #12]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3710      	adds	r7, #16
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80102e4:	f001 fbda 	bl	8011a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d102      	bne.n	80102fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80102f4:	2301      	movs	r3, #1
 80102f6:	60fb      	str	r3, [r7, #12]
 80102f8:	e001      	b.n	80102fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80102fa:	2300      	movs	r3, #0
 80102fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80102fe:	f001 fc01 	bl	8011b04 <vPortExitCritical>

	return xReturn;
 8010302:	68fb      	ldr	r3, [r7, #12]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801030c:	b480      	push	{r7}
 801030e:	b085      	sub	sp, #20
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010316:	2300      	movs	r3, #0
 8010318:	60fb      	str	r3, [r7, #12]
 801031a:	e014      	b.n	8010346 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801031c:	4a0f      	ldr	r2, [pc, #60]	; (801035c <vQueueAddToRegistry+0x50>)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d10b      	bne.n	8010340 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010328:	490c      	ldr	r1, [pc, #48]	; (801035c <vQueueAddToRegistry+0x50>)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010332:	4a0a      	ldr	r2, [pc, #40]	; (801035c <vQueueAddToRegistry+0x50>)
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	00db      	lsls	r3, r3, #3
 8010338:	4413      	add	r3, r2
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801033e:	e006      	b.n	801034e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	3301      	adds	r3, #1
 8010344:	60fb      	str	r3, [r7, #12]
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2b07      	cmp	r3, #7
 801034a:	d9e7      	bls.n	801031c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801034c:	bf00      	nop
 801034e:	bf00      	nop
 8010350:	3714      	adds	r7, #20
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop
 801035c:	20003e8c 	.word	0x20003e8c

08010360 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010360:	b580      	push	{r7, lr}
 8010362:	b086      	sub	sp, #24
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010370:	f001 fb94 	bl	8011a9c <vPortEnterCritical>
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801037a:	b25b      	sxtb	r3, r3
 801037c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010380:	d103      	bne.n	801038a <vQueueWaitForMessageRestricted+0x2a>
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	2200      	movs	r2, #0
 8010386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010390:	b25b      	sxtb	r3, r3
 8010392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010396:	d103      	bne.n	80103a0 <vQueueWaitForMessageRestricted+0x40>
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	2200      	movs	r2, #0
 801039c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103a0:	f001 fbb0 	bl	8011b04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d106      	bne.n	80103ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	3324      	adds	r3, #36	; 0x24
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	68b9      	ldr	r1, [r7, #8]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f000 fc2d 	bl	8010c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80103ba:	6978      	ldr	r0, [r7, #20]
 80103bc:	f7ff ff26 	bl	801020c <prvUnlockQueue>
	}
 80103c0:	bf00      	nop
 80103c2:	3718      	adds	r7, #24
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b08e      	sub	sp, #56	; 0x38
 80103cc:	af04      	add	r7, sp, #16
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
 80103d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80103d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10c      	bne.n	80103f6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e0:	b672      	cpsid	i
 80103e2:	f383 8811 	msr	BASEPRI, r3
 80103e6:	f3bf 8f6f 	isb	sy
 80103ea:	f3bf 8f4f 	dsb	sy
 80103ee:	b662      	cpsie	i
 80103f0:	623b      	str	r3, [r7, #32]
}
 80103f2:	bf00      	nop
 80103f4:	e7fe      	b.n	80103f4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80103f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d10c      	bne.n	8010416 <xTaskCreateStatic+0x4e>
	__asm volatile
 80103fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010400:	b672      	cpsid	i
 8010402:	f383 8811 	msr	BASEPRI, r3
 8010406:	f3bf 8f6f 	isb	sy
 801040a:	f3bf 8f4f 	dsb	sy
 801040e:	b662      	cpsie	i
 8010410:	61fb      	str	r3, [r7, #28]
}
 8010412:	bf00      	nop
 8010414:	e7fe      	b.n	8010414 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010416:	235c      	movs	r3, #92	; 0x5c
 8010418:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	2b5c      	cmp	r3, #92	; 0x5c
 801041e:	d00c      	beq.n	801043a <xTaskCreateStatic+0x72>
	__asm volatile
 8010420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010424:	b672      	cpsid	i
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	b662      	cpsie	i
 8010434:	61bb      	str	r3, [r7, #24]
}
 8010436:	bf00      	nop
 8010438:	e7fe      	b.n	8010438 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801043a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801043c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043e:	2b00      	cmp	r3, #0
 8010440:	d01e      	beq.n	8010480 <xTaskCreateStatic+0xb8>
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010444:	2b00      	cmp	r3, #0
 8010446:	d01b      	beq.n	8010480 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801044a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010450:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010454:	2202      	movs	r2, #2
 8010456:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801045a:	2300      	movs	r3, #0
 801045c:	9303      	str	r3, [sp, #12]
 801045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	f107 0314 	add.w	r3, r7, #20
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	68b9      	ldr	r1, [r7, #8]
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	f000 f850 	bl	8010518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801047a:	f000 f8df 	bl	801063c <prvAddNewTaskToReadyList>
 801047e:	e001      	b.n	8010484 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010480:	2300      	movs	r3, #0
 8010482:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010484:	697b      	ldr	r3, [r7, #20]
	}
 8010486:	4618      	mov	r0, r3
 8010488:	3728      	adds	r7, #40	; 0x28
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801048e:	b580      	push	{r7, lr}
 8010490:	b08c      	sub	sp, #48	; 0x30
 8010492:	af04      	add	r7, sp, #16
 8010494:	60f8      	str	r0, [r7, #12]
 8010496:	60b9      	str	r1, [r7, #8]
 8010498:	603b      	str	r3, [r7, #0]
 801049a:	4613      	mov	r3, r2
 801049c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801049e:	88fb      	ldrh	r3, [r7, #6]
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4618      	mov	r0, r3
 80104a4:	f001 fc26 	bl	8011cf4 <pvPortMalloc>
 80104a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00e      	beq.n	80104ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80104b0:	205c      	movs	r0, #92	; 0x5c
 80104b2:	f001 fc1f 	bl	8011cf4 <pvPortMalloc>
 80104b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d003      	beq.n	80104c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	697a      	ldr	r2, [r7, #20]
 80104c2:	631a      	str	r2, [r3, #48]	; 0x30
 80104c4:	e005      	b.n	80104d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80104c6:	6978      	ldr	r0, [r7, #20]
 80104c8:	f001 fcde 	bl	8011e88 <vPortFree>
 80104cc:	e001      	b.n	80104d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80104ce:	2300      	movs	r3, #0
 80104d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d017      	beq.n	8010508 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	2200      	movs	r2, #0
 80104dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80104e0:	88fa      	ldrh	r2, [r7, #6]
 80104e2:	2300      	movs	r3, #0
 80104e4:	9303      	str	r3, [sp, #12]
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	9302      	str	r3, [sp, #8]
 80104ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ec:	9301      	str	r3, [sp, #4]
 80104ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	68b9      	ldr	r1, [r7, #8]
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f000 f80e 	bl	8010518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104fc:	69f8      	ldr	r0, [r7, #28]
 80104fe:	f000 f89d 	bl	801063c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010502:	2301      	movs	r3, #1
 8010504:	61bb      	str	r3, [r7, #24]
 8010506:	e002      	b.n	801050e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010508:	f04f 33ff 	mov.w	r3, #4294967295
 801050c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801050e:	69bb      	ldr	r3, [r7, #24]
	}
 8010510:	4618      	mov	r0, r3
 8010512:	3720      	adds	r7, #32
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b088      	sub	sp, #32
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
 8010524:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010528:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	461a      	mov	r2, r3
 8010530:	21a5      	movs	r1, #165	; 0xa5
 8010532:	f002 f8c2 	bl	80126ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010540:	440b      	add	r3, r1
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	4413      	add	r3, r2
 8010546:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	f023 0307 	bic.w	r3, r3, #7
 801054e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	f003 0307 	and.w	r3, r3, #7
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00c      	beq.n	8010574 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801055a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055e:	b672      	cpsid	i
 8010560:	f383 8811 	msr	BASEPRI, r3
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	f3bf 8f4f 	dsb	sy
 801056c:	b662      	cpsie	i
 801056e:	617b      	str	r3, [r7, #20]
}
 8010570:	bf00      	nop
 8010572:	e7fe      	b.n	8010572 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d01f      	beq.n	80105ba <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801057a:	2300      	movs	r3, #0
 801057c:	61fb      	str	r3, [r7, #28]
 801057e:	e012      	b.n	80105a6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010580:	68ba      	ldr	r2, [r7, #8]
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	4413      	add	r3, r2
 8010586:	7819      	ldrb	r1, [r3, #0]
 8010588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	4413      	add	r3, r2
 801058e:	3334      	adds	r3, #52	; 0x34
 8010590:	460a      	mov	r2, r1
 8010592:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	4413      	add	r3, r2
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d006      	beq.n	80105ae <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	3301      	adds	r3, #1
 80105a4:	61fb      	str	r3, [r7, #28]
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	2b0f      	cmp	r3, #15
 80105aa:	d9e9      	bls.n	8010580 <prvInitialiseNewTask+0x68>
 80105ac:	e000      	b.n	80105b0 <prvInitialiseNewTask+0x98>
			{
				break;
 80105ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80105b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b2:	2200      	movs	r2, #0
 80105b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80105b8:	e003      	b.n	80105c2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80105ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80105c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c4:	2b37      	cmp	r3, #55	; 0x37
 80105c6:	d901      	bls.n	80105cc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80105c8:	2337      	movs	r3, #55	; 0x37
 80105ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80105cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80105d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105da:	2200      	movs	r2, #0
 80105dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80105de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e0:	3304      	adds	r3, #4
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7ff f952 	bl	800f88c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80105e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ea:	3318      	adds	r3, #24
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7ff f94d 	bl	800f88c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80105f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010606:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060a:	2200      	movs	r2, #0
 801060c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010616:	683a      	ldr	r2, [r7, #0]
 8010618:	68f9      	ldr	r1, [r7, #12]
 801061a:	69b8      	ldr	r0, [r7, #24]
 801061c:	f001 f92e 	bl	801187c <pxPortInitialiseStack>
 8010620:	4602      	mov	r2, r0
 8010622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010624:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d002      	beq.n	8010632 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010632:	bf00      	nop
 8010634:	3720      	adds	r7, #32
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
	...

0801063c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010644:	f001 fa2a 	bl	8011a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010648:	4b2d      	ldr	r3, [pc, #180]	; (8010700 <prvAddNewTaskToReadyList+0xc4>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	3301      	adds	r3, #1
 801064e:	4a2c      	ldr	r2, [pc, #176]	; (8010700 <prvAddNewTaskToReadyList+0xc4>)
 8010650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010652:	4b2c      	ldr	r3, [pc, #176]	; (8010704 <prvAddNewTaskToReadyList+0xc8>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d109      	bne.n	801066e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801065a:	4a2a      	ldr	r2, [pc, #168]	; (8010704 <prvAddNewTaskToReadyList+0xc8>)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010660:	4b27      	ldr	r3, [pc, #156]	; (8010700 <prvAddNewTaskToReadyList+0xc4>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d110      	bne.n	801068a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010668:	f000 fc08 	bl	8010e7c <prvInitialiseTaskLists>
 801066c:	e00d      	b.n	801068a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801066e:	4b26      	ldr	r3, [pc, #152]	; (8010708 <prvAddNewTaskToReadyList+0xcc>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d109      	bne.n	801068a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010676:	4b23      	ldr	r3, [pc, #140]	; (8010704 <prvAddNewTaskToReadyList+0xc8>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010680:	429a      	cmp	r2, r3
 8010682:	d802      	bhi.n	801068a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010684:	4a1f      	ldr	r2, [pc, #124]	; (8010704 <prvAddNewTaskToReadyList+0xc8>)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801068a:	4b20      	ldr	r3, [pc, #128]	; (801070c <prvAddNewTaskToReadyList+0xd0>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	3301      	adds	r3, #1
 8010690:	4a1e      	ldr	r2, [pc, #120]	; (801070c <prvAddNewTaskToReadyList+0xd0>)
 8010692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010694:	4b1d      	ldr	r3, [pc, #116]	; (801070c <prvAddNewTaskToReadyList+0xd0>)
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106a0:	4b1b      	ldr	r3, [pc, #108]	; (8010710 <prvAddNewTaskToReadyList+0xd4>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d903      	bls.n	80106b0 <prvAddNewTaskToReadyList+0x74>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ac:	4a18      	ldr	r2, [pc, #96]	; (8010710 <prvAddNewTaskToReadyList+0xd4>)
 80106ae:	6013      	str	r3, [r2, #0]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b4:	4613      	mov	r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4413      	add	r3, r2
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	4a15      	ldr	r2, [pc, #84]	; (8010714 <prvAddNewTaskToReadyList+0xd8>)
 80106be:	441a      	add	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	3304      	adds	r3, #4
 80106c4:	4619      	mov	r1, r3
 80106c6:	4610      	mov	r0, r2
 80106c8:	f7ff f8ed 	bl	800f8a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80106cc:	f001 fa1a 	bl	8011b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80106d0:	4b0d      	ldr	r3, [pc, #52]	; (8010708 <prvAddNewTaskToReadyList+0xcc>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00e      	beq.n	80106f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80106d8:	4b0a      	ldr	r3, [pc, #40]	; (8010704 <prvAddNewTaskToReadyList+0xc8>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d207      	bcs.n	80106f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80106e6:	4b0c      	ldr	r3, [pc, #48]	; (8010718 <prvAddNewTaskToReadyList+0xdc>)
 80106e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106ec:	601a      	str	r2, [r3, #0]
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106f6:	bf00      	nop
 80106f8:	3708      	adds	r7, #8
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	200043a0 	.word	0x200043a0
 8010704:	20003ecc 	.word	0x20003ecc
 8010708:	200043ac 	.word	0x200043ac
 801070c:	200043bc 	.word	0x200043bc
 8010710:	200043a8 	.word	0x200043a8
 8010714:	20003ed0 	.word	0x20003ed0
 8010718:	e000ed04 	.word	0xe000ed04

0801071c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b08a      	sub	sp, #40	; 0x28
 8010720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010722:	2300      	movs	r3, #0
 8010724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010726:	2300      	movs	r3, #0
 8010728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801072a:	463a      	mov	r2, r7
 801072c:	1d39      	adds	r1, r7, #4
 801072e:	f107 0308 	add.w	r3, r7, #8
 8010732:	4618      	mov	r0, r3
 8010734:	f7ff f856 	bl	800f7e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010738:	6839      	ldr	r1, [r7, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	9202      	str	r2, [sp, #8]
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	2300      	movs	r3, #0
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	2300      	movs	r3, #0
 8010748:	460a      	mov	r2, r1
 801074a:	4923      	ldr	r1, [pc, #140]	; (80107d8 <vTaskStartScheduler+0xbc>)
 801074c:	4823      	ldr	r0, [pc, #140]	; (80107dc <vTaskStartScheduler+0xc0>)
 801074e:	f7ff fe3b 	bl	80103c8 <xTaskCreateStatic>
 8010752:	4603      	mov	r3, r0
 8010754:	4a22      	ldr	r2, [pc, #136]	; (80107e0 <vTaskStartScheduler+0xc4>)
 8010756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010758:	4b21      	ldr	r3, [pc, #132]	; (80107e0 <vTaskStartScheduler+0xc4>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d002      	beq.n	8010766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010760:	2301      	movs	r3, #1
 8010762:	617b      	str	r3, [r7, #20]
 8010764:	e001      	b.n	801076a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010766:	2300      	movs	r3, #0
 8010768:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	2b01      	cmp	r3, #1
 801076e:	d102      	bne.n	8010776 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010770:	f000 fd28 	bl	80111c4 <xTimerCreateTimerTask>
 8010774:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	2b01      	cmp	r3, #1
 801077a:	d118      	bne.n	80107ae <vTaskStartScheduler+0x92>
	__asm volatile
 801077c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010780:	b672      	cpsid	i
 8010782:	f383 8811 	msr	BASEPRI, r3
 8010786:	f3bf 8f6f 	isb	sy
 801078a:	f3bf 8f4f 	dsb	sy
 801078e:	b662      	cpsie	i
 8010790:	613b      	str	r3, [r7, #16]
}
 8010792:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010794:	4b13      	ldr	r3, [pc, #76]	; (80107e4 <vTaskStartScheduler+0xc8>)
 8010796:	f04f 32ff 	mov.w	r2, #4294967295
 801079a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801079c:	4b12      	ldr	r3, [pc, #72]	; (80107e8 <vTaskStartScheduler+0xcc>)
 801079e:	2201      	movs	r2, #1
 80107a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80107a2:	4b12      	ldr	r3, [pc, #72]	; (80107ec <vTaskStartScheduler+0xd0>)
 80107a4:	2200      	movs	r2, #0
 80107a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80107a8:	f001 f8fa 	bl	80119a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80107ac:	e010      	b.n	80107d0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b4:	d10c      	bne.n	80107d0 <vTaskStartScheduler+0xb4>
	__asm volatile
 80107b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ba:	b672      	cpsid	i
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	b662      	cpsie	i
 80107ca:	60fb      	str	r3, [r7, #12]
}
 80107cc:	bf00      	nop
 80107ce:	e7fe      	b.n	80107ce <vTaskStartScheduler+0xb2>
}
 80107d0:	bf00      	nop
 80107d2:	3718      	adds	r7, #24
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	08014db8 	.word	0x08014db8
 80107dc:	08010e4d 	.word	0x08010e4d
 80107e0:	200043c4 	.word	0x200043c4
 80107e4:	200043c0 	.word	0x200043c0
 80107e8:	200043ac 	.word	0x200043ac
 80107ec:	200043a4 	.word	0x200043a4

080107f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80107f0:	b480      	push	{r7}
 80107f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80107f4:	4b04      	ldr	r3, [pc, #16]	; (8010808 <vTaskSuspendAll+0x18>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	3301      	adds	r3, #1
 80107fa:	4a03      	ldr	r2, [pc, #12]	; (8010808 <vTaskSuspendAll+0x18>)
 80107fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80107fe:	bf00      	nop
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr
 8010808:	200043c8 	.word	0x200043c8

0801080c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010812:	2300      	movs	r3, #0
 8010814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010816:	2300      	movs	r3, #0
 8010818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801081a:	4b43      	ldr	r3, [pc, #268]	; (8010928 <xTaskResumeAll+0x11c>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d10c      	bne.n	801083c <xTaskResumeAll+0x30>
	__asm volatile
 8010822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010826:	b672      	cpsid	i
 8010828:	f383 8811 	msr	BASEPRI, r3
 801082c:	f3bf 8f6f 	isb	sy
 8010830:	f3bf 8f4f 	dsb	sy
 8010834:	b662      	cpsie	i
 8010836:	603b      	str	r3, [r7, #0]
}
 8010838:	bf00      	nop
 801083a:	e7fe      	b.n	801083a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801083c:	f001 f92e 	bl	8011a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010840:	4b39      	ldr	r3, [pc, #228]	; (8010928 <xTaskResumeAll+0x11c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	3b01      	subs	r3, #1
 8010846:	4a38      	ldr	r2, [pc, #224]	; (8010928 <xTaskResumeAll+0x11c>)
 8010848:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801084a:	4b37      	ldr	r3, [pc, #220]	; (8010928 <xTaskResumeAll+0x11c>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d162      	bne.n	8010918 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010852:	4b36      	ldr	r3, [pc, #216]	; (801092c <xTaskResumeAll+0x120>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d05e      	beq.n	8010918 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801085a:	e02f      	b.n	80108bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801085c:	4b34      	ldr	r3, [pc, #208]	; (8010930 <xTaskResumeAll+0x124>)
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	3318      	adds	r3, #24
 8010868:	4618      	mov	r0, r3
 801086a:	f7ff f879 	bl	800f960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	3304      	adds	r3, #4
 8010872:	4618      	mov	r0, r3
 8010874:	f7ff f874 	bl	800f960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801087c:	4b2d      	ldr	r3, [pc, #180]	; (8010934 <xTaskResumeAll+0x128>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	429a      	cmp	r2, r3
 8010882:	d903      	bls.n	801088c <xTaskResumeAll+0x80>
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010888:	4a2a      	ldr	r2, [pc, #168]	; (8010934 <xTaskResumeAll+0x128>)
 801088a:	6013      	str	r3, [r2, #0]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010890:	4613      	mov	r3, r2
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	4413      	add	r3, r2
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4a27      	ldr	r2, [pc, #156]	; (8010938 <xTaskResumeAll+0x12c>)
 801089a:	441a      	add	r2, r3
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	3304      	adds	r3, #4
 80108a0:	4619      	mov	r1, r3
 80108a2:	4610      	mov	r0, r2
 80108a4:	f7fe ffff 	bl	800f8a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ac:	4b23      	ldr	r3, [pc, #140]	; (801093c <xTaskResumeAll+0x130>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d302      	bcc.n	80108bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80108b6:	4b22      	ldr	r3, [pc, #136]	; (8010940 <xTaskResumeAll+0x134>)
 80108b8:	2201      	movs	r2, #1
 80108ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80108bc:	4b1c      	ldr	r3, [pc, #112]	; (8010930 <xTaskResumeAll+0x124>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1cb      	bne.n	801085c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80108ca:	f000 fb77 	bl	8010fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80108ce:	4b1d      	ldr	r3, [pc, #116]	; (8010944 <xTaskResumeAll+0x138>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d010      	beq.n	80108fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80108da:	f000 f859 	bl	8010990 <xTaskIncrementTick>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80108e4:	4b16      	ldr	r3, [pc, #88]	; (8010940 <xTaskResumeAll+0x134>)
 80108e6:	2201      	movs	r2, #1
 80108e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	3b01      	subs	r3, #1
 80108ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1f1      	bne.n	80108da <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80108f6:	4b13      	ldr	r3, [pc, #76]	; (8010944 <xTaskResumeAll+0x138>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80108fc:	4b10      	ldr	r3, [pc, #64]	; (8010940 <xTaskResumeAll+0x134>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d009      	beq.n	8010918 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010904:	2301      	movs	r3, #1
 8010906:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010908:	4b0f      	ldr	r3, [pc, #60]	; (8010948 <xTaskResumeAll+0x13c>)
 801090a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801090e:	601a      	str	r2, [r3, #0]
 8010910:	f3bf 8f4f 	dsb	sy
 8010914:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010918:	f001 f8f4 	bl	8011b04 <vPortExitCritical>

	return xAlreadyYielded;
 801091c:	68bb      	ldr	r3, [r7, #8]
}
 801091e:	4618      	mov	r0, r3
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	200043c8 	.word	0x200043c8
 801092c:	200043a0 	.word	0x200043a0
 8010930:	20004360 	.word	0x20004360
 8010934:	200043a8 	.word	0x200043a8
 8010938:	20003ed0 	.word	0x20003ed0
 801093c:	20003ecc 	.word	0x20003ecc
 8010940:	200043b4 	.word	0x200043b4
 8010944:	200043b0 	.word	0x200043b0
 8010948:	e000ed04 	.word	0xe000ed04

0801094c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010952:	4b05      	ldr	r3, [pc, #20]	; (8010968 <xTaskGetTickCount+0x1c>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010958:	687b      	ldr	r3, [r7, #4]
}
 801095a:	4618      	mov	r0, r3
 801095c:	370c      	adds	r7, #12
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	200043a4 	.word	0x200043a4

0801096c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010972:	f001 f97b 	bl	8011c6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010976:	2300      	movs	r3, #0
 8010978:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801097a:	4b04      	ldr	r3, [pc, #16]	; (801098c <xTaskGetTickCountFromISR+0x20>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010980:	683b      	ldr	r3, [r7, #0]
}
 8010982:	4618      	mov	r0, r3
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	200043a4 	.word	0x200043a4

08010990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010996:	2300      	movs	r3, #0
 8010998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801099a:	4b50      	ldr	r3, [pc, #320]	; (8010adc <xTaskIncrementTick+0x14c>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f040 808b 	bne.w	8010aba <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80109a4:	4b4e      	ldr	r3, [pc, #312]	; (8010ae0 <xTaskIncrementTick+0x150>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	3301      	adds	r3, #1
 80109aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80109ac:	4a4c      	ldr	r2, [pc, #304]	; (8010ae0 <xTaskIncrementTick+0x150>)
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d122      	bne.n	80109fe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80109b8:	4b4a      	ldr	r3, [pc, #296]	; (8010ae4 <xTaskIncrementTick+0x154>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d00c      	beq.n	80109dc <xTaskIncrementTick+0x4c>
	__asm volatile
 80109c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c6:	b672      	cpsid	i
 80109c8:	f383 8811 	msr	BASEPRI, r3
 80109cc:	f3bf 8f6f 	isb	sy
 80109d0:	f3bf 8f4f 	dsb	sy
 80109d4:	b662      	cpsie	i
 80109d6:	603b      	str	r3, [r7, #0]
}
 80109d8:	bf00      	nop
 80109da:	e7fe      	b.n	80109da <xTaskIncrementTick+0x4a>
 80109dc:	4b41      	ldr	r3, [pc, #260]	; (8010ae4 <xTaskIncrementTick+0x154>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	4b41      	ldr	r3, [pc, #260]	; (8010ae8 <xTaskIncrementTick+0x158>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4a3f      	ldr	r2, [pc, #252]	; (8010ae4 <xTaskIncrementTick+0x154>)
 80109e8:	6013      	str	r3, [r2, #0]
 80109ea:	4a3f      	ldr	r2, [pc, #252]	; (8010ae8 <xTaskIncrementTick+0x158>)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6013      	str	r3, [r2, #0]
 80109f0:	4b3e      	ldr	r3, [pc, #248]	; (8010aec <xTaskIncrementTick+0x15c>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3301      	adds	r3, #1
 80109f6:	4a3d      	ldr	r2, [pc, #244]	; (8010aec <xTaskIncrementTick+0x15c>)
 80109f8:	6013      	str	r3, [r2, #0]
 80109fa:	f000 fadf 	bl	8010fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80109fe:	4b3c      	ldr	r3, [pc, #240]	; (8010af0 <xTaskIncrementTick+0x160>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	693a      	ldr	r2, [r7, #16]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d349      	bcc.n	8010a9c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a08:	4b36      	ldr	r3, [pc, #216]	; (8010ae4 <xTaskIncrementTick+0x154>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d104      	bne.n	8010a1c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a12:	4b37      	ldr	r3, [pc, #220]	; (8010af0 <xTaskIncrementTick+0x160>)
 8010a14:	f04f 32ff 	mov.w	r2, #4294967295
 8010a18:	601a      	str	r2, [r3, #0]
					break;
 8010a1a:	e03f      	b.n	8010a9c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a1c:	4b31      	ldr	r3, [pc, #196]	; (8010ae4 <xTaskIncrementTick+0x154>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010a2c:	693a      	ldr	r2, [r7, #16]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d203      	bcs.n	8010a3c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010a34:	4a2e      	ldr	r2, [pc, #184]	; (8010af0 <xTaskIncrementTick+0x160>)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010a3a:	e02f      	b.n	8010a9c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	3304      	adds	r3, #4
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fe ff8d 	bl	800f960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d004      	beq.n	8010a58 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	3318      	adds	r3, #24
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fe ff84 	bl	800f960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a5c:	4b25      	ldr	r3, [pc, #148]	; (8010af4 <xTaskIncrementTick+0x164>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d903      	bls.n	8010a6c <xTaskIncrementTick+0xdc>
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a68:	4a22      	ldr	r2, [pc, #136]	; (8010af4 <xTaskIncrementTick+0x164>)
 8010a6a:	6013      	str	r3, [r2, #0]
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a70:	4613      	mov	r3, r2
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	4413      	add	r3, r2
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4a1f      	ldr	r2, [pc, #124]	; (8010af8 <xTaskIncrementTick+0x168>)
 8010a7a:	441a      	add	r2, r3
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	3304      	adds	r3, #4
 8010a80:	4619      	mov	r1, r3
 8010a82:	4610      	mov	r0, r2
 8010a84:	f7fe ff0f 	bl	800f8a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a8c:	4b1b      	ldr	r3, [pc, #108]	; (8010afc <xTaskIncrementTick+0x16c>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d3b8      	bcc.n	8010a08 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8010a96:	2301      	movs	r3, #1
 8010a98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a9a:	e7b5      	b.n	8010a08 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010a9c:	4b17      	ldr	r3, [pc, #92]	; (8010afc <xTaskIncrementTick+0x16c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa2:	4915      	ldr	r1, [pc, #84]	; (8010af8 <xTaskIncrementTick+0x168>)
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	009b      	lsls	r3, r3, #2
 8010aa8:	4413      	add	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	440b      	add	r3, r1
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d907      	bls.n	8010ac4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	617b      	str	r3, [r7, #20]
 8010ab8:	e004      	b.n	8010ac4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010aba:	4b11      	ldr	r3, [pc, #68]	; (8010b00 <xTaskIncrementTick+0x170>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	4a0f      	ldr	r2, [pc, #60]	; (8010b00 <xTaskIncrementTick+0x170>)
 8010ac2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010ac4:	4b0f      	ldr	r3, [pc, #60]	; (8010b04 <xTaskIncrementTick+0x174>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010acc:	2301      	movs	r3, #1
 8010ace:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010ad0:	697b      	ldr	r3, [r7, #20]
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3718      	adds	r7, #24
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	200043c8 	.word	0x200043c8
 8010ae0:	200043a4 	.word	0x200043a4
 8010ae4:	20004358 	.word	0x20004358
 8010ae8:	2000435c 	.word	0x2000435c
 8010aec:	200043b8 	.word	0x200043b8
 8010af0:	200043c0 	.word	0x200043c0
 8010af4:	200043a8 	.word	0x200043a8
 8010af8:	20003ed0 	.word	0x20003ed0
 8010afc:	20003ecc 	.word	0x20003ecc
 8010b00:	200043b0 	.word	0x200043b0
 8010b04:	200043b4 	.word	0x200043b4

08010b08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b085      	sub	sp, #20
 8010b0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010b0e:	4b29      	ldr	r3, [pc, #164]	; (8010bb4 <vTaskSwitchContext+0xac>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d003      	beq.n	8010b1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010b16:	4b28      	ldr	r3, [pc, #160]	; (8010bb8 <vTaskSwitchContext+0xb0>)
 8010b18:	2201      	movs	r2, #1
 8010b1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010b1c:	e043      	b.n	8010ba6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8010b1e:	4b26      	ldr	r3, [pc, #152]	; (8010bb8 <vTaskSwitchContext+0xb0>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b24:	4b25      	ldr	r3, [pc, #148]	; (8010bbc <vTaskSwitchContext+0xb4>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	60fb      	str	r3, [r7, #12]
 8010b2a:	e012      	b.n	8010b52 <vTaskSwitchContext+0x4a>
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10c      	bne.n	8010b4c <vTaskSwitchContext+0x44>
	__asm volatile
 8010b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b36:	b672      	cpsid	i
 8010b38:	f383 8811 	msr	BASEPRI, r3
 8010b3c:	f3bf 8f6f 	isb	sy
 8010b40:	f3bf 8f4f 	dsb	sy
 8010b44:	b662      	cpsie	i
 8010b46:	607b      	str	r3, [r7, #4]
}
 8010b48:	bf00      	nop
 8010b4a:	e7fe      	b.n	8010b4a <vTaskSwitchContext+0x42>
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	60fb      	str	r3, [r7, #12]
 8010b52:	491b      	ldr	r1, [pc, #108]	; (8010bc0 <vTaskSwitchContext+0xb8>)
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	4613      	mov	r3, r2
 8010b58:	009b      	lsls	r3, r3, #2
 8010b5a:	4413      	add	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	440b      	add	r3, r1
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d0e2      	beq.n	8010b2c <vTaskSwitchContext+0x24>
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	4613      	mov	r3, r2
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	4413      	add	r3, r2
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	4a13      	ldr	r2, [pc, #76]	; (8010bc0 <vTaskSwitchContext+0xb8>)
 8010b72:	4413      	add	r3, r2
 8010b74:	60bb      	str	r3, [r7, #8]
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	685a      	ldr	r2, [r3, #4]
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	605a      	str	r2, [r3, #4]
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	685a      	ldr	r2, [r3, #4]
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3308      	adds	r3, #8
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d104      	bne.n	8010b96 <vTaskSwitchContext+0x8e>
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	685a      	ldr	r2, [r3, #4]
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	605a      	str	r2, [r3, #4]
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	685b      	ldr	r3, [r3, #4]
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	4a09      	ldr	r2, [pc, #36]	; (8010bc4 <vTaskSwitchContext+0xbc>)
 8010b9e:	6013      	str	r3, [r2, #0]
 8010ba0:	4a06      	ldr	r2, [pc, #24]	; (8010bbc <vTaskSwitchContext+0xb4>)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	6013      	str	r3, [r2, #0]
}
 8010ba6:	bf00      	nop
 8010ba8:	3714      	adds	r7, #20
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop
 8010bb4:	200043c8 	.word	0x200043c8
 8010bb8:	200043b4 	.word	0x200043b4
 8010bbc:	200043a8 	.word	0x200043a8
 8010bc0:	20003ed0 	.word	0x20003ed0
 8010bc4:	20003ecc 	.word	0x20003ecc

08010bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d10c      	bne.n	8010bf2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bdc:	b672      	cpsid	i
 8010bde:	f383 8811 	msr	BASEPRI, r3
 8010be2:	f3bf 8f6f 	isb	sy
 8010be6:	f3bf 8f4f 	dsb	sy
 8010bea:	b662      	cpsie	i
 8010bec:	60fb      	str	r3, [r7, #12]
}
 8010bee:	bf00      	nop
 8010bf0:	e7fe      	b.n	8010bf0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010bf2:	4b07      	ldr	r3, [pc, #28]	; (8010c10 <vTaskPlaceOnEventList+0x48>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	3318      	adds	r3, #24
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f7fe fe77 	bl	800f8ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010c00:	2101      	movs	r1, #1
 8010c02:	6838      	ldr	r0, [r7, #0]
 8010c04:	f000 fa8a 	bl	801111c <prvAddCurrentTaskToDelayedList>
}
 8010c08:	bf00      	nop
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	20003ecc 	.word	0x20003ecc

08010c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b086      	sub	sp, #24
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10c      	bne.n	8010c40 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8010c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2a:	b672      	cpsid	i
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	b662      	cpsie	i
 8010c3a:	617b      	str	r3, [r7, #20]
}
 8010c3c:	bf00      	nop
 8010c3e:	e7fe      	b.n	8010c3e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010c40:	4b0a      	ldr	r3, [pc, #40]	; (8010c6c <vTaskPlaceOnEventListRestricted+0x58>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3318      	adds	r3, #24
 8010c46:	4619      	mov	r1, r3
 8010c48:	68f8      	ldr	r0, [r7, #12]
 8010c4a:	f7fe fe2c 	bl	800f8a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8010c54:	f04f 33ff 	mov.w	r3, #4294967295
 8010c58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010c5a:	6879      	ldr	r1, [r7, #4]
 8010c5c:	68b8      	ldr	r0, [r7, #8]
 8010c5e:	f000 fa5d 	bl	801111c <prvAddCurrentTaskToDelayedList>
	}
 8010c62:	bf00      	nop
 8010c64:	3718      	adds	r7, #24
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	20003ecc 	.word	0x20003ecc

08010c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d10c      	bne.n	8010ca0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c8a:	b672      	cpsid	i
 8010c8c:	f383 8811 	msr	BASEPRI, r3
 8010c90:	f3bf 8f6f 	isb	sy
 8010c94:	f3bf 8f4f 	dsb	sy
 8010c98:	b662      	cpsie	i
 8010c9a:	60fb      	str	r3, [r7, #12]
}
 8010c9c:	bf00      	nop
 8010c9e:	e7fe      	b.n	8010c9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	3318      	adds	r3, #24
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fe fe5b 	bl	800f960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010caa:	4b1e      	ldr	r3, [pc, #120]	; (8010d24 <xTaskRemoveFromEventList+0xb4>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d11d      	bne.n	8010cee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fe fe52 	bl	800f960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc0:	4b19      	ldr	r3, [pc, #100]	; (8010d28 <xTaskRemoveFromEventList+0xb8>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d903      	bls.n	8010cd0 <xTaskRemoveFromEventList+0x60>
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ccc:	4a16      	ldr	r2, [pc, #88]	; (8010d28 <xTaskRemoveFromEventList+0xb8>)
 8010cce:	6013      	str	r3, [r2, #0]
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	4413      	add	r3, r2
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	4a13      	ldr	r2, [pc, #76]	; (8010d2c <xTaskRemoveFromEventList+0xbc>)
 8010cde:	441a      	add	r2, r3
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	3304      	adds	r3, #4
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	f7fe fddd 	bl	800f8a6 <vListInsertEnd>
 8010cec:	e005      	b.n	8010cfa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	3318      	adds	r3, #24
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	480e      	ldr	r0, [pc, #56]	; (8010d30 <xTaskRemoveFromEventList+0xc0>)
 8010cf6:	f7fe fdd6 	bl	800f8a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cfe:	4b0d      	ldr	r3, [pc, #52]	; (8010d34 <xTaskRemoveFromEventList+0xc4>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d905      	bls.n	8010d14 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010d08:	2301      	movs	r3, #1
 8010d0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010d0c:	4b0a      	ldr	r3, [pc, #40]	; (8010d38 <xTaskRemoveFromEventList+0xc8>)
 8010d0e:	2201      	movs	r2, #1
 8010d10:	601a      	str	r2, [r3, #0]
 8010d12:	e001      	b.n	8010d18 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010d14:	2300      	movs	r3, #0
 8010d16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010d18:	697b      	ldr	r3, [r7, #20]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3718      	adds	r7, #24
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	200043c8 	.word	0x200043c8
 8010d28:	200043a8 	.word	0x200043a8
 8010d2c:	20003ed0 	.word	0x20003ed0
 8010d30:	20004360 	.word	0x20004360
 8010d34:	20003ecc 	.word	0x20003ecc
 8010d38:	200043b4 	.word	0x200043b4

08010d3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b083      	sub	sp, #12
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010d44:	4b06      	ldr	r3, [pc, #24]	; (8010d60 <vTaskInternalSetTimeOutState+0x24>)
 8010d46:	681a      	ldr	r2, [r3, #0]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010d4c:	4b05      	ldr	r3, [pc, #20]	; (8010d64 <vTaskInternalSetTimeOutState+0x28>)
 8010d4e:	681a      	ldr	r2, [r3, #0]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	605a      	str	r2, [r3, #4]
}
 8010d54:	bf00      	nop
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	200043b8 	.word	0x200043b8
 8010d64:	200043a4 	.word	0x200043a4

08010d68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b088      	sub	sp, #32
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d10c      	bne.n	8010d92 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7c:	b672      	cpsid	i
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	b662      	cpsie	i
 8010d8c:	613b      	str	r3, [r7, #16]
}
 8010d8e:	bf00      	nop
 8010d90:	e7fe      	b.n	8010d90 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d10c      	bne.n	8010db2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9c:	b672      	cpsid	i
 8010d9e:	f383 8811 	msr	BASEPRI, r3
 8010da2:	f3bf 8f6f 	isb	sy
 8010da6:	f3bf 8f4f 	dsb	sy
 8010daa:	b662      	cpsie	i
 8010dac:	60fb      	str	r3, [r7, #12]
}
 8010dae:	bf00      	nop
 8010db0:	e7fe      	b.n	8010db0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010db2:	f000 fe73 	bl	8011a9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010db6:	4b1d      	ldr	r3, [pc, #116]	; (8010e2c <xTaskCheckForTimeOut+0xc4>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	69ba      	ldr	r2, [r7, #24]
 8010dc2:	1ad3      	subs	r3, r2, r3
 8010dc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dce:	d102      	bne.n	8010dd6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	61fb      	str	r3, [r7, #28]
 8010dd4:	e023      	b.n	8010e1e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	4b15      	ldr	r3, [pc, #84]	; (8010e30 <xTaskCheckForTimeOut+0xc8>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d007      	beq.n	8010df2 <xTaskCheckForTimeOut+0x8a>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	69ba      	ldr	r2, [r7, #24]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d302      	bcc.n	8010df2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010dec:	2301      	movs	r3, #1
 8010dee:	61fb      	str	r3, [r7, #28]
 8010df0:	e015      	b.n	8010e1e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	697a      	ldr	r2, [r7, #20]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d20b      	bcs.n	8010e14 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	1ad2      	subs	r2, r2, r3
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7ff ff97 	bl	8010d3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	61fb      	str	r3, [r7, #28]
 8010e12:	e004      	b.n	8010e1e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	2200      	movs	r2, #0
 8010e18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010e1e:	f000 fe71 	bl	8011b04 <vPortExitCritical>

	return xReturn;
 8010e22:	69fb      	ldr	r3, [r7, #28]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3720      	adds	r7, #32
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	200043a4 	.word	0x200043a4
 8010e30:	200043b8 	.word	0x200043b8

08010e34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010e34:	b480      	push	{r7}
 8010e36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010e38:	4b03      	ldr	r3, [pc, #12]	; (8010e48 <vTaskMissedYield+0x14>)
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	601a      	str	r2, [r3, #0]
}
 8010e3e:	bf00      	nop
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	200043b4 	.word	0x200043b4

08010e4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010e54:	f000 f852 	bl	8010efc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010e58:	4b06      	ldr	r3, [pc, #24]	; (8010e74 <prvIdleTask+0x28>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d9f9      	bls.n	8010e54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010e60:	4b05      	ldr	r3, [pc, #20]	; (8010e78 <prvIdleTask+0x2c>)
 8010e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e66:	601a      	str	r2, [r3, #0]
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010e70:	e7f0      	b.n	8010e54 <prvIdleTask+0x8>
 8010e72:	bf00      	nop
 8010e74:	20003ed0 	.word	0x20003ed0
 8010e78:	e000ed04 	.word	0xe000ed04

08010e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e82:	2300      	movs	r3, #0
 8010e84:	607b      	str	r3, [r7, #4]
 8010e86:	e00c      	b.n	8010ea2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	4413      	add	r3, r2
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	4a12      	ldr	r2, [pc, #72]	; (8010edc <prvInitialiseTaskLists+0x60>)
 8010e94:	4413      	add	r3, r2
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fe fcd8 	bl	800f84c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	607b      	str	r3, [r7, #4]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2b37      	cmp	r3, #55	; 0x37
 8010ea6:	d9ef      	bls.n	8010e88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ea8:	480d      	ldr	r0, [pc, #52]	; (8010ee0 <prvInitialiseTaskLists+0x64>)
 8010eaa:	f7fe fccf 	bl	800f84c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010eae:	480d      	ldr	r0, [pc, #52]	; (8010ee4 <prvInitialiseTaskLists+0x68>)
 8010eb0:	f7fe fccc 	bl	800f84c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010eb4:	480c      	ldr	r0, [pc, #48]	; (8010ee8 <prvInitialiseTaskLists+0x6c>)
 8010eb6:	f7fe fcc9 	bl	800f84c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010eba:	480c      	ldr	r0, [pc, #48]	; (8010eec <prvInitialiseTaskLists+0x70>)
 8010ebc:	f7fe fcc6 	bl	800f84c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ec0:	480b      	ldr	r0, [pc, #44]	; (8010ef0 <prvInitialiseTaskLists+0x74>)
 8010ec2:	f7fe fcc3 	bl	800f84c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010ec6:	4b0b      	ldr	r3, [pc, #44]	; (8010ef4 <prvInitialiseTaskLists+0x78>)
 8010ec8:	4a05      	ldr	r2, [pc, #20]	; (8010ee0 <prvInitialiseTaskLists+0x64>)
 8010eca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010ecc:	4b0a      	ldr	r3, [pc, #40]	; (8010ef8 <prvInitialiseTaskLists+0x7c>)
 8010ece:	4a05      	ldr	r2, [pc, #20]	; (8010ee4 <prvInitialiseTaskLists+0x68>)
 8010ed0:	601a      	str	r2, [r3, #0]
}
 8010ed2:	bf00      	nop
 8010ed4:	3708      	adds	r7, #8
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	20003ed0 	.word	0x20003ed0
 8010ee0:	20004330 	.word	0x20004330
 8010ee4:	20004344 	.word	0x20004344
 8010ee8:	20004360 	.word	0x20004360
 8010eec:	20004374 	.word	0x20004374
 8010ef0:	2000438c 	.word	0x2000438c
 8010ef4:	20004358 	.word	0x20004358
 8010ef8:	2000435c 	.word	0x2000435c

08010efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b082      	sub	sp, #8
 8010f00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f02:	e019      	b.n	8010f38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010f04:	f000 fdca 	bl	8011a9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f08:	4b10      	ldr	r3, [pc, #64]	; (8010f4c <prvCheckTasksWaitingTermination+0x50>)
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	3304      	adds	r3, #4
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fe fd23 	bl	800f960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010f1a:	4b0d      	ldr	r3, [pc, #52]	; (8010f50 <prvCheckTasksWaitingTermination+0x54>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3b01      	subs	r3, #1
 8010f20:	4a0b      	ldr	r2, [pc, #44]	; (8010f50 <prvCheckTasksWaitingTermination+0x54>)
 8010f22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010f24:	4b0b      	ldr	r3, [pc, #44]	; (8010f54 <prvCheckTasksWaitingTermination+0x58>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3b01      	subs	r3, #1
 8010f2a:	4a0a      	ldr	r2, [pc, #40]	; (8010f54 <prvCheckTasksWaitingTermination+0x58>)
 8010f2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010f2e:	f000 fde9 	bl	8011b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f810 	bl	8010f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f38:	4b06      	ldr	r3, [pc, #24]	; (8010f54 <prvCheckTasksWaitingTermination+0x58>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d1e1      	bne.n	8010f04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010f40:	bf00      	nop
 8010f42:	bf00      	nop
 8010f44:	3708      	adds	r7, #8
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	20004374 	.word	0x20004374
 8010f50:	200043a0 	.word	0x200043a0
 8010f54:	20004388 	.word	0x20004388

08010f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d108      	bne.n	8010f7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 ff8a 	bl	8011e88 <vPortFree>
				vPortFree( pxTCB );
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f000 ff87 	bl	8011e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010f7a:	e01a      	b.n	8010fb2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d103      	bne.n	8010f8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f000 ff7e 	bl	8011e88 <vPortFree>
	}
 8010f8c:	e011      	b.n	8010fb2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010f94:	2b02      	cmp	r3, #2
 8010f96:	d00c      	beq.n	8010fb2 <prvDeleteTCB+0x5a>
	__asm volatile
 8010f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9c:	b672      	cpsid	i
 8010f9e:	f383 8811 	msr	BASEPRI, r3
 8010fa2:	f3bf 8f6f 	isb	sy
 8010fa6:	f3bf 8f4f 	dsb	sy
 8010faa:	b662      	cpsie	i
 8010fac:	60fb      	str	r3, [r7, #12]
}
 8010fae:	bf00      	nop
 8010fb0:	e7fe      	b.n	8010fb0 <prvDeleteTCB+0x58>
	}
 8010fb2:	bf00      	nop
 8010fb4:	3710      	adds	r7, #16
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
	...

08010fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fc2:	4b0c      	ldr	r3, [pc, #48]	; (8010ff4 <prvResetNextTaskUnblockTime+0x38>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d104      	bne.n	8010fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010fcc:	4b0a      	ldr	r3, [pc, #40]	; (8010ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8010fce:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010fd4:	e008      	b.n	8010fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fd6:	4b07      	ldr	r3, [pc, #28]	; (8010ff4 <prvResetNextTaskUnblockTime+0x38>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	4a04      	ldr	r2, [pc, #16]	; (8010ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8010fe6:	6013      	str	r3, [r2, #0]
}
 8010fe8:	bf00      	nop
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	20004358 	.word	0x20004358
 8010ff8:	200043c0 	.word	0x200043c0

08010ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011002:	4b0b      	ldr	r3, [pc, #44]	; (8011030 <xTaskGetSchedulerState+0x34>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d102      	bne.n	8011010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801100a:	2301      	movs	r3, #1
 801100c:	607b      	str	r3, [r7, #4]
 801100e:	e008      	b.n	8011022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011010:	4b08      	ldr	r3, [pc, #32]	; (8011034 <xTaskGetSchedulerState+0x38>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d102      	bne.n	801101e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011018:	2302      	movs	r3, #2
 801101a:	607b      	str	r3, [r7, #4]
 801101c:	e001      	b.n	8011022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801101e:	2300      	movs	r3, #0
 8011020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011022:	687b      	ldr	r3, [r7, #4]
	}
 8011024:	4618      	mov	r0, r3
 8011026:	370c      	adds	r7, #12
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr
 8011030:	200043ac 	.word	0x200043ac
 8011034:	200043c8 	.word	0x200043c8

08011038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011044:	2300      	movs	r3, #0
 8011046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d05a      	beq.n	8011104 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801104e:	4b30      	ldr	r3, [pc, #192]	; (8011110 <xTaskPriorityDisinherit+0xd8>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	693a      	ldr	r2, [r7, #16]
 8011054:	429a      	cmp	r2, r3
 8011056:	d00c      	beq.n	8011072 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105c:	b672      	cpsid	i
 801105e:	f383 8811 	msr	BASEPRI, r3
 8011062:	f3bf 8f6f 	isb	sy
 8011066:	f3bf 8f4f 	dsb	sy
 801106a:	b662      	cpsie	i
 801106c:	60fb      	str	r3, [r7, #12]
}
 801106e:	bf00      	nop
 8011070:	e7fe      	b.n	8011070 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011076:	2b00      	cmp	r3, #0
 8011078:	d10c      	bne.n	8011094 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801107a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107e:	b672      	cpsid	i
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	b662      	cpsie	i
 801108e:	60bb      	str	r3, [r7, #8]
}
 8011090:	bf00      	nop
 8011092:	e7fe      	b.n	8011092 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011098:	1e5a      	subs	r2, r3, #1
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d02c      	beq.n	8011104 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d128      	bne.n	8011104 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	3304      	adds	r3, #4
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fe fc52 	bl	800f960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110d4:	4b0f      	ldr	r3, [pc, #60]	; (8011114 <xTaskPriorityDisinherit+0xdc>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d903      	bls.n	80110e4 <xTaskPriorityDisinherit+0xac>
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110e0:	4a0c      	ldr	r2, [pc, #48]	; (8011114 <xTaskPriorityDisinherit+0xdc>)
 80110e2:	6013      	str	r3, [r2, #0]
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e8:	4613      	mov	r3, r2
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	4413      	add	r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	4a09      	ldr	r2, [pc, #36]	; (8011118 <xTaskPriorityDisinherit+0xe0>)
 80110f2:	441a      	add	r2, r3
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	3304      	adds	r3, #4
 80110f8:	4619      	mov	r1, r3
 80110fa:	4610      	mov	r0, r2
 80110fc:	f7fe fbd3 	bl	800f8a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011100:	2301      	movs	r3, #1
 8011102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011104:	697b      	ldr	r3, [r7, #20]
	}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20003ecc 	.word	0x20003ecc
 8011114:	200043a8 	.word	0x200043a8
 8011118:	20003ed0 	.word	0x20003ed0

0801111c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011126:	4b21      	ldr	r3, [pc, #132]	; (80111ac <prvAddCurrentTaskToDelayedList+0x90>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801112c:	4b20      	ldr	r3, [pc, #128]	; (80111b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	3304      	adds	r3, #4
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe fc14 	bl	800f960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113e:	d10a      	bne.n	8011156 <prvAddCurrentTaskToDelayedList+0x3a>
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d007      	beq.n	8011156 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011146:	4b1a      	ldr	r3, [pc, #104]	; (80111b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	3304      	adds	r3, #4
 801114c:	4619      	mov	r1, r3
 801114e:	4819      	ldr	r0, [pc, #100]	; (80111b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8011150:	f7fe fba9 	bl	800f8a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011154:	e026      	b.n	80111a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011156:	68fa      	ldr	r2, [r7, #12]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	4413      	add	r3, r2
 801115c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801115e:	4b14      	ldr	r3, [pc, #80]	; (80111b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	68ba      	ldr	r2, [r7, #8]
 8011164:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011166:	68ba      	ldr	r2, [r7, #8]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	429a      	cmp	r2, r3
 801116c:	d209      	bcs.n	8011182 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801116e:	4b12      	ldr	r3, [pc, #72]	; (80111b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	4b0f      	ldr	r3, [pc, #60]	; (80111b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	3304      	adds	r3, #4
 8011178:	4619      	mov	r1, r3
 801117a:	4610      	mov	r0, r2
 801117c:	f7fe fbb7 	bl	800f8ee <vListInsert>
}
 8011180:	e010      	b.n	80111a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011182:	4b0e      	ldr	r3, [pc, #56]	; (80111bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	4b0a      	ldr	r3, [pc, #40]	; (80111b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3304      	adds	r3, #4
 801118c:	4619      	mov	r1, r3
 801118e:	4610      	mov	r0, r2
 8011190:	f7fe fbad 	bl	800f8ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011194:	4b0a      	ldr	r3, [pc, #40]	; (80111c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	429a      	cmp	r2, r3
 801119c:	d202      	bcs.n	80111a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801119e:	4a08      	ldr	r2, [pc, #32]	; (80111c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	6013      	str	r3, [r2, #0]
}
 80111a4:	bf00      	nop
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	200043a4 	.word	0x200043a4
 80111b0:	20003ecc 	.word	0x20003ecc
 80111b4:	2000438c 	.word	0x2000438c
 80111b8:	2000435c 	.word	0x2000435c
 80111bc:	20004358 	.word	0x20004358
 80111c0:	200043c0 	.word	0x200043c0

080111c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b08a      	sub	sp, #40	; 0x28
 80111c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80111ca:	2300      	movs	r3, #0
 80111cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80111ce:	f000 fb15 	bl	80117fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80111d2:	4b1d      	ldr	r3, [pc, #116]	; (8011248 <xTimerCreateTimerTask+0x84>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d021      	beq.n	801121e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80111da:	2300      	movs	r3, #0
 80111dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80111de:	2300      	movs	r3, #0
 80111e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80111e2:	1d3a      	adds	r2, r7, #4
 80111e4:	f107 0108 	add.w	r1, r7, #8
 80111e8:	f107 030c 	add.w	r3, r7, #12
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fe fb13 	bl	800f818 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80111f2:	6879      	ldr	r1, [r7, #4]
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	68fa      	ldr	r2, [r7, #12]
 80111f8:	9202      	str	r2, [sp, #8]
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	2302      	movs	r3, #2
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	2300      	movs	r3, #0
 8011202:	460a      	mov	r2, r1
 8011204:	4911      	ldr	r1, [pc, #68]	; (801124c <xTimerCreateTimerTask+0x88>)
 8011206:	4812      	ldr	r0, [pc, #72]	; (8011250 <xTimerCreateTimerTask+0x8c>)
 8011208:	f7ff f8de 	bl	80103c8 <xTaskCreateStatic>
 801120c:	4603      	mov	r3, r0
 801120e:	4a11      	ldr	r2, [pc, #68]	; (8011254 <xTimerCreateTimerTask+0x90>)
 8011210:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011212:	4b10      	ldr	r3, [pc, #64]	; (8011254 <xTimerCreateTimerTask+0x90>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d001      	beq.n	801121e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801121a:	2301      	movs	r3, #1
 801121c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d10c      	bne.n	801123e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8011224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011228:	b672      	cpsid	i
 801122a:	f383 8811 	msr	BASEPRI, r3
 801122e:	f3bf 8f6f 	isb	sy
 8011232:	f3bf 8f4f 	dsb	sy
 8011236:	b662      	cpsie	i
 8011238:	613b      	str	r3, [r7, #16]
}
 801123a:	bf00      	nop
 801123c:	e7fe      	b.n	801123c <xTimerCreateTimerTask+0x78>
	return xReturn;
 801123e:	697b      	ldr	r3, [r7, #20]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3718      	adds	r7, #24
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	200043fc 	.word	0x200043fc
 801124c:	08014dc0 	.word	0x08014dc0
 8011250:	08011395 	.word	0x08011395
 8011254:	20004400 	.word	0x20004400

08011258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b08a      	sub	sp, #40	; 0x28
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011266:	2300      	movs	r3, #0
 8011268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d10c      	bne.n	801128a <xTimerGenericCommand+0x32>
	__asm volatile
 8011270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011274:	b672      	cpsid	i
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	b662      	cpsie	i
 8011284:	623b      	str	r3, [r7, #32]
}
 8011286:	bf00      	nop
 8011288:	e7fe      	b.n	8011288 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801128a:	4b1a      	ldr	r3, [pc, #104]	; (80112f4 <xTimerGenericCommand+0x9c>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d02a      	beq.n	80112e8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	2b05      	cmp	r3, #5
 80112a2:	dc18      	bgt.n	80112d6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80112a4:	f7ff feaa 	bl	8010ffc <xTaskGetSchedulerState>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b02      	cmp	r3, #2
 80112ac:	d109      	bne.n	80112c2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80112ae:	4b11      	ldr	r3, [pc, #68]	; (80112f4 <xTimerGenericCommand+0x9c>)
 80112b0:	6818      	ldr	r0, [r3, #0]
 80112b2:	f107 0110 	add.w	r1, r7, #16
 80112b6:	2300      	movs	r3, #0
 80112b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112ba:	f7fe fc8b 	bl	800fbd4 <xQueueGenericSend>
 80112be:	6278      	str	r0, [r7, #36]	; 0x24
 80112c0:	e012      	b.n	80112e8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80112c2:	4b0c      	ldr	r3, [pc, #48]	; (80112f4 <xTimerGenericCommand+0x9c>)
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	f107 0110 	add.w	r1, r7, #16
 80112ca:	2300      	movs	r3, #0
 80112cc:	2200      	movs	r2, #0
 80112ce:	f7fe fc81 	bl	800fbd4 <xQueueGenericSend>
 80112d2:	6278      	str	r0, [r7, #36]	; 0x24
 80112d4:	e008      	b.n	80112e8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80112d6:	4b07      	ldr	r3, [pc, #28]	; (80112f4 <xTimerGenericCommand+0x9c>)
 80112d8:	6818      	ldr	r0, [r3, #0]
 80112da:	f107 0110 	add.w	r1, r7, #16
 80112de:	2300      	movs	r3, #0
 80112e0:	683a      	ldr	r2, [r7, #0]
 80112e2:	f7fe fd7d 	bl	800fde0 <xQueueGenericSendFromISR>
 80112e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80112e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3728      	adds	r7, #40	; 0x28
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	200043fc 	.word	0x200043fc

080112f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b088      	sub	sp, #32
 80112fc:	af02      	add	r7, sp, #8
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011302:	4b23      	ldr	r3, [pc, #140]	; (8011390 <prvProcessExpiredTimer+0x98>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	3304      	adds	r3, #4
 8011310:	4618      	mov	r0, r3
 8011312:	f7fe fb25 	bl	800f960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801131c:	f003 0304 	and.w	r3, r3, #4
 8011320:	2b00      	cmp	r3, #0
 8011322:	d024      	beq.n	801136e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	699a      	ldr	r2, [r3, #24]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	18d1      	adds	r1, r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	683a      	ldr	r2, [r7, #0]
 8011330:	6978      	ldr	r0, [r7, #20]
 8011332:	f000 f8d3 	bl	80114dc <prvInsertTimerInActiveList>
 8011336:	4603      	mov	r3, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d021      	beq.n	8011380 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801133c:	2300      	movs	r3, #0
 801133e:	9300      	str	r3, [sp, #0]
 8011340:	2300      	movs	r3, #0
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	2100      	movs	r1, #0
 8011346:	6978      	ldr	r0, [r7, #20]
 8011348:	f7ff ff86 	bl	8011258 <xTimerGenericCommand>
 801134c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d115      	bne.n	8011380 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011358:	b672      	cpsid	i
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
 8011366:	b662      	cpsie	i
 8011368:	60fb      	str	r3, [r7, #12]
}
 801136a:	bf00      	nop
 801136c:	e7fe      	b.n	801136c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011374:	f023 0301 	bic.w	r3, r3, #1
 8011378:	b2da      	uxtb	r2, r3
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	6a1b      	ldr	r3, [r3, #32]
 8011384:	6978      	ldr	r0, [r7, #20]
 8011386:	4798      	blx	r3
}
 8011388:	bf00      	nop
 801138a:	3718      	adds	r7, #24
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	200043f4 	.word	0x200043f4

08011394 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801139c:	f107 0308 	add.w	r3, r7, #8
 80113a0:	4618      	mov	r0, r3
 80113a2:	f000 f857 	bl	8011454 <prvGetNextExpireTime>
 80113a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	4619      	mov	r1, r3
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f000 f803 	bl	80113b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80113b2:	f000 f8d5 	bl	8011560 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80113b6:	e7f1      	b.n	801139c <prvTimerTask+0x8>

080113b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80113c2:	f7ff fa15 	bl	80107f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80113c6:	f107 0308 	add.w	r3, r7, #8
 80113ca:	4618      	mov	r0, r3
 80113cc:	f000 f866 	bl	801149c <prvSampleTimeNow>
 80113d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d130      	bne.n	801143a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d10a      	bne.n	80113f4 <prvProcessTimerOrBlockTask+0x3c>
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d806      	bhi.n	80113f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80113e6:	f7ff fa11 	bl	801080c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80113ea:	68f9      	ldr	r1, [r7, #12]
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f7ff ff83 	bl	80112f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80113f2:	e024      	b.n	801143e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d008      	beq.n	801140c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80113fa:	4b13      	ldr	r3, [pc, #76]	; (8011448 <prvProcessTimerOrBlockTask+0x90>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d101      	bne.n	8011408 <prvProcessTimerOrBlockTask+0x50>
 8011404:	2301      	movs	r3, #1
 8011406:	e000      	b.n	801140a <prvProcessTimerOrBlockTask+0x52>
 8011408:	2300      	movs	r3, #0
 801140a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801140c:	4b0f      	ldr	r3, [pc, #60]	; (801144c <prvProcessTimerOrBlockTask+0x94>)
 801140e:	6818      	ldr	r0, [r3, #0]
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	1ad3      	subs	r3, r2, r3
 8011416:	683a      	ldr	r2, [r7, #0]
 8011418:	4619      	mov	r1, r3
 801141a:	f7fe ffa1 	bl	8010360 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801141e:	f7ff f9f5 	bl	801080c <xTaskResumeAll>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d10a      	bne.n	801143e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011428:	4b09      	ldr	r3, [pc, #36]	; (8011450 <prvProcessTimerOrBlockTask+0x98>)
 801142a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801142e:	601a      	str	r2, [r3, #0]
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	f3bf 8f6f 	isb	sy
}
 8011438:	e001      	b.n	801143e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801143a:	f7ff f9e7 	bl	801080c <xTaskResumeAll>
}
 801143e:	bf00      	nop
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	200043f8 	.word	0x200043f8
 801144c:	200043fc 	.word	0x200043fc
 8011450:	e000ed04 	.word	0xe000ed04

08011454 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011454:	b480      	push	{r7}
 8011456:	b085      	sub	sp, #20
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801145c:	4b0e      	ldr	r3, [pc, #56]	; (8011498 <prvGetNextExpireTime+0x44>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d101      	bne.n	801146a <prvGetNextExpireTime+0x16>
 8011466:	2201      	movs	r2, #1
 8011468:	e000      	b.n	801146c <prvGetNextExpireTime+0x18>
 801146a:	2200      	movs	r2, #0
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d105      	bne.n	8011484 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011478:	4b07      	ldr	r3, [pc, #28]	; (8011498 <prvGetNextExpireTime+0x44>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	60fb      	str	r3, [r7, #12]
 8011482:	e001      	b.n	8011488 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011484:	2300      	movs	r3, #0
 8011486:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011488:	68fb      	ldr	r3, [r7, #12]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3714      	adds	r7, #20
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	200043f4 	.word	0x200043f4

0801149c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80114a4:	f7ff fa52 	bl	801094c <xTaskGetTickCount>
 80114a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80114aa:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <prvSampleTimeNow+0x3c>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d205      	bcs.n	80114c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80114b4:	f000 f93c 	bl	8011730 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2201      	movs	r2, #1
 80114bc:	601a      	str	r2, [r3, #0]
 80114be:	e002      	b.n	80114c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80114c6:	4a04      	ldr	r2, [pc, #16]	; (80114d8 <prvSampleTimeNow+0x3c>)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80114cc:	68fb      	ldr	r3, [r7, #12]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20004404 	.word	0x20004404

080114dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b086      	sub	sp, #24
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
 80114e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80114ea:	2300      	movs	r3, #0
 80114ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d812      	bhi.n	8011528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	1ad2      	subs	r2, r2, r3
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	699b      	ldr	r3, [r3, #24]
 801150c:	429a      	cmp	r2, r3
 801150e:	d302      	bcc.n	8011516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011510:	2301      	movs	r3, #1
 8011512:	617b      	str	r3, [r7, #20]
 8011514:	e01b      	b.n	801154e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011516:	4b10      	ldr	r3, [pc, #64]	; (8011558 <prvInsertTimerInActiveList+0x7c>)
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	3304      	adds	r3, #4
 801151e:	4619      	mov	r1, r3
 8011520:	4610      	mov	r0, r2
 8011522:	f7fe f9e4 	bl	800f8ee <vListInsert>
 8011526:	e012      	b.n	801154e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	429a      	cmp	r2, r3
 801152e:	d206      	bcs.n	801153e <prvInsertTimerInActiveList+0x62>
 8011530:	68ba      	ldr	r2, [r7, #8]
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	429a      	cmp	r2, r3
 8011536:	d302      	bcc.n	801153e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011538:	2301      	movs	r3, #1
 801153a:	617b      	str	r3, [r7, #20]
 801153c:	e007      	b.n	801154e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801153e:	4b07      	ldr	r3, [pc, #28]	; (801155c <prvInsertTimerInActiveList+0x80>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	3304      	adds	r3, #4
 8011546:	4619      	mov	r1, r3
 8011548:	4610      	mov	r0, r2
 801154a:	f7fe f9d0 	bl	800f8ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 801154e:	697b      	ldr	r3, [r7, #20]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3718      	adds	r7, #24
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	200043f8 	.word	0x200043f8
 801155c:	200043f4 	.word	0x200043f4

08011560 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b08e      	sub	sp, #56	; 0x38
 8011564:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011566:	e0d0      	b.n	801170a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	da1a      	bge.n	80115a4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801156e:	1d3b      	adds	r3, r7, #4
 8011570:	3304      	adds	r3, #4
 8011572:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	2b00      	cmp	r3, #0
 8011578:	d10c      	bne.n	8011594 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157e:	b672      	cpsid	i
 8011580:	f383 8811 	msr	BASEPRI, r3
 8011584:	f3bf 8f6f 	isb	sy
 8011588:	f3bf 8f4f 	dsb	sy
 801158c:	b662      	cpsie	i
 801158e:	61fb      	str	r3, [r7, #28]
}
 8011590:	bf00      	nop
 8011592:	e7fe      	b.n	8011592 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801159a:	6850      	ldr	r0, [r2, #4]
 801159c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801159e:	6892      	ldr	r2, [r2, #8]
 80115a0:	4611      	mov	r1, r2
 80115a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f2c0 80af 	blt.w	801170a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80115b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b2:	695b      	ldr	r3, [r3, #20]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d004      	beq.n	80115c2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ba:	3304      	adds	r3, #4
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fe f9cf 	bl	800f960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115c2:	463b      	mov	r3, r7
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff ff69 	bl	801149c <prvSampleTimeNow>
 80115ca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b09      	cmp	r3, #9
 80115d0:	f200 809a 	bhi.w	8011708 <prvProcessReceivedCommands+0x1a8>
 80115d4:	a201      	add	r2, pc, #4	; (adr r2, 80115dc <prvProcessReceivedCommands+0x7c>)
 80115d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115da:	bf00      	nop
 80115dc:	08011605 	.word	0x08011605
 80115e0:	08011605 	.word	0x08011605
 80115e4:	08011605 	.word	0x08011605
 80115e8:	0801167d 	.word	0x0801167d
 80115ec:	08011691 	.word	0x08011691
 80115f0:	080116df 	.word	0x080116df
 80115f4:	08011605 	.word	0x08011605
 80115f8:	08011605 	.word	0x08011605
 80115fc:	0801167d 	.word	0x0801167d
 8011600:	08011691 	.word	0x08011691
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801160a:	f043 0301 	orr.w	r3, r3, #1
 801160e:	b2da      	uxtb	r2, r3
 8011610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011616:	68ba      	ldr	r2, [r7, #8]
 8011618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161a:	699b      	ldr	r3, [r3, #24]
 801161c:	18d1      	adds	r1, r2, r3
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011624:	f7ff ff5a 	bl	80114dc <prvInsertTimerInActiveList>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d06d      	beq.n	801170a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011630:	6a1b      	ldr	r3, [r3, #32]
 8011632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011634:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801163c:	f003 0304 	and.w	r3, r3, #4
 8011640:	2b00      	cmp	r3, #0
 8011642:	d062      	beq.n	801170a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011644:	68ba      	ldr	r2, [r7, #8]
 8011646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011648:	699b      	ldr	r3, [r3, #24]
 801164a:	441a      	add	r2, r3
 801164c:	2300      	movs	r3, #0
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	2300      	movs	r3, #0
 8011652:	2100      	movs	r1, #0
 8011654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011656:	f7ff fdff 	bl	8011258 <xTimerGenericCommand>
 801165a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801165c:	6a3b      	ldr	r3, [r7, #32]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d153      	bne.n	801170a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8011662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011666:	b672      	cpsid	i
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	b662      	cpsie	i
 8011676:	61bb      	str	r3, [r7, #24]
}
 8011678:	bf00      	nop
 801167a:	e7fe      	b.n	801167a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011682:	f023 0301 	bic.w	r3, r3, #1
 8011686:	b2da      	uxtb	r2, r3
 8011688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801168e:	e03c      	b.n	801170a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011696:	f043 0301 	orr.w	r3, r3, #1
 801169a:	b2da      	uxtb	r2, r3
 801169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80116a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116aa:	699b      	ldr	r3, [r3, #24]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d10c      	bne.n	80116ca <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80116b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b4:	b672      	cpsid	i
 80116b6:	f383 8811 	msr	BASEPRI, r3
 80116ba:	f3bf 8f6f 	isb	sy
 80116be:	f3bf 8f4f 	dsb	sy
 80116c2:	b662      	cpsie	i
 80116c4:	617b      	str	r3, [r7, #20]
}
 80116c6:	bf00      	nop
 80116c8:	e7fe      	b.n	80116c8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80116ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116cc:	699a      	ldr	r2, [r3, #24]
 80116ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d0:	18d1      	adds	r1, r2, r3
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116d8:	f7ff ff00 	bl	80114dc <prvInsertTimerInActiveList>
					break;
 80116dc:	e015      	b.n	801170a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80116de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116e4:	f003 0302 	and.w	r3, r3, #2
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d103      	bne.n	80116f4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80116ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116ee:	f000 fbcb 	bl	8011e88 <vPortFree>
 80116f2:	e00a      	b.n	801170a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80116f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116fa:	f023 0301 	bic.w	r3, r3, #1
 80116fe:	b2da      	uxtb	r2, r3
 8011700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011706:	e000      	b.n	801170a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8011708:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801170a:	4b08      	ldr	r3, [pc, #32]	; (801172c <prvProcessReceivedCommands+0x1cc>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	1d39      	adds	r1, r7, #4
 8011710:	2200      	movs	r2, #0
 8011712:	4618      	mov	r0, r3
 8011714:	f7fe fc04 	bl	800ff20 <xQueueReceive>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	f47f af24 	bne.w	8011568 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011720:	bf00      	nop
 8011722:	bf00      	nop
 8011724:	3730      	adds	r7, #48	; 0x30
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	200043fc 	.word	0x200043fc

08011730 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b088      	sub	sp, #32
 8011734:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011736:	e04a      	b.n	80117ce <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011738:	4b2e      	ldr	r3, [pc, #184]	; (80117f4 <prvSwitchTimerLists+0xc4>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011742:	4b2c      	ldr	r3, [pc, #176]	; (80117f4 <prvSwitchTimerLists+0xc4>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	3304      	adds	r3, #4
 8011750:	4618      	mov	r0, r3
 8011752:	f7fe f905 	bl	800f960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6a1b      	ldr	r3, [r3, #32]
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011764:	f003 0304 	and.w	r3, r3, #4
 8011768:	2b00      	cmp	r3, #0
 801176a:	d030      	beq.n	80117ce <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	699b      	ldr	r3, [r3, #24]
 8011770:	693a      	ldr	r2, [r7, #16]
 8011772:	4413      	add	r3, r2
 8011774:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011776:	68ba      	ldr	r2, [r7, #8]
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	429a      	cmp	r2, r3
 801177c:	d90e      	bls.n	801179c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801178a:	4b1a      	ldr	r3, [pc, #104]	; (80117f4 <prvSwitchTimerLists+0xc4>)
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	3304      	adds	r3, #4
 8011792:	4619      	mov	r1, r3
 8011794:	4610      	mov	r0, r2
 8011796:	f7fe f8aa 	bl	800f8ee <vListInsert>
 801179a:	e018      	b.n	80117ce <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801179c:	2300      	movs	r3, #0
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	2300      	movs	r3, #0
 80117a2:	693a      	ldr	r2, [r7, #16]
 80117a4:	2100      	movs	r1, #0
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f7ff fd56 	bl	8011258 <xTimerGenericCommand>
 80117ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d10c      	bne.n	80117ce <prvSwitchTimerLists+0x9e>
	__asm volatile
 80117b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b8:	b672      	cpsid	i
 80117ba:	f383 8811 	msr	BASEPRI, r3
 80117be:	f3bf 8f6f 	isb	sy
 80117c2:	f3bf 8f4f 	dsb	sy
 80117c6:	b662      	cpsie	i
 80117c8:	603b      	str	r3, [r7, #0]
}
 80117ca:	bf00      	nop
 80117cc:	e7fe      	b.n	80117cc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80117ce:	4b09      	ldr	r3, [pc, #36]	; (80117f4 <prvSwitchTimerLists+0xc4>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d1af      	bne.n	8011738 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80117d8:	4b06      	ldr	r3, [pc, #24]	; (80117f4 <prvSwitchTimerLists+0xc4>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80117de:	4b06      	ldr	r3, [pc, #24]	; (80117f8 <prvSwitchTimerLists+0xc8>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	4a04      	ldr	r2, [pc, #16]	; (80117f4 <prvSwitchTimerLists+0xc4>)
 80117e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80117e6:	4a04      	ldr	r2, [pc, #16]	; (80117f8 <prvSwitchTimerLists+0xc8>)
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	6013      	str	r3, [r2, #0]
}
 80117ec:	bf00      	nop
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	200043f4 	.word	0x200043f4
 80117f8:	200043f8 	.word	0x200043f8

080117fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011802:	f000 f94b 	bl	8011a9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011806:	4b15      	ldr	r3, [pc, #84]	; (801185c <prvCheckForValidListAndQueue+0x60>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d120      	bne.n	8011850 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801180e:	4814      	ldr	r0, [pc, #80]	; (8011860 <prvCheckForValidListAndQueue+0x64>)
 8011810:	f7fe f81c 	bl	800f84c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011814:	4813      	ldr	r0, [pc, #76]	; (8011864 <prvCheckForValidListAndQueue+0x68>)
 8011816:	f7fe f819 	bl	800f84c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801181a:	4b13      	ldr	r3, [pc, #76]	; (8011868 <prvCheckForValidListAndQueue+0x6c>)
 801181c:	4a10      	ldr	r2, [pc, #64]	; (8011860 <prvCheckForValidListAndQueue+0x64>)
 801181e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011820:	4b12      	ldr	r3, [pc, #72]	; (801186c <prvCheckForValidListAndQueue+0x70>)
 8011822:	4a10      	ldr	r2, [pc, #64]	; (8011864 <prvCheckForValidListAndQueue+0x68>)
 8011824:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011826:	2300      	movs	r3, #0
 8011828:	9300      	str	r3, [sp, #0]
 801182a:	4b11      	ldr	r3, [pc, #68]	; (8011870 <prvCheckForValidListAndQueue+0x74>)
 801182c:	4a11      	ldr	r2, [pc, #68]	; (8011874 <prvCheckForValidListAndQueue+0x78>)
 801182e:	2110      	movs	r1, #16
 8011830:	200a      	movs	r0, #10
 8011832:	f7fe f929 	bl	800fa88 <xQueueGenericCreateStatic>
 8011836:	4603      	mov	r3, r0
 8011838:	4a08      	ldr	r2, [pc, #32]	; (801185c <prvCheckForValidListAndQueue+0x60>)
 801183a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801183c:	4b07      	ldr	r3, [pc, #28]	; (801185c <prvCheckForValidListAndQueue+0x60>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d005      	beq.n	8011850 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011844:	4b05      	ldr	r3, [pc, #20]	; (801185c <prvCheckForValidListAndQueue+0x60>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	490b      	ldr	r1, [pc, #44]	; (8011878 <prvCheckForValidListAndQueue+0x7c>)
 801184a:	4618      	mov	r0, r3
 801184c:	f7fe fd5e 	bl	801030c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011850:	f000 f958 	bl	8011b04 <vPortExitCritical>
}
 8011854:	bf00      	nop
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	200043fc 	.word	0x200043fc
 8011860:	200043cc 	.word	0x200043cc
 8011864:	200043e0 	.word	0x200043e0
 8011868:	200043f4 	.word	0x200043f4
 801186c:	200043f8 	.word	0x200043f8
 8011870:	200044a8 	.word	0x200044a8
 8011874:	20004408 	.word	0x20004408
 8011878:	08014dc8 	.word	0x08014dc8

0801187c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	3b04      	subs	r3, #4
 801188c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	3b04      	subs	r3, #4
 801189a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	f023 0201 	bic.w	r2, r3, #1
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	3b04      	subs	r3, #4
 80118aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80118ac:	4a0c      	ldr	r2, [pc, #48]	; (80118e0 <pxPortInitialiseStack+0x64>)
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	3b14      	subs	r3, #20
 80118b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	3b04      	subs	r3, #4
 80118c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f06f 0202 	mvn.w	r2, #2
 80118ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	3b20      	subs	r3, #32
 80118d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80118d2:	68fb      	ldr	r3, [r7, #12]
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr
 80118e0:	080118e5 	.word	0x080118e5

080118e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80118e4:	b480      	push	{r7}
 80118e6:	b085      	sub	sp, #20
 80118e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80118ee:	4b14      	ldr	r3, [pc, #80]	; (8011940 <prvTaskExitError+0x5c>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f6:	d00c      	beq.n	8011912 <prvTaskExitError+0x2e>
	__asm volatile
 80118f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fc:	b672      	cpsid	i
 80118fe:	f383 8811 	msr	BASEPRI, r3
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	f3bf 8f4f 	dsb	sy
 801190a:	b662      	cpsie	i
 801190c:	60fb      	str	r3, [r7, #12]
}
 801190e:	bf00      	nop
 8011910:	e7fe      	b.n	8011910 <prvTaskExitError+0x2c>
	__asm volatile
 8011912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011916:	b672      	cpsid	i
 8011918:	f383 8811 	msr	BASEPRI, r3
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	b662      	cpsie	i
 8011926:	60bb      	str	r3, [r7, #8]
}
 8011928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801192a:	bf00      	nop
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d0fc      	beq.n	801192c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011932:	bf00      	nop
 8011934:	bf00      	nop
 8011936:	3714      	adds	r7, #20
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	2000025c 	.word	0x2000025c
	...

08011950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011950:	4b07      	ldr	r3, [pc, #28]	; (8011970 <pxCurrentTCBConst2>)
 8011952:	6819      	ldr	r1, [r3, #0]
 8011954:	6808      	ldr	r0, [r1, #0]
 8011956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195a:	f380 8809 	msr	PSP, r0
 801195e:	f3bf 8f6f 	isb	sy
 8011962:	f04f 0000 	mov.w	r0, #0
 8011966:	f380 8811 	msr	BASEPRI, r0
 801196a:	4770      	bx	lr
 801196c:	f3af 8000 	nop.w

08011970 <pxCurrentTCBConst2>:
 8011970:	20003ecc 	.word	0x20003ecc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011974:	bf00      	nop
 8011976:	bf00      	nop

08011978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011978:	4808      	ldr	r0, [pc, #32]	; (801199c <prvPortStartFirstTask+0x24>)
 801197a:	6800      	ldr	r0, [r0, #0]
 801197c:	6800      	ldr	r0, [r0, #0]
 801197e:	f380 8808 	msr	MSP, r0
 8011982:	f04f 0000 	mov.w	r0, #0
 8011986:	f380 8814 	msr	CONTROL, r0
 801198a:	b662      	cpsie	i
 801198c:	b661      	cpsie	f
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	f3bf 8f6f 	isb	sy
 8011996:	df00      	svc	0
 8011998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801199a:	bf00      	nop
 801199c:	e000ed08 	.word	0xe000ed08

080119a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80119a6:	4b37      	ldr	r3, [pc, #220]	; (8011a84 <xPortStartScheduler+0xe4>)
 80119a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	22ff      	movs	r2, #255	; 0xff
 80119b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	b2db      	uxtb	r3, r3
 80119be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80119c0:	78fb      	ldrb	r3, [r7, #3]
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80119c8:	b2da      	uxtb	r2, r3
 80119ca:	4b2f      	ldr	r3, [pc, #188]	; (8011a88 <xPortStartScheduler+0xe8>)
 80119cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80119ce:	4b2f      	ldr	r3, [pc, #188]	; (8011a8c <xPortStartScheduler+0xec>)
 80119d0:	2207      	movs	r2, #7
 80119d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119d4:	e009      	b.n	80119ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80119d6:	4b2d      	ldr	r3, [pc, #180]	; (8011a8c <xPortStartScheduler+0xec>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	3b01      	subs	r3, #1
 80119dc:	4a2b      	ldr	r2, [pc, #172]	; (8011a8c <xPortStartScheduler+0xec>)
 80119de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80119e0:	78fb      	ldrb	r3, [r7, #3]
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119ea:	78fb      	ldrb	r3, [r7, #3]
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119f2:	2b80      	cmp	r3, #128	; 0x80
 80119f4:	d0ef      	beq.n	80119d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80119f6:	4b25      	ldr	r3, [pc, #148]	; (8011a8c <xPortStartScheduler+0xec>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f1c3 0307 	rsb	r3, r3, #7
 80119fe:	2b04      	cmp	r3, #4
 8011a00:	d00c      	beq.n	8011a1c <xPortStartScheduler+0x7c>
	__asm volatile
 8011a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a06:	b672      	cpsid	i
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	b662      	cpsie	i
 8011a16:	60bb      	str	r3, [r7, #8]
}
 8011a18:	bf00      	nop
 8011a1a:	e7fe      	b.n	8011a1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011a1c:	4b1b      	ldr	r3, [pc, #108]	; (8011a8c <xPortStartScheduler+0xec>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	021b      	lsls	r3, r3, #8
 8011a22:	4a1a      	ldr	r2, [pc, #104]	; (8011a8c <xPortStartScheduler+0xec>)
 8011a24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011a26:	4b19      	ldr	r3, [pc, #100]	; (8011a8c <xPortStartScheduler+0xec>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011a2e:	4a17      	ldr	r2, [pc, #92]	; (8011a8c <xPortStartScheduler+0xec>)
 8011a30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	b2da      	uxtb	r2, r3
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011a3a:	4b15      	ldr	r3, [pc, #84]	; (8011a90 <xPortStartScheduler+0xf0>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	4a14      	ldr	r2, [pc, #80]	; (8011a90 <xPortStartScheduler+0xf0>)
 8011a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011a44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011a46:	4b12      	ldr	r3, [pc, #72]	; (8011a90 <xPortStartScheduler+0xf0>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	4a11      	ldr	r2, [pc, #68]	; (8011a90 <xPortStartScheduler+0xf0>)
 8011a4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011a50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011a52:	f000 f8dd 	bl	8011c10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011a56:	4b0f      	ldr	r3, [pc, #60]	; (8011a94 <xPortStartScheduler+0xf4>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011a5c:	f000 f8fc 	bl	8011c58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011a60:	4b0d      	ldr	r3, [pc, #52]	; (8011a98 <xPortStartScheduler+0xf8>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a0c      	ldr	r2, [pc, #48]	; (8011a98 <xPortStartScheduler+0xf8>)
 8011a66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011a6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011a6c:	f7ff ff84 	bl	8011978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011a70:	f7ff f84a 	bl	8010b08 <vTaskSwitchContext>
	prvTaskExitError();
 8011a74:	f7ff ff36 	bl	80118e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011a78:	2300      	movs	r3, #0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	e000e400 	.word	0xe000e400
 8011a88:	200044f8 	.word	0x200044f8
 8011a8c:	200044fc 	.word	0x200044fc
 8011a90:	e000ed20 	.word	0xe000ed20
 8011a94:	2000025c 	.word	0x2000025c
 8011a98:	e000ef34 	.word	0xe000ef34

08011a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
	__asm volatile
 8011aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa6:	b672      	cpsid	i
 8011aa8:	f383 8811 	msr	BASEPRI, r3
 8011aac:	f3bf 8f6f 	isb	sy
 8011ab0:	f3bf 8f4f 	dsb	sy
 8011ab4:	b662      	cpsie	i
 8011ab6:	607b      	str	r3, [r7, #4]
}
 8011ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011aba:	4b10      	ldr	r3, [pc, #64]	; (8011afc <vPortEnterCritical+0x60>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3301      	adds	r3, #1
 8011ac0:	4a0e      	ldr	r2, [pc, #56]	; (8011afc <vPortEnterCritical+0x60>)
 8011ac2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011ac4:	4b0d      	ldr	r3, [pc, #52]	; (8011afc <vPortEnterCritical+0x60>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d111      	bne.n	8011af0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011acc:	4b0c      	ldr	r3, [pc, #48]	; (8011b00 <vPortEnterCritical+0x64>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d00c      	beq.n	8011af0 <vPortEnterCritical+0x54>
	__asm volatile
 8011ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ada:	b672      	cpsid	i
 8011adc:	f383 8811 	msr	BASEPRI, r3
 8011ae0:	f3bf 8f6f 	isb	sy
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	b662      	cpsie	i
 8011aea:	603b      	str	r3, [r7, #0]
}
 8011aec:	bf00      	nop
 8011aee:	e7fe      	b.n	8011aee <vPortEnterCritical+0x52>
	}
}
 8011af0:	bf00      	nop
 8011af2:	370c      	adds	r7, #12
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr
 8011afc:	2000025c 	.word	0x2000025c
 8011b00:	e000ed04 	.word	0xe000ed04

08011b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011b04:	b480      	push	{r7}
 8011b06:	b083      	sub	sp, #12
 8011b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011b0a:	4b13      	ldr	r3, [pc, #76]	; (8011b58 <vPortExitCritical+0x54>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d10c      	bne.n	8011b2c <vPortExitCritical+0x28>
	__asm volatile
 8011b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b16:	b672      	cpsid	i
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	b662      	cpsie	i
 8011b26:	607b      	str	r3, [r7, #4]
}
 8011b28:	bf00      	nop
 8011b2a:	e7fe      	b.n	8011b2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011b2c:	4b0a      	ldr	r3, [pc, #40]	; (8011b58 <vPortExitCritical+0x54>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	3b01      	subs	r3, #1
 8011b32:	4a09      	ldr	r2, [pc, #36]	; (8011b58 <vPortExitCritical+0x54>)
 8011b34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011b36:	4b08      	ldr	r3, [pc, #32]	; (8011b58 <vPortExitCritical+0x54>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d105      	bne.n	8011b4a <vPortExitCritical+0x46>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	f383 8811 	msr	BASEPRI, r3
}
 8011b48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011b4a:	bf00      	nop
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop
 8011b58:	2000025c 	.word	0x2000025c
 8011b5c:	00000000 	.word	0x00000000

08011b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b60:	f3ef 8009 	mrs	r0, PSP
 8011b64:	f3bf 8f6f 	isb	sy
 8011b68:	4b15      	ldr	r3, [pc, #84]	; (8011bc0 <pxCurrentTCBConst>)
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	f01e 0f10 	tst.w	lr, #16
 8011b70:	bf08      	it	eq
 8011b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b7a:	6010      	str	r0, [r2, #0]
 8011b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011b84:	b672      	cpsid	i
 8011b86:	f380 8811 	msr	BASEPRI, r0
 8011b8a:	f3bf 8f4f 	dsb	sy
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	b662      	cpsie	i
 8011b94:	f7fe ffb8 	bl	8010b08 <vTaskSwitchContext>
 8011b98:	f04f 0000 	mov.w	r0, #0
 8011b9c:	f380 8811 	msr	BASEPRI, r0
 8011ba0:	bc09      	pop	{r0, r3}
 8011ba2:	6819      	ldr	r1, [r3, #0]
 8011ba4:	6808      	ldr	r0, [r1, #0]
 8011ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011baa:	f01e 0f10 	tst.w	lr, #16
 8011bae:	bf08      	it	eq
 8011bb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011bb4:	f380 8809 	msr	PSP, r0
 8011bb8:	f3bf 8f6f 	isb	sy
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop

08011bc0 <pxCurrentTCBConst>:
 8011bc0:	20003ecc 	.word	0x20003ecc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011bc4:	bf00      	nop
 8011bc6:	bf00      	nop

08011bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8011bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd2:	b672      	cpsid	i
 8011bd4:	f383 8811 	msr	BASEPRI, r3
 8011bd8:	f3bf 8f6f 	isb	sy
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	b662      	cpsie	i
 8011be2:	607b      	str	r3, [r7, #4]
}
 8011be4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011be6:	f7fe fed3 	bl	8010990 <xTaskIncrementTick>
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d003      	beq.n	8011bf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011bf0:	4b06      	ldr	r3, [pc, #24]	; (8011c0c <SysTick_Handler+0x44>)
 8011bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bf6:	601a      	str	r2, [r3, #0]
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	f383 8811 	msr	BASEPRI, r3
}
 8011c02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011c04:	bf00      	nop
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	e000ed04 	.word	0xe000ed04

08011c10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011c10:	b480      	push	{r7}
 8011c12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011c14:	4b0b      	ldr	r3, [pc, #44]	; (8011c44 <vPortSetupTimerInterrupt+0x34>)
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011c1a:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <vPortSetupTimerInterrupt+0x38>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011c20:	4b0a      	ldr	r3, [pc, #40]	; (8011c4c <vPortSetupTimerInterrupt+0x3c>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4a0a      	ldr	r2, [pc, #40]	; (8011c50 <vPortSetupTimerInterrupt+0x40>)
 8011c26:	fba2 2303 	umull	r2, r3, r2, r3
 8011c2a:	099b      	lsrs	r3, r3, #6
 8011c2c:	4a09      	ldr	r2, [pc, #36]	; (8011c54 <vPortSetupTimerInterrupt+0x44>)
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011c32:	4b04      	ldr	r3, [pc, #16]	; (8011c44 <vPortSetupTimerInterrupt+0x34>)
 8011c34:	2207      	movs	r2, #7
 8011c36:	601a      	str	r2, [r3, #0]
}
 8011c38:	bf00      	nop
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	e000e010 	.word	0xe000e010
 8011c48:	e000e018 	.word	0xe000e018
 8011c4c:	20000250 	.word	0x20000250
 8011c50:	10624dd3 	.word	0x10624dd3
 8011c54:	e000e014 	.word	0xe000e014

08011c58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011c58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011c68 <vPortEnableVFP+0x10>
 8011c5c:	6801      	ldr	r1, [r0, #0]
 8011c5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011c62:	6001      	str	r1, [r0, #0]
 8011c64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011c66:	bf00      	nop
 8011c68:	e000ed88 	.word	0xe000ed88

08011c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c72:	f3ef 8305 	mrs	r3, IPSR
 8011c76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2b0f      	cmp	r3, #15
 8011c7c:	d916      	bls.n	8011cac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c7e:	4a19      	ldr	r2, [pc, #100]	; (8011ce4 <vPortValidateInterruptPriority+0x78>)
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	4413      	add	r3, r2
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011c88:	4b17      	ldr	r3, [pc, #92]	; (8011ce8 <vPortValidateInterruptPriority+0x7c>)
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	7afa      	ldrb	r2, [r7, #11]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d20c      	bcs.n	8011cac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c96:	b672      	cpsid	i
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	b662      	cpsie	i
 8011ca6:	607b      	str	r3, [r7, #4]
}
 8011ca8:	bf00      	nop
 8011caa:	e7fe      	b.n	8011caa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011cac:	4b0f      	ldr	r3, [pc, #60]	; (8011cec <vPortValidateInterruptPriority+0x80>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011cb4:	4b0e      	ldr	r3, [pc, #56]	; (8011cf0 <vPortValidateInterruptPriority+0x84>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d90c      	bls.n	8011cd6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8011cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc0:	b672      	cpsid	i
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	b662      	cpsie	i
 8011cd0:	603b      	str	r3, [r7, #0]
}
 8011cd2:	bf00      	nop
 8011cd4:	e7fe      	b.n	8011cd4 <vPortValidateInterruptPriority+0x68>
	}
 8011cd6:	bf00      	nop
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	e000e3f0 	.word	0xe000e3f0
 8011ce8:	200044f8 	.word	0x200044f8
 8011cec:	e000ed0c 	.word	0xe000ed0c
 8011cf0:	200044fc 	.word	0x200044fc

08011cf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b08a      	sub	sp, #40	; 0x28
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011d00:	f7fe fd76 	bl	80107f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011d04:	4b5b      	ldr	r3, [pc, #364]	; (8011e74 <pvPortMalloc+0x180>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d101      	bne.n	8011d10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011d0c:	f000 f91a 	bl	8011f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011d10:	4b59      	ldr	r3, [pc, #356]	; (8011e78 <pvPortMalloc+0x184>)
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	4013      	ands	r3, r2
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f040 8092 	bne.w	8011e42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d01f      	beq.n	8011d64 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011d24:	2208      	movs	r2, #8
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	4413      	add	r3, r2
 8011d2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f003 0307 	and.w	r3, r3, #7
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d016      	beq.n	8011d64 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f023 0307 	bic.w	r3, r3, #7
 8011d3c:	3308      	adds	r3, #8
 8011d3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f003 0307 	and.w	r3, r3, #7
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d00c      	beq.n	8011d64 <pvPortMalloc+0x70>
	__asm volatile
 8011d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4e:	b672      	cpsid	i
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	b662      	cpsie	i
 8011d5e:	617b      	str	r3, [r7, #20]
}
 8011d60:	bf00      	nop
 8011d62:	e7fe      	b.n	8011d62 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d06b      	beq.n	8011e42 <pvPortMalloc+0x14e>
 8011d6a:	4b44      	ldr	r3, [pc, #272]	; (8011e7c <pvPortMalloc+0x188>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d866      	bhi.n	8011e42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011d74:	4b42      	ldr	r3, [pc, #264]	; (8011e80 <pvPortMalloc+0x18c>)
 8011d76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011d78:	4b41      	ldr	r3, [pc, #260]	; (8011e80 <pvPortMalloc+0x18c>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d7e:	e004      	b.n	8011d8a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	687a      	ldr	r2, [r7, #4]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d903      	bls.n	8011d9c <pvPortMalloc+0xa8>
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d1f1      	bne.n	8011d80 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011d9c:	4b35      	ldr	r3, [pc, #212]	; (8011e74 <pvPortMalloc+0x180>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d04d      	beq.n	8011e42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011da6:	6a3b      	ldr	r3, [r7, #32]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	2208      	movs	r2, #8
 8011dac:	4413      	add	r3, r2
 8011dae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db2:	681a      	ldr	r2, [r3, #0]
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	685a      	ldr	r2, [r3, #4]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	1ad2      	subs	r2, r2, r3
 8011dc0:	2308      	movs	r3, #8
 8011dc2:	005b      	lsls	r3, r3, #1
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d921      	bls.n	8011e0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	4413      	add	r3, r2
 8011dce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	f003 0307 	and.w	r3, r3, #7
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00c      	beq.n	8011df4 <pvPortMalloc+0x100>
	__asm volatile
 8011dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dde:	b672      	cpsid	i
 8011de0:	f383 8811 	msr	BASEPRI, r3
 8011de4:	f3bf 8f6f 	isb	sy
 8011de8:	f3bf 8f4f 	dsb	sy
 8011dec:	b662      	cpsie	i
 8011dee:	613b      	str	r3, [r7, #16]
}
 8011df0:	bf00      	nop
 8011df2:	e7fe      	b.n	8011df2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df6:	685a      	ldr	r2, [r3, #4]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	1ad2      	subs	r2, r2, r3
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011e06:	69b8      	ldr	r0, [r7, #24]
 8011e08:	f000 f8fe 	bl	8012008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e0c:	4b1b      	ldr	r3, [pc, #108]	; (8011e7c <pvPortMalloc+0x188>)
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	1ad3      	subs	r3, r2, r3
 8011e16:	4a19      	ldr	r2, [pc, #100]	; (8011e7c <pvPortMalloc+0x188>)
 8011e18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e1a:	4b18      	ldr	r3, [pc, #96]	; (8011e7c <pvPortMalloc+0x188>)
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	4b19      	ldr	r3, [pc, #100]	; (8011e84 <pvPortMalloc+0x190>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d203      	bcs.n	8011e2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011e26:	4b15      	ldr	r3, [pc, #84]	; (8011e7c <pvPortMalloc+0x188>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4a16      	ldr	r2, [pc, #88]	; (8011e84 <pvPortMalloc+0x190>)
 8011e2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e30:	685a      	ldr	r2, [r3, #4]
 8011e32:	4b11      	ldr	r3, [pc, #68]	; (8011e78 <pvPortMalloc+0x184>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	431a      	orrs	r2, r3
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3e:	2200      	movs	r2, #0
 8011e40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011e42:	f7fe fce3 	bl	801080c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	f003 0307 	and.w	r3, r3, #7
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00c      	beq.n	8011e6a <pvPortMalloc+0x176>
	__asm volatile
 8011e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e54:	b672      	cpsid	i
 8011e56:	f383 8811 	msr	BASEPRI, r3
 8011e5a:	f3bf 8f6f 	isb	sy
 8011e5e:	f3bf 8f4f 	dsb	sy
 8011e62:	b662      	cpsie	i
 8011e64:	60fb      	str	r3, [r7, #12]
}
 8011e66:	bf00      	nop
 8011e68:	e7fe      	b.n	8011e68 <pvPortMalloc+0x174>
	return pvReturn;
 8011e6a:	69fb      	ldr	r3, [r7, #28]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3728      	adds	r7, #40	; 0x28
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	20008108 	.word	0x20008108
 8011e78:	20008114 	.word	0x20008114
 8011e7c:	2000810c 	.word	0x2000810c
 8011e80:	20008100 	.word	0x20008100
 8011e84:	20008110 	.word	0x20008110

08011e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d04c      	beq.n	8011f34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011e9a:	2308      	movs	r3, #8
 8011e9c:	425b      	negs	r3, r3
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	685a      	ldr	r2, [r3, #4]
 8011eac:	4b23      	ldr	r3, [pc, #140]	; (8011f3c <vPortFree+0xb4>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4013      	ands	r3, r2
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d10c      	bne.n	8011ed0 <vPortFree+0x48>
	__asm volatile
 8011eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eba:	b672      	cpsid	i
 8011ebc:	f383 8811 	msr	BASEPRI, r3
 8011ec0:	f3bf 8f6f 	isb	sy
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	b662      	cpsie	i
 8011eca:	60fb      	str	r3, [r7, #12]
}
 8011ecc:	bf00      	nop
 8011ece:	e7fe      	b.n	8011ece <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00c      	beq.n	8011ef2 <vPortFree+0x6a>
	__asm volatile
 8011ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011edc:	b672      	cpsid	i
 8011ede:	f383 8811 	msr	BASEPRI, r3
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	b662      	cpsie	i
 8011eec:	60bb      	str	r3, [r7, #8]
}
 8011eee:	bf00      	nop
 8011ef0:	e7fe      	b.n	8011ef0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	685a      	ldr	r2, [r3, #4]
 8011ef6:	4b11      	ldr	r3, [pc, #68]	; (8011f3c <vPortFree+0xb4>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4013      	ands	r3, r2
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d019      	beq.n	8011f34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d115      	bne.n	8011f34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	4b0b      	ldr	r3, [pc, #44]	; (8011f3c <vPortFree+0xb4>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	43db      	mvns	r3, r3
 8011f12:	401a      	ands	r2, r3
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011f18:	f7fe fc6a 	bl	80107f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	685a      	ldr	r2, [r3, #4]
 8011f20:	4b07      	ldr	r3, [pc, #28]	; (8011f40 <vPortFree+0xb8>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4413      	add	r3, r2
 8011f26:	4a06      	ldr	r2, [pc, #24]	; (8011f40 <vPortFree+0xb8>)
 8011f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011f2a:	6938      	ldr	r0, [r7, #16]
 8011f2c:	f000 f86c 	bl	8012008 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011f30:	f7fe fc6c 	bl	801080c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011f34:	bf00      	nop
 8011f36:	3718      	adds	r7, #24
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	20008114 	.word	0x20008114
 8011f40:	2000810c 	.word	0x2000810c

08011f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011f44:	b480      	push	{r7}
 8011f46:	b085      	sub	sp, #20
 8011f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011f50:	4b27      	ldr	r3, [pc, #156]	; (8011ff0 <prvHeapInit+0xac>)
 8011f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f003 0307 	and.w	r3, r3, #7
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00c      	beq.n	8011f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	3307      	adds	r3, #7
 8011f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f023 0307 	bic.w	r3, r3, #7
 8011f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011f6c:	68ba      	ldr	r2, [r7, #8]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	4a1f      	ldr	r2, [pc, #124]	; (8011ff0 <prvHeapInit+0xac>)
 8011f74:	4413      	add	r3, r2
 8011f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011f7c:	4a1d      	ldr	r2, [pc, #116]	; (8011ff4 <prvHeapInit+0xb0>)
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011f82:	4b1c      	ldr	r3, [pc, #112]	; (8011ff4 <prvHeapInit+0xb0>)
 8011f84:	2200      	movs	r2, #0
 8011f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	68ba      	ldr	r2, [r7, #8]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011f90:	2208      	movs	r2, #8
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	1a9b      	subs	r3, r3, r2
 8011f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f023 0307 	bic.w	r3, r3, #7
 8011f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	4a15      	ldr	r2, [pc, #84]	; (8011ff8 <prvHeapInit+0xb4>)
 8011fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011fa6:	4b14      	ldr	r3, [pc, #80]	; (8011ff8 <prvHeapInit+0xb4>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	2200      	movs	r2, #0
 8011fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011fae:	4b12      	ldr	r3, [pc, #72]	; (8011ff8 <prvHeapInit+0xb4>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	1ad2      	subs	r2, r2, r3
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011fc4:	4b0c      	ldr	r3, [pc, #48]	; (8011ff8 <prvHeapInit+0xb4>)
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	4a0a      	ldr	r2, [pc, #40]	; (8011ffc <prvHeapInit+0xb8>)
 8011fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	4a09      	ldr	r2, [pc, #36]	; (8012000 <prvHeapInit+0xbc>)
 8011fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011fdc:	4b09      	ldr	r3, [pc, #36]	; (8012004 <prvHeapInit+0xc0>)
 8011fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011fe2:	601a      	str	r2, [r3, #0]
}
 8011fe4:	bf00      	nop
 8011fe6:	3714      	adds	r7, #20
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr
 8011ff0:	20004500 	.word	0x20004500
 8011ff4:	20008100 	.word	0x20008100
 8011ff8:	20008108 	.word	0x20008108
 8011ffc:	20008110 	.word	0x20008110
 8012000:	2000810c 	.word	0x2000810c
 8012004:	20008114 	.word	0x20008114

08012008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012008:	b480      	push	{r7}
 801200a:	b085      	sub	sp, #20
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012010:	4b28      	ldr	r3, [pc, #160]	; (80120b4 <prvInsertBlockIntoFreeList+0xac>)
 8012012:	60fb      	str	r3, [r7, #12]
 8012014:	e002      	b.n	801201c <prvInsertBlockIntoFreeList+0x14>
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	60fb      	str	r3, [r7, #12]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	429a      	cmp	r2, r3
 8012024:	d8f7      	bhi.n	8012016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	4413      	add	r3, r2
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	429a      	cmp	r2, r3
 8012036:	d108      	bne.n	801204a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	685a      	ldr	r2, [r3, #4]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	441a      	add	r2, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	441a      	add	r2, r3
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	429a      	cmp	r2, r3
 801205c:	d118      	bne.n	8012090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	4b15      	ldr	r3, [pc, #84]	; (80120b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	429a      	cmp	r2, r3
 8012068:	d00d      	beq.n	8012086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	685a      	ldr	r2, [r3, #4]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	441a      	add	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	e008      	b.n	8012098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012086:	4b0c      	ldr	r3, [pc, #48]	; (80120b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012088:	681a      	ldr	r2, [r3, #0]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	601a      	str	r2, [r3, #0]
 801208e:	e003      	b.n	8012098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012098:	68fa      	ldr	r2, [r7, #12]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	429a      	cmp	r2, r3
 801209e:	d002      	beq.n	80120a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120a6:	bf00      	nop
 80120a8:	3714      	adds	r7, #20
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	20008100 	.word	0x20008100
 80120b8:	20008108 	.word	0x20008108

080120bc <__assert_func>:
 80120bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120be:	4614      	mov	r4, r2
 80120c0:	461a      	mov	r2, r3
 80120c2:	4b09      	ldr	r3, [pc, #36]	; (80120e8 <__assert_func+0x2c>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4605      	mov	r5, r0
 80120c8:	68d8      	ldr	r0, [r3, #12]
 80120ca:	b14c      	cbz	r4, 80120e0 <__assert_func+0x24>
 80120cc:	4b07      	ldr	r3, [pc, #28]	; (80120ec <__assert_func+0x30>)
 80120ce:	9100      	str	r1, [sp, #0]
 80120d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120d4:	4906      	ldr	r1, [pc, #24]	; (80120f0 <__assert_func+0x34>)
 80120d6:	462b      	mov	r3, r5
 80120d8:	f000 fa4a 	bl	8012570 <fiprintf>
 80120dc:	f000 fbc5 	bl	801286a <abort>
 80120e0:	4b04      	ldr	r3, [pc, #16]	; (80120f4 <__assert_func+0x38>)
 80120e2:	461c      	mov	r4, r3
 80120e4:	e7f3      	b.n	80120ce <__assert_func+0x12>
 80120e6:	bf00      	nop
 80120e8:	200002b8 	.word	0x200002b8
 80120ec:	08015438 	.word	0x08015438
 80120f0:	08015445 	.word	0x08015445
 80120f4:	08015473 	.word	0x08015473

080120f8 <atoi>:
 80120f8:	220a      	movs	r2, #10
 80120fa:	2100      	movs	r1, #0
 80120fc:	f000 b98a 	b.w	8012414 <strtol>

08012100 <calloc>:
 8012100:	4b02      	ldr	r3, [pc, #8]	; (801210c <calloc+0xc>)
 8012102:	460a      	mov	r2, r1
 8012104:	4601      	mov	r1, r0
 8012106:	6818      	ldr	r0, [r3, #0]
 8012108:	f000 b802 	b.w	8012110 <_calloc_r>
 801210c:	200002b8 	.word	0x200002b8

08012110 <_calloc_r>:
 8012110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012112:	fba1 2402 	umull	r2, r4, r1, r2
 8012116:	b94c      	cbnz	r4, 801212c <_calloc_r+0x1c>
 8012118:	4611      	mov	r1, r2
 801211a:	9201      	str	r2, [sp, #4]
 801211c:	f000 f83e 	bl	801219c <_malloc_r>
 8012120:	9a01      	ldr	r2, [sp, #4]
 8012122:	4605      	mov	r5, r0
 8012124:	b930      	cbnz	r0, 8012134 <_calloc_r+0x24>
 8012126:	4628      	mov	r0, r5
 8012128:	b003      	add	sp, #12
 801212a:	bd30      	pop	{r4, r5, pc}
 801212c:	220c      	movs	r2, #12
 801212e:	6002      	str	r2, [r0, #0]
 8012130:	2500      	movs	r5, #0
 8012132:	e7f8      	b.n	8012126 <_calloc_r+0x16>
 8012134:	4621      	mov	r1, r4
 8012136:	f000 fac0 	bl	80126ba <memset>
 801213a:	e7f4      	b.n	8012126 <_calloc_r+0x16>

0801213c <malloc>:
 801213c:	4b02      	ldr	r3, [pc, #8]	; (8012148 <malloc+0xc>)
 801213e:	4601      	mov	r1, r0
 8012140:	6818      	ldr	r0, [r3, #0]
 8012142:	f000 b82b 	b.w	801219c <_malloc_r>
 8012146:	bf00      	nop
 8012148:	200002b8 	.word	0x200002b8

0801214c <free>:
 801214c:	4b02      	ldr	r3, [pc, #8]	; (8012158 <free+0xc>)
 801214e:	4601      	mov	r1, r0
 8012150:	6818      	ldr	r0, [r3, #0]
 8012152:	f000 bb91 	b.w	8012878 <_free_r>
 8012156:	bf00      	nop
 8012158:	200002b8 	.word	0x200002b8

0801215c <sbrk_aligned>:
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	4e0e      	ldr	r6, [pc, #56]	; (8012198 <sbrk_aligned+0x3c>)
 8012160:	460c      	mov	r4, r1
 8012162:	6831      	ldr	r1, [r6, #0]
 8012164:	4605      	mov	r5, r0
 8012166:	b911      	cbnz	r1, 801216e <sbrk_aligned+0x12>
 8012168:	f000 fb1a 	bl	80127a0 <_sbrk_r>
 801216c:	6030      	str	r0, [r6, #0]
 801216e:	4621      	mov	r1, r4
 8012170:	4628      	mov	r0, r5
 8012172:	f000 fb15 	bl	80127a0 <_sbrk_r>
 8012176:	1c43      	adds	r3, r0, #1
 8012178:	d00a      	beq.n	8012190 <sbrk_aligned+0x34>
 801217a:	1cc4      	adds	r4, r0, #3
 801217c:	f024 0403 	bic.w	r4, r4, #3
 8012180:	42a0      	cmp	r0, r4
 8012182:	d007      	beq.n	8012194 <sbrk_aligned+0x38>
 8012184:	1a21      	subs	r1, r4, r0
 8012186:	4628      	mov	r0, r5
 8012188:	f000 fb0a 	bl	80127a0 <_sbrk_r>
 801218c:	3001      	adds	r0, #1
 801218e:	d101      	bne.n	8012194 <sbrk_aligned+0x38>
 8012190:	f04f 34ff 	mov.w	r4, #4294967295
 8012194:	4620      	mov	r0, r4
 8012196:	bd70      	pop	{r4, r5, r6, pc}
 8012198:	2000811c 	.word	0x2000811c

0801219c <_malloc_r>:
 801219c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121a0:	1ccd      	adds	r5, r1, #3
 80121a2:	f025 0503 	bic.w	r5, r5, #3
 80121a6:	3508      	adds	r5, #8
 80121a8:	2d0c      	cmp	r5, #12
 80121aa:	bf38      	it	cc
 80121ac:	250c      	movcc	r5, #12
 80121ae:	2d00      	cmp	r5, #0
 80121b0:	4607      	mov	r7, r0
 80121b2:	db01      	blt.n	80121b8 <_malloc_r+0x1c>
 80121b4:	42a9      	cmp	r1, r5
 80121b6:	d905      	bls.n	80121c4 <_malloc_r+0x28>
 80121b8:	230c      	movs	r3, #12
 80121ba:	603b      	str	r3, [r7, #0]
 80121bc:	2600      	movs	r6, #0
 80121be:	4630      	mov	r0, r6
 80121c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012298 <_malloc_r+0xfc>
 80121c8:	f000 f868 	bl	801229c <__malloc_lock>
 80121cc:	f8d8 3000 	ldr.w	r3, [r8]
 80121d0:	461c      	mov	r4, r3
 80121d2:	bb5c      	cbnz	r4, 801222c <_malloc_r+0x90>
 80121d4:	4629      	mov	r1, r5
 80121d6:	4638      	mov	r0, r7
 80121d8:	f7ff ffc0 	bl	801215c <sbrk_aligned>
 80121dc:	1c43      	adds	r3, r0, #1
 80121de:	4604      	mov	r4, r0
 80121e0:	d155      	bne.n	801228e <_malloc_r+0xf2>
 80121e2:	f8d8 4000 	ldr.w	r4, [r8]
 80121e6:	4626      	mov	r6, r4
 80121e8:	2e00      	cmp	r6, #0
 80121ea:	d145      	bne.n	8012278 <_malloc_r+0xdc>
 80121ec:	2c00      	cmp	r4, #0
 80121ee:	d048      	beq.n	8012282 <_malloc_r+0xe6>
 80121f0:	6823      	ldr	r3, [r4, #0]
 80121f2:	4631      	mov	r1, r6
 80121f4:	4638      	mov	r0, r7
 80121f6:	eb04 0903 	add.w	r9, r4, r3
 80121fa:	f000 fad1 	bl	80127a0 <_sbrk_r>
 80121fe:	4581      	cmp	r9, r0
 8012200:	d13f      	bne.n	8012282 <_malloc_r+0xe6>
 8012202:	6821      	ldr	r1, [r4, #0]
 8012204:	1a6d      	subs	r5, r5, r1
 8012206:	4629      	mov	r1, r5
 8012208:	4638      	mov	r0, r7
 801220a:	f7ff ffa7 	bl	801215c <sbrk_aligned>
 801220e:	3001      	adds	r0, #1
 8012210:	d037      	beq.n	8012282 <_malloc_r+0xe6>
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	442b      	add	r3, r5
 8012216:	6023      	str	r3, [r4, #0]
 8012218:	f8d8 3000 	ldr.w	r3, [r8]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d038      	beq.n	8012292 <_malloc_r+0xf6>
 8012220:	685a      	ldr	r2, [r3, #4]
 8012222:	42a2      	cmp	r2, r4
 8012224:	d12b      	bne.n	801227e <_malloc_r+0xe2>
 8012226:	2200      	movs	r2, #0
 8012228:	605a      	str	r2, [r3, #4]
 801222a:	e00f      	b.n	801224c <_malloc_r+0xb0>
 801222c:	6822      	ldr	r2, [r4, #0]
 801222e:	1b52      	subs	r2, r2, r5
 8012230:	d41f      	bmi.n	8012272 <_malloc_r+0xd6>
 8012232:	2a0b      	cmp	r2, #11
 8012234:	d917      	bls.n	8012266 <_malloc_r+0xca>
 8012236:	1961      	adds	r1, r4, r5
 8012238:	42a3      	cmp	r3, r4
 801223a:	6025      	str	r5, [r4, #0]
 801223c:	bf18      	it	ne
 801223e:	6059      	strne	r1, [r3, #4]
 8012240:	6863      	ldr	r3, [r4, #4]
 8012242:	bf08      	it	eq
 8012244:	f8c8 1000 	streq.w	r1, [r8]
 8012248:	5162      	str	r2, [r4, r5]
 801224a:	604b      	str	r3, [r1, #4]
 801224c:	4638      	mov	r0, r7
 801224e:	f104 060b 	add.w	r6, r4, #11
 8012252:	f000 f829 	bl	80122a8 <__malloc_unlock>
 8012256:	f026 0607 	bic.w	r6, r6, #7
 801225a:	1d23      	adds	r3, r4, #4
 801225c:	1af2      	subs	r2, r6, r3
 801225e:	d0ae      	beq.n	80121be <_malloc_r+0x22>
 8012260:	1b9b      	subs	r3, r3, r6
 8012262:	50a3      	str	r3, [r4, r2]
 8012264:	e7ab      	b.n	80121be <_malloc_r+0x22>
 8012266:	42a3      	cmp	r3, r4
 8012268:	6862      	ldr	r2, [r4, #4]
 801226a:	d1dd      	bne.n	8012228 <_malloc_r+0x8c>
 801226c:	f8c8 2000 	str.w	r2, [r8]
 8012270:	e7ec      	b.n	801224c <_malloc_r+0xb0>
 8012272:	4623      	mov	r3, r4
 8012274:	6864      	ldr	r4, [r4, #4]
 8012276:	e7ac      	b.n	80121d2 <_malloc_r+0x36>
 8012278:	4634      	mov	r4, r6
 801227a:	6876      	ldr	r6, [r6, #4]
 801227c:	e7b4      	b.n	80121e8 <_malloc_r+0x4c>
 801227e:	4613      	mov	r3, r2
 8012280:	e7cc      	b.n	801221c <_malloc_r+0x80>
 8012282:	230c      	movs	r3, #12
 8012284:	603b      	str	r3, [r7, #0]
 8012286:	4638      	mov	r0, r7
 8012288:	f000 f80e 	bl	80122a8 <__malloc_unlock>
 801228c:	e797      	b.n	80121be <_malloc_r+0x22>
 801228e:	6025      	str	r5, [r4, #0]
 8012290:	e7dc      	b.n	801224c <_malloc_r+0xb0>
 8012292:	605b      	str	r3, [r3, #4]
 8012294:	deff      	udf	#255	; 0xff
 8012296:	bf00      	nop
 8012298:	20008118 	.word	0x20008118

0801229c <__malloc_lock>:
 801229c:	4801      	ldr	r0, [pc, #4]	; (80122a4 <__malloc_lock+0x8>)
 801229e:	f000 bacc 	b.w	801283a <__retarget_lock_acquire_recursive>
 80122a2:	bf00      	nop
 80122a4:	20008260 	.word	0x20008260

080122a8 <__malloc_unlock>:
 80122a8:	4801      	ldr	r0, [pc, #4]	; (80122b0 <__malloc_unlock+0x8>)
 80122aa:	f000 bac7 	b.w	801283c <__retarget_lock_release_recursive>
 80122ae:	bf00      	nop
 80122b0:	20008260 	.word	0x20008260

080122b4 <srand>:
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	4b10      	ldr	r3, [pc, #64]	; (80122f8 <srand+0x44>)
 80122b8:	681d      	ldr	r5, [r3, #0]
 80122ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80122bc:	4604      	mov	r4, r0
 80122be:	b9b3      	cbnz	r3, 80122ee <srand+0x3a>
 80122c0:	2018      	movs	r0, #24
 80122c2:	f7ff ff3b 	bl	801213c <malloc>
 80122c6:	4602      	mov	r2, r0
 80122c8:	6328      	str	r0, [r5, #48]	; 0x30
 80122ca:	b920      	cbnz	r0, 80122d6 <srand+0x22>
 80122cc:	4b0b      	ldr	r3, [pc, #44]	; (80122fc <srand+0x48>)
 80122ce:	480c      	ldr	r0, [pc, #48]	; (8012300 <srand+0x4c>)
 80122d0:	2146      	movs	r1, #70	; 0x46
 80122d2:	f7ff fef3 	bl	80120bc <__assert_func>
 80122d6:	490b      	ldr	r1, [pc, #44]	; (8012304 <srand+0x50>)
 80122d8:	4b0b      	ldr	r3, [pc, #44]	; (8012308 <srand+0x54>)
 80122da:	e9c0 1300 	strd	r1, r3, [r0]
 80122de:	4b0b      	ldr	r3, [pc, #44]	; (801230c <srand+0x58>)
 80122e0:	6083      	str	r3, [r0, #8]
 80122e2:	230b      	movs	r3, #11
 80122e4:	8183      	strh	r3, [r0, #12]
 80122e6:	2100      	movs	r1, #0
 80122e8:	2001      	movs	r0, #1
 80122ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80122ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80122f0:	2200      	movs	r2, #0
 80122f2:	611c      	str	r4, [r3, #16]
 80122f4:	615a      	str	r2, [r3, #20]
 80122f6:	bd38      	pop	{r3, r4, r5, pc}
 80122f8:	200002b8 	.word	0x200002b8
 80122fc:	08015474 	.word	0x08015474
 8012300:	0801548b 	.word	0x0801548b
 8012304:	abcd330e 	.word	0xabcd330e
 8012308:	e66d1234 	.word	0xe66d1234
 801230c:	0005deec 	.word	0x0005deec

08012310 <_strtol_l.constprop.0>:
 8012310:	2b01      	cmp	r3, #1
 8012312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012316:	d001      	beq.n	801231c <_strtol_l.constprop.0+0xc>
 8012318:	2b24      	cmp	r3, #36	; 0x24
 801231a:	d906      	bls.n	801232a <_strtol_l.constprop.0+0x1a>
 801231c:	f000 fa62 	bl	80127e4 <__errno>
 8012320:	2316      	movs	r3, #22
 8012322:	6003      	str	r3, [r0, #0]
 8012324:	2000      	movs	r0, #0
 8012326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801232a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012410 <_strtol_l.constprop.0+0x100>
 801232e:	460d      	mov	r5, r1
 8012330:	462e      	mov	r6, r5
 8012332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012336:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801233a:	f017 0708 	ands.w	r7, r7, #8
 801233e:	d1f7      	bne.n	8012330 <_strtol_l.constprop.0+0x20>
 8012340:	2c2d      	cmp	r4, #45	; 0x2d
 8012342:	d132      	bne.n	80123aa <_strtol_l.constprop.0+0x9a>
 8012344:	782c      	ldrb	r4, [r5, #0]
 8012346:	2701      	movs	r7, #1
 8012348:	1cb5      	adds	r5, r6, #2
 801234a:	2b00      	cmp	r3, #0
 801234c:	d05b      	beq.n	8012406 <_strtol_l.constprop.0+0xf6>
 801234e:	2b10      	cmp	r3, #16
 8012350:	d109      	bne.n	8012366 <_strtol_l.constprop.0+0x56>
 8012352:	2c30      	cmp	r4, #48	; 0x30
 8012354:	d107      	bne.n	8012366 <_strtol_l.constprop.0+0x56>
 8012356:	782c      	ldrb	r4, [r5, #0]
 8012358:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801235c:	2c58      	cmp	r4, #88	; 0x58
 801235e:	d14d      	bne.n	80123fc <_strtol_l.constprop.0+0xec>
 8012360:	786c      	ldrb	r4, [r5, #1]
 8012362:	2310      	movs	r3, #16
 8012364:	3502      	adds	r5, #2
 8012366:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801236a:	f108 38ff 	add.w	r8, r8, #4294967295
 801236e:	f04f 0e00 	mov.w	lr, #0
 8012372:	fbb8 f9f3 	udiv	r9, r8, r3
 8012376:	4676      	mov	r6, lr
 8012378:	fb03 8a19 	mls	sl, r3, r9, r8
 801237c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012380:	f1bc 0f09 	cmp.w	ip, #9
 8012384:	d816      	bhi.n	80123b4 <_strtol_l.constprop.0+0xa4>
 8012386:	4664      	mov	r4, ip
 8012388:	42a3      	cmp	r3, r4
 801238a:	dd24      	ble.n	80123d6 <_strtol_l.constprop.0+0xc6>
 801238c:	f1be 3fff 	cmp.w	lr, #4294967295
 8012390:	d008      	beq.n	80123a4 <_strtol_l.constprop.0+0x94>
 8012392:	45b1      	cmp	r9, r6
 8012394:	d31c      	bcc.n	80123d0 <_strtol_l.constprop.0+0xc0>
 8012396:	d101      	bne.n	801239c <_strtol_l.constprop.0+0x8c>
 8012398:	45a2      	cmp	sl, r4
 801239a:	db19      	blt.n	80123d0 <_strtol_l.constprop.0+0xc0>
 801239c:	fb06 4603 	mla	r6, r6, r3, r4
 80123a0:	f04f 0e01 	mov.w	lr, #1
 80123a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123a8:	e7e8      	b.n	801237c <_strtol_l.constprop.0+0x6c>
 80123aa:	2c2b      	cmp	r4, #43	; 0x2b
 80123ac:	bf04      	itt	eq
 80123ae:	782c      	ldrbeq	r4, [r5, #0]
 80123b0:	1cb5      	addeq	r5, r6, #2
 80123b2:	e7ca      	b.n	801234a <_strtol_l.constprop.0+0x3a>
 80123b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80123b8:	f1bc 0f19 	cmp.w	ip, #25
 80123bc:	d801      	bhi.n	80123c2 <_strtol_l.constprop.0+0xb2>
 80123be:	3c37      	subs	r4, #55	; 0x37
 80123c0:	e7e2      	b.n	8012388 <_strtol_l.constprop.0+0x78>
 80123c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80123c6:	f1bc 0f19 	cmp.w	ip, #25
 80123ca:	d804      	bhi.n	80123d6 <_strtol_l.constprop.0+0xc6>
 80123cc:	3c57      	subs	r4, #87	; 0x57
 80123ce:	e7db      	b.n	8012388 <_strtol_l.constprop.0+0x78>
 80123d0:	f04f 3eff 	mov.w	lr, #4294967295
 80123d4:	e7e6      	b.n	80123a4 <_strtol_l.constprop.0+0x94>
 80123d6:	f1be 3fff 	cmp.w	lr, #4294967295
 80123da:	d105      	bne.n	80123e8 <_strtol_l.constprop.0+0xd8>
 80123dc:	2322      	movs	r3, #34	; 0x22
 80123de:	6003      	str	r3, [r0, #0]
 80123e0:	4646      	mov	r6, r8
 80123e2:	b942      	cbnz	r2, 80123f6 <_strtol_l.constprop.0+0xe6>
 80123e4:	4630      	mov	r0, r6
 80123e6:	e79e      	b.n	8012326 <_strtol_l.constprop.0+0x16>
 80123e8:	b107      	cbz	r7, 80123ec <_strtol_l.constprop.0+0xdc>
 80123ea:	4276      	negs	r6, r6
 80123ec:	2a00      	cmp	r2, #0
 80123ee:	d0f9      	beq.n	80123e4 <_strtol_l.constprop.0+0xd4>
 80123f0:	f1be 0f00 	cmp.w	lr, #0
 80123f4:	d000      	beq.n	80123f8 <_strtol_l.constprop.0+0xe8>
 80123f6:	1e69      	subs	r1, r5, #1
 80123f8:	6011      	str	r1, [r2, #0]
 80123fa:	e7f3      	b.n	80123e4 <_strtol_l.constprop.0+0xd4>
 80123fc:	2430      	movs	r4, #48	; 0x30
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1b1      	bne.n	8012366 <_strtol_l.constprop.0+0x56>
 8012402:	2308      	movs	r3, #8
 8012404:	e7af      	b.n	8012366 <_strtol_l.constprop.0+0x56>
 8012406:	2c30      	cmp	r4, #48	; 0x30
 8012408:	d0a5      	beq.n	8012356 <_strtol_l.constprop.0+0x46>
 801240a:	230a      	movs	r3, #10
 801240c:	e7ab      	b.n	8012366 <_strtol_l.constprop.0+0x56>
 801240e:	bf00      	nop
 8012410:	080154e4 	.word	0x080154e4

08012414 <strtol>:
 8012414:	4613      	mov	r3, r2
 8012416:	460a      	mov	r2, r1
 8012418:	4601      	mov	r1, r0
 801241a:	4802      	ldr	r0, [pc, #8]	; (8012424 <strtol+0x10>)
 801241c:	6800      	ldr	r0, [r0, #0]
 801241e:	f7ff bf77 	b.w	8012310 <_strtol_l.constprop.0>
 8012422:	bf00      	nop
 8012424:	200002b8 	.word	0x200002b8

08012428 <std>:
 8012428:	2300      	movs	r3, #0
 801242a:	b510      	push	{r4, lr}
 801242c:	4604      	mov	r4, r0
 801242e:	e9c0 3300 	strd	r3, r3, [r0]
 8012432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012436:	6083      	str	r3, [r0, #8]
 8012438:	8181      	strh	r1, [r0, #12]
 801243a:	6643      	str	r3, [r0, #100]	; 0x64
 801243c:	81c2      	strh	r2, [r0, #14]
 801243e:	6183      	str	r3, [r0, #24]
 8012440:	4619      	mov	r1, r3
 8012442:	2208      	movs	r2, #8
 8012444:	305c      	adds	r0, #92	; 0x5c
 8012446:	f000 f938 	bl	80126ba <memset>
 801244a:	4b0d      	ldr	r3, [pc, #52]	; (8012480 <std+0x58>)
 801244c:	6263      	str	r3, [r4, #36]	; 0x24
 801244e:	4b0d      	ldr	r3, [pc, #52]	; (8012484 <std+0x5c>)
 8012450:	62a3      	str	r3, [r4, #40]	; 0x28
 8012452:	4b0d      	ldr	r3, [pc, #52]	; (8012488 <std+0x60>)
 8012454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012456:	4b0d      	ldr	r3, [pc, #52]	; (801248c <std+0x64>)
 8012458:	6323      	str	r3, [r4, #48]	; 0x30
 801245a:	4b0d      	ldr	r3, [pc, #52]	; (8012490 <std+0x68>)
 801245c:	6224      	str	r4, [r4, #32]
 801245e:	429c      	cmp	r4, r3
 8012460:	d006      	beq.n	8012470 <std+0x48>
 8012462:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012466:	4294      	cmp	r4, r2
 8012468:	d002      	beq.n	8012470 <std+0x48>
 801246a:	33d0      	adds	r3, #208	; 0xd0
 801246c:	429c      	cmp	r4, r3
 801246e:	d105      	bne.n	801247c <std+0x54>
 8012470:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012478:	f000 b9de 	b.w	8012838 <__retarget_lock_init_recursive>
 801247c:	bd10      	pop	{r4, pc}
 801247e:	bf00      	nop
 8012480:	080125e1 	.word	0x080125e1
 8012484:	08012603 	.word	0x08012603
 8012488:	0801263b 	.word	0x0801263b
 801248c:	0801265f 	.word	0x0801265f
 8012490:	20008120 	.word	0x20008120

08012494 <stdio_exit_handler>:
 8012494:	4a02      	ldr	r2, [pc, #8]	; (80124a0 <stdio_exit_handler+0xc>)
 8012496:	4903      	ldr	r1, [pc, #12]	; (80124a4 <stdio_exit_handler+0x10>)
 8012498:	4803      	ldr	r0, [pc, #12]	; (80124a8 <stdio_exit_handler+0x14>)
 801249a:	f000 b87b 	b.w	8012594 <_fwalk_sglue>
 801249e:	bf00      	nop
 80124a0:	20000260 	.word	0x20000260
 80124a4:	08012fc5 	.word	0x08012fc5
 80124a8:	2000026c 	.word	0x2000026c

080124ac <cleanup_stdio>:
 80124ac:	6841      	ldr	r1, [r0, #4]
 80124ae:	4b0c      	ldr	r3, [pc, #48]	; (80124e0 <cleanup_stdio+0x34>)
 80124b0:	4299      	cmp	r1, r3
 80124b2:	b510      	push	{r4, lr}
 80124b4:	4604      	mov	r4, r0
 80124b6:	d001      	beq.n	80124bc <cleanup_stdio+0x10>
 80124b8:	f000 fd84 	bl	8012fc4 <_fflush_r>
 80124bc:	68a1      	ldr	r1, [r4, #8]
 80124be:	4b09      	ldr	r3, [pc, #36]	; (80124e4 <cleanup_stdio+0x38>)
 80124c0:	4299      	cmp	r1, r3
 80124c2:	d002      	beq.n	80124ca <cleanup_stdio+0x1e>
 80124c4:	4620      	mov	r0, r4
 80124c6:	f000 fd7d 	bl	8012fc4 <_fflush_r>
 80124ca:	68e1      	ldr	r1, [r4, #12]
 80124cc:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <cleanup_stdio+0x3c>)
 80124ce:	4299      	cmp	r1, r3
 80124d0:	d004      	beq.n	80124dc <cleanup_stdio+0x30>
 80124d2:	4620      	mov	r0, r4
 80124d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124d8:	f000 bd74 	b.w	8012fc4 <_fflush_r>
 80124dc:	bd10      	pop	{r4, pc}
 80124de:	bf00      	nop
 80124e0:	20008120 	.word	0x20008120
 80124e4:	20008188 	.word	0x20008188
 80124e8:	200081f0 	.word	0x200081f0

080124ec <global_stdio_init.part.0>:
 80124ec:	b510      	push	{r4, lr}
 80124ee:	4b0b      	ldr	r3, [pc, #44]	; (801251c <global_stdio_init.part.0+0x30>)
 80124f0:	4c0b      	ldr	r4, [pc, #44]	; (8012520 <global_stdio_init.part.0+0x34>)
 80124f2:	4a0c      	ldr	r2, [pc, #48]	; (8012524 <global_stdio_init.part.0+0x38>)
 80124f4:	601a      	str	r2, [r3, #0]
 80124f6:	4620      	mov	r0, r4
 80124f8:	2200      	movs	r2, #0
 80124fa:	2104      	movs	r1, #4
 80124fc:	f7ff ff94 	bl	8012428 <std>
 8012500:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012504:	2201      	movs	r2, #1
 8012506:	2109      	movs	r1, #9
 8012508:	f7ff ff8e 	bl	8012428 <std>
 801250c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012510:	2202      	movs	r2, #2
 8012512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012516:	2112      	movs	r1, #18
 8012518:	f7ff bf86 	b.w	8012428 <std>
 801251c:	20008258 	.word	0x20008258
 8012520:	20008120 	.word	0x20008120
 8012524:	08012495 	.word	0x08012495

08012528 <__sfp_lock_acquire>:
 8012528:	4801      	ldr	r0, [pc, #4]	; (8012530 <__sfp_lock_acquire+0x8>)
 801252a:	f000 b986 	b.w	801283a <__retarget_lock_acquire_recursive>
 801252e:	bf00      	nop
 8012530:	20008261 	.word	0x20008261

08012534 <__sfp_lock_release>:
 8012534:	4801      	ldr	r0, [pc, #4]	; (801253c <__sfp_lock_release+0x8>)
 8012536:	f000 b981 	b.w	801283c <__retarget_lock_release_recursive>
 801253a:	bf00      	nop
 801253c:	20008261 	.word	0x20008261

08012540 <__sinit>:
 8012540:	b510      	push	{r4, lr}
 8012542:	4604      	mov	r4, r0
 8012544:	f7ff fff0 	bl	8012528 <__sfp_lock_acquire>
 8012548:	6a23      	ldr	r3, [r4, #32]
 801254a:	b11b      	cbz	r3, 8012554 <__sinit+0x14>
 801254c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012550:	f7ff bff0 	b.w	8012534 <__sfp_lock_release>
 8012554:	4b04      	ldr	r3, [pc, #16]	; (8012568 <__sinit+0x28>)
 8012556:	6223      	str	r3, [r4, #32]
 8012558:	4b04      	ldr	r3, [pc, #16]	; (801256c <__sinit+0x2c>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d1f5      	bne.n	801254c <__sinit+0xc>
 8012560:	f7ff ffc4 	bl	80124ec <global_stdio_init.part.0>
 8012564:	e7f2      	b.n	801254c <__sinit+0xc>
 8012566:	bf00      	nop
 8012568:	080124ad 	.word	0x080124ad
 801256c:	20008258 	.word	0x20008258

08012570 <fiprintf>:
 8012570:	b40e      	push	{r1, r2, r3}
 8012572:	b503      	push	{r0, r1, lr}
 8012574:	4601      	mov	r1, r0
 8012576:	ab03      	add	r3, sp, #12
 8012578:	4805      	ldr	r0, [pc, #20]	; (8012590 <fiprintf+0x20>)
 801257a:	f853 2b04 	ldr.w	r2, [r3], #4
 801257e:	6800      	ldr	r0, [r0, #0]
 8012580:	9301      	str	r3, [sp, #4]
 8012582:	f000 f9ef 	bl	8012964 <_vfiprintf_r>
 8012586:	b002      	add	sp, #8
 8012588:	f85d eb04 	ldr.w	lr, [sp], #4
 801258c:	b003      	add	sp, #12
 801258e:	4770      	bx	lr
 8012590:	200002b8 	.word	0x200002b8

08012594 <_fwalk_sglue>:
 8012594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012598:	4607      	mov	r7, r0
 801259a:	4688      	mov	r8, r1
 801259c:	4614      	mov	r4, r2
 801259e:	2600      	movs	r6, #0
 80125a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80125a4:	f1b9 0901 	subs.w	r9, r9, #1
 80125a8:	d505      	bpl.n	80125b6 <_fwalk_sglue+0x22>
 80125aa:	6824      	ldr	r4, [r4, #0]
 80125ac:	2c00      	cmp	r4, #0
 80125ae:	d1f7      	bne.n	80125a0 <_fwalk_sglue+0xc>
 80125b0:	4630      	mov	r0, r6
 80125b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125b6:	89ab      	ldrh	r3, [r5, #12]
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d907      	bls.n	80125cc <_fwalk_sglue+0x38>
 80125bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80125c0:	3301      	adds	r3, #1
 80125c2:	d003      	beq.n	80125cc <_fwalk_sglue+0x38>
 80125c4:	4629      	mov	r1, r5
 80125c6:	4638      	mov	r0, r7
 80125c8:	47c0      	blx	r8
 80125ca:	4306      	orrs	r6, r0
 80125cc:	3568      	adds	r5, #104	; 0x68
 80125ce:	e7e9      	b.n	80125a4 <_fwalk_sglue+0x10>

080125d0 <putchar>:
 80125d0:	4b02      	ldr	r3, [pc, #8]	; (80125dc <putchar+0xc>)
 80125d2:	4601      	mov	r1, r0
 80125d4:	6818      	ldr	r0, [r3, #0]
 80125d6:	6882      	ldr	r2, [r0, #8]
 80125d8:	f000 bd1c 	b.w	8013014 <_putc_r>
 80125dc:	200002b8 	.word	0x200002b8

080125e0 <__sread>:
 80125e0:	b510      	push	{r4, lr}
 80125e2:	460c      	mov	r4, r1
 80125e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125e8:	f000 f8c8 	bl	801277c <_read_r>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	bfab      	itete	ge
 80125f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125f2:	89a3      	ldrhlt	r3, [r4, #12]
 80125f4:	181b      	addge	r3, r3, r0
 80125f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125fa:	bfac      	ite	ge
 80125fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80125fe:	81a3      	strhlt	r3, [r4, #12]
 8012600:	bd10      	pop	{r4, pc}

08012602 <__swrite>:
 8012602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012606:	461f      	mov	r7, r3
 8012608:	898b      	ldrh	r3, [r1, #12]
 801260a:	05db      	lsls	r3, r3, #23
 801260c:	4605      	mov	r5, r0
 801260e:	460c      	mov	r4, r1
 8012610:	4616      	mov	r6, r2
 8012612:	d505      	bpl.n	8012620 <__swrite+0x1e>
 8012614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012618:	2302      	movs	r3, #2
 801261a:	2200      	movs	r2, #0
 801261c:	f000 f89c 	bl	8012758 <_lseek_r>
 8012620:	89a3      	ldrh	r3, [r4, #12]
 8012622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801262a:	81a3      	strh	r3, [r4, #12]
 801262c:	4632      	mov	r2, r6
 801262e:	463b      	mov	r3, r7
 8012630:	4628      	mov	r0, r5
 8012632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012636:	f000 b8c3 	b.w	80127c0 <_write_r>

0801263a <__sseek>:
 801263a:	b510      	push	{r4, lr}
 801263c:	460c      	mov	r4, r1
 801263e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012642:	f000 f889 	bl	8012758 <_lseek_r>
 8012646:	1c43      	adds	r3, r0, #1
 8012648:	89a3      	ldrh	r3, [r4, #12]
 801264a:	bf15      	itete	ne
 801264c:	6560      	strne	r0, [r4, #84]	; 0x54
 801264e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012656:	81a3      	strheq	r3, [r4, #12]
 8012658:	bf18      	it	ne
 801265a:	81a3      	strhne	r3, [r4, #12]
 801265c:	bd10      	pop	{r4, pc}

0801265e <__sclose>:
 801265e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012662:	f000 b869 	b.w	8012738 <_close_r>

08012666 <memcmp>:
 8012666:	b510      	push	{r4, lr}
 8012668:	3901      	subs	r1, #1
 801266a:	4402      	add	r2, r0
 801266c:	4290      	cmp	r0, r2
 801266e:	d101      	bne.n	8012674 <memcmp+0xe>
 8012670:	2000      	movs	r0, #0
 8012672:	e005      	b.n	8012680 <memcmp+0x1a>
 8012674:	7803      	ldrb	r3, [r0, #0]
 8012676:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801267a:	42a3      	cmp	r3, r4
 801267c:	d001      	beq.n	8012682 <memcmp+0x1c>
 801267e:	1b18      	subs	r0, r3, r4
 8012680:	bd10      	pop	{r4, pc}
 8012682:	3001      	adds	r0, #1
 8012684:	e7f2      	b.n	801266c <memcmp+0x6>

08012686 <memmove>:
 8012686:	4288      	cmp	r0, r1
 8012688:	b510      	push	{r4, lr}
 801268a:	eb01 0402 	add.w	r4, r1, r2
 801268e:	d902      	bls.n	8012696 <memmove+0x10>
 8012690:	4284      	cmp	r4, r0
 8012692:	4623      	mov	r3, r4
 8012694:	d807      	bhi.n	80126a6 <memmove+0x20>
 8012696:	1e43      	subs	r3, r0, #1
 8012698:	42a1      	cmp	r1, r4
 801269a:	d008      	beq.n	80126ae <memmove+0x28>
 801269c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126a4:	e7f8      	b.n	8012698 <memmove+0x12>
 80126a6:	4402      	add	r2, r0
 80126a8:	4601      	mov	r1, r0
 80126aa:	428a      	cmp	r2, r1
 80126ac:	d100      	bne.n	80126b0 <memmove+0x2a>
 80126ae:	bd10      	pop	{r4, pc}
 80126b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80126b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80126b8:	e7f7      	b.n	80126aa <memmove+0x24>

080126ba <memset>:
 80126ba:	4402      	add	r2, r0
 80126bc:	4603      	mov	r3, r0
 80126be:	4293      	cmp	r3, r2
 80126c0:	d100      	bne.n	80126c4 <memset+0xa>
 80126c2:	4770      	bx	lr
 80126c4:	f803 1b01 	strb.w	r1, [r3], #1
 80126c8:	e7f9      	b.n	80126be <memset+0x4>

080126ca <strchr>:
 80126ca:	b2c9      	uxtb	r1, r1
 80126cc:	4603      	mov	r3, r0
 80126ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126d2:	b11a      	cbz	r2, 80126dc <strchr+0x12>
 80126d4:	428a      	cmp	r2, r1
 80126d6:	d1f9      	bne.n	80126cc <strchr+0x2>
 80126d8:	4618      	mov	r0, r3
 80126da:	4770      	bx	lr
 80126dc:	2900      	cmp	r1, #0
 80126de:	bf18      	it	ne
 80126e0:	2300      	movne	r3, #0
 80126e2:	e7f9      	b.n	80126d8 <strchr+0xe>

080126e4 <strncmp>:
 80126e4:	b510      	push	{r4, lr}
 80126e6:	b16a      	cbz	r2, 8012704 <strncmp+0x20>
 80126e8:	3901      	subs	r1, #1
 80126ea:	1884      	adds	r4, r0, r2
 80126ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d103      	bne.n	8012700 <strncmp+0x1c>
 80126f8:	42a0      	cmp	r0, r4
 80126fa:	d001      	beq.n	8012700 <strncmp+0x1c>
 80126fc:	2a00      	cmp	r2, #0
 80126fe:	d1f5      	bne.n	80126ec <strncmp+0x8>
 8012700:	1ad0      	subs	r0, r2, r3
 8012702:	bd10      	pop	{r4, pc}
 8012704:	4610      	mov	r0, r2
 8012706:	e7fc      	b.n	8012702 <strncmp+0x1e>

08012708 <strrchr>:
 8012708:	b513      	push	{r0, r1, r4, lr}
 801270a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801270e:	4603      	mov	r3, r0
 8012710:	d110      	bne.n	8012734 <strrchr+0x2c>
 8012712:	b002      	add	sp, #8
 8012714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012718:	f7ff bfd7 	b.w	80126ca <strchr>
 801271c:	1c43      	adds	r3, r0, #1
 801271e:	4604      	mov	r4, r0
 8012720:	4618      	mov	r0, r3
 8012722:	9101      	str	r1, [sp, #4]
 8012724:	f7ff ffd1 	bl	80126ca <strchr>
 8012728:	9901      	ldr	r1, [sp, #4]
 801272a:	2800      	cmp	r0, #0
 801272c:	d1f6      	bne.n	801271c <strrchr+0x14>
 801272e:	4620      	mov	r0, r4
 8012730:	b002      	add	sp, #8
 8012732:	bd10      	pop	{r4, pc}
 8012734:	2400      	movs	r4, #0
 8012736:	e7f3      	b.n	8012720 <strrchr+0x18>

08012738 <_close_r>:
 8012738:	b538      	push	{r3, r4, r5, lr}
 801273a:	4d06      	ldr	r5, [pc, #24]	; (8012754 <_close_r+0x1c>)
 801273c:	2300      	movs	r3, #0
 801273e:	4604      	mov	r4, r0
 8012740:	4608      	mov	r0, r1
 8012742:	602b      	str	r3, [r5, #0]
 8012744:	f7f9 f954 	bl	800b9f0 <_close>
 8012748:	1c43      	adds	r3, r0, #1
 801274a:	d102      	bne.n	8012752 <_close_r+0x1a>
 801274c:	682b      	ldr	r3, [r5, #0]
 801274e:	b103      	cbz	r3, 8012752 <_close_r+0x1a>
 8012750:	6023      	str	r3, [r4, #0]
 8012752:	bd38      	pop	{r3, r4, r5, pc}
 8012754:	2000825c 	.word	0x2000825c

08012758 <_lseek_r>:
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	4d07      	ldr	r5, [pc, #28]	; (8012778 <_lseek_r+0x20>)
 801275c:	4604      	mov	r4, r0
 801275e:	4608      	mov	r0, r1
 8012760:	4611      	mov	r1, r2
 8012762:	2200      	movs	r2, #0
 8012764:	602a      	str	r2, [r5, #0]
 8012766:	461a      	mov	r2, r3
 8012768:	f7f9 f969 	bl	800ba3e <_lseek>
 801276c:	1c43      	adds	r3, r0, #1
 801276e:	d102      	bne.n	8012776 <_lseek_r+0x1e>
 8012770:	682b      	ldr	r3, [r5, #0]
 8012772:	b103      	cbz	r3, 8012776 <_lseek_r+0x1e>
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	bd38      	pop	{r3, r4, r5, pc}
 8012778:	2000825c 	.word	0x2000825c

0801277c <_read_r>:
 801277c:	b538      	push	{r3, r4, r5, lr}
 801277e:	4d07      	ldr	r5, [pc, #28]	; (801279c <_read_r+0x20>)
 8012780:	4604      	mov	r4, r0
 8012782:	4608      	mov	r0, r1
 8012784:	4611      	mov	r1, r2
 8012786:	2200      	movs	r2, #0
 8012788:	602a      	str	r2, [r5, #0]
 801278a:	461a      	mov	r2, r3
 801278c:	f7f9 f8fa 	bl	800b984 <_read>
 8012790:	1c43      	adds	r3, r0, #1
 8012792:	d102      	bne.n	801279a <_read_r+0x1e>
 8012794:	682b      	ldr	r3, [r5, #0]
 8012796:	b103      	cbz	r3, 801279a <_read_r+0x1e>
 8012798:	6023      	str	r3, [r4, #0]
 801279a:	bd38      	pop	{r3, r4, r5, pc}
 801279c:	2000825c 	.word	0x2000825c

080127a0 <_sbrk_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4d06      	ldr	r5, [pc, #24]	; (80127bc <_sbrk_r+0x1c>)
 80127a4:	2300      	movs	r3, #0
 80127a6:	4604      	mov	r4, r0
 80127a8:	4608      	mov	r0, r1
 80127aa:	602b      	str	r3, [r5, #0]
 80127ac:	f7f9 f954 	bl	800ba58 <_sbrk>
 80127b0:	1c43      	adds	r3, r0, #1
 80127b2:	d102      	bne.n	80127ba <_sbrk_r+0x1a>
 80127b4:	682b      	ldr	r3, [r5, #0]
 80127b6:	b103      	cbz	r3, 80127ba <_sbrk_r+0x1a>
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	bd38      	pop	{r3, r4, r5, pc}
 80127bc:	2000825c 	.word	0x2000825c

080127c0 <_write_r>:
 80127c0:	b538      	push	{r3, r4, r5, lr}
 80127c2:	4d07      	ldr	r5, [pc, #28]	; (80127e0 <_write_r+0x20>)
 80127c4:	4604      	mov	r4, r0
 80127c6:	4608      	mov	r0, r1
 80127c8:	4611      	mov	r1, r2
 80127ca:	2200      	movs	r2, #0
 80127cc:	602a      	str	r2, [r5, #0]
 80127ce:	461a      	mov	r2, r3
 80127d0:	f7f9 f8f6 	bl	800b9c0 <_write>
 80127d4:	1c43      	adds	r3, r0, #1
 80127d6:	d102      	bne.n	80127de <_write_r+0x1e>
 80127d8:	682b      	ldr	r3, [r5, #0]
 80127da:	b103      	cbz	r3, 80127de <_write_r+0x1e>
 80127dc:	6023      	str	r3, [r4, #0]
 80127de:	bd38      	pop	{r3, r4, r5, pc}
 80127e0:	2000825c 	.word	0x2000825c

080127e4 <__errno>:
 80127e4:	4b01      	ldr	r3, [pc, #4]	; (80127ec <__errno+0x8>)
 80127e6:	6818      	ldr	r0, [r3, #0]
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop
 80127ec:	200002b8 	.word	0x200002b8

080127f0 <__libc_init_array>:
 80127f0:	b570      	push	{r4, r5, r6, lr}
 80127f2:	4d0d      	ldr	r5, [pc, #52]	; (8012828 <__libc_init_array+0x38>)
 80127f4:	4c0d      	ldr	r4, [pc, #52]	; (801282c <__libc_init_array+0x3c>)
 80127f6:	1b64      	subs	r4, r4, r5
 80127f8:	10a4      	asrs	r4, r4, #2
 80127fa:	2600      	movs	r6, #0
 80127fc:	42a6      	cmp	r6, r4
 80127fe:	d109      	bne.n	8012814 <__libc_init_array+0x24>
 8012800:	4d0b      	ldr	r5, [pc, #44]	; (8012830 <__libc_init_array+0x40>)
 8012802:	4c0c      	ldr	r4, [pc, #48]	; (8012834 <__libc_init_array+0x44>)
 8012804:	f000 fd98 	bl	8013338 <_init>
 8012808:	1b64      	subs	r4, r4, r5
 801280a:	10a4      	asrs	r4, r4, #2
 801280c:	2600      	movs	r6, #0
 801280e:	42a6      	cmp	r6, r4
 8012810:	d105      	bne.n	801281e <__libc_init_array+0x2e>
 8012812:	bd70      	pop	{r4, r5, r6, pc}
 8012814:	f855 3b04 	ldr.w	r3, [r5], #4
 8012818:	4798      	blx	r3
 801281a:	3601      	adds	r6, #1
 801281c:	e7ee      	b.n	80127fc <__libc_init_array+0xc>
 801281e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012822:	4798      	blx	r3
 8012824:	3601      	adds	r6, #1
 8012826:	e7f2      	b.n	801280e <__libc_init_array+0x1e>
 8012828:	08015620 	.word	0x08015620
 801282c:	08015620 	.word	0x08015620
 8012830:	08015620 	.word	0x08015620
 8012834:	08015624 	.word	0x08015624

08012838 <__retarget_lock_init_recursive>:
 8012838:	4770      	bx	lr

0801283a <__retarget_lock_acquire_recursive>:
 801283a:	4770      	bx	lr

0801283c <__retarget_lock_release_recursive>:
 801283c:	4770      	bx	lr

0801283e <strcpy>:
 801283e:	4603      	mov	r3, r0
 8012840:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012844:	f803 2b01 	strb.w	r2, [r3], #1
 8012848:	2a00      	cmp	r2, #0
 801284a:	d1f9      	bne.n	8012840 <strcpy+0x2>
 801284c:	4770      	bx	lr

0801284e <memcpy>:
 801284e:	440a      	add	r2, r1
 8012850:	4291      	cmp	r1, r2
 8012852:	f100 33ff 	add.w	r3, r0, #4294967295
 8012856:	d100      	bne.n	801285a <memcpy+0xc>
 8012858:	4770      	bx	lr
 801285a:	b510      	push	{r4, lr}
 801285c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012864:	4291      	cmp	r1, r2
 8012866:	d1f9      	bne.n	801285c <memcpy+0xe>
 8012868:	bd10      	pop	{r4, pc}

0801286a <abort>:
 801286a:	b508      	push	{r3, lr}
 801286c:	2006      	movs	r0, #6
 801286e:	f000 fcc3 	bl	80131f8 <raise>
 8012872:	2001      	movs	r0, #1
 8012874:	f7f9 f87c 	bl	800b970 <_exit>

08012878 <_free_r>:
 8012878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801287a:	2900      	cmp	r1, #0
 801287c:	d044      	beq.n	8012908 <_free_r+0x90>
 801287e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012882:	9001      	str	r0, [sp, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	f1a1 0404 	sub.w	r4, r1, #4
 801288a:	bfb8      	it	lt
 801288c:	18e4      	addlt	r4, r4, r3
 801288e:	f7ff fd05 	bl	801229c <__malloc_lock>
 8012892:	4a1e      	ldr	r2, [pc, #120]	; (801290c <_free_r+0x94>)
 8012894:	9801      	ldr	r0, [sp, #4]
 8012896:	6813      	ldr	r3, [r2, #0]
 8012898:	b933      	cbnz	r3, 80128a8 <_free_r+0x30>
 801289a:	6063      	str	r3, [r4, #4]
 801289c:	6014      	str	r4, [r2, #0]
 801289e:	b003      	add	sp, #12
 80128a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128a4:	f7ff bd00 	b.w	80122a8 <__malloc_unlock>
 80128a8:	42a3      	cmp	r3, r4
 80128aa:	d908      	bls.n	80128be <_free_r+0x46>
 80128ac:	6825      	ldr	r5, [r4, #0]
 80128ae:	1961      	adds	r1, r4, r5
 80128b0:	428b      	cmp	r3, r1
 80128b2:	bf01      	itttt	eq
 80128b4:	6819      	ldreq	r1, [r3, #0]
 80128b6:	685b      	ldreq	r3, [r3, #4]
 80128b8:	1949      	addeq	r1, r1, r5
 80128ba:	6021      	streq	r1, [r4, #0]
 80128bc:	e7ed      	b.n	801289a <_free_r+0x22>
 80128be:	461a      	mov	r2, r3
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	b10b      	cbz	r3, 80128c8 <_free_r+0x50>
 80128c4:	42a3      	cmp	r3, r4
 80128c6:	d9fa      	bls.n	80128be <_free_r+0x46>
 80128c8:	6811      	ldr	r1, [r2, #0]
 80128ca:	1855      	adds	r5, r2, r1
 80128cc:	42a5      	cmp	r5, r4
 80128ce:	d10b      	bne.n	80128e8 <_free_r+0x70>
 80128d0:	6824      	ldr	r4, [r4, #0]
 80128d2:	4421      	add	r1, r4
 80128d4:	1854      	adds	r4, r2, r1
 80128d6:	42a3      	cmp	r3, r4
 80128d8:	6011      	str	r1, [r2, #0]
 80128da:	d1e0      	bne.n	801289e <_free_r+0x26>
 80128dc:	681c      	ldr	r4, [r3, #0]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	6053      	str	r3, [r2, #4]
 80128e2:	440c      	add	r4, r1
 80128e4:	6014      	str	r4, [r2, #0]
 80128e6:	e7da      	b.n	801289e <_free_r+0x26>
 80128e8:	d902      	bls.n	80128f0 <_free_r+0x78>
 80128ea:	230c      	movs	r3, #12
 80128ec:	6003      	str	r3, [r0, #0]
 80128ee:	e7d6      	b.n	801289e <_free_r+0x26>
 80128f0:	6825      	ldr	r5, [r4, #0]
 80128f2:	1961      	adds	r1, r4, r5
 80128f4:	428b      	cmp	r3, r1
 80128f6:	bf04      	itt	eq
 80128f8:	6819      	ldreq	r1, [r3, #0]
 80128fa:	685b      	ldreq	r3, [r3, #4]
 80128fc:	6063      	str	r3, [r4, #4]
 80128fe:	bf04      	itt	eq
 8012900:	1949      	addeq	r1, r1, r5
 8012902:	6021      	streq	r1, [r4, #0]
 8012904:	6054      	str	r4, [r2, #4]
 8012906:	e7ca      	b.n	801289e <_free_r+0x26>
 8012908:	b003      	add	sp, #12
 801290a:	bd30      	pop	{r4, r5, pc}
 801290c:	20008118 	.word	0x20008118

08012910 <__sfputc_r>:
 8012910:	6893      	ldr	r3, [r2, #8]
 8012912:	3b01      	subs	r3, #1
 8012914:	2b00      	cmp	r3, #0
 8012916:	b410      	push	{r4}
 8012918:	6093      	str	r3, [r2, #8]
 801291a:	da08      	bge.n	801292e <__sfputc_r+0x1e>
 801291c:	6994      	ldr	r4, [r2, #24]
 801291e:	42a3      	cmp	r3, r4
 8012920:	db01      	blt.n	8012926 <__sfputc_r+0x16>
 8012922:	290a      	cmp	r1, #10
 8012924:	d103      	bne.n	801292e <__sfputc_r+0x1e>
 8012926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801292a:	f000 bba7 	b.w	801307c <__swbuf_r>
 801292e:	6813      	ldr	r3, [r2, #0]
 8012930:	1c58      	adds	r0, r3, #1
 8012932:	6010      	str	r0, [r2, #0]
 8012934:	7019      	strb	r1, [r3, #0]
 8012936:	4608      	mov	r0, r1
 8012938:	f85d 4b04 	ldr.w	r4, [sp], #4
 801293c:	4770      	bx	lr

0801293e <__sfputs_r>:
 801293e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012940:	4606      	mov	r6, r0
 8012942:	460f      	mov	r7, r1
 8012944:	4614      	mov	r4, r2
 8012946:	18d5      	adds	r5, r2, r3
 8012948:	42ac      	cmp	r4, r5
 801294a:	d101      	bne.n	8012950 <__sfputs_r+0x12>
 801294c:	2000      	movs	r0, #0
 801294e:	e007      	b.n	8012960 <__sfputs_r+0x22>
 8012950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012954:	463a      	mov	r2, r7
 8012956:	4630      	mov	r0, r6
 8012958:	f7ff ffda 	bl	8012910 <__sfputc_r>
 801295c:	1c43      	adds	r3, r0, #1
 801295e:	d1f3      	bne.n	8012948 <__sfputs_r+0xa>
 8012960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012964 <_vfiprintf_r>:
 8012964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012968:	460d      	mov	r5, r1
 801296a:	b09d      	sub	sp, #116	; 0x74
 801296c:	4614      	mov	r4, r2
 801296e:	4698      	mov	r8, r3
 8012970:	4606      	mov	r6, r0
 8012972:	b118      	cbz	r0, 801297c <_vfiprintf_r+0x18>
 8012974:	6a03      	ldr	r3, [r0, #32]
 8012976:	b90b      	cbnz	r3, 801297c <_vfiprintf_r+0x18>
 8012978:	f7ff fde2 	bl	8012540 <__sinit>
 801297c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801297e:	07d9      	lsls	r1, r3, #31
 8012980:	d405      	bmi.n	801298e <_vfiprintf_r+0x2a>
 8012982:	89ab      	ldrh	r3, [r5, #12]
 8012984:	059a      	lsls	r2, r3, #22
 8012986:	d402      	bmi.n	801298e <_vfiprintf_r+0x2a>
 8012988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801298a:	f7ff ff56 	bl	801283a <__retarget_lock_acquire_recursive>
 801298e:	89ab      	ldrh	r3, [r5, #12]
 8012990:	071b      	lsls	r3, r3, #28
 8012992:	d501      	bpl.n	8012998 <_vfiprintf_r+0x34>
 8012994:	692b      	ldr	r3, [r5, #16]
 8012996:	b99b      	cbnz	r3, 80129c0 <_vfiprintf_r+0x5c>
 8012998:	4629      	mov	r1, r5
 801299a:	4630      	mov	r0, r6
 801299c:	f000 fbac 	bl	80130f8 <__swsetup_r>
 80129a0:	b170      	cbz	r0, 80129c0 <_vfiprintf_r+0x5c>
 80129a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129a4:	07dc      	lsls	r4, r3, #31
 80129a6:	d504      	bpl.n	80129b2 <_vfiprintf_r+0x4e>
 80129a8:	f04f 30ff 	mov.w	r0, #4294967295
 80129ac:	b01d      	add	sp, #116	; 0x74
 80129ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b2:	89ab      	ldrh	r3, [r5, #12]
 80129b4:	0598      	lsls	r0, r3, #22
 80129b6:	d4f7      	bmi.n	80129a8 <_vfiprintf_r+0x44>
 80129b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129ba:	f7ff ff3f 	bl	801283c <__retarget_lock_release_recursive>
 80129be:	e7f3      	b.n	80129a8 <_vfiprintf_r+0x44>
 80129c0:	2300      	movs	r3, #0
 80129c2:	9309      	str	r3, [sp, #36]	; 0x24
 80129c4:	2320      	movs	r3, #32
 80129c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80129ce:	2330      	movs	r3, #48	; 0x30
 80129d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012b84 <_vfiprintf_r+0x220>
 80129d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129d8:	f04f 0901 	mov.w	r9, #1
 80129dc:	4623      	mov	r3, r4
 80129de:	469a      	mov	sl, r3
 80129e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129e4:	b10a      	cbz	r2, 80129ea <_vfiprintf_r+0x86>
 80129e6:	2a25      	cmp	r2, #37	; 0x25
 80129e8:	d1f9      	bne.n	80129de <_vfiprintf_r+0x7a>
 80129ea:	ebba 0b04 	subs.w	fp, sl, r4
 80129ee:	d00b      	beq.n	8012a08 <_vfiprintf_r+0xa4>
 80129f0:	465b      	mov	r3, fp
 80129f2:	4622      	mov	r2, r4
 80129f4:	4629      	mov	r1, r5
 80129f6:	4630      	mov	r0, r6
 80129f8:	f7ff ffa1 	bl	801293e <__sfputs_r>
 80129fc:	3001      	adds	r0, #1
 80129fe:	f000 80a9 	beq.w	8012b54 <_vfiprintf_r+0x1f0>
 8012a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a04:	445a      	add	r2, fp
 8012a06:	9209      	str	r2, [sp, #36]	; 0x24
 8012a08:	f89a 3000 	ldrb.w	r3, [sl]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	f000 80a1 	beq.w	8012b54 <_vfiprintf_r+0x1f0>
 8012a12:	2300      	movs	r3, #0
 8012a14:	f04f 32ff 	mov.w	r2, #4294967295
 8012a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a1c:	f10a 0a01 	add.w	sl, sl, #1
 8012a20:	9304      	str	r3, [sp, #16]
 8012a22:	9307      	str	r3, [sp, #28]
 8012a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a28:	931a      	str	r3, [sp, #104]	; 0x68
 8012a2a:	4654      	mov	r4, sl
 8012a2c:	2205      	movs	r2, #5
 8012a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a32:	4854      	ldr	r0, [pc, #336]	; (8012b84 <_vfiprintf_r+0x220>)
 8012a34:	f7ed fbfc 	bl	8000230 <memchr>
 8012a38:	9a04      	ldr	r2, [sp, #16]
 8012a3a:	b9d8      	cbnz	r0, 8012a74 <_vfiprintf_r+0x110>
 8012a3c:	06d1      	lsls	r1, r2, #27
 8012a3e:	bf44      	itt	mi
 8012a40:	2320      	movmi	r3, #32
 8012a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a46:	0713      	lsls	r3, r2, #28
 8012a48:	bf44      	itt	mi
 8012a4a:	232b      	movmi	r3, #43	; 0x2b
 8012a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a50:	f89a 3000 	ldrb.w	r3, [sl]
 8012a54:	2b2a      	cmp	r3, #42	; 0x2a
 8012a56:	d015      	beq.n	8012a84 <_vfiprintf_r+0x120>
 8012a58:	9a07      	ldr	r2, [sp, #28]
 8012a5a:	4654      	mov	r4, sl
 8012a5c:	2000      	movs	r0, #0
 8012a5e:	f04f 0c0a 	mov.w	ip, #10
 8012a62:	4621      	mov	r1, r4
 8012a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a68:	3b30      	subs	r3, #48	; 0x30
 8012a6a:	2b09      	cmp	r3, #9
 8012a6c:	d94d      	bls.n	8012b0a <_vfiprintf_r+0x1a6>
 8012a6e:	b1b0      	cbz	r0, 8012a9e <_vfiprintf_r+0x13a>
 8012a70:	9207      	str	r2, [sp, #28]
 8012a72:	e014      	b.n	8012a9e <_vfiprintf_r+0x13a>
 8012a74:	eba0 0308 	sub.w	r3, r0, r8
 8012a78:	fa09 f303 	lsl.w	r3, r9, r3
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	9304      	str	r3, [sp, #16]
 8012a80:	46a2      	mov	sl, r4
 8012a82:	e7d2      	b.n	8012a2a <_vfiprintf_r+0xc6>
 8012a84:	9b03      	ldr	r3, [sp, #12]
 8012a86:	1d19      	adds	r1, r3, #4
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	9103      	str	r1, [sp, #12]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	bfbb      	ittet	lt
 8012a90:	425b      	neglt	r3, r3
 8012a92:	f042 0202 	orrlt.w	r2, r2, #2
 8012a96:	9307      	strge	r3, [sp, #28]
 8012a98:	9307      	strlt	r3, [sp, #28]
 8012a9a:	bfb8      	it	lt
 8012a9c:	9204      	strlt	r2, [sp, #16]
 8012a9e:	7823      	ldrb	r3, [r4, #0]
 8012aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8012aa2:	d10c      	bne.n	8012abe <_vfiprintf_r+0x15a>
 8012aa4:	7863      	ldrb	r3, [r4, #1]
 8012aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8012aa8:	d134      	bne.n	8012b14 <_vfiprintf_r+0x1b0>
 8012aaa:	9b03      	ldr	r3, [sp, #12]
 8012aac:	1d1a      	adds	r2, r3, #4
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	9203      	str	r2, [sp, #12]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	bfb8      	it	lt
 8012ab6:	f04f 33ff 	movlt.w	r3, #4294967295
 8012aba:	3402      	adds	r4, #2
 8012abc:	9305      	str	r3, [sp, #20]
 8012abe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012b94 <_vfiprintf_r+0x230>
 8012ac2:	7821      	ldrb	r1, [r4, #0]
 8012ac4:	2203      	movs	r2, #3
 8012ac6:	4650      	mov	r0, sl
 8012ac8:	f7ed fbb2 	bl	8000230 <memchr>
 8012acc:	b138      	cbz	r0, 8012ade <_vfiprintf_r+0x17a>
 8012ace:	9b04      	ldr	r3, [sp, #16]
 8012ad0:	eba0 000a 	sub.w	r0, r0, sl
 8012ad4:	2240      	movs	r2, #64	; 0x40
 8012ad6:	4082      	lsls	r2, r0
 8012ad8:	4313      	orrs	r3, r2
 8012ada:	3401      	adds	r4, #1
 8012adc:	9304      	str	r3, [sp, #16]
 8012ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ae2:	4829      	ldr	r0, [pc, #164]	; (8012b88 <_vfiprintf_r+0x224>)
 8012ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ae8:	2206      	movs	r2, #6
 8012aea:	f7ed fba1 	bl	8000230 <memchr>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	d03f      	beq.n	8012b72 <_vfiprintf_r+0x20e>
 8012af2:	4b26      	ldr	r3, [pc, #152]	; (8012b8c <_vfiprintf_r+0x228>)
 8012af4:	bb1b      	cbnz	r3, 8012b3e <_vfiprintf_r+0x1da>
 8012af6:	9b03      	ldr	r3, [sp, #12]
 8012af8:	3307      	adds	r3, #7
 8012afa:	f023 0307 	bic.w	r3, r3, #7
 8012afe:	3308      	adds	r3, #8
 8012b00:	9303      	str	r3, [sp, #12]
 8012b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b04:	443b      	add	r3, r7
 8012b06:	9309      	str	r3, [sp, #36]	; 0x24
 8012b08:	e768      	b.n	80129dc <_vfiprintf_r+0x78>
 8012b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b0e:	460c      	mov	r4, r1
 8012b10:	2001      	movs	r0, #1
 8012b12:	e7a6      	b.n	8012a62 <_vfiprintf_r+0xfe>
 8012b14:	2300      	movs	r3, #0
 8012b16:	3401      	adds	r4, #1
 8012b18:	9305      	str	r3, [sp, #20]
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	f04f 0c0a 	mov.w	ip, #10
 8012b20:	4620      	mov	r0, r4
 8012b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b26:	3a30      	subs	r2, #48	; 0x30
 8012b28:	2a09      	cmp	r2, #9
 8012b2a:	d903      	bls.n	8012b34 <_vfiprintf_r+0x1d0>
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d0c6      	beq.n	8012abe <_vfiprintf_r+0x15a>
 8012b30:	9105      	str	r1, [sp, #20]
 8012b32:	e7c4      	b.n	8012abe <_vfiprintf_r+0x15a>
 8012b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b38:	4604      	mov	r4, r0
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	e7f0      	b.n	8012b20 <_vfiprintf_r+0x1bc>
 8012b3e:	ab03      	add	r3, sp, #12
 8012b40:	9300      	str	r3, [sp, #0]
 8012b42:	462a      	mov	r2, r5
 8012b44:	4b12      	ldr	r3, [pc, #72]	; (8012b90 <_vfiprintf_r+0x22c>)
 8012b46:	a904      	add	r1, sp, #16
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f3af 8000 	nop.w
 8012b4e:	4607      	mov	r7, r0
 8012b50:	1c78      	adds	r0, r7, #1
 8012b52:	d1d6      	bne.n	8012b02 <_vfiprintf_r+0x19e>
 8012b54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b56:	07d9      	lsls	r1, r3, #31
 8012b58:	d405      	bmi.n	8012b66 <_vfiprintf_r+0x202>
 8012b5a:	89ab      	ldrh	r3, [r5, #12]
 8012b5c:	059a      	lsls	r2, r3, #22
 8012b5e:	d402      	bmi.n	8012b66 <_vfiprintf_r+0x202>
 8012b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b62:	f7ff fe6b 	bl	801283c <__retarget_lock_release_recursive>
 8012b66:	89ab      	ldrh	r3, [r5, #12]
 8012b68:	065b      	lsls	r3, r3, #25
 8012b6a:	f53f af1d 	bmi.w	80129a8 <_vfiprintf_r+0x44>
 8012b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b70:	e71c      	b.n	80129ac <_vfiprintf_r+0x48>
 8012b72:	ab03      	add	r3, sp, #12
 8012b74:	9300      	str	r3, [sp, #0]
 8012b76:	462a      	mov	r2, r5
 8012b78:	4b05      	ldr	r3, [pc, #20]	; (8012b90 <_vfiprintf_r+0x22c>)
 8012b7a:	a904      	add	r1, sp, #16
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f000 f879 	bl	8012c74 <_printf_i>
 8012b82:	e7e4      	b.n	8012b4e <_vfiprintf_r+0x1ea>
 8012b84:	080155e4 	.word	0x080155e4
 8012b88:	080155ee 	.word	0x080155ee
 8012b8c:	00000000 	.word	0x00000000
 8012b90:	0801293f 	.word	0x0801293f
 8012b94:	080155ea 	.word	0x080155ea

08012b98 <_printf_common>:
 8012b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b9c:	4616      	mov	r6, r2
 8012b9e:	4699      	mov	r9, r3
 8012ba0:	688a      	ldr	r2, [r1, #8]
 8012ba2:	690b      	ldr	r3, [r1, #16]
 8012ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	bfb8      	it	lt
 8012bac:	4613      	movlt	r3, r2
 8012bae:	6033      	str	r3, [r6, #0]
 8012bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012bb4:	4607      	mov	r7, r0
 8012bb6:	460c      	mov	r4, r1
 8012bb8:	b10a      	cbz	r2, 8012bbe <_printf_common+0x26>
 8012bba:	3301      	adds	r3, #1
 8012bbc:	6033      	str	r3, [r6, #0]
 8012bbe:	6823      	ldr	r3, [r4, #0]
 8012bc0:	0699      	lsls	r1, r3, #26
 8012bc2:	bf42      	ittt	mi
 8012bc4:	6833      	ldrmi	r3, [r6, #0]
 8012bc6:	3302      	addmi	r3, #2
 8012bc8:	6033      	strmi	r3, [r6, #0]
 8012bca:	6825      	ldr	r5, [r4, #0]
 8012bcc:	f015 0506 	ands.w	r5, r5, #6
 8012bd0:	d106      	bne.n	8012be0 <_printf_common+0x48>
 8012bd2:	f104 0a19 	add.w	sl, r4, #25
 8012bd6:	68e3      	ldr	r3, [r4, #12]
 8012bd8:	6832      	ldr	r2, [r6, #0]
 8012bda:	1a9b      	subs	r3, r3, r2
 8012bdc:	42ab      	cmp	r3, r5
 8012bde:	dc26      	bgt.n	8012c2e <_printf_common+0x96>
 8012be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012be4:	1e13      	subs	r3, r2, #0
 8012be6:	6822      	ldr	r2, [r4, #0]
 8012be8:	bf18      	it	ne
 8012bea:	2301      	movne	r3, #1
 8012bec:	0692      	lsls	r2, r2, #26
 8012bee:	d42b      	bmi.n	8012c48 <_printf_common+0xb0>
 8012bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bf4:	4649      	mov	r1, r9
 8012bf6:	4638      	mov	r0, r7
 8012bf8:	47c0      	blx	r8
 8012bfa:	3001      	adds	r0, #1
 8012bfc:	d01e      	beq.n	8012c3c <_printf_common+0xa4>
 8012bfe:	6823      	ldr	r3, [r4, #0]
 8012c00:	6922      	ldr	r2, [r4, #16]
 8012c02:	f003 0306 	and.w	r3, r3, #6
 8012c06:	2b04      	cmp	r3, #4
 8012c08:	bf02      	ittt	eq
 8012c0a:	68e5      	ldreq	r5, [r4, #12]
 8012c0c:	6833      	ldreq	r3, [r6, #0]
 8012c0e:	1aed      	subeq	r5, r5, r3
 8012c10:	68a3      	ldr	r3, [r4, #8]
 8012c12:	bf0c      	ite	eq
 8012c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c18:	2500      	movne	r5, #0
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	bfc4      	itt	gt
 8012c1e:	1a9b      	subgt	r3, r3, r2
 8012c20:	18ed      	addgt	r5, r5, r3
 8012c22:	2600      	movs	r6, #0
 8012c24:	341a      	adds	r4, #26
 8012c26:	42b5      	cmp	r5, r6
 8012c28:	d11a      	bne.n	8012c60 <_printf_common+0xc8>
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	e008      	b.n	8012c40 <_printf_common+0xa8>
 8012c2e:	2301      	movs	r3, #1
 8012c30:	4652      	mov	r2, sl
 8012c32:	4649      	mov	r1, r9
 8012c34:	4638      	mov	r0, r7
 8012c36:	47c0      	blx	r8
 8012c38:	3001      	adds	r0, #1
 8012c3a:	d103      	bne.n	8012c44 <_printf_common+0xac>
 8012c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c44:	3501      	adds	r5, #1
 8012c46:	e7c6      	b.n	8012bd6 <_printf_common+0x3e>
 8012c48:	18e1      	adds	r1, r4, r3
 8012c4a:	1c5a      	adds	r2, r3, #1
 8012c4c:	2030      	movs	r0, #48	; 0x30
 8012c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c52:	4422      	add	r2, r4
 8012c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c5c:	3302      	adds	r3, #2
 8012c5e:	e7c7      	b.n	8012bf0 <_printf_common+0x58>
 8012c60:	2301      	movs	r3, #1
 8012c62:	4622      	mov	r2, r4
 8012c64:	4649      	mov	r1, r9
 8012c66:	4638      	mov	r0, r7
 8012c68:	47c0      	blx	r8
 8012c6a:	3001      	adds	r0, #1
 8012c6c:	d0e6      	beq.n	8012c3c <_printf_common+0xa4>
 8012c6e:	3601      	adds	r6, #1
 8012c70:	e7d9      	b.n	8012c26 <_printf_common+0x8e>
	...

08012c74 <_printf_i>:
 8012c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c78:	7e0f      	ldrb	r7, [r1, #24]
 8012c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c7c:	2f78      	cmp	r7, #120	; 0x78
 8012c7e:	4691      	mov	r9, r2
 8012c80:	4680      	mov	r8, r0
 8012c82:	460c      	mov	r4, r1
 8012c84:	469a      	mov	sl, r3
 8012c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c8a:	d807      	bhi.n	8012c9c <_printf_i+0x28>
 8012c8c:	2f62      	cmp	r7, #98	; 0x62
 8012c8e:	d80a      	bhi.n	8012ca6 <_printf_i+0x32>
 8012c90:	2f00      	cmp	r7, #0
 8012c92:	f000 80d4 	beq.w	8012e3e <_printf_i+0x1ca>
 8012c96:	2f58      	cmp	r7, #88	; 0x58
 8012c98:	f000 80c0 	beq.w	8012e1c <_printf_i+0x1a8>
 8012c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ca4:	e03a      	b.n	8012d1c <_printf_i+0xa8>
 8012ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012caa:	2b15      	cmp	r3, #21
 8012cac:	d8f6      	bhi.n	8012c9c <_printf_i+0x28>
 8012cae:	a101      	add	r1, pc, #4	; (adr r1, 8012cb4 <_printf_i+0x40>)
 8012cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012cb4:	08012d0d 	.word	0x08012d0d
 8012cb8:	08012d21 	.word	0x08012d21
 8012cbc:	08012c9d 	.word	0x08012c9d
 8012cc0:	08012c9d 	.word	0x08012c9d
 8012cc4:	08012c9d 	.word	0x08012c9d
 8012cc8:	08012c9d 	.word	0x08012c9d
 8012ccc:	08012d21 	.word	0x08012d21
 8012cd0:	08012c9d 	.word	0x08012c9d
 8012cd4:	08012c9d 	.word	0x08012c9d
 8012cd8:	08012c9d 	.word	0x08012c9d
 8012cdc:	08012c9d 	.word	0x08012c9d
 8012ce0:	08012e25 	.word	0x08012e25
 8012ce4:	08012d4d 	.word	0x08012d4d
 8012ce8:	08012ddf 	.word	0x08012ddf
 8012cec:	08012c9d 	.word	0x08012c9d
 8012cf0:	08012c9d 	.word	0x08012c9d
 8012cf4:	08012e47 	.word	0x08012e47
 8012cf8:	08012c9d 	.word	0x08012c9d
 8012cfc:	08012d4d 	.word	0x08012d4d
 8012d00:	08012c9d 	.word	0x08012c9d
 8012d04:	08012c9d 	.word	0x08012c9d
 8012d08:	08012de7 	.word	0x08012de7
 8012d0c:	682b      	ldr	r3, [r5, #0]
 8012d0e:	1d1a      	adds	r2, r3, #4
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	602a      	str	r2, [r5, #0]
 8012d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e09f      	b.n	8012e60 <_printf_i+0x1ec>
 8012d20:	6820      	ldr	r0, [r4, #0]
 8012d22:	682b      	ldr	r3, [r5, #0]
 8012d24:	0607      	lsls	r7, r0, #24
 8012d26:	f103 0104 	add.w	r1, r3, #4
 8012d2a:	6029      	str	r1, [r5, #0]
 8012d2c:	d501      	bpl.n	8012d32 <_printf_i+0xbe>
 8012d2e:	681e      	ldr	r6, [r3, #0]
 8012d30:	e003      	b.n	8012d3a <_printf_i+0xc6>
 8012d32:	0646      	lsls	r6, r0, #25
 8012d34:	d5fb      	bpl.n	8012d2e <_printf_i+0xba>
 8012d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012d3a:	2e00      	cmp	r6, #0
 8012d3c:	da03      	bge.n	8012d46 <_printf_i+0xd2>
 8012d3e:	232d      	movs	r3, #45	; 0x2d
 8012d40:	4276      	negs	r6, r6
 8012d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d46:	485a      	ldr	r0, [pc, #360]	; (8012eb0 <_printf_i+0x23c>)
 8012d48:	230a      	movs	r3, #10
 8012d4a:	e012      	b.n	8012d72 <_printf_i+0xfe>
 8012d4c:	682b      	ldr	r3, [r5, #0]
 8012d4e:	6820      	ldr	r0, [r4, #0]
 8012d50:	1d19      	adds	r1, r3, #4
 8012d52:	6029      	str	r1, [r5, #0]
 8012d54:	0605      	lsls	r5, r0, #24
 8012d56:	d501      	bpl.n	8012d5c <_printf_i+0xe8>
 8012d58:	681e      	ldr	r6, [r3, #0]
 8012d5a:	e002      	b.n	8012d62 <_printf_i+0xee>
 8012d5c:	0641      	lsls	r1, r0, #25
 8012d5e:	d5fb      	bpl.n	8012d58 <_printf_i+0xe4>
 8012d60:	881e      	ldrh	r6, [r3, #0]
 8012d62:	4853      	ldr	r0, [pc, #332]	; (8012eb0 <_printf_i+0x23c>)
 8012d64:	2f6f      	cmp	r7, #111	; 0x6f
 8012d66:	bf0c      	ite	eq
 8012d68:	2308      	moveq	r3, #8
 8012d6a:	230a      	movne	r3, #10
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d72:	6865      	ldr	r5, [r4, #4]
 8012d74:	60a5      	str	r5, [r4, #8]
 8012d76:	2d00      	cmp	r5, #0
 8012d78:	bfa2      	ittt	ge
 8012d7a:	6821      	ldrge	r1, [r4, #0]
 8012d7c:	f021 0104 	bicge.w	r1, r1, #4
 8012d80:	6021      	strge	r1, [r4, #0]
 8012d82:	b90e      	cbnz	r6, 8012d88 <_printf_i+0x114>
 8012d84:	2d00      	cmp	r5, #0
 8012d86:	d04b      	beq.n	8012e20 <_printf_i+0x1ac>
 8012d88:	4615      	mov	r5, r2
 8012d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8012d92:	5dc7      	ldrb	r7, [r0, r7]
 8012d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012d98:	4637      	mov	r7, r6
 8012d9a:	42bb      	cmp	r3, r7
 8012d9c:	460e      	mov	r6, r1
 8012d9e:	d9f4      	bls.n	8012d8a <_printf_i+0x116>
 8012da0:	2b08      	cmp	r3, #8
 8012da2:	d10b      	bne.n	8012dbc <_printf_i+0x148>
 8012da4:	6823      	ldr	r3, [r4, #0]
 8012da6:	07de      	lsls	r6, r3, #31
 8012da8:	d508      	bpl.n	8012dbc <_printf_i+0x148>
 8012daa:	6923      	ldr	r3, [r4, #16]
 8012dac:	6861      	ldr	r1, [r4, #4]
 8012dae:	4299      	cmp	r1, r3
 8012db0:	bfde      	ittt	le
 8012db2:	2330      	movle	r3, #48	; 0x30
 8012db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012dbc:	1b52      	subs	r2, r2, r5
 8012dbe:	6122      	str	r2, [r4, #16]
 8012dc0:	f8cd a000 	str.w	sl, [sp]
 8012dc4:	464b      	mov	r3, r9
 8012dc6:	aa03      	add	r2, sp, #12
 8012dc8:	4621      	mov	r1, r4
 8012dca:	4640      	mov	r0, r8
 8012dcc:	f7ff fee4 	bl	8012b98 <_printf_common>
 8012dd0:	3001      	adds	r0, #1
 8012dd2:	d14a      	bne.n	8012e6a <_printf_i+0x1f6>
 8012dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd8:	b004      	add	sp, #16
 8012dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dde:	6823      	ldr	r3, [r4, #0]
 8012de0:	f043 0320 	orr.w	r3, r3, #32
 8012de4:	6023      	str	r3, [r4, #0]
 8012de6:	4833      	ldr	r0, [pc, #204]	; (8012eb4 <_printf_i+0x240>)
 8012de8:	2778      	movs	r7, #120	; 0x78
 8012dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012dee:	6823      	ldr	r3, [r4, #0]
 8012df0:	6829      	ldr	r1, [r5, #0]
 8012df2:	061f      	lsls	r7, r3, #24
 8012df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8012df8:	d402      	bmi.n	8012e00 <_printf_i+0x18c>
 8012dfa:	065f      	lsls	r7, r3, #25
 8012dfc:	bf48      	it	mi
 8012dfe:	b2b6      	uxthmi	r6, r6
 8012e00:	07df      	lsls	r7, r3, #31
 8012e02:	bf48      	it	mi
 8012e04:	f043 0320 	orrmi.w	r3, r3, #32
 8012e08:	6029      	str	r1, [r5, #0]
 8012e0a:	bf48      	it	mi
 8012e0c:	6023      	strmi	r3, [r4, #0]
 8012e0e:	b91e      	cbnz	r6, 8012e18 <_printf_i+0x1a4>
 8012e10:	6823      	ldr	r3, [r4, #0]
 8012e12:	f023 0320 	bic.w	r3, r3, #32
 8012e16:	6023      	str	r3, [r4, #0]
 8012e18:	2310      	movs	r3, #16
 8012e1a:	e7a7      	b.n	8012d6c <_printf_i+0xf8>
 8012e1c:	4824      	ldr	r0, [pc, #144]	; (8012eb0 <_printf_i+0x23c>)
 8012e1e:	e7e4      	b.n	8012dea <_printf_i+0x176>
 8012e20:	4615      	mov	r5, r2
 8012e22:	e7bd      	b.n	8012da0 <_printf_i+0x12c>
 8012e24:	682b      	ldr	r3, [r5, #0]
 8012e26:	6826      	ldr	r6, [r4, #0]
 8012e28:	6961      	ldr	r1, [r4, #20]
 8012e2a:	1d18      	adds	r0, r3, #4
 8012e2c:	6028      	str	r0, [r5, #0]
 8012e2e:	0635      	lsls	r5, r6, #24
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	d501      	bpl.n	8012e38 <_printf_i+0x1c4>
 8012e34:	6019      	str	r1, [r3, #0]
 8012e36:	e002      	b.n	8012e3e <_printf_i+0x1ca>
 8012e38:	0670      	lsls	r0, r6, #25
 8012e3a:	d5fb      	bpl.n	8012e34 <_printf_i+0x1c0>
 8012e3c:	8019      	strh	r1, [r3, #0]
 8012e3e:	2300      	movs	r3, #0
 8012e40:	6123      	str	r3, [r4, #16]
 8012e42:	4615      	mov	r5, r2
 8012e44:	e7bc      	b.n	8012dc0 <_printf_i+0x14c>
 8012e46:	682b      	ldr	r3, [r5, #0]
 8012e48:	1d1a      	adds	r2, r3, #4
 8012e4a:	602a      	str	r2, [r5, #0]
 8012e4c:	681d      	ldr	r5, [r3, #0]
 8012e4e:	6862      	ldr	r2, [r4, #4]
 8012e50:	2100      	movs	r1, #0
 8012e52:	4628      	mov	r0, r5
 8012e54:	f7ed f9ec 	bl	8000230 <memchr>
 8012e58:	b108      	cbz	r0, 8012e5e <_printf_i+0x1ea>
 8012e5a:	1b40      	subs	r0, r0, r5
 8012e5c:	6060      	str	r0, [r4, #4]
 8012e5e:	6863      	ldr	r3, [r4, #4]
 8012e60:	6123      	str	r3, [r4, #16]
 8012e62:	2300      	movs	r3, #0
 8012e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e68:	e7aa      	b.n	8012dc0 <_printf_i+0x14c>
 8012e6a:	6923      	ldr	r3, [r4, #16]
 8012e6c:	462a      	mov	r2, r5
 8012e6e:	4649      	mov	r1, r9
 8012e70:	4640      	mov	r0, r8
 8012e72:	47d0      	blx	sl
 8012e74:	3001      	adds	r0, #1
 8012e76:	d0ad      	beq.n	8012dd4 <_printf_i+0x160>
 8012e78:	6823      	ldr	r3, [r4, #0]
 8012e7a:	079b      	lsls	r3, r3, #30
 8012e7c:	d413      	bmi.n	8012ea6 <_printf_i+0x232>
 8012e7e:	68e0      	ldr	r0, [r4, #12]
 8012e80:	9b03      	ldr	r3, [sp, #12]
 8012e82:	4298      	cmp	r0, r3
 8012e84:	bfb8      	it	lt
 8012e86:	4618      	movlt	r0, r3
 8012e88:	e7a6      	b.n	8012dd8 <_printf_i+0x164>
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	4632      	mov	r2, r6
 8012e8e:	4649      	mov	r1, r9
 8012e90:	4640      	mov	r0, r8
 8012e92:	47d0      	blx	sl
 8012e94:	3001      	adds	r0, #1
 8012e96:	d09d      	beq.n	8012dd4 <_printf_i+0x160>
 8012e98:	3501      	adds	r5, #1
 8012e9a:	68e3      	ldr	r3, [r4, #12]
 8012e9c:	9903      	ldr	r1, [sp, #12]
 8012e9e:	1a5b      	subs	r3, r3, r1
 8012ea0:	42ab      	cmp	r3, r5
 8012ea2:	dcf2      	bgt.n	8012e8a <_printf_i+0x216>
 8012ea4:	e7eb      	b.n	8012e7e <_printf_i+0x20a>
 8012ea6:	2500      	movs	r5, #0
 8012ea8:	f104 0619 	add.w	r6, r4, #25
 8012eac:	e7f5      	b.n	8012e9a <_printf_i+0x226>
 8012eae:	bf00      	nop
 8012eb0:	080155f5 	.word	0x080155f5
 8012eb4:	08015606 	.word	0x08015606

08012eb8 <__sflush_r>:
 8012eb8:	898a      	ldrh	r2, [r1, #12]
 8012eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	0710      	lsls	r0, r2, #28
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	d458      	bmi.n	8012f78 <__sflush_r+0xc0>
 8012ec6:	684b      	ldr	r3, [r1, #4]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	dc05      	bgt.n	8012ed8 <__sflush_r+0x20>
 8012ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	dc02      	bgt.n	8012ed8 <__sflush_r+0x20>
 8012ed2:	2000      	movs	r0, #0
 8012ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012eda:	2e00      	cmp	r6, #0
 8012edc:	d0f9      	beq.n	8012ed2 <__sflush_r+0x1a>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ee4:	682f      	ldr	r7, [r5, #0]
 8012ee6:	6a21      	ldr	r1, [r4, #32]
 8012ee8:	602b      	str	r3, [r5, #0]
 8012eea:	d032      	beq.n	8012f52 <__sflush_r+0x9a>
 8012eec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012eee:	89a3      	ldrh	r3, [r4, #12]
 8012ef0:	075a      	lsls	r2, r3, #29
 8012ef2:	d505      	bpl.n	8012f00 <__sflush_r+0x48>
 8012ef4:	6863      	ldr	r3, [r4, #4]
 8012ef6:	1ac0      	subs	r0, r0, r3
 8012ef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012efa:	b10b      	cbz	r3, 8012f00 <__sflush_r+0x48>
 8012efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012efe:	1ac0      	subs	r0, r0, r3
 8012f00:	2300      	movs	r3, #0
 8012f02:	4602      	mov	r2, r0
 8012f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f06:	6a21      	ldr	r1, [r4, #32]
 8012f08:	4628      	mov	r0, r5
 8012f0a:	47b0      	blx	r6
 8012f0c:	1c43      	adds	r3, r0, #1
 8012f0e:	89a3      	ldrh	r3, [r4, #12]
 8012f10:	d106      	bne.n	8012f20 <__sflush_r+0x68>
 8012f12:	6829      	ldr	r1, [r5, #0]
 8012f14:	291d      	cmp	r1, #29
 8012f16:	d82b      	bhi.n	8012f70 <__sflush_r+0xb8>
 8012f18:	4a29      	ldr	r2, [pc, #164]	; (8012fc0 <__sflush_r+0x108>)
 8012f1a:	410a      	asrs	r2, r1
 8012f1c:	07d6      	lsls	r6, r2, #31
 8012f1e:	d427      	bmi.n	8012f70 <__sflush_r+0xb8>
 8012f20:	2200      	movs	r2, #0
 8012f22:	6062      	str	r2, [r4, #4]
 8012f24:	04d9      	lsls	r1, r3, #19
 8012f26:	6922      	ldr	r2, [r4, #16]
 8012f28:	6022      	str	r2, [r4, #0]
 8012f2a:	d504      	bpl.n	8012f36 <__sflush_r+0x7e>
 8012f2c:	1c42      	adds	r2, r0, #1
 8012f2e:	d101      	bne.n	8012f34 <__sflush_r+0x7c>
 8012f30:	682b      	ldr	r3, [r5, #0]
 8012f32:	b903      	cbnz	r3, 8012f36 <__sflush_r+0x7e>
 8012f34:	6560      	str	r0, [r4, #84]	; 0x54
 8012f36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f38:	602f      	str	r7, [r5, #0]
 8012f3a:	2900      	cmp	r1, #0
 8012f3c:	d0c9      	beq.n	8012ed2 <__sflush_r+0x1a>
 8012f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f42:	4299      	cmp	r1, r3
 8012f44:	d002      	beq.n	8012f4c <__sflush_r+0x94>
 8012f46:	4628      	mov	r0, r5
 8012f48:	f7ff fc96 	bl	8012878 <_free_r>
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	6360      	str	r0, [r4, #52]	; 0x34
 8012f50:	e7c0      	b.n	8012ed4 <__sflush_r+0x1c>
 8012f52:	2301      	movs	r3, #1
 8012f54:	4628      	mov	r0, r5
 8012f56:	47b0      	blx	r6
 8012f58:	1c41      	adds	r1, r0, #1
 8012f5a:	d1c8      	bne.n	8012eee <__sflush_r+0x36>
 8012f5c:	682b      	ldr	r3, [r5, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d0c5      	beq.n	8012eee <__sflush_r+0x36>
 8012f62:	2b1d      	cmp	r3, #29
 8012f64:	d001      	beq.n	8012f6a <__sflush_r+0xb2>
 8012f66:	2b16      	cmp	r3, #22
 8012f68:	d101      	bne.n	8012f6e <__sflush_r+0xb6>
 8012f6a:	602f      	str	r7, [r5, #0]
 8012f6c:	e7b1      	b.n	8012ed2 <__sflush_r+0x1a>
 8012f6e:	89a3      	ldrh	r3, [r4, #12]
 8012f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f74:	81a3      	strh	r3, [r4, #12]
 8012f76:	e7ad      	b.n	8012ed4 <__sflush_r+0x1c>
 8012f78:	690f      	ldr	r7, [r1, #16]
 8012f7a:	2f00      	cmp	r7, #0
 8012f7c:	d0a9      	beq.n	8012ed2 <__sflush_r+0x1a>
 8012f7e:	0793      	lsls	r3, r2, #30
 8012f80:	680e      	ldr	r6, [r1, #0]
 8012f82:	bf08      	it	eq
 8012f84:	694b      	ldreq	r3, [r1, #20]
 8012f86:	600f      	str	r7, [r1, #0]
 8012f88:	bf18      	it	ne
 8012f8a:	2300      	movne	r3, #0
 8012f8c:	eba6 0807 	sub.w	r8, r6, r7
 8012f90:	608b      	str	r3, [r1, #8]
 8012f92:	f1b8 0f00 	cmp.w	r8, #0
 8012f96:	dd9c      	ble.n	8012ed2 <__sflush_r+0x1a>
 8012f98:	6a21      	ldr	r1, [r4, #32]
 8012f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f9c:	4643      	mov	r3, r8
 8012f9e:	463a      	mov	r2, r7
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	47b0      	blx	r6
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	dc06      	bgt.n	8012fb6 <__sflush_r+0xfe>
 8012fa8:	89a3      	ldrh	r3, [r4, #12]
 8012faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fae:	81a3      	strh	r3, [r4, #12]
 8012fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fb4:	e78e      	b.n	8012ed4 <__sflush_r+0x1c>
 8012fb6:	4407      	add	r7, r0
 8012fb8:	eba8 0800 	sub.w	r8, r8, r0
 8012fbc:	e7e9      	b.n	8012f92 <__sflush_r+0xda>
 8012fbe:	bf00      	nop
 8012fc0:	dfbffffe 	.word	0xdfbffffe

08012fc4 <_fflush_r>:
 8012fc4:	b538      	push	{r3, r4, r5, lr}
 8012fc6:	690b      	ldr	r3, [r1, #16]
 8012fc8:	4605      	mov	r5, r0
 8012fca:	460c      	mov	r4, r1
 8012fcc:	b913      	cbnz	r3, 8012fd4 <_fflush_r+0x10>
 8012fce:	2500      	movs	r5, #0
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	bd38      	pop	{r3, r4, r5, pc}
 8012fd4:	b118      	cbz	r0, 8012fde <_fflush_r+0x1a>
 8012fd6:	6a03      	ldr	r3, [r0, #32]
 8012fd8:	b90b      	cbnz	r3, 8012fde <_fflush_r+0x1a>
 8012fda:	f7ff fab1 	bl	8012540 <__sinit>
 8012fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d0f3      	beq.n	8012fce <_fflush_r+0xa>
 8012fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012fe8:	07d0      	lsls	r0, r2, #31
 8012fea:	d404      	bmi.n	8012ff6 <_fflush_r+0x32>
 8012fec:	0599      	lsls	r1, r3, #22
 8012fee:	d402      	bmi.n	8012ff6 <_fflush_r+0x32>
 8012ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ff2:	f7ff fc22 	bl	801283a <__retarget_lock_acquire_recursive>
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	f7ff ff5d 	bl	8012eb8 <__sflush_r>
 8012ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013000:	07da      	lsls	r2, r3, #31
 8013002:	4605      	mov	r5, r0
 8013004:	d4e4      	bmi.n	8012fd0 <_fflush_r+0xc>
 8013006:	89a3      	ldrh	r3, [r4, #12]
 8013008:	059b      	lsls	r3, r3, #22
 801300a:	d4e1      	bmi.n	8012fd0 <_fflush_r+0xc>
 801300c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801300e:	f7ff fc15 	bl	801283c <__retarget_lock_release_recursive>
 8013012:	e7dd      	b.n	8012fd0 <_fflush_r+0xc>

08013014 <_putc_r>:
 8013014:	b570      	push	{r4, r5, r6, lr}
 8013016:	460d      	mov	r5, r1
 8013018:	4614      	mov	r4, r2
 801301a:	4606      	mov	r6, r0
 801301c:	b118      	cbz	r0, 8013026 <_putc_r+0x12>
 801301e:	6a03      	ldr	r3, [r0, #32]
 8013020:	b90b      	cbnz	r3, 8013026 <_putc_r+0x12>
 8013022:	f7ff fa8d 	bl	8012540 <__sinit>
 8013026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013028:	07d8      	lsls	r0, r3, #31
 801302a:	d405      	bmi.n	8013038 <_putc_r+0x24>
 801302c:	89a3      	ldrh	r3, [r4, #12]
 801302e:	0599      	lsls	r1, r3, #22
 8013030:	d402      	bmi.n	8013038 <_putc_r+0x24>
 8013032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013034:	f7ff fc01 	bl	801283a <__retarget_lock_acquire_recursive>
 8013038:	68a3      	ldr	r3, [r4, #8]
 801303a:	3b01      	subs	r3, #1
 801303c:	2b00      	cmp	r3, #0
 801303e:	60a3      	str	r3, [r4, #8]
 8013040:	da05      	bge.n	801304e <_putc_r+0x3a>
 8013042:	69a2      	ldr	r2, [r4, #24]
 8013044:	4293      	cmp	r3, r2
 8013046:	db12      	blt.n	801306e <_putc_r+0x5a>
 8013048:	b2eb      	uxtb	r3, r5
 801304a:	2b0a      	cmp	r3, #10
 801304c:	d00f      	beq.n	801306e <_putc_r+0x5a>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	1c5a      	adds	r2, r3, #1
 8013052:	6022      	str	r2, [r4, #0]
 8013054:	701d      	strb	r5, [r3, #0]
 8013056:	b2ed      	uxtb	r5, r5
 8013058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801305a:	07da      	lsls	r2, r3, #31
 801305c:	d405      	bmi.n	801306a <_putc_r+0x56>
 801305e:	89a3      	ldrh	r3, [r4, #12]
 8013060:	059b      	lsls	r3, r3, #22
 8013062:	d402      	bmi.n	801306a <_putc_r+0x56>
 8013064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013066:	f7ff fbe9 	bl	801283c <__retarget_lock_release_recursive>
 801306a:	4628      	mov	r0, r5
 801306c:	bd70      	pop	{r4, r5, r6, pc}
 801306e:	4629      	mov	r1, r5
 8013070:	4622      	mov	r2, r4
 8013072:	4630      	mov	r0, r6
 8013074:	f000 f802 	bl	801307c <__swbuf_r>
 8013078:	4605      	mov	r5, r0
 801307a:	e7ed      	b.n	8013058 <_putc_r+0x44>

0801307c <__swbuf_r>:
 801307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801307e:	460e      	mov	r6, r1
 8013080:	4614      	mov	r4, r2
 8013082:	4605      	mov	r5, r0
 8013084:	b118      	cbz	r0, 801308e <__swbuf_r+0x12>
 8013086:	6a03      	ldr	r3, [r0, #32]
 8013088:	b90b      	cbnz	r3, 801308e <__swbuf_r+0x12>
 801308a:	f7ff fa59 	bl	8012540 <__sinit>
 801308e:	69a3      	ldr	r3, [r4, #24]
 8013090:	60a3      	str	r3, [r4, #8]
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	071a      	lsls	r2, r3, #28
 8013096:	d525      	bpl.n	80130e4 <__swbuf_r+0x68>
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	b31b      	cbz	r3, 80130e4 <__swbuf_r+0x68>
 801309c:	6823      	ldr	r3, [r4, #0]
 801309e:	6922      	ldr	r2, [r4, #16]
 80130a0:	1a98      	subs	r0, r3, r2
 80130a2:	6963      	ldr	r3, [r4, #20]
 80130a4:	b2f6      	uxtb	r6, r6
 80130a6:	4283      	cmp	r3, r0
 80130a8:	4637      	mov	r7, r6
 80130aa:	dc04      	bgt.n	80130b6 <__swbuf_r+0x3a>
 80130ac:	4621      	mov	r1, r4
 80130ae:	4628      	mov	r0, r5
 80130b0:	f7ff ff88 	bl	8012fc4 <_fflush_r>
 80130b4:	b9e0      	cbnz	r0, 80130f0 <__swbuf_r+0x74>
 80130b6:	68a3      	ldr	r3, [r4, #8]
 80130b8:	3b01      	subs	r3, #1
 80130ba:	60a3      	str	r3, [r4, #8]
 80130bc:	6823      	ldr	r3, [r4, #0]
 80130be:	1c5a      	adds	r2, r3, #1
 80130c0:	6022      	str	r2, [r4, #0]
 80130c2:	701e      	strb	r6, [r3, #0]
 80130c4:	6962      	ldr	r2, [r4, #20]
 80130c6:	1c43      	adds	r3, r0, #1
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d004      	beq.n	80130d6 <__swbuf_r+0x5a>
 80130cc:	89a3      	ldrh	r3, [r4, #12]
 80130ce:	07db      	lsls	r3, r3, #31
 80130d0:	d506      	bpl.n	80130e0 <__swbuf_r+0x64>
 80130d2:	2e0a      	cmp	r6, #10
 80130d4:	d104      	bne.n	80130e0 <__swbuf_r+0x64>
 80130d6:	4621      	mov	r1, r4
 80130d8:	4628      	mov	r0, r5
 80130da:	f7ff ff73 	bl	8012fc4 <_fflush_r>
 80130de:	b938      	cbnz	r0, 80130f0 <__swbuf_r+0x74>
 80130e0:	4638      	mov	r0, r7
 80130e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130e4:	4621      	mov	r1, r4
 80130e6:	4628      	mov	r0, r5
 80130e8:	f000 f806 	bl	80130f8 <__swsetup_r>
 80130ec:	2800      	cmp	r0, #0
 80130ee:	d0d5      	beq.n	801309c <__swbuf_r+0x20>
 80130f0:	f04f 37ff 	mov.w	r7, #4294967295
 80130f4:	e7f4      	b.n	80130e0 <__swbuf_r+0x64>
	...

080130f8 <__swsetup_r>:
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	4b2a      	ldr	r3, [pc, #168]	; (80131a4 <__swsetup_r+0xac>)
 80130fc:	4605      	mov	r5, r0
 80130fe:	6818      	ldr	r0, [r3, #0]
 8013100:	460c      	mov	r4, r1
 8013102:	b118      	cbz	r0, 801310c <__swsetup_r+0x14>
 8013104:	6a03      	ldr	r3, [r0, #32]
 8013106:	b90b      	cbnz	r3, 801310c <__swsetup_r+0x14>
 8013108:	f7ff fa1a 	bl	8012540 <__sinit>
 801310c:	89a3      	ldrh	r3, [r4, #12]
 801310e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013112:	0718      	lsls	r0, r3, #28
 8013114:	d422      	bmi.n	801315c <__swsetup_r+0x64>
 8013116:	06d9      	lsls	r1, r3, #27
 8013118:	d407      	bmi.n	801312a <__swsetup_r+0x32>
 801311a:	2309      	movs	r3, #9
 801311c:	602b      	str	r3, [r5, #0]
 801311e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013122:	81a3      	strh	r3, [r4, #12]
 8013124:	f04f 30ff 	mov.w	r0, #4294967295
 8013128:	e034      	b.n	8013194 <__swsetup_r+0x9c>
 801312a:	0758      	lsls	r0, r3, #29
 801312c:	d512      	bpl.n	8013154 <__swsetup_r+0x5c>
 801312e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013130:	b141      	cbz	r1, 8013144 <__swsetup_r+0x4c>
 8013132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013136:	4299      	cmp	r1, r3
 8013138:	d002      	beq.n	8013140 <__swsetup_r+0x48>
 801313a:	4628      	mov	r0, r5
 801313c:	f7ff fb9c 	bl	8012878 <_free_r>
 8013140:	2300      	movs	r3, #0
 8013142:	6363      	str	r3, [r4, #52]	; 0x34
 8013144:	89a3      	ldrh	r3, [r4, #12]
 8013146:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801314a:	81a3      	strh	r3, [r4, #12]
 801314c:	2300      	movs	r3, #0
 801314e:	6063      	str	r3, [r4, #4]
 8013150:	6923      	ldr	r3, [r4, #16]
 8013152:	6023      	str	r3, [r4, #0]
 8013154:	89a3      	ldrh	r3, [r4, #12]
 8013156:	f043 0308 	orr.w	r3, r3, #8
 801315a:	81a3      	strh	r3, [r4, #12]
 801315c:	6923      	ldr	r3, [r4, #16]
 801315e:	b94b      	cbnz	r3, 8013174 <__swsetup_r+0x7c>
 8013160:	89a3      	ldrh	r3, [r4, #12]
 8013162:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801316a:	d003      	beq.n	8013174 <__swsetup_r+0x7c>
 801316c:	4621      	mov	r1, r4
 801316e:	4628      	mov	r0, r5
 8013170:	f000 f884 	bl	801327c <__smakebuf_r>
 8013174:	89a0      	ldrh	r0, [r4, #12]
 8013176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801317a:	f010 0301 	ands.w	r3, r0, #1
 801317e:	d00a      	beq.n	8013196 <__swsetup_r+0x9e>
 8013180:	2300      	movs	r3, #0
 8013182:	60a3      	str	r3, [r4, #8]
 8013184:	6963      	ldr	r3, [r4, #20]
 8013186:	425b      	negs	r3, r3
 8013188:	61a3      	str	r3, [r4, #24]
 801318a:	6923      	ldr	r3, [r4, #16]
 801318c:	b943      	cbnz	r3, 80131a0 <__swsetup_r+0xa8>
 801318e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013192:	d1c4      	bne.n	801311e <__swsetup_r+0x26>
 8013194:	bd38      	pop	{r3, r4, r5, pc}
 8013196:	0781      	lsls	r1, r0, #30
 8013198:	bf58      	it	pl
 801319a:	6963      	ldrpl	r3, [r4, #20]
 801319c:	60a3      	str	r3, [r4, #8]
 801319e:	e7f4      	b.n	801318a <__swsetup_r+0x92>
 80131a0:	2000      	movs	r0, #0
 80131a2:	e7f7      	b.n	8013194 <__swsetup_r+0x9c>
 80131a4:	200002b8 	.word	0x200002b8

080131a8 <_raise_r>:
 80131a8:	291f      	cmp	r1, #31
 80131aa:	b538      	push	{r3, r4, r5, lr}
 80131ac:	4604      	mov	r4, r0
 80131ae:	460d      	mov	r5, r1
 80131b0:	d904      	bls.n	80131bc <_raise_r+0x14>
 80131b2:	2316      	movs	r3, #22
 80131b4:	6003      	str	r3, [r0, #0]
 80131b6:	f04f 30ff 	mov.w	r0, #4294967295
 80131ba:	bd38      	pop	{r3, r4, r5, pc}
 80131bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80131be:	b112      	cbz	r2, 80131c6 <_raise_r+0x1e>
 80131c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131c4:	b94b      	cbnz	r3, 80131da <_raise_r+0x32>
 80131c6:	4620      	mov	r0, r4
 80131c8:	f000 f830 	bl	801322c <_getpid_r>
 80131cc:	462a      	mov	r2, r5
 80131ce:	4601      	mov	r1, r0
 80131d0:	4620      	mov	r0, r4
 80131d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131d6:	f000 b817 	b.w	8013208 <_kill_r>
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d00a      	beq.n	80131f4 <_raise_r+0x4c>
 80131de:	1c59      	adds	r1, r3, #1
 80131e0:	d103      	bne.n	80131ea <_raise_r+0x42>
 80131e2:	2316      	movs	r3, #22
 80131e4:	6003      	str	r3, [r0, #0]
 80131e6:	2001      	movs	r0, #1
 80131e8:	e7e7      	b.n	80131ba <_raise_r+0x12>
 80131ea:	2400      	movs	r4, #0
 80131ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80131f0:	4628      	mov	r0, r5
 80131f2:	4798      	blx	r3
 80131f4:	2000      	movs	r0, #0
 80131f6:	e7e0      	b.n	80131ba <_raise_r+0x12>

080131f8 <raise>:
 80131f8:	4b02      	ldr	r3, [pc, #8]	; (8013204 <raise+0xc>)
 80131fa:	4601      	mov	r1, r0
 80131fc:	6818      	ldr	r0, [r3, #0]
 80131fe:	f7ff bfd3 	b.w	80131a8 <_raise_r>
 8013202:	bf00      	nop
 8013204:	200002b8 	.word	0x200002b8

08013208 <_kill_r>:
 8013208:	b538      	push	{r3, r4, r5, lr}
 801320a:	4d07      	ldr	r5, [pc, #28]	; (8013228 <_kill_r+0x20>)
 801320c:	2300      	movs	r3, #0
 801320e:	4604      	mov	r4, r0
 8013210:	4608      	mov	r0, r1
 8013212:	4611      	mov	r1, r2
 8013214:	602b      	str	r3, [r5, #0]
 8013216:	f7f8 fb9b 	bl	800b950 <_kill>
 801321a:	1c43      	adds	r3, r0, #1
 801321c:	d102      	bne.n	8013224 <_kill_r+0x1c>
 801321e:	682b      	ldr	r3, [r5, #0]
 8013220:	b103      	cbz	r3, 8013224 <_kill_r+0x1c>
 8013222:	6023      	str	r3, [r4, #0]
 8013224:	bd38      	pop	{r3, r4, r5, pc}
 8013226:	bf00      	nop
 8013228:	2000825c 	.word	0x2000825c

0801322c <_getpid_r>:
 801322c:	f7f8 bb88 	b.w	800b940 <_getpid>

08013230 <__swhatbuf_r>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	460c      	mov	r4, r1
 8013234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013238:	2900      	cmp	r1, #0
 801323a:	b096      	sub	sp, #88	; 0x58
 801323c:	4615      	mov	r5, r2
 801323e:	461e      	mov	r6, r3
 8013240:	da0d      	bge.n	801325e <__swhatbuf_r+0x2e>
 8013242:	89a3      	ldrh	r3, [r4, #12]
 8013244:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013248:	f04f 0100 	mov.w	r1, #0
 801324c:	bf0c      	ite	eq
 801324e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013252:	2340      	movne	r3, #64	; 0x40
 8013254:	2000      	movs	r0, #0
 8013256:	6031      	str	r1, [r6, #0]
 8013258:	602b      	str	r3, [r5, #0]
 801325a:	b016      	add	sp, #88	; 0x58
 801325c:	bd70      	pop	{r4, r5, r6, pc}
 801325e:	466a      	mov	r2, sp
 8013260:	f000 f848 	bl	80132f4 <_fstat_r>
 8013264:	2800      	cmp	r0, #0
 8013266:	dbec      	blt.n	8013242 <__swhatbuf_r+0x12>
 8013268:	9901      	ldr	r1, [sp, #4]
 801326a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801326e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013272:	4259      	negs	r1, r3
 8013274:	4159      	adcs	r1, r3
 8013276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801327a:	e7eb      	b.n	8013254 <__swhatbuf_r+0x24>

0801327c <__smakebuf_r>:
 801327c:	898b      	ldrh	r3, [r1, #12]
 801327e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013280:	079d      	lsls	r5, r3, #30
 8013282:	4606      	mov	r6, r0
 8013284:	460c      	mov	r4, r1
 8013286:	d507      	bpl.n	8013298 <__smakebuf_r+0x1c>
 8013288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801328c:	6023      	str	r3, [r4, #0]
 801328e:	6123      	str	r3, [r4, #16]
 8013290:	2301      	movs	r3, #1
 8013292:	6163      	str	r3, [r4, #20]
 8013294:	b002      	add	sp, #8
 8013296:	bd70      	pop	{r4, r5, r6, pc}
 8013298:	ab01      	add	r3, sp, #4
 801329a:	466a      	mov	r2, sp
 801329c:	f7ff ffc8 	bl	8013230 <__swhatbuf_r>
 80132a0:	9900      	ldr	r1, [sp, #0]
 80132a2:	4605      	mov	r5, r0
 80132a4:	4630      	mov	r0, r6
 80132a6:	f7fe ff79 	bl	801219c <_malloc_r>
 80132aa:	b948      	cbnz	r0, 80132c0 <__smakebuf_r+0x44>
 80132ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b0:	059a      	lsls	r2, r3, #22
 80132b2:	d4ef      	bmi.n	8013294 <__smakebuf_r+0x18>
 80132b4:	f023 0303 	bic.w	r3, r3, #3
 80132b8:	f043 0302 	orr.w	r3, r3, #2
 80132bc:	81a3      	strh	r3, [r4, #12]
 80132be:	e7e3      	b.n	8013288 <__smakebuf_r+0xc>
 80132c0:	89a3      	ldrh	r3, [r4, #12]
 80132c2:	6020      	str	r0, [r4, #0]
 80132c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132c8:	81a3      	strh	r3, [r4, #12]
 80132ca:	9b00      	ldr	r3, [sp, #0]
 80132cc:	6163      	str	r3, [r4, #20]
 80132ce:	9b01      	ldr	r3, [sp, #4]
 80132d0:	6120      	str	r0, [r4, #16]
 80132d2:	b15b      	cbz	r3, 80132ec <__smakebuf_r+0x70>
 80132d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132d8:	4630      	mov	r0, r6
 80132da:	f000 f81d 	bl	8013318 <_isatty_r>
 80132de:	b128      	cbz	r0, 80132ec <__smakebuf_r+0x70>
 80132e0:	89a3      	ldrh	r3, [r4, #12]
 80132e2:	f023 0303 	bic.w	r3, r3, #3
 80132e6:	f043 0301 	orr.w	r3, r3, #1
 80132ea:	81a3      	strh	r3, [r4, #12]
 80132ec:	89a3      	ldrh	r3, [r4, #12]
 80132ee:	431d      	orrs	r5, r3
 80132f0:	81a5      	strh	r5, [r4, #12]
 80132f2:	e7cf      	b.n	8013294 <__smakebuf_r+0x18>

080132f4 <_fstat_r>:
 80132f4:	b538      	push	{r3, r4, r5, lr}
 80132f6:	4d07      	ldr	r5, [pc, #28]	; (8013314 <_fstat_r+0x20>)
 80132f8:	2300      	movs	r3, #0
 80132fa:	4604      	mov	r4, r0
 80132fc:	4608      	mov	r0, r1
 80132fe:	4611      	mov	r1, r2
 8013300:	602b      	str	r3, [r5, #0]
 8013302:	f7f8 fb81 	bl	800ba08 <_fstat>
 8013306:	1c43      	adds	r3, r0, #1
 8013308:	d102      	bne.n	8013310 <_fstat_r+0x1c>
 801330a:	682b      	ldr	r3, [r5, #0]
 801330c:	b103      	cbz	r3, 8013310 <_fstat_r+0x1c>
 801330e:	6023      	str	r3, [r4, #0]
 8013310:	bd38      	pop	{r3, r4, r5, pc}
 8013312:	bf00      	nop
 8013314:	2000825c 	.word	0x2000825c

08013318 <_isatty_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	4d06      	ldr	r5, [pc, #24]	; (8013334 <_isatty_r+0x1c>)
 801331c:	2300      	movs	r3, #0
 801331e:	4604      	mov	r4, r0
 8013320:	4608      	mov	r0, r1
 8013322:	602b      	str	r3, [r5, #0]
 8013324:	f7f8 fb80 	bl	800ba28 <_isatty>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	d102      	bne.n	8013332 <_isatty_r+0x1a>
 801332c:	682b      	ldr	r3, [r5, #0]
 801332e:	b103      	cbz	r3, 8013332 <_isatty_r+0x1a>
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	bd38      	pop	{r3, r4, r5, pc}
 8013334:	2000825c 	.word	0x2000825c

08013338 <_init>:
 8013338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801333a:	bf00      	nop
 801333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801333e:	bc08      	pop	{r3}
 8013340:	469e      	mov	lr, r3
 8013342:	4770      	bx	lr

08013344 <_fini>:
 8013344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013346:	bf00      	nop
 8013348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801334a:	bc08      	pop	{r3}
 801334c:	469e      	mov	lr, r3
 801334e:	4770      	bx	lr
