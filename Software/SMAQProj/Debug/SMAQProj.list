
SMAQProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012430  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002238  08012600  08012600  00022600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014838  08014838  000303fc  2**0
                  CONTENTS
  4 .ARM          00000008  08014838  08014838  00024838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014840  08014840  000303fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014840  08014840  00024840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014844  08014844  00024844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  08014848  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002bc  08014b04  000302bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000035c  08014ba4  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d60  20000400  08014c44  00030400  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20008160  08014c44  00038160  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303fc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00028cc1  00000000  00000000  0003046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000430a  00000000  00000000  00059130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002290  00000000  00000000  0005d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001bf8  00000000  00000000  0005f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000060aa  00000000  00000000  000612c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000268c6  00000000  00000000  00067372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00108ee6  00000000  00000000  0008dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a670  00000000  00000000  00196b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  001a1190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000400 	.word	0x20000400
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080125e8 	.word	0x080125e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000404 	.word	0x20000404
 800020c:	080125e8 	.word	0x080125e8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
static uint32_t Hum;  // Humidity readings from SCD-40-2
static uint32_t Carb; // C02 readings from SCD-40-2
static uint32_t Pm;  // PM 2.5 readings from SNJGAC5
static double aqi = 0;
static char *str;
int main(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000edc:	f00a fc83 	bl	800b7e6 <HAL_Init>

  /* Configure the system clock */
    SystemClock_Config();
 8000ee0:	f000 f82a 	bl	8000f38 <SystemClock_Config>

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ee4:	f000 f924 	bl	8001130 <MX_GPIO_Init>
    MX_ETH_Init();
 8000ee8:	f000 f892 	bl	8001010 <MX_ETH_Init>
    MX_RNG_Init();
 8000eec:	f000 f8dc 	bl	80010a8 <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000ef0:	f000 f8ee 	bl	80010d0 <MX_USART3_UART_Init>

    osKernelInitialize();
 8000ef4:	f00d fc28 	bl	800e748 <osKernelInitialize>

    ServerHandle = osThreadNew(server, NULL, &Server_attributes);
 8000ef8:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <main+0x48>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <main+0x4c>)
 8000efe:	f00d fcbf 	bl	800e880 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <main+0x50>)
 8000f06:	6013      	str	r3, [r2, #0]
    BlinkerHandle = osThreadNew(blinker, NULL, &Blinker_attributes);
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <main+0x54>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <main+0x58>)
 8000f0e:	f00d fcb7 	bl	800e880 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <main+0x5c>)
 8000f16:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8000f18:	f00d fc4a 	bl	800e7b0 <osKernelStart>

    while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0x44>
 8000f1e:	bf00      	nop
 8000f20:	08014038 	.word	0x08014038
 8000f24:	0800155d 	.word	0x0800155d
 8000f28:	200005a0 	.word	0x200005a0
 8000f2c:	08014014 	.word	0x08014014
 8000f30:	080013b9 	.word	0x080013b9
 8000f34:	2000059c 	.word	0x2000059c

08000f38 <SystemClock_Config>:
    }

}

void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f010 fd0f 	bl	801196a <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <SystemClock_Config+0xd0>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <SystemClock_Config+0xd0>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <SystemClock_Config+0xd0>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a24      	ldr	r2, [pc, #144]	; (800100c <SystemClock_Config+0xd4>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <SystemClock_Config+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fa4:	23d8      	movs	r3, #216	; 0xd8
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fac:	2309      	movs	r3, #9
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00b fa9f 	bl	800c4f8 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x8c>
	  {
	    Error_Handler();
 8000fc0:	f000 fbae 	bl	8001720 <Error_Handler>
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc4:	f00b fa48 	bl	800c458 <HAL_PWREx_EnableOverDrive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000fce:	f000 fba7 	bl	8001720 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe2:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2107      	movs	r1, #7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00b fd25 	bl	800ca40 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xc8>
	  {
	    Error_Handler();
 8000ffc:	f000 fb90 	bl	8001720 <Error_Handler>
	  }
	}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	; 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_ETH_Init+0x80>)
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_ETH_Init+0x84>)
 8001018:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_ETH_Init+0x88>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ETH_Init+0x88>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_ETH_Init+0x88>)
 8001028:	22e1      	movs	r2, #225	; 0xe1
 800102a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_ETH_Init+0x88>)
 800102e:	2200      	movs	r2, #0
 8001030:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ETH_Init+0x88>)
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ETH_Init+0x88>)
 800103a:	2200      	movs	r2, #0
 800103c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ETH_Init+0x80>)
 8001040:	4a15      	ldr	r2, [pc, #84]	; (8001098 <MX_ETH_Init+0x88>)
 8001042:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ETH_Init+0x80>)
 8001046:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800104a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_ETH_Init+0x80>)
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <MX_ETH_Init+0x8c>)
 8001050:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ETH_Init+0x80>)
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_ETH_Init+0x90>)
 8001056:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 0;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_ETH_Init+0x80>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_ETH_Init+0x80>)
 8001060:	f00a fcf4 	bl	800ba4c <HAL_ETH_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800106a:	f000 fb59 	bl	8001720 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800106e:	2238      	movs	r2, #56	; 0x38
 8001070:	2100      	movs	r1, #0
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_ETH_Init+0x94>)
 8001074:	f010 fc79 	bl	801196a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_ETH_Init+0x94>)
 800107a:	2221      	movs	r2, #33	; 0x21
 800107c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_ETH_Init+0x94>)
 8001080:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001084:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_ETH_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000454 	.word	0x20000454
 8001094:	40028000 	.word	0x40028000
 8001098:	200005c4 	.word	0x200005c4
 800109c:	2000035c 	.word	0x2000035c
 80010a0:	200002bc 	.word	0x200002bc
 80010a4:	2000041c 	.word	0x2000041c

080010a8 <MX_RNG_Init>:


static void MX_RNG_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_RNG_Init+0x20>)
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <MX_RNG_Init+0x24>)
 80010b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_RNG_Init+0x20>)
 80010b4:	f00c fb0c 	bl	800d6d0 <HAL_RNG_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80010be:	f000 fb2f 	bl	8001720 <Error_Handler>
  }


}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000504 	.word	0x20000504
 80010cc:	50060800 	.word	0x50060800

080010d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_USART3_UART_Init+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART3_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001114:	f00c fe3c 	bl	800dd90 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800111e:	f000 faff 	bl	8001720 <Error_Handler>
  }

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000514 	.word	0x20000514
 800112c:	40004800 	.word	0x40004800

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a55      	ldr	r2, [pc, #340]	; (80012a0 <MX_GPIO_Init+0x170>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <MX_GPIO_Init+0x170>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <MX_GPIO_Init+0x170>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a43      	ldr	r2, [pc, #268]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <MX_GPIO_Init+0x170>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a3d      	ldr	r2, [pc, #244]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a37      	ldr	r2, [pc, #220]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80011dc:	4831      	ldr	r0, [pc, #196]	; (80012a4 <MX_GPIO_Init+0x174>)
 80011de:	f00b f907 	bl	800c3f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	4830      	ldr	r0, [pc, #192]	; (80012a8 <MX_GPIO_Init+0x178>)
 80011e8:	f00b f902 	bl	800c3f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	482a      	ldr	r0, [pc, #168]	; (80012ac <MX_GPIO_Init+0x17c>)
 8001204:	f00a ff48 	bl	800c098 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001208:	f244 0381 	movw	r3, #16513	; 0x4081
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4820      	ldr	r0, [pc, #128]	; (80012a4 <MX_GPIO_Init+0x174>)
 8001222:	f00a ff39 	bl	800c098 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <MX_GPIO_Init+0x178>)
 800123e:	f00a ff2b 	bl	800c098 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_GPIO_Init+0x178>)
 8001256:	f00a ff1f 	bl	800c098 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
   GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800125a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800125e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800126c:	230a      	movs	r3, #10
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001278:	f00a ff0e 	bl	800c098 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_VBUS_Pin */
     GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800127c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001280:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001292:	f00a ff01 	bl	800c098 <HAL_GPIO_Init>

}
 8001296:	bf00      	nop
 8001298:	3730      	adds	r7, #48	; 0x30
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012c6:	f00a fa9b 	bl	800b800 <HAL_IncTick>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40001000 	.word	0x40001000

080012d8 <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e01a      	b.n	800131e <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	4810      	ldr	r0, [pc, #64]	; (8001330 <mg_random+0x58>)
 80012f0:	f00c fa18 	bl	800d724 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	18d0      	adds	r0, r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d203      	bcs.n	800130c <mg_random+0x34>
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	e000      	b.n	800130e <mg_random+0x36>
 800130c:	2304      	movs	r3, #4
 800130e:	f107 0108 	add.w	r1, r7, #8
 8001312:	461a      	mov	r2, r3
 8001314:	f010 fbf3 	bl	8011afe <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3304      	adds	r3, #4
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3e0      	bcc.n	80012e8 <mg_random+0x10>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000504 	.word	0x20000504

08001334 <timer_fn>:

static void timer_fn(void *arg) {
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af04      	add	r7, sp, #16
 800133a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = arg;                  // And show
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	61fb      	str	r3, [r7, #28]
  const char *names[] = {"down", "up", "req", "ready"};  // network stats
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <timer_fn+0x70>)
 8001342:	f107 040c 	add.w	r4, r7, #12
 8001346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <timer_fn+0x74>)
 800134e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8001352:	4916      	ldr	r1, [pc, #88]	; (80013ac <timer_fn+0x78>)
 8001354:	2002      	movs	r0, #2
 8001356:	f005 f867 	bl	8006428 <mg_log_prefix>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01c      	beq.n	800139a <timer_fn+0x66>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	3320      	adds	r3, #32
 800136a:	443b      	add	r3, r7
 800136c:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f103 0508 	add.w	r5, r3, #8
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800137e:	69f9      	ldr	r1, [r7, #28]
 8001380:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8001382:	69f8      	ldr	r0, [r7, #28]
 8001384:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8001386:	9003      	str	r0, [sp, #12]
 8001388:	9102      	str	r1, [sp, #8]
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	462b      	mov	r3, r5
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <timer_fn+0x7c>)
 8001392:	4621      	mov	r1, r4
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <timer_fn+0x80>)
 8001396:	f005 f8a1 	bl	80064dc <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdb0      	pop	{r4, r5, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	08012670 	.word	0x08012670
 80013a8:	0801405c 	.word	0x0801405c
 80013ac:	08012610 	.word	0x08012610
 80013b0:	08006c79 	.word	0x08006c79
 80013b4:	08012624 	.word	0x08012624

080013b8 <blinker>:

void blinker(void *argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	for (;;) {
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <blinker+0x30>)
 80013c4:	f00b f82d 	bl	800c422 <HAL_GPIO_TogglePin>
	    osDelay((osKernelGetTickFreq() * BLINK_PERIOD_MS) / 1000U);
 80013c8:	f00d fa50 	bl	800e86c <osKernelGetTickFreq>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <blinker+0x34>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	4618      	mov	r0, r3
 80013e0:	f00d faf4 	bl	800e9cc <osDelay>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 80013e4:	e7ec      	b.n	80013c0 <blinker+0x8>
 80013e6:	bf00      	nop
 80013e8:	40020400 	.word	0x40020400
 80013ec:	10624dd3 	.word	0x10624dd3

080013f0 <fn>:
 * 	accepts the HTTP requests and feeds sensor *
 * 	values back in JSON format for the client  *
 * 	to receive then the javascript code takes  *
 *  over and displays the values on our UI.    *
 ***********************************************/
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09e      	sub	sp, #120	; 0x78
 80013f4:	af10      	add	r7, sp, #64	; 0x40
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]


	if (ev == MG_EV_HTTP_MSG) {
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d17a      	bne.n	80014fa <fn+0x10a>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
//		if (mg_http_match_uri(hm, "/api/dispAQI")){
//			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
//					"{%m:%f,%m:%m}\n", MG_ESC("aqi"), aqi,
//									   MG_ESC("health_level"), str);
//		}
		if(mg_http_match_uri(hm, "/api/AQI")){
 8001408:	493e      	ldr	r1, [pc, #248]	; (8001504 <fn+0x114>)
 800140a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800140c:	f003 fd3e 	bl	8004e8c <mg_http_match_uri>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01f      	beq.n	8001456 <fn+0x66>
			struct mg_str json = hm -> body;
 8001416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001424:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_json_get_num(json, "$.aqi", &aqi);
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <fn+0x118>)
 800142a:	4a38      	ldr	r2, [pc, #224]	; (800150c <fn+0x11c>)
 800142c:	f107 0114 	add.w	r1, r7, #20
 8001430:	c903      	ldmia	r1, {r0, r1}
 8001432:	f004 fe83 	bl	800613c <mg_json_get_num>
			str = mg_json_get_str(json, "&.health_level");
 8001436:	4a36      	ldr	r2, [pc, #216]	; (8001510 <fn+0x120>)
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001440:	f004 ff52 	bl	80062e8 <mg_json_get_str>
 8001444:	4603      	mov	r3, r0
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <fn+0x124>)
 8001448:	6013      	str	r3, [r2, #0]
			mg_http_reply(c, 200, NULL, NULL);
 800144a:	2300      	movs	r3, #0
 800144c:	2200      	movs	r2, #0
 800144e:	21c8      	movs	r1, #200	; 0xc8
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f002 fe15 	bl	8004080 <mg_http_reply>
		}
		if(mg_http_match_uri(hm, "/api/sensors")){
 8001456:	4930      	ldr	r1, [pc, #192]	; (8001518 <fn+0x128>)
 8001458:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800145a:	f003 fd17 	bl	8004e8c <mg_http_match_uri>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d029      	beq.n	80014b8 <fn+0xc8>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <fn+0x12c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <fn+0x130>)
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	492d      	ldr	r1, [pc, #180]	; (8001524 <fn+0x134>)
 800146e:	6809      	ldr	r1, [r1, #0]
 8001470:	482d      	ldr	r0, [pc, #180]	; (8001528 <fn+0x138>)
 8001472:	6800      	ldr	r0, [r0, #0]
 8001474:	900f      	str	r0, [sp, #60]	; 0x3c
 8001476:	482d      	ldr	r0, [pc, #180]	; (800152c <fn+0x13c>)
 8001478:	900e      	str	r0, [sp, #56]	; 0x38
 800147a:	2000      	movs	r0, #0
 800147c:	900d      	str	r0, [sp, #52]	; 0x34
 800147e:	482c      	ldr	r0, [pc, #176]	; (8001530 <fn+0x140>)
 8001480:	900c      	str	r0, [sp, #48]	; 0x30
 8001482:	910b      	str	r1, [sp, #44]	; 0x2c
 8001484:	492b      	ldr	r1, [pc, #172]	; (8001534 <fn+0x144>)
 8001486:	910a      	str	r1, [sp, #40]	; 0x28
 8001488:	2100      	movs	r1, #0
 800148a:	9109      	str	r1, [sp, #36]	; 0x24
 800148c:	4928      	ldr	r1, [pc, #160]	; (8001530 <fn+0x140>)
 800148e:	9108      	str	r1, [sp, #32]
 8001490:	9207      	str	r2, [sp, #28]
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <fn+0x148>)
 8001494:	9206      	str	r2, [sp, #24]
 8001496:	2200      	movs	r2, #0
 8001498:	9205      	str	r2, [sp, #20]
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <fn+0x140>)
 800149c:	9204      	str	r2, [sp, #16]
 800149e:	9303      	str	r3, [sp, #12]
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <fn+0x14c>)
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <fn+0x140>)
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <fn+0x150>)
 80014ae:	4a25      	ldr	r2, [pc, #148]	; (8001544 <fn+0x154>)
 80014b0:	21c8      	movs	r1, #200	; 0xc8
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f002 fde4 	bl	8004080 <mg_http_reply>
					"{%m:%u,%m:%u,%m:%u,%m:%u}\n", MG_ESC("temperature"), Temp,
												   MG_ESC("humidity"), Hum,
												   MG_ESC("pm25"), Pm,
												   MG_ESC("co2"), Carb);
		}
		MG_INFO(("connection established"));
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <fn+0x158>)
 80014ba:	f240 128f 	movw	r2, #399	; 0x18f
 80014be:	4923      	ldr	r1, [pc, #140]	; (800154c <fn+0x15c>)
 80014c0:	2002      	movs	r0, #2
 80014c2:	f004 ffb1 	bl	8006428 <mg_log_prefix>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <fn+0xe2>
 80014cc:	4820      	ldr	r0, [pc, #128]	; (8001550 <fn+0x160>)
 80014ce:	f005 f805 	bl	80064dc <mg_log>
	    struct mg_http_serve_opts opts = {
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <fn+0x164>)
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <fn+0x168>)
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
	        .root_dir = "/web_root",
	        .fs = &mg_fs_packed
	      };
	    mg_http_serve_dir(c, ev_data, &opts);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	461a      	mov	r2, r3
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f003 fc6d 	bl	8004dd4 <mg_http_serve_dir>
	  }
	  (void) fn_data;
}
 80014fa:	bf00      	nop
 80014fc:	3738      	adds	r7, #56	; 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	08012680 	.word	0x08012680
 8001508:	200005b8 	.word	0x200005b8
 800150c:	0801268c 	.word	0x0801268c
 8001510:	08012694 	.word	0x08012694
 8001514:	200005c0 	.word	0x200005c0
 8001518:	080126a4 	.word	0x080126a4
 800151c:	200005a4 	.word	0x200005a4
 8001520:	200005a8 	.word	0x200005a8
 8001524:	200005b0 	.word	0x200005b0
 8001528:	200005ac 	.word	0x200005ac
 800152c:	080126f4 	.word	0x080126f4
 8001530:	08006ec5 	.word	0x08006ec5
 8001534:	080126f8 	.word	0x080126f8
 8001538:	08012700 	.word	0x08012700
 800153c:	0801270c 	.word	0x0801270c
 8001540:	080126b4 	.word	0x080126b4
 8001544:	080126d0 	.word	0x080126d0
 8001548:	08014068 	.word	0x08014068
 800154c:	08012610 	.word	0x08012610
 8001550:	08012718 	.word	0x08012718
 8001554:	08012730 	.word	0x08012730
 8001558:	20000000 	.word	0x20000000

0800155c <server>:

void server(void *argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0b6      	sub	sp, #216	; 0xd8
 8001560:	af04      	add	r7, sp, #16
 8001562:	6078      	str	r0, [r7, #4]
	Temp = 20;
 8001564:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <server+0x15c>)
 8001566:	2214      	movs	r2, #20
 8001568:	601a      	str	r2, [r3, #0]
	Hum = 30;
 800156a:	4b54      	ldr	r3, [pc, #336]	; (80016bc <server+0x160>)
 800156c:	221e      	movs	r2, #30
 800156e:	601a      	str	r2, [r3, #0]
	Carb = 800;
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <server+0x164>)
 8001572:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001576:	601a      	str	r2, [r3, #0]
	Pm = 12;
 8001578:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <server+0x168>)
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]

	struct mg_mgr mgr;        // Initialise Mongoose event manager
	mg_mgr_init(&mgr);        // and attach it to the interface
 800157e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fa1e 	bl	80069c4 <mg_mgr_init>
	mg_log_set(MG_LL_DEBUG);  // Set log level
 8001588:	2003      	movs	r0, #3
 800158a:	f004 ff2b 	bl	80063e4 <mg_log_set>

		// Initialise Mongoose network stack
	  struct mg_tcpip_driver_stm32_data driver_data = {.mdc_cr = 4};
 800158e:	2304      	movs	r3, #4
 8001590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	2278      	movs	r2, #120	; 0x78
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f010 f9e4 	bl	801196a <memset>
 80015a2:	2302      	movs	r3, #2
 80015a4:	723b      	strb	r3, [r7, #8]
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <server+0x16c>)
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	4b48      	ldr	r3, [pc, #288]	; (80016cc <server+0x170>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4053      	eors	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	727b      	strb	r3, [r7, #9]
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <server+0x174>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <server+0x178>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4053      	eors	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	72bb      	strb	r3, [r7, #10]
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <server+0x17c>)
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <server+0x180>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4053      	eors	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	72fb      	strb	r3, [r7, #11]
 80015d0:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <server+0x184>)
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <server+0x188>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4053      	eors	r3, r2
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <server+0x18c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4053      	eors	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	733b      	strb	r3, [r7, #12]
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <server+0x190>)
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <server+0x194>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4053      	eors	r3, r2
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <server+0x198>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4053      	eors	r3, r2
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	737b      	strb	r3, [r7, #13]
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <server+0x19c>)
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001600:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
		                          .driver = &mg_tcpip_driver_stm32,
		                          .driver_data = &driver_data};
		mg_tcpip_init(&mgr, &mif);
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f009 fb13 	bl	800ac3c <mg_tcpip_init>
		mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 8001616:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <server+0x1a0>)
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2301      	movs	r3, #1
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	4608      	mov	r0, r1
 8001632:	f005 f99d 	bl	8006970 <mg_timer_add>
		MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <server+0x1a4>)
 8001638:	f240 12ab 	movw	r2, #427	; 0x1ab
 800163c:	4931      	ldr	r1, [pc, #196]	; (8001704 <server+0x1a8>)
 800163e:	2002      	movs	r0, #2
 8001640:	f004 fef2 	bl	8006428 <mg_log_prefix>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00d      	beq.n	8001666 <server+0x10a>
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	461a      	mov	r2, r3
 8001650:	492d      	ldr	r1, [pc, #180]	; (8001708 <server+0x1ac>)
 8001652:	482e      	ldr	r0, [pc, #184]	; (800170c <server+0x1b0>)
 8001654:	f004 ff42 	bl	80064dc <mg_log>
		while (mif.state != MG_TCPIP_STATE_READY) {
 8001658:	e005      	b.n	8001666 <server+0x10a>
		    mg_mgr_poll(&mgr, 0);
 800165a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f009 fc89 	bl	800af78 <mg_mgr_poll>
		while (mif.state != MG_TCPIP_STATE_READY) {
 8001666:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800166a:	2b03      	cmp	r3, #3
 800166c:	d1f5      	bne.n	800165a <server+0xfe>
		}

		MG_INFO(("Initialising application..."));
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <server+0x1a4>)
 8001670:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8001674:	4923      	ldr	r1, [pc, #140]	; (8001704 <server+0x1a8>)
 8001676:	2002      	movs	r0, #2
 8001678:	f004 fed6 	bl	8006428 <mg_log_prefix>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <server+0x12c>
 8001682:	4823      	ldr	r0, [pc, #140]	; (8001710 <server+0x1b4>)
 8001684:	f004 ff2a 	bl	80064dc <mg_log>
		mg_http_listen(&mgr, HTTP_URL, fn, &mgr);
 8001688:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800168c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <server+0x1b8>)
 8001692:	4921      	ldr	r1, [pc, #132]	; (8001718 <server+0x1bc>)
 8001694:	f003 ff1a 	bl	80054cc <mg_http_listen>
		mg_http_listen(&mgr, HTTPS_URL, fn, &mgr);
 8001698:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800169c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <server+0x1b8>)
 80016a2:	491e      	ldr	r1, [pc, #120]	; (800171c <server+0x1c0>)
 80016a4:	f003 ff12 	bl	80054cc <mg_http_listen>
		for (;;) {
			mg_mgr_poll(&mgr, 1);
 80016a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f009 fc62 	bl	800af78 <mg_mgr_poll>
 80016b4:	e7f8      	b.n	80016a8 <server+0x14c>
 80016b6:	bf00      	nop
 80016b8:	200005a4 	.word	0x200005a4
 80016bc:	200005a8 	.word	0x200005a8
 80016c0:	200005ac 	.word	0x200005ac
 80016c4:	200005b0 	.word	0x200005b0
 80016c8:	1ff0f420 	.word	0x1ff0f420
 80016cc:	1ff0f421 	.word	0x1ff0f421
 80016d0:	1ff0f422 	.word	0x1ff0f422
 80016d4:	1ff0f423 	.word	0x1ff0f423
 80016d8:	1ff0f424 	.word	0x1ff0f424
 80016dc:	1ff0f425 	.word	0x1ff0f425
 80016e0:	1ff0f426 	.word	0x1ff0f426
 80016e4:	1ff0f427 	.word	0x1ff0f427
 80016e8:	1ff0f428 	.word	0x1ff0f428
 80016ec:	1ff0f429 	.word	0x1ff0f429
 80016f0:	1ff0f42a 	.word	0x1ff0f42a
 80016f4:	1ff0f42b 	.word	0x1ff0f42b
 80016f8:	20000240 	.word	0x20000240
 80016fc:	08001335 	.word	0x08001335
 8001700:	0801406c 	.word	0x0801406c
 8001704:	08012610 	.word	0x08012610
 8001708:	08006d3d 	.word	0x08006d3d
 800170c:	0801273c 	.word	0x0801273c
 8001710:	08012758 	.word	0x08012758
 8001714:	080013f1 	.word	0x080013f1
 8001718:	08012774 	.word	0x08012774
 800171c:	08012788 	.word	0x08012788

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001728:	e7fe      	b.n	8001728 <Error_Handler+0x8>

0800172a <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	3330      	adds	r3, #48	; 0x30
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e002      	b.n	8001744 <mg_dns_free+0x1a>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d1f7      	bne.n	800173e <mg_dns_free+0x14>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f00f fe50 	bl	80113fc <free>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 8001774:	e00d      	b.n	8001792 <mg_resolve_cancel+0x2e>
    tmp = d->next;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d103      	bne.n	800178e <mg_resolve_cancel+0x2a>
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffce 	bl	800172a <mg_dns_free>
  for (; d != NULL; d = tmp) {
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ee      	bne.n	8001776 <mg_resolve_cancel+0x12>
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <mg_call+0x24>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d007      	beq.n	80017de <mg_call+0x3c>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	47a0      	blx	r4
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}
	...

080017e8 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80017e8:	b40e      	push	{r1, r2, r3}
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b095      	sub	sp, #84	; 0x54
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80017f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017f6:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	f107 0010 	add.w	r0, r7, #16
 8001800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001802:	2140      	movs	r1, #64	; 0x40
 8001804:	f005 f966 	bl	8006ad4 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <mg_error+0x70>)
 800180a:	f240 1293 	movw	r2, #403	; 0x193
 800180e:	4913      	ldr	r1, [pc, #76]	; (800185c <mg_error+0x74>)
 8001810:	2001      	movs	r0, #1
 8001812:	f004 fe09 	bl	8006428 <mg_log_prefix>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <mg_error+0x46>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <mg_error+0x78>)
 800182a:	f004 fe57 	bl	80064dc <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8001834:	f043 0320 	orr.w	r3, r3, #32
 8001838:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	461a      	mov	r2, r3
 8001842:	2100      	movs	r1, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffac 	bl	80017a2 <mg_call>
}
 800184a:	bf00      	nop
 800184c:	3754      	adds	r7, #84	; 0x54
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001854:	b003      	add	sp, #12
 8001856:	4770      	bx	lr
 8001858:	0801407c 	.word	0x0801407c
 800185c:	080127ac 	.word	0x080127ac
 8001860:	080128b8 	.word	0x080128b8

08001864 <is_digit>:
#endif




static bool is_digit(int c) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b2f      	cmp	r3, #47	; 0x2f
 8001870:	dd04      	ble.n	800187c <is_digit+0x18>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b39      	cmp	r3, #57	; 0x39
 8001876:	dc01      	bgt.n	800187c <is_digit+0x18>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <is_digit+0x1a>
 800187c:	2300      	movs	r3, #0
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  int n = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	617a      	str	r2, [r7, #20]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	2265      	movs	r2, #101	; 0x65
 80018ae:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	617a      	str	r2, [r7, #20]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80018c8:	dd01      	ble.n	80018ce <addexp+0x3e>
 80018ca:	2300      	movs	r3, #0
 80018cc:	e057      	b.n	800197e <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	dc07      	bgt.n	80018e4 <addexp+0x54>
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	617a      	str	r2, [r7, #20]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	2230      	movs	r2, #48	; 0x30
 80018e2:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b63      	cmp	r3, #99	; 0x63
 80018e8:	dd1c      	ble.n	8001924 <addexp+0x94>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <addexp+0xfc>)
 80018ee:	fb82 1203 	smull	r1, r2, r2, r3
 80018f2:	1152      	asrs	r2, r2, #5
 80018f4:	17db      	asrs	r3, r3, #31
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1c59      	adds	r1, r3, #1
 80018fe:	6179      	str	r1, [r7, #20]
 8001900:	4619      	mov	r1, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	440b      	add	r3, r1
 8001906:	3230      	adds	r2, #48	; 0x30
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <addexp+0xfc>)
 8001910:	fb82 1203 	smull	r1, r2, r2, r3
 8001914:	1151      	asrs	r1, r2, #5
 8001916:	17da      	asrs	r2, r3, #31
 8001918:	1a8a      	subs	r2, r1, r2
 800191a:	2164      	movs	r1, #100	; 0x64
 800191c:	fb01 f202 	mul.w	r2, r1, r2
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b09      	cmp	r3, #9
 8001928:	dd1d      	ble.n	8001966 <addexp+0xd6>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <addexp+0x100>)
 800192e:	fb82 1203 	smull	r1, r2, r2, r3
 8001932:	1092      	asrs	r2, r2, #2
 8001934:	17db      	asrs	r3, r3, #31
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b2da      	uxtb	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	1c59      	adds	r1, r3, #1
 800193e:	6179      	str	r1, [r7, #20]
 8001940:	4619      	mov	r1, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	440b      	add	r3, r1
 8001946:	3230      	adds	r2, #48	; 0x30
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <addexp+0x100>)
 8001950:	fb83 1302 	smull	r1, r3, r3, r2
 8001954:	1099      	asrs	r1, r3, #2
 8001956:	17d3      	asrs	r3, r2, #31
 8001958:	1ac9      	subs	r1, r1, r3
 800195a:	460b      	mov	r3, r1
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	1c59      	adds	r1, r3, #1
 800196e:	6179      	str	r1, [r7, #20]
 8001970:	4619      	mov	r1, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	440b      	add	r3, r1
 8001976:	3230      	adds	r2, #48	; 0x30
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
  return n;
 800197c:	697b      	ldr	r3, [r7, #20]
}
 800197e:	4618      	mov	r0, r3
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	51eb851f 	.word	0x51eb851f
 8001990:	66666667 	.word	0x66666667

08001994 <xisinf>:

static int xisinf(double x) {
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800199e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80019a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	000a      	movs	r2, r1
 80019b4:	2300      	movs	r3, #0
 80019b6:	4613      	mov	r3, r2
 80019b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019bc:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <xisinf+0x4c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d106      	bne.n	80019d0 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 80019c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019c6:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <xisinf+0x3c>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <xisinf+0x3e>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	7ff00000 	.word	0x7ff00000

080019e4 <xisnan>:

static int xisnan(double x) {
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80019ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80019f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	000a      	movs	r2, r1
 8001a04:	2300      	movs	r3, #0
 8001a06:	4613      	mov	r3, r2
 8001a08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a10:	4613      	mov	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001a1c:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001a1e:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <xisnan+0x54>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	bf8c      	ite	hi
 8001a24:	2301      	movhi	r3, #1
 8001a26:	2300      	movls	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	7ff00000 	.word	0x7ff00000
 8001a3c:	00000000 	.word	0x00000000

08001a40 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b09e      	sub	sp, #120	; 0x78
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6178      	str	r0, [r7, #20]
 8001a48:	6139      	str	r1, [r7, #16]
 8001a4a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a56:	2300      	movs	r3, #0
 8001a58:	667b      	str	r3, [r7, #100]	; 0x64
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a6a:	f7ff f85d 	bl	8000b28 <__aeabi_dcmpeq>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <mg_dtoa+0x44>
 8001a74:	4b7f      	ldr	r3, [pc, #508]	; (8001c74 <mg_dtoa+0x234>)
 8001a76:	4a80      	ldr	r2, [pc, #512]	; (8001c78 <mg_dtoa+0x238>)
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f005 f852 	bl	8006b24 <mg_snprintf>
 8001a80:	4603      	mov	r3, r0
 8001a82:	e2c9      	b.n	8002018 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8001a84:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a88:	f7ff ff84 	bl	8001994 <xisinf>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d014      	beq.n	8001abc <mg_dtoa+0x7c>
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a9e:	f7ff f86b 	bl	8000b78 <__aeabi_dcmpgt>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <mg_dtoa+0x6c>
 8001aa8:	4b74      	ldr	r3, [pc, #464]	; (8001c7c <mg_dtoa+0x23c>)
 8001aaa:	e000      	b.n	8001aae <mg_dtoa+0x6e>
 8001aac:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <mg_dtoa+0x240>)
 8001aae:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <mg_dtoa+0x238>)
 8001ab0:	6939      	ldr	r1, [r7, #16]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f005 f836 	bl	8006b24 <mg_snprintf>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	e2ad      	b.n	8002018 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8001abc:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ac0:	f7ff ff90 	bl	80019e4 <xisnan>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <mg_dtoa+0x9a>
 8001aca:	4b6e      	ldr	r3, [pc, #440]	; (8001c84 <mg_dtoa+0x244>)
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <mg_dtoa+0x238>)
 8001ace:	6939      	ldr	r1, [r7, #16]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f005 f827 	bl	8006b24 <mg_snprintf>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	e29e      	b.n	8002018 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ae6:	f7ff f829 	bl	8000b3c <__aeabi_dcmplt>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <mg_dtoa+0xcc>
 8001af0:	68bc      	ldr	r4, [r7, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001af8:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8001afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	66ba      	str	r2, [r7, #104]	; 0x68
 8001b02:	3370      	adds	r3, #112	; 0x70
 8001b04:	443b      	add	r3, r7
 8001b06:	222d      	movs	r2, #45	; 0x2d
 8001b08:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8001b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b10:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <mg_dtoa+0x248>)
 8001b1a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001b1e:	e00a      	b.n	8001b36 <mg_dtoa+0xf6>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <mg_dtoa+0x24c>)
 8001b26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b2a:	f7fe fd95 	bl	8000658 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <mg_dtoa+0x24c>)
 8001b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b40:	f7ff f810 	bl	8000b64 <__aeabi_dcmpge>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d011      	beq.n	8001b6e <mg_dtoa+0x12e>
 8001b4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b52:	f7fe feab 	bl	80008ac <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <mg_dtoa+0x24c>)
 8001b64:	f7fe fffe 	bl	8000b64 <__aeabi_dcmpge>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1d8      	bne.n	8001b20 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8001b6e:	e00a      	b.n	8001b86 <mg_dtoa+0x146>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <mg_dtoa+0x24c>)
 8001b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b7a:	f7fe fe97 	bl	80008ac <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <mg_dtoa+0x248>)
 8001b8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b90:	f7fe ffde 	bl	8000b50 <__aeabi_dcmple>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d011      	beq.n	8001bbe <mg_dtoa+0x17e>
 8001b9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ba2:	f7fe fe83 	bl	80008ac <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <mg_dtoa+0x248>)
 8001bb4:	f7fe ffcc 	bl	8000b50 <__aeabi_dcmple>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1d8      	bne.n	8001b70 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <mg_dtoa+0x250>)
 8001bc8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001bcc:	f7fe fd44 	bl	8000658 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001bd8:	e00d      	b.n	8001bf6 <mg_dtoa+0x1b6>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <mg_dtoa+0x24c>)
 8001be0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001be4:	f7fe fe62 	bl	80008ac <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbed      	blt.n	8001bda <mg_dtoa+0x19a>
  d += t;
 8001bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c06:	f7fe fb71 	bl	80002ec <__adddf3>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <mg_dtoa+0x248>)
 8001c18:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8001c1c:	e00d      	b.n	8001c3a <mg_dtoa+0x1fa>
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <mg_dtoa+0x24c>)
 8001c24:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c28:	f7fe fd16 	bl	8000658 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c36:	3301      	adds	r3, #1
 8001c38:	663b      	str	r3, [r7, #96]	; 0x60
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <mg_dtoa+0x24c>)
 8001c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c44:	f7fe ff8e 	bl	8000b64 <__aeabi_dcmpge>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d011      	beq.n	8001c72 <mg_dtoa+0x232>
 8001c4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c56:	f7fe fe29 	bl	80008ac <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <mg_dtoa+0x24c>)
 8001c68:	f7fe ff7c 	bl	8000b64 <__aeabi_dcmpge>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1d5      	bne.n	8001c1e <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8001c72:	e01d      	b.n	8001cb0 <mg_dtoa+0x270>
 8001c74:	080128c4 	.word	0x080128c4
 8001c78:	080128c8 	.word	0x080128c8
 8001c7c:	080128cc 	.word	0x080128cc
 8001c80:	080128d0 	.word	0x080128d0
 8001c84:	080128d8 	.word	0x080128d8
 8001c88:	3ff00000 	.word	0x3ff00000
 8001c8c:	40240000 	.word	0x40240000
 8001c90:	40140000 	.word	0x40140000
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b9d      	ldr	r3, [pc, #628]	; (8001f10 <mg_dtoa+0x4d0>)
 8001c9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c9e:	f7fe fe05 	bl	80008ac <__aeabi_ddiv>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cac:	3b01      	subs	r3, #1
 8001cae:	663b      	str	r3, [r7, #96]	; 0x60
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <mg_dtoa+0x4d4>)
 8001cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cba:	f7fe ff3f 	bl	8000b3c <__aeabi_dcmplt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d011      	beq.n	8001ce8 <mg_dtoa+0x2a8>
 8001cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ccc:	f7fe fdee 	bl	80008ac <__aeabi_ddiv>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b8d      	ldr	r3, [pc, #564]	; (8001f14 <mg_dtoa+0x4d4>)
 8001cde:	f7fe ff2d 	bl	8000b3c <__aeabi_dcmplt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1d5      	bne.n	8001c94 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8001ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	db33      	blt.n	8001d58 <mg_dtoa+0x318>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	dd30      	ble.n	8001d58 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001cf6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001cfe:	f7fe fdd5 	bl	80008ac <__aeabi_ddiv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	ec43 2b17 	vmov	d7, r2, r3
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f107 0018 	add.w	r0, r7, #24
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	eeb0 0a47 	vmov.f32	s0, s14
 8001d16:	eef0 0a67 	vmov.f32	s1, s15
 8001d1a:	2128      	movs	r1, #40	; 0x28
 8001d1c:	f7ff fe90 	bl	8001a40 <mg_dtoa>
 8001d20:	4603      	mov	r3, r0
 8001d22:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8001d24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d28:	4413      	add	r3, r2
 8001d2a:	f107 0218 	add.w	r2, r7, #24
 8001d2e:	4413      	add	r3, r2
 8001d30:	222b      	movs	r2, #43	; 0x2b
 8001d32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fdab 	bl	8001890 <addexp>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d3e:	4413      	add	r3, r2
 8001d40:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001d42:	f107 0318 	add.w	r3, r7, #24
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d4a:	4a73      	ldr	r2, [pc, #460]	; (8001f18 <mg_dtoa+0x4d8>)
 8001d4c:	6939      	ldr	r1, [r7, #16]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f004 fee8 	bl	8006b24 <mg_snprintf>
 8001d54:	4603      	mov	r3, r0
 8001d56:	e15f      	b.n	8002018 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	425b      	negs	r3, r3
 8001d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dc34      	bgt.n	8001dcc <mg_dtoa+0x38c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	dd31      	ble.n	8001dcc <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d70:	f7fe fd9c 	bl	80008ac <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	ec43 2b17 	vmov	d7, r2, r3
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f107 0018 	add.w	r0, r7, #24
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	eeb0 0a47 	vmov.f32	s0, s14
 8001d88:	eef0 0a67 	vmov.f32	s1, s15
 8001d8c:	2128      	movs	r1, #40	; 0x28
 8001d8e:	f7ff fe57 	bl	8001a40 <mg_dtoa>
 8001d92:	4603      	mov	r3, r0
 8001d94:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8001d96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f107 0218 	add.w	r2, r7, #24
 8001da0:	18d0      	adds	r0, r2, r3
 8001da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da4:	425b      	negs	r3, r3
 8001da6:	222d      	movs	r2, #45	; 0x2d
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7ff fd71 	bl	8001890 <addexp>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001db2:	4413      	add	r3, r2
 8001db4:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dbe:	4a56      	ldr	r2, [pc, #344]	; (8001f18 <mg_dtoa+0x4d8>)
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f004 feae 	bl	8006b24 <mg_snprintf>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	e125      	b.n	8002018 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001dcc:	2300      	movs	r3, #0
 8001dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001dd4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001dd8:	e03f      	b.n	8001e5a <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8001dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001de2:	f7fe fd63 	bl	80008ac <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe fecd 	bl	8000b8c <__aeabi_d2iz>
 8001df2:	4603      	mov	r3, r0
 8001df4:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8001df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	dc02      	bgt.n	8001e02 <mg_dtoa+0x3c2>
 8001dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	dd0c      	ble.n	8001e1c <mg_dtoa+0x3dc>
 8001e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e08:	1c59      	adds	r1, r3, #1
 8001e0a:	6679      	str	r1, [r7, #100]	; 0x64
 8001e0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e0e:	440b      	add	r3, r1
 8001e10:	3230      	adds	r2, #48	; 0x30
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	3370      	adds	r3, #112	; 0x70
 8001e16:	443b      	add	r3, r7
 8001e18:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001e1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e1e:	f7fe fbb1 	bl	8000584 <__aeabi_i2d>
 8001e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e26:	f7fe fc17 	bl	8000658 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e32:	f7fe fa59 	bl	80002e8 <__aeabi_dsub>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <mg_dtoa+0x4d0>)
 8001e44:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e48:	f7fe fd30 	bl	80008ac <__aeabi_ddiv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e56:	3301      	adds	r3, #1
 8001e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <mg_dtoa+0x4d4>)
 8001e60:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e64:	f7fe fe7e 	bl	8000b64 <__aeabi_dcmpge>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <mg_dtoa+0x438>
 8001e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e72:	4413      	add	r3, r2
 8001e74:	2b27      	cmp	r3, #39	; 0x27
 8001e76:	ddb0      	ble.n	8001dda <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8001e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d11b      	bne.n	8001eb6 <mg_dtoa+0x476>
 8001e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	66ba      	str	r2, [r7, #104]	; 0x68
 8001e84:	3370      	adds	r3, #112	; 0x70
 8001e86:	443b      	add	r3, r7
 8001e88:	2230      	movs	r2, #48	; 0x30
 8001e8a:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8001e8e:	e012      	b.n	8001eb6 <mg_dtoa+0x476>
 8001e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	667a      	str	r2, [r7, #100]	; 0x64
 8001e96:	3370      	adds	r3, #112	; 0x70
 8001e98:	443b      	add	r3, r7
 8001e9a:	2230      	movs	r2, #48	; 0x30
 8001e9c:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <mg_dtoa+0x4d0>)
 8001ea6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001eaa:	f7fe fcff 	bl	80008ac <__aeabi_ddiv>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <mg_dtoa+0x4d4>)
 8001ebc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ec0:	f7fe fe50 	bl	8000b64 <__aeabi_dcmpge>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d004      	beq.n	8001ed4 <mg_dtoa+0x494>
 8001eca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ece:	4413      	add	r3, r2
 8001ed0:	2b27      	cmp	r3, #39	; 0x27
 8001ed2:	dddd      	ble.n	8001e90 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8001ed4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ed8:	4413      	add	r3, r2
 8001eda:	2b27      	cmp	r3, #39	; 0x27
 8001edc:	dc09      	bgt.n	8001ef2 <mg_dtoa+0x4b2>
 8001ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	66ba      	str	r2, [r7, #104]	; 0x68
 8001ee4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3370      	adds	r3, #112	; 0x70
 8001eea:	443b      	add	r3, r7
 8001eec:	222e      	movs	r2, #46	; 0x2e
 8001eee:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ef6:	a304      	add	r3, pc, #16	; (adr r3, 8001f08 <mg_dtoa+0x4c8>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f00:	e046      	b.n	8001f90 <mg_dtoa+0x550>
 8001f02:	bf00      	nop
 8001f04:	f3af 8000 	nop.w
 8001f08:	9999999a 	.word	0x9999999a
 8001f0c:	3fb99999 	.word	0x3fb99999
 8001f10:	40240000 	.word	0x40240000
 8001f14:	3ff00000 	.word	0x3ff00000
 8001f18:	080128dc 	.word	0x080128dc
      int ch = (int) (d / t);
 8001f1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f24:	f7fe fcc2 	bl	80008ac <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fe2c 	bl	8000b8c <__aeabi_d2iz>
 8001f34:	4603      	mov	r3, r0
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 8001f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f3e:	1c59      	adds	r1, r3, #1
 8001f40:	6679      	str	r1, [r7, #100]	; 0x64
 8001f42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f44:	440b      	add	r3, r1
 8001f46:	3230      	adds	r2, #48	; 0x30
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	3370      	adds	r3, #112	; 0x70
 8001f4c:	443b      	add	r3, r7
 8001f4e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001f52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001f54:	f7fe fb16 	bl	8000584 <__aeabi_i2d>
 8001f58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f5c:	f7fe fb7c 	bl	8000658 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f68:	f7fe f9be 	bl	80002e8 <__aeabi_dsub>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <mg_dtoa+0x5e0>)
 8001f7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f7e:	f7fe fc95 	bl	80008ac <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f94:	4413      	add	r3, r2
 8001f96:	2b27      	cmp	r3, #39	; 0x27
 8001f98:	dc07      	bgt.n	8001faa <mg_dtoa+0x56a>
 8001f9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	dbbc      	blt.n	8001f1c <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8001fa2:	e002      	b.n	8001faa <mg_dtoa+0x56a>
 8001fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00c      	beq.n	8001fca <mg_dtoa+0x58a>
 8001fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	dd09      	ble.n	8001fca <mg_dtoa+0x58a>
 8001fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	3370      	adds	r3, #112	; 0x70
 8001fc0:	443b      	add	r3, r7
 8001fc2:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001fc6:	2b30      	cmp	r3, #48	; 0x30
 8001fc8:	d0ec      	beq.n	8001fa4 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8001fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd0c      	ble.n	8001fea <mg_dtoa+0x5aa>
 8001fd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	3370      	adds	r3, #112	; 0x70
 8001fda:	443b      	add	r3, r7
 8001fdc:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8001fe2:	d102      	bne.n	8001fea <mg_dtoa+0x5aa>
 8001fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 8001fea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fee:	4413      	add	r3, r2
 8001ff0:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8001ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff4:	2b27      	cmp	r3, #39	; 0x27
 8001ff6:	dd01      	ble.n	8001ffc <mg_dtoa+0x5bc>
 8001ff8:	2327      	movs	r3, #39	; 0x27
 8001ffa:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 8001ffc:	f107 0218 	add.w	r2, r7, #24
 8002000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002002:	4413      	add	r3, r2
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	4a05      	ldr	r2, [pc, #20]	; (8002024 <mg_dtoa+0x5e4>)
 800200e:	6939      	ldr	r1, [r7, #16]
 8002010:	6978      	ldr	r0, [r7, #20]
 8002012:	f004 fd87 	bl	8006b24 <mg_snprintf>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3770      	adds	r7, #112	; 0x70
 800201c:	46bd      	mov	sp, r7
 800201e:	bdb0      	pop	{r4, r5, r7, pc}
 8002020:	40240000 	.word	0x40240000
 8002024:	080128c8 	.word	0x080128c8

08002028 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b08c      	sub	sp, #48	; 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <mg_lld+0x15c>)
 8002036:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800203c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002044:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <mg_lld+0x4a>
 800204c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da0e      	bge.n	8002072 <mg_lld+0x4a>
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	627a      	str	r2, [r7, #36]	; 0x24
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	222d      	movs	r2, #45	; 0x2d
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002066:	2100      	movs	r1, #0
 8002068:	4254      	negs	r4, r2
 800206a:	eb61 0503 	sbc.w	r5, r1, r3
 800206e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002072:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002076:	2b00      	cmp	r3, #0
 8002078:	d021      	beq.n	80020be <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	e019      	b.n	80020b4 <mg_lld+0x8c>
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	441a      	add	r2, r3
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	1c59      	adds	r1, r3, #1
 800208e:	6239      	str	r1, [r7, #32]
 8002090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002092:	440b      	add	r3, r1
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	440b      	add	r3, r1
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	0902      	lsrs	r2, r0, #4
 80020aa:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80020ae:	090b      	lsrs	r3, r1, #4
 80020b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80020b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020b8:	4313      	orrs	r3, r2
 80020ba:	d1e1      	bne.n	8002080 <mg_lld+0x58>
 80020bc:	e025      	b.n	800210a <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	e01e      	b.n	8002102 <mg_lld+0xda>
 80020c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020c8:	f04f 020a 	mov.w	r2, #10
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	f7fe fd84 	bl	8000bdc <__aeabi_uldivmod>
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	441a      	add	r2, r3
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	1c59      	adds	r1, r3, #1
 80020dc:	6239      	str	r1, [r7, #32]
 80020de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e0:	440b      	add	r3, r1
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	440b      	add	r3, r1
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020ee:	f04f 020a 	mov.w	r2, #10
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	f7fe fd71 	bl	8000bdc <__aeabi_uldivmod>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002106:	4313      	orrs	r3, r2
 8002108:	d1dc      	bne.n	80020c4 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e022      	b.n	8002156 <mg_lld+0x12e>
    char t = buf[s + i];
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4413      	add	r3, r2
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	441a      	add	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	441a      	add	r2, r3
 800212e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	440b      	add	r3, r1
 8002134:	68f9      	ldr	r1, [r7, #12]
 8002136:	440b      	add	r3, r1
 8002138:	7812      	ldrb	r2, [r2, #0]
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	441a      	add	r2, r3
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	7dfa      	ldrb	r2, [r7, #23]
 800214e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3301      	adds	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	429a      	cmp	r2, r3
 800215e:	d3d7      	bcc.n	8002110 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002164:	4313      	orrs	r3, r2
 8002166:	d106      	bne.n	8002176 <mg_lld+0x14e>
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	623a      	str	r2, [r7, #32]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	2230      	movs	r2, #48	; 0x30
 8002174:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002176:	6a3a      	ldr	r2, [r7, #32]
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	4413      	add	r3, r2
}
 800217c:	4618      	mov	r0, r3
 800217e:	3730      	adds	r7, #48	; 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bdb0      	pop	{r4, r5, r7, pc}
 8002184:	080128e4 	.word	0x080128e4

08002188 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 800219a:	e009      	b.n	80021b0 <scpy+0x28>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	617a      	str	r2, [r7, #20]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	4610      	mov	r0, r2
 80021ae:	4798      	blx	r3
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d205      	bcs.n	80021c4 <scpy+0x3c>
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4413      	add	r3, r2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1eb      	bne.n	800219c <scpy+0x14>
  return i;
 80021c4:	697b      	ldr	r3, [r7, #20]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80021ce:	b40c      	push	{r2, r3}
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f809 	bl	8002204 <mg_vxprintf>
 80021f2:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80021f4:	68fb      	ldr	r3, [r7, #12]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002200:	b002      	add	sp, #8
 8002202:	4770      	bx	lr

08002204 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8002204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002208:	b0a6      	sub	sp, #152	; 0x98
 800220a:	af02      	add	r7, sp, #8
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8002220:	e383      	b.n	800292a <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b25      	cmp	r3, #37	; 0x25
 800222e:	f040 8369 	bne.w	8002904 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8002232:	2300      	movs	r3, #0
 8002234:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002236:	2300      	movs	r3, #0
 8002238:	67bb      	str	r3, [r7, #120]	; 0x78
 800223a:	2300      	movs	r3, #0
 800223c:	677b      	str	r3, [r7, #116]	; 0x74
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002244:	2320      	movs	r3, #32
 8002246:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800224a:	2300      	movs	r3, #0
 800224c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002254:	3301      	adds	r3, #1
 8002256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 8002268:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800226c:	2b23      	cmp	r3, #35	; 0x23
 800226e:	d10e      	bne.n	800228e <mg_vxprintf+0x8a>
 8002270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002272:	3301      	adds	r3, #1
 8002274:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800227a:	3301      	adds	r3, #1
 800227c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 800228e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002292:	2b2d      	cmp	r3, #45	; 0x2d
 8002294:	d110      	bne.n	80022b8 <mg_vxprintf+0xb4>
 8002296:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800229a:	3301      	adds	r3, #1
 800229c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80022a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80022b8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022bc:	2b30      	cmp	r3, #48	; 0x30
 80022be:	d127      	bne.n	8002310 <mg_vxprintf+0x10c>
 80022c0:	2330      	movs	r3, #48	; 0x30
 80022c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80022c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ca:	3301      	adds	r3, #1
 80022cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80022de:	e017      	b.n	8002310 <mg_vxprintf+0x10c>
 80022e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	677b      	str	r3, [r7, #116]	; 0x74
 80022ec:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80022f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f2:	4413      	add	r3, r2
 80022f4:	3b30      	subs	r3, #48	; 0x30
 80022f6:	677b      	str	r3, [r7, #116]	; 0x74
 80022f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022fc:	3301      	adds	r3, #1
 80022fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002310:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff faa5 	bl	8001864 <is_digit>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1df      	bne.n	80022e0 <mg_vxprintf+0xdc>
      if (c == '.') {
 8002320:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002324:	2b2e      	cmp	r3, #46	; 0x2e
 8002326:	d153      	bne.n	80023d0 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800232c:	3301      	adds	r3, #1
 800232e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002338:	4413      	add	r3, r2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8002340:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002344:	2b2a      	cmp	r3, #42	; 0x2a
 8002346:	d113      	bne.n	8002370 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1d19      	adds	r1, r3, #4
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	6011      	str	r1, [r2, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8002356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800235a:	3301      	adds	r3, #1
 800235c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800236e:	e02f      	b.n	80023d0 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002374:	e017      	b.n	80023a6 <mg_vxprintf+0x1a2>
 8002376:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	673b      	str	r3, [r7, #112]	; 0x70
 8002382:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002388:	4413      	add	r3, r2
 800238a:	3b30      	subs	r3, #48	; 0x30
 800238c:	673b      	str	r3, [r7, #112]	; 0x70
 800238e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002392:	3301      	adds	r3, #1
 8002394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023a6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fa5a 	bl	8001864 <is_digit>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1df      	bne.n	8002376 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80023b6:	e00b      	b.n	80023d0 <mg_vxprintf+0x1cc>
 80023b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023bc:	3301      	adds	r3, #1
 80023be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023d4:	2b68      	cmp	r3, #104	; 0x68
 80023d6:	d0ef      	beq.n	80023b8 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80023d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023dc:	2b6c      	cmp	r3, #108	; 0x6c
 80023de:	d121      	bne.n	8002424 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80023e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023e2:	3301      	adds	r3, #1
 80023e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80023e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ea:	3301      	adds	r3, #1
 80023ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80023fe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002402:	2b6c      	cmp	r3, #108	; 0x6c
 8002404:	d10e      	bne.n	8002424 <mg_vxprintf+0x220>
 8002406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002408:	3301      	adds	r3, #1
 800240a:	67bb      	str	r3, [r7, #120]	; 0x78
 800240c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002410:	3301      	adds	r3, #1
 8002412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800241c:	4413      	add	r3, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002424:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002428:	2b70      	cmp	r3, #112	; 0x70
 800242a:	d103      	bne.n	8002434 <mg_vxprintf+0x230>
 800242c:	2301      	movs	r3, #1
 800242e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002430:	2301      	movs	r3, #1
 8002432:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002434:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d018      	beq.n	800246e <mg_vxprintf+0x26a>
 800243c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002440:	2b75      	cmp	r3, #117	; 0x75
 8002442:	d014      	beq.n	800246e <mg_vxprintf+0x26a>
 8002444:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002448:	2b78      	cmp	r3, #120	; 0x78
 800244a:	d010      	beq.n	800246e <mg_vxprintf+0x26a>
 800244c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002450:	2b58      	cmp	r3, #88	; 0x58
 8002452:	d00c      	beq.n	800246e <mg_vxprintf+0x26a>
 8002454:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d008      	beq.n	800246e <mg_vxprintf+0x26a>
 800245c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002460:	2b67      	cmp	r3, #103	; 0x67
 8002462:	d004      	beq.n	800246e <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002464:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002468:	2b66      	cmp	r3, #102	; 0x66
 800246a:	f040 816c 	bne.w	8002746 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 800246e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800247e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002482:	2b78      	cmp	r3, #120	; 0x78
 8002484:	d007      	beq.n	8002496 <mg_vxprintf+0x292>
 8002486:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800248a:	2b58      	cmp	r3, #88	; 0x58
 800248c:	d003      	beq.n	8002496 <mg_vxprintf+0x292>
 800248e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002492:	2b70      	cmp	r3, #112	; 0x70
 8002494:	d101      	bne.n	800249a <mg_vxprintf+0x296>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <mg_vxprintf+0x298>
 800249a:	2300      	movs	r3, #0
 800249c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80024a0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 80024ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <mg_vxprintf+0x2b2>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e000      	b.n	80024b8 <mg_vxprintf+0x2b4>
 80024b6:	2300      	movs	r3, #0
 80024b8:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 80024ba:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024be:	2b67      	cmp	r3, #103	; 0x67
 80024c0:	d003      	beq.n	80024ca <mg_vxprintf+0x2c6>
 80024c2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024c6:	2b66      	cmp	r3, #102	; 0x66
 80024c8:	d124      	bne.n	8002514 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3307      	adds	r3, #7
 80024d0:	f023 0307 	bic.w	r3, r3, #7
 80024d4:	f103 0108 	add.w	r1, r3, #8
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	6011      	str	r1, [r2, #0]
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 80024e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d101      	bne.n	80024f0 <mg_vxprintf+0x2ec>
 80024ec:	2306      	movs	r3, #6
 80024ee:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80024f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80024f2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024f6:	2b67      	cmp	r3, #103	; 0x67
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f107 0014 	add.w	r0, r7, #20
 8002504:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002508:	2128      	movs	r1, #40	; 0x28
 800250a:	f7ff fa99 	bl	8001a40 <mg_dtoa>
 800250e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 8002512:	e069      	b.n	80025e8 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002516:	2b02      	cmp	r3, #2
 8002518:	d11c      	bne.n	8002554 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3307      	adds	r3, #7
 8002520:	f023 0307 	bic.w	r3, r3, #7
 8002524:	f103 0108 	add.w	r1, r3, #8
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	6011      	str	r1, [r2, #0]
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 8002534:	f107 0114 	add.w	r1, r7, #20
 8002538:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002548:	4608      	mov	r0, r1
 800254a:	f7ff fd6d 	bl	8002028 <mg_lld>
 800254e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002552:	e049      	b.n	80025e8 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002556:	2b01      	cmp	r3, #1
 8002558:	d123      	bne.n	80025a2 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1d19      	adds	r1, r3, #4
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	6011      	str	r1, [r2, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <mg_vxprintf+0x376>
 8002570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002572:	17da      	asrs	r2, r3, #31
 8002574:	461c      	mov	r4, r3
 8002576:	4615      	mov	r5, r2
 8002578:	e003      	b.n	8002582 <mg_vxprintf+0x37e>
 800257a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257c:	2200      	movs	r2, #0
 800257e:	461c      	mov	r4, r3
 8002580:	4615      	mov	r5, r2
 8002582:	f107 0114 	add.w	r1, r7, #20
 8002586:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4622      	mov	r2, r4
 8002594:	462b      	mov	r3, r5
 8002596:	4608      	mov	r0, r1
 8002598:	f7ff fd46 	bl	8002028 <mg_lld>
 800259c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80025a0:	e022      	b.n	80025e8 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1d19      	adds	r1, r3, #4
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	6011      	str	r1, [r2, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80025b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <mg_vxprintf+0x3be>
 80025b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ba:	17da      	asrs	r2, r3, #31
 80025bc:	4698      	mov	r8, r3
 80025be:	4691      	mov	r9, r2
 80025c0:	e003      	b.n	80025ca <mg_vxprintf+0x3c6>
 80025c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c4:	2200      	movs	r2, #0
 80025c6:	4698      	mov	r8, r3
 80025c8:	4691      	mov	r9, r2
 80025ca:	f107 0114 	add.w	r1, r7, #20
 80025ce:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4642      	mov	r2, r8
 80025dc:	464b      	mov	r3, r9
 80025de:	4608      	mov	r0, r1
 80025e0:	f7ff fd22 	bl	8002028 <mg_lld>
 80025e4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025ee:	e007      	b.n	8002600 <mg_vxprintf+0x3fc>
 80025f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f2:	3b01      	subs	r3, #1
 80025f4:	677b      	str	r3, [r7, #116]	; 0x74
 80025f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025fa:	3301      	adds	r3, #1
 80025fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002600:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002606:	429a      	cmp	r2, r3
 8002608:	d202      	bcs.n	8002610 <mg_vxprintf+0x40c>
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ef      	bne.n	80025f0 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002616:	e011      	b.n	800263c <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002618:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800261c:	2301      	movs	r3, #1
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff fdb1 	bl	8002188 <scpy>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800262c:	4413      	add	r3, r2
 800262e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002636:	3301      	adds	r3, #1
 8002638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800263c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002640:	2b20      	cmp	r3, #32
 8002642:	d110      	bne.n	8002666 <mg_vxprintf+0x462>
 8002644:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10c      	bne.n	8002666 <mg_vxprintf+0x462>
 800264c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002652:	429a      	cmp	r2, r3
 8002654:	d207      	bcs.n	8002666 <mg_vxprintf+0x462>
 8002656:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800265a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800265e:	4413      	add	r3, r2
 8002660:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002662:	429a      	cmp	r2, r3
 8002664:	d8d8      	bhi.n	8002618 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8002666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002668:	4ab7      	ldr	r2, [pc, #732]	; (8002948 <mg_vxprintf+0x744>)
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff fd8b 	bl	8002188 <scpy>
 8002672:	4602      	mov	r2, r0
 8002674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002678:	4413      	add	r3, r2
 800267a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002684:	e011      	b.n	80026aa <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8002686:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800268a:	2301      	movs	r3, #1
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff fd7a 	bl	8002188 <scpy>
 8002694:	4602      	mov	r2, r0
 8002696:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800269a:	4413      	add	r3, r2
 800269c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a4:	3301      	adds	r3, #1
 80026a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80026ae:	2b30      	cmp	r3, #48	; 0x30
 80026b0:	d10c      	bne.n	80026cc <mg_vxprintf+0x4c8>
 80026b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <mg_vxprintf+0x4c8>
 80026bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026c4:	4413      	add	r3, r2
 80026c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d8dc      	bhi.n	8002686 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 80026cc:	f107 0214 	add.w	r2, r7, #20
 80026d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff fd56 	bl	8002188 <scpy>
 80026dc:	4602      	mov	r2, r0
 80026de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e2:	4413      	add	r3, r2
 80026e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026ee:	e011      	b.n	8002714 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80026f0:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80026f4:	2301      	movs	r3, #1
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff fd45 	bl	8002188 <scpy>
 80026fe:	4602      	mov	r2, r0
 8002700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002704:	4413      	add	r3, r2
 8002706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800270a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800270e:	3301      	adds	r3, #1
 8002710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002714:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002718:	2b20      	cmp	r3, #32
 800271a:	f040 80ea 	bne.w	80028f2 <mg_vxprintf+0x6ee>
 800271e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80e5 	beq.w	80028f2 <mg_vxprintf+0x6ee>
 8002728:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800272c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272e:	429a      	cmp	r2, r3
 8002730:	f080 80df 	bcs.w	80028f2 <mg_vxprintf+0x6ee>
 8002734:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800273c:	4413      	add	r3, r2
 800273e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002740:	429a      	cmp	r2, r3
 8002742:	d8d5      	bhi.n	80026f0 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002744:	e0d5      	b.n	80028f2 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8002746:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800274a:	2b6d      	cmp	r3, #109	; 0x6d
 800274c:	d003      	beq.n	8002756 <mg_vxprintf+0x552>
 800274e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002752:	2b4d      	cmp	r3, #77	; 0x4d
 8002754:	d128      	bne.n	80027a8 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1d19      	adds	r1, r3, #4
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	6011      	str	r1, [r2, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 8002764:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002768:	2b6d      	cmp	r3, #109	; 0x6d
 800276a:	d103      	bne.n	8002774 <mg_vxprintf+0x570>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	2022      	movs	r0, #34	; 0x22
 8002772:	4798      	blx	r3
        n += f(out, param, ap);
 8002774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	4798      	blx	r3
 800277e:	4602      	mov	r2, r0
 8002780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002784:	4413      	add	r3, r2
 8002786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 800278a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800278e:	2b6d      	cmp	r3, #109	; 0x6d
 8002790:	f040 80b1 	bne.w	80028f6 <mg_vxprintf+0x6f2>
 8002794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002798:	3302      	adds	r3, #2
 800279a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	2022      	movs	r0, #34	; 0x22
 80027a4:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 80027a6:	e0a6      	b.n	80028f6 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 80027a8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027ac:	2b63      	cmp	r3, #99	; 0x63
 80027ae:	d112      	bne.n	80027d6 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1d19      	adds	r1, r3, #4
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6011      	str	r1, [r2, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 80027be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	4610      	mov	r0, r2
 80027c8:	4798      	blx	r3
        n++;
 80027ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ce:	3301      	adds	r3, #1
 80027d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027d4:	e090      	b.n	80028f8 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80027d6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027da:	2b73      	cmp	r3, #115	; 0x73
 80027dc:	d16b      	bne.n	80028b6 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1d19      	adds	r1, r3, #4
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	6011      	str	r1, [r2, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80027ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d109      	bne.n	8002808 <mg_vxprintf+0x604>
 80027f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <mg_vxprintf+0x600>
 80027fa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80027fc:	f7fd fd68 	bl	80002d0 <strlen>
 8002800:	4603      	mov	r3, r0
 8002802:	e000      	b.n	8002806 <mg_vxprintf+0x602>
 8002804:	2300      	movs	r3, #0
 8002806:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800280e:	e011      	b.n	8002834 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002810:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002814:	2301      	movs	r3, #1
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fcb5 	bl	8002188 <scpy>
 800281e:	4602      	mov	r2, r0
 8002820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002824:	4413      	add	r3, r2
 8002826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800282a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800282e:	3301      	adds	r3, #1
 8002830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002834:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <mg_vxprintf+0x64e>
 800283c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800283e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002840:	429a      	cmp	r2, r3
 8002842:	d206      	bcs.n	8002852 <mg_vxprintf+0x64e>
 8002844:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800284a:	4413      	add	r3, r2
 800284c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800284e:	429a      	cmp	r2, r3
 8002850:	d8de      	bhi.n	8002810 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8002852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002854:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff fc95 	bl	8002188 <scpy>
 800285e:	4602      	mov	r2, r0
 8002860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002864:	4413      	add	r3, r2
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002870:	e011      	b.n	8002896 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8002872:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002876:	2301      	movs	r3, #1
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7ff fc84 	bl	8002188 <scpy>
 8002880:	4602      	mov	r2, r0
 8002882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002886:	4413      	add	r3, r2
 8002888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800288c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002890:	3301      	adds	r3, #1
 8002892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002896:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800289a:	2b00      	cmp	r3, #0
 800289c:	d02c      	beq.n	80028f8 <mg_vxprintf+0x6f4>
 800289e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d228      	bcs.n	80028f8 <mg_vxprintf+0x6f4>
 80028a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80028aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ac:	4413      	add	r3, r2
 80028ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d8de      	bhi.n	8002872 <mg_vxprintf+0x66e>
 80028b4:	e020      	b.n	80028f8 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 80028b6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028ba:	2b25      	cmp	r3, #37	; 0x25
 80028bc:	d109      	bne.n	80028d2 <mg_vxprintf+0x6ce>
        out('%', param);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	2025      	movs	r0, #37	; 0x25
 80028c4:	4798      	blx	r3
        n++;
 80028c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ca:	3301      	adds	r3, #1
 80028cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028d0:	e012      	b.n	80028f8 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	2025      	movs	r0, #37	; 0x25
 80028d8:	4798      	blx	r3
        out(c, param);
 80028da:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	4610      	mov	r0, r2
 80028e4:	4798      	blx	r3
        n += 2;
 80028e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ea:	3302      	adds	r3, #2
 80028ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028f0:	e002      	b.n	80028f8 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80028f6:	bf00      	nop
      }
      i++;
 80028f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028fc:	3301      	adds	r3, #1
 80028fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002902:	e012      	b.n	800292a <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	4413      	add	r3, r2
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	4610      	mov	r0, r2
 8002914:	4798      	blx	r3
 8002916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800291a:	3301      	adds	r3, #1
 800291c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002924:	3301      	adds	r3, #1
 8002926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f ac74 	bne.w	8002222 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800293a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800293e:	4618      	mov	r0, r3
 8002940:	3790      	adds	r7, #144	; 0x90
 8002942:	46bd      	mov	sp, r7
 8002944:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002948:	080128f8 	.word	0x080128f8

0800294c <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8002958:	2108      	movs	r1, #8
 800295a:	2001      	movs	r0, #1
 800295c:	f00e fd28 	bl	80113b0 <calloc>
 8002960:	4603      	mov	r3, r0
 8002962:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d013      	beq.n	8002992 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68b8      	ldr	r0, [r7, #8]
 8002972:	4798      	blx	r3
 8002974:	4602      	mov	r2, r0
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <mg_fs_open+0x46>
      free(fd);
 8002988:	6978      	ldr	r0, [r7, #20]
 800298a:	f00e fd37 	bl	80113fc <free>
      fd = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8002992:	697b      	ldr	r3, [r7, #20]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	4610      	mov	r0, r2
 80029b6:	4798      	blx	r3
    free(fd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f00e fd1f 	bl	80113fc <free>
  }
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fc7c 	bl	80002d0 <strlen>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4293      	cmp	r3, r2
 80029de:	d219      	bcs.n	8002a14 <is_dir_prefix+0x4e>
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f00e ffd5 	bl	8011994 <strncmp>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <is_dir_prefix+0x4e>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b2f      	cmp	r3, #47	; 0x2f
 8002a00:	d006      	beq.n	8002a10 <is_dir_prefix+0x4a>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a0e:	d101      	bne.n	8002a14 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <is_dir_prefix+0x50>
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7fd fc50 	bl	80002d0 <strlen>
 8002a30:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f008 fb8c 	bl	800b154 <mg_unpack>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <packed_stat+0x28>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e017      	b.n	8002a76 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e00c      	b.n	8002a66 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ffb8 	bl	80029c6 <is_dir_prefix>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <packed_stat+0x42>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e00a      	b.n	8002a76 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3301      	adds	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	69f8      	ldr	r0, [r7, #28]
 8002a68:	f008 fb60 	bl	800b12c <mg_unlist>
 8002a6c:	6178      	str	r0, [r7, #20]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1eb      	bne.n	8002a4c <packed_stat+0x2e>
  }
  return 0;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b0cc      	sub	sp, #304	; 0x130
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a8e:	6018      	str	r0, [r3, #0]
 8002a90:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a98:	6019      	str	r1, [r3, #0]
 8002a9a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002a9e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002aa2:	601a      	str	r2, [r3, #0]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8002aa4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002aa8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	f7fd fc0f 	bl	80002d0 <strlen>
 8002ab2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  tmp[0] = '\0';  // Previously listed entry
 8002ab6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002aba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ac8:	e065      	b.n	8002b96 <packed_list+0x116>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002aca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ace:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ad2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ad6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	f7ff ff73 	bl	80029c6 <is_dir_prefix>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04f      	beq.n	8002b86 <packed_list+0x106>
    begin = &path[n + 1];
 8002ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aea:	3301      	adds	r3, #1
 8002aec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002af0:	4413      	add	r3, r2
 8002af2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    end = strchr(begin, '/');
 8002af6:	212f      	movs	r1, #47	; 0x2f
 8002af8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002afc:	f00e ff3d 	bl	801197a <strchr>
 8002b00:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (end == NULL) end = begin + strlen(begin);
 8002b04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <packed_list+0xa0>
 8002b0c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002b10:	f7fd fbde 	bl	80002d0 <strlen>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8002b20:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b28:	1ad2      	subs	r2, r2, r3
 8002b2a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <packed_list+0x138>)
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	f003 fff3 	bl	8006b24 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8002b44:	f107 0214 	add.w	r2, r7, #20
 8002b48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fb5e 	bl	8000210 <strcmp>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <packed_list+0x10a>
    fn(buf, userdata);  // Not yet listed, call user function
 8002b5a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b5e:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8002b62:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002b66:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6811      	ldr	r1, [r2, #0]
 8002b72:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8002b74:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f00e ffb5 	bl	8011aee <strcpy>
 8002b84:	e002      	b.n	8002b8c <packed_list+0x10c>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <packed_list+0x10c>
    if (strcmp(buf, tmp) == 0) continue;
 8002b8a:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002b8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b90:	3301      	adds	r3, #1
 8002b92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b96:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002b9a:	f008 fac7 	bl	800b12c <mg_unlist>
 8002b9e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8002ba2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d18f      	bne.n	8002aca <packed_list+0x4a>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	080128dc 	.word	0x080128dc

08002bbc <packed_open>:

static void *packed_open(const char *path, int flags) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f008 fabe 	bl	800b154 <mg_unpack>
 8002bd8:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <packed_open+0x2c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	e016      	b.n	8002c16 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <packed_open+0x3a>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e00f      	b.n	8002c16 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8002bf6:	210c      	movs	r1, #12
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f00e fbd9 	bl	80113b0 <calloc>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <packed_open+0x58>
    fp->size = size;
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8002c14:	693b      	ldr	r3, [r7, #16]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <packed_close>:

static void packed_close(void *fp) {
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <packed_close+0x14>
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f00e fbe5 	bl	80113fc <free>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	441a      	add	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d905      	bls.n	8002c66 <packed_read+0x2c>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4413      	add	r3, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4619      	mov	r1, r3
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f00e ff42 	bl	8011afe <memcpy>
  fp->pos += len;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	441a      	add	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	609a      	str	r2, [r3, #8]
  return len;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d903      	bls.n	8002cd2 <packed_seek+0x28>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <packed_remove>:

static bool packed_remove(const char *path) {
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <p_open>:
static void *p_open(const char *path, int flags) {
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <p_close>:
static void p_close(void *fp) {
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <p_remove>:
static bool p_remove(const char *path) {
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8002e18:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e1c:	b08f      	sub	sp, #60	; 0x3c
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	f107 0318 	add.w	r3, r7, #24
 8002e24:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e28:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002e36:	a340      	add	r3, pc, #256	; (adr r3, 8002f38 <mg_to_size_t+0x120>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 8002e44:	e002      	b.n	8002e4c <mg_to_size_t+0x34>
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	3301      	adds	r3, #1
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d20b      	bcs.n	8002e6c <mg_to_size_t+0x54>
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	4413      	add	r3, r2
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d0f2      	beq.n	8002e46 <mg_to_size_t+0x2e>
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d0ec      	beq.n	8002e46 <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d244      	bcs.n	8002efe <mg_to_size_t+0xe6>
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	4413      	add	r3, r2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b2d      	cmp	r3, #45	; 0x2d
 8002e7e:	d13e      	bne.n	8002efe <mg_to_size_t+0xe6>
 8002e80:	2300      	movs	r3, #0
 8002e82:	e050      	b.n	8002f26 <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 8002e84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e8c:	4290      	cmp	r0, r2
 8002e8e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002e92:	d201      	bcs.n	8002e98 <mg_to_size_t+0x80>
 8002e94:	2300      	movs	r3, #0
 8002e96:	e046      	b.n	8002f26 <mg_to_size_t+0x10e>
    result *= 10;
 8002e98:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	f04f 0000 	mov.w	r0, #0
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	0099      	lsls	r1, r3, #2
 8002eaa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002eae:	0090      	lsls	r0, r2, #2
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	eb12 0408 	adds.w	r4, r2, r8
 8002eb8:	eb43 0509 	adc.w	r5, r3, r9
 8002ebc:	1923      	adds	r3, r4, r4
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	eb45 0305 	adc.w	r3, r5, r5
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eca:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	4413      	add	r3, r2
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	3b30      	subs	r3, #48	; 0x30
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2300      	movs	r3, #0
 8002edc:	4692      	mov	sl, r2
 8002ede:	469b      	mov	fp, r3
 8002ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ee4:	eb12 010a 	adds.w	r1, r2, sl
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	eb43 030b 	adc.w	r3, r3, fp
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ef4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	3301      	adds	r3, #1
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d20b      	bcs.n	8002f1e <mg_to_size_t+0x106>
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8002f10:	d905      	bls.n	8002f1e <mg_to_size_t+0x106>
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b39      	cmp	r3, #57	; 0x39
 8002f1c:	d9b2      	bls.n	8002e84 <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	601a      	str	r2, [r3, #0]
  return true;
 8002f24:	2301      	movs	r3, #1
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	373c      	adds	r7, #60	; 0x3c
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	f3af 8000 	nop.w
 8002f38:	99999998 	.word	0x99999998
 8002f3c:	19999999 	.word	0x19999999

08002f40 <isx>:
    }
  }
  return len;
}

static bool isx(int c) {
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b2f      	cmp	r3, #47	; 0x2f
 8002f4c:	dd02      	ble.n	8002f54 <isx+0x14>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b39      	cmp	r3, #57	; 0x39
 8002f52:	dd0b      	ble.n	8002f6c <isx+0x2c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b60      	cmp	r3, #96	; 0x60
 8002f58:	dd02      	ble.n	8002f60 <isx+0x20>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b66      	cmp	r3, #102	; 0x66
 8002f5e:	dd05      	ble.n	8002f6c <isx+0x2c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	dd04      	ble.n	8002f70 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b46      	cmp	r3, #70	; 0x46
 8002f6a:	dc01      	bgt.n	8002f70 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <isx+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e04f      	b.n	800303c <mg_url_decode+0xb8>
    if (src[i] == '%') {
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b25      	cmp	r3, #37	; 0x25
 8002fa6:	d12c      	bne.n	8003002 <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3302      	adds	r3, #2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d924      	bls.n	8002ffc <mg_url_decode+0x78>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ffbf 	bl	8002f40 <isx>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d019      	beq.n	8002ffc <mg_url_decode+0x78>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3302      	adds	r3, #2
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ffb4 	bl	8002f40 <isx>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	18d0      	adds	r0, r2, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	2102      	movs	r1, #2
 8002ff0:	f004 fc5d 	bl	80078ae <mg_unhex>
        i += 2;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e019      	b.n	8003030 <mg_url_decode+0xac>
      } else {
        return -1;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	e03a      	b.n	8003078 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <mg_url_decode+0x9c>
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	4413      	add	r3, r2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b2b      	cmp	r3, #43	; 0x2b
 8003012:	d105      	bne.n	8003020 <mg_url_decode+0x9c>
      dst[j] = ' ';
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	2220      	movs	r2, #32
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e007      	b.n	8003030 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	441a      	add	r2, r3
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	440b      	add	r3, r1
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3301      	adds	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	3301      	adds	r3, #1
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	429a      	cmp	r2, r3
 8003042:	d204      	bcs.n	800304e <mg_url_decode+0xca>
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	3301      	adds	r3, #1
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d8a6      	bhi.n	8002f9c <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d204      	bcs.n	8003060 <mg_url_decode+0xdc>
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d305      	bcc.n	8003074 <mg_url_decode+0xf0>
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d201      	bcs.n	8003074 <mg_url_decode+0xf0>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	e001      	b.n	8003078 <mg_url_decode+0xf4>
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <isok>:

static bool isok(uint8_t c) {
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b0a      	cmp	r3, #10
 800308e:	d005      	beq.n	800309c <isok+0x1c>
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	2b0d      	cmp	r3, #13
 8003094:	d002      	beq.n	800309c <isok+0x1c>
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	2b1f      	cmp	r3, #31
 800309a:	d901      	bls.n	80030a0 <isok+0x20>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <isok+0x22>
 80030a0:	2300      	movs	r3, #0
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e03c      	b.n	800313e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ffd7 	bl	8003080 <isok>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f083 0301 	eor.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <mg_http_get_request_len+0x30>
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	e031      	b.n	8003148 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <mg_http_get_request_len+0x50>
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b0a      	cmp	r3, #10
 80030f4:	d106      	bne.n	8003104 <mg_http_get_request_len+0x50>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b0a      	cmp	r3, #10
 8003102:	d016      	beq.n	8003132 <mg_http_get_request_len+0x7e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d916      	bls.n	8003138 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b0a      	cmp	r3, #10
 8003114:	d110      	bne.n	8003138 <mg_http_get_request_len+0x84>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b01      	subs	r3, #1
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b0d      	cmp	r3, #13
 8003122:	d109      	bne.n	8003138 <mg_http_get_request_len+0x84>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3b02      	subs	r3, #2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d102      	bne.n	8003138 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3301      	adds	r3, #1
 8003136:	e007      	b.n	8003148 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d3be      	bcc.n	80030c4 <mg_http_get_request_len+0x10>
  }
  return 0;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f7fd f8b8 	bl	80002d0 <strlen>
 8003160:	61b8      	str	r0, [r7, #24]
 8003162:	231e      	movs	r3, #30
 8003164:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	e01f      	b.n	80031ac <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3302      	adds	r3, #2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	3328      	adds	r3, #40	; 0x28
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	429a      	cmp	r2, r3
 800318c:	d10b      	bne.n	80031a6 <mg_http_get_header+0x56>
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f004 f85a 	bl	8007250 <mg_ncasecmp>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <mg_http_get_header+0x56>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	e010      	b.n	80031c8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3301      	adds	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d208      	bcs.n	80031c6 <mg_http_get_header+0x76>
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3302      	adds	r3, #2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1d2      	bne.n	800316c <mg_http_get_header+0x1c>
  }
  return NULL;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <clen>:

// Get character length. Used to parse method, URI, headers
static size_t clen(const char *s) {
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint8_t c = *(uint8_t *) s;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	73fb      	strb	r3, [r7, #15]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d904      	bls.n	80031ee <clen+0x1e>
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b7d      	cmp	r3, #125	; 0x7d
 80031e8:	d801      	bhi.n	80031ee <clen+0x1e>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e015      	b.n	800321a <clen+0x4a>
  if ((c & 0xe0) == 0xc0) return 2;  // 2-byte UTF8
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80031f4:	2bc0      	cmp	r3, #192	; 0xc0
 80031f6:	d101      	bne.n	80031fc <clen+0x2c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e00e      	b.n	800321a <clen+0x4a>
  if ((c & 0xf0) == 0xe0) return 3;  // 3-byte UTF8
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003202:	2be0      	cmp	r3, #224	; 0xe0
 8003204:	d101      	bne.n	800320a <clen+0x3a>
 8003206:	2303      	movs	r3, #3
 8003208:	e007      	b.n	800321a <clen+0x4a>
  if ((c & 0xf8) == 0xf0) return 4;  // 4-byte UTF8
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003210:	2bf0      	cmp	r3, #240	; 0xf0
 8003212:	d101      	bne.n	8003218 <clen+0x48>
 8003214:	2304      	movs	r3, #4
 8003216:	e000      	b.n	800321a <clen+0x4a>
  return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
  v->ptr = s;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8003238:	e007      	b.n	800324a <skiptorn+0x24>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3301      	adds	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	d207      	bcs.n	8003262 <skiptorn+0x3c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b0a      	cmp	r3, #10
 8003258:	d003      	beq.n	8003262 <skiptorn+0x3c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b0d      	cmp	r3, #13
 8003260:	d1eb      	bne.n	800323a <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d208      	bcs.n	800327c <skiptorn+0x56>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b0d      	cmp	r3, #13
 8003270:	d106      	bne.n	8003280 <skiptorn+0x5a>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b0a      	cmp	r3, #10
 800327a:	d001      	beq.n	8003280 <skiptorn+0x5a>
 800327c:	2300      	movs	r3, #0
 800327e:	e017      	b.n	80032b0 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	d206      	bcs.n	8003296 <skiptorn+0x70>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b0d      	cmp	r3, #13
 800328e:	d102      	bne.n	8003296 <skiptorn+0x70>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	429a      	cmp	r2, r3
 800329c:	d205      	bcs.n	80032aa <skiptorn+0x84>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	60fa      	str	r2, [r7, #12]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b0a      	cmp	r3, #10
 80032a8:	d001      	beq.n	80032ae <skiptorn+0x88>
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <skiptorn+0x8a>
  return s;
 80032ae:	68fb      	ldr	r3, [r7, #12]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
 80032ce:	e083      	b.n	80033d8 <mg_http_parse_headers+0x11c>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d301      	bcc.n	80032ec <mg_http_parse_headers+0x30>
 80032e8:	2300      	movs	r3, #0
 80032ea:	e07b      	b.n	80033e4 <mg_http_parse_headers+0x128>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b0a      	cmp	r3, #10
 80032f2:	d076      	beq.n	80033e2 <mg_http_parse_headers+0x126>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b0d      	cmp	r3, #13
 80032fa:	d104      	bne.n	8003306 <mg_http_parse_headers+0x4a>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3301      	adds	r3, #1
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b0a      	cmp	r3, #10
 8003304:	d06d      	beq.n	80033e2 <mg_http_parse_headers+0x126>
    k.ptr = s;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s)) > 0) s += n, k.len += n;
 800330a:	e007      	b.n	800331c <mg_http_parse_headers+0x60>
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	4413      	add	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	4413      	add	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d20a      	bcs.n	800333a <mg_http_parse_headers+0x7e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b3a      	cmp	r3, #58	; 0x3a
 800332a:	d006      	beq.n	800333a <mg_http_parse_headers+0x7e>
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff4f 	bl	80031d0 <clen>
 8003332:	6238      	str	r0, [r7, #32]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e8      	bne.n	800330c <mg_http_parse_headers+0x50>
    if (k.len == 0) return false;               // Empty name
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <mg_http_parse_headers+0x88>
 8003340:	2300      	movs	r3, #0
 8003342:	e04f      	b.n	80033e4 <mg_http_parse_headers+0x128>
    if (s >= end || *s++ != ':') return false;  // Invalid, not followed by :
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	429a      	cmp	r2, r3
 800334a:	d205      	bcs.n	8003358 <mg_http_parse_headers+0x9c>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	60fa      	str	r2, [r7, #12]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b3a      	cmp	r3, #58	; 0x3a
 8003356:	d004      	beq.n	8003362 <mg_http_parse_headers+0xa6>
 8003358:	2300      	movs	r3, #0
 800335a:	e043      	b.n	80033e4 <mg_http_parse_headers+0x128>
    while (s < end && s[0] == ' ') s++;         // Skip spaces
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3301      	adds	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	d203      	bcs.n	8003372 <mg_http_parse_headers+0xb6>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b20      	cmp	r3, #32
 8003370:	d0f4      	beq.n	800335c <mg_http_parse_headers+0xa0>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8003372:	f107 0310 	add.w	r3, r7, #16
 8003376:	461a      	mov	r2, r3
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff ff53 	bl	8003226 <skiptorn>
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d104      	bne.n	8003392 <mg_http_parse_headers+0xd6>
 8003388:	2300      	movs	r3, #0
 800338a:	e02b      	b.n	80033e4 <mg_http_parse_headers+0x128>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3b01      	subs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <mg_http_parse_headers+0xea>
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3b01      	subs	r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d0f2      	beq.n	800338c <mg_http_parse_headers+0xd0>
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	461a      	mov	r2, r3
 80033b0:	f107 0318 	add.w	r3, r7, #24
 80033b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	3308      	adds	r3, #8
 80033c6:	f107 0210 	add.w	r2, r7, #16
 80033ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ce:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	3301      	adds	r3, #1
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	f4ff af77 	bcc.w	80032d0 <mg_http_parse_headers+0x14>
  }
  return true;
 80033e2:	2301      	movs	r3, #1
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff fe5a 	bl	80030b4 <mg_http_get_request_len>
 8003400:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <mg_http_parse+0x24>
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	e000      	b.n	8003412 <mg_http_parse+0x26>
 8003410:	2300      	movs	r3, #0
 8003412:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8003414:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003418:	2100      	movs	r1, #0
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f00e faa5 	bl	801196a <memset>
  if (req_len <= 0) return req_len;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	dc01      	bgt.n	800342a <mg_http_parse+0x3e>
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	e120      	b.n	800366c <mg_http_parse+0x280>

  hm->message.ptr = hm->head.ptr = s;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  hm->method.ptr = s;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s)) > 0) s += n, hm->method.len += n;
 8003472:	e009      	b.n	8003488 <mg_http_parse+0x9c>
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	441a      	add	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	429a      	cmp	r2, r3
 800348e:	d20a      	bcs.n	80034a6 <mg_http_parse+0xba>
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff fe9d 	bl	80031d0 <clen>
 8003496:	61f8      	str	r0, [r7, #28]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ea      	bne.n	8003474 <mg_http_parse+0x88>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800349e:	e002      	b.n	80034a6 <mg_http_parse+0xba>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d203      	bcs.n	80034b6 <mg_http_parse+0xca>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d0f4      	beq.n	80034a0 <mg_http_parse+0xb4>
  hm->uri.ptr = s;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s)) > 0) s += n, hm->uri.len += n;
 80034bc:	e009      	b.n	80034d2 <mg_http_parse+0xe6>
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d20a      	bcs.n	80034f0 <mg_http_parse+0x104>
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fe78 	bl	80031d0 <clen>
 80034e0:	61f8      	str	r0, [r7, #28]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ea      	bne.n	80034be <mg_http_parse+0xd2>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80034e8:	e002      	b.n	80034f0 <mg_http_parse+0x104>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d203      	bcs.n	8003500 <mg_http_parse+0x114>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d0f4      	beq.n	80034ea <mg_http_parse+0xfe>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3318      	adds	r3, #24
 8003504:	461a      	mov	r2, r3
 8003506:	6a39      	ldr	r1, [r7, #32]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff fe8c 	bl	8003226 <skiptorn>
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <mg_http_parse+0x12e>
 8003516:	2300      	movs	r3, #0
 8003518:	e0a8      	b.n	800366c <mg_http_parse+0x280>

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <mg_http_parse+0x13e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <mg_http_parse+0x144>
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	e09d      	b.n	800366c <mg_http_parse+0x280>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6898      	ldr	r0, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	213f      	movs	r1, #63	; 0x3f
 800353c:	f7fc fe78 	bl	8000230 <memchr>
 8003540:	61b8      	str	r0, [r7, #24]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d015      	beq.n	8003574 <mg_http_parse+0x188>
    hm->query.ptr = qs + 1;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	441a      	add	r2, r3
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3301      	adds	r3, #1
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	461a      	mov	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	461a      	mov	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f103 0220 	add.w	r2, r3, #32
 800357a:	231e      	movs	r3, #30
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7ff fe9c 	bl	80032bc <mg_http_parse_headers>
 8003584:	4603      	mov	r3, r0
 8003586:	f083 0301 	eor.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <mg_http_parse+0x1aa>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	e06a      	b.n	800366c <mg_http_parse+0x280>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8003596:	4937      	ldr	r1, [pc, #220]	; (8003674 <mg_http_parse+0x288>)
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fdd9 	bl	8003150 <mg_http_get_header>
 800359e:	6178      	str	r0, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d018      	beq.n	80035d8 <mg_http_parse+0x1ec>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f503 7201 	add.w	r2, r3, #516	; 0x204
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035b2:	f7ff fc31 	bl	8002e18 <mg_to_size_t>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f083 0301 	eor.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <mg_http_parse+0x1dc>
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	e051      	b.n	800366c <mg_http_parse+0x280>
    hm->message.len = (size_t) req_len + hm->body.len;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2205      	movs	r2, #5
 80035de:	4926      	ldr	r1, [pc, #152]	; (8003678 <mg_http_parse+0x28c>)
 80035e0:	4618      	mov	r0, r3
 80035e2:	f003 fe35 	bl	8007250 <mg_ncasecmp>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	613b      	str	r3, [r7, #16]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d11a      	bne.n	8003636 <mg_http_parse+0x24a>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d117      	bne.n	8003636 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	491c      	ldr	r1, [pc, #112]	; (800367c <mg_http_parse+0x290>)
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fe72 	bl	80072f4 <mg_vcasecmp>
 8003610:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00f      	beq.n	8003636 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4919      	ldr	r1, [pc, #100]	; (8003680 <mg_http_parse+0x294>)
 800361a:	4618      	mov	r0, r3
 800361c:	f003 fe6a 	bl	80072f4 <mg_vcasecmp>
 8003620:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <mg_http_parse+0x24a>
    hm->body.len = 0;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d113      	bne.n	800366a <mg_http_parse+0x27e>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <mg_http_parse+0x27e>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3308      	adds	r3, #8
 800364c:	490d      	ldr	r1, [pc, #52]	; (8003684 <mg_http_parse+0x298>)
 800364e:	4618      	mov	r0, r3
 8003650:	f003 fe50 	bl	80072f4 <mg_vcasecmp>
 8003654:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <mg_http_parse+0x27e>
    hm->body.len = 0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800366c:	4618      	mov	r0, r3
 800366e:	3728      	adds	r7, #40	; 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	08012958 	.word	0x08012958
 8003678:	08012968 	.word	0x08012968
 800367c:	08012970 	.word	0x08012970
 8003680:	08012974 	.word	0x08012974
 8003684:	0801297c 	.word	0x0801297c

08003688 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b64      	subs	r3, #100	; 0x64
 8003694:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003698:	4293      	cmp	r3, r2
 800369a:	f200 8469 	bhi.w	8003f70 <mg_http_status_code_str+0x8e8>
 800369e:	a101      	add	r1, pc, #4	; (adr r1, 80036a4 <mg_http_status_code_str+0x1c>)
 80036a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036a4:	08003e75 	.word	0x08003e75
 80036a8:	08003e79 	.word	0x08003e79
 80036ac:	08003e7d 	.word	0x08003e7d
 80036b0:	08003f71 	.word	0x08003f71
 80036b4:	08003f71 	.word	0x08003f71
 80036b8:	08003f71 	.word	0x08003f71
 80036bc:	08003f71 	.word	0x08003f71
 80036c0:	08003f71 	.word	0x08003f71
 80036c4:	08003f71 	.word	0x08003f71
 80036c8:	08003f71 	.word	0x08003f71
 80036cc:	08003f71 	.word	0x08003f71
 80036d0:	08003f71 	.word	0x08003f71
 80036d4:	08003f71 	.word	0x08003f71
 80036d8:	08003f71 	.word	0x08003f71
 80036dc:	08003f71 	.word	0x08003f71
 80036e0:	08003f71 	.word	0x08003f71
 80036e4:	08003f71 	.word	0x08003f71
 80036e8:	08003f71 	.word	0x08003f71
 80036ec:	08003f71 	.word	0x08003f71
 80036f0:	08003f71 	.word	0x08003f71
 80036f4:	08003f71 	.word	0x08003f71
 80036f8:	08003f71 	.word	0x08003f71
 80036fc:	08003f71 	.word	0x08003f71
 8003700:	08003f71 	.word	0x08003f71
 8003704:	08003f71 	.word	0x08003f71
 8003708:	08003f71 	.word	0x08003f71
 800370c:	08003f71 	.word	0x08003f71
 8003710:	08003f71 	.word	0x08003f71
 8003714:	08003f71 	.word	0x08003f71
 8003718:	08003f71 	.word	0x08003f71
 800371c:	08003f71 	.word	0x08003f71
 8003720:	08003f71 	.word	0x08003f71
 8003724:	08003f71 	.word	0x08003f71
 8003728:	08003f71 	.word	0x08003f71
 800372c:	08003f71 	.word	0x08003f71
 8003730:	08003f71 	.word	0x08003f71
 8003734:	08003f71 	.word	0x08003f71
 8003738:	08003f71 	.word	0x08003f71
 800373c:	08003f71 	.word	0x08003f71
 8003740:	08003f71 	.word	0x08003f71
 8003744:	08003f71 	.word	0x08003f71
 8003748:	08003f71 	.word	0x08003f71
 800374c:	08003f71 	.word	0x08003f71
 8003750:	08003f71 	.word	0x08003f71
 8003754:	08003f71 	.word	0x08003f71
 8003758:	08003f71 	.word	0x08003f71
 800375c:	08003f71 	.word	0x08003f71
 8003760:	08003f71 	.word	0x08003f71
 8003764:	08003f71 	.word	0x08003f71
 8003768:	08003f71 	.word	0x08003f71
 800376c:	08003f71 	.word	0x08003f71
 8003770:	08003f71 	.word	0x08003f71
 8003774:	08003f71 	.word	0x08003f71
 8003778:	08003f71 	.word	0x08003f71
 800377c:	08003f71 	.word	0x08003f71
 8003780:	08003f71 	.word	0x08003f71
 8003784:	08003f71 	.word	0x08003f71
 8003788:	08003f71 	.word	0x08003f71
 800378c:	08003f71 	.word	0x08003f71
 8003790:	08003f71 	.word	0x08003f71
 8003794:	08003f71 	.word	0x08003f71
 8003798:	08003f71 	.word	0x08003f71
 800379c:	08003f71 	.word	0x08003f71
 80037a0:	08003f71 	.word	0x08003f71
 80037a4:	08003f71 	.word	0x08003f71
 80037a8:	08003f71 	.word	0x08003f71
 80037ac:	08003f71 	.word	0x08003f71
 80037b0:	08003f71 	.word	0x08003f71
 80037b4:	08003f71 	.word	0x08003f71
 80037b8:	08003f71 	.word	0x08003f71
 80037bc:	08003f71 	.word	0x08003f71
 80037c0:	08003f71 	.word	0x08003f71
 80037c4:	08003f71 	.word	0x08003f71
 80037c8:	08003f71 	.word	0x08003f71
 80037cc:	08003f71 	.word	0x08003f71
 80037d0:	08003f71 	.word	0x08003f71
 80037d4:	08003f71 	.word	0x08003f71
 80037d8:	08003f71 	.word	0x08003f71
 80037dc:	08003f71 	.word	0x08003f71
 80037e0:	08003f71 	.word	0x08003f71
 80037e4:	08003f71 	.word	0x08003f71
 80037e8:	08003f71 	.word	0x08003f71
 80037ec:	08003f71 	.word	0x08003f71
 80037f0:	08003f71 	.word	0x08003f71
 80037f4:	08003f71 	.word	0x08003f71
 80037f8:	08003f71 	.word	0x08003f71
 80037fc:	08003f71 	.word	0x08003f71
 8003800:	08003f71 	.word	0x08003f71
 8003804:	08003f71 	.word	0x08003f71
 8003808:	08003f71 	.word	0x08003f71
 800380c:	08003f71 	.word	0x08003f71
 8003810:	08003f71 	.word	0x08003f71
 8003814:	08003f71 	.word	0x08003f71
 8003818:	08003f71 	.word	0x08003f71
 800381c:	08003f71 	.word	0x08003f71
 8003820:	08003f71 	.word	0x08003f71
 8003824:	08003f71 	.word	0x08003f71
 8003828:	08003f71 	.word	0x08003f71
 800382c:	08003f71 	.word	0x08003f71
 8003830:	08003f71 	.word	0x08003f71
 8003834:	08003e81 	.word	0x08003e81
 8003838:	08003e85 	.word	0x08003e85
 800383c:	08003e89 	.word	0x08003e89
 8003840:	08003e8d 	.word	0x08003e8d
 8003844:	08003e91 	.word	0x08003e91
 8003848:	08003e95 	.word	0x08003e95
 800384c:	08003e99 	.word	0x08003e99
 8003850:	08003e9d 	.word	0x08003e9d
 8003854:	08003ea1 	.word	0x08003ea1
 8003858:	08003f71 	.word	0x08003f71
 800385c:	08003f71 	.word	0x08003f71
 8003860:	08003f71 	.word	0x08003f71
 8003864:	08003f71 	.word	0x08003f71
 8003868:	08003f71 	.word	0x08003f71
 800386c:	08003f71 	.word	0x08003f71
 8003870:	08003f71 	.word	0x08003f71
 8003874:	08003f71 	.word	0x08003f71
 8003878:	08003f71 	.word	0x08003f71
 800387c:	08003f71 	.word	0x08003f71
 8003880:	08003f71 	.word	0x08003f71
 8003884:	08003f71 	.word	0x08003f71
 8003888:	08003f71 	.word	0x08003f71
 800388c:	08003f71 	.word	0x08003f71
 8003890:	08003f71 	.word	0x08003f71
 8003894:	08003f71 	.word	0x08003f71
 8003898:	08003f71 	.word	0x08003f71
 800389c:	08003ea5 	.word	0x08003ea5
 80038a0:	08003f71 	.word	0x08003f71
 80038a4:	08003f71 	.word	0x08003f71
 80038a8:	08003f71 	.word	0x08003f71
 80038ac:	08003f71 	.word	0x08003f71
 80038b0:	08003f71 	.word	0x08003f71
 80038b4:	08003f71 	.word	0x08003f71
 80038b8:	08003f71 	.word	0x08003f71
 80038bc:	08003f71 	.word	0x08003f71
 80038c0:	08003f71 	.word	0x08003f71
 80038c4:	08003f71 	.word	0x08003f71
 80038c8:	08003f71 	.word	0x08003f71
 80038cc:	08003f71 	.word	0x08003f71
 80038d0:	08003f71 	.word	0x08003f71
 80038d4:	08003f71 	.word	0x08003f71
 80038d8:	08003f71 	.word	0x08003f71
 80038dc:	08003f71 	.word	0x08003f71
 80038e0:	08003f71 	.word	0x08003f71
 80038e4:	08003f71 	.word	0x08003f71
 80038e8:	08003f71 	.word	0x08003f71
 80038ec:	08003f71 	.word	0x08003f71
 80038f0:	08003f71 	.word	0x08003f71
 80038f4:	08003f71 	.word	0x08003f71
 80038f8:	08003f71 	.word	0x08003f71
 80038fc:	08003f71 	.word	0x08003f71
 8003900:	08003f71 	.word	0x08003f71
 8003904:	08003f71 	.word	0x08003f71
 8003908:	08003f71 	.word	0x08003f71
 800390c:	08003f71 	.word	0x08003f71
 8003910:	08003f71 	.word	0x08003f71
 8003914:	08003f71 	.word	0x08003f71
 8003918:	08003f71 	.word	0x08003f71
 800391c:	08003f71 	.word	0x08003f71
 8003920:	08003f71 	.word	0x08003f71
 8003924:	08003f71 	.word	0x08003f71
 8003928:	08003f71 	.word	0x08003f71
 800392c:	08003f71 	.word	0x08003f71
 8003930:	08003f71 	.word	0x08003f71
 8003934:	08003f71 	.word	0x08003f71
 8003938:	08003f71 	.word	0x08003f71
 800393c:	08003f71 	.word	0x08003f71
 8003940:	08003f71 	.word	0x08003f71
 8003944:	08003f71 	.word	0x08003f71
 8003948:	08003f71 	.word	0x08003f71
 800394c:	08003f71 	.word	0x08003f71
 8003950:	08003f71 	.word	0x08003f71
 8003954:	08003f71 	.word	0x08003f71
 8003958:	08003f71 	.word	0x08003f71
 800395c:	08003f71 	.word	0x08003f71
 8003960:	08003f71 	.word	0x08003f71
 8003964:	08003f71 	.word	0x08003f71
 8003968:	08003f71 	.word	0x08003f71
 800396c:	08003f71 	.word	0x08003f71
 8003970:	08003f71 	.word	0x08003f71
 8003974:	08003f71 	.word	0x08003f71
 8003978:	08003f71 	.word	0x08003f71
 800397c:	08003f71 	.word	0x08003f71
 8003980:	08003f71 	.word	0x08003f71
 8003984:	08003f71 	.word	0x08003f71
 8003988:	08003f71 	.word	0x08003f71
 800398c:	08003f71 	.word	0x08003f71
 8003990:	08003f71 	.word	0x08003f71
 8003994:	08003f71 	.word	0x08003f71
 8003998:	08003f71 	.word	0x08003f71
 800399c:	08003f71 	.word	0x08003f71
 80039a0:	08003f71 	.word	0x08003f71
 80039a4:	08003f71 	.word	0x08003f71
 80039a8:	08003f71 	.word	0x08003f71
 80039ac:	08003f71 	.word	0x08003f71
 80039b0:	08003f71 	.word	0x08003f71
 80039b4:	08003f71 	.word	0x08003f71
 80039b8:	08003f71 	.word	0x08003f71
 80039bc:	08003f71 	.word	0x08003f71
 80039c0:	08003f71 	.word	0x08003f71
 80039c4:	08003ea9 	.word	0x08003ea9
 80039c8:	08003ead 	.word	0x08003ead
 80039cc:	08003eb1 	.word	0x08003eb1
 80039d0:	08003eb5 	.word	0x08003eb5
 80039d4:	08003eb9 	.word	0x08003eb9
 80039d8:	08003ebd 	.word	0x08003ebd
 80039dc:	08003f71 	.word	0x08003f71
 80039e0:	08003ec1 	.word	0x08003ec1
 80039e4:	08003ec5 	.word	0x08003ec5
 80039e8:	08003f71 	.word	0x08003f71
 80039ec:	08003f71 	.word	0x08003f71
 80039f0:	08003f71 	.word	0x08003f71
 80039f4:	08003f71 	.word	0x08003f71
 80039f8:	08003f71 	.word	0x08003f71
 80039fc:	08003f71 	.word	0x08003f71
 8003a00:	08003f71 	.word	0x08003f71
 8003a04:	08003f71 	.word	0x08003f71
 8003a08:	08003f71 	.word	0x08003f71
 8003a0c:	08003f71 	.word	0x08003f71
 8003a10:	08003f71 	.word	0x08003f71
 8003a14:	08003f71 	.word	0x08003f71
 8003a18:	08003f71 	.word	0x08003f71
 8003a1c:	08003f71 	.word	0x08003f71
 8003a20:	08003f71 	.word	0x08003f71
 8003a24:	08003f71 	.word	0x08003f71
 8003a28:	08003f71 	.word	0x08003f71
 8003a2c:	08003f71 	.word	0x08003f71
 8003a30:	08003f71 	.word	0x08003f71
 8003a34:	08003f71 	.word	0x08003f71
 8003a38:	08003f71 	.word	0x08003f71
 8003a3c:	08003f71 	.word	0x08003f71
 8003a40:	08003f71 	.word	0x08003f71
 8003a44:	08003f71 	.word	0x08003f71
 8003a48:	08003f71 	.word	0x08003f71
 8003a4c:	08003f71 	.word	0x08003f71
 8003a50:	08003f71 	.word	0x08003f71
 8003a54:	08003f71 	.word	0x08003f71
 8003a58:	08003f71 	.word	0x08003f71
 8003a5c:	08003f71 	.word	0x08003f71
 8003a60:	08003f71 	.word	0x08003f71
 8003a64:	08003f71 	.word	0x08003f71
 8003a68:	08003f71 	.word	0x08003f71
 8003a6c:	08003f71 	.word	0x08003f71
 8003a70:	08003f71 	.word	0x08003f71
 8003a74:	08003f71 	.word	0x08003f71
 8003a78:	08003f71 	.word	0x08003f71
 8003a7c:	08003f71 	.word	0x08003f71
 8003a80:	08003f71 	.word	0x08003f71
 8003a84:	08003f71 	.word	0x08003f71
 8003a88:	08003f71 	.word	0x08003f71
 8003a8c:	08003f71 	.word	0x08003f71
 8003a90:	08003f71 	.word	0x08003f71
 8003a94:	08003f71 	.word	0x08003f71
 8003a98:	08003f71 	.word	0x08003f71
 8003a9c:	08003f71 	.word	0x08003f71
 8003aa0:	08003f71 	.word	0x08003f71
 8003aa4:	08003f71 	.word	0x08003f71
 8003aa8:	08003f71 	.word	0x08003f71
 8003aac:	08003f71 	.word	0x08003f71
 8003ab0:	08003f71 	.word	0x08003f71
 8003ab4:	08003f71 	.word	0x08003f71
 8003ab8:	08003f71 	.word	0x08003f71
 8003abc:	08003f71 	.word	0x08003f71
 8003ac0:	08003f71 	.word	0x08003f71
 8003ac4:	08003f71 	.word	0x08003f71
 8003ac8:	08003f71 	.word	0x08003f71
 8003acc:	08003f71 	.word	0x08003f71
 8003ad0:	08003f71 	.word	0x08003f71
 8003ad4:	08003f71 	.word	0x08003f71
 8003ad8:	08003f71 	.word	0x08003f71
 8003adc:	08003f71 	.word	0x08003f71
 8003ae0:	08003f71 	.word	0x08003f71
 8003ae4:	08003f71 	.word	0x08003f71
 8003ae8:	08003f71 	.word	0x08003f71
 8003aec:	08003f71 	.word	0x08003f71
 8003af0:	08003f71 	.word	0x08003f71
 8003af4:	08003f71 	.word	0x08003f71
 8003af8:	08003f71 	.word	0x08003f71
 8003afc:	08003f71 	.word	0x08003f71
 8003b00:	08003f71 	.word	0x08003f71
 8003b04:	08003f71 	.word	0x08003f71
 8003b08:	08003f71 	.word	0x08003f71
 8003b0c:	08003f71 	.word	0x08003f71
 8003b10:	08003f71 	.word	0x08003f71
 8003b14:	08003f71 	.word	0x08003f71
 8003b18:	08003f71 	.word	0x08003f71
 8003b1c:	08003f71 	.word	0x08003f71
 8003b20:	08003f71 	.word	0x08003f71
 8003b24:	08003f71 	.word	0x08003f71
 8003b28:	08003f71 	.word	0x08003f71
 8003b2c:	08003f71 	.word	0x08003f71
 8003b30:	08003f71 	.word	0x08003f71
 8003b34:	08003f71 	.word	0x08003f71
 8003b38:	08003f71 	.word	0x08003f71
 8003b3c:	08003f71 	.word	0x08003f71
 8003b40:	08003f71 	.word	0x08003f71
 8003b44:	08003f71 	.word	0x08003f71
 8003b48:	08003f71 	.word	0x08003f71
 8003b4c:	08003f71 	.word	0x08003f71
 8003b50:	08003f71 	.word	0x08003f71
 8003b54:	08003ec9 	.word	0x08003ec9
 8003b58:	08003ecd 	.word	0x08003ecd
 8003b5c:	08003ed1 	.word	0x08003ed1
 8003b60:	08003ed5 	.word	0x08003ed5
 8003b64:	08003ed9 	.word	0x08003ed9
 8003b68:	08003edd 	.word	0x08003edd
 8003b6c:	08003ee1 	.word	0x08003ee1
 8003b70:	08003ee5 	.word	0x08003ee5
 8003b74:	08003ee9 	.word	0x08003ee9
 8003b78:	08003eed 	.word	0x08003eed
 8003b7c:	08003ef1 	.word	0x08003ef1
 8003b80:	08003ef5 	.word	0x08003ef5
 8003b84:	08003ef9 	.word	0x08003ef9
 8003b88:	08003efd 	.word	0x08003efd
 8003b8c:	08003f01 	.word	0x08003f01
 8003b90:	08003f05 	.word	0x08003f05
 8003b94:	08003f09 	.word	0x08003f09
 8003b98:	08003f0d 	.word	0x08003f0d
 8003b9c:	08003f11 	.word	0x08003f11
 8003ba0:	08003f71 	.word	0x08003f71
 8003ba4:	08003f71 	.word	0x08003f71
 8003ba8:	08003f15 	.word	0x08003f15
 8003bac:	08003f19 	.word	0x08003f19
 8003bb0:	08003f1d 	.word	0x08003f1d
 8003bb4:	08003f21 	.word	0x08003f21
 8003bb8:	08003f71 	.word	0x08003f71
 8003bbc:	08003f25 	.word	0x08003f25
 8003bc0:	08003f71 	.word	0x08003f71
 8003bc4:	08003f29 	.word	0x08003f29
 8003bc8:	08003f2d 	.word	0x08003f2d
 8003bcc:	08003f71 	.word	0x08003f71
 8003bd0:	08003f31 	.word	0x08003f31
 8003bd4:	08003f71 	.word	0x08003f71
 8003bd8:	08003f71 	.word	0x08003f71
 8003bdc:	08003f71 	.word	0x08003f71
 8003be0:	08003f71 	.word	0x08003f71
 8003be4:	08003f71 	.word	0x08003f71
 8003be8:	08003f71 	.word	0x08003f71
 8003bec:	08003f71 	.word	0x08003f71
 8003bf0:	08003f71 	.word	0x08003f71
 8003bf4:	08003f71 	.word	0x08003f71
 8003bf8:	08003f71 	.word	0x08003f71
 8003bfc:	08003f71 	.word	0x08003f71
 8003c00:	08003f71 	.word	0x08003f71
 8003c04:	08003f35 	.word	0x08003f35
 8003c08:	08003f71 	.word	0x08003f71
 8003c0c:	08003f71 	.word	0x08003f71
 8003c10:	08003f71 	.word	0x08003f71
 8003c14:	08003f71 	.word	0x08003f71
 8003c18:	08003f71 	.word	0x08003f71
 8003c1c:	08003f71 	.word	0x08003f71
 8003c20:	08003f39 	.word	0x08003f39
 8003c24:	08003f71 	.word	0x08003f71
 8003c28:	08003f71 	.word	0x08003f71
 8003c2c:	08003f71 	.word	0x08003f71
 8003c30:	08003f71 	.word	0x08003f71
 8003c34:	08003f71 	.word	0x08003f71
 8003c38:	08003f71 	.word	0x08003f71
 8003c3c:	08003f71 	.word	0x08003f71
 8003c40:	08003f71 	.word	0x08003f71
 8003c44:	08003f71 	.word	0x08003f71
 8003c48:	08003f71 	.word	0x08003f71
 8003c4c:	08003f71 	.word	0x08003f71
 8003c50:	08003f71 	.word	0x08003f71
 8003c54:	08003f71 	.word	0x08003f71
 8003c58:	08003f71 	.word	0x08003f71
 8003c5c:	08003f71 	.word	0x08003f71
 8003c60:	08003f71 	.word	0x08003f71
 8003c64:	08003f71 	.word	0x08003f71
 8003c68:	08003f71 	.word	0x08003f71
 8003c6c:	08003f71 	.word	0x08003f71
 8003c70:	08003f71 	.word	0x08003f71
 8003c74:	08003f71 	.word	0x08003f71
 8003c78:	08003f71 	.word	0x08003f71
 8003c7c:	08003f71 	.word	0x08003f71
 8003c80:	08003f71 	.word	0x08003f71
 8003c84:	08003f71 	.word	0x08003f71
 8003c88:	08003f71 	.word	0x08003f71
 8003c8c:	08003f71 	.word	0x08003f71
 8003c90:	08003f71 	.word	0x08003f71
 8003c94:	08003f71 	.word	0x08003f71
 8003c98:	08003f71 	.word	0x08003f71
 8003c9c:	08003f71 	.word	0x08003f71
 8003ca0:	08003f71 	.word	0x08003f71
 8003ca4:	08003f71 	.word	0x08003f71
 8003ca8:	08003f71 	.word	0x08003f71
 8003cac:	08003f71 	.word	0x08003f71
 8003cb0:	08003f71 	.word	0x08003f71
 8003cb4:	08003f71 	.word	0x08003f71
 8003cb8:	08003f71 	.word	0x08003f71
 8003cbc:	08003f71 	.word	0x08003f71
 8003cc0:	08003f71 	.word	0x08003f71
 8003cc4:	08003f71 	.word	0x08003f71
 8003cc8:	08003f71 	.word	0x08003f71
 8003ccc:	08003f71 	.word	0x08003f71
 8003cd0:	08003f71 	.word	0x08003f71
 8003cd4:	08003f71 	.word	0x08003f71
 8003cd8:	08003f71 	.word	0x08003f71
 8003cdc:	08003f71 	.word	0x08003f71
 8003ce0:	08003f3d 	.word	0x08003f3d
 8003ce4:	08003f41 	.word	0x08003f41
 8003ce8:	08003f45 	.word	0x08003f45
 8003cec:	08003f49 	.word	0x08003f49
 8003cf0:	08003f4d 	.word	0x08003f4d
 8003cf4:	08003f51 	.word	0x08003f51
 8003cf8:	08003f55 	.word	0x08003f55
 8003cfc:	08003f59 	.word	0x08003f59
 8003d00:	08003f5d 	.word	0x08003f5d
 8003d04:	08003f61 	.word	0x08003f61
 8003d08:	08003f71 	.word	0x08003f71
 8003d0c:	08003f65 	.word	0x08003f65
 8003d10:	08003f69 	.word	0x08003f69
 8003d14:	08003f71 	.word	0x08003f71
 8003d18:	08003f71 	.word	0x08003f71
 8003d1c:	08003f71 	.word	0x08003f71
 8003d20:	08003f71 	.word	0x08003f71
 8003d24:	08003f71 	.word	0x08003f71
 8003d28:	08003f71 	.word	0x08003f71
 8003d2c:	08003f71 	.word	0x08003f71
 8003d30:	08003f71 	.word	0x08003f71
 8003d34:	08003f71 	.word	0x08003f71
 8003d38:	08003f71 	.word	0x08003f71
 8003d3c:	08003f71 	.word	0x08003f71
 8003d40:	08003f71 	.word	0x08003f71
 8003d44:	08003f71 	.word	0x08003f71
 8003d48:	08003f71 	.word	0x08003f71
 8003d4c:	08003f71 	.word	0x08003f71
 8003d50:	08003f71 	.word	0x08003f71
 8003d54:	08003f71 	.word	0x08003f71
 8003d58:	08003f71 	.word	0x08003f71
 8003d5c:	08003f71 	.word	0x08003f71
 8003d60:	08003f71 	.word	0x08003f71
 8003d64:	08003f71 	.word	0x08003f71
 8003d68:	08003f71 	.word	0x08003f71
 8003d6c:	08003f71 	.word	0x08003f71
 8003d70:	08003f71 	.word	0x08003f71
 8003d74:	08003f71 	.word	0x08003f71
 8003d78:	08003f71 	.word	0x08003f71
 8003d7c:	08003f71 	.word	0x08003f71
 8003d80:	08003f71 	.word	0x08003f71
 8003d84:	08003f71 	.word	0x08003f71
 8003d88:	08003f71 	.word	0x08003f71
 8003d8c:	08003f71 	.word	0x08003f71
 8003d90:	08003f71 	.word	0x08003f71
 8003d94:	08003f71 	.word	0x08003f71
 8003d98:	08003f71 	.word	0x08003f71
 8003d9c:	08003f71 	.word	0x08003f71
 8003da0:	08003f71 	.word	0x08003f71
 8003da4:	08003f71 	.word	0x08003f71
 8003da8:	08003f71 	.word	0x08003f71
 8003dac:	08003f71 	.word	0x08003f71
 8003db0:	08003f71 	.word	0x08003f71
 8003db4:	08003f71 	.word	0x08003f71
 8003db8:	08003f71 	.word	0x08003f71
 8003dbc:	08003f71 	.word	0x08003f71
 8003dc0:	08003f71 	.word	0x08003f71
 8003dc4:	08003f71 	.word	0x08003f71
 8003dc8:	08003f71 	.word	0x08003f71
 8003dcc:	08003f71 	.word	0x08003f71
 8003dd0:	08003f71 	.word	0x08003f71
 8003dd4:	08003f71 	.word	0x08003f71
 8003dd8:	08003f71 	.word	0x08003f71
 8003ddc:	08003f71 	.word	0x08003f71
 8003de0:	08003f71 	.word	0x08003f71
 8003de4:	08003f71 	.word	0x08003f71
 8003de8:	08003f71 	.word	0x08003f71
 8003dec:	08003f71 	.word	0x08003f71
 8003df0:	08003f71 	.word	0x08003f71
 8003df4:	08003f71 	.word	0x08003f71
 8003df8:	08003f71 	.word	0x08003f71
 8003dfc:	08003f71 	.word	0x08003f71
 8003e00:	08003f71 	.word	0x08003f71
 8003e04:	08003f71 	.word	0x08003f71
 8003e08:	08003f71 	.word	0x08003f71
 8003e0c:	08003f71 	.word	0x08003f71
 8003e10:	08003f71 	.word	0x08003f71
 8003e14:	08003f71 	.word	0x08003f71
 8003e18:	08003f71 	.word	0x08003f71
 8003e1c:	08003f71 	.word	0x08003f71
 8003e20:	08003f71 	.word	0x08003f71
 8003e24:	08003f71 	.word	0x08003f71
 8003e28:	08003f71 	.word	0x08003f71
 8003e2c:	08003f71 	.word	0x08003f71
 8003e30:	08003f71 	.word	0x08003f71
 8003e34:	08003f71 	.word	0x08003f71
 8003e38:	08003f71 	.word	0x08003f71
 8003e3c:	08003f71 	.word	0x08003f71
 8003e40:	08003f71 	.word	0x08003f71
 8003e44:	08003f71 	.word	0x08003f71
 8003e48:	08003f71 	.word	0x08003f71
 8003e4c:	08003f71 	.word	0x08003f71
 8003e50:	08003f71 	.word	0x08003f71
 8003e54:	08003f71 	.word	0x08003f71
 8003e58:	08003f71 	.word	0x08003f71
 8003e5c:	08003f71 	.word	0x08003f71
 8003e60:	08003f71 	.word	0x08003f71
 8003e64:	08003f71 	.word	0x08003f71
 8003e68:	08003f71 	.word	0x08003f71
 8003e6c:	08003f71 	.word	0x08003f71
 8003e70:	08003f6d 	.word	0x08003f6d
    case 100: return "Continue";
 8003e74:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <mg_http_status_code_str+0x8f8>)
 8003e76:	e07c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8003e78:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <mg_http_status_code_str+0x8fc>)
 8003e7a:	e07a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8003e7c:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <mg_http_status_code_str+0x900>)
 8003e7e:	e078      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8003e80:	4b42      	ldr	r3, [pc, #264]	; (8003f8c <mg_http_status_code_str+0x904>)
 8003e82:	e076      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8003e84:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <mg_http_status_code_str+0x908>)
 8003e86:	e074      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <mg_http_status_code_str+0x90c>)
 8003e8a:	e072      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8003e8c:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <mg_http_status_code_str+0x910>)
 8003e8e:	e070      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8003e90:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <mg_http_status_code_str+0x914>)
 8003e92:	e06e      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <mg_http_status_code_str+0x918>)
 8003e96:	e06c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8003e98:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <mg_http_status_code_str+0x91c>)
 8003e9a:	e06a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8003e9c:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <mg_http_status_code_str+0x920>)
 8003e9e:	e068      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8003ea0:	4b42      	ldr	r3, [pc, #264]	; (8003fac <mg_http_status_code_str+0x924>)
 8003ea2:	e066      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8003ea4:	4b42      	ldr	r3, [pc, #264]	; (8003fb0 <mg_http_status_code_str+0x928>)
 8003ea6:	e064      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8003ea8:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <mg_http_status_code_str+0x92c>)
 8003eaa:	e062      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <mg_http_status_code_str+0x930>)
 8003eae:	e060      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <mg_http_status_code_str+0x934>)
 8003eb2:	e05e      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <mg_http_status_code_str+0x938>)
 8003eb6:	e05c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <mg_http_status_code_str+0x93c>)
 8003eba:	e05a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8003ebc:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <mg_http_status_code_str+0x940>)
 8003ebe:	e058      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <mg_http_status_code_str+0x944>)
 8003ec2:	e056      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8003ec4:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <mg_http_status_code_str+0x948>)
 8003ec6:	e054      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <mg_http_status_code_str+0x94c>)
 8003eca:	e052      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8003ecc:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <mg_http_status_code_str+0x950>)
 8003ece:	e050      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <mg_http_status_code_str+0x954>)
 8003ed2:	e04e      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <mg_http_status_code_str+0x958>)
 8003ed6:	e04c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <mg_http_status_code_str+0x95c>)
 8003eda:	e04a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8003edc:	4b42      	ldr	r3, [pc, #264]	; (8003fe8 <mg_http_status_code_str+0x960>)
 8003ede:	e048      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8003ee0:	4b42      	ldr	r3, [pc, #264]	; (8003fec <mg_http_status_code_str+0x964>)
 8003ee2:	e046      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <mg_http_status_code_str+0x968>)
 8003ee6:	e044      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <mg_http_status_code_str+0x96c>)
 8003eea:	e042      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8003eec:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <mg_http_status_code_str+0x970>)
 8003eee:	e040      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <mg_http_status_code_str+0x974>)
 8003ef2:	e03e      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <mg_http_status_code_str+0x978>)
 8003ef6:	e03c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8003ef8:	4b42      	ldr	r3, [pc, #264]	; (8004004 <mg_http_status_code_str+0x97c>)
 8003efa:	e03a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <mg_http_status_code_str+0x980>)
 8003efe:	e038      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8003f00:	4b42      	ldr	r3, [pc, #264]	; (800400c <mg_http_status_code_str+0x984>)
 8003f02:	e036      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8003f04:	4b42      	ldr	r3, [pc, #264]	; (8004010 <mg_http_status_code_str+0x988>)
 8003f06:	e034      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <mg_http_status_code_str+0x98c>)
 8003f0a:	e032      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <mg_http_status_code_str+0x990>)
 8003f0e:	e030      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8003f10:	4b42      	ldr	r3, [pc, #264]	; (800401c <mg_http_status_code_str+0x994>)
 8003f12:	e02e      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8003f14:	4b42      	ldr	r3, [pc, #264]	; (8004020 <mg_http_status_code_str+0x998>)
 8003f16:	e02c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <mg_http_status_code_str+0x99c>)
 8003f1a:	e02a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8003f1c:	4b42      	ldr	r3, [pc, #264]	; (8004028 <mg_http_status_code_str+0x9a0>)
 8003f1e:	e028      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8003f20:	4b42      	ldr	r3, [pc, #264]	; (800402c <mg_http_status_code_str+0x9a4>)
 8003f22:	e026      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <mg_http_status_code_str+0x9a8>)
 8003f26:	e024      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <mg_http_status_code_str+0x9ac>)
 8003f2a:	e022      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8003f2c:	4b42      	ldr	r3, [pc, #264]	; (8004038 <mg_http_status_code_str+0x9b0>)
 8003f2e:	e020      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8003f30:	4b42      	ldr	r3, [pc, #264]	; (800403c <mg_http_status_code_str+0x9b4>)
 8003f32:	e01e      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8003f34:	4b42      	ldr	r3, [pc, #264]	; (8004040 <mg_http_status_code_str+0x9b8>)
 8003f36:	e01c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8003f38:	4b42      	ldr	r3, [pc, #264]	; (8004044 <mg_http_status_code_str+0x9bc>)
 8003f3a:	e01a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8003f3c:	4b42      	ldr	r3, [pc, #264]	; (8004048 <mg_http_status_code_str+0x9c0>)
 8003f3e:	e018      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <mg_http_status_code_str+0x9c4>)
 8003f42:	e016      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <mg_http_status_code_str+0x9c8>)
 8003f46:	e014      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8003f48:	4b42      	ldr	r3, [pc, #264]	; (8004054 <mg_http_status_code_str+0x9cc>)
 8003f4a:	e012      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8003f4c:	4b42      	ldr	r3, [pc, #264]	; (8004058 <mg_http_status_code_str+0x9d0>)
 8003f4e:	e010      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <mg_http_status_code_str+0x9d4>)
 8003f52:	e00e      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8003f54:	4b42      	ldr	r3, [pc, #264]	; (8004060 <mg_http_status_code_str+0x9d8>)
 8003f56:	e00c      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <mg_http_status_code_str+0x9dc>)
 8003f5a:	e00a      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <mg_http_status_code_str+0x9e0>)
 8003f5e:	e008      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <mg_http_status_code_str+0x9e4>)
 8003f62:	e006      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8003f64:	4b42      	ldr	r3, [pc, #264]	; (8004070 <mg_http_status_code_str+0x9e8>)
 8003f66:	e004      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <mg_http_status_code_str+0x9ec>)
 8003f6a:	e002      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <mg_http_status_code_str+0x9f0>)
 8003f6e:	e000      	b.n	8003f72 <mg_http_status_code_str+0x8ea>
    default: return "";
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <mg_http_status_code_str+0x9f4>)
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	0801299c 	.word	0x0801299c
 8003f84:	080129a8 	.word	0x080129a8
 8003f88:	080129bc 	.word	0x080129bc
 8003f8c:	080129c8 	.word	0x080129c8
 8003f90:	080129cc 	.word	0x080129cc
 8003f94:	080129d4 	.word	0x080129d4
 8003f98:	080129e0 	.word	0x080129e0
 8003f9c:	08012a00 	.word	0x08012a00
 8003fa0:	08012a0c 	.word	0x08012a0c
 8003fa4:	08012a1c 	.word	0x08012a1c
 8003fa8:	08012a2c 	.word	0x08012a2c
 8003fac:	08012a3c 	.word	0x08012a3c
 8003fb0:	08012a50 	.word	0x08012a50
 8003fb4:	08012a58 	.word	0x08012a58
 8003fb8:	08012a6c 	.word	0x08012a6c
 8003fbc:	08012a80 	.word	0x08012a80
 8003fc0:	08012a88 	.word	0x08012a88
 8003fc4:	08012a94 	.word	0x08012a94
 8003fc8:	08012aa4 	.word	0x08012aa4
 8003fcc:	08012ab0 	.word	0x08012ab0
 8003fd0:	08012ac4 	.word	0x08012ac4
 8003fd4:	08012ad8 	.word	0x08012ad8
 8003fd8:	08012ae4 	.word	0x08012ae4
 8003fdc:	08012af4 	.word	0x08012af4
 8003fe0:	08012b08 	.word	0x08012b08
 8003fe4:	08012b14 	.word	0x08012b14
 8003fe8:	08012b20 	.word	0x08012b20
 8003fec:	08012b34 	.word	0x08012b34
 8003ff0:	08012b44 	.word	0x08012b44
 8003ff4:	08012b64 	.word	0x08012b64
 8003ff8:	08012b74 	.word	0x08012b74
 8003ffc:	08012b80 	.word	0x08012b80
 8004000:	08012b88 	.word	0x08012b88
 8004004:	08012b98 	.word	0x08012b98
 8004008:	08012bac 	.word	0x08012bac
 800400c:	08012bc0 	.word	0x08012bc0
 8004010:	08012bd8 	.word	0x08012bd8
 8004014:	08012bf0 	.word	0x08012bf0
 8004018:	08012c10 	.word	0x08012c10
 800401c:	08012c24 	.word	0x08012c24
 8004020:	08012c34 	.word	0x08012c34
 8004024:	08012c48 	.word	0x08012c48
 8004028:	08012c60 	.word	0x08012c60
 800402c:	08012c68 	.word	0x08012c68
 8004030:	08012c7c 	.word	0x08012c7c
 8004034:	08012c90 	.word	0x08012c90
 8004038:	08012ca8 	.word	0x08012ca8
 800403c:	08012cbc 	.word	0x08012cbc
 8004040:	08012cdc 	.word	0x08012cdc
 8004044:	08012d00 	.word	0x08012d00
 8004048:	08012d20 	.word	0x08012d20
 800404c:	08012d38 	.word	0x08012d38
 8004050:	08012d50 	.word	0x08012d50
 8004054:	08012d60 	.word	0x08012d60
 8004058:	08012d6c 	.word	0x08012d6c
 800405c:	08012d80 	.word	0x08012d80
 8004060:	08012d90 	.word	0x08012d90
 8004064:	08012dac 	.word	0x08012dac
 8004068:	08012dc4 	.word	0x08012dc4
 800406c:	08012ddc 	.word	0x08012ddc
 8004070:	08012dec 	.word	0x08012dec
 8004074:	08012dfc 	.word	0x08012dfc
 8004078:	08012e1c 	.word	0x08012e1c
 800407c:	08012e3c 	.word	0x08012e3c

08004080 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8004080:	b408      	push	{r3}
 8004082:	b580      	push	{r7, lr}
 8004084:	b08b      	sub	sp, #44	; 0x2c
 8004086:	af02      	add	r7, sp, #8
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800408e:	68b8      	ldr	r0, [r7, #8]
 8004090:	f7ff fafa 	bl	8003688 <mg_http_status_code_str>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <mg_http_reply+0x20>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	e000      	b.n	80040a2 <mg_http_reply+0x22>
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <mg_http_reply+0xa0>)
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	491e      	ldr	r1, [pc, #120]	; (8004124 <mg_http_reply+0xa4>)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f002 fb1c 	bl	80066e8 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 80040b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ba:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80040c2:	f107 0314 	add.w	r3, r7, #20
 80040c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c8:	4817      	ldr	r0, [pc, #92]	; (8004128 <mg_http_reply+0xa8>)
 80040ca:	f7fe f89b 	bl	8002204 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d916      	bls.n	8004104 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3b0f      	subs	r3, #15
 80040de:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80040e8:	4a10      	ldr	r2, [pc, #64]	; (800412c <mg_http_reply+0xac>)
 80040ea:	210b      	movs	r1, #11
 80040ec:	f002 fd1a 	bl	8006b24 <mg_snprintf>
 80040f0:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040f6:	69f9      	ldr	r1, [r7, #28]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	440b      	add	r3, r1
 80040fc:	3b0f      	subs	r3, #15
 80040fe:	4413      	add	r3, r2
 8004100:	2220      	movs	r2, #32
 8004102:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800410a:	f36f 13c7 	bfc	r3, #7, #1
 800410e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 8004112:	bf00      	nop
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800411c:	b001      	add	sp, #4
 800411e:	4770      	bx	lr
 8004120:	08012e3c 	.word	0x08012e3c
 8004124:	08012e40 	.word	0x08012e40
 8004128:	08006ab5 	.word	0x08006ab5
 800412c:	08012e74 	.word	0x08012e74

08004130 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fc2d 	bl	800299c <mg_fs_close>
  c->pfn_data = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a06      	ldr	r2, [pc, #24]	; (8004164 <restore_http_cb+0x34>)
 800414c:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004154:	f36f 13c7 	bfc	r3, #7, #1
 8004158:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	08005289 	.word	0x08005289

08004168 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	461c      	mov	r4, r3
 800417a:	4615      	mov	r5, r2
 800417c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004180:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004184:	e9cd 2300 	strd	r2, r3, [sp]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <mg_http_etag+0x34>)
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f002 fcc9 	bl	8006b24 <mg_snprintf>
  return buf;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bdb0      	pop	{r4, r5, r7, pc}
 800419c:	08012e7c 	.word	0x08012e7c

080041a0 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d002      	beq.n	80041ba <static_cb+0x1a>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d146      	bne.n	8004248 <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 80041be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041c2:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3384      	adds	r3, #132	; 0x84
 80041c8:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d905      	bls.n	80041e0 <static_cb+0x40>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3348      	adds	r3, #72	; 0x48
 80041d8:	69f9      	ldr	r1, [r7, #28]
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 f9c6 	bl	800556c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d234      	bcs.n	8004256 <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fe:	429a      	cmp	r2, r3
 8004200:	d902      	bls.n	8004208 <static_cb+0x68>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	6810      	ldr	r0, [r2, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800421a:	4411      	add	r1, r2
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	4798      	blx	r3
 8004220:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	441a      	add	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad2      	subs	r2, r2, r3
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10c      	bne.n	800425a <static_cb+0xba>
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff ff75 	bl	8004130 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004246:	e008      	b.n	800425a <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b09      	cmp	r3, #9
 800424c:	d106      	bne.n	800425c <static_cb+0xbc>
    restore_http_cb(c);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff ff6e 	bl	8004130 <restore_http_cb>
 8004254:	e002      	b.n	800425c <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800425a:	bf00      	nop
  }
  (void) ev_data;
}
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8004264:	b590      	push	{r4, r7, lr}
 8004266:	b08d      	sub	sp, #52	; 0x34
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	1d38      	adds	r0, r7, #4
 800426e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004272:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f002 ff9c 	bl	80071b8 <mg_str_s>
  size_t i = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 8004284:	e002      	b.n	800428c <guess_content_type+0x28>
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	3301      	adds	r3, #1
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004290:	429a      	cmp	r2, r3
 8004292:	d208      	bcs.n	80042a6 <guess_content_type+0x42>
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b2e      	cmp	r3, #46	; 0x2e
 80042a4:	d1ef      	bne.n	8004286 <guess_content_type+0x22>
  path.ptr += path.len - i;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	1acb      	subs	r3, r1, r3
 80042ae:	4413      	add	r3, r2
 80042b0:	607b      	str	r3, [r7, #4]
  path.len = i;
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 80042b6:	e012      	b.n	80042de <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 80042b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042bc:	cb0c      	ldmia	r3, {r2, r3}
 80042be:	1d39      	adds	r1, r7, #4
 80042c0:	c903      	ldmia	r1, {r0, r1}
 80042c2:	f003 f83b 	bl	800733c <mg_strcmp>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d108      	bne.n	80042de <guess_content_type+0x7a>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f107 031c 	add.w	r3, r7, #28
 80042d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80042dc:	e034      	b.n	8004348 <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 80042de:	f107 021c 	add.w	r2, r7, #28
 80042e2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	4618      	mov	r0, r3
 80042ec:	f003 fa85 	bl	80077fa <mg_commalist>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e0      	bne.n	80042b8 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 80042f6:	2300      	movs	r3, #0
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fa:	e01a      	b.n	8004332 <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 80042fc:	4a14      	ldr	r2, [pc, #80]	; (8004350 <guess_content_type+0xec>)
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	cb0c      	ldmia	r3, {r2, r3}
 8004306:	1d39      	adds	r1, r7, #4
 8004308:	c903      	ldmia	r1, {r0, r1}
 800430a:	f003 f817 	bl	800733c <mg_strcmp>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <guess_content_type+0xc8>
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	3301      	adds	r3, #1
 8004318:	68f9      	ldr	r1, [r7, #12]
 800431a:	4a0d      	ldr	r2, [pc, #52]	; (8004350 <guess_content_type+0xec>)
 800431c:	460c      	mov	r4, r1
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004326:	e884 0003 	stmia.w	r4, {r0, r1}
 800432a:	e00d      	b.n	8004348 <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	3302      	adds	r3, #2
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004332:	4a07      	ldr	r2, [pc, #28]	; (8004350 <guess_content_type+0xec>)
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1de      	bne.n	80042fc <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4904      	ldr	r1, [pc, #16]	; (8004354 <guess_content_type+0xf0>)
 8004342:	4618      	mov	r0, r3
 8004344:	f002 ff38 	bl	80071b8 <mg_str_s>
}
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	3734      	adds	r7, #52	; 0x34
 800434c:	46bd      	mov	sp, r7
 800434e:	bd90      	pop	{r4, r7, pc}
 8004350:	20000050 	.word	0x20000050
 8004354:	08012f64 	.word	0x08012f64

08004358 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e076      	b.n	800445c <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	2206      	movs	r2, #6
 8004378:	493f      	ldr	r1, [pc, #252]	; (8004478 <getrange+0x120>)
 800437a:	4618      	mov	r0, r3
 800437c:	f00d facb 	bl	8011916 <memcmp>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d167      	bne.n	8004456 <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3306      	adds	r3, #6
 800438e:	18d1      	adds	r1, r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	1f9a      	subs	r2, r3, #6
 800439a:	f107 0310 	add.w	r3, r7, #16
 800439e:	4618      	mov	r0, r3
 80043a0:	f002 ff27 	bl	80071f2 <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <getrange+0x68>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b2f      	cmp	r3, #47	; 0x2f
 80043b0:	d906      	bls.n	80043c0 <getrange+0x68>
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b39      	cmp	r3, #57	; 0x39
 80043b8:	d802      	bhi.n	80043c0 <getrange+0x68>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3301      	adds	r3, #1
 80043be:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	f107 0310 	add.w	r3, r7, #16
 80043c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043ca:	f7fe fd25 	bl	8002e18 <mg_to_size_t>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f083 0301 	eor.w	r3, r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <getrange+0x92>
 80043da:	2300      	movs	r3, #0
 80043dc:	e047      	b.n	800446e <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3301      	adds	r3, #1
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <getrange+0xa8>
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b2f      	cmp	r3, #47	; 0x2f
 80043f6:	d903      	bls.n	8004400 <getrange+0xa8>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b39      	cmp	r3, #57	; 0x39
 80043fe:	d9ee      	bls.n	80043de <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <getrange+0xc2>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b2d      	cmp	r3, #45	; 0x2d
 800440c:	d105      	bne.n	800441a <getrange+0xc2>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3301      	adds	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3b01      	subs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	f107 0310 	add.w	r3, r7, #16
 8004420:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004424:	f7fe fcf8 	bl	8002e18 <mg_to_size_t>
 8004428:	4603      	mov	r3, r0
 800442a:	f083 0301 	eor.w	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <getrange+0xe0>
 8004434:	2300      	movs	r3, #0
 8004436:	e01a      	b.n	800446e <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d015      	beq.n	800446a <getrange+0x112>
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b2f      	cmp	r3, #47	; 0x2f
 8004444:	d911      	bls.n	800446a <getrange+0x112>
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b39      	cmp	r3, #57	; 0x39
 800444c:	d80d      	bhi.n	800446a <getrange+0x112>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	3301      	adds	r3, #1
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	e00a      	b.n	800446c <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	3301      	adds	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	1d9a      	adds	r2, r3, #6
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	d382      	bcc.n	800436e <getrange+0x16>
 8004468:	e000      	b.n	800446c <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 800446a:	bf00      	nop
    }
  }
  return (int) numparsed;
 800446c:	69bb      	ldr	r3, [r7, #24]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	080130e8 	.word	0x080130e8

0800447c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	b0f7      	sub	sp, #476	; 0x1dc
 8004482:	af0a      	add	r7, sp, #40	; 0x28
 8004484:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 8004488:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 800448c:	6020      	str	r0, [r4, #0]
 800448e:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004492:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 8004496:	6001      	str	r1, [r0, #0]
 8004498:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800449c:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 80044a0:	600a      	str	r2, [r1, #0]
 80044a2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80044a6:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80044aa:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80044ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80044b0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <mg_http_serve_file+0x4e>
 80044bc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80044c0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	e000      	b.n	80044cc <mg_http_serve_file+0x50>
 80044ca:	4b9d      	ldr	r3, [pc, #628]	; (8004740 <mg_http_serve_file+0x2c4>)
 80044cc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  struct mg_fd *fd = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  size_t size = 0;
 80044d6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80044da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 80044f4:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80044f8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80044fc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	4610      	mov	r0, r2
 8004504:	f002 fe58 	bl	80071b8 <mg_str_s>
 8004508:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800450c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004518:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 800451c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004520:	ca06      	ldmia	r2, {r1, r2}
 8004522:	f7ff fe9f 	bl	8004264 <guess_content_type>
  bool gzip = false;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

  if (path != NULL) {
 800452c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004530:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d051      	beq.n	80045de <mg_http_serve_file+0x162>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800453a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800453e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004542:	4980      	ldr	r1, [pc, #512]	; (8004744 <mg_http_serve_file+0x2c8>)
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	f7fe fe03 	bl	8003150 <mg_http_get_header>
 800454a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 800454e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004552:	2b00      	cmp	r3, #0
 8004554:	d033      	beq.n	80045be <mg_http_serve_file+0x142>
 8004556:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800455a:	497b      	ldr	r1, [pc, #492]	; (8004748 <mg_http_serve_file+0x2cc>)
 800455c:	4618      	mov	r0, r3
 800455e:	f002 fe2b 	bl	80071b8 <mg_str_s>
 8004562:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8004566:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800456a:	cb0c      	ldmia	r3, {r2, r3}
 800456c:	c903      	ldmia	r1, {r0, r1}
 800456e:	f002 ff27 	bl	80073c0 <mg_strstr>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d022      	beq.n	80045be <mg_http_serve_file+0x142>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8004578:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800457c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004580:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a71      	ldr	r2, [pc, #452]	; (800474c <mg_http_serve_file+0x2d0>)
 8004588:	2180      	movs	r1, #128	; 0x80
 800458a:	f002 facb 	bl	8006b24 <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800458e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004592:	2201      	movs	r2, #1
 8004594:	4619      	mov	r1, r3
 8004596:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800459a:	f7fe f9d7 	bl	800294c <mg_fs_open>
 800459e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
      if (fd != NULL) gzip = true, path = tmp;
 80045a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <mg_http_serve_file+0x142>
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80045b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045b4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045b8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80045bc:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 80045be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <mg_http_serve_file+0x162>
 80045c6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045ce:	2201      	movs	r2, #1
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80045d6:	f7fe f9b9 	bl	800294c <mg_fs_open>
 80045da:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 80045de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d144      	bne.n	8004670 <mg_http_serve_file+0x1f4>
 80045e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d03c      	beq.n	8004670 <mg_http_serve_file+0x1f4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 80045f6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2201      	movs	r2, #1
 8004604:	4619      	mov	r1, r3
 8004606:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800460a:	f7fe f99f 	bl	800294c <mg_fs_open>
 800460e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8004612:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004616:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800461a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	4610      	mov	r0, r2
 8004622:	f002 fdc9 	bl	80071b8 <mg_str_s>
 8004626:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800462a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004636:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 800463a:	f107 0010 	add.w	r0, r7, #16
 800463e:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004642:	ca06      	ldmia	r2, {r1, r2}
 8004644:	f7ff fe0e 	bl	8004264 <guess_content_type>
 8004648:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800464c:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8004650:	4623      	mov	r3, r4
 8004652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004656:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 800465a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800465e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004662:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004666:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	6912      	ldr	r2, [r2, #16]
 800466e:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8004670:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00f      	beq.n	8004698 <mg_http_serve_file+0x21c>
 8004678:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800467c:	681c      	ldr	r4, [r3, #0]
 800467e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004682:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8004686:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800468a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	47a0      	blx	r4
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d114      	bne.n	80046c2 <mg_http_serve_file+0x246>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8004698:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800469c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046a8:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80046ac:	4b28      	ldr	r3, [pc, #160]	; (8004750 <mg_http_serve_file+0x2d4>)
 80046ae:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80046b2:	6800      	ldr	r0, [r0, #0]
 80046b4:	f7ff fce4 	bl	8004080 <mg_http_reply>
    mg_fs_close(fd);
 80046b8:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80046bc:	f7fe f96e 	bl	800299c <mg_fs_close>
 80046c0:	e193      	b.n	80049ea <mg_http_serve_file+0x56e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80046c2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046ca:	6819      	ldr	r1, [r3, #0]
 80046cc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80046d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046d4:	e9cd 2300 	strd	r2, r3, [sp]
 80046d8:	460a      	mov	r2, r1
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	f7ff fd44 	bl	8004168 <mg_http_etag>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03a      	beq.n	800475c <mg_http_serve_file+0x2e0>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80046e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046ee:	4919      	ldr	r1, [pc, #100]	; (8004754 <mg_http_serve_file+0x2d8>)
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f7fe fd2d 	bl	8003150 <mg_http_get_header>
 80046f6:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80046fa:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d02c      	beq.n	800475c <mg_http_serve_file+0x2e0>
             mg_vcasecmp(inm, etag) == 0) {
 8004702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004706:	4619      	mov	r1, r3
 8004708:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 800470c:	f002 fdf2 	bl	80072f4 <mg_vcasecmp>
 8004710:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004712:	2b00      	cmp	r3, #0
 8004714:	d122      	bne.n	800475c <mg_http_serve_file+0x2e0>
    mg_fs_close(fd);
 8004716:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800471a:	f7fe f93f 	bl	800299c <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800471e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004722:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800472e:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <mg_http_serve_file+0x2dc>)
 8004734:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004738:	6800      	ldr	r0, [r0, #0]
 800473a:	f7ff fca1 	bl	8004080 <mg_http_reply>
 800473e:	e154      	b.n	80049ea <mg_http_serve_file+0x56e>
 8004740:	20000028 	.word	0x20000028
 8004744:	080130f0 	.word	0x080130f0
 8004748:	08013100 	.word	0x08013100
 800474c:	08013108 	.word	0x08013108
 8004750:	08013110 	.word	0x08013110
 8004754:	0801311c 	.word	0x0801311c
 8004758:	08012e3c 	.word	0x08012e3c
  } else {
    int n, status = 200;
 800475c:	23c8      	movs	r3, #200	; 0xc8
 800475e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8004762:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004766:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004772:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800477e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8004788:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800478c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004790:	4999      	ldr	r1, [pc, #612]	; (80049f8 <mg_http_serve_file+0x57c>)
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	f7fe fcdc 	bl	8003150 <mg_http_get_header>
 8004798:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    range[0] = '\0';
 800479c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80047a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8095 	beq.w	80048dc <mg_http_serve_file+0x460>
 80047b2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80047b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80047ba:	4619      	mov	r1, r3
 80047bc:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80047c0:	f7ff fdca 	bl	8004358 <getrange>
 80047c4:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 80047c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f340 8085 	ble.w	80048dc <mg_http_serve_file+0x460>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 80047d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d107      	bne.n	80047ea <mg_http_serve_file+0x36e>
 80047da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80047de:	1e5a      	subs	r2, r3, #1
 80047e0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047e8:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 80047ea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d808      	bhi.n	8004814 <mg_http_serve_file+0x398>
 8004802:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004806:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004810:	429a      	cmp	r2, r3
 8004812:	d81a      	bhi.n	800484a <mg_http_serve_file+0x3ce>
        status = 416;
 8004814:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004818:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8004822:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	60fa      	str	r2, [r7, #12]
 8004832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004836:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800483a:	e9cd 1200 	strd	r1, r2, [sp]
 800483e:	4a6f      	ldr	r2, [pc, #444]	; (80049fc <mg_http_serve_file+0x580>)
 8004840:	2164      	movs	r1, #100	; 0x64
 8004842:	4618      	mov	r0, r3
 8004844:	f002 f96e 	bl	8006b24 <mg_snprintf>
 8004848:	e048      	b.n	80048dc <mg_http_serve_file+0x460>
                    (int64_t) size);
      } else {
        status = 206;
 800484a:	23ce      	movs	r3, #206	; 0xce
 800484c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = r2 - r1 + 1;
 8004850:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004854:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800485e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	3301      	adds	r3, #1
 8004868:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range),
 800486c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004870:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2200      	movs	r2, #0
 8004878:	469a      	mov	sl, r3
 800487a:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800487c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004880:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800488a:	4413      	add	r3, r2
 800488c:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800488e:	2200      	movs	r2, #0
 8004890:	461d      	mov	r5, r3
 8004892:	4616      	mov	r6, r2
 8004894:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048ac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80048b0:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80048b4:	e9cd ab00 	strd	sl, fp, [sp]
 80048b8:	4a51      	ldr	r2, [pc, #324]	; (8004a00 <mg_http_serve_file+0x584>)
 80048ba:	2164      	movs	r1, #100	; 0x64
 80048bc:	4618      	mov	r0, r3
 80048be:	f002 f931 	bl	8006b24 <mg_snprintf>
        fs->sk(fd->fd, r1);
 80048c2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80048cc:	6810      	ldr	r0, [r2, #0]
 80048ce:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80048d2:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	4611      	mov	r1, r2
 80048da:	4798      	blx	r3
      }
    }
    mg_printf(c,
 80048dc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80048e0:	f7fe fed2 	bl	8003688 <mg_http_status_code_str>
 80048e4:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 80048e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048ee:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 80048f0:	461d      	mov	r5, r3
 80048f2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004900:	2100      	movs	r1, #0
 8004902:	4698      	mov	r8, r3
 8004904:	4689      	mov	r9, r1
 8004906:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <mg_http_serve_file+0x496>
 800490e:	493d      	ldr	r1, [pc, #244]	; (8004a04 <mg_http_serve_file+0x588>)
 8004910:	e000      	b.n	8004914 <mg_http_serve_file+0x498>
 8004912:	493d      	ldr	r1, [pc, #244]	; (8004a08 <mg_http_serve_file+0x58c>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8004914:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004918:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <mg_http_serve_file+0x4b6>
 8004924:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004928:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	e000      	b.n	8004934 <mg_http_serve_file+0x4b8>
 8004932:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <mg_http_serve_file+0x58c>)
 8004934:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004938:	f5a0 70c6 	sub.w	r0, r0, #396	; 0x18c
 800493c:	9308      	str	r3, [sp, #32]
 800493e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004942:	9307      	str	r3, [sp, #28]
 8004944:	9106      	str	r1, [sp, #24]
 8004946:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800494a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800494e:	9302      	str	r3, [sp, #8]
 8004950:	9201      	str	r2, [sp, #4]
 8004952:	9500      	str	r5, [sp, #0]
 8004954:	4623      	mov	r3, r4
 8004956:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800495a:	492c      	ldr	r1, [pc, #176]	; (8004a0c <mg_http_serve_file+0x590>)
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f001 fec3 	bl	80066e8 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8004962:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004966:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4928      	ldr	r1, [pc, #160]	; (8004a10 <mg_http_serve_file+0x594>)
 800496e:	4618      	mov	r0, r3
 8004970:	f002 fcc0 	bl	80072f4 <mg_vcasecmp>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11a      	bne.n	80049b0 <mg_http_serve_file+0x534>
      c->is_draining = 1;
 800497a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800497e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004988:	f043 0310 	orr.w	r3, r3, #16
 800498c:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 8004990:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004994:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800499e:	f36f 13c7 	bfc	r3, #7, #1
 80049a2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 80049a6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80049aa:	f7fd fff7 	bl	800299c <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 80049ae:	e01c      	b.n	80049ea <mg_http_serve_file+0x56e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80049b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3384      	adds	r3, #132	; 0x84
 80049bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      c->pfn = static_cb;
 80049c0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <mg_http_serve_file+0x598>)
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 80049ce:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80049dc:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 80049de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80049e2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80049e6:	601a      	str	r2, [r3, #0]
}
 80049e8:	e7ff      	b.n	80049ea <mg_http_serve_file+0x56e>
 80049ea:	bf00      	nop
 80049ec:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	bf00      	nop
 80049f8:	0801312c 	.word	0x0801312c
 80049fc:	08013134 	.word	0x08013134
 8004a00:	08013154 	.word	0x08013154
 8004a04:	0801317c 	.word	0x0801317c
 8004a08:	08012e3c 	.word	0x08012e3c
 8004a0c:	08013198 	.word	0x08013198
 8004a10:	080131e8 	.word	0x080131e8
 8004a14:	080041a1 	.word	0x080041a1

08004a18 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8004a18:	b082      	sub	sp, #8
 8004a1a:	b590      	push	{r4, r7, lr}
 8004a1c:	b08b      	sub	sp, #44	; 0x2c
 8004a1e:	af02      	add	r7, sp, #8
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 8004a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	4a97      	ldr	r2, [pc, #604]	; (8004c90 <uri_to_path2+0x278>)
 8004a34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a38:	f002 f874 	bl	8006b24 <mg_snprintf>
 8004a3c:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d909      	bls.n	8004a5a <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8004a46:	4b93      	ldr	r3, [pc, #588]	; (8004c94 <uri_to_path2+0x27c>)
 8004a48:	4a93      	ldr	r2, [pc, #588]	; (8004c98 <uri_to_path2+0x280>)
 8004a4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff fb16 	bl	8004080 <mg_http_reply>
    return -1;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
 8004a58:	e113      	b.n	8004c82 <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a60:	4413      	add	r3, r2
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d912      	bls.n	8004a96 <uri_to_path2+0x7e>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a76:	4413      	add	r3, r2
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b2f      	cmp	r3, #47	; 0x2f
 8004a7c:	d00b      	beq.n	8004a96 <uri_to_path2+0x7e>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	617a      	str	r2, [r7, #20]
 8004a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a86:	4413      	add	r3, r2
 8004a88:	222f      	movs	r2, #47	; 0x2f
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	4413      	add	r3, r2
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	18d0      	adds	r0, r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	1ad1      	subs	r1, r2, r3
 8004aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	18d4      	adds	r4, r2, r3
 8004aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	9200      	str	r2, [sp, #0]
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	f7fe fa64 	bl	8002f84 <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac2:	4413      	add	r3, r2
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 8004ac8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004aca:	f002 ff13 	bl	80078f4 <mg_path_is_sane>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 8004ada:	4b70      	ldr	r3, [pc, #448]	; (8004c9c <uri_to_path2+0x284>)
 8004adc:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <uri_to_path2+0x280>)
 8004ade:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff facc 	bl	8004080 <mg_http_reply>
    return -1;
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	e0c9      	b.n	8004c82 <uri_to_path2+0x26a>
  }
  n = strlen(path);
 8004aee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004af0:	f7fb fbee 	bl	80002d0 <strlen>
 8004af4:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8004af6:	e007      	b.n	8004b08 <uri_to_path2+0xf0>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	4413      	add	r3, r2
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d906      	bls.n	8004b1c <uri_to_path2+0x104>
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b14:	4413      	add	r3, r2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b2f      	cmp	r3, #47	; 0x2f
 8004b1a:	d0ed      	beq.n	8004af8 <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	495f      	ldr	r1, [pc, #380]	; (8004ca0 <uri_to_path2+0x288>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f002 fbc2 	bl	80072ac <mg_vcmp>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <uri_to_path2+0x126>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b38:	4798      	blx	r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	e000      	b.n	8004b40 <uri_to_path2+0x128>
 8004b3e:	2304      	movs	r3, #4
 8004b40:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 8004b42:	4b58      	ldr	r3, [pc, #352]	; (8004ca4 <uri_to_path2+0x28c>)
 8004b44:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8004b48:	4957      	ldr	r1, [pc, #348]	; (8004ca8 <uri_to_path2+0x290>)
 8004b4a:	2004      	movs	r0, #4
 8004b4c:	f001 fc6c 	bl	8006428 <mg_log_prefix>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00f      	beq.n	8004b76 <uri_to_path2+0x15e>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	4602      	mov	r2, r0
 8004b70:	484e      	ldr	r0, [pc, #312]	; (8004cac <uri_to_path2+0x294>)
 8004b72:	f001 fcb3 	bl	80064dc <mg_log>
              flags));
  if (flags == 0) {
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8081 	beq.w	8004c80 <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d020      	beq.n	8004bca <uri_to_path2+0x1b2>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01c      	beq.n	8004bca <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004b9e:	2b2f      	cmp	r3, #47	; 0x2f
 8004ba0:	d013      	beq.n	8004bca <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4940      	ldr	r1, [pc, #256]	; (8004cb0 <uri_to_path2+0x298>)
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f001 fd9a 	bl	80066e8 <mg_printf>
    c->is_resp = 0;
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004bba:	f36f 13c7 	bfc	r3, #7, #1
 8004bbe:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	e05a      	b.n	8004c80 <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d055      	beq.n	8004c80 <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	18d0      	adds	r0, r2, r3
 8004bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	4a34      	ldr	r2, [pc, #208]	; (8004cb4 <uri_to_path2+0x29c>)
 8004be2:	4619      	mov	r1, r3
 8004be4:	f001 ff9e 	bl	8006b24 <mg_snprintf>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004bf8:	4798      	blx	r3
 8004bfa:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	18d0      	adds	r0, r2, r3
 8004c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <uri_to_path2+0x2a0>)
 8004c10:	4619      	mov	r1, r3
 8004c12:	f001 ff87 	bl	8006b24 <mg_snprintf>
 8004c16:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00c      	beq.n	8004c36 <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c26:	4798      	blx	r3
 8004c28:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <uri_to_path2+0x21e>
      flags = tmp;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e024      	b.n	8004c80 <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8004c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	18d0      	adds	r0, r2, r3
 8004c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <uri_to_path2+0x2a4>)
 8004c44:	4619      	mov	r1, r3
 8004c46:	f001 ff6d 	bl	8006b24 <mg_snprintf>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d012      	beq.n	8004c76 <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c5a:	4798      	blx	r3
 8004c5c:	61b8      	str	r0, [r7, #24]
                    0 &&
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	330b      	adds	r3, #11
 8004c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c6e:	4413      	add	r3, r2
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e004      	b.n	8004c80 <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8004c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8004c80:	69fb      	ldr	r3, [r7, #28]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3724      	adds	r7, #36	; 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004c8c:	b002      	add	sp, #8
 8004c8e:	4770      	bx	lr
 8004c90:	080128dc 	.word	0x080128dc
 8004c94:	080131f0 	.word	0x080131f0
 8004c98:	08012e3c 	.word	0x08012e3c
 8004c9c:	08013204 	.word	0x08013204
 8004ca0:	08013214 	.word	0x08013214
 8004ca4:	08014088 	.word	0x08014088
 8004ca8:	080127ac 	.word	0x080127ac
 8004cac:	08013218 	.word	0x08013218
 8004cb0:	0801322c 	.word	0x0801322c
 8004cb4:	08013268 	.word	0x08013268
 8004cb8:	08013274 	.word	0x08013274
 8004cbc:	08013284 	.word	0x08013284

08004cc0 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b09a      	sub	sp, #104	; 0x68
 8004cc4:	af06      	add	r7, sp, #24
 8004cc6:	6178      	str	r0, [r7, #20]
 8004cc8:	6139      	str	r1, [r7, #16]
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <uri_to_path+0x1c>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	e000      	b.n	8004cde <uri_to_path+0x1e>
 8004cdc:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <uri_to_path+0x10c>)
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f002 fa64 	bl	80071b8 <mg_str_s>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 8004d00:	e040      	b.n	8004d84 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d113      	bne.n	8004d30 <uri_to_path+0x70>
 8004d08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d0c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d14:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d18:	463b      	mov	r3, r7
 8004d1a:	492d      	ldr	r1, [pc, #180]	; (8004dd0 <uri_to_path+0x110>)
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f002 fa4b 	bl	80071b8 <mg_str_s>
 8004d22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d26:	463a      	mov	r2, r7
 8004d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d2c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d200      	bcs.n	8004d3c <uri_to_path+0x7c>
 8004d3a:	e023      	b.n	8004d84 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6899      	ldr	r1, [r3, #8]
 8004d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 fa53 	bl	80071f2 <mg_str_n>
 8004d4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d50:	cb0c      	ldmia	r3, {r2, r3}
 8004d52:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004d56:	c903      	ldmia	r1, {r0, r1}
 8004d58:	f002 faf0 	bl	800733c <mg_strcmp>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d000      	beq.n	8004d64 <uri_to_path+0xa4>
 8004d62:	e00f      	b.n	8004d84 <uri_to_path+0xc4>
    u = k, p = v;
 8004d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d68:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d70:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d74:	f107 031c 	add.w	r3, r7, #28
 8004d78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d80:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 8004d84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004d88:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d90:	4618      	mov	r0, r3
 8004d92:	f002 fd32 	bl	80077fa <mg_commalist>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1b2      	bne.n	8004d02 <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8004d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	9303      	str	r3, [sp, #12]
 8004da4:	aa01      	add	r2, sp, #4
 8004da6:	f107 031c 	add.w	r3, r7, #28
 8004daa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dae:	e882 0003 	stmia.w	r2, {r0, r1}
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dba:	6939      	ldr	r1, [r7, #16]
 8004dbc:	6978      	ldr	r0, [r7, #20]
 8004dbe:	f7ff fe2b 	bl	8004a18 <uri_to_path2>
 8004dc2:	4603      	mov	r3, r0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000028 	.word	0x20000028
 8004dd0:	08013214 	.word	0x08013214

08004dd4 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b0a9      	sub	sp, #164	; 0xa4
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8004de8:	f107 0310 	add.w	r3, r7, #16
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	9200      	str	r2, [sp, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff ff63 	bl	8004cc0 <uri_to_path>
 8004dfa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (flags < 0) {
 8004dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	db3a      	blt.n	8004e7c <mg_http_serve_dir+0xa8>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8004e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8004e12:	4b1c      	ldr	r3, [pc, #112]	; (8004e84 <mg_http_serve_dir+0xb0>)
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <mg_http_serve_dir+0xb4>)
 8004e16:	f240 1193 	movw	r1, #403	; 0x193
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7ff f930 	bl	8004080 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8004e20:	e02c      	b.n	8004e7c <mg_http_serve_dir+0xa8>
  } else if (flags && sp != NULL &&
 8004e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d021      	beq.n	8004e6e <mg_http_serve_dir+0x9a>
 8004e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01d      	beq.n	8004e6e <mg_http_serve_dir+0x9a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 8004e32:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004e36:	f7fb fa4b 	bl	80002d0 <strlen>
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	f107 0310 	add.w	r3, r7, #16
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fa45 	bl	80002d0 <strlen>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f107 0210 	add.w	r2, r7, #16
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004e52:	f002 fbd1 	bl	80075f8 <mg_globmatch>
 8004e56:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <mg_http_serve_dir+0x9a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f107 0210 	add.w	r2, r7, #16
 8004e64:	4619      	mov	r1, r3
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f002 f992 	bl	8007190 <mg_http_serve_ssi>
}
 8004e6c:	e006      	b.n	8004e7c <mg_http_serve_dir+0xa8>
    mg_http_serve_file(c, hm, path, opts);
 8004e6e:	f107 0210 	add.w	r2, r7, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7ff fb00 	bl	800447c <mg_http_serve_file>
}
 8004e7c:	bf00      	nop
 8004e7e:	379c      	adds	r7, #156	; 0x9c
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd90      	pop	{r4, r7, pc}
 8004e84:	08013294 	.word	0x08013294
 8004e88:	08012e3c 	.word	0x08012e3c

08004e8c <mg_http_match_uri>:
    }
  }
  return mg_str_n(NULL, 0);
}

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f002 f98b 	bl	80071b8 <mg_str_s>
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	f107 0308 	add.w	r3, r7, #8
 8004eac:	cb0c      	ldmia	r3, {r2, r3}
 8004eae:	3108      	adds	r1, #8
 8004eb0:	c903      	ldmia	r1, {r0, r1}
 8004eb2:	f002 faba 	bl	800742a <mg_match>
 8004eb6:	4603      	mov	r3, r0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	f107 0408 	add.w	r4, r7, #8
 8004eca:	e884 0003 	stmia.w	r4, {r0, r1}
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 8004ed6:	e002      	b.n	8004ede <getchunk+0x1e>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3301      	adds	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d20b      	bcs.n	8004efe <getchunk+0x3e>
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b0d      	cmp	r3, #13
 8004ef0:	d005      	beq.n	8004efe <getchunk+0x3e>
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b0a      	cmp	r3, #10
 8004efc:	d1ec      	bne.n	8004ed8 <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	6979      	ldr	r1, [r7, #20]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f002 fcac 	bl	8007860 <mg_unhexn>
 8004f08:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	440b      	add	r3, r1
 8004f12:	3304      	adds	r3, #4
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d201      	bcs.n	8004f1c <getchunk+0x5c>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e02a      	b.n	8004f72 <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4413      	add	r3, r2
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b0d      	cmp	r3, #13
 8004f26:	d106      	bne.n	8004f36 <getchunk+0x76>
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b0a      	cmp	r3, #10
 8004f34:	d001      	beq.n	8004f3a <getchunk+0x7a>
 8004f36:	2300      	movs	r3, #0
 8004f38:	e01b      	b.n	8004f72 <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	6979      	ldr	r1, [r7, #20]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	440b      	add	r3, r1
 8004f42:	3302      	adds	r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b0d      	cmp	r3, #13
 8004f4a:	d108      	bne.n	8004f5e <getchunk+0x9e>
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	6979      	ldr	r1, [r7, #20]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	440b      	add	r3, r1
 8004f54:	3303      	adds	r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b0a      	cmp	r3, #10
 8004f5c:	d001      	beq.n	8004f62 <getchunk+0xa2>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e007      	b.n	8004f72 <getchunk+0xb2>
  *prefixlen = i + 2;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	1c9a      	adds	r2, r3, #2
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
  *datalen = n;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	601a      	str	r2, [r3, #0]
  return true;
 8004f70:	2301      	movs	r3, #1
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd90      	pop	{r4, r7, pc}
	...

08004f7c <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <mg_is_chunked+0x40>)
 8004f86:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8004f88:	490d      	ldr	r1, [pc, #52]	; (8004fc0 <mg_is_chunked+0x44>)
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fe f8e0 	bl	8003150 <mg_http_get_header>
 8004f90:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <mg_is_chunked+0x2e>
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	68b8      	ldr	r0, [r7, #8]
 8004f9c:	f002 f9aa 	bl	80072f4 <mg_vcasecmp>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <mg_is_chunked+0x2e>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <mg_is_chunked+0x30>
 8004faa:	2300      	movs	r3, #0
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	0801334c 	.word	0x0801334c
 8004fc0:	08013354 	.word	0x08013354

08004fc4 <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b095      	sub	sp, #84	; 0x54
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6178      	str	r0, [r7, #20]
 8004fcc:	6139      	str	r1, [r7, #16]
 8004fce:	60fa      	str	r2, [r7, #12]
 8004fd0:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 8005002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005006:	429a      	cmp	r2, r3
 8005008:	d851      	bhi.n	80050ae <deliver_chunked_chunks+0xea>
 800500a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800500c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	64bb      	str	r3, [r7, #72]	; 0x48
 8005012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005016:	4413      	add	r3, r2
 8005018:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 800501a:	e048      	b.n	80050ae <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 8005022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005026:	18d0      	adds	r0, r2, r3
 8005028:	6a3a      	ldr	r2, [r7, #32]
 800502a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502c:	4413      	add	r3, r2
 800502e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005030:	4413      	add	r3, r2
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	4619      	mov	r1, r3
 8005036:	f00c fc7e 	bl	8011936 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 800503a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800503c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503e:	18d1      	adds	r1, r2, r3
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	68fc      	ldr	r4, [r7, #12]
 8005044:	463b      	mov	r3, r7
 8005046:	4618      	mov	r0, r3
 8005048:	f002 f8d3 	bl	80071f2 <mg_str_n>
 800504c:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005050:	463a      	mov	r2, r7
 8005052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005056:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	210b      	movs	r1, #11
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f7fc fb9f 	bl	80017a2 <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	441a      	add	r2, r3
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	4413      	add	r3, r2
 800506e:	3302      	adds	r3, #2
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005072:	6a3a      	ldr	r2, [r7, #32]
 8005074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005076:	4413      	add	r3, r2
 8005078:	3302      	adds	r3, #2
 800507a:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005080:	4413      	add	r3, r2
 8005082:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508a:	429a      	cmp	r2, r3
 800508c:	d008      	beq.n	80050a0 <deliver_chunked_chunks+0xdc>
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	425b      	negs	r3, r3
 800509a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800509c:	4413      	add	r3, r2
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 80050ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80050b2:	f083 0301 	eor.w	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d016      	beq.n	80050ea <deliver_chunked_chunks+0x126>
 80050bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c0:	18d1      	adds	r1, r2, r3
 80050c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c6:	1ad2      	subs	r2, r2, r3
 80050c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 f890 	bl	80071f2 <mg_str_n>
 80050d2:	f107 031c 	add.w	r3, r7, #28
 80050d6:	f107 0220 	add.w	r2, r7, #32
 80050da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80050de:	c903      	ldmia	r1, {r0, r1}
 80050e0:	f7ff feee 	bl	8004ec0 <getchunk>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d198      	bne.n	800501c <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f4:	4413      	add	r3, r2
 80050f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050f8:	4619      	mov	r1, r3
 80050fa:	f000 fac1 	bl	8005680 <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	4313      	orrs	r3, r2
 800510e:	461a      	mov	r2, r3
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 8005114:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005118:	2b00      	cmp	r3, #0
 800511a:	d019      	beq.n	8005150 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005120:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005128:	441a      	add	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2200      	movs	r2, #0
 8005134:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <deliver_chunked_chunks+0x18c>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3338      	adds	r3, #56	; 0x38
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fa9b 	bl	8005680 <mg_iobuf_del>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 8005150:	bf00      	nop
 8005152:	3754      	adds	r7, #84	; 0x54
 8005154:	46bd      	mov	sp, r7
 8005156:	bd90      	pop	{r4, r7, pc}

08005158 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b08b      	sub	sp, #44	; 0x2c
 800515c:	af00      	add	r7, sp, #0
 800515e:	6178      	str	r0, [r7, #20]
 8005160:	6139      	str	r1, [r7, #16]
 8005162:	60fa      	str	r2, [r7, #12]
 8005164:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005178:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	18d1      	adds	r1, r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	68fc      	ldr	r4, [r7, #12]
 800518c:	463b      	mov	r3, r7
 800518e:	4618      	mov	r0, r3
 8005190:	f002 f82f 	bl	80071f2 <mg_str_n>
 8005194:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005198:	463a      	mov	r2, r7
 800519a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800519e:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d812      	bhi.n	80051d4 <deliver_normal_chunks+0x7c>
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10f      	bne.n	80051d4 <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	1ad2      	subs	r2, r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	441a      	add	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	429a      	cmp	r2, r3
 80051de:	d805      	bhi.n	80051ec <deliver_normal_chunks+0x94>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	e000      	b.n	80051ee <deliver_normal_chunks+0x96>
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d203      	bcs.n	8005204 <deliver_normal_chunks+0xac>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <deliver_normal_chunks+0xc0>
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	210b      	movs	r1, #11
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f7fc fac5 	bl	80017a2 <mg_call>
  processed += hm->chunk.len;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	4413      	add	r3, r2
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800522c:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	429a      	cmp	r2, r3
 8005238:	d31c      	bcc.n	8005274 <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	210b      	movs	r1, #11
 8005246:	6978      	ldr	r0, [r7, #20]
 8005248:	f7fc faab 	bl	80017a2 <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2200      	movs	r2, #0
 8005250:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	d013      	beq.n	8005280 <deliver_normal_chunks+0x128>
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <deliver_normal_chunks+0x128>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	3338      	adds	r3, #56	; 0x38
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fa0a 	bl	8005680 <mg_iobuf_del>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 8005272:	e005      	b.n	8005280 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 8005274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	4313      	orrs	r3, r2
 800527a:	461a      	mov	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005280:	bf00      	nop
 8005282:	372c      	adds	r7, #44	; 0x2c
 8005284:	46bd      	mov	sp, r7
 8005286:	bd90      	pop	{r4, r7, pc}

08005288 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800528e:	af00      	add	r7, sp, #0
 8005290:	f507 740e 	add.w	r4, r7, #568	; 0x238
 8005294:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8005298:	6020      	str	r0, [r4, #0]
 800529a:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800529e:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 80052a2:	6001      	str	r1, [r0, #0]
 80052a4:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80052a8:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 80052ac:	600a      	str	r2, [r1, #0]
 80052ae:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80052b2:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80052b6:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 80052b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052bc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b07      	cmp	r3, #7
 80052c4:	f000 80e9 	beq.w	800549a <http_cb+0x212>
 80052c8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052cc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	f040 80f2 	bne.w	80054bc <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 80052d8:	e0df      	b.n	800549a <http_cb+0x212>
      bool next = false;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 80052e0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052e4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052f0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	f107 0210 	add.w	r2, r7, #16
 80052fc:	4619      	mov	r1, r3
 80052fe:	f7fe f875 	bl	80033ec <mg_http_parse>
 8005302:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 8005306:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800530a:	2b00      	cmp	r3, #0
 800530c:	da17      	bge.n	800533e <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 800530e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005312:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	4619      	mov	r1, r3
 800531c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005320:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800532c:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8005330:	460a      	mov	r2, r1
 8005332:	4965      	ldr	r1, [pc, #404]	; (80054c8 <http_cb+0x240>)
 8005334:	6800      	ldr	r0, [r0, #0]
 8005336:	f7fc fa57 	bl	80017e8 <mg_error>
        break;
 800533a:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 800533c:	e0be      	b.n	80054bc <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 800533e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005342:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800534c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 809b 	bne.w	800548e <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 8005358:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8098 	beq.w	8005492 <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 8005362:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005366:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b09      	cmp	r3, #9
 800536e:	d125      	bne.n	80053bc <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 8005370:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005374:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005380:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005384:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 8005388:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800538c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005390:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005394:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005398:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800539c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80053a0:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80053a4:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80053a8:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 80053ac:	1a8a      	subs	r2, r1, r2
 80053ae:	1a9a      	subs	r2, r3, r2
 80053b0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053b4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80053b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 80053bc:	f107 0310 	add.w	r3, r7, #16
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fddb 	bl	8004f7c <mg_is_chunked>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 80053cc:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 80053d0:	f207 2333 	addw	r3, r7, #563	; 0x233
 80053d4:	f107 0210 	add.w	r2, r7, #16
 80053d8:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80053dc:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 80053e0:	6800      	ldr	r0, [r0, #0]
 80053e2:	f7ff fdef 	bl	8004fc4 <deliver_chunked_chunks>
 80053e6:	e00c      	b.n	8005402 <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 80053e8:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 80053ec:	f207 2333 	addw	r3, r7, #563	; 0x233
 80053f0:	f107 0210 	add.w	r2, r7, #16
 80053f4:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80053f8:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f7ff feab 	bl	8005158 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 8005402:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8005406:	2b00      	cmp	r3, #0
 8005408:	d000      	beq.n	800540c <http_cb+0x184>
 800540a:	e046      	b.n	800549a <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 800540c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005410:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005418:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800541c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005420:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005424:	429a      	cmp	r2, r3
 8005426:	d336      	bcc.n	8005496 <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8005428:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800542c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <http_cb+0x1ce>
 8005440:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005444:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8005456:	f107 0210 	add.w	r2, r7, #16
 800545a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800545e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005462:	210a      	movs	r1, #10
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	f7fc f99c 	bl	80017a2 <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 800546a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800546e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005478:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800547c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005480:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005484:	461a      	mov	r2, r3
 8005486:	2100      	movs	r1, #0
 8005488:	f000 f8fa 	bl	8005680 <mg_iobuf_del>
 800548c:	e005      	b.n	800549a <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 800548e:	bf00      	nop
 8005490:	e014      	b.n	80054bc <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 8005492:	bf00      	nop
 8005494:	e012      	b.n	80054bc <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 8005496:	bf00      	nop
}
 8005498:	e010      	b.n	80054bc <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 800549a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800549e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <http_cb+0x234>
 80054aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054ae:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f47f af0f 	bne.w	80052da <http_cb+0x52>
}
 80054bc:	bf00      	nop
 80054be:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}
 80054c6:	bf00      	nop
 80054c8:	08013368 	.word	0x08013368

080054cc <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f001 f9a7 	bl	8006834 <mg_listen>
 80054e6:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <mg_http_listen+0x28>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4a03      	ldr	r2, [pc, #12]	; (8005500 <mg_http_listen+0x34>)
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 80054f4:	697b      	ldr	r3, [r7, #20]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	08005289 	.word	0x08005289

08005504 <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <zeromem+0x26>
    while (len--) *buf++ = 0;
 8005514:	e004      	b.n	8005520 <zeromem+0x1c>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	1e5a      	subs	r2, r3, #1
 8005524:	603a      	str	r2, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f5      	bne.n	8005516 <zeromem+0x12>
  }
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <roundup>:

static size_t roundup(size_t size, size_t align) {
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <roundup+0x26>
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4413      	add	r3, r2
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	e000      	b.n	800555e <roundup+0x28>
 800555c:	687b      	ldr	r3, [r7, #4]
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800556c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005570:	b088      	sub	sp, #32
 8005572:	af02      	add	r7, sp, #8
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8005578:	2301      	movs	r3, #1
 800557a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4619      	mov	r1, r3
 8005582:	6838      	ldr	r0, [r7, #0]
 8005584:	f7ff ffd7 	bl	8005536 <roundup>
 8005588:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d117      	bne.n	80055c0 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f7ff ffb2 	bl	8005504 <zeromem>
    free(io->buf);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f00b ff29 	bl	80113fc <free>
    io->buf = NULL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	e052      	b.n	8005666 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d04d      	beq.n	8005666 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	2001      	movs	r0, #1
 80055ce:	f00b feef 	bl	80113b0 <calloc>
 80055d2:	4603      	mov	r3, r0
 80055d4:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d028      	beq.n	800562e <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bf28      	it	cs
 80055e6:	4613      	movcs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <mg_iobuf_resize+0x9a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d006      	beq.n	8005606 <mg_iobuf_resize+0x9a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4619      	mov	r1, r3
 8005600:	6938      	ldr	r0, [r7, #16]
 8005602:	f00c f998 	bl	8011936 <memmove>
      zeromem(io->buf, io->size);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7ff ff77 	bl	8005504 <zeromem>
      free(io->buf);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f00b feee 	bl	80113fc <free>
      io->buf = (unsigned char *) p;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	605a      	str	r2, [r3, #4]
 800562c:	e01b      	b.n	8005666 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8005632:	4b10      	ldr	r3, [pc, #64]	; (8005674 <mg_iobuf_resize+0x108>)
 8005634:	f640 1255 	movw	r2, #2389	; 0x955
 8005638:	490f      	ldr	r1, [pc, #60]	; (8005678 <mg_iobuf_resize+0x10c>)
 800563a:	2001      	movs	r0, #1
 800563c:	f000 fef4 	bl	8006428 <mg_log_prefix>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00f      	beq.n	8005666 <mg_iobuf_resize+0xfa>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	4698      	mov	r8, r3
 800564e:	4691      	mov	r9, r2
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	461c      	mov	r4, r3
 8005656:	4615      	mov	r5, r2
 8005658:	e9cd 4500 	strd	r4, r5, [sp]
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	4806      	ldr	r0, [pc, #24]	; (800567c <mg_iobuf_resize+0x110>)
 8005662:	f000 ff3b 	bl	80064dc <mg_log>
    }
  }
  return ok;
 8005666:	697b      	ldr	r3, [r7, #20]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005672:	bf00      	nop
 8005674:	08014098 	.word	0x08014098
 8005678:	080127ac 	.word	0x080127ac
 800567c:	080133b4 	.word	0x080133b4

08005680 <mg_iobuf_del>:
  if (ofs > io->len) io->len += ofs - io->len;
  io->len += len;
  return len;
}

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d902      	bls.n	800569c <mg_iobuf_del+0x1c>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	441a      	add	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d904      	bls.n	80056b4 <mg_iobuf_del+0x34>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d012      	beq.n	80056e2 <mg_iobuf_del+0x62>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	18d0      	adds	r0, r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	440b      	add	r3, r1
 80056ce:	18d1      	adds	r1, r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	f00c f92a 	bl	8011936 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <mg_iobuf_del+0x80>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6899      	ldr	r1, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	1acb      	subs	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff ff02 	bl	8005504 <zeromem>
  io->len -= len;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	609a      	str	r2, [r3, #8]
  return len;
 800570c:	687b      	ldr	r3, [r7, #4]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800571e:	2100      	movs	r1, #0
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff ff23 	bl	800556c <mg_iobuf_resize>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <escapeseq+0x12>
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <escapeseq+0x20>)
 8005740:	e000      	b.n	8005744 <escapeseq+0x14>
 8005742:	4b04      	ldr	r3, [pc, #16]	; (8005754 <escapeseq+0x24>)
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	080133c0 	.word	0x080133c0
 8005754:	080133c8 	.word	0x080133c8

08005758 <json_esc>:

static char json_esc(int c, int esc) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8005762:	6838      	ldr	r0, [r7, #0]
 8005764:	f7ff ffe4 	bl	8005730 <escapeseq>
 8005768:	6138      	str	r0, [r7, #16]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ffda 	bl	8005730 <escapeseq>
 800577c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e010      	b.n	80057a6 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4293      	cmp	r3, r2
 800578e:	d107      	bne.n	80057a0 <json_esc+0x48>
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	e007      	b.n	80057b0 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	3301      	adds	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1ea      	bne.n	8005784 <json_esc+0x2c>
  }
  return 0;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e02e      	b.n	8005826 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4413      	add	r3, r2
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b5c      	cmp	r3, #92	; 0x5c
 80057d2:	d114      	bne.n	80057fe <mg_pass_string+0x46>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	dd0f      	ble.n	80057fe <mg_pass_string+0x46>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	4413      	add	r3, r2
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff ffb4 	bl	8005758 <json_esc>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <mg_pass_string+0x46>
      i++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e010      	b.n	8005820 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4413      	add	r3, r2
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800580a:	f06f 0301 	mvn.w	r3, #1
 800580e:	e010      	b.n	8005832 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b22      	cmp	r3, #34	; 0x22
 800581a:	d101      	bne.n	8005820 <mg_pass_string+0x68>
      return i;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	e008      	b.n	8005832 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	dbcc      	blt.n	80057c8 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800582e:	f06f 0301 	mvn.w	r3, #1
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	0000      	movs	r0, r0
 800583c:	0000      	movs	r0, r0
	...

08005840 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b090      	sub	sp, #64	; 0x40
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 8005858:	2300      	movs	r3, #0
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
 800585c:	2301      	movs	r3, #1
 800585e:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 8005860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	da0a      	bge.n	800587e <mg_atod+0x3e>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b2d      	cmp	r3, #45	; 0x2d
 800586e:	d106      	bne.n	800587e <mg_atod+0x3e>
    sign = -1, i++;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	633b      	str	r3, [r7, #48]	; 0x30
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	3301      	adds	r3, #1
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
 800587c:	e00a      	b.n	8005894 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800587e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	da27      	bge.n	80058d6 <mg_atod+0x96>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b2b      	cmp	r3, #43	; 0x2b
 800588c:	d123      	bne.n	80058d6 <mg_atod+0x96>
    i++;
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	3301      	adds	r3, #1
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005894:	e01f      	b.n	80058d6 <mg_atod+0x96>
    d *= 10.0;
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	4b9d      	ldr	r3, [pc, #628]	; (8005b10 <mg_atod+0x2d0>)
 800589c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058a0:	f7fa feda 	bl	8000658 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    d += p[i] - '0';
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	3b30      	subs	r3, #48	; 0x30
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fa fe64 	bl	8000584 <__aeabi_i2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058c4:	f7fa fd12 	bl	80002ec <__adddf3>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	3301      	adds	r3, #1
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
 80058d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	da0b      	bge.n	80058f6 <mg_atod+0xb6>
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b2f      	cmp	r3, #47	; 0x2f
 80058e8:	d905      	bls.n	80058f6 <mg_atod+0xb6>
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b39      	cmp	r3, #57	; 0x39
 80058f4:	d9cf      	bls.n	8005896 <mg_atod+0x56>
  }
  d *= sign;
 80058f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f8:	f7fa fe44 	bl	8000584 <__aeabi_i2d>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005904:	f7fa fea8 	bl	8000658 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8005910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	da59      	bge.n	80059cc <mg_atod+0x18c>
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b2e      	cmp	r3, #46	; 0x2e
 8005922:	d153      	bne.n	80059cc <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005930:	a375      	add	r3, pc, #468	; (adr r3, 8005b08 <mg_atod+0x2c8>)
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	3301      	adds	r3, #1
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005940:	e023      	b.n	800598a <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	3b30      	subs	r3, #48	; 0x30
 800594c:	4618      	mov	r0, r3
 800594e:	f7fa fe19 	bl	8000584 <__aeabi_i2d>
 8005952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005956:	f7fa fe7f 	bl	8000658 <__aeabi_dmul>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005962:	f7fa fcc3 	bl	80002ec <__adddf3>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      base /= 10.0;
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	4b67      	ldr	r3, [pc, #412]	; (8005b10 <mg_atod+0x2d0>)
 8005974:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005978:	f7fa ff98 	bl	80008ac <__aeabi_ddiv>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	3301      	adds	r3, #1
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
 800598a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	da0b      	bge.n	80059aa <mg_atod+0x16a>
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b2f      	cmp	r3, #47	; 0x2f
 800599c:	d905      	bls.n	80059aa <mg_atod+0x16a>
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b39      	cmp	r3, #57	; 0x39
 80059a8:	d9cb      	bls.n	8005942 <mg_atod+0x102>
    }
    d += frac * sign;
 80059aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ac:	f7fa fdea 	bl	8000584 <__aeabi_i2d>
 80059b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b4:	f7fa fe50 	bl	8000658 <__aeabi_dmul>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80059c0:	f7fa fc94 	bl	80002ec <__adddf3>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 80059cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	f280 8085 	bge.w	8005ae0 <mg_atod+0x2a0>
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b65      	cmp	r3, #101	; 0x65
 80059e0:	d005      	beq.n	80059ee <mg_atod+0x1ae>
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b45      	cmp	r3, #69	; 0x45
 80059ec:	d178      	bne.n	8005ae0 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
    i++;
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	3301      	adds	r3, #1
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 80059fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	da0a      	bge.n	8005a1a <mg_atod+0x1da>
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b2d      	cmp	r3, #45	; 0x2d
 8005a0e:	d104      	bne.n	8005a1a <mg_atod+0x1da>
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	3301      	adds	r3, #1
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8005a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	da19      	bge.n	8005a56 <mg_atod+0x216>
 8005a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b2b      	cmp	r3, #43	; 0x2b
 8005a2c:	d113      	bne.n	8005a56 <mg_atod+0x216>
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a30:	3301      	adds	r3, #1
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005a34:	e00f      	b.n	8005a56 <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	4619      	mov	r1, r3
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	637a      	str	r2, [r7, #52]	; 0x34
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	3b30      	subs	r3, #48	; 0x30
 8005a52:	440b      	add	r3, r1
 8005a54:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	da0f      	bge.n	8005a7e <mg_atod+0x23e>
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b2f      	cmp	r3, #47	; 0x2f
 8005a68:	d909      	bls.n	8005a7e <mg_atod+0x23e>
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b39      	cmp	r3, #57	; 0x39
 8005a74:	d803      	bhi.n	8005a7e <mg_atod+0x23e>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005a7c:	dbdb      	blt.n	8005a36 <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <mg_atod+0x24a>
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	425b      	negs	r3, r3
 8005a88:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	e00d      	b.n	8005aac <mg_atod+0x26c>
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <mg_atod+0x2d0>)
 8005a96:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a9a:	f7fa fddd 	bl	8000658 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	dbed      	blt.n	8005a90 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e00d      	b.n	8005ad6 <mg_atod+0x296>
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <mg_atod+0x2d0>)
 8005ac0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005ac4:	f7fa fef2 	bl	80008ac <__aeabi_ddiv>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	425b      	negs	r3, r3
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	dbec      	blt.n	8005aba <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <mg_atod+0x2ac>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aea:	601a      	str	r2, [r3, #0]
  return d;
 8005aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005af0:	ec43 2b17 	vmov	d7, r2, r3
}
 8005af4:	eeb0 0a47 	vmov.f32	s0, s14
 8005af8:	eef0 0a67 	vmov.f32	s1, s15
 8005afc:	3740      	adds	r7, #64	; 0x40
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	f3af 8000 	nop.w
 8005b08:	9999999a 	.word	0x9999999a
 8005b0c:	3fb99999 	.word	0x3fb99999
 8005b10:	40240000 	.word	0x40240000

08005b14 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b09b      	sub	sp, #108	; 0x6c
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	f107 0408 	add.w	r4, r7, #8
 8005b1e:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8005b34:	2300      	movs	r3, #0
 8005b36:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 8005b40:	2300      	movs	r3, #0
 8005b42:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 8005b44:	2301      	movs	r3, #1
 8005b46:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8005b48:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b52:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <mg_json_get+0x4c>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b24      	cmp	r3, #36	; 0x24
 8005b66:	d002      	beq.n	8005b6e <mg_json_get+0x5a>
 8005b68:	f06f 0301 	mvn.w	r3, #1
 8005b6c:	e2e2      	b.n	8006134 <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8005b6e:	2300      	movs	r3, #0
 8005b70:	663b      	str	r3, [r7, #96]	; 0x60
 8005b72:	e2d8      	b.n	8006126 <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 8005b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b78:	4413      	add	r3, r2
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8005b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	f000 82c8 	beq.w	800611a <mg_json_get+0x606>
 8005b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b8e:	2b09      	cmp	r3, #9
 8005b90:	f000 82c3 	beq.w	800611a <mg_json_get+0x606>
 8005b94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b98:	2b0a      	cmp	r3, #10
 8005b9a:	f000 82be 	beq.w	800611a <mg_json_get+0x606>
 8005b9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ba2:	2b0d      	cmp	r3, #13
 8005ba4:	f000 82b9 	beq.w	800611a <mg_json_get+0x606>
    switch (expecting) {
 8005ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	f200 82b7 	bhi.w	8006120 <mg_json_get+0x60c>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <mg_json_get+0xa4>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005eb1 	.word	0x08005eb1
 8005bc0:	0800603b 	.word	0x0800603b
 8005bc4:	08006051 	.word	0x08006051
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8005bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d101      	bne.n	8005bd4 <mg_json_get+0xc0>
 8005bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 8005bd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bd8:	2b7b      	cmp	r3, #123	; 0x7b
 8005bda:	d12b      	bne.n	8005c34 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bde:	2b1d      	cmp	r3, #29
 8005be0:	dd02      	ble.n	8005be8 <mg_json_get+0xd4>
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295
 8005be6:	e2a5      	b.n	8006134 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8005be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d114      	bne.n	8005c1a <mg_json_get+0x106>
 8005bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bfa:	d10e      	bne.n	8005c1a <mg_json_get+0x106>
 8005bfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d10a      	bne.n	8005c1a <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8005c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c06:	3301      	adds	r3, #1
 8005c08:	657b      	str	r3, [r7, #84]	; 0x54
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c18:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8005c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c20:	3368      	adds	r3, #104	; 0x68
 8005c22:	443b      	add	r3, r7
 8005c24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005c28:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8005c32:	e275      	b.n	8006120 <mg_json_get+0x60c>
        } else if (c == '[') {
 8005c34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c38:	2b5b      	cmp	r3, #91	; 0x5b
 8005c3a:	d14e      	bne.n	8005cda <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c3e:	2b1d      	cmp	r3, #29
 8005c40:	dd02      	ble.n	8005c48 <mg_json_get+0x134>
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	e275      	b.n	8006134 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8005c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d13a      	bne.n	8005cc6 <mg_json_get+0x1b2>
 8005c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b5b      	cmp	r3, #91	; 0x5b
 8005c5a:	d134      	bne.n	8005cc6 <mg_json_get+0x1b2>
 8005c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d130      	bne.n	8005cc6 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8005c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c66:	3301      	adds	r3, #1
 8005c68:	657b      	str	r3, [r7, #84]	; 0x54
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c70:	2300      	movs	r3, #0
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005c74:	2300      	movs	r3, #0
 8005c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c78:	e010      	b.n	8005c9c <mg_json_get+0x188>
              ei *= 10;
 8005c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	3b30      	subs	r3, #48	; 0x30
 8005c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c92:	4413      	add	r3, r2
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c98:	3301      	adds	r3, #1
 8005c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b5d      	cmp	r3, #93	; 0x5d
 8005ca6:	d005      	beq.n	8005cb4 <mg_json_get+0x1a0>
 8005ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e2      	bne.n	8005c7a <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8005cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <mg_json_get+0x1b2>
 8005cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 8005cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ccc:	3368      	adds	r3, #104	; 0x68
 8005cce:	443b      	add	r3, r7
 8005cd0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005cd4:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8005cd8:	e222      	b.n	8006120 <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 8005cda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cde:	2b5d      	cmp	r3, #93	; 0x5d
 8005ce0:	d13a      	bne.n	8005d58 <mg_json_get+0x244>
 8005ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dd37      	ble.n	8005d58 <mg_json_get+0x244>
          MG_EOO(']');
 8005ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d106      	bne.n	8005cfe <mg_json_get+0x1ea>
 8005cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d002      	beq.n	8005cfe <mg_json_get+0x1ea>
 8005cf8:	f06f 0302 	mvn.w	r3, #2
 8005cfc:	e21a      	b.n	8006134 <mg_json_get+0x620>
 8005cfe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d04:	3b01      	subs	r3, #1
 8005d06:	3368      	adds	r3, #104	; 0x68
 8005d08:	443b      	add	r3, r7
 8005d0a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005d0e:	3302      	adds	r3, #2
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d002      	beq.n	8005d1a <mg_json_get+0x206>
 8005d14:	f06f 0301 	mvn.w	r3, #1
 8005d18:	e20c      	b.n	8006134 <mg_json_get+0x620>
 8005d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d24:	429a      	cmp	r2, r3
 8005d26:	f040 809c 	bne.w	8005e62 <mg_json_get+0x34e>
 8005d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f040 8095 	bne.w	8005e62 <mg_json_get+0x34e>
 8005d38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	f040 8090 	bne.w	8005e62 <mg_json_get+0x34e>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <mg_json_get+0x240>
 8005d48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d56:	e1ed      	b.n	8006134 <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8005d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d5c:	2b74      	cmp	r3, #116	; 0x74
 8005d5e:	d113      	bne.n	8005d88 <mg_json_get+0x274>
 8005d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d62:	3303      	adds	r3, #3
 8005d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d66:	429a      	cmp	r2, r3
 8005d68:	dd0e      	ble.n	8005d88 <mg_json_get+0x274>
 8005d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d6e:	4413      	add	r3, r2
 8005d70:	2204      	movs	r2, #4
 8005d72:	4998      	ldr	r1, [pc, #608]	; (8005fd4 <mg_json_get+0x4c0>)
 8005d74:	4618      	mov	r0, r3
 8005d76:	f00b fdce 	bl	8011916 <memcmp>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <mg_json_get+0x274>
          i += 3;
 8005d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d82:	3303      	adds	r3, #3
 8005d84:	663b      	str	r3, [r7, #96]	; 0x60
 8005d86:	e06c      	b.n	8005e62 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8005d88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d8c:	2b6e      	cmp	r3, #110	; 0x6e
 8005d8e:	d113      	bne.n	8005db8 <mg_json_get+0x2a4>
 8005d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d92:	3303      	adds	r3, #3
 8005d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d96:	429a      	cmp	r2, r3
 8005d98:	dd0e      	ble.n	8005db8 <mg_json_get+0x2a4>
 8005d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9e:	4413      	add	r3, r2
 8005da0:	2204      	movs	r2, #4
 8005da2:	498d      	ldr	r1, [pc, #564]	; (8005fd8 <mg_json_get+0x4c4>)
 8005da4:	4618      	mov	r0, r3
 8005da6:	f00b fdb6 	bl	8011916 <memcmp>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <mg_json_get+0x2a4>
          i += 3;
 8005db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db2:	3303      	adds	r3, #3
 8005db4:	663b      	str	r3, [r7, #96]	; 0x60
 8005db6:	e054      	b.n	8005e62 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8005db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dbc:	2b66      	cmp	r3, #102	; 0x66
 8005dbe:	d113      	bne.n	8005de8 <mg_json_get+0x2d4>
 8005dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	dd0e      	ble.n	8005de8 <mg_json_get+0x2d4>
 8005dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dce:	4413      	add	r3, r2
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	4982      	ldr	r1, [pc, #520]	; (8005fdc <mg_json_get+0x4c8>)
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f00b fd9e 	bl	8011916 <memcmp>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <mg_json_get+0x2d4>
          i += 4;
 8005de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de2:	3304      	adds	r3, #4
 8005de4:	663b      	str	r3, [r7, #96]	; 0x60
 8005de6:	e03c      	b.n	8005e62 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005de8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dec:	2b2d      	cmp	r3, #45	; 0x2d
 8005dee:	d007      	beq.n	8005e00 <mg_json_get+0x2ec>
 8005df0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005df4:	2b2f      	cmp	r3, #47	; 0x2f
 8005df6:	d916      	bls.n	8005e26 <mg_json_get+0x312>
 8005df8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dfc:	2b39      	cmp	r3, #57	; 0x39
 8005dfe:	d812      	bhi.n	8005e26 <mg_json_get+0x312>
          int numlen = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8005e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e08:	18d0      	adds	r0, r2, r3
 8005e0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f107 0210 	add.w	r2, r7, #16
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7ff fd13 	bl	8005840 <mg_atod>
          i += numlen - 1;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e20:	4413      	add	r3, r2
 8005e22:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005e24:	e01d      	b.n	8005e62 <mg_json_get+0x34e>
        } else if (c == '"') {
 8005e26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e2a:	2b22      	cmp	r3, #34	; 0x22
 8005e2c:	d116      	bne.n	8005e5c <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8005e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e30:	3301      	adds	r3, #1
 8005e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e34:	18d0      	adds	r0, r2, r3
 8005e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	4619      	mov	r1, r3
 8005e40:	f7ff fcba 	bl	80057b8 <mg_pass_string>
 8005e44:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 8005e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	da01      	bge.n	8005e50 <mg_json_get+0x33c>
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4e:	e171      	b.n	8006134 <mg_json_get+0x620>
          i += n + 1;
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	3301      	adds	r3, #1
 8005e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e56:	4413      	add	r3, r2
 8005e58:	663b      	str	r3, [r7, #96]	; 0x60
 8005e5a:	e002      	b.n	8005e62 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8005e5c:	f06f 0301 	mvn.w	r3, #1
 8005e60:	e168      	b.n	8006134 <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 8005e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d114      	bne.n	8005e94 <mg_json_get+0x380>
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10e      	bne.n	8005e94 <mg_json_get+0x380>
 8005e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d10a      	bne.n	8005e94 <mg_json_get+0x380>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <mg_json_get+0x37c>
 8005e84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e92:	e14f      	b.n	8006134 <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 8005e94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d105      	bne.n	8005ea8 <mg_json_get+0x394>
 8005e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	db02      	blt.n	8005ea8 <mg_json_get+0x394>
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 8005eae:	e137      	b.n	8006120 <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 8005eb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005eb4:	2b22      	cmp	r3, #34	; 0x22
 8005eb6:	d170      	bne.n	8005f9a <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8005eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eba:	3301      	adds	r3, #1
 8005ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ebe:	18d0      	adds	r0, r2, r3
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f7ff fc75 	bl	80057b8 <mg_pass_string>
 8005ece:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da01      	bge.n	8005eda <mg_json_get+0x3c6>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	e12c      	b.n	8006134 <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8005eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	4413      	add	r3, r2
 8005ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	dc02      	bgt.n	8005eee <mg_json_get+0x3da>
 8005ee8:	f06f 0302 	mvn.w	r3, #2
 8005eec:	e122      	b.n	8006134 <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8005eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	da02      	bge.n	8005efc <mg_json_get+0x3e8>
 8005ef6:	f06f 0302 	mvn.w	r3, #2
 8005efa:	e11b      	b.n	8006134 <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8005efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d109      	bne.n	8005f18 <mg_json_get+0x404>
 8005f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f06:	3b01      	subs	r3, #1
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f10:	d002      	beq.n	8005f18 <mg_json_get+0x404>
 8005f12:	f06f 0302 	mvn.w	r3, #2
 8005f16:	e10d      	b.n	8006134 <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8005f18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d133      	bne.n	8005f88 <mg_json_get+0x474>
 8005f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f22:	3b01      	subs	r3, #1
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f2c:	d12c      	bne.n	8005f88 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8005f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f30:	3301      	adds	r3, #1
 8005f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f34:	18d0      	adds	r0, r2, r3
 8005f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f00b fd28 	bl	8011994 <strncmp>
 8005f44:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11e      	bne.n	8005f88 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005f4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	4413      	add	r3, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4413      	add	r3, r2
 8005f56:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005f5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	4413      	add	r3, r2
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f6c:	d008      	beq.n	8005f80 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8005f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	4413      	add	r3, r2
 8005f74:	461a      	mov	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005f7c:	2b5b      	cmp	r3, #91	; 0x5b
 8005f7e:	d103      	bne.n	8005f88 <mg_json_get+0x474>
            pos += n;
 8005f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	4413      	add	r3, r2
 8005f86:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f8e:	4413      	add	r3, r2
 8005f90:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 8005f92:	2302      	movs	r3, #2
 8005f94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8005f98:	e0c1      	b.n	800611e <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 8005f9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f9e:	2b7d      	cmp	r3, #125	; 0x7d
 8005fa0:	d148      	bne.n	8006034 <mg_json_get+0x520>
          MG_EOO('}');
 8005fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d106      	bne.n	8005fb8 <mg_json_get+0x4a4>
 8005faa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d002      	beq.n	8005fb8 <mg_json_get+0x4a4>
 8005fb2:	f06f 0302 	mvn.w	r3, #2
 8005fb6:	e0bd      	b.n	8006134 <mg_json_get+0x620>
 8005fb8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	3368      	adds	r3, #104	; 0x68
 8005fc2:	443b      	add	r3, r7
 8005fc4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005fc8:	3302      	adds	r3, #2
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d008      	beq.n	8005fe0 <mg_json_get+0x4cc>
 8005fce:	f06f 0301 	mvn.w	r3, #1
 8005fd2:	e0af      	b.n	8006134 <mg_json_get+0x620>
 8005fd4:	080133d0 	.word	0x080133d0
 8005fd8:	080133d8 	.word	0x080133d8
 8005fdc:	080133e0 	.word	0x080133e0
 8005fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d114      	bne.n	8006018 <mg_json_get+0x504>
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10e      	bne.n	8006018 <mg_json_get+0x504>
 8005ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d10a      	bne.n	8006018 <mg_json_get+0x504>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <mg_json_get+0x500>
 8006008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800600a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006016:	e08d      	b.n	8006134 <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 8006018:	2303      	movs	r3, #3
 800601a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 800601e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006022:	429a      	cmp	r2, r3
 8006024:	d17b      	bne.n	800611e <mg_json_get+0x60a>
 8006026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006028:	2b00      	cmp	r3, #0
 800602a:	db78      	blt.n	800611e <mg_json_get+0x60a>
 800602c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602e:	3301      	adds	r3, #1
 8006030:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8006032:	e074      	b.n	800611e <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 8006034:	f06f 0301 	mvn.w	r3, #1
 8006038:	e07c      	b.n	8006134 <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 800603a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800603e:	2b3a      	cmp	r3, #58	; 0x3a
 8006040:	d103      	bne.n	800604a <mg_json_get+0x536>
          expecting = S_VALUE;
 8006042:	2300      	movs	r3, #0
 8006044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006048:	e06a      	b.n	8006120 <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 800604a:	f06f 0301 	mvn.w	r3, #1
 800604e:	e071      	b.n	8006134 <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8006050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006052:	2b00      	cmp	r3, #0
 8006054:	dc02      	bgt.n	800605c <mg_json_get+0x548>
          return MG_JSON_INVALID;
 8006056:	f06f 0301 	mvn.w	r3, #1
 800605a:	e06b      	b.n	8006134 <mg_json_get+0x620>
        } else if (c == ',') {
 800605c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006060:	2b2c      	cmp	r3, #44	; 0x2c
 8006062:	d10d      	bne.n	8006080 <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8006064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006066:	3b01      	subs	r3, #1
 8006068:	3368      	adds	r3, #104	; 0x68
 800606a:	443b      	add	r3, r7
 800606c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006070:	2b7b      	cmp	r3, #123	; 0x7b
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800607e:	e04f      	b.n	8006120 <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 8006080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006084:	2b5d      	cmp	r3, #93	; 0x5d
 8006086:	d003      	beq.n	8006090 <mg_json_get+0x57c>
 8006088:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800608c:	2b7d      	cmp	r3, #125	; 0x7d
 800608e:	d13f      	bne.n	8006110 <mg_json_get+0x5fc>
          MG_EOO('O');
 8006090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006094:	429a      	cmp	r2, r3
 8006096:	d106      	bne.n	80060a6 <mg_json_get+0x592>
 8006098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <mg_json_get+0x592>
 80060a0:	f06f 0302 	mvn.w	r3, #2
 80060a4:	e046      	b.n	8006134 <mg_json_get+0x620>
 80060a6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80060aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ac:	3b01      	subs	r3, #1
 80060ae:	3368      	adds	r3, #104	; 0x68
 80060b0:	443b      	add	r3, r7
 80060b2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80060b6:	3302      	adds	r3, #2
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d002      	beq.n	80060c2 <mg_json_get+0x5ae>
 80060bc:	f06f 0301 	mvn.w	r3, #1
 80060c0:	e038      	b.n	8006134 <mg_json_get+0x620>
 80060c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c4:	3b01      	subs	r3, #1
 80060c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d114      	bne.n	80060fa <mg_json_get+0x5e6>
 80060d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10e      	bne.n	80060fa <mg_json_get+0x5e6>
 80060dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d10a      	bne.n	80060fa <mg_json_get+0x5e6>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <mg_json_get+0x5e2>
 80060ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f8:	e01c      	b.n	8006134 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 80060fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060fe:	429a      	cmp	r2, r3
 8006100:	d109      	bne.n	8006116 <mg_json_get+0x602>
 8006102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006104:	2b00      	cmp	r3, #0
 8006106:	db06      	blt.n	8006116 <mg_json_get+0x602>
 8006108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610a:	3301      	adds	r3, #1
 800610c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610e:	e002      	b.n	8006116 <mg_json_get+0x602>
          return MG_JSON_INVALID;
 8006110:	f06f 0301 	mvn.w	r3, #1
 8006114:	e00e      	b.n	8006134 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006116:	bf00      	nop
        break;
 8006118:	e002      	b.n	8006120 <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <mg_json_get+0x60c>
        break;
 800611e:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006122:	3301      	adds	r3, #1
 8006124:	663b      	str	r3, [r7, #96]	; 0x60
 8006126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612a:	429a      	cmp	r2, r3
 800612c:	f6ff ad22 	blt.w	8005b74 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006130:	f06f 0302 	mvn.w	r3, #2
}
 8006134:	4618      	mov	r0, r3
 8006136:	376c      	adds	r7, #108	; 0x6c
 8006138:	46bd      	mov	sp, r7
 800613a:	bd90      	pop	{r4, r7, pc}

0800613c <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b089      	sub	sp, #36	; 0x24
 8006140:	af00      	add	r7, sp, #0
 8006142:	f107 0408 	add.w	r4, r7, #8
 8006146:	e884 0003 	stmia.w	r4, {r0, r1}
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006152:	f107 0314 	add.w	r3, r7, #20
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	f107 0108 	add.w	r1, r7, #8
 800615c:	c903      	ldmia	r1, {r0, r1}
 800615e:	f7ff fcd9 	bl	8005b14 <mg_json_get>
 8006162:	61b8      	str	r0, [r7, #24]
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	db25      	blt.n	80061b6 <mg_json_get_num+0x7a>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	4413      	add	r3, r2
 8006170:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006172:	2b2d      	cmp	r3, #45	; 0x2d
 8006174:	d00b      	beq.n	800618e <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	4413      	add	r3, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b2f      	cmp	r3, #47	; 0x2f
 8006180:	d919      	bls.n	80061b6 <mg_json_get_num+0x7a>
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b39      	cmp	r3, #57	; 0x39
 800618c:	d813      	bhi.n	80061b6 <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00e      	beq.n	80061b2 <mg_json_get_num+0x76>
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	4413      	add	r3, r2
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	2200      	movs	r2, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff fb4e 	bl	8005840 <mg_atod>
 80061a4:	eeb0 7a40 	vmov.f32	s14, s0
 80061a8:	eef0 7a60 	vmov.f32	s15, s1
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 80061b2:	2301      	movs	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
  }
  return found;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3724      	adds	r7, #36	; 0x24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd90      	pop	{r4, r7, pc}

080061ca <mg_json_unescape>:
    found = 1;
  }
  return found;
}

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 80061ca:	b590      	push	{r4, r7, lr}
 80061cc:	b089      	sub	sp, #36	; 0x24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	f107 0408 	add.w	r4, r7, #8
 80061d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80061dc:	2300      	movs	r3, #0
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e065      	b.n	80062b2 <mg_json_unescape+0xe8>
    if (s.ptr[i] == '\\' && i + 5 < s.len && s.ptr[i + 1] == 'u') {
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b5c      	cmp	r3, #92	; 0x5c
 80061f0:	d12d      	bne.n	800624e <mg_json_unescape+0x84>
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	1d5a      	adds	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d228      	bcs.n	800624e <mg_json_unescape+0x84>
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3301      	adds	r3, #1
 8006202:	4413      	add	r3, r2
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b75      	cmp	r3, #117	; 0x75
 8006208:	d121      	bne.n	800624e <mg_json_unescape+0x84>
      //  \uXXXX escape. We could process a simple one-byte chars
      // \u00xx from the ASCII range. More complex chars would require
      // dragging in a UTF8 library, which is too much for us
      if (s.ptr[i + 2] != '0' || s.ptr[i + 3] != '0') return false;  // Give up
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	3302      	adds	r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b30      	cmp	r3, #48	; 0x30
 8006216:	d106      	bne.n	8006226 <mg_json_unescape+0x5c>
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	3303      	adds	r3, #3
 800621e:	4413      	add	r3, r2
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b30      	cmp	r3, #48	; 0x30
 8006224:	d001      	beq.n	800622a <mg_json_unescape+0x60>
 8006226:	2300      	movs	r3, #0
 8006228:	e05a      	b.n	80062e0 <mg_json_unescape+0x116>
      ((unsigned char *) to)[j] = (unsigned char) mg_unhexn(s.ptr + i + 4, 2);
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3304      	adds	r3, #4
 8006230:	4413      	add	r3, r2
 8006232:	2102      	movs	r1, #2
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fb13 	bl	8007860 <mg_unhexn>
 800623a:	4601      	mov	r1, r0
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	4413      	add	r3, r2
 8006242:	b2ca      	uxtb	r2, r1
 8006244:	701a      	strb	r2, [r3, #0]

      i += 5;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3305      	adds	r3, #5
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	e02b      	b.n	80062a6 <mg_json_unescape+0xdc>
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b5c      	cmp	r3, #92	; 0x5c
 8006258:	d11d      	bne.n	8006296 <mg_json_unescape+0xcc>
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d218      	bcs.n	8006296 <mg_json_unescape+0xcc>
      char c = json_esc(s.ptr[i + 1], 0);
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3301      	adds	r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fa71 	bl	8005758 <json_esc>
 8006276:	4603      	mov	r3, r0
 8006278:	75fb      	strb	r3, [r7, #23]
      if (c == 0) return false;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <mg_json_unescape+0xba>
 8006280:	2300      	movs	r3, #0
 8006282:	e02d      	b.n	80062e0 <mg_json_unescape+0x116>
      to[j] = c;
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	4413      	add	r3, r2
 800628a:	7dfa      	ldrb	r2, [r7, #23]
 800628c:	701a      	strb	r2, [r3, #0]
      i++;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3301      	adds	r3, #1
 8006292:	61fb      	str	r3, [r7, #28]
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 8006294:	e007      	b.n	80062a6 <mg_json_unescape+0xdc>
    } else {
      to[j] = s.ptr[i];
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	441a      	add	r2, r3
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	440b      	add	r3, r1
 80062a2:	7812      	ldrb	r2, [r2, #0]
 80062a4:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	3301      	adds	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d203      	bcs.n	80062c2 <mg_json_unescape+0xf8>
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d391      	bcc.n	80061e6 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d301      	bcc.n	80062ce <mg_json_unescape+0x104>
 80062ca:	2300      	movs	r3, #0
 80062cc:	e008      	b.n	80062e0 <mg_json_unescape+0x116>
  if (n > 0) to[j] = '\0';
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <mg_json_unescape+0x114>
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	4413      	add	r3, r2
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]
  return true;
 80062de:	2301      	movs	r3, #1
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3724      	adds	r7, #36	; 0x24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}

080062e8 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	f107 0308 	add.w	r3, r7, #8
 80062f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80062f6:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	f107 0314 	add.w	r3, r7, #20
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	f107 0108 	add.w	r1, r7, #8
 800630a:	c903      	ldmia	r1, {r0, r1}
 800630c:	f7ff fc02 	bl	8005b14 <mg_json_get>
 8006310:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.ptr[off] == '"') {
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	2b00      	cmp	r3, #0
 8006316:	db30      	blt.n	800637a <mg_json_get_str+0x92>
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b01      	cmp	r3, #1
 800631c:	dd2d      	ble.n	800637a <mg_json_get_str+0x92>
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	4413      	add	r3, r2
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b22      	cmp	r3, #34	; 0x22
 8006328:	d127      	bne.n	800637a <mg_json_get_str+0x92>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4619      	mov	r1, r3
 800632e:	2001      	movs	r0, #1
 8006330:	f00b f83e 	bl	80113b0 <calloc>
 8006334:	4603      	mov	r3, r0
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01d      	beq.n	800637a <mg_json_get_str+0x92>
        !mg_json_unescape(mg_str_n(json.ptr + off + 1, (size_t) (len - 2)),
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	3301      	adds	r3, #1
 8006344:	18d1      	adds	r1, r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	3b02      	subs	r3, #2
 800634a:	461a      	mov	r2, r3
 800634c:	f107 0318 	add.w	r3, r7, #24
 8006350:	4618      	mov	r0, r3
 8006352:	f000 ff4e 	bl	80071f2 <mg_str_n>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635a:	f107 0118 	add.w	r1, r7, #24
 800635e:	c903      	ldmia	r1, {r0, r1}
 8006360:	f7ff ff33 	bl	80061ca <mg_json_unescape>
 8006364:	4603      	mov	r3, r0
 8006366:	f083 0301 	eor.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <mg_json_get_str+0x92>
                          result, (size_t) len)) {
      free(result);
 8006370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006372:	f00b f843 	bl	80113fc <free>
      result = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return result;
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800637c:	4618      	mov	r0, r3
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <logc+0x20>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a05      	ldr	r2, [pc, #20]	; (80063a8 <logc+0x24>)
 8006394:	6811      	ldr	r1, [r2, #0]
 8006396:	79fa      	ldrb	r2, [r7, #7]
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000023c 	.word	0x2000023c
 80063a8:	200005cc 	.word	0x200005cc

080063ac <logs>:

static void logs(const char *buf, size_t len) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e009      	b.n	80063d0 <logs+0x24>
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff ffdd 	bl	8006384 <logc>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d3f1      	bcc.n	80063bc <logs+0x10>
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <mg_log_set>:

void mg_log_set(int log_level) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <mg_log_set+0x34>)
 80063ee:	f640 22c8 	movw	r2, #2760	; 0xac8
 80063f2:	490a      	ldr	r1, [pc, #40]	; (800641c <mg_log_set+0x38>)
 80063f4:	2003      	movs	r0, #3
 80063f6:	f000 f817 	bl	8006428 <mg_log_prefix>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <mg_log_set+0x24>
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	4807      	ldr	r0, [pc, #28]	; (8006420 <mg_log_set+0x3c>)
 8006404:	f000 f86a 	bl	80064dc <mg_log>
  s_level = log_level;
 8006408:	4a06      	ldr	r2, [pc, #24]	; (8006424 <mg_log_set+0x40>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6013      	str	r3, [r2, #0]
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	080140a8 	.word	0x080140a8
 800641c:	080127ac 	.word	0x080127ac
 8006420:	080133e8 	.word	0x080133e8
 8006424:	20000238 	.word	0x20000238

08006428 <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b099      	sub	sp, #100	; 0x64
 800642c:	af06      	add	r7, sp, #24
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 8006436:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <mg_log_prefix+0xac>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	429a      	cmp	r2, r3
 800643e:	dc43      	bgt.n	80064c8 <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 8006440:	212f      	movs	r1, #47	; 0x2f
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f00b fab8 	bl	80119b8 <strrchr>
 8006448:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 800644a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644c:	2b00      	cmp	r3, #0
 800644e:	d104      	bne.n	800645a <mg_log_prefix+0x32>
 8006450:	215c      	movs	r1, #92	; 0x5c
 8006452:	68b8      	ldr	r0, [r7, #8]
 8006454:	f00b fab0 	bl	80119b8 <strrchr>
 8006458:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800645a:	f001 fd55 	bl	8007f08 <mg_millis>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006464:	2900      	cmp	r1, #0
 8006466:	d002      	beq.n	800646e <mg_log_prefix+0x46>
 8006468:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800646a:	3101      	adds	r1, #1
 800646c:	e000      	b.n	8006470 <mg_log_prefix+0x48>
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	f107 0414 	add.w	r4, r7, #20
 8006474:	6838      	ldr	r0, [r7, #0]
 8006476:	9005      	str	r0, [sp, #20]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	9004      	str	r0, [sp, #16]
 800647c:	9103      	str	r1, [sp, #12]
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	9102      	str	r1, [sp, #8]
 8006482:	e9cd 2300 	strd	r2, r3, [sp]
 8006486:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <mg_log_prefix+0xb0>)
 8006488:	2129      	movs	r1, #41	; 0x29
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fb4a 	bl	8006b24 <mg_snprintf>
 8006490:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8006492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006494:	2b27      	cmp	r3, #39	; 0x27
 8006496:	d90a      	bls.n	80064ae <mg_log_prefix+0x86>
 8006498:	2327      	movs	r3, #39	; 0x27
 800649a:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 800649c:	e007      	b.n	80064ae <mg_log_prefix+0x86>
 800649e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	643a      	str	r2, [r7, #64]	; 0x40
 80064a4:	3348      	adds	r3, #72	; 0x48
 80064a6:	443b      	add	r3, r7
 80064a8:	2220      	movs	r2, #32
 80064aa:	f803 2c34 	strb.w	r2, [r3, #-52]
 80064ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b0:	2b28      	cmp	r3, #40	; 0x28
 80064b2:	d9f4      	bls.n	800649e <mg_log_prefix+0x76>
    logs(buf, n - 1);
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff ff74 	bl	80063ac <logs>
    return true;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <mg_log_prefix+0xa2>
  } else {
    return false;
 80064c8:	2300      	movs	r3, #0
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	374c      	adds	r7, #76	; 0x4c
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd90      	pop	{r4, r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000238 	.word	0x20000238
 80064d8:	08013400 	.word	0x08013400

080064dc <mg_log>:

void mg_log(const char *fmt, ...) {
 80064dc:	b40f      	push	{r0, r1, r2, r3}
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 80064e4:	f107 0314 	add.w	r3, r7, #20
 80064e8:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80064ea:	4b09      	ldr	r3, [pc, #36]	; (8006510 <mg_log+0x34>)
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <mg_log+0x38>)
 80064f0:	6819      	ldr	r1, [r3, #0]
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	f7fb fe85 	bl	8002204 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 80064fa:	2102      	movs	r1, #2
 80064fc:	4806      	ldr	r0, [pc, #24]	; (8006518 <mg_log+0x3c>)
 80064fe:	f7ff ff55 	bl	80063ac <logs>
}
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800650c:	b004      	add	sp, #16
 800650e:	4770      	bx	lr
 8006510:	2000023c 	.word	0x2000023c
 8006514:	200005cc 	.word	0x200005cc
 8006518:	08012944 	.word	0x08012944

0800651c <nibble>:

static unsigned char nibble(unsigned c) {
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b09      	cmp	r3, #9
 8006528:	d804      	bhi.n	8006534 <nibble+0x18>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	3330      	adds	r3, #48	; 0x30
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e003      	b.n	800653c <nibble+0x20>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	3357      	adds	r3, #87	; 0x57
 800653a:	b2db      	uxtb	r3, r3
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800655c:	2300      	movs	r3, #0
 800655e:	623b      	str	r3, [r7, #32]
 8006560:	e07a      	b.n	8006658 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	2b00      	cmp	r3, #0
 800656a:	d13a      	bne.n	80065e2 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00f      	beq.n	8006592 <mg_hexdump+0x4a>
 8006572:	2102      	movs	r1, #2
 8006574:	484c      	ldr	r0, [pc, #304]	; (80066a8 <mg_hexdump+0x160>)
 8006576:	f7ff ff19 	bl	80063ac <logs>
 800657a:	f107 030c 	add.w	r3, r7, #12
 800657e:	2110      	movs	r1, #16
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff ff13 	bl	80063ac <logs>
 8006586:	200a      	movs	r0, #10
 8006588:	f7ff fefc 	bl	8006384 <logc>
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	0b1b      	lsrs	r3, r3, #12
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff ffbe 	bl	800651c <nibble>
 80065a0:	4603      	mov	r3, r0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff feee 	bl	8006384 <logc>
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff ffb3 	bl	800651c <nibble>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fee3 	bl	8006384 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff ffa8 	bl	800651c <nibble>
 80065cc:	4603      	mov	r3, r0
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fed8 	bl	8006384 <logc>
 80065d4:	2030      	movs	r0, #48	; 0x30
 80065d6:	f7ff fed5 	bl	8006384 <logc>
 80065da:	2103      	movs	r1, #3
 80065dc:	4833      	ldr	r0, [pc, #204]	; (80066ac <mg_hexdump+0x164>)
 80065de:	f7ff fee5 	bl	80063ac <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	4413      	add	r3, r2
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff ff94 	bl	800651c <nibble>
 80065f4:	4603      	mov	r3, r0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fec4 	bl	8006384 <logc>
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	4413      	add	r3, r2
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff ff87 	bl	800651c <nibble>
 800660e:	4603      	mov	r3, r0
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff feb7 	bl	8006384 <logc>
    logc(' ');                                         // Space after hex number
 8006616:	2020      	movs	r0, #32
 8006618:	f7ff feb4 	bl	8006384 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	4413      	add	r3, r2
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b1f      	cmp	r3, #31
 8006626:	d90a      	bls.n	800663e <mg_hexdump+0xf6>
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	4413      	add	r3, r2
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b7e      	cmp	r3, #126	; 0x7e
 8006632:	d804      	bhi.n	800663e <mg_hexdump+0xf6>
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	4413      	add	r3, r2
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	e000      	b.n	8006640 <mg_hexdump+0xf8>
 800663e:	222e      	movs	r2, #46	; 0x2e
 8006640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800664a:	3328      	adds	r3, #40	; 0x28
 800664c:	443b      	add	r3, r7
 800664e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	3301      	adds	r3, #1
 8006656:	623b      	str	r3, [r7, #32]
 8006658:	6a3a      	ldr	r2, [r7, #32]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d380      	bcc.n	8006562 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8006660:	e00d      	b.n	800667e <mg_hexdump+0x136>
 8006662:	2103      	movs	r1, #3
 8006664:	4811      	ldr	r0, [pc, #68]	; (80066ac <mg_hexdump+0x164>)
 8006666:	f7ff fea1 	bl	80063ac <logs>
 800666a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8006674:	3328      	adds	r3, #40	; 0x28
 8006676:	443b      	add	r3, r7
 8006678:	2220      	movs	r2, #32
 800667a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800667e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006682:	2b0f      	cmp	r3, #15
 8006684:	d9ed      	bls.n	8006662 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8006686:	2102      	movs	r1, #2
 8006688:	4807      	ldr	r0, [pc, #28]	; (80066a8 <mg_hexdump+0x160>)
 800668a:	f7ff fe8f 	bl	80063ac <logs>
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	2110      	movs	r1, #16
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff fe89 	bl	80063ac <logs>
 800669a:	200a      	movs	r0, #10
 800669c:	f7ff fe72 	bl	8006384 <logc>
}
 80066a0:	bf00      	nop
 80066a2:	3728      	adds	r7, #40	; 0x28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	08013414 	.word	0x08013414
 80066ac:	08013418 	.word	0x08013418

080066b0 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <mg_vprintf+0x34>)
 80066ce:	f7fb fd99 	bl	8002204 <mg_vxprintf>
  return c->send.len - old;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1ad3      	subs	r3, r2, r3
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	08006ab5 	.word	0x08006ab5

080066e8 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 80066e8:	b40e      	push	{r1, r2, r3}
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80066f6:	f107 0320 	add.w	r3, r7, #32
 80066fa:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 80066fc:	f107 0308 	add.w	r3, r7, #8
 8006700:	461a      	mov	r2, r3
 8006702:	69f9      	ldr	r1, [r7, #28]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ffd3 	bl	80066b0 <mg_vprintf>
 800670a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800670c:	68fb      	ldr	r3, [r7, #12]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006718:	b003      	add	sp, #12
 800671a:	4770      	bx	lr

0800671c <mg_alloc_conn>:
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
         mg_aton6(str, addr);
}

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	3390      	adds	r3, #144	; 0x90
 800672a:	4619      	mov	r1, r3
 800672c:	2001      	movs	r0, #1
 800672e:	f00a fe3f 	bl	80113b0 <calloc>
 8006732:	4603      	mov	r3, r0
 8006734:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d013      	beq.n	8006764 <mg_alloc_conn+0x48>
    c->mgr = mgr;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006748:	645a      	str	r2, [r3, #68]	; 0x44
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	61da      	str	r2, [r3, #28]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 8006764:	68fb      	ldr	r3, [r7, #12]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7fa fff3 	bl	8001764 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e002      	b.n	800678c <mg_close_conn+0x1c>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	429a      	cmp	r2, r3
 8006794:	d1f7      	bne.n	8006786 <mg_close_conn+0x16>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d103      	bne.n	80067b2 <mg_close_conn+0x42>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d103      	bne.n	80067c6 <mg_close_conn+0x56>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80067c6:	2200      	movs	r2, #0
 80067c8:	2109      	movs	r1, #9
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fa ffe9 	bl	80017a2 <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 80067d0:	4b15      	ldr	r3, [pc, #84]	; (8006828 <mg_close_conn+0xb8>)
 80067d2:	f640 626c 	movw	r2, #3692	; 0xe6c
 80067d6:	4915      	ldr	r1, [pc, #84]	; (800682c <mg_close_conn+0xbc>)
 80067d8:	2003      	movs	r0, #3
 80067da:	f7ff fe25 	bl	8006428 <mg_log_prefix>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <mg_close_conn+0x84>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	461a      	mov	r2, r3
 80067ee:	4810      	ldr	r0, [pc, #64]	; (8006830 <mg_close_conn+0xc0>)
 80067f0:	f7ff fe74 	bl	80064dc <mg_log>

  mg_tls_free(c);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 f9bd 	bl	8007b74 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3338      	adds	r3, #56	; 0x38
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe ff89 	bl	8005716 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3348      	adds	r3, #72	; 0x48
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe ff84 	bl	8005716 <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 800680e:	2290      	movs	r2, #144	; 0x90
 8006810:	2100      	movs	r1, #0
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f00b f8a9 	bl	801196a <memset>
  free(c);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f00a fdef 	bl	80113fc <free>
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	080140b4 	.word	0x080140b4
 800682c:	080127ac 	.word	0x080127ac
 8006830:	080134b0 	.word	0x080134b0

08006834 <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff ff68 	bl	800671c <mg_alloc_conn>
 800684c:	6178      	str	r0, [r7, #20]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10e      	bne.n	8006872 <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 8006854:	4b40      	ldr	r3, [pc, #256]	; (8006958 <mg_listen+0x124>)
 8006856:	f640 6292 	movw	r2, #3730	; 0xe92
 800685a:	4940      	ldr	r1, [pc, #256]	; (800695c <mg_listen+0x128>)
 800685c:	2001      	movs	r0, #1
 800685e:	f7ff fde3 	bl	8006428 <mg_log_prefix>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d071      	beq.n	800694c <mg_listen+0x118>
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	483d      	ldr	r0, [pc, #244]	; (8006960 <mg_listen+0x12c>)
 800686c:	f7ff fe36 	bl	80064dc <mg_log>
 8006870:	e06c      	b.n	800694c <mg_listen+0x118>
  } else if (!mg_open_listener(c, url)) {
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	f004 fab1 	bl	800addc <mg_open_listener>
 800687a:	4603      	mov	r3, r0
 800687c:	f083 0301 	eor.w	r3, r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d018      	beq.n	80068b8 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8006886:	4b34      	ldr	r3, [pc, #208]	; (8006958 <mg_listen+0x124>)
 8006888:	f640 6294 	movw	r2, #3732	; 0xe94
 800688c:	4933      	ldr	r1, [pc, #204]	; (800695c <mg_listen+0x128>)
 800688e:	2001      	movs	r0, #1
 8006890:	f7ff fdca 	bl	8006428 <mg_log_prefix>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <mg_listen+0x78>
 800689a:	f00b f8fb 	bl	8011a94 <__errno>
 800689e:	4603      	mov	r3, r0
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	482f      	ldr	r0, [pc, #188]	; (8006964 <mg_listen+0x130>)
 80068a8:	f7ff fe18 	bl	80064dc <mg_log>
    free(c);
 80068ac:	6978      	ldr	r0, [r7, #20]
 80068ae:	f00a fda5 	bl	80113fc <free>
    c = NULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e049      	b.n	800694c <mg_listen+0x118>
  } else {
    c->is_listening = 1;
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80068c6:	2204      	movs	r2, #4
 80068c8:	4927      	ldr	r1, [pc, #156]	; (8006968 <mg_listen+0x134>)
 80068ca:	68b8      	ldr	r0, [r7, #8]
 80068cc:	f00b f862 	bl	8011994 <strncmp>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bf0c      	ite	eq
 80068d6:	2301      	moveq	r3, #1
 80068d8:	2300      	movne	r3, #0
 80068da:	b2d9      	uxtb	r1, r3
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80068e2:	f361 0300 	bfi	r3, r1, #0, #1
 80068e6:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 8006904:	2200      	movs	r2, #0
 8006906:	2101      	movs	r1, #1
 8006908:	6978      	ldr	r0, [r7, #20]
 800690a:	f7fa ff4a 	bl	80017a2 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1; // Accepted connection must
 800690e:	68b8      	ldr	r0, [r7, #8]
 8006910:	f001 f96c 	bl	8007bec <mg_url_is_ssl>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d006      	beq.n	8006928 <mg_listen+0xf4>
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8006920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006924:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 8006928:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <mg_listen+0x124>)
 800692a:	f640 629f 	movw	r2, #3743	; 0xe9f
 800692e:	490b      	ldr	r1, [pc, #44]	; (800695c <mg_listen+0x128>)
 8006930:	2003      	movs	r0, #3
 8006932:	f7ff fd79 	bl	8006428 <mg_log_prefix>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <mg_listen+0x118>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4809      	ldr	r0, [pc, #36]	; (800696c <mg_listen+0x138>)
 8006948:	f7ff fdc8 	bl	80064dc <mg_log>
  }
  return c;
 800694c:	697b      	ldr	r3, [r7, #20]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	080140c4 	.word	0x080140c4
 800695c:	080127ac 	.word	0x080127ac
 8006960:	080134d8 	.word	0x080134d8
 8006964:	080134e0 	.word	0x080134e0
 8006968:	080134d0 	.word	0x080134d0
 800696c:	080128b8 	.word	0x080128b8

08006970 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af04      	add	r7, sp, #16
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800697c:	2128      	movs	r1, #40	; 0x28
 800697e:	2001      	movs	r0, #1
 8006980:	f00a fd16 	bl	80113b0 <calloc>
 8006984:	4603      	mov	r3, r0
 8006986:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d014      	beq.n	80069b8 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	9302      	str	r3, [sp, #8]
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	f000 ffd2 	bl	800794e <mg_timer_init>
    t->id = mgr->timerid++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	1c59      	adds	r1, r3, #1
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6211      	str	r1, [r2, #32]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	6013      	str	r3, [r2, #0]
  }
  return t;
 80069b8:	697b      	ldr	r3, [r7, #20]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 80069cc:	2244      	movs	r2, #68	; 0x44
 80069ce:	2100      	movs	r1, #0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f00a ffca 	bl	801196a <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80069e4:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a04      	ldr	r2, [pc, #16]	; (80069fc <mg_mgr_init+0x38>)
 80069ea:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a04      	ldr	r2, [pc, #16]	; (8006a00 <mg_mgr_init+0x3c>)
 80069f0:	60da      	str	r2, [r3, #12]
}
 80069f2:	bf00      	nop
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	08013510 	.word	0x08013510
 8006a00:	08013524 	.word	0x08013524

08006a04 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	71fb      	strb	r3, [r7, #7]
 8006a10:	4613      	mov	r3, r2
 8006a12:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8006a18:	79bb      	ldrb	r3, [r7, #6]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <mg_pfn_iobuf_private+0x36>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	1c9a      	adds	r2, r3, #2
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d906      	bls.n	8006a3a <mg_pfn_iobuf_private+0x36>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	3302      	adds	r3, #2
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7fe fd99 	bl	800556c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	1c9a      	adds	r2, r3, #2
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d811      	bhi.n	8006a6c <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	1c58      	adds	r0, r3, #1
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	6088      	str	r0, [r1, #8]
 8006a56:	4413      	add	r3, r2
 8006a58:	79fa      	ldrb	r2, [r7, #7]
 8006a5a:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	4413      	add	r3, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8006a6a:	e00f      	b.n	8006a8c <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d209      	bcs.n	8006a8c <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	1c58      	adds	r0, r3, #1
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	6088      	str	r0, [r1, #8]
 8006a86:	4413      	add	r3, r2
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
}
 8006a8c:	bf00      	nop
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	6039      	str	r1, [r7, #0]
 8006a9e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff ffac 	bl	8006a04 <mg_pfn_iobuf_private>
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ff9c 	bl	8006a04 <mg_pfn_iobuf_private>
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	2300      	movs	r3, #0
 8006aec:	61fb      	str	r3, [r7, #28]
 8006aee:	2300      	movs	r3, #0
 8006af0:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8006af2:	f107 0114 	add.w	r1, r7, #20
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4809      	ldr	r0, [pc, #36]	; (8006b20 <mg_vsnprintf+0x4c>)
 8006afc:	f7fb fb82 	bl	8002204 <mg_vxprintf>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 8006b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d204      	bcs.n	8006b14 <mg_vsnprintf+0x40>
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	4413      	add	r3, r2
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
  return n;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3728      	adds	r7, #40	; 0x28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	08006a95 	.word	0x08006a95

08006b24 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8006b24:	b40c      	push	{r2, r3}
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8006b36:	f107 0308 	add.w	r3, r7, #8
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ffc8 	bl	8006ad4 <mg_vsnprintf>
 8006b44:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8006b46:	68fb      	ldr	r3, [r7, #12]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b52:	b002      	add	sp, #8
 8006b54:	4770      	bx	lr

08006b56 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	6039      	str	r1, [r7, #0]
 8006b60:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f00a fe8b 	bl	8011880 <putchar>
  (void) param;
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af04      	add	r7, sp, #16
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3302      	adds	r3, #2
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	4619      	mov	r1, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3303      	adds	r3, #3
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	9302      	str	r3, [sp, #8]
 8006b9e:	9101      	str	r1, [sp, #4]
 8006ba0:	9200      	str	r2, [sp, #0]
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <print_ip4+0x44>)
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7fb fb10 	bl	80021ce <mg_xprintf>
 8006bae:	4603      	mov	r3, r0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	08013544 	.word	0x08013544

08006bbc <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	b08e      	sub	sp, #56	; 0x38
 8006bc2:	af08      	add	r7, sp, #32
 8006bc4:	6178      	str	r0, [r7, #20]
 8006bc6:	6139      	str	r1, [r7, #16]
 8006bc8:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 f949 	bl	8007e66 <mg_ntohs>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3302      	adds	r3, #2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 f941 	bl	8007e66 <mg_ntohs>
 8006be4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006be6:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3304      	adds	r3, #4
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 f939 	bl	8007e66 <mg_ntohs>
 8006bf4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006bf6:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3306      	adds	r3, #6
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f001 f931 	bl	8007e66 <mg_ntohs>
 8006c04:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006c06:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 f929 	bl	8007e66 <mg_ntohs>
 8006c14:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006c16:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	330a      	adds	r3, #10
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 f921 	bl	8007e66 <mg_ntohs>
 8006c24:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006c26:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 f919 	bl	8007e66 <mg_ntohs>
 8006c34:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006c36:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	330e      	adds	r3, #14
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 f911 	bl	8007e66 <mg_ntohs>
 8006c44:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006c46:	9306      	str	r3, [sp, #24]
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	9205      	str	r2, [sp, #20]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	9204      	str	r2, [sp, #16]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	9303      	str	r3, [sp, #12]
 8006c54:	9602      	str	r6, [sp, #8]
 8006c56:	9501      	str	r5, [sp, #4]
 8006c58:	9400      	str	r4, [sp, #0]
 8006c5a:	4643      	mov	r3, r8
 8006c5c:	4a05      	ldr	r2, [pc, #20]	; (8006c74 <print_ip6+0xb8>)
 8006c5e:	6939      	ldr	r1, [r7, #16]
 8006c60:	6978      	ldr	r0, [r7, #20]
 8006c62:	f7fb fab4 	bl	80021ce <mg_xprintf>
 8006c66:	4603      	mov	r3, r0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c72:	bf00      	nop
 8006c74:	08013550 	.word	0x08013550

08006c78 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	1d19      	adds	r1, r3, #4
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6011      	str	r1, [r2, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff ff6c 	bl	8006b74 <print_ip4>
 8006c9c:	4603      	mov	r3, r0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	1d19      	adds	r1, r3, #4
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6011      	str	r1, [r2, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	7c9b      	ldrb	r3, [r3, #18]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d007      	beq.n	8006cd8 <mg_print_ip+0x32>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff ff74 	bl	8006bbc <print_ip6>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	e006      	b.n	8006ce6 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff ff48 	bl	8006b74 <print_ip4>
 8006ce4:	4603      	mov	r3, r0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af02      	add	r7, sp, #8
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	1d19      	adds	r1, r3, #4
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6011      	str	r1, [r2, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	8a1b      	ldrh	r3, [r3, #16]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 f8a9 	bl	8007e66 <mg_ntohs>
 8006d14:	4603      	mov	r3, r0
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <mg_print_ip_port+0x44>)
 8006d1e:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <mg_print_ip_port+0x48>)
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7fb fa53 	bl	80021ce <mg_xprintf>
 8006d28:	4603      	mov	r3, r0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	08006ca7 	.word	0x08006ca7
 8006d38:	0801356c 	.word	0x0801356c

08006d3c <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8006d3c:	b5b0      	push	{r4, r5, r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af06      	add	r7, sp, #24
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	1d19      	adds	r1, r3, #4
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461d      	mov	r5, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	3302      	adds	r3, #2
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	3303      	adds	r3, #3
 8006d70:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d72:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3304      	adds	r3, #4
 8006d78:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d7a:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3305      	adds	r3, #5
 8006d80:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	9403      	str	r4, [sp, #12]
 8006d86:	9002      	str	r0, [sp, #8]
 8006d88:	9101      	str	r1, [sp, #4]
 8006d8a:	9200      	str	r2, [sp, #0]
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	4a05      	ldr	r2, [pc, #20]	; (8006da4 <mg_print_mac+0x68>)
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7fb fa1b 	bl	80021ce <mg_xprintf>
 8006d98:	4603      	mov	r3, r0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bdb0      	pop	{r4, r5, r7, pc}
 8006da2:	bf00      	nop
 8006da4:	08013574 	.word	0x08013574

08006da8 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8006db4:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <mg_esc+0x74>)
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <mg_esc+0x78>)
 8006dba:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <mg_esc+0x1e>
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	e000      	b.n	8006dc8 <mg_esc+0x20>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e01b      	b.n	8006e04 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d112      	bne.n	8006dfe <mg_esc+0x56>
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <mg_esc+0x46>
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	e00f      	b.n	8006e0e <mg_esc+0x66>
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4413      	add	r3, r2
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	e007      	b.n	8006e0e <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3301      	adds	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1df      	bne.n	8006dcc <mg_esc+0x24>
  }
  return 0;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	080133c0 	.word	0x080133c0
 8006e20:	080133c8 	.word	0x080133c8

08006e24 <mg_escape>:

static char mg_escape(int c) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff ffba 	bl	8006da8 <mg_esc>
 8006e34:	4603      	mov	r3, r0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b088      	sub	sp, #32
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006e54:	2300      	movs	r3, #0
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	e023      	b.n	8006ea2 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff ffde 	bl	8006e24 <mg_escape>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00c      	beq.n	8006e8c <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	205c      	movs	r0, #92	; 0x5c
 8006e78:	4798      	blx	r3
 8006e7a:	7dfa      	ldrb	r2, [r7, #23]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e007      	b.n	8006e9c <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	781a      	ldrb	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d205      	bcs.n	8006eb6 <qcpy+0x78>
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1d1      	bne.n	8006e5a <qcpy+0x1c>
    }
  }
  return i + extra;
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	4413      	add	r3, r2
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	1d19      	adds	r1, r3, #4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6011      	str	r1, [r2, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	1d19      	adds	r1, r3, #4
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6011      	str	r1, [r2, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <mg_print_esc+0x42>
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <mg_print_esc+0x3e>
 8006ef8:	6938      	ldr	r0, [r7, #16]
 8006efa:	f7f9 f9e9 	bl	80002d0 <strlen>
 8006efe:	4603      	mov	r3, r0
 8006f00:	e000      	b.n	8006f04 <mg_print_esc+0x40>
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff ff96 	bl	8006e3e <qcpy>
 8006f12:	4603      	mov	r3, r0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8006f28:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4413      	add	r3, r2
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	1d1a      	adds	r2, r3, #4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d906      	bls.n	8006f5a <mg_queue_read_len+0x3e>
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <mg_queue_read_len+0x48>)
 8006f4e:	4a06      	ldr	r2, [pc, #24]	; (8006f68 <mg_queue_read_len+0x4c>)
 8006f50:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8006f54:	4805      	ldr	r0, [pc, #20]	; (8006f6c <mg_queue_read_len+0x50>)
 8006f56:	f00a fa09 	bl	801136c <__assert_func>
  return n;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	080135d8 	.word	0x080135d8
 8006f68:	080140d0 	.word	0x080140d0
 8006f6c:	080127ac 	.word	0x080127ac

08006f70 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8006f8c:	f3bf 8f5b 	dmb	ish
}
 8006f90:	bf00      	nop
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	2308      	movs	r3, #8
 8006fae:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d312      	bcc.n	8006fe2 <mg_queue_book+0x46>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	441a      	add	r2, r3
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	441a      	add	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d808      	bhi.n	8006fe2 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	1ad2      	subs	r2, r2, r3
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	e011      	b.n	8007006 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d30b      	bcc.n	8007006 <mg_queue_book+0x6a>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d206      	bcs.n	8007006 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff ffb8 	bl	8006f70 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	441a      	add	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	429a      	cmp	r2, r3
 8007018:	d207      	bcs.n	800702a <mg_queue_book+0x8e>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	1ad2      	subs	r2, r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <mg_queue_book+0xa4>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	3304      	adds	r3, #4
 800703a:	441a      	add	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	601a      	str	r2, [r3, #0]
  return space;
 8007040:	697b      	ldr	r3, [r7, #20]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	429a      	cmp	r2, r3
 8007064:	d013      	beq.n	800708e <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff ff58 	bl	8006f1c <mg_queue_read_len>
 800706c:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10c      	bne.n	800708e <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	429a      	cmp	r2, r3
 8007084:	d903      	bls.n	800708e <mg_queue_next+0x42>
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff ff48 	bl	8006f1c <mg_queue_read_len>
 800708c:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <mg_queue_next+0x58>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	3304      	adds	r3, #4
 800709e:	441a      	add	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	441a      	add	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d906      	bls.n	80070c2 <mg_queue_next+0x76>
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <mg_queue_next+0x80>)
 80070b6:	4a06      	ldr	r2, [pc, #24]	; (80070d0 <mg_queue_next+0x84>)
 80070b8:	f640 71e6 	movw	r1, #4070	; 0xfe6
 80070bc:	4805      	ldr	r0, [pc, #20]	; (80070d4 <mg_queue_next+0x88>)
 80070be:	f00a f955 	bl	801136c <__assert_func>
  return len;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	080135fc 	.word	0x080135fc
 80070d0:	080140e4 	.word	0x080140e4
 80070d4:	080127ac 	.word	0x080127ac

080070d8 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d106      	bne.n	80070f6 <mg_queue_add+0x1e>
 80070e8:	4b13      	ldr	r3, [pc, #76]	; (8007138 <mg_queue_add+0x60>)
 80070ea:	4a14      	ldr	r2, [pc, #80]	; (800713c <mg_queue_add+0x64>)
 80070ec:	f640 71eb 	movw	r1, #4075	; 0xfeb
 80070f0:	4813      	ldr	r0, [pc, #76]	; (8007140 <mg_queue_add+0x68>)
 80070f2:	f00a f93b 	bl	801136c <__assert_func>
  mg_queue_write_len(q, len);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff ff39 	bl	8006f70 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	4413      	add	r3, r2
 8007106:	f103 0208 	add.w	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d906      	bls.n	8007120 <mg_queue_add+0x48>
 8007112:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <mg_queue_add+0x6c>)
 8007114:	4a09      	ldr	r2, [pc, #36]	; (800713c <mg_queue_add+0x64>)
 8007116:	f640 71ed 	movw	r1, #4077	; 0xfed
 800711a:	4809      	ldr	r0, [pc, #36]	; (8007140 <mg_queue_add+0x68>)
 800711c:	f00a f926 	bl	801136c <__assert_func>
  q->head += len + sizeof(uint32_t);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	4413      	add	r3, r2
 8007128:	1d1a      	adds	r2, r3, #4
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60da      	str	r2, [r3, #12]
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08013618 	.word	0x08013618
 800713c:	080140f4 	.word	0x080140f4
 8007140:	080127ac 	.word	0x080127ac
 8007144:	08013620 	.word	0x08013620

08007148 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	4413      	add	r3, r2
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	1d1a      	adds	r2, r3, #4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	429a      	cmp	r2, r3
 800716c:	d906      	bls.n	800717c <mg_queue_del+0x34>
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <mg_queue_del+0x3c>)
 8007170:	4a05      	ldr	r2, [pc, #20]	; (8007188 <mg_queue_del+0x40>)
 8007172:	f640 71f3 	movw	r1, #4083	; 0xff3
 8007176:	4805      	ldr	r0, [pc, #20]	; (800718c <mg_queue_del+0x44>)
 8007178:	f00a f8f8 	bl	801136c <__assert_func>
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	08013650 	.word	0x08013650
 8007188:	08014104 	.word	0x08014104
 800718c:	080127ac 	.word	0x080127ac

08007190 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <mg_http_serve_ssi+0x24>)
 800719e:	2200      	movs	r2, #0
 80071a0:	f240 11f5 	movw	r1, #501	; 0x1f5
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7fc ff6b 	bl	8004080 <mg_http_reply>
  (void) root, (void) fullpath;
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	08013800 	.word	0x08013800

080071b8 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <mg_str_s+0x1e>
 80071cc:	6838      	ldr	r0, [r7, #0]
 80071ce:	f7f9 f87f 	bl	80002d0 <strlen>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e000      	b.n	80071d8 <mg_str_s+0x20>
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  return str;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	461a      	mov	r2, r3
 80071de:	f107 0308 	add.w	r3, r7, #8
 80071e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80071e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	617b      	str	r3, [r7, #20]
  return str;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	461a      	mov	r2, r3
 800720a:	f107 0310 	add.w	r3, r7, #16
 800720e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007212:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <mg_lower>:

int mg_lower(const char *s) {
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  int c = *s;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	dd05      	ble.n	8007242 <mg_lower+0x20>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b5a      	cmp	r3, #90	; 0x5a
 800723a:	dc02      	bgt.n	8007242 <mg_lower+0x20>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3320      	adds	r3, #32
 8007240:	60fb      	str	r3, [r7, #12]
  return c;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d01d      	beq.n	80072a2 <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	60fa      	str	r2, [r7, #12]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff ffd8 	bl	8007222 <mg_lower>
 8007272:	4604      	mov	r4, r0
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	60ba      	str	r2, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ffd1 	bl	8007222 <mg_lower>
 8007280:	4603      	mov	r3, r0
 8007282:	1ae3      	subs	r3, r4, r3
 8007284:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <mg_ncasecmp+0x52>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3b01      	subs	r3, #1
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <mg_ncasecmp+0x52>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3b01      	subs	r3, #1
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e1      	bne.n	8007266 <mg_ncasecmp+0x16>
  return diff;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd90      	pop	{r4, r7, pc}

080072ac <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 80072b6:	6838      	ldr	r0, [r7, #0]
 80072b8:	f7f9 f80a 	bl	80002d0 <strlen>
 80072bc:	6178      	str	r0, [r7, #20]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	bf28      	it	cs
 80072d0:	4613      	movcs	r3, r2
 80072d2:	461a      	mov	r2, r3
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	f00a fb5d 	bl	8011994 <strncmp>
 80072da:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <mg_vcmp+0x3e>
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	e000      	b.n	80072ec <mg_vcmp+0x40>
  return r;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 80072fe:	6838      	ldr	r0, [r7, #0]
 8007300:	f7f8 ffe6 	bl	80002d0 <strlen>
 8007304:	6178      	str	r0, [r7, #20]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	4293      	cmp	r3, r2
 8007316:	bf28      	it	cs
 8007318:	4613      	movcs	r3, r2
 800731a:	461a      	mov	r2, r3
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	f7ff ff97 	bl	8007250 <mg_ncasecmp>
 8007322:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <mg_vcasecmp+0x3e>
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	e000      	b.n	8007334 <mg_vcasecmp+0x40>
  return r;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 800733c:	b490      	push	{r4, r7}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	f107 0408 	add.w	r4, r7, #8
 8007346:	e884 0003 	stmia.w	r4, {r0, r1}
 800734a:	4639      	mov	r1, r7
 800734c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8007354:	e019      	b.n	800738a <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	4413      	add	r3, r2
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	429a      	cmp	r2, r3
 8007370:	da02      	bge.n	8007378 <mg_strcmp+0x3c>
 8007372:	f04f 33ff 	mov.w	r3, #4294967295
 8007376:	e01e      	b.n	80073b6 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	429a      	cmp	r2, r3
 800737e:	dd01      	ble.n	8007384 <mg_strcmp+0x48>
 8007380:	2301      	movs	r3, #1
 8007382:	e018      	b.n	80073b6 <mg_strcmp+0x7a>
    i++;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	3301      	adds	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	429a      	cmp	r2, r3
 8007390:	d203      	bcs.n	800739a <mg_strcmp+0x5e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	429a      	cmp	r2, r3
 8007398:	d3dd      	bcc.n	8007356 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d201      	bcs.n	80073a6 <mg_strcmp+0x6a>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e007      	b.n	80073b6 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d202      	bcs.n	80073b4 <mg_strcmp+0x78>
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	e000      	b.n	80073b6 <mg_strcmp+0x7a>
  return 0;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc90      	pop	{r4, r7}
 80073be:	4770      	bx	lr

080073c0 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	f107 0408 	add.w	r4, r7, #8
 80073ca:	e884 0003 	stmia.w	r4, {r0, r1}
 80073ce:	4639      	mov	r1, r7
 80073d0:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d901      	bls.n	80073e0 <mg_strstr+0x20>
 80073dc:	2300      	movs	r3, #0
 80073de:	e020      	b.n	8007422 <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <mg_strstr+0x2a>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	e01b      	b.n	8007422 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	e011      	b.n	8007414 <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	4413      	add	r3, r2
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f00a fa8b 	bl	8011916 <memcmp>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <mg_strstr+0x4e>
      return haystack.ptr + i;
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4413      	add	r3, r2
 800740c:	e009      	b.n	8007422 <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	3301      	adds	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	429a      	cmp	r2, r3
 800741e:	d9e7      	bls.n	80073f0 <mg_strstr+0x30>
    }
  }
  return NULL;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	bd90      	pop	{r4, r7, pc}

0800742a <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 800742a:	b490      	push	{r4, r7}
 800742c:	b088      	sub	sp, #32
 800742e:	af00      	add	r7, sp, #0
 8007430:	f107 0408 	add.w	r4, r7, #8
 8007434:	e884 0003 	stmia.w	r4, {r0, r1}
 8007438:	4639      	mov	r1, r7
 800743a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	2300      	movs	r3, #0
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80ad 	beq.w	80075b0 <mg_match+0x186>
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	2200      	movs	r2, #0
 8007460:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8007462:	e0a5      	b.n	80075b0 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	429a      	cmp	r2, r3
 800746a:	d24f      	bcs.n	800750c <mg_match+0xe2>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	429a      	cmp	r2, r3
 8007472:	d24b      	bcs.n	800750c <mg_match+0xe2>
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b3f      	cmp	r3, #63	; 0x3f
 800747e:	d009      	beq.n	8007494 <mg_match+0x6a>
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	4413      	add	r3, r2
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	440b      	add	r3, r1
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d13b      	bne.n	800750c <mg_match+0xe2>
      if (caps == NULL) {
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d031      	beq.n	80074fe <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	4413      	add	r3, r2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b3f      	cmp	r3, #63	; 0x3f
 80074a4:	d111      	bne.n	80074ca <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	441a      	add	r2, r3
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	2201      	movs	r2, #1
 80074b4:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	3308      	adds	r3, #8
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	2200      	movs	r2, #0
 80074c6:	605a      	str	r2, [r3, #4]
 80074c8:	e019      	b.n	80074fe <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d015      	beq.n	80074fe <mg_match+0xd4>
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d111      	bne.n	80074fe <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	441a      	add	r2, r3
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	3308      	adds	r3, #8
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	2200      	movs	r2, #0
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	3301      	adds	r3, #1
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	3301      	adds	r3, #1
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	e051      	b.n	80075b0 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	429a      	cmp	r2, r3
 8007512:	d222      	bcs.n	800755a <mg_match+0x130>
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	4413      	add	r3, r2
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b2a      	cmp	r3, #42	; 0x2a
 800751e:	d005      	beq.n	800752c <mg_match+0x102>
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b23      	cmp	r3, #35	; 0x23
 800752a:	d116      	bne.n	800755a <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <mg_match+0x120>
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <mg_match+0x120>
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	2200      	movs	r2, #0
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	441a      	add	r2, r3
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	61fa      	str	r2, [r7, #28]
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	3301      	adds	r3, #1
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	e02a      	b.n	80075b0 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d025      	beq.n	80075ac <mg_match+0x182>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	429a      	cmp	r2, r3
 8007566:	d821      	bhi.n	80075ac <mg_match+0x182>
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	4413      	add	r3, r2
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b23      	cmp	r3, #35	; 0x23
 8007572:	d005      	beq.n	8007580 <mg_match+0x156>
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	4413      	add	r3, r2
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b2f      	cmp	r3, #47	; 0x2f
 800757e:	d015      	beq.n	80075ac <mg_match+0x182>
      i = ni, j = nj;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	2b00      	cmp	r3, #0
 800758c:	d010      	beq.n	80075b0 <mg_match+0x186>
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10c      	bne.n	80075b0 <mg_match+0x186>
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d108      	bne.n	80075b0 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	3b08      	subs	r3, #8
 80075a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	2200      	movs	r2, #0
 80075a8:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 80075aa:	e001      	b.n	80075b0 <mg_match+0x186>
      }
    } else {
      return false;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e01e      	b.n	80075ee <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	f4ff af55 	bcc.w	8007464 <mg_match+0x3a>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	429a      	cmp	r2, r3
 80075c0:	f4ff af50 	bcc.w	8007464 <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d010      	beq.n	80075ec <mg_match+0x1c2>
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <mg_match+0x1c2>
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d108      	bne.n	80075ec <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	441a      	add	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	605a      	str	r2, [r3, #4]
  }
  return true;
 80075ec:	2301      	movs	r3, #1
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc90      	pop	{r4, r7}
 80075f6:	4770      	bx	lr

080075f8 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 8007606:	f107 0310 	add.w	r3, r7, #16
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff fdef 	bl	80071f2 <mg_str_n>
 8007614:	f107 0318 	add.w	r3, r7, #24
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	68f9      	ldr	r1, [r7, #12]
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fde8 	bl	80071f2 <mg_str_n>
 8007622:	2300      	movs	r3, #0
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	f107 0318 	add.w	r3, r7, #24
 800762a:	cb0c      	ldmia	r3, {r2, r3}
 800762c:	f107 0110 	add.w	r1, r7, #16
 8007630:	c903      	ldmia	r1, {r0, r1}
 8007632:	f7ff fefa 	bl	800742a <mg_match>
 8007636:	4603      	mov	r3, r0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e002      	b.n	800765a <mg_nce+0x1a>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	3301      	adds	r3, #1
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	4413      	add	r3, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	429a      	cmp	r2, r3
 8007664:	d909      	bls.n	800767a <mg_nce+0x3a>
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007676:	429a      	cmp	r2, r3
 8007678:	d1ec      	bne.n	8007654 <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	e002      	b.n	8007686 <mg_nce+0x46>
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3301      	adds	r3, #1
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	429a      	cmp	r2, r3
 800768c:	d207      	bcs.n	800769e <mg_nce+0x5e>
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	4413      	add	r3, r2
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b3d      	cmp	r3, #61	; 0x3d
 800769c:	d1f0      	bne.n	8007680 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <mg_nce+0x6a>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <mg_nce+0x76>
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <mg_nce+0x94>
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d204      	bcs.n	80076ce <mg_nce+0x8e>
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	4413      	add	r3, r2
 80076ca:	3301      	adds	r3, #1
 80076cc:	e000      	b.n	80076d0 <mg_nce+0x90>
 80076ce:	2300      	movs	r3, #0
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <mg_nce+0xb2>
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d204      	bcs.n	80076ec <mg_nce+0xac>
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	e000      	b.n	80076ee <mg_nce+0xae>
 80076ec:	2300      	movs	r3, #0
 80076ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f0:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4413      	add	r3, r2
 80076f8:	3301      	adds	r3, #1
 80076fa:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4293      	cmp	r3, r2
 8007702:	bf28      	it	cs
 8007704:	4613      	movcs	r3, r2
}
 8007706:	4618      	mov	r0, r3
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 8007712:	b590      	push	{r4, r7, lr}
 8007714:	b091      	sub	sp, #68	; 0x44
 8007716:	af04      	add	r7, sp, #16
 8007718:	6178      	str	r0, [r7, #20]
 800771a:	6139      	str	r1, [r7, #16]
 800771c:	60fa      	str	r2, [r7, #12]
 800771e:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 8007720:	2300      	movs	r3, #0
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28
 8007724:	2300      	movs	r3, #0
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
 8007728:	2300      	movs	r3, #0
 800772a:	623b      	str	r3, [r7, #32]
 800772c:	2300      	movs	r3, #0
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	2300      	movs	r3, #0
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <mg_split+0x32>
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <mg_split+0x36>
 8007744:	2300      	movs	r3, #0
 8007746:	e054      	b.n	80077f2 <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	f107 031c 	add.w	r3, r7, #28
 800775c:	9302      	str	r3, [sp, #8]
 800775e:	f107 0320 	add.w	r3, r7, #32
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	2200      	movs	r2, #0
 800776e:	f7ff ff67 	bl	8007640 <mg_nce>
 8007772:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00f      	beq.n	800779a <mg_split+0x88>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	18d1      	adds	r1, r2, r3
 8007782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007784:	693c      	ldr	r4, [r7, #16]
 8007786:	463b      	mov	r3, r7
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fd32 	bl	80071f2 <mg_str_n>
 800778e:	4622      	mov	r2, r4
 8007790:	463b      	mov	r3, r7
 8007792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007796:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00f      	beq.n	80077c0 <mg_split+0xae>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	18d1      	adds	r1, r2, r3
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	68fc      	ldr	r4, [r7, #12]
 80077ac:	463b      	mov	r3, r7
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff fd1f 	bl	80071f2 <mg_str_n>
 80077b4:	4622      	mov	r2, r4
 80077b6:	463b      	mov	r3, r7
 80077b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80077bc:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c6:	18d1      	adds	r1, r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	1ad2      	subs	r2, r2, r3
 80077d0:	697c      	ldr	r4, [r7, #20]
 80077d2:	463b      	mov	r3, r7
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fd0c 	bl	80071f2 <mg_str_n>
 80077da:	4622      	mov	r2, r4
 80077dc:	463b      	mov	r3, r7
 80077de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80077e2:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bf14      	ite	ne
 80077ec:	2301      	movne	r3, #1
 80077ee:	2300      	moveq	r3, #0
 80077f0:	b2db      	uxtb	r3, r3
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3734      	adds	r7, #52	; 0x34
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd90      	pop	{r4, r7, pc}

080077fa <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 8007806:	232c      	movs	r3, #44	; 0x2c
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff ff80 	bl	8007712 <mg_split>
 8007812:	4603      	mov	r3, r0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <mg_unhex_nimble>:
  }
  to[i] = '\0';
  return to;
}

static unsigned char mg_unhex_nimble(unsigned char c) {
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	2b2f      	cmp	r3, #47	; 0x2f
 800782a:	d906      	bls.n	800783a <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	2b39      	cmp	r3, #57	; 0x39
 8007830:	d803      	bhi.n	800783a <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8007832:	79fb      	ldrb	r3, [r7, #7]
 8007834:	3b30      	subs	r3, #48	; 0x30
 8007836:	b2db      	uxtb	r3, r3
 8007838:	e00c      	b.n	8007854 <mg_unhex_nimble+0x38>
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d906      	bls.n	800784e <mg_unhex_nimble+0x32>
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b46      	cmp	r3, #70	; 0x46
 8007844:	d803      	bhi.n	800784e <mg_unhex_nimble+0x32>
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	3b37      	subs	r3, #55	; 0x37
 800784a:	b2db      	uxtb	r3, r3
 800784c:	e002      	b.n	8007854 <mg_unhex_nimble+0x38>
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	3b57      	subs	r3, #87	; 0x57
 8007852:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 8007872:	2300      	movs	r3, #0
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	e011      	b.n	800789c <mg_unhexn+0x3c>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	60bb      	str	r3, [r7, #8]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff ffc8 	bl	800781c <mg_unhex_nimble>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4313      	orrs	r3, r2
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3301      	adds	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d3e9      	bcc.n	8007878 <mg_unhexn+0x18>
  return v;
 80078a4:	68bb      	ldr	r3, [r7, #8]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 80078ba:	2300      	movs	r3, #0
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e010      	b.n	80078e2 <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	4413      	add	r3, r2
 80078c6:	2102      	movs	r1, #2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff ffc9 	bl	8007860 <mg_unhexn>
 80078ce:	4601      	mov	r1, r0
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4413      	add	r3, r2
 80078d8:	b2ca      	uxtb	r2, r1
 80078da:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	3302      	adds	r3, #2
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d3ea      	bcc.n	80078c0 <mg_unhex+0x12>
  }
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  const char *s = path;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 8007900:	e01a      	b.n	8007938 <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	429a      	cmp	r2, r3
 8007908:	d007      	beq.n	800791a <mg_path_is_sane+0x26>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b2f      	cmp	r3, #47	; 0x2f
 8007910:	d003      	beq.n	800791a <mg_path_is_sane+0x26>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b5c      	cmp	r3, #92	; 0x5c
 8007918:	d10b      	bne.n	8007932 <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3301      	adds	r3, #1
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b2e      	cmp	r3, #46	; 0x2e
 8007922:	d106      	bne.n	8007932 <mg_path_is_sane+0x3e>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3302      	adds	r3, #2
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b2e      	cmp	r3, #46	; 0x2e
 800792c:	d101      	bne.n	8007932 <mg_path_is_sane+0x3e>
 800792e:	2300      	movs	r3, #0
 8007930:	e007      	b.n	8007942 <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3301      	adds	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e0      	bne.n	8007902 <mg_path_is_sane+0xe>
    }
  }
  return true;
 8007940:	2301      	movs	r3, #1
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007968:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	f04f 0300 	mov.w	r3, #0
 8007976:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	619a      	str	r2, [r3, #24]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	61da      	str	r2, [r3, #28]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	621a      	str	r2, [r3, #32]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	601a      	str	r2, [r3, #0]
}
 800799a:	bf00      	nop
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80079a6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6178      	str	r0, [r7, #20]
 80079b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 80079b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80079b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079bc:	eb10 0a02 	adds.w	sl, r0, r2
 80079c0:	eb41 0b03 	adc.w	fp, r1, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	4592      	cmp	sl, r2
 80079cc:	eb7b 0303 	sbcs.w	r3, fp, r3
 80079d0:	d206      	bcs.n	80079e0 <mg_timer_expired+0x3a>
 80079d2:	6979      	ldr	r1, [r7, #20]
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	d10d      	bne.n	8007a06 <mg_timer_expired+0x60>
 80079ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80079ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079f2:	1886      	adds	r6, r0, r2
 80079f4:	603e      	str	r6, [r7, #0]
 80079f6:	eb41 0303 	adc.w	r3, r1, r3
 80079fa:	607b      	str	r3, [r7, #4]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a02:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a10:	4290      	cmp	r0, r2
 8007a12:	eb71 0303 	sbcs.w	r3, r1, r3
 8007a16:	d201      	bcs.n	8007a1c <mg_timer_expired+0x76>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e022      	b.n	8007a62 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a26:	ebb0 0802 	subs.w	r8, r0, r2
 8007a2a:	eb61 0903 	sbc.w	r9, r1, r3
 8007a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a32:	4542      	cmp	r2, r8
 8007a34:	eb73 0309 	sbcs.w	r3, r3, r9
 8007a38:	d207      	bcs.n	8007a4a <mg_timer_expired+0xa4>
 8007a3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a42:	1884      	adds	r4, r0, r2
 8007a44:	eb41 0503 	adc.w	r5, r1, r3
 8007a48:	e007      	b.n	8007a5a <mg_timer_expired+0xb4>
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a54:	1884      	adds	r4, r0, r2
 8007a56:	eb41 0503 	adc.w	r5, r1, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8007a60:	2301      	movs	r3, #1
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a6c:	4770      	bx	lr

08007a6e <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8007a6e:	b590      	push	{r4, r7, lr}
 8007a70:	b08b      	sub	sp, #44	; 0x2c
 8007a72:	af02      	add	r7, sp, #8
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	e054      	b.n	8007b2c <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	d10d      	bne.n	8007aa8 <mg_timer_poll+0x3a>
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <mg_timer_poll+0x3a>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <mg_timer_poll+0x3c>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	76fb      	strb	r3, [r7, #27]
 8007aac:	7efb      	ldrb	r3, [r7, #27]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f103 0410 	add.w	r4, r3, #16
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac4:	e9cd 2300 	strd	r2, r3, [sp]
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4620      	mov	r0, r4
 8007ace:	f7ff ff6a 	bl	80079a6 <mg_timer_expired>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8007adc:	7efb      	ldrb	r3, [r7, #27]
 8007ade:	f083 0301 	eor.w	r3, r3, #1
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <mg_timer_poll+0x86>
 8007ae8:	7ebb      	ldrb	r3, [r7, #26]
 8007aea:	f083 0301 	eor.w	r3, r3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d118      	bne.n	8007b26 <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <mg_timer_poll+0x9e>
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d105      	bne.n	8007b18 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	6a12      	ldr	r2, [r2, #32]
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	f043 0204 	orr.w	r2, r3, #4
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	619a      	str	r2, [r3, #24]
 8007b24:	e000      	b.n	8007b28 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 8007b26:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1a7      	bne.n	8007a82 <mg_timer_poll+0x14>
  }
}
 8007b32:	bf00      	nop
 8007b34:	bf00      	nop
 8007b36:	3724      	adds	r7, #36	; 0x24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd90      	pop	{r4, r7, pc}

08007b3c <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, struct mg_str hostname) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	1d3b      	adds	r3, r7, #4
 8007b46:	e883 0006 	stmia.w	r3, {r1, r2}
  (void) hostname;
  mg_error(c, "TLS is not enabled");
 8007b4a:	4904      	ldr	r1, [pc, #16]	; (8007b5c <mg_tls_init+0x20>)
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f7f9 fe4b 	bl	80017e8 <mg_error>
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08013810 	.word	0x08013810

08007b60 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <mg_tls_recv+0x1e>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <mg_tls_recv+0x1e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <mg_tls_recv+0x22>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e001      	b.n	8007bae <mg_tls_recv+0x26>
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8007bba:	b480      	push	{r7}
 8007bbc:	b085      	sub	sp, #20
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <mg_tls_send+0x1e>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <mg_tls_send+0x1e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <mg_tls_send+0x22>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e001      	b.n	8007be0 <mg_tls_send+0x26>
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	4917      	ldr	r1, [pc, #92]	; (8007c54 <mg_url_is_ssl+0x68>)
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f009 fecb 	bl	8011994 <strncmp>
 8007bfe:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01f      	beq.n	8007c44 <mg_url_is_ssl+0x58>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007c04:	2206      	movs	r2, #6
 8007c06:	4914      	ldr	r1, [pc, #80]	; (8007c58 <mg_url_is_ssl+0x6c>)
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f009 fec3 	bl	8011994 <strncmp>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d017      	beq.n	8007c44 <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007c14:	2206      	movs	r2, #6
 8007c16:	4911      	ldr	r1, [pc, #68]	; (8007c5c <mg_url_is_ssl+0x70>)
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f009 febb 	bl	8011994 <strncmp>
 8007c1e:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00f      	beq.n	8007c44 <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007c24:	2204      	movs	r2, #4
 8007c26:	490e      	ldr	r1, [pc, #56]	; (8007c60 <mg_url_is_ssl+0x74>)
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f009 feb3 	bl	8011994 <strncmp>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <mg_url_is_ssl+0x58>
         strncmp(url, "tls:", 4) == 0;
 8007c34:	2204      	movs	r2, #4
 8007c36:	490b      	ldr	r1, [pc, #44]	; (8007c64 <mg_url_is_ssl+0x78>)
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f009 feab 	bl	8011994 <strncmp>
 8007c3e:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <mg_url_is_ssl+0x5c>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <mg_url_is_ssl+0x5e>
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	08013824 	.word	0x08013824
 8007c58:	0801382c 	.word	0x0801382c
 8007c5c:	08013834 	.word	0x08013834
 8007c60:	0801383c 	.word	0x0801383c
 8007c64:	08013844 	.word	0x08013844

08007c68 <urlparse>:

static struct url urlparse(const char *url) {
 8007c68:	b5b0      	push	{r4, r5, r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	221c      	movs	r2, #28
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f009 fe75 	bl	801196a <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8007c80:	2300      	movs	r3, #0
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
 8007c84:	e05b      	b.n	8007d3e <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8007c90:	d112      	bne.n	8007cb8 <urlparse+0x50>
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00f      	beq.n	8007cb8 <urlparse+0x50>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10c      	bne.n	8007cb8 <urlparse+0x50>
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8007caa:	d105      	bne.n	8007cb8 <urlparse+0x50>
      u.host = i + 1;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	3301      	adds	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e03f      	b.n	8007d38 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	4413      	add	r3, r2
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b5d      	cmp	r3, #93	; 0x5d
 8007cc2:	d102      	bne.n	8007cca <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	e036      	b.n	8007d38 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	4413      	add	r3, r2
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b3a      	cmp	r3, #58	; 0x3a
 8007cd4:	d109      	bne.n	8007cea <urlparse+0x82>
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d106      	bne.n	8007cea <urlparse+0x82>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <urlparse+0x82>
      u.port = i + 1;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e026      	b.n	8007d38 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	4413      	add	r3, r2
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b40      	cmp	r3, #64	; 0x40
 8007cf4:	d112      	bne.n	8007d1c <urlparse+0xb4>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10f      	bne.n	8007d1c <urlparse+0xb4>
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10c      	bne.n	8007d1c <urlparse+0xb4>
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <urlparse+0xb4>
      u.user = u.host;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	3301      	adds	r3, #1
 8007d14:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	e00d      	b.n	8007d38 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	4413      	add	r3, r2
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b2f      	cmp	r3, #47	; 0x2f
 8007d26:	d107      	bne.n	8007d38 <urlparse+0xd0>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <urlparse+0xd0>
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <urlparse+0xd0>
      u.uri = i;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	4413      	add	r3, r2
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d19d      	bne.n	8007c86 <urlparse+0x1e>
    }
  }
  u.end = i;
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	461d      	mov	r5, r3
 8007d52:	f107 0408 	add.w	r4, r7, #8
 8007d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d5a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007d5e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	3728      	adds	r7, #40	; 0x28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d6c <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	; 0x28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8007d74:	f107 0308 	add.w	r3, r7, #8
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff ff74 	bl	8007c68 <urlparse>
  unsigned short port = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8007d84:	2205      	movs	r2, #5
 8007d86:	4925      	ldr	r1, [pc, #148]	; (8007e1c <mg_url_port+0xb0>)
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f009 fe03 	bl	8011994 <strncmp>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d007      	beq.n	8007da4 <mg_url_port+0x38>
 8007d94:	2203      	movs	r2, #3
 8007d96:	4922      	ldr	r1, [pc, #136]	; (8007e20 <mg_url_port+0xb4>)
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f009 fdfb 	bl	8011994 <strncmp>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <mg_url_port+0x3c>
 8007da4:	2350      	movs	r3, #80	; 0x50
 8007da6:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8007da8:	2204      	movs	r2, #4
 8007daa:	491e      	ldr	r1, [pc, #120]	; (8007e24 <mg_url_port+0xb8>)
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f009 fdf1 	bl	8011994 <strncmp>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <mg_url_port+0x5c>
 8007db8:	2206      	movs	r2, #6
 8007dba:	491b      	ldr	r1, [pc, #108]	; (8007e28 <mg_url_port+0xbc>)
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f009 fde9 	bl	8011994 <strncmp>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <mg_url_port+0x62>
    port = 443;
 8007dc8:	f240 13bb 	movw	r3, #443	; 0x1bb
 8007dcc:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8007dce:	2205      	movs	r2, #5
 8007dd0:	4916      	ldr	r1, [pc, #88]	; (8007e2c <mg_url_port+0xc0>)
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f009 fdde 	bl	8011994 <strncmp>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d102      	bne.n	8007de4 <mg_url_port+0x78>
 8007dde:	f240 735b 	movw	r3, #1883	; 0x75b
 8007de2:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8007de4:	2206      	movs	r2, #6
 8007de6:	4912      	ldr	r1, [pc, #72]	; (8007e30 <mg_url_port+0xc4>)
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f009 fdd3 	bl	8011994 <strncmp>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <mg_url_port+0x8e>
 8007df4:	f242 23b3 	movw	r3, #8883	; 0x22b3
 8007df8:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d007      	beq.n	8007e10 <mg_url_port+0xa4>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f009 face 	bl	80113a8 <atoi>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 8007e10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3728      	adds	r7, #40	; 0x28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	0801384c 	.word	0x0801384c
 8007e20:	08013854 	.word	0x08013854
 8007e24:	08013824 	.word	0x08013824
 8007e28:	0801382c 	.word	0x0801382c
 8007e2c:	08013858 	.word	0x08013858
 8007e30:	08013834 	.word	0x08013834

08007e34 <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 8007e42:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	461a      	mov	r2, r3
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007e4e:	7b7b      	ldrb	r3, [r7, #13]
 8007e50:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007e52:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007e54:	7b3b      	ldrb	r3, [r7, #12]
 8007e56:	061b      	lsls	r3, r3, #24
 8007e58:	4313      	orrs	r3, r2
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8007e70:	2300      	movs	r3, #0
 8007e72:	81bb      	strh	r3, [r7, #12]
 8007e74:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 8007e76:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8007e78:	7b7b      	ldrb	r3, [r7, #13]
 8007e7a:	b21a      	sxth	r2, r3
 8007e7c:	7b3b      	ldrb	r3, [r7, #12]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	4313      	orrs	r3, r2
 8007e84:	b21b      	sxth	r3, r3
 8007e86:	b29b      	uxth	r3, r3
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	43db      	mvns	r3, r3
 8007ea4:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007ea6:	e01f      	b.n	8007ee8 <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *) buf++;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	60ba      	str	r2, [r7, #8]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 8007eb2:	7dfa      	ldrb	r2, [r7, #23]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4053      	eors	r3, r2
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	4a11      	ldr	r2, [pc, #68]	; (8007f04 <mg_crc32+0x70>)
 8007ebe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	091b      	lsrs	r3, r3, #4
 8007ec6:	4053      	eors	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	091b      	lsrs	r3, r3, #4
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4053      	eors	r3, r2
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	4a0a      	ldr	r2, [pc, #40]	; (8007f04 <mg_crc32+0x70>)
 8007edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	091b      	lsrs	r3, r3, #4
 8007ee4:	4053      	eors	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	1e5a      	subs	r2, r3, #1
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1da      	bne.n	8007ea8 <mg_crc32+0x14>
  }
  return ~crc;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	43db      	mvns	r3, r3
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	08014114 	.word	0x08014114

08007f08 <mg_millis>:
  return allowed == '+';
}

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8007f08:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
 8007f0c:	af00      	add	r7, sp, #0
#elif MG_ARCH == MG_ARCH_ZEPHYR
  return (uint64_t) k_uptime_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS1
  return (uint64_t) rt_time_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS2
  return (uint64_t) ((osKernelGetTickCount() * 1000) / osKernelGetTickFreq());
 8007f0e:	f006 fc85 	bl	800e81c <osKernelGetTickCount>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f18:	fb02 f403 	mul.w	r4, r2, r3
 8007f1c:	f006 fca6 	bl	800e86c <osKernelGetTickFreq>
 8007f20:	4603      	mov	r3, r0
 8007f22:	fbb4 f3f3 	udiv	r3, r4, r3
 8007f26:	2200      	movs	r2, #0
 8007f28:	4698      	mov	r8, r3
 8007f2a:	4691      	mov	r9, r2
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8007f30:	4610      	mov	r0, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}

08007f38 <eth_read_phy>:
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface
enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1, PHY_CSCR = 31 };

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	460a      	mov	r2, r1
 8007f42:	71fb      	strb	r3, [r7, #7]
 8007f44:	4613      	mov	r3, r2
 8007f46:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 8007f48:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <eth_read_phy+0x5c>)
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	4a11      	ldr	r2, [pc, #68]	; (8007f94 <eth_read_phy+0x5c>)
 8007f4e:	f003 031c 	and.w	r3, r3, #28
 8007f52:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 8007f54:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <eth_read_phy+0x5c>)
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	02d9      	lsls	r1, r3, #11
 8007f5c:	79bb      	ldrb	r3, [r7, #6]
 8007f5e:	019b      	lsls	r3, r3, #6
 8007f60:	430b      	orrs	r3, r1
 8007f62:	490c      	ldr	r1, [pc, #48]	; (8007f94 <eth_read_phy+0x5c>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= BIT(0);
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <eth_read_phy+0x5c>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	4a09      	ldr	r2, [pc, #36]	; (8007f94 <eth_read_phy+0x5c>)
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007f74:	bf00      	nop
 8007f76:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <eth_read_phy+0x5c>)
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1f9      	bne.n	8007f76 <eth_read_phy+0x3e>
  return ETH->MACMIIDR;
 8007f82:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <eth_read_phy+0x5c>)
 8007f84:	695b      	ldr	r3, [r3, #20]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40028000 	.word	0x40028000

08007f98 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	603a      	str	r2, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIDR = val;
 8007fa8:	4a14      	ldr	r2, [pc, #80]	; (8007ffc <eth_write_phy+0x64>)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <eth_write_phy+0x64>)
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	4a12      	ldr	r2, [pc, #72]	; (8007ffc <eth_write_phy+0x64>)
 8007fb4:	f003 031c 	and.w	r3, r3, #28
 8007fb8:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | BIT(1);
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <eth_write_phy+0x64>)
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	02d9      	lsls	r1, r3, #11
 8007fc2:	79bb      	ldrb	r3, [r7, #6]
 8007fc4:	019b      	lsls	r3, r3, #6
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	4a0c      	ldr	r2, [pc, #48]	; (8007ffc <eth_write_phy+0x64>)
 8007fcc:	f043 0302 	orr.w	r3, r3, #2
 8007fd0:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= BIT(0);
 8007fd2:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <eth_write_phy+0x64>)
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <eth_write_phy+0x64>)
 8007fd8:	f043 0301 	orr.w	r3, r3, #1
 8007fdc:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007fde:	bf00      	nop
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <eth_write_phy+0x64>)
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f9      	bne.n	8007fe0 <eth_write_phy+0x48>
}
 8007fec:	bf00      	nop
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40028000 	.word	0x40028000

08008000 <get_hclk>:

static uint32_t get_hclk(void) {
 8008000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008004:	b08d      	sub	sp, #52	; 0x34
 8008006:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 8008008:	4e3c      	ldr	r6, [pc, #240]	; (80080fc <get_hclk+0xfc>)
 800800a:	62be      	str	r6, [r7, #40]	; 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 800800c:	2600      	movs	r6, #0
 800800e:	62fe      	str	r6, [r7, #44]	; 0x2c
 8008010:	4e3b      	ldr	r6, [pc, #236]	; (8008100 <get_hclk+0x100>)
 8008012:	627e      	str	r6, [r7, #36]	; 0x24
 8008014:	4e3b      	ldr	r6, [pc, #236]	; (8008104 <get_hclk+0x104>)
 8008016:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 8008018:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800801a:	68b6      	ldr	r6, [r6, #8]
 800801c:	f006 0604 	and.w	r6, r6, #4
 8008020:	2e00      	cmp	r6, #0
 8008022:	d002      	beq.n	800802a <get_hclk+0x2a>
    clk = hse;
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008028:	e049      	b.n	80080be <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 800802a:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800802c:	68b6      	ldr	r6, [r6, #8]
 800802e:	f006 0608 	and.w	r6, r6, #8
 8008032:	2e00      	cmp	r6, #0
 8008034:	d041      	beq.n	80080ba <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 8008036:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008038:	6876      	ldr	r6, [r6, #4]
 800803a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800803e:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8008040:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008042:	6876      	ldr	r6, [r6, #4]
 8008044:	09b6      	lsrs	r6, r6, #6
 8008046:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800804a:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 800804c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800804e:	6876      	ldr	r6, [r6, #4]
 8008050:	0c36      	lsrs	r6, r6, #16
 8008052:	f006 0603 	and.w	r6, r6, #3
 8008056:	3601      	adds	r6, #1
 8008058:	0076      	lsls	r6, r6, #1
 800805a:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 800805c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800805e:	6876      	ldr	r6, [r6, #4]
 8008060:	f406 0680 	and.w	r6, r6, #4194304	; 0x400000
 8008064:	2e00      	cmp	r6, #0
 8008066:	d001      	beq.n	800806c <get_hclk+0x6c>
 8008068:	6a3e      	ldr	r6, [r7, #32]
 800806a:	e000      	b.n	800806e <get_hclk+0x6e>
 800806c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800806e:	62fe      	str	r6, [r7, #44]	; 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8008070:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8008072:	f04f 0c00 	mov.w	ip, #0
 8008076:	4634      	mov	r4, r6
 8008078:	4665      	mov	r5, ip
 800807a:	69be      	ldr	r6, [r7, #24]
 800807c:	f04f 0c00 	mov.w	ip, #0
 8008080:	4632      	mov	r2, r6
 8008082:	4663      	mov	r3, ip
 8008084:	fb02 fc05 	mul.w	ip, r2, r5
 8008088:	fb04 f603 	mul.w	r6, r4, r3
 800808c:	4466      	add	r6, ip
 800808e:	fba4 0102 	umull	r0, r1, r4, r2
 8008092:	1873      	adds	r3, r6, r1
 8008094:	4619      	mov	r1, r3
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	2200      	movs	r2, #0
 800809a:	4698      	mov	r8, r3
 800809c:	4691      	mov	r9, r2
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	f7f8 fd9b 	bl	8000bdc <__aeabi_uldivmod>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4613      	mov	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080b8:	e001      	b.n	80080be <get_hclk+0xbe>
  } else {
    clk = hsi;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	091b      	lsrs	r3, r3, #4
 80080c4:	f003 030f 	and.w	r3, r3, #15
 80080c8:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	d801      	bhi.n	80080d4 <get_hclk+0xd4>
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	e00e      	b.n	80080f2 <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 80080d4:	4a0c      	ldr	r2, [pc, #48]	; (8008108 <get_hclk+0x108>)
 80080d6:	1d3b      	adds	r3, r7, #4
 80080d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080dc:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3b08      	subs	r3, #8
 80080e4:	3330      	adds	r3, #48	; 0x30
 80080e6:	443b      	add	r3, r7
 80080e8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	40d3      	lsrs	r3, r2
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3734      	adds	r7, #52	; 0x34
 80080f6:	46bd      	mov	sp, r7
 80080f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080fc:	40023800 	.word	0x40023800
 8008100:	00f42400 	.word	0x00f42400
 8008104:	007a1200 	.word	0x007a1200
 8008108:	08013a58 	.word	0x08013a58

0800810c <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 8008112:	4a33      	ldr	r2, [pc, #204]	; (80081e0 <guess_mdc_cr+0xd4>)
 8008114:	f107 030c 	add.w	r3, r7, #12
 8008118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800811c:	6018      	str	r0, [r3, #0]
 800811e:	3304      	adds	r3, #4
 8008120:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 8008122:	4a30      	ldr	r2, [pc, #192]	; (80081e4 <guess_mdc_cr+0xd8>)
 8008124:	1d3b      	adds	r3, r7, #4
 8008126:	e892 0003 	ldmia.w	r2, {r0, r1}
 800812a:	6018      	str	r0, [r3, #0]
 800812c:	3304      	adds	r3, #4
 800812e:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 8008130:	f7ff ff66 	bl	8008000 <get_hclk>
 8008134:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 8008136:	f04f 33ff 	mov.w	r3, #4294967295
 800813a:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <guess_mdc_cr+0xdc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d80d      	bhi.n	8008160 <guess_mdc_cr+0x54>
    MG_ERROR(("HCLK too low"));
 8008144:	4b29      	ldr	r3, [pc, #164]	; (80081ec <guess_mdc_cr+0xe0>)
 8008146:	f641 3238 	movw	r2, #6968	; 0x1b38
 800814a:	4929      	ldr	r1, [pc, #164]	; (80081f0 <guess_mdc_cr+0xe4>)
 800814c:	2001      	movs	r0, #1
 800814e:	f7fe f96b 	bl	8006428 <mg_log_prefix>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d02e      	beq.n	80081b6 <guess_mdc_cr+0xaa>
 8008158:	4826      	ldr	r0, [pc, #152]	; (80081f4 <guess_mdc_cr+0xe8>)
 800815a:	f7fe f9bf 	bl	80064dc <mg_log>
 800815e:	e02a      	b.n	80081b6 <guess_mdc_cr+0xaa>
  } else {
    for (int i = 0; i < 6; i++) {
 8008160:	2300      	movs	r3, #0
 8008162:	61bb      	str	r3, [r7, #24]
 8008164:	e014      	b.n	8008190 <guess_mdc_cr+0x84>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 8008166:	1d3a      	adds	r2, r7, #4
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	4413      	add	r3, r2
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	fbb3 f3f2 	udiv	r3, r3, r2
 8008176:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <guess_mdc_cr+0xec>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d806      	bhi.n	800818a <guess_mdc_cr+0x7e>
        result = crs[i];
 800817c:	f107 020c 	add.w	r2, r7, #12
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	4413      	add	r3, r2
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	61fb      	str	r3, [r7, #28]
        break;
 8008188:	e005      	b.n	8008196 <guess_mdc_cr+0x8a>
    for (int i = 0; i < 6; i++) {
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	3301      	adds	r3, #1
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2b05      	cmp	r3, #5
 8008194:	dde7      	ble.n	8008166 <guess_mdc_cr+0x5a>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	2b00      	cmp	r3, #0
 800819a:	da0c      	bge.n	80081b6 <guess_mdc_cr+0xaa>
 800819c:	4b13      	ldr	r3, [pc, #76]	; (80081ec <guess_mdc_cr+0xe0>)
 800819e:	f44f 52da 	mov.w	r2, #6976	; 0x1b40
 80081a2:	4913      	ldr	r1, [pc, #76]	; (80081f0 <guess_mdc_cr+0xe4>)
 80081a4:	2001      	movs	r0, #1
 80081a6:	f7fe f93f 	bl	8006428 <mg_log_prefix>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <guess_mdc_cr+0xaa>
 80081b0:	4812      	ldr	r0, [pc, #72]	; (80081fc <guess_mdc_cr+0xf0>)
 80081b2:	f7fe f993 	bl	80064dc <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <guess_mdc_cr+0xe0>)
 80081b8:	f641 3242 	movw	r2, #6978	; 0x1b42
 80081bc:	490c      	ldr	r1, [pc, #48]	; (80081f0 <guess_mdc_cr+0xe4>)
 80081be:	2003      	movs	r0, #3
 80081c0:	f7fe f932 	bl	8006428 <mg_log_prefix>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <guess_mdc_cr+0xc8>
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	6979      	ldr	r1, [r7, #20]
 80081ce:	480c      	ldr	r0, [pc, #48]	; (8008200 <guess_mdc_cr+0xf4>)
 80081d0:	f7fe f984 	bl	80064dc <mg_log>
  return result;
 80081d4:	69fb      	ldr	r3, [r7, #28]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3720      	adds	r7, #32
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	08013a94 	.word	0x08013a94
 80081e4:	08013a9c 	.word	0x08013a9c
 80081e8:	017d783f 	.word	0x017d783f
 80081ec:	08014154 	.word	0x08014154
 80081f0:	080127ac 	.word	0x080127ac
 80081f4:	08013a60 	.word	0x08013a60
 80081f8:	00243d58 	.word	0x00243d58
 80081fc:	08013a70 	.word	0x08013a70
 8008200:	08013a80 	.word	0x08013a80

08008204 <mg_tcpip_driver_stm32_init>:

static bool mg_tcpip_driver_stm32_init(struct mg_tcpip_if *ifp) {
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32_data *d =
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32_data *) ifp->driver_data;
  s_ifp = ifp;
 8008212:	4a6d      	ldr	r2, [pc, #436]	; (80083c8 <mg_tcpip_driver_stm32_init+0x1c4>)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	e032      	b.n	8008284 <mg_tcpip_driver_stm32_init+0x80>
    s_rxdesc[i][0] = BIT(31);                            // Own
 800821e:	4a6b      	ldr	r2, [pc, #428]	; (80083cc <mg_tcpip_driver_stm32_init+0x1c8>)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	4413      	add	r3, r2
 8008226:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800822a:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | BIT(14);       // 2nd address chained
 800822c:	4a67      	ldr	r2, [pc, #412]	; (80083cc <mg_tcpip_driver_stm32_init+0x1c8>)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	4413      	add	r3, r2
 8008234:	3304      	adds	r3, #4
 8008236:	f244 6204 	movw	r2, #17924	; 0x4604
 800823a:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f240 6204 	movw	r2, #1540	; 0x604
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	4a62      	ldr	r2, [pc, #392]	; (80083d0 <mg_tcpip_driver_stm32_init+0x1cc>)
 8008248:	4413      	add	r3, r2
 800824a:	4619      	mov	r1, r3
 800824c:	4a5f      	ldr	r2, [pc, #380]	; (80083cc <mg_tcpip_driver_stm32_init+0x1c8>)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	4413      	add	r3, r2
 8008254:	3308      	adds	r3, #8
 8008256:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	3301      	adds	r3, #1
 800825c:	425a      	negs	r2, r3
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	f002 0203 	and.w	r2, r2, #3
 8008266:	bf58      	it	pl
 8008268:	4253      	negpl	r3, r2
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	4a57      	ldr	r2, [pc, #348]	; (80083cc <mg_tcpip_driver_stm32_init+0x1c8>)
 800826e:	4413      	add	r3, r2
 8008270:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 8008272:	4a56      	ldr	r2, [pc, #344]	; (80083cc <mg_tcpip_driver_stm32_init+0x1c8>)
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	4413      	add	r3, r2
 800827a:	330c      	adds	r3, #12
 800827c:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	3301      	adds	r3, #1
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2b03      	cmp	r3, #3
 8008288:	ddc9      	ble.n	800821e <mg_tcpip_driver_stm32_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800828a:	2300      	movs	r3, #0
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	e023      	b.n	80082d8 <mg_tcpip_driver_stm32_init+0xd4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f240 6204 	movw	r2, #1540	; 0x604
 8008296:	fb02 f303 	mul.w	r3, r2, r3
 800829a:	4a4e      	ldr	r2, [pc, #312]	; (80083d4 <mg_tcpip_driver_stm32_init+0x1d0>)
 800829c:	4413      	add	r3, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	4a4d      	ldr	r2, [pc, #308]	; (80083d8 <mg_tcpip_driver_stm32_init+0x1d4>)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	4413      	add	r3, r2
 80082a8:	3308      	adds	r3, #8
 80082aa:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	3301      	adds	r3, #1
 80082b0:	425a      	negs	r2, r3
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	f002 0203 	and.w	r2, r2, #3
 80082ba:	bf58      	it	pl
 80082bc:	4253      	negpl	r3, r2
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	4a45      	ldr	r2, [pc, #276]	; (80083d8 <mg_tcpip_driver_stm32_init+0x1d4>)
 80082c2:	4413      	add	r3, r2
 80082c4:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 80082c6:	4a44      	ldr	r2, [pc, #272]	; (80083d8 <mg_tcpip_driver_stm32_init+0x1d4>)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	4413      	add	r3, r2
 80082ce:	330c      	adds	r3, #12
 80082d0:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3301      	adds	r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	2b03      	cmp	r3, #3
 80082dc:	ddd8      	ble.n	8008290 <mg_tcpip_driver_stm32_init+0x8c>
  }

  ETH->DMABMR |= BIT(0);                         // Software reset
 80082de:	4b3f      	ldr	r3, [pc, #252]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 80082e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a3d      	ldr	r2, [pc, #244]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082f0:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & BIT(0)) != 0) (void) 0;  // Wait until done
 80082f2:	bf00      	nop
 80082f4:	4b39      	ldr	r3, [pc, #228]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 80082f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1f7      	bne.n	80082f4 <mg_tcpip_driver_stm32_init+0xf0>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <mg_tcpip_driver_stm32_init+0x10e>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	da03      	bge.n	800831a <mg_tcpip_driver_stm32_init+0x116>
 8008312:	f7ff fefb 	bl	800810c <guess_mdc_cr>
 8008316:	4603      	mov	r3, r0
 8008318:	e001      	b.n	800831e <mg_tcpip_driver_stm32_init+0x11a>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60bb      	str	r3, [r7, #8]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4a2d      	ldr	r2, [pc, #180]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 8008326:	f003 031c 	and.w	r3, r3, #28
 800832a:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = BIT(13) | BIT(16) | BIT(22) | BIT(23) | BIT(25);
  ETH->MACIMR = BIT(3) | BIT(9);  // Mask timestamp & PMT IT
 800832c:	4b2b      	ldr	r3, [pc, #172]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 800832e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8008332:	63da      	str	r2, [r3, #60]	; 0x3c
  ETH->MACFCR = BIT(7);           // Disable zero quarta pause
 8008334:	4b29      	ldr	r3, [pc, #164]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 8008336:	2280      	movs	r2, #128	; 0x80
 8008338:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = BIT(31);                            // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));           // Reset PHY
 800833a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800833e:	2100      	movs	r1, #0
 8008340:	2000      	movs	r0, #0
 8008342:	f7ff fe29 	bl	8007f98 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));           // Set autonegotiation
 8008346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800834a:	2100      	movs	r1, #0
 800834c:	2000      	movs	r0, #0
 800834e:	f7ff fe23 	bl	8007f98 <eth_write_phy>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;     // RX descriptors
 8008352:	4a22      	ldr	r2, [pc, #136]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 8008354:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <mg_tcpip_driver_stm32_init+0x1c8>)
 8008356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800835a:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;     // RX descriptors
 800835c:	4a1f      	ldr	r2, [pc, #124]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 800835e:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008364:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = BIT(6) | BIT(16);                      // RIE, NISE
 8008366:	4b1d      	ldr	r3, [pc, #116]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 8008368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836c:	461a      	mov	r2, r3
 800836e:	4b1c      	ldr	r3, [pc, #112]	; (80083e0 <mg_tcpip_driver_stm32_init+0x1dc>)
 8008370:	61d3      	str	r3, [r2, #28]
  ETH->MACCR = BIT(2) | BIT(3) | BIT(11) | BIT(14);    // RE, TE, Duplex, Fast
 8008372:	4b1a      	ldr	r3, [pc, #104]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 8008374:	f644 020c 	movw	r2, #18444	; 0x480c
 8008378:	601a      	str	r2, [r3, #0]
  ETH->DMAOMR = BIT(1) | BIT(13) | BIT(21) | BIT(25);  // SR, ST, TSF, RSF
 800837a:	4b18      	ldr	r3, [pc, #96]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 800837c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008380:	461a      	mov	r2, r3
 8008382:	4b18      	ldr	r3, [pc, #96]	; (80083e4 <mg_tcpip_driver_stm32_init+0x1e0>)
 8008384:	6193      	str	r3, [r2, #24]

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	795b      	ldrb	r3, [r3, #5]
 800838a:	021b      	lsls	r3, r3, #8
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7912      	ldrb	r2, [r2, #4]
 8008390:	4611      	mov	r1, r2
 8008392:	4a12      	ldr	r2, [pc, #72]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
 8008394:	430b      	orrs	r3, r1
 8008396:	6413      	str	r3, [r2, #64]	; 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	78db      	ldrb	r3, [r3, #3]
 800839c:	061b      	lsls	r3, r3, #24
 800839e:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	789b      	ldrb	r3, [r3, #2]
 80083a4:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80083a6:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 80083ae:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7812      	ldrb	r2, [r2, #0]
 80083b4:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <mg_tcpip_driver_stm32_init+0x1d8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80083b8:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80083ba:	6453      	str	r3, [r2, #68]	; 0x44
  return true;
 80083bc:	2301      	movs	r3, #1
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20003674 	.word	0x20003674
 80083cc:	200005d0 	.word	0x200005d0
 80083d0:	20000650 	.word	0x20000650
 80083d4:	20001e60 	.word	0x20001e60
 80083d8:	20000610 	.word	0x20000610
 80083dc:	40028000 	.word	0x40028000
 80083e0:	00010040 	.word	0x00010040
 80083e4:	02202002 	.word	0x02202002

080083e8 <mg_tcpip_driver_stm32_tx>:

static size_t mg_tcpip_driver_stm32_tx(const void *buf, size_t len,
                                       struct mg_tcpip_if *ifp) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f240 6204 	movw	r2, #1540	; 0x604
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d911      	bls.n	8008422 <mg_tcpip_driver_stm32_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 80083fe:	4b3d      	ldr	r3, [pc, #244]	; (80084f4 <mg_tcpip_driver_stm32_tx+0x10c>)
 8008400:	f641 327b 	movw	r2, #7035	; 0x1b7b
 8008404:	493c      	ldr	r1, [pc, #240]	; (80084f8 <mg_tcpip_driver_stm32_tx+0x110>)
 8008406:	2001      	movs	r0, #1
 8008408:	f7fe f80e 	bl	8006428 <mg_log_prefix>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d004      	beq.n	800841c <mg_tcpip_driver_stm32_tx+0x34>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	4619      	mov	r1, r3
 8008416:	4839      	ldr	r0, [pc, #228]	; (80084fc <mg_tcpip_driver_stm32_tx+0x114>)
 8008418:	f7fe f860 	bl	80064dc <mg_log>
    len = 0;  // Frame is too big
 800841c:	2300      	movs	r3, #0
 800841e:	60bb      	str	r3, [r7, #8]
 8008420:	e055      	b.n	80084ce <mg_tcpip_driver_stm32_tx+0xe6>
  } else if ((s_txdesc[s_txno][0] & BIT(31))) {
 8008422:	4b37      	ldr	r3, [pc, #220]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	4a37      	ldr	r2, [pc, #220]	; (8008504 <mg_tcpip_driver_stm32_tx+0x11c>)
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	4413      	add	r3, r2
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	da14      	bge.n	800845c <mg_tcpip_driver_stm32_tx+0x74>
    ifp->nerr++;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	671a      	str	r2, [r3, #112]	; 0x70
    MG_ERROR(("No free descriptors"));
 800843c:	4b2d      	ldr	r3, [pc, #180]	; (80084f4 <mg_tcpip_driver_stm32_tx+0x10c>)
 800843e:	f641 327f 	movw	r2, #7039	; 0x1b7f
 8008442:	492d      	ldr	r1, [pc, #180]	; (80084f8 <mg_tcpip_driver_stm32_tx+0x110>)
 8008444:	2001      	movs	r0, #1
 8008446:	f7fd ffef 	bl	8006428 <mg_log_prefix>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <mg_tcpip_driver_stm32_tx+0x6e>
 8008450:	482d      	ldr	r0, [pc, #180]	; (8008508 <mg_tcpip_driver_stm32_tx+0x120>)
 8008452:	f7fe f843 	bl	80064dc <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 8008456:	2300      	movs	r3, #0
 8008458:	60bb      	str	r3, [r7, #8]
 800845a:	e038      	b.n	80084ce <mg_tcpip_driver_stm32_tx+0xe6>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);     // Copy data
 800845c:	4b28      	ldr	r3, [pc, #160]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	461a      	mov	r2, r3
 8008462:	f240 6304 	movw	r3, #1540	; 0x604
 8008466:	fb02 f303 	mul.w	r3, r2, r3
 800846a:	4a28      	ldr	r2, [pc, #160]	; (800850c <mg_tcpip_driver_stm32_tx+0x124>)
 800846c:	4413      	add	r3, r2
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	68f9      	ldr	r1, [r7, #12]
 8008472:	4618      	mov	r0, r3
 8008474:	f009 fb43 	bl	8011afe <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;  // Set data len
 8008478:	4b21      	ldr	r3, [pc, #132]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4a21      	ldr	r2, [pc, #132]	; (8008504 <mg_tcpip_driver_stm32_tx+0x11c>)
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	4413      	add	r3, r2
 8008482:	3304      	adds	r3, #4
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = BIT(20) | BIT(28) | BIT(29);  // Chain,FS,LS
 8008488:	4b1d      	ldr	r3, [pc, #116]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	4a1d      	ldr	r2, [pc, #116]	; (8008504 <mg_tcpip_driver_stm32_tx+0x11c>)
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	4413      	add	r3, r2
 8008492:	4a1f      	ldr	r2, [pc, #124]	; (8008510 <mg_tcpip_driver_stm32_tx+0x128>)
 8008494:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= BIT(31);  // Set OWN bit - let DMA take over
 8008496:	4b1a      	ldr	r3, [pc, #104]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <mg_tcpip_driver_stm32_tx+0x11c>)
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	4413      	add	r3, r2
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a17      	ldr	r2, [pc, #92]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 80084a4:	7812      	ldrb	r2, [r2, #0]
 80084a6:	4610      	mov	r0, r2
 80084a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084ac:	4915      	ldr	r1, [pc, #84]	; (8008504 <mg_tcpip_driver_stm32_tx+0x11c>)
 80084ae:	0103      	lsls	r3, r0, #4
 80084b0:	440b      	add	r3, r1
 80084b2:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80084b4:	4b12      	ldr	r3, [pc, #72]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	3301      	adds	r3, #1
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	4b10      	ldr	r3, [pc, #64]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d902      	bls.n	80084ce <mg_tcpip_driver_stm32_tx+0xe6>
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <mg_tcpip_driver_stm32_tx+0x118>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
  }
  DSB();                         // ensure descriptors have been written
 80084ce:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = BIT(2) | BIT(5);  // Clear any prior TBUS/TUS
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <mg_tcpip_driver_stm32_tx+0x12c>)
 80084d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d8:	461a      	mov	r2, r3
 80084da:	2324      	movs	r3, #36	; 0x24
 80084dc:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;              // and resume
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <mg_tcpip_driver_stm32_tx+0x12c>)
 80084e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e4:	461a      	mov	r2, r3
 80084e6:	2300      	movs	r3, #0
 80084e8:	6053      	str	r3, [r2, #4]
  return len;
 80084ea:	68bb      	ldr	r3, [r7, #8]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	08014164 	.word	0x08014164
 80084f8:	080127ac 	.word	0x080127ac
 80084fc:	08013aa4 	.word	0x08013aa4
 8008500:	20003670 	.word	0x20003670
 8008504:	20000610 	.word	0x20000610
 8008508:	08013ab8 	.word	0x08013ab8
 800850c:	20001e60 	.word	0x20001e60
 8008510:	30100000 	.word	0x30100000
 8008514:	40028000 	.word	0x40028000

08008518 <mg_tcpip_driver_stm32_up>:

static bool mg_tcpip_driver_stm32_up(struct mg_tcpip_if *ifp) {
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 8008520:	2101      	movs	r1, #1
 8008522:	2000      	movs	r0, #0
 8008524:	f7ff fd08 	bl	8007f38 <eth_read_phy>
 8008528:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	089b      	lsrs	r3, r3, #2
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	bf14      	ite	ne
 8008536:	2301      	movne	r3, #1
 8008538:	2300      	moveq	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008542:	2b00      	cmp	r3, #0
 8008544:	d13f      	bne.n	80085c6 <mg_tcpip_driver_stm32_up+0xae>
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d03c      	beq.n	80085c6 <mg_tcpip_driver_stm32_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 800854c:	211f      	movs	r1, #31
 800854e:	2000      	movs	r0, #0
 8008550:	f7ff fcf2 	bl	8007f38 <eth_read_phy>
 8008554:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(11);  // 100M, Full-duplex
 8008556:	4b1e      	ldr	r3, [pc, #120]	; (80085d0 <mg_tcpip_driver_stm32_up+0xb8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 800855e:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d103      	bne.n	8008572 <mg_tcpip_driver_stm32_up+0x5a>
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008570:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(11);      // Half-duplex
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	d103      	bne.n	8008584 <mg_tcpip_driver_stm32_up+0x6c>
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008582:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8008584:	4a12      	ldr	r2, [pc, #72]	; (80085d0 <mg_tcpip_driver_stm32_up+0xb8>)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <mg_tcpip_driver_stm32_up+0xbc>)
 800858c:	f641 3298 	movw	r2, #7064	; 0x1b98
 8008590:	4911      	ldr	r1, [pc, #68]	; (80085d8 <mg_tcpip_driver_stm32_up+0xc0>)
 8008592:	2003      	movs	r0, #3
 8008594:	f7fd ff48 	bl	8006428 <mg_log_prefix>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d013      	beq.n	80085c6 <mg_tcpip_driver_stm32_up+0xae>
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <mg_tcpip_driver_stm32_up+0x94>
 80085a8:	2164      	movs	r1, #100	; 0x64
 80085aa:	e000      	b.n	80085ae <mg_tcpip_driver_stm32_up+0x96>
 80085ac:	210a      	movs	r1, #10
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <mg_tcpip_driver_stm32_up+0xa4>
 80085b8:	4b08      	ldr	r3, [pc, #32]	; (80085dc <mg_tcpip_driver_stm32_up+0xc4>)
 80085ba:	e000      	b.n	80085be <mg_tcpip_driver_stm32_up+0xa6>
 80085bc:	4b08      	ldr	r3, [pc, #32]	; (80085e0 <mg_tcpip_driver_stm32_up+0xc8>)
 80085be:	461a      	mov	r2, r3
 80085c0:	4808      	ldr	r0, [pc, #32]	; (80085e4 <mg_tcpip_driver_stm32_up+0xcc>)
 80085c2:	f7fd ff8b 	bl	80064dc <mg_log>
              maccr & BIT(11) ? "full" : "half"));
  }
  return up;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40028000 	.word	0x40028000
 80085d4:	08014180 	.word	0x08014180
 80085d8:	080127ac 	.word	0x080127ac
 80085dc:	08013acc 	.word	0x08013acc
 80085e0:	08013ad4 	.word	0x08013ad4
 80085e4:	08013adc 	.word	0x08013adc

080085e8 <ETH_IRQHandler>:

void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
  if (ETH->DMASR & BIT(6)) {             // Frame received, loop
 80085ee:	4b3d      	ldr	r3, [pc, #244]	; (80086e4 <ETH_IRQHandler+0xfc>)
 80085f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d061      	beq.n	80086c2 <ETH_IRQHandler+0xda>
    ETH->DMASR = BIT(16) | BIT(6);       // Clear flag
 80085fe:	4b39      	ldr	r3, [pc, #228]	; (80086e4 <ETH_IRQHandler+0xfc>)
 8008600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008604:	461a      	mov	r2, r3
 8008606:	4b38      	ldr	r3, [pc, #224]	; (80086e8 <ETH_IRQHandler+0x100>)
 8008608:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 800860a:	2300      	movs	r3, #0
 800860c:	607b      	str	r3, [r7, #4]
 800860e:	e053      	b.n	80086b8 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8008610:	4b36      	ldr	r3, [pc, #216]	; (80086ec <ETH_IRQHandler+0x104>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4a36      	ldr	r2, [pc, #216]	; (80086f0 <ETH_IRQHandler+0x108>)
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	4413      	add	r3, r2
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	db4f      	blt.n	80086c0 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 8008620:	4b32      	ldr	r3, [pc, #200]	; (80086ec <ETH_IRQHandler+0x104>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4a32      	ldr	r2, [pc, #200]	; (80086f0 <ETH_IRQHandler+0x108>)
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	4413      	add	r3, r2
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008634:	d128      	bne.n	8008688 <ETH_IRQHandler+0xa0>
          !(s_rxdesc[s_rxno][0] & BIT(15))) {  // skip partial/errored frames
 8008636:	4b2d      	ldr	r3, [pc, #180]	; (80086ec <ETH_IRQHandler+0x104>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	4a2d      	ldr	r2, [pc, #180]	; (80086f0 <ETH_IRQHandler+0x108>)
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	4413      	add	r3, r2
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 8008646:	2b00      	cmp	r3, #0
 8008648:	d11e      	bne.n	8008688 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (BIT(14) - 1));
 800864a:	4b28      	ldr	r3, [pc, #160]	; (80086ec <ETH_IRQHandler+0x104>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	4a28      	ldr	r2, [pc, #160]	; (80086f0 <ETH_IRQHandler+0x108>)
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	4413      	add	r3, r2
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800865c:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 800865e:	4b23      	ldr	r3, [pc, #140]	; (80086ec <ETH_IRQHandler+0x104>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	f240 6304 	movw	r3, #1540	; 0x604
 8008668:	fb02 f303 	mul.w	r3, r2, r3
 800866c:	4a21      	ldr	r2, [pc, #132]	; (80086f4 <ETH_IRQHandler+0x10c>)
 800866e:	1898      	adds	r0, r3, r2
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b04      	cmp	r3, #4
 8008674:	d902      	bls.n	800867c <ETH_IRQHandler+0x94>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	3b04      	subs	r3, #4
 800867a:	e000      	b.n	800867e <ETH_IRQHandler+0x96>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	4a1e      	ldr	r2, [pc, #120]	; (80086f8 <ETH_IRQHandler+0x110>)
 8008680:	6812      	ldr	r2, [r2, #0]
 8008682:	4619      	mov	r1, r3
 8008684:	f002 faac 	bl	800abe0 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = BIT(31);
 8008688:	4b18      	ldr	r3, [pc, #96]	; (80086ec <ETH_IRQHandler+0x104>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <ETH_IRQHandler+0x108>)
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	4413      	add	r3, r2
 8008692:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008696:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8008698:	4b14      	ldr	r3, [pc, #80]	; (80086ec <ETH_IRQHandler+0x104>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	3301      	adds	r3, #1
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	4b12      	ldr	r3, [pc, #72]	; (80086ec <ETH_IRQHandler+0x104>)
 80086a2:	701a      	strb	r2, [r3, #0]
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <ETH_IRQHandler+0x104>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d902      	bls.n	80086b2 <ETH_IRQHandler+0xca>
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <ETH_IRQHandler+0x104>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3301      	adds	r3, #1
 80086b6:	607b      	str	r3, [r7, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b09      	cmp	r3, #9
 80086bc:	d9a8      	bls.n	8008610 <ETH_IRQHandler+0x28>
 80086be:	e000      	b.n	80086c2 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 80086c0:	bf00      	nop
    }
  }
  ETH->DMASR = BIT(7);  // Clear possible RBUS while processing
 80086c2:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <ETH_IRQHandler+0xfc>)
 80086c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c8:	461a      	mov	r2, r3
 80086ca:	2380      	movs	r3, #128	; 0x80
 80086cc:	6153      	str	r3, [r2, #20]
  ETH->DMARPDR = 0;     // and resume RX
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <ETH_IRQHandler+0xfc>)
 80086d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d4:	461a      	mov	r2, r3
 80086d6:	2300      	movs	r3, #0
 80086d8:	6093      	str	r3, [r2, #8]
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	40028000 	.word	0x40028000
 80086e8:	00010040 	.word	0x00010040
 80086ec:	20003671 	.word	0x20003671
 80086f0:	200005d0 	.word	0x200005d0
 80086f4:	20000650 	.word	0x20000650
 80086f8:	20003674 	.word	0x20003674

080086fc <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	441a      	add	r2, r3
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	461a      	mov	r2, r3
 8008716:	68fc      	ldr	r4, [r7, #12]
 8008718:	463b      	mov	r3, r7
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fd68 	bl	80071f2 <mg_str_n>
 8008722:	f104 0308 	add.w	r3, r4, #8
 8008726:	463a      	mov	r2, r7
 8008728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800872c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8008730:	bf00      	nop
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	bd90      	pop	{r4, r7, pc}

08008738 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8008748:	2300      	movs	r3, #0
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	e016      	b.n	800877c <csumup+0x44>
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <csumup+0x2c>
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	4413      	add	r3, r2
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	e005      	b.n	8008770 <csumup+0x38>
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	4413      	add	r3, r2
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	461a      	mov	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	3301      	adds	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	d3e4      	bcc.n	800874e <csumup+0x16>
  return sum;
 8008784:	68fb      	ldr	r3, [r7, #12]
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800879a:	e005      	b.n	80087a8 <csumfin+0x16>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	0c1b      	lsrs	r3, r3, #16
 80087a4:	4413      	add	r3, r2
 80087a6:	607b      	str	r3, [r7, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	0c1b      	lsrs	r3, r3, #16
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1f5      	bne.n	800879c <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	43db      	mvns	r3, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fb54 	bl	8007e66 <mg_ntohs>
 80087be:	4603      	mov	r3, r0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	2000      	movs	r0, #0
 80087d8:	f7ff ffae 	bl	8008738 <csumup>
 80087dc:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff ffd7 	bl	8008792 <csumfin>
 80087e4:	4603      	mov	r3, r0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	6950      	ldr	r0, [r2, #20]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d104      	bne.n	800881c <ether_output+0x2e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 800881c:	68fb      	ldr	r3, [r7, #12]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	330e      	adds	r3, #14
 800883a:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2206      	movs	r2, #6
 8008840:	21ff      	movs	r1, #255	; 0xff
 8008842:	4618      	mov	r0, r3
 8008844:	f009 f891 	bl	801196a <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3306      	adds	r3, #6
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	2206      	movs	r2, #6
 8008850:	4618      	mov	r0, r3
 8008852:	f009 f954 	bl	8011afe <memcpy>
  eth->type = mg_htons(0x806);
 8008856:	f640 0006 	movw	r0, #2054	; 0x806
 800885a:	f7ff fb04 	bl	8007e66 <mg_ntohs>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8008866:	221c      	movs	r2, #28
 8008868:	2100      	movs	r1, #0
 800886a:	68b8      	ldr	r0, [r7, #8]
 800886c:	f009 f87d 	bl	801196a <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8008870:	2001      	movs	r0, #1
 8008872:	f7ff faf8 	bl	8007e66 <mg_ntohs>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008882:	f7ff faf0 	bl	8007e66 <mg_ntohs>
 8008886:	4603      	mov	r3, r0
 8008888:	461a      	mov	r2, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	805a      	strh	r2, [r3, #2]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2206      	movs	r2, #6
 8008892:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2204      	movs	r2, #4
 8008898:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800889a:	2001      	movs	r0, #1
 800889c:	f7ff fae3 	bl	8007e66 <mg_ntohs>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	80da      	strh	r2, [r3, #6]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	619a      	str	r2, [r3, #24]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	3308      	adds	r3, #8
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	2206      	movs	r2, #6
 80088c0:	4618      	mov	r0, r3
 80088c2:	f009 f91c 	bl	8011afe <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f103 021c 	add.w	r2, r3, #28
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff ff8b 	bl	80087ee <ether_output>
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d138      	bne.n	8008964 <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 80088f2:	4b35      	ldr	r3, [pc, #212]	; (80089c8 <onstatechange+0xe8>)
 80088f4:	f641 62dd 	movw	r2, #7901	; 0x1edd
 80088f8:	4934      	ldr	r1, [pc, #208]	; (80089cc <onstatechange+0xec>)
 80088fa:	2002      	movs	r0, #2
 80088fc:	f7fd fd94 	bl	8006428 <mg_log_prefix>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d006      	beq.n	8008914 <onstatechange+0x34>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3308      	adds	r3, #8
 800890a:	461a      	mov	r2, r3
 800890c:	4930      	ldr	r1, [pc, #192]	; (80089d0 <onstatechange+0xf0>)
 800890e:	4831      	ldr	r0, [pc, #196]	; (80089d4 <onstatechange+0xf4>)
 8008910:	f7fd fde4 	bl	80064dc <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8008914:	4b2c      	ldr	r3, [pc, #176]	; (80089c8 <onstatechange+0xe8>)
 8008916:	f641 62de 	movw	r2, #7902	; 0x1ede
 800891a:	492c      	ldr	r1, [pc, #176]	; (80089cc <onstatechange+0xec>)
 800891c:	2002      	movs	r0, #2
 800891e:	f7fd fd83 	bl	8006428 <mg_log_prefix>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d006      	beq.n	8008936 <onstatechange+0x56>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3310      	adds	r3, #16
 800892c:	461a      	mov	r2, r3
 800892e:	4928      	ldr	r1, [pc, #160]	; (80089d0 <onstatechange+0xf0>)
 8008930:	4829      	ldr	r0, [pc, #164]	; (80089d8 <onstatechange+0xf8>)
 8008932:	f7fd fdd3 	bl	80064dc <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <onstatechange+0xe8>)
 8008938:	f641 62df 	movw	r2, #7903	; 0x1edf
 800893c:	4923      	ldr	r1, [pc, #140]	; (80089cc <onstatechange+0xec>)
 800893e:	2002      	movs	r0, #2
 8008940:	f7fd fd72 	bl	8006428 <mg_log_prefix>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <onstatechange+0x76>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	461a      	mov	r2, r3
 800894e:	4923      	ldr	r1, [pc, #140]	; (80089dc <onstatechange+0xfc>)
 8008950:	4823      	ldr	r0, [pc, #140]	; (80089e0 <onstatechange+0x100>)
 8008952:	f7fd fdc3 	bl	80064dc <mg_log>
    arp_ask(ifp, ifp->gw);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff ff62 	bl	8008826 <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 8008962:	e02c      	b.n	80089be <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800896a:	2b01      	cmp	r3, #1
 800896c:	d115      	bne.n	800899a <onstatechange+0xba>
    MG_ERROR(("Link up"));
 800896e:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <onstatechange+0xe8>)
 8008970:	f641 62e2 	movw	r2, #7906	; 0x1ee2
 8008974:	4915      	ldr	r1, [pc, #84]	; (80089cc <onstatechange+0xec>)
 8008976:	2001      	movs	r0, #1
 8008978:	f7fd fd56 	bl	8006428 <mg_log_prefix>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <onstatechange+0xa8>
 8008982:	4818      	ldr	r0, [pc, #96]	; (80089e4 <onstatechange+0x104>)
 8008984:	f7fd fdaa 	bl	80064dc <mg_log>
    srand((unsigned int) mg_millis());
 8008988:	f7ff fabe 	bl	8007f08 <mg_millis>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4613      	mov	r3, r2
 8008992:	4618      	mov	r0, r3
 8008994:	f008 fde6 	bl	8011564 <srand>
}
 8008998:	e011      	b.n	80089be <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10c      	bne.n	80089be <onstatechange+0xde>
    MG_ERROR(("Link down"));
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <onstatechange+0xe8>)
 80089a6:	f641 62e5 	movw	r2, #7909	; 0x1ee5
 80089aa:	4908      	ldr	r1, [pc, #32]	; (80089cc <onstatechange+0xec>)
 80089ac:	2001      	movs	r0, #1
 80089ae:	f7fd fd3b 	bl	8006428 <mg_log_prefix>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <onstatechange+0xde>
 80089b8:	480b      	ldr	r0, [pc, #44]	; (80089e8 <onstatechange+0x108>)
 80089ba:	f7fd fd8f 	bl	80064dc <mg_log>
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	0801419c 	.word	0x0801419c
 80089cc:	080127ac 	.word	0x080127ac
 80089d0:	08006c79 	.word	0x08006c79
 80089d4:	08013af4 	.word	0x08013af4
 80089d8:	08013b04 	.word	0x08013b04
 80089dc:	08006d3d 	.word	0x08006d3d
 80089e0:	08013b14 	.word	0x08013b14
 80089e4:	08013b24 	.word	0x08013b24
 80089e8:	08013b2c 	.word	0x08013b2c

080089ec <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	4613      	mov	r3, r2
 80089fa:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	330e      	adds	r3, #14
 8008a06:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2206      	movs	r2, #6
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f009 f875 	bl	8011afe <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	3306      	adds	r3, #6
 8008a18:	68f9      	ldr	r1, [r7, #12]
 8008a1a:	2206      	movs	r2, #6
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f009 f86e 	bl	8011afe <memcpy>
  eth->type = mg_htons(0x800);
 8008a22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008a26:	f7ff fa1e 	bl	8007e66 <mg_ntohs>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 8008a32:	2214      	movs	r2, #20
 8008a34:	2100      	movs	r1, #0
 8008a36:	6938      	ldr	r0, [r7, #16]
 8008a38:	f008 ff97 	bl	801196a <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2245      	movs	r2, #69	; 0x45
 8008a40:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a4a:	719a      	strb	r2, [r3, #6]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3314      	adds	r3, #20
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fa04 	bl	8007e66 <mg_ntohs>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461a      	mov	r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	2240      	movs	r2, #64	; 0x40
 8008a6a:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	79fa      	ldrb	r2, [r7, #7]
 8008a70:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	6a3a      	ldr	r2, [r7, #32]
 8008a7c:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8008a7e:	2114      	movs	r1, #20
 8008a80:	6938      	ldr	r0, [r7, #16]
 8008a82:	f7ff fea1 	bl	80087c8 <ipcsum>
 8008a86:	4603      	mov	r3, r0
 8008a88:	461a      	mov	r2, r3
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	815a      	strh	r2, [r3, #10]
  return ip;
 8008a8e:	693b      	ldr	r3, [r7, #16]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	; 0x28
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2211      	movs	r2, #17
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7ff ff98 	bl	80089ec <tx_ip>
 8008abc:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	3314      	adds	r3, #20
 8008ac2:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	887a      	ldrh	r2, [r7, #2]
 8008ac8:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008ace:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff f9c4 	bl	8007e66 <mg_ntohs>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	719a      	strb	r2, [r3, #6]
 8008aec:	2200      	movs	r2, #0
 8008aee:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8008af0:	2208      	movs	r2, #8
 8008af2:	69b9      	ldr	r1, [r7, #24]
 8008af4:	2000      	movs	r0, #0
 8008af6:	f7ff fe1f 	bl	8008738 <csumup>
 8008afa:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8008afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b00:	6978      	ldr	r0, [r7, #20]
 8008b02:	f7ff fe19 	bl	8008738 <csumup>
 8008b06:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	2204      	movs	r2, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6978      	ldr	r0, [r7, #20]
 8008b12:	f7ff fe11 	bl	8008738 <csumup>
 8008b16:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	3310      	adds	r3, #16
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6978      	ldr	r0, [r7, #20]
 8008b22:	f7ff fe09 	bl	8008738 <csumup>
 8008b26:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	7a5b      	ldrb	r3, [r3, #9]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b30:	441a      	add	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	4413      	add	r3, r2
 8008b36:	3308      	adds	r3, #8
 8008b38:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff fe29 	bl	8008792 <csumfin>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b50:	4618      	mov	r0, r3
 8008b52:	f008 fef0 	bl	8011936 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8008b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b58:	332a      	adds	r3, #42	; 0x2a
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fe46 	bl	80087ee <ether_output>
}
 8008b62:	bf00      	nop
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8008b6c:	b5b0      	push	{r4, r5, r7, lr}
 8008b6e:	b0cc      	sub	sp, #304	; 0x130
 8008b70:	af04      	add	r7, sp, #16
 8008b72:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008b76:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8008b7a:	6020      	str	r0, [r4, #0]
 8008b7c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008b80:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8008b84:	6001      	str	r1, [r0, #0]
 8008b86:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8008b8a:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8008b8e:	600a      	str	r2, [r1, #0]
 8008b90:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008b94:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008b98:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8008b9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008b9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ba2:	4a38      	ldr	r2, [pc, #224]	; (8008c84 <tx_dhcp+0x118>)
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008bac:	461a      	mov	r2, r3
 8008bae:	f008 ffa6 	bl	8011afe <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8008bb2:	4835      	ldr	r0, [pc, #212]	; (8008c88 <tx_dhcp+0x11c>)
 8008bb4:	f7ff f93e 	bl	8007e34 <mg_ntohl>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bbe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008bc2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8008bc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	331c      	adds	r3, #28
 8008bd6:	2206      	movs	r2, #6
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f008 ff90 	bl	8011afe <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8008bde:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008be2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3302      	adds	r3, #2
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008bf2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008bf6:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8008bf8:	f107 0310 	add.w	r3, r7, #16
 8008bfc:	33f0      	adds	r3, #240	; 0xf0
 8008bfe:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008c02:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008c06:	4618      	mov	r0, r3
 8008c08:	f008 ff79 	bl	8011afe <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8008c0c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d009      	beq.n	8008c28 <tx_dhcp+0xbc>
 8008c14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008c1c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008c20:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8008c28:	2044      	movs	r0, #68	; 0x44
 8008c2a:	f7ff f91c 	bl	8007e66 <mg_ntohs>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	461d      	mov	r5, r3
 8008c32:	2043      	movs	r0, #67	; 0x43
 8008c34:	f7ff f917 	bl	8007e66 <mg_ntohs>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461c      	mov	r4, r3
 8008c3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c40:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008c44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c48:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8008c4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c50:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008c54:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008c58:	9303      	str	r3, [sp, #12]
 8008c5a:	f107 0310 	add.w	r3, r7, #16
 8008c5e:	9302      	str	r3, [sp, #8]
 8008c60:	9401      	str	r4, [sp, #4]
 8008c62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008c66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	462b      	mov	r3, r5
 8008c70:	6812      	ldr	r2, [r2, #0]
 8008c72:	6809      	ldr	r1, [r1, #0]
 8008c74:	6800      	ldr	r0, [r0, #0]
 8008c76:	f7ff ff0f 	bl	8008a98 <tx_udp>
         sizeof(dhcp));
}
 8008c7a:	bf00      	nop
 8008c7c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bdb0      	pop	{r4, r5, r7, pc}
 8008c84:	08013b38 	.word	0x08013b38
 8008c88:	63825363 	.word	0x63825363

08008c8c <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8008c8c:	b5b0      	push	{r4, r5, r7, lr}
 8008c8e:	b090      	sub	sp, #64	; 0x40
 8008c90:	af04      	add	r7, sp, #16
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8008c98:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <tx_dhcp_request_sel+0x74>)
 8008c9a:	f107 0414 	add.w	r4, r7, #20
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ca8:	c403      	stmia	r4!, {r0, r1}
 8008caa:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 8008cac:	f107 0314 	add.w	r3, r7, #20
 8008cb0:	330e      	adds	r3, #14
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	3314      	adds	r3, #20
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9302      	str	r3, [sp, #8]
 8008cc4:	2319      	movs	r3, #25
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	f107 0314 	add.w	r3, r7, #20
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	490b      	ldr	r1, [pc, #44]	; (8008d04 <tx_dhcp_request_sel+0x78>)
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff ff48 	bl	8008b6c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <tx_dhcp_request_sel+0x7c>)
 8008cde:	f641 7231 	movw	r2, #7985	; 0x1f31
 8008ce2:	490a      	ldr	r1, [pc, #40]	; (8008d0c <tx_dhcp_request_sel+0x80>)
 8008ce4:	2003      	movs	r0, #3
 8008ce6:	f7fd fb9f 	bl	8006428 <mg_log_prefix>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <tx_dhcp_request_sel+0x6a>
 8008cf0:	4807      	ldr	r0, [pc, #28]	; (8008d10 <tx_dhcp_request_sel+0x84>)
 8008cf2:	f7fd fbf3 	bl	80064dc <mg_log>
}
 8008cf6:	bf00      	nop
 8008cf8:	3730      	adds	r7, #48	; 0x30
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	08013c58 	.word	0x08013c58
 8008d04:	08014074 	.word	0x08014074
 8008d08:	080141ac 	.word	0x080141ac
 8008d0c:	080127ac 	.word	0x080127ac
 8008d10:	08013c48 	.word	0x08013c48

08008d14 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	; 0x28
 8008d18:	af04      	add	r7, sp, #16
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <tx_dhcp_request_re+0x50>)
 8008d24:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8008d26:	2301      	movs	r3, #1
 8008d28:	9302      	str	r3, [sp, #8]
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff ff16 	bl	8008b6c <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <tx_dhcp_request_re+0x54>)
 8008d42:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8008d46:	4909      	ldr	r1, [pc, #36]	; (8008d6c <tx_dhcp_request_re+0x58>)
 8008d48:	2003      	movs	r0, #3
 8008d4a:	f7fd fb6d 	bl	8006428 <mg_log_prefix>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <tx_dhcp_request_re+0x46>
 8008d54:	4806      	ldr	r0, [pc, #24]	; (8008d70 <tx_dhcp_request_re+0x5c>)
 8008d56:	f7fd fbc1 	bl	80064dc <mg_log>
}
 8008d5a:	bf00      	nop
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	ff030135 	.word	0xff030135
 8008d68:	080141c0 	.word	0x080141c0
 8008d6c:	080127ac 	.word	0x080127ac
 8008d70:	08013c48 	.word	0x08013c48

08008d74 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 8008d7c:	4a14      	ldr	r2, [pc, #80]	; (8008dd0 <tx_dhcp_discover+0x5c>)
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d86:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9302      	str	r3, [sp, #8]
 8008d8e:	2308      	movs	r3, #8
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	f04f 33ff 	mov.w	r3, #4294967295
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	490d      	ldr	r1, [pc, #52]	; (8008dd4 <tx_dhcp_discover+0x60>)
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fee3 	bl	8008b6c <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8008da6:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <tx_dhcp_discover+0x64>)
 8008da8:	f641 7246 	movw	r2, #8006	; 0x1f46
 8008dac:	490b      	ldr	r1, [pc, #44]	; (8008ddc <tx_dhcp_discover+0x68>)
 8008dae:	2003      	movs	r0, #3
 8008db0:	f7fd fb3a 	bl	8006428 <mg_log_prefix>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <tx_dhcp_discover+0x52>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4908      	ldr	r1, [pc, #32]	; (8008de0 <tx_dhcp_discover+0x6c>)
 8008dc0:	4808      	ldr	r0, [pc, #32]	; (8008de4 <tx_dhcp_discover+0x70>)
 8008dc2:	f7fd fb8b 	bl	80064dc <mg_log>
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	08013c94 	.word	0x08013c94
 8008dd4:	08014074 	.word	0x08014074
 8008dd8:	080141d4 	.word	0x080141d4
 8008ddc:	080127ac 	.word	0x080127ac
 8008de0:	08006d3d 	.word	0x08006d3d
 8008de4:	08013c74 	.word	0x08013c74

08008de8 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e03e      	b.n	8008e80 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <getpeer+0x42>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <getpeer+0x42>
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	8b1a      	ldrh	r2, [r3, #24]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d02e      	beq.n	8008e88 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d11f      	bne.n	8008e7a <getpeer+0x92>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01b      	beq.n	8008e7a <getpeer+0x92>
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	8b1a      	ldrh	r2, [r3, #24]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	885b      	ldrh	r3, [r3, #2]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d113      	bne.n	8008e7a <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008e58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e5c:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008e5e:	79fa      	ldrb	r2, [r7, #7]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d10a      	bne.n	8008e7a <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10f      	bne.n	8008e8a <getpeer+0xa2>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d007      	beq.n	8008e8a <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1bd      	bne.n	8008e02 <getpeer+0x1a>
 8008e86:	e000      	b.n	8008e8a <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008e88:	bf00      	nop
      break;
  }
  return c;
 8008e8a:	697b      	ldr	r3, [r7, #20]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008e98:	b5b0      	push	{r4, r5, r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	88db      	ldrh	r3, [r3, #6]
 8008ea8:	b29c      	uxth	r4, r3
 8008eaa:	2001      	movs	r0, #1
 8008eac:	f7fe ffdb 	bl	8007e66 <mg_ntohs>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	429c      	cmp	r4, r3
 8008eb4:	d176      	bne.n	8008fa4 <rx_arp+0x10c>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d16f      	bne.n	8008fa4 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	330e      	adds	r3, #14
 8008ece:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8008ed0:	6978      	ldr	r0, [r7, #20]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	3306      	adds	r3, #6
 8008ed8:	2206      	movs	r2, #6
 8008eda:	4619      	mov	r1, r3
 8008edc:	f008 fe0f 	bl	8011afe <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	3306      	adds	r3, #6
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	2206      	movs	r2, #6
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f008 fe08 	bl	8011afe <memcpy>
    eth->type = mg_htons(0x806);
 8008eee:	f640 0006 	movw	r0, #2054	; 0x806
 8008ef2:	f7fe ffb8 	bl	8007e66 <mg_ntohs>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	461a      	mov	r2, r3
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6814      	ldr	r4, [r2, #0]
 8008f06:	6850      	ldr	r0, [r2, #4]
 8008f08:	6891      	ldr	r1, [r2, #8]
 8008f0a:	68d5      	ldr	r5, [r2, #12]
 8008f0c:	601c      	str	r4, [r3, #0]
 8008f0e:	6058      	str	r0, [r3, #4]
 8008f10:	6099      	str	r1, [r3, #8]
 8008f12:	60dd      	str	r5, [r3, #12]
 8008f14:	6914      	ldr	r4, [r2, #16]
 8008f16:	6950      	ldr	r0, [r2, #20]
 8008f18:	6991      	ldr	r1, [r2, #24]
 8008f1a:	611c      	str	r4, [r3, #16]
 8008f1c:	6158      	str	r0, [r3, #20]
 8008f1e:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8008f20:	2002      	movs	r0, #2
 8008f22:	f7fe ffa0 	bl	8007e66 <mg_ntohs>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f103 0012 	add.w	r0, r3, #18
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f008 fdde 	bl	8011afe <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3308      	adds	r3, #8
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	2206      	movs	r2, #6
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f008 fdd7 	bl	8011afe <memcpy>
    arp->tpa = pkt->arp->spa;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 8008f66:	4b46      	ldr	r3, [pc, #280]	; (8009080 <rx_arp+0x1e8>)
 8008f68:	f641 7265 	movw	r2, #8037	; 0x1f65
 8008f6c:	4945      	ldr	r1, [pc, #276]	; (8009084 <rx_arp+0x1ec>)
 8008f6e:	2003      	movs	r0, #3
 8008f70:	f7fd fa5a 	bl	8006428 <mg_log_prefix>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <rx_arp+0xf8>
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f103 0218 	add.w	r2, r3, #24
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3308      	adds	r3, #8
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4b40      	ldr	r3, [pc, #256]	; (8009088 <rx_arp+0x1f0>)
 8008f88:	493f      	ldr	r1, [pc, #252]	; (8009088 <rx_arp+0x1f0>)
 8008f8a:	4840      	ldr	r0, [pc, #256]	; (800908c <rx_arp+0x1f4>)
 8008f8c:	f7fd faa6 	bl	80064dc <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f103 021c 	add.w	r2, r3, #28
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fc26 	bl	80087ee <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008fa2:	e069      	b.n	8009078 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	88db      	ldrh	r3, [r3, #6]
 8008faa:	b29c      	uxth	r4, r3
 8008fac:	2002      	movs	r0, #2
 8008fae:	f7fe ff5a 	bl	8007e66 <mg_ntohs>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	429c      	cmp	r4, r3
 8008fb6:	d15f      	bne.n	8009078 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	3312      	adds	r3, #18
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	2206      	movs	r2, #6
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f008 fca7 	bl	8011916 <memcmp>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d153      	bne.n	8009076 <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d10a      	bne.n	8008ff4 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	2206      	movs	r2, #6
 8008fec:	4619      	mov	r1, r3
 8008fee:	f008 fd86 	bl	8011afe <memcpy>
 8008ff2:	e041      	b.n	8009078 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff fef3 	bl	8008de8 <getpeer>
 8009002:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d036      	beq.n	8009078 <rx_arp+0x1e0>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d02e      	beq.n	8009078 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3390      	adds	r3, #144	; 0x90
 800901e:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f103 0010 	add.w	r0, r3, #16
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	3308      	adds	r3, #8
 800902c:	2206      	movs	r2, #6
 800902e:	4619      	mov	r1, r3
 8009030:	f008 fd65 	bl	8011afe <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8009034:	4b12      	ldr	r3, [pc, #72]	; (8009080 <rx_arp+0x1e8>)
 8009036:	f641 7272 	movw	r2, #8050	; 0x1f72
 800903a:	4912      	ldr	r1, [pc, #72]	; (8009084 <rx_arp+0x1ec>)
 800903c:	2003      	movs	r0, #3
 800903e:	f7fd f9f3 	bl	8006428 <mg_log_prefix>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00e      	beq.n	8009066 <rx_arp+0x1ce>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f103 021c 	add.w	r2, r3, #28
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	3310      	adds	r3, #16
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <rx_arp+0x1f8>)
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	4613      	mov	r3, r2
 800905e:	4a0a      	ldr	r2, [pc, #40]	; (8009088 <rx_arp+0x1f0>)
 8009060:	480c      	ldr	r0, [pc, #48]	; (8009094 <rx_arp+0x1fc>)
 8009062:	f7fd fa3b 	bl	80064dc <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800906c:	f36f 1304 	bfc	r3, #4, #1
 8009070:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 8009074:	e000      	b.n	8009078 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8009076:	bf00      	nop
      }
    }
  }
}
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bdb0      	pop	{r4, r5, r7, pc}
 800907e:	bf00      	nop
 8009080:	080141e8 	.word	0x080141e8
 8009084:	080127ac 	.word	0x080127ac
 8009088:	08006c79 	.word	0x08006c79
 800908c:	08013c9c 	.word	0x08013c9c
 8009090:	08006d3d 	.word	0x08006d3d
 8009094:	08013cb4 	.word	0x08013cb4

08009098 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	; 0x28
 800909c:	af02      	add	r7, sp, #8
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d14d      	bne.n	8009148 <rx_icmp+0xb0>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d049      	beq.n	8009148 <rx_icmp+0xb0>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	691a      	ldr	r2, [r3, #16]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d142      	bne.n	8009148 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 80090c2:	2326      	movs	r3, #38	; 0x26
 80090c4:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d901      	bls.n	80090e2 <rx_icmp+0x4a>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	1d99      	adds	r1, r3, #6
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6898      	ldr	r0, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	3204      	adds	r2, #4
 80090f6:	9201      	str	r2, [sp, #4]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	4603      	mov	r3, r0
 80090fc:	2201      	movs	r2, #1
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fc74 	bl	80089ec <tx_ip>
 8009104:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	3314      	adds	r3, #20
 800910a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800910c:	2204      	movs	r2, #4
 800910e:	2100      	movs	r1, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f008 fc2a 	bl	801196a <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	1d18      	adds	r0, r3, #4
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	4619      	mov	r1, r3
 8009122:	f008 fcec 	bl	8011afe <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	3304      	adds	r3, #4
 800912a:	4619      	mov	r1, r3
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f7ff fb4b 	bl	80087c8 <ipcsum>
 8009132:	4603      	mov	r3, r0
 8009134:	461a      	mov	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800913a:	69ba      	ldr	r2, [r7, #24]
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	4413      	add	r3, r2
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff fb53 	bl	80087ee <ether_output>
  }
}
 8009148:	bf00      	nop
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009154:	b08e      	sub	sp, #56	; 0x38
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	637b      	str	r3, [r7, #52]	; 0x34
 8009160:	2300      	movs	r3, #0
 8009162:	623b      	str	r3, [r7, #32]
 8009164:	2300      	movs	r3, #0
 8009166:	61fb      	str	r3, [r7, #28]
 8009168:	2300      	movs	r3, #0
 800916a:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800916c:	2300      	movs	r3, #0
 800916e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	33f0      	adds	r3, #240	; 0xf0
 8009182:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4413      	add	r3, r2
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919a:	429a      	cmp	r2, r3
 800919c:	f0c0 8151 	bcc.w	8009442 <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a4:	1d18      	adds	r0, r3, #4
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3302      	adds	r3, #2
 80091aa:	2204      	movs	r2, #4
 80091ac:	4619      	mov	r1, r3
 80091ae:	f008 fbb2 	bl	8011916 <memcmp>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 8146 	bne.w	8009446 <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80091ba:	e05b      	b.n	8009274 <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d10e      	bne.n	80091e2 <rx_dhcp_client+0x92>
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	3301      	adds	r3, #1
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d109      	bne.n	80091e2 <rx_dhcp_client+0x92>
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	3306      	adds	r3, #6
 80091d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d904      	bls.n	80091e2 <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	3302      	adds	r3, #2
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	61fb      	str	r3, [r7, #28]
 80091e0:	e041      	b.n	8009266 <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d112      	bne.n	8009210 <rx_dhcp_client+0xc0>
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	3301      	adds	r3, #1
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d10d      	bne.n	8009210 <rx_dhcp_client+0xc0>
 80091f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f6:	3306      	adds	r3, #6
 80091f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d908      	bls.n	8009210 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	3302      	adds	r3, #2
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
 800920e:	e02a      	b.n	8009266 <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b33      	cmp	r3, #51	; 0x33
 8009216:	d114      	bne.n	8009242 <rx_dhcp_client+0xf2>
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	3301      	adds	r3, #1
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b04      	cmp	r3, #4
 8009220:	d10f      	bne.n	8009242 <rx_dhcp_client+0xf2>
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	3306      	adds	r3, #6
 8009226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009228:	429a      	cmp	r2, r3
 800922a:	d90a      	bls.n	8009242 <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	3302      	adds	r3, #2
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe fdfc 	bl	8007e34 <mg_ntohl>
 800923c:	4603      	mov	r3, r0
 800923e:	61bb      	str	r3, [r7, #24]
 8009240:	e011      	b.n	8009266 <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b35      	cmp	r3, #53	; 0x35
 8009248:	d10d      	bne.n	8009266 <rx_dhcp_client+0x116>
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	3301      	adds	r3, #1
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d108      	bne.n	8009266 <rx_dhcp_client+0x116>
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	3306      	adds	r3, #6
 8009258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925a:	429a      	cmp	r2, r3
 800925c:	d903      	bls.n	8009266 <rx_dhcp_client+0x116>
      msgtype = p[2];
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	789b      	ldrb	r3, [r3, #2]
 8009262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 8009266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009268:	3301      	adds	r3, #1
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	3302      	adds	r3, #2
 800926e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009270:	4413      	add	r3, r2
 8009272:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	3301      	adds	r3, #1
 8009278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927a:	429a      	cmp	r2, r3
 800927c:	d903      	bls.n	8009286 <rx_dhcp_client+0x136>
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2bff      	cmp	r3, #255	; 0xff
 8009284:	d19a      	bne.n	80091bc <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8009286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800928a:	2b06      	cmp	r3, #6
 800928c:	d10c      	bne.n	80092a8 <rx_dhcp_client+0x158>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009294:	429a      	cmp	r2, r3
 8009296:	d107      	bne.n	80092a8 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	609a      	str	r2, [r3, #8]
 80092a6:	e0c1      	b.n	800942c <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 80092a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d11a      	bne.n	80092e6 <rx_dhcp_client+0x196>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d115      	bne.n	80092e6 <rx_dhcp_client+0x196>
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d012      	beq.n	80092e6 <rx_dhcp_client+0x196>
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00f      	beq.n	80092e6 <rx_dhcp_client+0x196>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00c      	beq.n	80092e6 <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff fcd8 	bl	8008c8c <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80092e4:	e0a2      	b.n	800942c <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 80092e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	f040 809e 	bne.w	800942c <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d162      	bne.n	80093c0 <rx_dhcp_client+0x270>
 80092fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d05f      	beq.n	80093c0 <rx_dhcp_client+0x270>
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05c      	beq.n	80093c0 <rx_dhcp_client+0x270>
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d059      	beq.n	80093c0 <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009312:	69b9      	ldr	r1, [r7, #24]
 8009314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009318:	fb00 f101 	mul.w	r1, r0, r1
 800931c:	2000      	movs	r0, #0
 800931e:	4688      	mov	r8, r1
 8009320:	4681      	mov	r9, r0
 8009322:	eb12 0108 	adds.w	r1, r2, r8
 8009326:	6039      	str	r1, [r7, #0]
 8009328:	eb43 0309 	adc.w	r3, r3, r9
 800932c:	607b      	str	r3, [r7, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009334:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8009338:	4b45      	ldr	r3, [pc, #276]	; (8009450 <rx_dhcp_client+0x300>)
 800933a:	f641 72aa 	movw	r2, #8106	; 0x1faa
 800933e:	4945      	ldr	r1, [pc, #276]	; (8009454 <rx_dhcp_client+0x304>)
 8009340:	2002      	movs	r0, #2
 8009342:	f7fd f871 	bl	8006428 <mg_log_prefix>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00f      	beq.n	800936c <rx_dhcp_client+0x21c>
 800934c:	69bc      	ldr	r4, [r7, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8009354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009358:	f04f 0300 	mov.w	r3, #0
 800935c:	f7f7 fc3e 	bl	8000bdc <__aeabi_uldivmod>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4621      	mov	r1, r4
 8009366:	483c      	ldr	r0, [pc, #240]	; (8009458 <rx_dhcp_client+0x308>)
 8009368:	f7fd f8b8 	bl	80064dc <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	3306      	adds	r3, #6
 8009378:	2206      	movs	r2, #6
 800937a:	4619      	mov	r1, r3
 800937c:	f008 fbbf 	bl	8011afe <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009384:	609a      	str	r2, [r3, #8]
 8009386:	6a3a      	ldr	r2, [r7, #32]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	611a      	str	r2, [r3, #16]
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2203      	movs	r2, #3
 8009396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800939a:	f107 0310 	add.w	r3, r7, #16
 800939e:	2108      	movs	r1, #8
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7f7 ff99 	bl	80012d8 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 80093a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093aa:	4614      	mov	r4, r2
 80093ac:	f7fe fdac 	bl	8007f08 <mg_millis>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4613      	mov	r3, r2
 80093b6:	4423      	add	r3, r4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f008 f8d3 	bl	8011564 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80093be:	e035      	b.n	800942c <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d130      	bne.n	800942c <rx_dhcp_client+0x2dc>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d12b      	bne.n	800942c <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80093da:	69b9      	ldr	r1, [r7, #24]
 80093dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093e0:	fb00 f101 	mul.w	r1, r0, r1
 80093e4:	2000      	movs	r0, #0
 80093e6:	460c      	mov	r4, r1
 80093e8:	4605      	mov	r5, r0
 80093ea:	eb12 0a04 	adds.w	sl, r2, r4
 80093ee:	eb43 0b05 	adc.w	fp, r3, r5
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80093f8:	4b15      	ldr	r3, [pc, #84]	; (8009450 <rx_dhcp_client+0x300>)
 80093fa:	f641 72b4 	movw	r2, #8116	; 0x1fb4
 80093fe:	4915      	ldr	r1, [pc, #84]	; (8009454 <rx_dhcp_client+0x304>)
 8009400:	2002      	movs	r0, #2
 8009402:	f7fd f811 	bl	8006428 <mg_log_prefix>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00f      	beq.n	800942c <rx_dhcp_client+0x2dc>
 800940c:	69bc      	ldr	r4, [r7, #24]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8009414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	f7f7 fbde 	bl	8000bdc <__aeabi_uldivmod>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4621      	mov	r1, r4
 8009426:	480c      	ldr	r0, [pc, #48]	; (8009458 <rx_dhcp_client+0x308>)
 8009428:	f7fd f858 	bl	80064dc <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009432:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009436:	429a      	cmp	r2, r3
 8009438:	d006      	beq.n	8009448 <rx_dhcp_client+0x2f8>
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fa50 	bl	80088e0 <onstatechange>
 8009440:	e002      	b.n	8009448 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009442:	bf00      	nop
 8009444:	e000      	b.n	8009448 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8009446:	bf00      	nop
}
 8009448:	3738      	adds	r7, #56	; 0x38
 800944a:	46bd      	mov	sp, r7
 800944c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009450:	080141f0 	.word	0x080141f0
 8009454:	080127ac 	.word	0x080127ac
 8009458:	08013cd0 	.word	0x08013cd0

0800945c <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009460:	b0d6      	sub	sp, #344	; 0x158
 8009462:	af04      	add	r7, sp, #16
 8009464:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009468:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800946c:	6018      	str	r0, [r3, #0]
 800946e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009472:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009476:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8009478:	2300      	movs	r3, #0
 800947a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800947e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009482:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948a:	33f0      	adds	r3, #240	; 0xf0
 800948c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 8009490:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009494:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4413      	add	r3, r2
 80094aa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80094ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094b2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80094be:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80094c2:	429a      	cmp	r2, r3
 80094c4:	f0c0 818b 	bcc.w	80097de <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 80094c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80094d0:	4ac6      	ldr	r2, [pc, #792]	; (80097ec <rx_dhcp_server+0x390>)
 80094d2:	4618      	mov	r0, r3
 80094d4:	4611      	mov	r1, r2
 80094d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80094da:	461a      	mov	r2, r3
 80094dc:	f008 fb0f 	bl	8011afe <memcpy>
  res.yiaddr = ifp->ip;
 80094e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094e4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80094f4:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 80094f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094fa:	3310      	adds	r3, #16
 80094fc:	3303      	adds	r3, #3
 80094fe:	781a      	ldrb	r2, [r3, #0]
 8009500:	3201      	adds	r2, #1
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8009506:	e020      	b.n	800954a <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8009508:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b35      	cmp	r3, #53	; 0x35
 8009510:	d111      	bne.n	8009536 <rx_dhcp_server+0xda>
 8009512:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009516:	3301      	adds	r3, #1
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d10b      	bne.n	8009536 <rx_dhcp_server+0xda>
 800951e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009522:	3302      	adds	r3, #2
 8009524:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009528:	429a      	cmp	r2, r3
 800952a:	d904      	bls.n	8009536 <rx_dhcp_server+0xda>
      op = p[2];
 800952c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009530:	789b      	ldrb	r3, [r3, #2]
 8009532:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 8009536:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800953a:	3301      	adds	r3, #1
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	3302      	adds	r3, #2
 8009540:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8009544:	4413      	add	r3, r2
 8009546:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800954a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800954e:	3301      	adds	r3, #1
 8009550:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009554:	429a      	cmp	r2, r3
 8009556:	d904      	bls.n	8009562 <rx_dhcp_server+0x106>
 8009558:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2bff      	cmp	r3, #255	; 0xff
 8009560:	d1d2      	bne.n	8009508 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8009562:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009566:	2b01      	cmp	r3, #1
 8009568:	d004      	beq.n	8009574 <rx_dhcp_server+0x118>
 800956a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800956e:	2b03      	cmp	r3, #3
 8009570:	f040 8136 	bne.w	80097e0 <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8009574:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <rx_dhcp_server+0x124>
 800957c:	2302      	movs	r3, #2
 800957e:	e000      	b.n	8009582 <rx_dhcp_server+0x126>
 8009580:	2305      	movs	r3, #5
 8009582:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 8009586:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800958a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800958e:	2235      	movs	r2, #53	; 0x35
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009596:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800959a:	2201      	movs	r2, #1
 800959c:	705a      	strb	r2, [r3, #1]
 800959e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095a6:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 80095aa:	709a      	strb	r2, [r3, #2]
 80095ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095b4:	2201      	movs	r2, #1
 80095b6:	70da      	strb	r2, [r3, #3]
 80095b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095c0:	2204      	movs	r2, #4
 80095c2:	711a      	strb	r2, [r3, #4]
 80095c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095cc:	2200      	movs	r2, #0
 80095ce:	715a      	strb	r2, [r3, #5]
 80095d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095d8:	2200      	movs	r2, #0
 80095da:	719a      	strb	r2, [r3, #6]
 80095dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095e4:	2200      	movs	r2, #0
 80095e6:	71da      	strb	r2, [r3, #7]
 80095e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095f0:	2200      	movs	r2, #0
 80095f2:	721a      	strb	r2, [r3, #8]
 80095f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095fc:	2236      	movs	r2, #54	; 0x36
 80095fe:	725a      	strb	r2, [r3, #9]
 8009600:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009604:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009608:	2204      	movs	r2, #4
 800960a:	729a      	strb	r2, [r3, #10]
 800960c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009610:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009614:	2200      	movs	r2, #0
 8009616:	72da      	strb	r2, [r3, #11]
 8009618:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800961c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009620:	2200      	movs	r2, #0
 8009622:	731a      	strb	r2, [r3, #12]
 8009624:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009628:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800962c:	2200      	movs	r2, #0
 800962e:	735a      	strb	r2, [r3, #13]
 8009630:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009634:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009638:	2200      	movs	r2, #0
 800963a:	739a      	strb	r2, [r3, #14]
 800963c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009640:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009644:	220c      	movs	r2, #12
 8009646:	73da      	strb	r2, [r3, #15]
 8009648:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800964c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009650:	2203      	movs	r2, #3
 8009652:	741a      	strb	r2, [r3, #16]
 8009654:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009658:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800965c:	226d      	movs	r2, #109	; 0x6d
 800965e:	745a      	strb	r2, [r3, #17]
 8009660:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009664:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009668:	2269      	movs	r2, #105	; 0x69
 800966a:	749a      	strb	r2, [r3, #18]
 800966c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009670:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009674:	2270      	movs	r2, #112	; 0x70
 8009676:	74da      	strb	r2, [r3, #19]
 8009678:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800967c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009680:	2233      	movs	r2, #51	; 0x33
 8009682:	751a      	strb	r2, [r3, #20]
 8009684:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009688:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800968c:	2204      	movs	r2, #4
 800968e:	755a      	strb	r2, [r3, #21]
 8009690:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009694:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009698:	22ff      	movs	r2, #255	; 0xff
 800969a:	759a      	strb	r2, [r3, #22]
 800969c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096a4:	22ff      	movs	r2, #255	; 0xff
 80096a6:	75da      	strb	r2, [r3, #23]
 80096a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096b0:	22ff      	movs	r2, #255	; 0xff
 80096b2:	761a      	strb	r2, [r3, #24]
 80096b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096bc:	22ff      	movs	r2, #255	; 0xff
 80096be:	765a      	strb	r2, [r3, #25]
 80096c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096c8:	22ff      	movs	r2, #255	; 0xff
 80096ca:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80096cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80096d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d8:	f103 011c 	add.w	r1, r3, #28
 80096dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80096e0:	331c      	adds	r3, #28
 80096e2:	2206      	movs	r2, #6
 80096e4:	4618      	mov	r0, r3
 80096e6:	f008 fa0a 	bl	8011afe <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 80096ea:	f107 030c 	add.w	r3, r7, #12
 80096ee:	3305      	adds	r3, #5
 80096f0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80096f4:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80096f8:	6812      	ldr	r2, [r2, #0]
 80096fa:	320c      	adds	r2, #12
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8009700:	f107 030c 	add.w	r3, r7, #12
 8009704:	330b      	adds	r3, #11
 8009706:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800970a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800970e:	6812      	ldr	r2, [r2, #0]
 8009710:	3208      	adds	r2, #8
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 8009716:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800971a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800971e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009722:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8009726:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800972a:	4615      	mov	r5, r2
 800972c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800972e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009734:	c403      	stmia	r4!, {r0, r1}
 8009736:	8022      	strh	r2, [r4, #0]
 8009738:	3402      	adds	r4, #2
 800973a:	0c13      	lsrs	r3, r2, #16
 800973c:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800973e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009742:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800974e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009752:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009756:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 800975a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800975e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800976c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009770:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8009772:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009776:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	1d9d      	adds	r5, r3, #6
 8009780:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009784:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689e      	ldr	r6, [r3, #8]
 800978c:	2043      	movs	r0, #67	; 0x43
 800978e:	f7fe fb6a 	bl	8007e66 <mg_ntohs>
 8009792:	4603      	mov	r3, r0
 8009794:	4698      	mov	r8, r3
 8009796:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800979a:	2b01      	cmp	r3, #1
 800979c:	d005      	beq.n	80097aa <rx_dhcp_server+0x34e>
 800979e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80097a6:	691c      	ldr	r4, [r3, #16]
 80097a8:	e001      	b.n	80097ae <rx_dhcp_server+0x352>
 80097aa:	f04f 34ff 	mov.w	r4, #4294967295
 80097ae:	2044      	movs	r0, #68	; 0x44
 80097b0:	f7fe fb59 	bl	8007e66 <mg_ntohs>
 80097b4:	4603      	mov	r3, r0
 80097b6:	461a      	mov	r2, r3
 80097b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80097bc:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 80097c0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	9201      	str	r2, [sp, #4]
 80097ce:	9400      	str	r4, [sp, #0]
 80097d0:	4643      	mov	r3, r8
 80097d2:	4632      	mov	r2, r6
 80097d4:	4629      	mov	r1, r5
 80097d6:	6800      	ldr	r0, [r0, #0]
 80097d8:	f7ff f95e 	bl	8008a98 <tx_udp>
 80097dc:	e000      	b.n	80097e0 <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80097de:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 80097e0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80097e4:	46bd      	mov	sp, r7
 80097e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ea:	bf00      	nop
 80097ec:	08013ce8 	.word	0x08013ce8

080097f0 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	2201      	movs	r2, #1
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff faf0 	bl	8008de8 <getpeer>
 8009808:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d059      	beq.n	80098c4 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	331c      	adds	r3, #28
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	69d2      	ldr	r2, [r2, #28]
 8009824:	320c      	adds	r2, #12
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3390      	adds	r3, #144	; 0x90
 800982e:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f103 0010 	add.w	r0, r3, #16
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	3306      	adds	r3, #6
 800983c:	2206      	movs	r2, #6
 800983e:	4619      	mov	r1, r3
 8009840:	f008 f95d 	bl	8011afe <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009848:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800984c:	d304      	bcc.n	8009858 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800984e:	491f      	ldr	r1, [pc, #124]	; (80098cc <rx_udp+0xdc>)
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7f7 ffc9 	bl	80017e8 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8009856:	e035      	b.n	80098c4 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009860:	1ad2      	subs	r2, r2, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	429a      	cmp	r2, r3
 8009868:	d212      	bcs.n	8009890 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	4413      	add	r3, r2
 800987a:	4619      	mov	r1, r3
 800987c:	f7fb fe76 	bl	800556c <mg_iobuf_resize>
 8009880:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 8009882:	2b00      	cmp	r3, #0
 8009884:	d104      	bne.n	8009890 <rx_udp+0xa0>
      mg_error(c, "oom");
 8009886:	4912      	ldr	r1, [pc, #72]	; (80098d0 <rx_udp+0xe0>)
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7f7 ffad 	bl	80017e8 <mg_error>
}
 800988e:	e019      	b.n	80098c4 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009898:	18d0      	adds	r0, r2, r3
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	6899      	ldr	r1, [r3, #8]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f008 f92b 	bl	8011afe <memcpy>
      c->recv.len += pkt->pay.len;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	330c      	adds	r3, #12
 80098ba:	461a      	mov	r2, r3
 80098bc:	2107      	movs	r1, #7
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7f7 ff6f 	bl	80017a2 <mg_call>
}
 80098c4:	bf00      	nop
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	08013df8 	.word	0x08013df8
 80098d0:	08013e14 	.word	0x08013e14

080098d4 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 80098d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098d6:	b091      	sub	sp, #68	; 0x44
 80098d8:	af06      	add	r7, sp, #24
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689a      	ldr	r2, [r3, #8]
 80098e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e8:	3314      	adds	r3, #20
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	4613      	mov	r3, r2
 80098f2:	2206      	movs	r2, #6
 80098f4:	68b9      	ldr	r1, [r7, #8]
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f7ff f878 	bl	80089ec <tx_ip>
 80098fc:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	3314      	adds	r3, #20
 8009902:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8009904:	2214      	movs	r2, #20
 8009906:	2100      	movs	r1, #0
 8009908:	6a38      	ldr	r0, [r7, #32]
 800990a:	f008 f82e 	bl	801196a <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800990e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <tx_tcp+0x54>
 8009914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009916:	2b00      	cmp	r3, #0
 8009918:	d006      	beq.n	8009928 <tx_tcp+0x54>
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	3314      	adds	r3, #20
 800991e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009920:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009922:	4618      	mov	r0, r3
 8009924:	f008 f807 	bl	8011936 <memmove>
  tcp->sport = sport;
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800992e:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009936:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800993c:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009942:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 800994a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800994e:	f7fe fa8a 	bl	8007e66 <mg_ntohs>
 8009952:	4603      	mov	r3, r0
 8009954:	461a      	mov	r2, r3
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	2250      	movs	r2, #80	; 0x50
 800995e:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 8009964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009966:	b29b      	uxth	r3, r3
 8009968:	3314      	adds	r3, #20
 800996a:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800996c:	2300      	movs	r3, #0
 800996e:	753b      	strb	r3, [r7, #20]
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	7a5b      	ldrb	r3, [r3, #9]
 8009974:	757b      	strb	r3, [r7, #21]
 8009976:	8b7b      	ldrh	r3, [r7, #26]
 8009978:	0a1b      	lsrs	r3, r3, #8
 800997a:	b29b      	uxth	r3, r3
 800997c:	b2db      	uxtb	r3, r3
 800997e:	75bb      	strb	r3, [r7, #22]
 8009980:	8b7b      	ldrh	r3, [r7, #26]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 8009986:	8b7b      	ldrh	r3, [r7, #26]
 8009988:	461a      	mov	r2, r3
 800998a:	6a39      	ldr	r1, [r7, #32]
 800998c:	69f8      	ldr	r0, [r7, #28]
 800998e:	f7fe fed3 	bl	8008738 <csumup>
 8009992:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	330c      	adds	r3, #12
 8009998:	2204      	movs	r2, #4
 800999a:	4619      	mov	r1, r3
 800999c:	69f8      	ldr	r0, [r7, #28]
 800999e:	f7fe fecb 	bl	8008738 <csumup>
 80099a2:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	3310      	adds	r3, #16
 80099a8:	2204      	movs	r2, #4
 80099aa:	4619      	mov	r1, r3
 80099ac:	69f8      	ldr	r0, [r7, #28]
 80099ae:	f7fe fec3 	bl	8008738 <csumup>
 80099b2:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 80099b4:	f107 0314 	add.w	r3, r7, #20
 80099b8:	2204      	movs	r2, #4
 80099ba:	4619      	mov	r1, r3
 80099bc:	69f8      	ldr	r0, [r7, #28]
 80099be:	f7fe febb 	bl	8008738 <csumup>
 80099c2:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 80099c4:	69f8      	ldr	r0, [r7, #28]
 80099c6:	f7fe fee4 	bl	8008792 <csumfin>
 80099ca:	4603      	mov	r3, r0
 80099cc:	461a      	mov	r2, r3
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 80099d2:	4b21      	ldr	r3, [pc, #132]	; (8009a58 <tx_tcp+0x184>)
 80099d4:	f242 020c 	movw	r2, #8204	; 0x200c
 80099d8:	4920      	ldr	r1, [pc, #128]	; (8009a5c <tx_tcp+0x188>)
 80099da:	2003      	movs	r0, #3
 80099dc:	f7fc fd24 	bl	8006428 <mg_log_prefix>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d025      	beq.n	8009a32 <tx_tcp+0x15e>
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	f103 050c 	add.w	r5, r3, #12
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe fa37 	bl	8007e66 <mg_ntohs>
 80099f8:	4603      	mov	r3, r0
 80099fa:	461e      	mov	r6, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	f103 0410 	add.w	r4, r3, #16
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	885b      	ldrh	r3, [r3, #2]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fa2c 	bl	8007e66 <mg_ntohs>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	7b5b      	ldrb	r3, [r3, #13]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	9103      	str	r1, [sp, #12]
 8009a1e:	9202      	str	r2, [sp, #8]
 8009a20:	9401      	str	r4, [sp, #4]
 8009a22:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <tx_tcp+0x18c>)
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	4633      	mov	r3, r6
 8009a28:	462a      	mov	r2, r5
 8009a2a:	490d      	ldr	r1, [pc, #52]	; (8009a60 <tx_tcp+0x18c>)
 8009a2c:	480d      	ldr	r0, [pc, #52]	; (8009a64 <tx_tcp+0x190>)
 8009a2e:	f7fc fd55 	bl	80064dc <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f103 0214 	add.w	r2, r3, #20
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	461a      	mov	r2, r3
 8009a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a42:	4413      	add	r3, r2
 8009a44:	4619      	mov	r1, r3
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7fe fed1 	bl	80087ee <ether_output>
 8009a4c:	4603      	mov	r3, r0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	372c      	adds	r7, #44	; 0x2c
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a56:	bf00      	nop
 8009a58:	08014200 	.word	0x08014200
 8009a5c:	080127ac 	.word	0x080127ac
 8009a60:	08006c79 	.word	0x08006c79
 8009a64:	08013e18 	.word	0x08013e18

08009a68 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8009a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6c:	b08c      	sub	sp, #48	; 0x30
 8009a6e:	af06      	add	r7, sp, #24
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	603b      	str	r3, [r7, #0]
 8009a76:	4613      	mov	r3, r2
 8009a78:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	7b5b      	ldrb	r3, [r3, #13]
 8009a80:	f003 0303 	and.w	r3, r3, #3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	bf14      	ite	ne
 8009a88:	2301      	movne	r3, #1
 8009a8a:	2300      	moveq	r3, #0
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	1d9e      	adds	r6, r3, #6
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	885b      	ldrh	r3, [r3, #2]
 8009aa4:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fe f9bd 	bl	8007e34 <mg_ntohl>
 8009aba:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4413      	add	r3, r2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe f9b7 	bl	8007e34 <mg_ntohl>
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	79fa      	ldrb	r2, [r7, #7]
 8009aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009acc:	9305      	str	r3, [sp, #20]
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	9103      	str	r1, [sp, #12]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	9302      	str	r3, [sp, #8]
 8009ad8:	9501      	str	r5, [sp, #4]
 8009ada:	9400      	str	r4, [sp, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	4642      	mov	r2, r8
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f7ff fef6 	bl	80098d4 <tx_tcp>
 8009ae8:	4603      	mov	r3, r0
                buf, len);
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009af4 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 8009af4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009af8:	b088      	sub	sp, #32
 8009afa:	af02      	add	r7, sp, #8
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b08:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3390      	adds	r3, #144	; 0x90
 8009b0e:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d101      	bne.n	8009b1a <settmout+0x26>
 8009b16:	2396      	movs	r3, #150	; 0x96
 8009b18:	e001      	b.n	8009b1e <settmout+0x2a>
 8009b1a:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8009b1e:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	2000      	movs	r0, #0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	eb12 0804 	adds.w	r8, r2, r4
 8009b32:	eb43 0905 	adc.w	r9, r3, r5
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 8009b42:	4b0d      	ldr	r3, [pc, #52]	; (8009b78 <settmout+0x84>)
 8009b44:	f242 0221 	movw	r2, #8225	; 0x2021
 8009b48:	490c      	ldr	r1, [pc, #48]	; (8009b7c <settmout+0x88>)
 8009b4a:	2004      	movs	r0, #4
 8009b4c:	f7fc fc6c 	bl	8006428 <mg_log_prefix>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00b      	beq.n	8009b6e <settmout+0x7a>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b5a:	78f8      	ldrb	r0, [r7, #3]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009b62:	e9cd 2300 	strd	r2, r3, [sp]
 8009b66:	4602      	mov	r2, r0
 8009b68:	4805      	ldr	r0, [pc, #20]	; (8009b80 <settmout+0x8c>)
 8009b6a:	f7fc fcb7 	bl	80064dc <mg_log>
}
 8009b6e:	bf00      	nop
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b78:	08014208 	.word	0x08014208
 8009b7c:	080127ac 	.word	0x080127ac
 8009b80:	08013e3c 	.word	0x08013e3c

08009b84 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8009b84:	b5b0      	push	{r4, r5, r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fc fdc2 	bl	800671c <mg_alloc_conn>
 8009b98:	6178      	str	r0, [r7, #20]
  if (c == NULL) {
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10e      	bne.n	8009bbe <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 8009ba0:	4b55      	ldr	r3, [pc, #340]	; (8009cf8 <accept_conn+0x174>)
 8009ba2:	f242 0228 	movw	r2, #8232	; 0x2028
 8009ba6:	4955      	ldr	r1, [pc, #340]	; (8009cfc <accept_conn+0x178>)
 8009ba8:	2001      	movs	r0, #1
 8009baa:	f7fc fc3d 	bl	8006428 <mg_log_prefix>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <accept_conn+0x36>
 8009bb4:	4852      	ldr	r0, [pc, #328]	; (8009d00 <accept_conn+0x17c>)
 8009bb6:	f7fc fc91 	bl	80064dc <mg_log>
    return NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e098      	b.n	8009cf0 <accept_conn+0x16c>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	3390      	adds	r3, #144	; 0x90
 8009bc2:	613b      	str	r3, [r7, #16]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe f932 	bl	8007e34 <mg_ntohl>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fe f929 	bl	8007e34 <mg_ntohl>
 8009be2:	4602      	mov	r2, r0
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	f103 0010 	add.w	r0, r3, #16
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	3306      	adds	r3, #6
 8009bf4:	2206      	movs	r2, #6
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	f007 ff81 	bl	8011afe <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	6978      	ldr	r0, [r7, #20]
 8009c00:	f7ff ff78 	bl	8009af4 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	331c      	adds	r3, #28
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	69d2      	ldr	r2, [r2, #28]
 8009c0c:	320c      	adds	r2, #12
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8009c1e:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <accept_conn+0x174>)
 8009c20:	f242 0231 	movw	r2, #8241	; 0x2031
 8009c24:	4935      	ldr	r1, [pc, #212]	; (8009cfc <accept_conn+0x178>)
 8009c26:	2003      	movs	r0, #3
 8009c28:	f7fc fbfe 	bl	8006428 <mg_log_prefix>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d007      	beq.n	8009c42 <accept_conn+0xbe>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	331c      	adds	r3, #28
 8009c3a:	4a32      	ldr	r2, [pc, #200]	; (8009d04 <accept_conn+0x180>)
 8009c3c:	4832      	ldr	r0, [pc, #200]	; (8009d08 <accept_conn+0x184>)
 8009c3e:	f7fc fc4d 	bl	80064dc <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8009c5a:	f043 0304 	orr.w	r3, r3, #4
 8009c5e:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009c68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c6c:	b2d9      	uxtb	r1, r3
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009c74:	f361 03c3 	bfi	r3, r1, #3, #1
 8009c78:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f102 0408 	add.w	r4, r2, #8
 8009c8c:	f103 0508 	add.w	r5, r3, #8
 8009c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	6978      	ldr	r0, [r7, #20]
 8009cb6:	f7f7 fd74 	bl	80017a2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2105      	movs	r1, #5
 8009cbe:	6978      	ldr	r0, [r7, #20]
 8009cc0:	f7f7 fd6f 	bl	80017a2 <mg_call>
  if (lsn->is_tls) mg_tls_init(c, mg_str(""));
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00c      	beq.n	8009cee <accept_conn+0x16a>
 8009cd4:	f107 0308 	add.w	r3, r7, #8
 8009cd8:	490c      	ldr	r1, [pc, #48]	; (8009d0c <accept_conn+0x188>)
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fd fa6c 	bl	80071b8 <mg_str_s>
 8009ce0:	f107 0308 	add.w	r3, r7, #8
 8009ce4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ce8:	6978      	ldr	r0, [r7, #20]
 8009cea:	f7fd ff27 	bl	8007b3c <mg_tls_init>
  return c;
 8009cee:	697b      	ldr	r3, [r7, #20]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8009cf8:	08014214 	.word	0x08014214
 8009cfc:	080127ac 	.word	0x080127ac
 8009d00:	080134cc 	.word	0x080134cc
 8009d04:	08006cf1 	.word	0x08006cf1
 8009d08:	08013e4c 	.word	0x08013e4c
 8009d0c:	08012e3c 	.word	0x08012e3c

08009d10 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8009d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d12:	b093      	sub	sp, #76	; 0x4c
 8009d14:	af06      	add	r7, sp, #24
 8009d16:	6178      	str	r0, [r7, #20]
 8009d18:	6139      	str	r1, [r7, #16]
 8009d1a:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	3390      	adds	r3, #144	; 0x90
 8009d28:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	331c      	adds	r3, #28
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d024      	beq.n	8009d8c <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 8009d42:	232e      	movs	r3, #46	; 0x2e
 8009d44:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	441a      	add	r2, r3
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d904      	bls.n	8009d5e <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	699a      	ldr	r2, [r3, #24]
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	f103 0010 	add.w	r0, r3, #16
 8009d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d66:	689c      	ldr	r4, [r3, #8]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	8b1d      	ldrh	r5, [r3, #24]
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	9103      	str	r1, [sp, #12]
 8009d76:	6939      	ldr	r1, [r7, #16]
 8009d78:	9102      	str	r1, [sp, #8]
 8009d7a:	9201      	str	r2, [sp, #4]
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	462b      	mov	r3, r5
 8009d80:	4622      	mov	r2, r4
 8009d82:	4601      	mov	r1, r0
 8009d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d86:	f7fe fe87 	bl	8008a98 <tx_udp>
 8009d8a:	e046      	b.n	8009e1a <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 8009d8c:	2362      	movs	r3, #98	; 0x62
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	441a      	add	r2, r3
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d904      	bls.n	8009da8 <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	f103 0610 	add.w	r6, r3, #16
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	60bb      	str	r3, [r7, #8]
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	8b1c      	ldrh	r4, [r3, #24]
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe f838 	bl	8007e34 <mg_ntohl>
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe f832 	bl	8007e34 <mg_ntohl>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	9305      	str	r3, [sp, #20]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	9203      	str	r2, [sp, #12]
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	9102      	str	r1, [sp, #8]
 8009de0:	9501      	str	r5, [sp, #4]
 8009de2:	9400      	str	r4, [sp, #0]
 8009de4:	2318      	movs	r3, #24
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	4631      	mov	r1, r6
 8009dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dec:	f7ff fd72 	bl	80098d4 <tx_tcp>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00e      	beq.n	8009e14 <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	441a      	add	r2, r3
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	7d9b      	ldrb	r3, [r3, #22]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d107      	bne.n	8009e1a <mg_io_send+0x10a>
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	f7ff fe71 	bl	8009af4 <settmout>
 8009e12:	e002      	b.n	8009e1a <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 8009e14:	f04f 33ff 	mov.w	r3, #4294967295
 8009e18:	e000      	b.n	8009e1c <mg_io_send+0x10c>
    }
  }
  return (long) len;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3734      	adds	r7, #52	; 0x34
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e24 <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	b090      	sub	sp, #64	; 0x40
 8009e2a:	af06      	add	r7, sp, #24
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3390      	adds	r3, #144	; 0x90
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <read_conn+0x28>
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	3318      	adds	r3, #24
 8009e4a:	e001      	b.n	8009e50 <read_conn+0x2c>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3338      	adds	r3, #56	; 0x38
 8009e50:	623b      	str	r3, [r7, #32]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fd ffeb 	bl	8007e34 <mg_ntohl>
 8009e5e:	61f8      	str	r0, [r7, #28]
  s->raw.align = c->recv.align;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6c:	7b5b      	ldrb	r3, [r3, #13]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01a      	beq.n	8009eac <read_conn+0x88>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fd ffd9 	bl	8007e34 <mg_ntohl>
 8009e82:	4603      	mov	r3, r0
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	605a      	str	r2, [r3, #4]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fd ffcf 	bl	8007e34 <mg_ntohl>
 8009e96:	4602      	mov	r2, r0
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009ea2:	f043 0320 	orr.w	r3, r3, #32
 8009ea6:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8009eaa:	e116      	b.n	800a0da <read_conn+0x2b6>
  } else if (pkt->pay.len == 0) {
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8112 	beq.w	800a0da <read_conn+0x2b6>
  } else if (seq != s->ack) {
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d05b      	beq.n	8009f78 <read_conn+0x154>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fd ffb4 	bl	8007e34 <mg_ntohl>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	61bb      	str	r3, [r7, #24]
    if (s->ack == ack) {
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d10e      	bne.n	8009efe <read_conn+0xda>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8009ee0:	4b80      	ldr	r3, [pc, #512]	; (800a0e4 <read_conn+0x2c0>)
 8009ee2:	f242 0271 	movw	r2, #8305	; 0x2071
 8009ee6:	4980      	ldr	r1, [pc, #512]	; (800a0e8 <read_conn+0x2c4>)
 8009ee8:	2004      	movs	r0, #4
 8009eea:	f7fc fa9d 	bl	8006428 <mg_log_prefix>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 80f2 	beq.w	800a0da <read_conn+0x2b6>
 8009ef6:	487d      	ldr	r0, [pc, #500]	; (800a0ec <read_conn+0x2c8>)
 8009ef8:	f7fc faf0 	bl	80064dc <mg_log>
}
 8009efc:	e0ed      	b.n	800a0da <read_conn+0x2b6>
      memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	331c      	adds	r3, #28
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	617b      	str	r3, [r7, #20]
      MG_DEBUG(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8009f06:	4b77      	ldr	r3, [pc, #476]	; (800a0e4 <read_conn+0x2c0>)
 8009f08:	f242 0275 	movw	r2, #8309	; 0x2075
 8009f0c:	4976      	ldr	r1, [pc, #472]	; (800a0e8 <read_conn+0x2c4>)
 8009f0e:	2003      	movs	r0, #3
 8009f10:	f7fc fa8a 	bl	8006428 <mg_log_prefix>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <read_conn+0x104>
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	69f9      	ldr	r1, [r7, #28]
 8009f22:	4873      	ldr	r0, [pc, #460]	; (800a0f0 <read_conn+0x2cc>)
 8009f24:	f7fc fada 	bl	80064dc <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	f103 0810 	add.w	r8, r3, #16
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	607b      	str	r3, [r7, #4]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8b1c      	ldrh	r4, [r3, #24]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fd ff75 	bl	8007e34 <mg_ntohl>
 8009f4a:	6038      	str	r0, [r7, #0]
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fd ff6f 	bl	8007e34 <mg_ntohl>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	9205      	str	r2, [sp, #20]
 8009f5c:	4a65      	ldr	r2, [pc, #404]	; (800a0f4 <read_conn+0x2d0>)
 8009f5e:	9204      	str	r2, [sp, #16]
 8009f60:	9303      	str	r3, [sp, #12]
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	9102      	str	r1, [sp, #8]
 8009f66:	9501      	str	r5, [sp, #4]
 8009f68:	9400      	str	r4, [sp, #0]
 8009f6a:	2310      	movs	r3, #16
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4641      	mov	r1, r8
 8009f70:	4630      	mov	r0, r6
 8009f72:	f7ff fcaf 	bl	80098d4 <tx_tcp>
}
 8009f76:	e0b0      	b.n	800a0da <read_conn+0x2b6>
  } else if (io->size - io->len < pkt->pay.len &&
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	1ad2      	subs	r2, r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d210      	bcs.n	8009fac <read_conn+0x188>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	4413      	add	r3, r2
 8009f94:	4619      	mov	r1, r3
 8009f96:	6a38      	ldr	r0, [r7, #32]
 8009f98:	f7fb fae8 	bl	800556c <mg_iobuf_resize>
 8009f9c:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d104      	bne.n	8009fac <read_conn+0x188>
    mg_error(c, "oom");
 8009fa2:	4955      	ldr	r1, [pc, #340]	; (800a0f8 <read_conn+0x2d4>)
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7f7 fc1f 	bl	80017e8 <mg_error>
 8009faa:	e096      	b.n	800a0da <read_conn+0x2b6>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	18d0      	adds	r0, r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6899      	ldr	r1, [r3, #8]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f007 fd9d 	bl	8011afe <memcpy>
    io->len += pkt->pay.len;
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	441a      	add	r2, r3
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8009fd2:	4b44      	ldr	r3, [pc, #272]	; (800a0e4 <read_conn+0x2c0>)
 8009fd4:	f242 0286 	movw	r2, #8326	; 0x2086
 8009fd8:	4943      	ldr	r1, [pc, #268]	; (800a0e8 <read_conn+0x2c4>)
 8009fda:	2003      	movs	r0, #3
 8009fdc:	f7fc fa24 	bl	8006428 <mg_log_prefix>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00e      	beq.n	800a004 <read_conn+0x1e0>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fd ff1f 	bl	8007e34 <mg_ntohl>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	483f      	ldr	r0, [pc, #252]	; (800a0fc <read_conn+0x2d8>)
 800a000:	f7fc fa6c 	bl	80064dc <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fd ff12 	bl	8007e34 <mg_ntohl>
 800a010:	4602      	mov	r2, r0
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	441a      	add	r2, r3
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	7d9b      	ldrb	r3, [r3, #22]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d003      	beq.n	800a02c <read_conn+0x208>
 800a024:	2101      	movs	r1, #1
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff fd64 	bl	8009af4 <settmout>
    if (c->is_tls) {
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d046      	beq.n	800a0ca <read_conn+0x2a6>
      io = &c->recv;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3338      	adds	r3, #56	; 0x38
 800a040:	623b      	str	r3, [r7, #32]
      if (io->size - io->len < pkt->pay.len &&
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	1ad2      	subs	r2, r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	429a      	cmp	r2, r3
 800a052:	d210      	bcs.n	800a076 <read_conn+0x252>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	4413      	add	r3, r2
 800a05e:	4619      	mov	r1, r3
 800a060:	6a38      	ldr	r0, [r7, #32]
 800a062:	f7fb fa83 	bl	800556c <mg_iobuf_resize>
 800a066:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d104      	bne.n	800a076 <read_conn+0x252>
        mg_error(c, "oom");
 800a06c:	4922      	ldr	r1, [pc, #136]	; (800a0f8 <read_conn+0x2d4>)
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7f7 fbba 	bl	80017e8 <mg_error>
 800a074:	e031      	b.n	800a0da <read_conn+0x2b6>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	18d1      	adds	r1, r2, r3
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7fd fd7b 	bl	8007b88 <mg_tls_recv>
 800a092:	4603      	mov	r3, r0
 800a094:	613b      	str	r3, [r7, #16]
        if (n == MG_IO_ERR) {
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09c:	d104      	bne.n	800a0a8 <read_conn+0x284>
          mg_error(c, "TLS recv error");
 800a09e:	4918      	ldr	r1, [pc, #96]	; (800a100 <read_conn+0x2dc>)
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f7f7 fba1 	bl	80017e8 <mg_error>
}
 800a0a6:	e018      	b.n	800a0da <read_conn+0x2b6>
        } else if (n > 0) {
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	dd15      	ble.n	800a0da <read_conn+0x2b6>
          io->len += (size_t) n;
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 800a0ba:	f107 0310 	add.w	r3, r7, #16
 800a0be:	461a      	mov	r2, r3
 800a0c0:	2107      	movs	r1, #7
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7f7 fb6d 	bl	80017a2 <mg_call>
}
 800a0c8:	e007      	b.n	800a0da <read_conn+0x2b6>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	2107      	movs	r1, #7
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f7f7 fb65 	bl	80017a2 <mg_call>
}
 800a0d8:	e7ff      	b.n	800a0da <read_conn+0x2b6>
 800a0da:	bf00      	nop
 800a0dc:	3728      	adds	r7, #40	; 0x28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e4:	08014220 	.word	0x08014220
 800a0e8:	080127ac 	.word	0x080127ac
 800a0ec:	08013e60 	.word	0x08013e60
 800a0f0:	08013e78 	.word	0x08013e78
 800a0f4:	08012e3c 	.word	0x08012e3c
 800a0f8:	08013e14 	.word	0x08013e14
 800a0fc:	08013e90 	.word	0x08013e90
 800a100:	08013ea4 	.word	0x08013ea4

0800a104 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a104:	b590      	push	{r4, r7, lr}
 800a106:	b089      	sub	sp, #36	; 0x24
 800a108:	af02      	add	r7, sp, #8
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	2200      	movs	r2, #0
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fe66 	bl	8008de8 <getpeer>
 800a11c:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <rx_tcp+0x26>
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	3390      	adds	r3, #144	; 0x90
 800a128:	e000      	b.n	800a12c <rx_tcp+0x28>
 800a12a:	2300      	movs	r3, #0
 800a12c:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d03e      	beq.n	800a1b2 <rx_tcp+0xae>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	d036      	beq.n	800a1b2 <rx_tcp+0xae>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a148:	7b5b      	ldrb	r3, [r3, #13]
 800a14a:	f003 0312 	and.w	r3, r3, #18
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d02f      	beq.n	800a1b2 <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fd fe6b 	bl	8007e34 <mg_ntohl>
 800a15e:	4602      	mov	r2, r0
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fd fe62 	bl	8007e34 <mg_ntohl>
 800a170:	4603      	mov	r3, r0
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2200      	movs	r2, #0
 800a180:	9201      	str	r2, [sp, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	9200      	str	r2, [sp, #0]
 800a186:	2210      	movs	r2, #16
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7ff fc6c 	bl	8009a68 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800a196:	f36f 1345 	bfc	r3, #5, #1
 800a19a:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800a19e:	2100      	movs	r1, #0
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	f7ff fca7 	bl	8009af4 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2104      	movs	r1, #4
 800a1aa:	6978      	ldr	r0, [r7, #20]
 800a1ac:	f7f7 faf9 	bl	80017a2 <mg_call>
 800a1b0:	e0c3      	b.n	800a33a <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d014      	beq.n	800a1e2 <rx_tcp+0xde>
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00c      	beq.n	800a1e2 <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	9201      	str	r2, [sp, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	9200      	str	r2, [sp, #0]
 800a1d6:	2214      	movs	r2, #20
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff fc44 	bl	8009a68 <tx_tcp_pkt>
 800a1e0:	e0ab      	b.n	800a33a <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <rx_tcp+0xfc>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ec:	7b5b      	ldrb	r3, [r3, #13]
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d004      	beq.n	800a200 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a1f6:	4953      	ldr	r1, [pc, #332]	; (800a344 <rx_tcp+0x240>)
 800a1f8:	6978      	ldr	r0, [r7, #20]
 800a1fa:	f7f7 faf5 	bl	80017e8 <mg_error>
 800a1fe:	e09c      	b.n	800a33a <rx_tcp+0x236>
  } else if (c != NULL) {
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00f      	beq.n	800a226 <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2200      	movs	r2, #0
 800a20a:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	7d9b      	ldrb	r3, [r3, #22]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <rx_tcp+0x118>
      settmout(c,
 800a214:	2100      	movs	r1, #0
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f7ff fc6c 	bl	8009af4 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6978      	ldr	r0, [r7, #20]
 800a220:	f7ff fe00 	bl	8009e24 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800a224:	e089      	b.n	800a33a <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22a:	2201      	movs	r2, #1
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fdda 	bl	8008de8 <getpeer>
 800a234:	6178      	str	r0, [r7, #20]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10c      	bne.n	800a256 <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	2200      	movs	r2, #0
 800a244:	9201      	str	r2, [sp, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	9200      	str	r2, [sp, #0]
 800a24a:	2214      	movs	r2, #20
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7ff fc0a 	bl	8009a68 <tx_tcp_pkt>
}
 800a254:	e071      	b.n	800a33a <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	7b5b      	ldrb	r3, [r3, #13]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00c      	beq.n	800a27e <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d062      	beq.n	800a33a <rx_tcp+0x236>
 800a274:	4933      	ldr	r1, [pc, #204]	; (800a344 <rx_tcp+0x240>)
 800a276:	6978      	ldr	r0, [r7, #20]
 800a278:	f7f7 fab6 	bl	80017e8 <mg_error>
}
 800a27c:	e05d      	b.n	800a33a <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a282:	7b5b      	ldrb	r3, [r3, #13]
 800a284:	f003 0302 	and.w	r3, r3, #2
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	b29b      	uxth	r3, r3
 800a294:	4618      	mov	r0, r3
 800a296:	f7fd fde6 	bl	8007e66 <mg_ntohs>
 800a29a:	4603      	mov	r3, r0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fd fdc9 	bl	8007e34 <mg_ntohl>
 800a2a2:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2212      	movs	r2, #18
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fbd8 	bl	8009a68 <tx_tcp_pkt>
}
 800a2b8:	e03f      	b.n	800a33a <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2be:	7b5b      	ldrb	r3, [r3, #13]
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00c      	beq.n	800a2e2 <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	9201      	str	r2, [sp, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	9200      	str	r2, [sp, #0]
 800a2d6:	2211      	movs	r2, #17
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fbc4 	bl	8009a68 <tx_tcp_pkt>
}
 800a2e0:	e02b      	b.n	800a33a <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fd fda3 	bl	8007e34 <mg_ntohl>
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fd fdb4 	bl	8007e66 <mg_ntohs>
 800a2fe:	4603      	mov	r3, r0
 800a300:	3301      	adds	r3, #1
 800a302:	429c      	cmp	r4, r3
 800a304:	d104      	bne.n	800a310 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6978      	ldr	r0, [r7, #20]
 800a30a:	f7ff fc3b 	bl	8009b84 <accept_conn>
}
 800a30e:	e014      	b.n	800a33a <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a316:	f003 0304 	and.w	r3, r3, #4
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10c      	bne.n	800a33a <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2200      	movs	r2, #0
 800a328:	9201      	str	r2, [sp, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	9200      	str	r2, [sp, #0]
 800a32e:	2214      	movs	r2, #20
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fb98 	bl	8009a68 <tx_tcp_pkt>
}
 800a338:	e7ff      	b.n	800a33a <rx_tcp+0x236>
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd90      	pop	{r4, r7, pc}
 800a342:	bf00      	nop
 800a344:	08013eb4 	.word	0x08013eb4

0800a348 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a34a:	b089      	sub	sp, #36	; 0x24
 800a34c:	af04      	add	r7, sp, #16
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	7a5b      	ldrb	r3, [r3, #9]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d116      	bne.n	800a38a <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f103 0214 	add.w	r2, r3, #20
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	f240 8105 	bls.w	800a57c <rx_ip+0x234>
    mkpay(pkt, pkt->icmp + 1);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	3304      	adds	r3, #4
 800a378:	4619      	mov	r1, r3
 800a37a:	6838      	ldr	r0, [r7, #0]
 800a37c:	f7fe f9be 	bl	80086fc <mkpay>
    rx_icmp(ifp, pkt);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7fe fe88 	bl	8009098 <rx_icmp>
 800a388:	e0fd      	b.n	800a586 <rx_ip+0x23e>
  } else if (pkt->ip->proto == 17) {
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	7a5b      	ldrb	r3, [r3, #9]
 800a390:	2b11      	cmp	r3, #17
 800a392:	f040 808a 	bne.w	800a4aa <rx_ip+0x162>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	f103 0214 	add.w	r2, r3, #20
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	2b07      	cmp	r3, #7
 800a3a8:	f240 80ea 	bls.w	800a580 <rx_ip+0x238>
    mkpay(pkt, pkt->udp + 1);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6838      	ldr	r0, [r7, #0]
 800a3b6:	f7fe f9a1 	bl	80086fc <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a3ba:	4b74      	ldr	r3, [pc, #464]	; (800a58c <rx_ip+0x244>)
 800a3bc:	f242 02e8 	movw	r2, #8424	; 0x20e8
 800a3c0:	4973      	ldr	r1, [pc, #460]	; (800a590 <rx_ip+0x248>)
 800a3c2:	2003      	movs	r0, #3
 800a3c4:	f7fc f830 	bl	8006428 <mg_log_prefix>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d026      	beq.n	800a41c <rx_ip+0xd4>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	f103 050c 	add.w	r5, r3, #12
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fd fd41 	bl	8007e66 <mg_ntohs>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	461e      	mov	r6, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	f103 0410 	add.w	r4, r3, #16
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	885b      	ldrh	r3, [r3, #2]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fd fd34 	bl	8007e66 <mg_ntohs>
 800a3fe:	4603      	mov	r3, r0
 800a400:	461a      	mov	r2, r3
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	9303      	str	r3, [sp, #12]
 800a408:	9202      	str	r2, [sp, #8]
 800a40a:	9401      	str	r4, [sp, #4]
 800a40c:	4b61      	ldr	r3, [pc, #388]	; (800a594 <rx_ip+0x24c>)
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	4633      	mov	r3, r6
 800a412:	462a      	mov	r2, r5
 800a414:	495f      	ldr	r1, [pc, #380]	; (800a594 <rx_ip+0x24c>)
 800a416:	4860      	ldr	r0, [pc, #384]	; (800a598 <rx_ip+0x250>)
 800a418:	f7fc f860 	bl	80064dc <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	7f1b      	ldrb	r3, [r3, #28]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d01c      	beq.n	800a45e <rx_ip+0x116>
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	885b      	ldrh	r3, [r3, #2]
 800a42a:	b29c      	uxth	r4, r3
 800a42c:	2044      	movs	r0, #68	; 0x44
 800a42e:	f7fd fd1a 	bl	8007e66 <mg_ntohs>
 800a432:	4603      	mov	r3, r0
 800a434:	429c      	cmp	r4, r3
 800a436:	d112      	bne.n	800a45e <rx_ip+0x116>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43c:	f103 0208 	add.w	r2, r3, #8
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a44c:	4619      	mov	r1, r3
 800a44e:	6838      	ldr	r0, [r7, #0]
 800a450:	f7fe f954 	bl	80086fc <mkpay>
      rx_dhcp_client(ifp, pkt);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7fe fe7a 	bl	8009150 <rx_dhcp_client>
 800a45c:	e093      	b.n	800a586 <rx_ip+0x23e>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	7f5b      	ldrb	r3, [r3, #29]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d01c      	beq.n	800a4a0 <rx_ip+0x158>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46a:	885b      	ldrh	r3, [r3, #2]
 800a46c:	b29c      	uxth	r4, r3
 800a46e:	2043      	movs	r0, #67	; 0x43
 800a470:	f7fd fcf9 	bl	8007e66 <mg_ntohs>
 800a474:	4603      	mov	r3, r0
 800a476:	429c      	cmp	r4, r3
 800a478:	d112      	bne.n	800a4a0 <rx_ip+0x158>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	f103 0208 	add.w	r2, r3, #8
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a48e:	4619      	mov	r1, r3
 800a490:	6838      	ldr	r0, [r7, #0]
 800a492:	f7fe f933 	bl	80086fc <mkpay>
      rx_dhcp_server(ifp, pkt);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7fe ffdf 	bl	800945c <rx_dhcp_server>
 800a49e:	e072      	b.n	800a586 <rx_ip+0x23e>
    } else {
      rx_udp(ifp, pkt);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff f9a4 	bl	80097f0 <rx_udp>
 800a4a8:	e06d      	b.n	800a586 <rx_ip+0x23e>
    }
  } else if (pkt->ip->proto == 6) {
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	7a5b      	ldrb	r3, [r3, #9]
 800a4b0:	2b06      	cmp	r3, #6
 800a4b2:	d168      	bne.n	800a586 <rx_ip+0x23e>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	f103 0214 	add.w	r2, r3, #20
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	2b13      	cmp	r3, #19
 800a4c6:	d95d      	bls.n	800a584 <rx_ip+0x23c>
    mkpay(pkt, pkt->tcp + 1);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4cc:	3314      	adds	r3, #20
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6838      	ldr	r0, [r7, #0]
 800a4d2:	f7fe f913 	bl	80086fc <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	885b      	ldrh	r3, [r3, #2]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fd fcc1 	bl	8007e66 <mg_ntohs>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ec:	7b1b      	ldrb	r3, [r3, #12]
 800a4ee:	091b      	lsrs	r3, r3, #4
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	3305      	adds	r3, #5
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800a4fc:	89fa      	ldrh	r2, [r7, #14]
 800a4fe:	89bb      	ldrh	r3, [r7, #12]
 800a500:	429a      	cmp	r2, r3
 800a502:	d305      	bcc.n	800a510 <rx_ip+0x1c8>
 800a504:	89fa      	ldrh	r2, [r7, #14]
 800a506:	89bb      	ldrh	r3, [r7, #12]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	461a      	mov	r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a510:	4b1e      	ldr	r3, [pc, #120]	; (800a58c <rx_ip+0x244>)
 800a512:	f242 02fd 	movw	r2, #8445	; 0x20fd
 800a516:	491e      	ldr	r1, [pc, #120]	; (800a590 <rx_ip+0x248>)
 800a518:	2003      	movs	r0, #3
 800a51a:	f7fb ff85 	bl	8006428 <mg_log_prefix>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d026      	beq.n	800a572 <rx_ip+0x22a>
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	f103 050c 	add.w	r5, r3, #12
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	4618      	mov	r0, r3
 800a536:	f7fd fc96 	bl	8007e66 <mg_ntohs>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461e      	mov	r6, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	f103 0410 	add.w	r4, r3, #16
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54a:	885b      	ldrh	r3, [r3, #2]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fd fc89 	bl	8007e66 <mg_ntohs>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	9303      	str	r3, [sp, #12]
 800a55e:	9202      	str	r2, [sp, #8]
 800a560:	9401      	str	r4, [sp, #4]
 800a562:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <rx_ip+0x24c>)
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	4633      	mov	r3, r6
 800a568:	462a      	mov	r2, r5
 800a56a:	490a      	ldr	r1, [pc, #40]	; (800a594 <rx_ip+0x24c>)
 800a56c:	480b      	ldr	r0, [pc, #44]	; (800a59c <rx_ip+0x254>)
 800a56e:	f7fb ffb5 	bl	80064dc <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff fdc5 	bl	800a104 <rx_tcp>
 800a57a:	e004      	b.n	800a586 <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a57c:	bf00      	nop
 800a57e:	e002      	b.n	800a586 <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a580:	bf00      	nop
 800a582:	e000      	b.n	800a586 <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a584:	bf00      	nop
  }
}
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a58c:	0801422c 	.word	0x0801422c
 800a590:	080127ac 	.word	0x080127ac
 800a594:	08006c79 	.word	0x08006c79
 800a598:	08013ec0 	.word	0x08013ec0
 800a59c:	08013edc 	.word	0x08013edc

0800a5a0 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	799b      	ldrb	r3, [r3, #6]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d004      	beq.n	800a5be <rx_ip6+0x1e>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	799b      	ldrb	r3, [r3, #6]
 800a5ba:	2b3a      	cmp	r3, #58	; 0x3a
 800a5bc:	d115      	bne.n	800a5ea <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d922      	bls.n	800a618 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6838      	ldr	r0, [r7, #0]
 800a5dc:	f7fe f88e 	bl	80086fc <mkpay>
    rx_icmp(ifp, pkt);
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7fe fd58 	bl	8009098 <rx_icmp>
 800a5e8:	e019      	b.n	800a61e <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	799b      	ldrb	r3, [r3, #6]
 800a5f0:	2b11      	cmp	r3, #17
 800a5f2:	d114      	bne.n	800a61e <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	2b07      	cmp	r3, #7
 800a606:	d909      	bls.n	800a61c <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	3308      	adds	r3, #8
 800a60e:	4619      	mov	r1, r3
 800a610:	6838      	ldr	r0, [r7, #0]
 800a612:	f7fe f873 	bl	80086fc <mkpay>
 800a616:	e002      	b.n	800a61e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a618:	bf00      	nop
 800a61a:	e000      	b.n	800a61e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a61c:	bf00      	nop
  }
}
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800a624:	b590      	push	{r4, r7, lr}
 800a626:	b093      	sub	sp, #76	; 0x4c
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800a630:	f107 0314 	add.w	r3, r7, #20
 800a634:	2234      	movs	r2, #52	; 0x34
 800a636:	2100      	movs	r1, #0
 800a638:	4618      	mov	r0, r3
 800a63a:	f007 f996 	bl	801196a <memset>
  pkt.raw.ptr = (char *) buf;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	2b0d      	cmp	r3, #13
 800a64e:	f240 80d1 	bls.w	800a7f4 <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	7fdb      	ldrb	r3, [r3, #31]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d013      	beq.n	800a682 <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	4618      	mov	r0, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2206      	movs	r2, #6
 800a662:	4619      	mov	r1, r3
 800a664:	f007 f957 	bl	8011916 <memcmp>
 800a668:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	2206      	movs	r2, #6
 800a672:	496a      	ldr	r1, [pc, #424]	; (800a81c <mg_tcpip_rx+0x1f8>)
 800a674:	4618      	mov	r0, r3
 800a676:	f007 f94e 	bl	8011916 <memcmp>
 800a67a:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 80bb 	bne.w	800a7f8 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	7f9b      	ldrb	r3, [r3, #30]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01a      	beq.n	800a6c0 <mg_tcpip_rx+0x9c>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d917      	bls.n	800a6c0 <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3b04      	subs	r3, #4
 800a694:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	2000      	movs	r0, #0
 800a69c:	f7fd fbfa 	bl	8007e94 <mg_crc32>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f107 0310 	add.w	r3, r7, #16
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f007 f92f 	bl	8011916 <memcmp>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 809e 	bne.w	800a7fc <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	899b      	ldrh	r3, [r3, #12]
 800a6c4:	b29c      	uxth	r4, r3
 800a6c6:	f640 0006 	movw	r0, #2054	; 0x806
 800a6ca:	f7fd fbcc 	bl	8007e66 <mg_ntohs>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	429c      	cmp	r4, r3
 800a6d2:	d10d      	bne.n	800a6f0 <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	330e      	adds	r3, #14
 800a6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b29      	cmp	r3, #41	; 0x29
 800a6de:	f240 808f 	bls.w	800a800 <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800a6e2:	f107 0314 	add.w	r3, r7, #20
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7fe fbd5 	bl	8008e98 <rx_arp>
 800a6ee:	e092      	b.n	800a816 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	899b      	ldrh	r3, [r3, #12]
 800a6f4:	b29c      	uxth	r4, r3
 800a6f6:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800a6fa:	f7fd fbb4 	bl	8007e66 <mg_ntohs>
 800a6fe:	4603      	mov	r3, r0
 800a700:	429c      	cmp	r4, r3
 800a702:	d11b      	bne.n	800a73c <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	330e      	adds	r3, #14
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	2b35      	cmp	r3, #53	; 0x35
 800a70e:	d979      	bls.n	800a804 <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	091b      	lsrs	r3, r3, #4
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b06      	cmp	r3, #6
 800a71a:	d175      	bne.n	800a808 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a722:	f107 0314 	add.w	r3, r7, #20
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fd ffe7 	bl	80086fc <mkpay>
    rx_ip6(ifp, &pkt);
 800a72e:	f107 0314 	add.w	r3, r7, #20
 800a732:	4619      	mov	r1, r3
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7ff ff33 	bl	800a5a0 <rx_ip6>
 800a73a:	e06c      	b.n	800a816 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	899b      	ldrh	r3, [r3, #12]
 800a740:	b29c      	uxth	r4, r3
 800a742:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a746:	f7fd fb8e 	bl	8007e66 <mg_ntohs>
 800a74a:	4603      	mov	r3, r0
 800a74c:	429c      	cmp	r4, r3
 800a74e:	d133      	bne.n	800a7b8 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	330e      	adds	r3, #14
 800a754:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	2b21      	cmp	r3, #33	; 0x21
 800a75a:	d957      	bls.n	800a80c <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	885b      	ldrh	r3, [r3, #2]
 800a760:	b29b      	uxth	r3, r3
 800a762:	4618      	mov	r0, r3
 800a764:	f7fd fb7f 	bl	8007e66 <mg_ntohs>
 800a768:	4603      	mov	r3, r0
 800a76a:	f103 020e 	add.w	r2, r3, #14
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	429a      	cmp	r2, r3
 800a772:	d208      	bcs.n	800a786 <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	885b      	ldrh	r3, [r3, #2]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fd fb73 	bl	8007e66 <mg_ntohs>
 800a780:	4603      	mov	r3, r0
 800a782:	330e      	adds	r3, #14
 800a784:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	2b21      	cmp	r3, #33	; 0x21
 800a78a:	d941      	bls.n	800a810 <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	091b      	lsrs	r3, r3, #4
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b04      	cmp	r3, #4
 800a796:	d13d      	bne.n	800a814 <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	f103 0214 	add.w	r2, r3, #20
 800a79e:	f107 0314 	add.w	r3, r7, #20
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fd ffa9 	bl	80086fc <mkpay>
    rx_ip(ifp, &pkt);
 800a7aa:	f107 0314 	add.w	r3, r7, #20
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff fdc9 	bl	800a348 <rx_ip>
 800a7b6:	e02e      	b.n	800a816 <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800a7b8:	4b19      	ldr	r3, [pc, #100]	; (800a820 <mg_tcpip_rx+0x1fc>)
 800a7ba:	f242 123a 	movw	r2, #8506	; 0x213a
 800a7be:	4919      	ldr	r1, [pc, #100]	; (800a824 <mg_tcpip_rx+0x200>)
 800a7c0:	2003      	movs	r0, #3
 800a7c2:	f7fb fe31 	bl	8006428 <mg_log_prefix>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00a      	beq.n	800a7e2 <mg_tcpip_rx+0x1be>
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	899b      	ldrh	r3, [r3, #12]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fd fb47 	bl	8007e66 <mg_ntohs>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4812      	ldr	r0, [pc, #72]	; (800a828 <mg_tcpip_rx+0x204>)
 800a7de:	f7fb fe7d 	bl	80064dc <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b10      	cmp	r3, #16
 800a7e6:	bf28      	it	cs
 800a7e8:	2310      	movcs	r3, #16
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68b8      	ldr	r0, [r7, #8]
 800a7ee:	f7fb feab 	bl	8006548 <mg_hexdump>
 800a7f2:	e010      	b.n	800a816 <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a7f4:	bf00      	nop
 800a7f6:	e00e      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    return;
 800a7f8:	bf00      	nop
 800a7fa:	e00c      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a7fc:	bf00      	nop
 800a7fe:	e00a      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a800:	bf00      	nop
 800a802:	e008      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a804:	bf00      	nop
 800a806:	e006      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a808:	bf00      	nop
 800a80a:	e004      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a80c:	bf00      	nop
 800a80e:	e002      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a810:	bf00      	nop
 800a812:	e000      	b.n	800a816 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a814:	bf00      	nop
  }
}
 800a816:	374c      	adds	r7, #76	; 0x4c
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd90      	pop	{r4, r7, pc}
 800a81c:	08014074 	.word	0x08014074
 800a820:	08014234 	.word	0x08014234
 800a824:	080127ac 	.word	0x080127ac
 800a828:	08013ef8 	.word	0x08013ef8

0800a82c <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800a82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a82e:	b095      	sub	sp, #84	; 0x54
 800a830:	af06      	add	r7, sp, #24
 800a832:	6178      	str	r0, [r7, #20]
 800a834:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 81b9 	beq.w	800abb2 <mg_tcpip_poll+0x386>
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 81b4 	beq.w	800abb2 <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800a850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a854:	e9cd 2300 	strd	r2, r3, [sp]
 800a858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a85c:	f04f 0300 	mov.w	r3, #0
 800a860:	4608      	mov	r0, r1
 800a862:	f7fd f8a0 	bl	80079a6 <mg_timer_expired>
 800a866:	4603      	mov	r3, r0
 800a868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800a86c:	6979      	ldr	r1, [r7, #20]
 800a86e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a872:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800a876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d03f      	beq.n	800a8fe <mg_tcpip_poll+0xd2>
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d03a      	beq.n	800a8fe <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	6978      	ldr	r0, [r7, #20]
 800a890:	4798      	blx	r3
 800a892:	4603      	mov	r3, r0
 800a894:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bf14      	ite	ne
 800a8a2:	2301      	movne	r3, #1
 800a8a4:	2300      	moveq	r3, #0
 800a8a6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800a8aa:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a8ae:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d023      	beq.n	800a8fe <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a8b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8ba:	f083 0301 	eor.w	r3, r3, #1
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <mg_tcpip_poll+0x9c>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e006      	b.n	800a8d6 <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <mg_tcpip_poll+0xa8>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e000      	b.n	800a8d6 <mg_tcpip_poll+0xaa>
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800a8dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a8e0:	f083 0301 	eor.w	r3, r3, #1
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <mg_tcpip_poll+0xcc>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	7f1b      	ldrb	r3, [r3, #28]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <mg_tcpip_poll+0xcc>
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a8f8:	6978      	ldr	r0, [r7, #20]
 800a8fa:	f7fd fff1 	bl	80088e0 <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8156 	beq.w	800abb6 <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a910:	2b01      	cmp	r3, #1
 800a912:	d107      	bne.n	800a924 <mg_tcpip_poll+0xf8>
 800a914:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800a91c:	6978      	ldr	r0, [r7, #20]
 800a91e:	f7fe fa29 	bl	8008d74 <tx_dhcp_discover>
 800a922:	e04c      	b.n	800a9be <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a924:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d048      	beq.n	800a9be <mg_tcpip_poll+0x192>
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a932:	2b03      	cmp	r3, #3
 800a934:	d143      	bne.n	800a9be <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d03e      	beq.n	800a9be <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a94c:	4290      	cmp	r0, r2
 800a94e:	eb71 0303 	sbcs.w	r3, r1, r3
 800a952:	d30a      	bcc.n	800a96a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a962:	6978      	ldr	r0, [r7, #20]
 800a964:	f7fd ffbc 	bl	80088e0 <onstatechange>
 800a968:	e029      	b.n	800a9be <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a970:	4993      	ldr	r1, [pc, #588]	; (800abc0 <mg_tcpip_poll+0x394>)
 800a972:	1854      	adds	r4, r2, r1
 800a974:	f143 0500 	adc.w	r5, r3, #0
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a97e:	42a2      	cmp	r2, r4
 800a980:	41ab      	sbcs	r3, r5
 800a982:	d21c      	bcs.n	800a9be <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a98a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a98e:	f04f 0300 	mov.w	r3, #0
 800a992:	f7f6 f923 	bl	8000bdc <__aeabi_uldivmod>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4610      	mov	r0, r2
 800a99c:	4619      	mov	r1, r3
 800a99e:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800a9a2:	f04f 0300 	mov.w	r3, #0
 800a9a6:	f7f6 f919 	bl	8000bdc <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	d107      	bne.n	800a9be <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b6:	4983      	ldr	r1, [pc, #524]	; (800abc4 <mg_tcpip_poll+0x398>)
 800a9b8:	6978      	ldr	r0, [r7, #20]
 800a9ba:	f7fe f9ab 	bl	8008d14 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d014      	beq.n	800a9f2 <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	6a1b      	ldr	r3, [r3, #32]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	4798      	blx	r3
 800a9da:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01f      	beq.n	800aa22 <mg_tcpip_poll+0x1f6>
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6978      	ldr	r0, [r7, #20]
 800a9ec:	f7ff fe1a 	bl	800a624 <mg_tcpip_rx>
 800a9f0:	e017      	b.n	800aa22 <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	332c      	adds	r3, #44	; 0x2c
 800a9f6:	f107 0220 	add.w	r2, r7, #32
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fc fb25 	bl	800704c <mg_queue_next>
 800aa02:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00b      	beq.n	800aa22 <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6978      	ldr	r0, [r7, #20]
 800aa12:	f7ff fe07 	bl	800a624 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	332c      	adds	r3, #44	; 0x2c
 800aa1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fc fb93 	bl	8007148 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	637b      	str	r3, [r7, #52]	; 0x34
 800aa2a:	e0bd      	b.n	800aba8 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800aa2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f040 80af 	bne.w	800ab9c <mg_tcpip_poll+0x370>
 800aa3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa40:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f040 80a6 	bne.w	800ab9c <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800aa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa52:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f040 809f 	bne.w	800aba0 <mg_tcpip_poll+0x374>
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aa68:	f003 0308 	and.w	r3, r3, #8
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f040 8096 	bne.w	800aba0 <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800aa74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa76:	3390      	adds	r3, #144	; 0x90
 800aa78:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7c:	331c      	adds	r3, #28
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa84:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800aa88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa8c:	4290      	cmp	r0, r2
 800aa8e:	eb71 0303 	sbcs.w	r3, r1, r3
 800aa92:	f080 8086 	bcs.w	800aba2 <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	7d9b      	ldrb	r3, [r3, #22]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d137      	bne.n	800ab0e <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800aa9e:	4b4a      	ldr	r3, [pc, #296]	; (800abc8 <mg_tcpip_poll+0x39c>)
 800aaa0:	f242 1278 	movw	r2, #8568	; 0x2178
 800aaa4:	4949      	ldr	r1, [pc, #292]	; (800abcc <mg_tcpip_poll+0x3a0>)
 800aaa6:	2003      	movs	r0, #3
 800aaa8:	f7fb fcbe 	bl	8006428 <mg_log_prefix>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d008      	beq.n	800aac4 <mg_tcpip_poll+0x298>
 800aab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	4844      	ldr	r0, [pc, #272]	; (800abd0 <mg_tcpip_poll+0x3a4>)
 800aac0:	f7fb fd0c 	bl	80064dc <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	f103 0610 	add.w	r6, r3, #16
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	613b      	str	r3, [r7, #16]
 800aace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad0:	8b1c      	ldrh	r4, [r3, #24]
 800aad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad4:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fd f9aa 	bl	8007e34 <mg_ntohl>
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fd f9a4 	bl	8007e34 <mg_ntohl>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2200      	movs	r2, #0
 800aaf0:	9205      	str	r2, [sp, #20]
 800aaf2:	4a38      	ldr	r2, [pc, #224]	; (800abd4 <mg_tcpip_poll+0x3a8>)
 800aaf4:	9204      	str	r2, [sp, #16]
 800aaf6:	9303      	str	r3, [sp, #12]
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	9102      	str	r1, [sp, #8]
 800aafc:	9501      	str	r5, [sp, #4]
 800aafe:	9400      	str	r4, [sp, #0]
 800ab00:	2310      	movs	r3, #16
 800ab02:	693a      	ldr	r2, [r7, #16]
 800ab04:	4631      	mov	r1, r6
 800ab06:	6978      	ldr	r0, [r7, #20]
 800ab08:	f7fe fee4 	bl	80098d4 <tx_tcp>
 800ab0c:	e041      	b.n	800ab92 <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab10:	7ddb      	ldrb	r3, [r3, #23]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	b2d1      	uxtb	r1, r2
 800ab16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab18:	75d1      	strb	r1, [r2, #23]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d904      	bls.n	800ab28 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800ab1e:	492e      	ldr	r1, [pc, #184]	; (800abd8 <mg_tcpip_poll+0x3ac>)
 800ab20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab22:	f7f6 fe61 	bl	80017e8 <mg_error>
 800ab26:	e034      	b.n	800ab92 <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800ab28:	4b27      	ldr	r3, [pc, #156]	; (800abc8 <mg_tcpip_poll+0x39c>)
 800ab2a:	f242 127f 	movw	r2, #8575	; 0x217f
 800ab2e:	4927      	ldr	r1, [pc, #156]	; (800abcc <mg_tcpip_poll+0x3a0>)
 800ab30:	2003      	movs	r0, #3
 800ab32:	f7fb fc79 	bl	8006428 <mg_log_prefix>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d005      	beq.n	800ab48 <mg_tcpip_poll+0x31c>
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab40:	4619      	mov	r1, r3
 800ab42:	4826      	ldr	r0, [pc, #152]	; (800abdc <mg_tcpip_poll+0x3b0>)
 800ab44:	f7fb fcca 	bl	80064dc <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	f103 0610 	add.w	r6, r3, #16
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	613b      	str	r3, [r7, #16]
 800ab52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab54:	8b1c      	ldrh	r4, [r3, #24]
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fd f967 	bl	8007e34 <mg_ntohl>
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fd f961 	bl	8007e34 <mg_ntohl>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2200      	movs	r2, #0
 800ab76:	9205      	str	r2, [sp, #20]
 800ab78:	4a16      	ldr	r2, [pc, #88]	; (800abd4 <mg_tcpip_poll+0x3a8>)
 800ab7a:	9204      	str	r2, [sp, #16]
 800ab7c:	9303      	str	r3, [sp, #12]
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	9102      	str	r1, [sp, #8]
 800ab82:	9501      	str	r5, [sp, #4]
 800ab84:	9400      	str	r4, [sp, #0]
 800ab86:	2310      	movs	r3, #16
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	6978      	ldr	r0, [r7, #20]
 800ab8e:	f7fe fea1 	bl	80098d4 <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800ab92:	2100      	movs	r1, #0
 800ab94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab96:	f7fe ffad 	bl	8009af4 <settmout>
 800ab9a:	e002      	b.n	800aba2 <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800ab9c:	bf00      	nop
 800ab9e:	e000      	b.n	800aba2 <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800aba0:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f47f af3e 	bne.w	800aa2c <mg_tcpip_poll+0x200>
 800abb0:	e002      	b.n	800abb8 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800abb2:	bf00      	nop
 800abb4:	e000      	b.n	800abb8 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800abb6:	bf00      	nop
    }
  }
}
 800abb8:	373c      	adds	r7, #60	; 0x3c
 800abba:	46bd      	mov	sp, r7
 800abbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abbe:	bf00      	nop
 800abc0:	001b7740 	.word	0x001b7740
 800abc4:	08014074 	.word	0x08014074
 800abc8:	08014240 	.word	0x08014240
 800abcc:	080127ac 	.word	0x080127ac
 800abd0:	08013f10 	.word	0x08013f10
 800abd4:	08012e3c 	.word	0x08012e3c
 800abd8:	08013f20 	.word	0x08013f20
 800abdc:	08013f2c 	.word	0x08013f2c

0800abe0 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	332c      	adds	r3, #44	; 0x2c
 800abf0:	f107 0114 	add.w	r1, r7, #20
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fc f9d0 	bl	8006f9c <mg_queue_book>
 800abfc:	4602      	mov	r2, r0
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d811      	bhi.n	800ac28 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	68f9      	ldr	r1, [r7, #12]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f006 ff77 	bl	8011afe <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	332c      	adds	r3, #44	; 0x2c
 800ac14:	68b9      	ldr	r1, [r7, #8]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fc fa5e 	bl	80070d8 <mg_queue_add>
    ifp->nrecv++;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800ac26:	e004      	b.n	800ac32 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ac32:	bf00      	nop
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d12c      	bne.n	800aca8 <mg_tcpip_init+0x6c>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	785b      	ldrb	r3, [r3, #1]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d128      	bne.n	800aca8 <mg_tcpip_init+0x6c>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	789b      	ldrb	r3, [r3, #2]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d124      	bne.n	800aca8 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d120      	bne.n	800aca8 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	791b      	ldrb	r3, [r3, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d11c      	bne.n	800aca8 <mg_tcpip_init+0x6c>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	795b      	ldrb	r3, [r3, #5]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d118      	bne.n	800aca8 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	2105      	movs	r1, #5
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f6 fb28 	bl	80012d8 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800ac88:	4b4d      	ldr	r3, [pc, #308]	; (800adc0 <mg_tcpip_init+0x184>)
 800ac8a:	f242 129d 	movw	r2, #8605	; 0x219d
 800ac8e:	494d      	ldr	r1, [pc, #308]	; (800adc4 <mg_tcpip_init+0x188>)
 800ac90:	2002      	movs	r0, #2
 800ac92:	f7fb fbc9 	bl	8006428 <mg_log_prefix>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d005      	beq.n	800aca8 <mg_tcpip_init+0x6c>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4949      	ldr	r1, [pc, #292]	; (800adc8 <mg_tcpip_init+0x18c>)
 800aca2:	484a      	ldr	r0, [pc, #296]	; (800adcc <mg_tcpip_init+0x190>)
 800aca4:	f7fb fc1a 	bl	80064dc <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	6a1b      	ldr	r3, [r3, #32]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d018      	beq.n	800ace4 <mg_tcpip_init+0xa8>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6838      	ldr	r0, [r7, #0]
 800acba:	4798      	blx	r3
 800acbc:	4603      	mov	r3, r0
 800acbe:	f083 0301 	eor.w	r3, r3, #1
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00d      	beq.n	800ace4 <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800acc8:	4b3d      	ldr	r3, [pc, #244]	; (800adc0 <mg_tcpip_init+0x184>)
 800acca:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800acce:	493d      	ldr	r1, [pc, #244]	; (800adc4 <mg_tcpip_init+0x188>)
 800acd0:	2001      	movs	r0, #1
 800acd2:	f7fb fba9 	bl	8006428 <mg_log_prefix>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d06d      	beq.n	800adb8 <mg_tcpip_init+0x17c>
 800acdc:	483c      	ldr	r0, [pc, #240]	; (800add0 <mg_tcpip_init+0x194>)
 800acde:	f7fb fbfd 	bl	80064dc <mg_log>
 800ace2:	e069      	b.n	800adb8 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800ace4:	f240 6304 	movw	r3, #1540	; 0x604
 800ace8:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800acea:	68f9      	ldr	r1, [r7, #12]
 800acec:	2001      	movs	r0, #1
 800acee:	f006 fb5f 	bl	80113b0 <calloc>
 800acf2:	4603      	mov	r3, r0
 800acf4:	461a      	mov	r2, r3
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	615a      	str	r2, [r3, #20]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	6a1b      	ldr	r3, [r3, #32]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <mg_tcpip_init+0xda>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	e001      	b.n	800ad1a <mg_tcpip_init+0xde>
 800ad16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad22:	4619      	mov	r1, r3
 800ad24:	2001      	movs	r0, #1
 800ad26:	f006 fb43 	bl	80113b0 <calloc>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800ad32:	f7fd f8e9 	bl	8007f08 <mg_millis>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2228      	movs	r2, #40	; 0x28
 800ad50:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <mg_tcpip_init+0x124>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	333c      	adds	r3, #60	; 0x3c
 800ad64:	2206      	movs	r2, #6
 800ad66:	21ff      	movs	r1, #255	; 0xff
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f006 fdfe 	bl	801196a <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	3360      	adds	r3, #96	; 0x60
 800ad72:	2102      	movs	r1, #2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7f6 faaf 	bl	80012d8 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ad80:	4b14      	ldr	r3, [pc, #80]	; (800add4 <mg_tcpip_init+0x198>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d003      	beq.n	800ad9c <mg_tcpip_init+0x160>
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10d      	bne.n	800adb8 <mg_tcpip_init+0x17c>
 800ad9c:	4b08      	ldr	r3, [pc, #32]	; (800adc0 <mg_tcpip_init+0x184>)
 800ad9e:	f242 12b1 	movw	r2, #8625	; 0x21b1
 800ada2:	4908      	ldr	r1, [pc, #32]	; (800adc4 <mg_tcpip_init+0x188>)
 800ada4:	2001      	movs	r0, #1
 800ada6:	f7fb fb3f 	bl	8006428 <mg_log_prefix>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <mg_tcpip_init+0x17c>
 800adb0:	4809      	ldr	r0, [pc, #36]	; (800add8 <mg_tcpip_init+0x19c>)
 800adb2:	f7fb fb93 	bl	80064dc <mg_log>
  }
}
 800adb6:	e7ff      	b.n	800adb8 <mg_tcpip_init+0x17c>
 800adb8:	bf00      	nop
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	08014250 	.word	0x08014250
 800adc4:	080127ac 	.word	0x080127ac
 800adc8:	08006d3d 	.word	0x08006d3d
 800adcc:	08013f3c 	.word	0x08013f3c
 800add0:	08013f60 	.word	0x08013f60
 800add4:	ffff8000 	.word	0xffff8000
 800add8:	080134cc 	.word	0x080134cc

0800addc <mg_open_listener>:
      c->is_connecting = 1;
    }
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800ade6:	6838      	ldr	r0, [r7, #0]
 800ade8:	f7fc ffc0 	bl	8007d6c <mg_url_port>
 800adec:	4603      	mov	r3, r0
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fd f839 	bl	8007e66 <mg_ntohs>
 800adf4:	4603      	mov	r3, r0
 800adf6:	461a      	mov	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	831a      	strh	r2, [r3, #24]
  return true;
 800adfc:	2301      	movs	r3, #1
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ae14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae18:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d009      	beq.n	800ae32 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae26:	461a      	mov	r2, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fc fec6 	bl	8007bba <mg_tls_send>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	e008      	b.n	800ae44 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fe ff67 	bl	8009d10 <mg_io_send>
 800ae42:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ae44:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dd0d      	ble.n	800ae68 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3348      	adds	r3, #72	; 0x48
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	2100      	movs	r1, #0
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fa fc13 	bl	8005680 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800ae5a:	f107 030c 	add.w	r3, r7, #12
 800ae5e:	461a      	mov	r2, r3
 800ae60:	2108      	movs	r1, #8
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7f6 fc9d 	bl	80017a2 <mg_call>
  }
}
 800ae68:	bf00      	nop
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae72:	b08f      	sub	sp, #60	; 0x3c
 800ae74:	af06      	add	r7, sp, #24
 800ae76:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3390      	adds	r3, #144	; 0x90
 800ae7c:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	331c      	adds	r3, #28
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	3318      	adds	r3, #24
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fa fc43 	bl	8005716 <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d12f      	bne.n	800af00 <close_conn+0x90>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d127      	bne.n	800af00 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800aeb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb6:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	f103 0610 	add.w	r6, r3, #16
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	60bb      	str	r3, [r7, #8]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	8b1c      	ldrh	r4, [r3, #24]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fc ffb0 	bl	8007e34 <mg_ntohl>
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fc ffaa 	bl	8007e34 <mg_ntohl>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2200      	movs	r2, #0
 800aee4:	9205      	str	r2, [sp, #20]
 800aee6:	2200      	movs	r2, #0
 800aee8:	9204      	str	r2, [sp, #16]
 800aeea:	9303      	str	r3, [sp, #12]
 800aeec:	6879      	ldr	r1, [r7, #4]
 800aeee:	9102      	str	r1, [sp, #8]
 800aef0:	9501      	str	r5, [sp, #4]
 800aef2:	9400      	str	r4, [sp, #0]
 800aef4:	2311      	movs	r3, #17
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	4631      	mov	r1, r6
 800aefa:	69b8      	ldr	r0, [r7, #24]
 800aefc:	f7fe fcea 	bl	80098d4 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7fb fc35 	bl	8006770 <mg_close_conn>
}
 800af06:	bf00      	nop
 800af08:	3724      	adds	r7, #36	; 0x24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af0e <can_write>:

static bool can_write(struct mg_connection *c) {
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800af22:	2b00      	cmp	r3, #0
 800af24:	d11d      	bne.n	800af62 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800af2c:	f003 0308 	and.w	r3, r3, #8
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d115      	bne.n	800af62 <can_write+0x54>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d011      	beq.n	800af62 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800af44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af48:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d109      	bne.n	800af62 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800af54:	f003 0310 	and.w	r3, r3, #16
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <can_write+0x54>
 800af5e:	2301      	movs	r3, #1
 800af60:	e000      	b.n	800af64 <can_write+0x56>
 800af62:	2300      	movs	r3, #0
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	b2db      	uxtb	r3, r3
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800af78:	b5b0      	push	{r4, r5, r7, lr}
 800af7a:	b08a      	sub	sp, #40	; 0x28
 800af7c:	af04      	add	r7, sp, #16
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800af82:	f7fc ffc1 	bl	8007f08 <mg_millis>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800af92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af96:	4608      	mov	r0, r1
 800af98:	f7ff fc48 	bl	800a82c <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800afa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afa6:	4608      	mov	r0, r1
 800afa8:	f7fc fd61 	bl	8007a6e <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	617b      	str	r3, [r7, #20]
 800afb2:	e089      	b.n	800b0c8 <mg_mgr_poll+0x150>
    tmp = c->next;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800afba:	f107 0308 	add.w	r3, r7, #8
 800afbe:	461a      	mov	r2, r3
 800afc0:	2102      	movs	r1, #2
 800afc2:	6978      	ldr	r0, [r7, #20]
 800afc4:	f7f6 fbed 	bl	80017a2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800afc8:	4b44      	ldr	r3, [pc, #272]	; (800b0dc <mg_mgr_poll+0x164>)
 800afca:	f242 2218 	movw	r2, #8728	; 0x2218
 800afce:	4944      	ldr	r1, [pc, #272]	; (800b0e0 <mg_mgr_poll+0x168>)
 800afd0:	2004      	movs	r0, #4
 800afd2:	f7fb fa29 	bl	8006428 <mg_log_prefix>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d041      	beq.n	800b060 <mg_mgr_poll+0xe8>
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800afe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <mg_mgr_poll+0x7c>
 800aff0:	2454      	movs	r4, #84	; 0x54
 800aff2:	e000      	b.n	800aff6 <mg_mgr_poll+0x7e>
 800aff4:	2474      	movs	r4, #116	; 0x74
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800affc:	f003 0320 	and.w	r3, r3, #32
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <mg_mgr_poll+0x92>
 800b006:	2543      	movs	r5, #67	; 0x43
 800b008:	e000      	b.n	800b00c <mg_mgr_poll+0x94>
 800b00a:	2563      	movs	r5, #99	; 0x63
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b012:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <mg_mgr_poll+0xa8>
 800b01c:	2348      	movs	r3, #72	; 0x48
 800b01e:	e000      	b.n	800b022 <mg_mgr_poll+0xaa>
 800b020:	2368      	movs	r3, #104	; 0x68
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800b028:	f002 0208 	and.w	r2, r2, #8
 800b02c:	b2d2      	uxtb	r2, r2
 800b02e:	2a00      	cmp	r2, #0
 800b030:	d001      	beq.n	800b036 <mg_mgr_poll+0xbe>
 800b032:	2252      	movs	r2, #82	; 0x52
 800b034:	e000      	b.n	800b038 <mg_mgr_poll+0xc0>
 800b036:	2272      	movs	r2, #114	; 0x72
 800b038:	6979      	ldr	r1, [r7, #20]
 800b03a:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800b03e:	f001 0120 	and.w	r1, r1, #32
 800b042:	b2c9      	uxtb	r1, r1
 800b044:	2900      	cmp	r1, #0
 800b046:	d001      	beq.n	800b04c <mg_mgr_poll+0xd4>
 800b048:	2143      	movs	r1, #67	; 0x43
 800b04a:	e000      	b.n	800b04e <mg_mgr_poll+0xd6>
 800b04c:	2163      	movs	r1, #99	; 0x63
 800b04e:	9102      	str	r1, [sp, #8]
 800b050:	9201      	str	r2, [sp, #4]
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	462b      	mov	r3, r5
 800b056:	4622      	mov	r2, r4
 800b058:	4601      	mov	r1, r0
 800b05a:	4822      	ldr	r0, [pc, #136]	; (800b0e4 <mg_mgr_poll+0x16c>)
 800b05c:	f7fb fa3e 	bl	80064dc <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <mg_mgr_poll+0xfe>
 800b070:	6978      	ldr	r0, [r7, #20]
 800b072:	f7fc fd75 	bl	8007b60 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800b076:	6978      	ldr	r0, [r7, #20]
 800b078:	f7ff ff49 	bl	800af0e <can_write>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <mg_mgr_poll+0x110>
 800b082:	6978      	ldr	r0, [r7, #20]
 800b084:	f7ff febf 	bl	800ae06 <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b08e:	f003 0310 	and.w	r3, r3, #16
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00a      	beq.n	800b0ae <mg_mgr_poll+0x136>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d106      	bne.n	800b0ae <mg_mgr_poll+0x136>
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b0a6:	f043 0320 	orr.w	r3, r3, #32
 800b0aa:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b0b4:	f003 0320 	and.w	r3, r3, #32
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <mg_mgr_poll+0x14c>
 800b0be:	6978      	ldr	r0, [r7, #20]
 800b0c0:	f7ff fed6 	bl	800ae70 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f47f af72 	bne.w	800afb4 <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800b0d0:	bf00      	nop
 800b0d2:	bf00      	nop
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	08014260 	.word	0x08014260
 800b0e0:	080127ac 	.word	0x080127ac
 800b0e4:	08013fac 	.word	0x08013fac

0800b0e8 <scmp>:
  {"/web_root/index.html.gz", v1, sizeof(v1), 1710036665},
  {"/web_root/styles.css.gz", v2, sizeof(v2), 1710036662},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800b0f2:	e005      	b.n	800b100 <scmp+0x18>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	607b      	str	r3, [r7, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <scmp+0x2c>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	781a      	ldrb	r2, [r3, #0]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d0ef      	beq.n	800b0f4 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	461a      	mov	r2, r3
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	1ad3      	subs	r3, r2, r3
}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <mg_unlist>:
const char *mg_unlist(size_t no) {
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800b134:	4906      	ldr	r1, [pc, #24]	; (800b150 <mg_unlist+0x24>)
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	4613      	mov	r3, r2
 800b13a:	005b      	lsls	r3, r3, #1
 800b13c:	4413      	add	r3, r2
 800b13e:	00db      	lsls	r3, r3, #3
 800b140:	440b      	add	r3, r1
 800b142:	681b      	ldr	r3, [r3, #0]
}
 800b144:	4618      	mov	r0, r3
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	080145f8 	.word	0x080145f8

0800b154 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800b160:	4b16      	ldr	r3, [pc, #88]	; (800b1bc <mg_unpack+0x68>)
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e020      	b.n	800b1a8 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68f9      	ldr	r1, [r7, #12]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff ffbb 	bl	800b0e8 <scmp>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d113      	bne.n	800b1a0 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d004      	beq.n	800b188 <mg_unpack+0x34>
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	1e5a      	subs	r2, r3, #1
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d005      	beq.n	800b19a <mg_unpack+0x46>
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	e008      	b.n	800b1b2 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800b1a0:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	3318      	adds	r3, #24
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1da      	bne.n	800b166 <mg_unpack+0x12>
  }
  return NULL;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	080145f8 	.word	0x080145f8

0800b1c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b1c6:	4b11      	ldr	r3, [pc, #68]	; (800b20c <HAL_MspInit+0x4c>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	4a10      	ldr	r2, [pc, #64]	; (800b20c <HAL_MspInit+0x4c>)
 800b1cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d0:	6413      	str	r3, [r2, #64]	; 0x40
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <HAL_MspInit+0x4c>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1da:	607b      	str	r3, [r7, #4]
 800b1dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1de:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <HAL_MspInit+0x4c>)
 800b1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <HAL_MspInit+0x4c>)
 800b1e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1e8:	6453      	str	r3, [r2, #68]	; 0x44
 800b1ea:	4b08      	ldr	r3, [pc, #32]	; (800b20c <HAL_MspInit+0x4c>)
 800b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	210f      	movs	r1, #15
 800b1fa:	f06f 0001 	mvn.w	r0, #1
 800b1fe:	f000 fbfb 	bl	800b9f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	40023800 	.word	0x40023800

0800b210 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08e      	sub	sp, #56	; 0x38
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	605a      	str	r2, [r3, #4]
 800b222:	609a      	str	r2, [r3, #8]
 800b224:	60da      	str	r2, [r3, #12]
 800b226:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a52      	ldr	r2, [pc, #328]	; (800b378 <HAL_ETH_MspInit+0x168>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	f040 809e 	bne.w	800b370 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b234:	4b51      	ldr	r3, [pc, #324]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b238:	4a50      	ldr	r2, [pc, #320]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b23a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b23e:	6313      	str	r3, [r2, #48]	; 0x30
 800b240:	4b4e      	ldr	r3, [pc, #312]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b248:	623b      	str	r3, [r7, #32]
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	4b4b      	ldr	r3, [pc, #300]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b250:	4a4a      	ldr	r2, [pc, #296]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b256:	6313      	str	r3, [r2, #48]	; 0x30
 800b258:	4b48      	ldr	r3, [pc, #288]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	4b45      	ldr	r3, [pc, #276]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b268:	4a44      	ldr	r2, [pc, #272]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b26a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b26e:	6313      	str	r3, [r2, #48]	; 0x30
 800b270:	4b42      	ldr	r3, [pc, #264]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b27c:	4b3f      	ldr	r3, [pc, #252]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b280:	4a3e      	ldr	r2, [pc, #248]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b282:	f043 0304 	orr.w	r3, r3, #4
 800b286:	6313      	str	r3, [r2, #48]	; 0x30
 800b288:	4b3c      	ldr	r3, [pc, #240]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b294:	4b39      	ldr	r3, [pc, #228]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b298:	4a38      	ldr	r2, [pc, #224]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b29a:	f043 0301 	orr.w	r3, r3, #1
 800b29e:	6313      	str	r3, [r2, #48]	; 0x30
 800b2a0:	4b36      	ldr	r3, [pc, #216]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	613b      	str	r3, [r7, #16]
 800b2aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2ac:	4b33      	ldr	r3, [pc, #204]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b0:	4a32      	ldr	r2, [pc, #200]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b2b2:	f043 0302 	orr.w	r3, r3, #2
 800b2b6:	6313      	str	r3, [r2, #48]	; 0x30
 800b2b8:	4b30      	ldr	r3, [pc, #192]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	60fb      	str	r3, [r7, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b2c4:	4b2d      	ldr	r3, [pc, #180]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c8:	4a2c      	ldr	r2, [pc, #176]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ce:	6313      	str	r3, [r2, #48]	; 0x30
 800b2d0:	4b2a      	ldr	r3, [pc, #168]	; (800b37c <HAL_ETH_MspInit+0x16c>)
 800b2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d8:	60bb      	str	r3, [r7, #8]
 800b2da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b2dc:	2332      	movs	r3, #50	; 0x32
 800b2de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b2ec:	230b      	movs	r3, #11
 800b2ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4822      	ldr	r0, [pc, #136]	; (800b380 <HAL_ETH_MspInit+0x170>)
 800b2f8:	f000 fece 	bl	800c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b2fc:	2386      	movs	r3, #134	; 0x86
 800b2fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b300:	2302      	movs	r3, #2
 800b302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b304:	2300      	movs	r3, #0
 800b306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b308:	2303      	movs	r3, #3
 800b30a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b30c:	230b      	movs	r3, #11
 800b30e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b314:	4619      	mov	r1, r3
 800b316:	481b      	ldr	r0, [pc, #108]	; (800b384 <HAL_ETH_MspInit+0x174>)
 800b318:	f000 febe 	bl	800c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b322:	2302      	movs	r3, #2
 800b324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b326:	2300      	movs	r3, #0
 800b328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b32a:	2303      	movs	r3, #3
 800b32c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b32e:	230b      	movs	r3, #11
 800b330:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b336:	4619      	mov	r1, r3
 800b338:	4813      	ldr	r0, [pc, #76]	; (800b388 <HAL_ETH_MspInit+0x178>)
 800b33a:	f000 fead 	bl	800c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b33e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b344:	2302      	movs	r3, #2
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b34c:	2303      	movs	r3, #3
 800b34e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b350:	230b      	movs	r3, #11
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b358:	4619      	mov	r1, r3
 800b35a:	480c      	ldr	r0, [pc, #48]	; (800b38c <HAL_ETH_MspInit+0x17c>)
 800b35c:	f000 fe9c 	bl	800c098 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b360:	2200      	movs	r2, #0
 800b362:	2105      	movs	r1, #5
 800b364:	203d      	movs	r0, #61	; 0x3d
 800b366:	f000 fb47 	bl	800b9f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b36a:	203d      	movs	r0, #61	; 0x3d
 800b36c:	f000 fb60 	bl	800ba30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800b370:	bf00      	nop
 800b372:	3738      	adds	r7, #56	; 0x38
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	40028000 	.word	0x40028000
 800b37c:	40023800 	.word	0x40023800
 800b380:	40020800 	.word	0x40020800
 800b384:	40020000 	.word	0x40020000
 800b388:	40020400 	.word	0x40020400
 800b38c:	40021800 	.word	0x40021800

0800b390 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b0a4      	sub	sp, #144	; 0x90
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b398:	f107 030c 	add.w	r3, r7, #12
 800b39c:	2284      	movs	r2, #132	; 0x84
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f006 fae2 	bl	801196a <memset>
  if(hrng->Instance==RNG)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a11      	ldr	r2, [pc, #68]	; (800b3f0 <HAL_RNG_MspInit+0x60>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d11b      	bne.n	800b3e8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b3b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b3b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b3bc:	f107 030c 	add.w	r3, r7, #12
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f001 fd95 	bl	800cef0 <HAL_RCCEx_PeriphCLKConfig>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800b3cc:	f7f6 f9a8 	bl	8001720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b3d0:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <HAL_RNG_MspInit+0x64>)
 800b3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d4:	4a07      	ldr	r2, [pc, #28]	; (800b3f4 <HAL_RNG_MspInit+0x64>)
 800b3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3da:	6353      	str	r3, [r2, #52]	; 0x34
 800b3dc:	4b05      	ldr	r3, [pc, #20]	; (800b3f4 <HAL_RNG_MspInit+0x64>)
 800b3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e4:	60bb      	str	r3, [r7, #8]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b3e8:	bf00      	nop
 800b3ea:	3790      	adds	r7, #144	; 0x90
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	50060800 	.word	0x50060800
 800b3f4:	40023800 	.word	0x40023800

0800b3f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b0aa      	sub	sp, #168	; 0xa8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b400:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b404:	2200      	movs	r2, #0
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	605a      	str	r2, [r3, #4]
 800b40a:	609a      	str	r2, [r3, #8]
 800b40c:	60da      	str	r2, [r3, #12]
 800b40e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b410:	f107 0310 	add.w	r3, r7, #16
 800b414:	2284      	movs	r2, #132	; 0x84
 800b416:	2100      	movs	r1, #0
 800b418:	4618      	mov	r0, r3
 800b41a:	f006 faa6 	bl	801196a <memset>
  if(huart->Instance==USART3)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a22      	ldr	r2, [pc, #136]	; (800b4ac <HAL_UART_MspInit+0xb4>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d13c      	bne.n	800b4a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b42c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b42e:	2300      	movs	r3, #0
 800b430:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b432:	f107 0310 	add.w	r3, r7, #16
 800b436:	4618      	mov	r0, r3
 800b438:	f001 fd5a 	bl	800cef0 <HAL_RCCEx_PeriphCLKConfig>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b442:	f7f6 f96d 	bl	8001720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b446:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <HAL_UART_MspInit+0xb8>)
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	4a19      	ldr	r2, [pc, #100]	; (800b4b0 <HAL_UART_MspInit+0xb8>)
 800b44c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b450:	6413      	str	r3, [r2, #64]	; 0x40
 800b452:	4b17      	ldr	r3, [pc, #92]	; (800b4b0 <HAL_UART_MspInit+0xb8>)
 800b454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b45e:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <HAL_UART_MspInit+0xb8>)
 800b460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b462:	4a13      	ldr	r2, [pc, #76]	; (800b4b0 <HAL_UART_MspInit+0xb8>)
 800b464:	f043 0308 	orr.w	r3, r3, #8
 800b468:	6313      	str	r3, [r2, #48]	; 0x30
 800b46a:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <HAL_UART_MspInit+0xb8>)
 800b46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46e:	f003 0308 	and.w	r3, r3, #8
 800b472:	60bb      	str	r3, [r7, #8]
 800b474:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b47a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47e:	2302      	movs	r3, #2
 800b480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b484:	2300      	movs	r3, #0
 800b486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b48a:	2303      	movs	r3, #3
 800b48c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b490:	2307      	movs	r3, #7
 800b492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b496:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b49a:	4619      	mov	r1, r3
 800b49c:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <HAL_UART_MspInit+0xbc>)
 800b49e:	f000 fdfb 	bl	800c098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b4a2:	bf00      	nop
 800b4a4:	37a8      	adds	r7, #168	; 0xa8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	40004800 	.word	0x40004800
 800b4b0:	40023800 	.word	0x40023800
 800b4b4:	40020c00 	.word	0x40020c00

0800b4b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08e      	sub	sp, #56	; 0x38
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b4c8:	4b33      	ldr	r3, [pc, #204]	; (800b598 <HAL_InitTick+0xe0>)
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4cc:	4a32      	ldr	r2, [pc, #200]	; (800b598 <HAL_InitTick+0xe0>)
 800b4ce:	f043 0310 	orr.w	r3, r3, #16
 800b4d2:	6413      	str	r3, [r2, #64]	; 0x40
 800b4d4:	4b30      	ldr	r3, [pc, #192]	; (800b598 <HAL_InitTick+0xe0>)
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d8:	f003 0310 	and.w	r3, r3, #16
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b4e0:	f107 0210 	add.w	r2, r7, #16
 800b4e4:	f107 0314 	add.w	r3, r7, #20
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f001 fcce 	bl	800ce8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b4f0:	6a3b      	ldr	r3, [r7, #32]
 800b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d103      	bne.n	800b502 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b4fa:	f001 fc9f 	bl	800ce3c <HAL_RCC_GetPCLK1Freq>
 800b4fe:	6378      	str	r0, [r7, #52]	; 0x34
 800b500:	e004      	b.n	800b50c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b502:	f001 fc9b 	bl	800ce3c <HAL_RCC_GetPCLK1Freq>
 800b506:	4603      	mov	r3, r0
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50e:	4a23      	ldr	r2, [pc, #140]	; (800b59c <HAL_InitTick+0xe4>)
 800b510:	fba2 2303 	umull	r2, r3, r2, r3
 800b514:	0c9b      	lsrs	r3, r3, #18
 800b516:	3b01      	subs	r3, #1
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b51a:	4b21      	ldr	r3, [pc, #132]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b51c:	4a21      	ldr	r2, [pc, #132]	; (800b5a4 <HAL_InitTick+0xec>)
 800b51e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b520:	4b1f      	ldr	r3, [pc, #124]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b522:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b526:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b528:	4a1d      	ldr	r2, [pc, #116]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b52e:	4b1c      	ldr	r3, [pc, #112]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b530:	2200      	movs	r2, #0
 800b532:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b534:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b536:	2200      	movs	r2, #0
 800b538:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b53a:	4b19      	ldr	r3, [pc, #100]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b540:	4817      	ldr	r0, [pc, #92]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b542:	f002 f945 	bl	800d7d0 <HAL_TIM_Base_Init>
 800b546:	4603      	mov	r3, r0
 800b548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800b54c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b550:	2b00      	cmp	r3, #0
 800b552:	d11b      	bne.n	800b58c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b554:	4812      	ldr	r0, [pc, #72]	; (800b5a0 <HAL_InitTick+0xe8>)
 800b556:	f002 f99d 	bl	800d894 <HAL_TIM_Base_Start_IT>
 800b55a:	4603      	mov	r3, r0
 800b55c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800b560:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b564:	2b00      	cmp	r3, #0
 800b566:	d111      	bne.n	800b58c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b568:	2036      	movs	r0, #54	; 0x36
 800b56a:	f000 fa61 	bl	800ba30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b0f      	cmp	r3, #15
 800b572:	d808      	bhi.n	800b586 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b574:	2200      	movs	r2, #0
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	2036      	movs	r0, #54	; 0x36
 800b57a:	f000 fa3d 	bl	800b9f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b57e:	4a0a      	ldr	r2, [pc, #40]	; (800b5a8 <HAL_InitTick+0xf0>)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	e002      	b.n	800b58c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b58c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b590:	4618      	mov	r0, r3
 800b592:	3738      	adds	r7, #56	; 0x38
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	40023800 	.word	0x40023800
 800b59c:	431bde83 	.word	0x431bde83
 800b5a0:	20003678 	.word	0x20003678
 800b5a4:	40001000 	.word	0x40001000
 800b5a8:	20000254 	.word	0x20000254

0800b5ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b5b0:	e7fe      	b.n	800b5b0 <NMI_Handler+0x4>

0800b5b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b5b6:	e7fe      	b.n	800b5b6 <HardFault_Handler+0x4>

0800b5b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b5bc:	e7fe      	b.n	800b5bc <MemManage_Handler+0x4>

0800b5be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b5c2:	e7fe      	b.n	800b5c2 <BusFault_Handler+0x4>

0800b5c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b5c8:	e7fe      	b.n	800b5c8 <UsageFault_Handler+0x4>

0800b5ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b5ce:	bf00      	nop
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b5dc:	4802      	ldr	r0, [pc, #8]	; (800b5e8 <TIM6_DAC_IRQHandler+0x10>)
 800b5de:	f002 f9d1 	bl	800d984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b5e2:	bf00      	nop
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20003678 	.word	0x20003678

0800b5ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
  return 1;
 800b5f0:	2301      	movs	r3, #1
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <_kill>:

int _kill(int pid, int sig)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b606:	f006 fa45 	bl	8011a94 <__errno>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2216      	movs	r2, #22
 800b60e:	601a      	str	r2, [r3, #0]
  return -1;
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b614:	4618      	mov	r0, r3
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <_exit>:

void _exit (int status)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b624:	f04f 31ff 	mov.w	r1, #4294967295
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff ffe7 	bl	800b5fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800b62e:	e7fe      	b.n	800b62e <_exit+0x12>

0800b630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b63c:	2300      	movs	r3, #0
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	e00a      	b.n	800b658 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b642:	f3af 8000 	nop.w
 800b646:	4601      	mov	r1, r0
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	60ba      	str	r2, [r7, #8]
 800b64e:	b2ca      	uxtb	r2, r1
 800b650:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	3301      	adds	r3, #1
 800b656:	617b      	str	r3, [r7, #20]
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	dbf0      	blt.n	800b642 <_read+0x12>
  }

  return len;
 800b660:	687b      	ldr	r3, [r7, #4]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d107      	bne.n	800b68e <_write+0x22>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	b29a      	uxth	r2, r3
 800b682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	4803      	ldr	r0, [pc, #12]	; (800b698 <_write+0x2c>)
 800b68a:	f002 fbcf 	bl	800de2c <HAL_UART_Transmit>
	 return len;
 800b68e:	687b      	ldr	r3, [r7, #4]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20000514 	.word	0x20000514

0800b69c <_close>:
//#endif

int _close(int file)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b6a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b6c4:	605a      	str	r2, [r3, #4]
  return 0;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <_isatty>:

int _isatty(int file)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b6dc:	2301      	movs	r3, #1
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b085      	sub	sp, #20
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b70c:	4a14      	ldr	r2, [pc, #80]	; (800b760 <_sbrk+0x5c>)
 800b70e:	4b15      	ldr	r3, [pc, #84]	; (800b764 <_sbrk+0x60>)
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b718:	4b13      	ldr	r3, [pc, #76]	; (800b768 <_sbrk+0x64>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d102      	bne.n	800b726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b720:	4b11      	ldr	r3, [pc, #68]	; (800b768 <_sbrk+0x64>)
 800b722:	4a12      	ldr	r2, [pc, #72]	; (800b76c <_sbrk+0x68>)
 800b724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b726:	4b10      	ldr	r3, [pc, #64]	; (800b768 <_sbrk+0x64>)
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	429a      	cmp	r2, r3
 800b732:	d207      	bcs.n	800b744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b734:	f006 f9ae 	bl	8011a94 <__errno>
 800b738:	4603      	mov	r3, r0
 800b73a:	220c      	movs	r2, #12
 800b73c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b73e:	f04f 33ff 	mov.w	r3, #4294967295
 800b742:	e009      	b.n	800b758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b744:	4b08      	ldr	r3, [pc, #32]	; (800b768 <_sbrk+0x64>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b74a:	4b07      	ldr	r3, [pc, #28]	; (800b768 <_sbrk+0x64>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	4a05      	ldr	r2, [pc, #20]	; (800b768 <_sbrk+0x64>)
 800b754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b756:	68fb      	ldr	r3, [r7, #12]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20050000 	.word	0x20050000
 800b764:	00000400 	.word	0x00000400
 800b768:	200036c4 	.word	0x200036c4
 800b76c:	20008160 	.word	0x20008160

0800b770 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b770:	b480      	push	{r7}
 800b772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b774:	4b06      	ldr	r3, [pc, #24]	; (800b790 <SystemInit+0x20>)
 800b776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b77a:	4a05      	ldr	r2, [pc, #20]	; (800b790 <SystemInit+0x20>)
 800b77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b784:	bf00      	nop
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	e000ed00 	.word	0xe000ed00

0800b794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b794:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b7cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b798:	480d      	ldr	r0, [pc, #52]	; (800b7d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b79a:	490e      	ldr	r1, [pc, #56]	; (800b7d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b79c:	4a0e      	ldr	r2, [pc, #56]	; (800b7d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b79e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b7a0:	e002      	b.n	800b7a8 <LoopCopyDataInit>

0800b7a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b7a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b7a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b7a6:	3304      	adds	r3, #4

0800b7a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b7a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b7aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b7ac:	d3f9      	bcc.n	800b7a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b7ae:	4a0b      	ldr	r2, [pc, #44]	; (800b7dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b7b0:	4c0b      	ldr	r4, [pc, #44]	; (800b7e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b7b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b7b4:	e001      	b.n	800b7ba <LoopFillZerobss>

0800b7b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b7b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b7b8:	3204      	adds	r2, #4

0800b7ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b7ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b7bc:	d3fb      	bcc.n	800b7b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b7be:	f7ff ffd7 	bl	800b770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b7c2:	f006 f96d 	bl	8011aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b7c6:	f7f5 fb87 	bl	8000ed8 <main>
  bx  lr    
 800b7ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b7cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b7d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b7d4:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 800b7d8:	08014848 	.word	0x08014848
  ldr r2, =_sbss
 800b7dc:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800b7e0:	20008160 	.word	0x20008160

0800b7e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b7e4:	e7fe      	b.n	800b7e4 <ADC_IRQHandler>

0800b7e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b7ea:	2003      	movs	r0, #3
 800b7ec:	f000 f8f9 	bl	800b9e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b7f0:	200f      	movs	r0, #15
 800b7f2:	f7ff fe61 	bl	800b4b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b7f6:	f7ff fce3 	bl	800b1c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b800:	b480      	push	{r7}
 800b802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b804:	4b06      	ldr	r3, [pc, #24]	; (800b820 <HAL_IncTick+0x20>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	4b06      	ldr	r3, [pc, #24]	; (800b824 <HAL_IncTick+0x24>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4413      	add	r3, r2
 800b810:	4a04      	ldr	r2, [pc, #16]	; (800b824 <HAL_IncTick+0x24>)
 800b812:	6013      	str	r3, [r2, #0]
}
 800b814:	bf00      	nop
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	20000258 	.word	0x20000258
 800b824:	200036c8 	.word	0x200036c8

0800b828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
  return uwTick;
 800b82c:	4b03      	ldr	r3, [pc, #12]	; (800b83c <HAL_GetTick+0x14>)
 800b82e:	681b      	ldr	r3, [r3, #0]
}
 800b830:	4618      	mov	r0, r3
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	200036c8 	.word	0x200036c8

0800b840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b848:	f7ff ffee 	bl	800b828 <HAL_GetTick>
 800b84c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d005      	beq.n	800b866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b85a:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <HAL_Delay+0x44>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4413      	add	r3, r2
 800b864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b866:	bf00      	nop
 800b868:	f7ff ffde 	bl	800b828 <HAL_GetTick>
 800b86c:	4602      	mov	r2, r0
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	429a      	cmp	r2, r3
 800b876:	d8f7      	bhi.n	800b868 <HAL_Delay+0x28>
  {
  }
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20000258 	.word	0x20000258

0800b888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b898:	4b0b      	ldr	r3, [pc, #44]	; (800b8c8 <__NVIC_SetPriorityGrouping+0x40>)
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b8b0:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <__NVIC_SetPriorityGrouping+0x44>)
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b8b6:	4a04      	ldr	r2, [pc, #16]	; (800b8c8 <__NVIC_SetPriorityGrouping+0x40>)
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	60d3      	str	r3, [r2, #12]
}
 800b8bc:	bf00      	nop
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	e000ed00 	.word	0xe000ed00
 800b8cc:	05fa0000 	.word	0x05fa0000

0800b8d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b8d4:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <__NVIC_GetPriorityGrouping+0x18>)
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	0a1b      	lsrs	r3, r3, #8
 800b8da:	f003 0307 	and.w	r3, r3, #7
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	e000ed00 	.word	0xe000ed00

0800b8ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	db0b      	blt.n	800b916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b8fe:	79fb      	ldrb	r3, [r7, #7]
 800b900:	f003 021f 	and.w	r2, r3, #31
 800b904:	4907      	ldr	r1, [pc, #28]	; (800b924 <__NVIC_EnableIRQ+0x38>)
 800b906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b90a:	095b      	lsrs	r3, r3, #5
 800b90c:	2001      	movs	r0, #1
 800b90e:	fa00 f202 	lsl.w	r2, r0, r2
 800b912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	e000e100 	.word	0xe000e100

0800b928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	6039      	str	r1, [r7, #0]
 800b932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	db0a      	blt.n	800b952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	b2da      	uxtb	r2, r3
 800b940:	490c      	ldr	r1, [pc, #48]	; (800b974 <__NVIC_SetPriority+0x4c>)
 800b942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b946:	0112      	lsls	r2, r2, #4
 800b948:	b2d2      	uxtb	r2, r2
 800b94a:	440b      	add	r3, r1
 800b94c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b950:	e00a      	b.n	800b968 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	b2da      	uxtb	r2, r3
 800b956:	4908      	ldr	r1, [pc, #32]	; (800b978 <__NVIC_SetPriority+0x50>)
 800b958:	79fb      	ldrb	r3, [r7, #7]
 800b95a:	f003 030f 	and.w	r3, r3, #15
 800b95e:	3b04      	subs	r3, #4
 800b960:	0112      	lsls	r2, r2, #4
 800b962:	b2d2      	uxtb	r2, r2
 800b964:	440b      	add	r3, r1
 800b966:	761a      	strb	r2, [r3, #24]
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	e000e100 	.word	0xe000e100
 800b978:	e000ed00 	.word	0xe000ed00

0800b97c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b089      	sub	sp, #36	; 0x24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	f1c3 0307 	rsb	r3, r3, #7
 800b996:	2b04      	cmp	r3, #4
 800b998:	bf28      	it	cs
 800b99a:	2304      	movcs	r3, #4
 800b99c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	2b06      	cmp	r3, #6
 800b9a4:	d902      	bls.n	800b9ac <NVIC_EncodePriority+0x30>
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	3b03      	subs	r3, #3
 800b9aa:	e000      	b.n	800b9ae <NVIC_EncodePriority+0x32>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ba:	43da      	mvns	r2, r3
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	401a      	ands	r2, r3
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b9c4:	f04f 31ff 	mov.w	r1, #4294967295
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ce:	43d9      	mvns	r1, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9d4:	4313      	orrs	r3, r2
         );
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3724      	adds	r7, #36	; 0x24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff ff4c 	bl	800b888 <__NVIC_SetPriorityGrouping>
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ba06:	2300      	movs	r3, #0
 800ba08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ba0a:	f7ff ff61 	bl	800b8d0 <__NVIC_GetPriorityGrouping>
 800ba0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	6978      	ldr	r0, [r7, #20]
 800ba16:	f7ff ffb1 	bl	800b97c <NVIC_EncodePriority>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba20:	4611      	mov	r1, r2
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff ff80 	bl	800b928 <__NVIC_SetPriority>
}
 800ba28:	bf00      	nop
 800ba2a:	3718      	adds	r7, #24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ba3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff ff54 	bl	800b8ec <__NVIC_EnableIRQ>
}
 800ba44:	bf00      	nop
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e06a      	b.n	800bb34 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2223      	movs	r2, #35	; 0x23
 800ba6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7ff fbcd 	bl	800b210 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba76:	4b31      	ldr	r3, [pc, #196]	; (800bb3c <HAL_ETH_Init+0xf0>)
 800ba78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7a:	4a30      	ldr	r2, [pc, #192]	; (800bb3c <HAL_ETH_Init+0xf0>)
 800ba7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba80:	6453      	str	r3, [r2, #68]	; 0x44
 800ba82:	4b2e      	ldr	r3, [pc, #184]	; (800bb3c <HAL_ETH_Init+0xf0>)
 800ba84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba8a:	60bb      	str	r3, [r7, #8]
 800ba8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800ba8e:	4b2c      	ldr	r3, [pc, #176]	; (800bb40 <HAL_ETH_Init+0xf4>)
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	4a2b      	ldr	r2, [pc, #172]	; (800bb40 <HAL_ETH_Init+0xf4>)
 800ba94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800ba9a:	4b29      	ldr	r3, [pc, #164]	; (800bb40 <HAL_ETH_Init+0xf4>)
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	4927      	ldr	r1, [pc, #156]	; (800bb40 <HAL_ETH_Init+0xf4>)
 800baa4:	4313      	orrs	r3, r2
 800baa6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800baa8:	4b25      	ldr	r3, [pc, #148]	; (800bb40 <HAL_ETH_Init+0xf4>)
 800baaa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	f043 0301 	orr.w	r3, r3, #1
 800babe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bac4:	f7ff feb0 	bl	800b828 <HAL_GetTick>
 800bac8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800baca:	e011      	b.n	800baf0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800bacc:	f7ff feac 	bl	800b828 <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bada:	d909      	bls.n	800baf0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2204      	movs	r2, #4
 800bae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	22e0      	movs	r2, #224	; 0xe0
 800bae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e021      	b.n	800bb34 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e4      	bne.n	800bacc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f958 	bl	800bdb8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f9ff 	bl	800bf0c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fa55 	bl	800bfbe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f9bd 	bl	800be9c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2210      	movs	r2, #16
 800bb2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	40023800 	.word	0x40023800
 800bb40:	40013800 	.word	0x40013800

0800bb44 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	4b51      	ldr	r3, [pc, #324]	; (800bca0 <ETH_SetMACConfig+0x15c>)
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	7c1b      	ldrb	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d102      	bne.n	800bb6c <ETH_SetMACConfig+0x28>
 800bb66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bb6a:	e000      	b.n	800bb6e <ETH_SetMACConfig+0x2a>
 800bb6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	7c5b      	ldrb	r3, [r3, #17]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <ETH_SetMACConfig+0x38>
 800bb76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb7a:	e000      	b.n	800bb7e <ETH_SetMACConfig+0x3a>
 800bb7c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bb7e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800bb84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	7fdb      	ldrb	r3, [r3, #31]
 800bb8a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800bb8c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800bb92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	7f92      	ldrb	r2, [r2, #30]
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	d102      	bne.n	800bba2 <ETH_SetMACConfig+0x5e>
 800bb9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bba0:	e000      	b.n	800bba4 <ETH_SetMACConfig+0x60>
 800bba2:	2200      	movs	r2, #0
                        macconf->Speed |
 800bba4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	7f1b      	ldrb	r3, [r3, #28]
 800bbaa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800bbac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800bbb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	791b      	ldrb	r3, [r3, #4]
 800bbb8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800bbba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	d102      	bne.n	800bbcc <ETH_SetMACConfig+0x88>
 800bbc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbca:	e000      	b.n	800bbce <ETH_SetMACConfig+0x8a>
 800bbcc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800bbce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	7bdb      	ldrb	r3, [r3, #15]
 800bbd4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800bbd6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800bbdc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbfe:	2001      	movs	r0, #1
 800bc00:	f7ff fe1e 	bl	800b840 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	f64f 7341 	movw	r3, #65345	; 0xff41
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc22:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800bc24:	683a      	ldr	r2, [r7, #0]
 800bc26:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800bc2a:	2a00      	cmp	r2, #0
 800bc2c:	d101      	bne.n	800bc32 <ETH_SetMACConfig+0xee>
 800bc2e:	2280      	movs	r2, #128	; 0x80
 800bc30:	e000      	b.n	800bc34 <ETH_SetMACConfig+0xf0>
 800bc32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bc34:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800bc3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bc3c:	683a      	ldr	r2, [r7, #0]
 800bc3e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800bc42:	2a01      	cmp	r2, #1
 800bc44:	d101      	bne.n	800bc4a <ETH_SetMACConfig+0x106>
 800bc46:	2208      	movs	r2, #8
 800bc48:	e000      	b.n	800bc4c <ETH_SetMACConfig+0x108>
 800bc4a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800bc4c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800bc54:	2a01      	cmp	r2, #1
 800bc56:	d101      	bne.n	800bc5c <ETH_SetMACConfig+0x118>
 800bc58:	2204      	movs	r2, #4
 800bc5a:	e000      	b.n	800bc5e <ETH_SetMACConfig+0x11a>
 800bc5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bc5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800bc66:	2a01      	cmp	r2, #1
 800bc68:	d101      	bne.n	800bc6e <ETH_SetMACConfig+0x12a>
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	e000      	b.n	800bc70 <ETH_SetMACConfig+0x12c>
 800bc6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bc70:	4313      	orrs	r3, r2
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	699b      	ldr	r3, [r3, #24]
 800bc86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7ff fdd9 	bl	800b840 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	619a      	str	r2, [r3, #24]
}
 800bc96:	bf00      	nop
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	ff20810f 	.word	0xff20810f

0800bca4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	4b3d      	ldr	r3, [pc, #244]	; (800bdb4 <ETH_SetDMAConfig+0x110>)
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	7b1b      	ldrb	r3, [r3, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d102      	bne.n	800bcd0 <ETH_SetDMAConfig+0x2c>
 800bcca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bcce:	e000      	b.n	800bcd2 <ETH_SetDMAConfig+0x2e>
 800bcd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	7b5b      	ldrb	r3, [r3, #13]
 800bcd6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bcd8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	7f52      	ldrb	r2, [r2, #29]
 800bcde:	2a00      	cmp	r2, #0
 800bce0:	d102      	bne.n	800bce8 <ETH_SetDMAConfig+0x44>
 800bce2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bce6:	e000      	b.n	800bcea <ETH_SetDMAConfig+0x46>
 800bce8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bcea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	7b9b      	ldrb	r3, [r3, #14]
 800bcf0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bcf2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bcf8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	7f1b      	ldrb	r3, [r3, #28]
 800bcfe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800bd00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	7f9b      	ldrb	r3, [r3, #30]
 800bd06:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bd08:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bd0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bd16:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd28:	461a      	mov	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	f7ff fd80 	bl	800b840 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd48:	461a      	mov	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	791b      	ldrb	r3, [r3, #4]
 800bd52:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bd58:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800bd5e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bd64:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd6c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800bd6e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd74:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bd76:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bd7c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	6812      	ldr	r2, [r2, #0]
 800bd82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd8a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bd98:	2001      	movs	r0, #1
 800bd9a:	f7ff fd51 	bl	800b840 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda6:	461a      	mov	r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6013      	str	r3, [r2, #0]
}
 800bdac:	bf00      	nop
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	f8de3f23 	.word	0xf8de3f23

0800bdb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b0a6      	sub	sp, #152	; 0x98
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800bddc:	2300      	movs	r3, #0
 800bdde:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800bde2:	2301      	movs	r3, #1
 800bde4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800bde8:	2300      	movs	r3, #0
 800bdea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800bdfe:	2300      	movs	r3, #0
 800be00:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800be02:	2300      	movs	r3, #0
 800be04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800be08:	2300      	movs	r3, #0
 800be0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800be0e:	2300      	movs	r3, #0
 800be10:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800be14:	2300      	movs	r3, #0
 800be16:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800be1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be1e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800be20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800be26:	2300      	movs	r3, #0
 800be28:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800be2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fe86 	bl	800bb44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800be38:	2301      	movs	r3, #1
 800be3a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800be46:	2301      	movs	r3, #1
 800be48:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800be4a:	2300      	movs	r3, #0
 800be4c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800be4e:	2300      	movs	r3, #0
 800be50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800be54:	2300      	movs	r3, #0
 800be56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800be5a:	2300      	movs	r3, #0
 800be5c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800be5e:	2301      	movs	r3, #1
 800be60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800be64:	2301      	movs	r3, #1
 800be66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800be68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800be6c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800be6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800be72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800be74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be78:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800be7a:	2301      	movs	r3, #1
 800be7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800be80:	2300      	movs	r3, #0
 800be82:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800be84:	2300      	movs	r3, #0
 800be86:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800be88:	f107 0308 	add.w	r3, r7, #8
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff ff08 	bl	800bca4 <ETH_SetDMAConfig>
}
 800be94:	bf00      	nop
 800be96:	3798      	adds	r7, #152	; 0x98
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3305      	adds	r3, #5
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	3204      	adds	r2, #4
 800beb4:	7812      	ldrb	r2, [r2, #0]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	4b11      	ldr	r3, [pc, #68]	; (800bf04 <ETH_MACAddressConfig+0x68>)
 800bebe:	4413      	add	r3, r2
 800bec0:	461a      	mov	r2, r3
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	3303      	adds	r3, #3
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	061a      	lsls	r2, r3, #24
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3302      	adds	r3, #2
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	041b      	lsls	r3, r3, #16
 800bed6:	431a      	orrs	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3301      	adds	r3, #1
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	021b      	lsls	r3, r3, #8
 800bee0:	4313      	orrs	r3, r2
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	7812      	ldrb	r2, [r2, #0]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <ETH_MACAddressConfig+0x6c>)
 800beee:	4413      	add	r3, r2
 800bef0:	461a      	mov	r2, r3
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	6013      	str	r3, [r2, #0]
}
 800bef6:	bf00      	nop
 800bef8:	371c      	adds	r7, #28
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	40028040 	.word	0x40028040
 800bf08:	40028044 	.word	0x40028044

0800bf0c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	e03e      	b.n	800bf98 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68d9      	ldr	r1, [r3, #12]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4613      	mov	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	440b      	add	r3, r1
 800bf2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	2200      	movs	r2, #0
 800bf36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2200      	movs	r2, #0
 800bf42:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	3206      	adds	r2, #6
 800bf4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d80c      	bhi.n	800bf7c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68d9      	ldr	r1, [r3, #12]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	440b      	add	r3, r1
 800bf74:	461a      	mov	r2, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	60da      	str	r2, [r3, #12]
 800bf7a:	e004      	b.n	800bf86 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	461a      	mov	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3301      	adds	r3, #1
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d9bd      	bls.n	800bf1a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68da      	ldr	r2, [r3, #12]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb0:	611a      	str	r2, [r3, #16]
}
 800bfb2:	bf00      	nop
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b085      	sub	sp, #20
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
 800bfca:	e046      	b.n	800c05a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6919      	ldr	r1, [r3, #16]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	440b      	add	r3, r1
 800bfdc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2200      	movs	r2, #0
 800bfee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2200      	movs	r2, #0
 800bff4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2200      	movs	r2, #0
 800bffa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2200      	movs	r2, #0
 800c000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c008:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c010:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800c01e:	68b9      	ldr	r1, [r7, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	3212      	adds	r2, #18
 800c026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d80c      	bhi.n	800c04a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6919      	ldr	r1, [r3, #16]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	1c5a      	adds	r2, r3, #1
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	00db      	lsls	r3, r3, #3
 800c040:	440b      	add	r3, r1
 800c042:	461a      	mov	r2, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	60da      	str	r2, [r3, #12]
 800c048:	e004      	b.n	800c054 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	461a      	mov	r2, r3
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3301      	adds	r3, #1
 800c058:	60fb      	str	r3, [r7, #12]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d9b5      	bls.n	800bfcc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	691a      	ldr	r2, [r3, #16]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c08a:	60da      	str	r2, [r3, #12]
}
 800c08c:	bf00      	nop
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c098:	b480      	push	{r7}
 800c09a:	b089      	sub	sp, #36	; 0x24
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61fb      	str	r3, [r7, #28]
 800c0b6:	e175      	b.n	800c3a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	f040 8164 	bne.w	800c39e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f003 0303 	and.w	r3, r3, #3
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d005      	beq.n	800c0ee <HAL_GPIO_Init+0x56>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f003 0303 	and.w	r3, r3, #3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d130      	bne.n	800c150 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	2203      	movs	r2, #3
 800c0fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fe:	43db      	mvns	r3, r3
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	4013      	ands	r3, r2
 800c104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	68da      	ldr	r2, [r3, #12]
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	fa02 f303 	lsl.w	r3, r2, r3
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	4313      	orrs	r3, r2
 800c116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c124:	2201      	movs	r2, #1
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	fa02 f303 	lsl.w	r3, r2, r3
 800c12c:	43db      	mvns	r3, r3
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	4013      	ands	r3, r2
 800c132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	091b      	lsrs	r3, r3, #4
 800c13a:	f003 0201 	and.w	r2, r3, #1
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	fa02 f303 	lsl.w	r3, r2, r3
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	4313      	orrs	r3, r2
 800c148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	69ba      	ldr	r2, [r7, #24]
 800c14e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d017      	beq.n	800c18c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	2203      	movs	r2, #3
 800c168:	fa02 f303 	lsl.w	r3, r2, r3
 800c16c:	43db      	mvns	r3, r3
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	4013      	ands	r3, r2
 800c172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	689a      	ldr	r2, [r3, #8]
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	fa02 f303 	lsl.w	r3, r2, r3
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	4313      	orrs	r3, r2
 800c184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f003 0303 	and.w	r3, r3, #3
 800c194:	2b02      	cmp	r3, #2
 800c196:	d123      	bne.n	800c1e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	08da      	lsrs	r2, r3, #3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3208      	adds	r2, #8
 800c1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	f003 0307 	and.w	r3, r3, #7
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	220f      	movs	r2, #15
 800c1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b4:	43db      	mvns	r3, r3
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	691a      	ldr	r2, [r3, #16]
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	f003 0307 	and.w	r3, r3, #7
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	08da      	lsrs	r2, r3, #3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3208      	adds	r2, #8
 800c1da:	69b9      	ldr	r1, [r7, #24]
 800c1dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	2203      	movs	r2, #3
 800c1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f0:	43db      	mvns	r3, r3
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	f003 0203 	and.w	r2, r3, #3
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	fa02 f303 	lsl.w	r3, r2, r3
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 80be 	beq.w	800c39e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c222:	4b66      	ldr	r3, [pc, #408]	; (800c3bc <HAL_GPIO_Init+0x324>)
 800c224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c226:	4a65      	ldr	r2, [pc, #404]	; (800c3bc <HAL_GPIO_Init+0x324>)
 800c228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c22c:	6453      	str	r3, [r2, #68]	; 0x44
 800c22e:	4b63      	ldr	r3, [pc, #396]	; (800c3bc <HAL_GPIO_Init+0x324>)
 800c230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c23a:	4a61      	ldr	r2, [pc, #388]	; (800c3c0 <HAL_GPIO_Init+0x328>)
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	089b      	lsrs	r3, r3, #2
 800c240:	3302      	adds	r3, #2
 800c242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c246:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	f003 0303 	and.w	r3, r3, #3
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	220f      	movs	r2, #15
 800c252:	fa02 f303 	lsl.w	r3, r2, r3
 800c256:	43db      	mvns	r3, r3
 800c258:	69ba      	ldr	r2, [r7, #24]
 800c25a:	4013      	ands	r3, r2
 800c25c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a58      	ldr	r2, [pc, #352]	; (800c3c4 <HAL_GPIO_Init+0x32c>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d037      	beq.n	800c2d6 <HAL_GPIO_Init+0x23e>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a57      	ldr	r2, [pc, #348]	; (800c3c8 <HAL_GPIO_Init+0x330>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d031      	beq.n	800c2d2 <HAL_GPIO_Init+0x23a>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a56      	ldr	r2, [pc, #344]	; (800c3cc <HAL_GPIO_Init+0x334>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d02b      	beq.n	800c2ce <HAL_GPIO_Init+0x236>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a55      	ldr	r2, [pc, #340]	; (800c3d0 <HAL_GPIO_Init+0x338>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d025      	beq.n	800c2ca <HAL_GPIO_Init+0x232>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a54      	ldr	r2, [pc, #336]	; (800c3d4 <HAL_GPIO_Init+0x33c>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d01f      	beq.n	800c2c6 <HAL_GPIO_Init+0x22e>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a53      	ldr	r2, [pc, #332]	; (800c3d8 <HAL_GPIO_Init+0x340>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d019      	beq.n	800c2c2 <HAL_GPIO_Init+0x22a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a52      	ldr	r2, [pc, #328]	; (800c3dc <HAL_GPIO_Init+0x344>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d013      	beq.n	800c2be <HAL_GPIO_Init+0x226>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a51      	ldr	r2, [pc, #324]	; (800c3e0 <HAL_GPIO_Init+0x348>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d00d      	beq.n	800c2ba <HAL_GPIO_Init+0x222>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a50      	ldr	r2, [pc, #320]	; (800c3e4 <HAL_GPIO_Init+0x34c>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d007      	beq.n	800c2b6 <HAL_GPIO_Init+0x21e>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a4f      	ldr	r2, [pc, #316]	; (800c3e8 <HAL_GPIO_Init+0x350>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d101      	bne.n	800c2b2 <HAL_GPIO_Init+0x21a>
 800c2ae:	2309      	movs	r3, #9
 800c2b0:	e012      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2b2:	230a      	movs	r3, #10
 800c2b4:	e010      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2b6:	2308      	movs	r3, #8
 800c2b8:	e00e      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2ba:	2307      	movs	r3, #7
 800c2bc:	e00c      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2be:	2306      	movs	r3, #6
 800c2c0:	e00a      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2c2:	2305      	movs	r3, #5
 800c2c4:	e008      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2c6:	2304      	movs	r3, #4
 800c2c8:	e006      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e004      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	e002      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e000      	b.n	800c2d8 <HAL_GPIO_Init+0x240>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	f002 0203 	and.w	r2, r2, #3
 800c2de:	0092      	lsls	r2, r2, #2
 800c2e0:	4093      	lsls	r3, r2
 800c2e2:	69ba      	ldr	r2, [r7, #24]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c2e8:	4935      	ldr	r1, [pc, #212]	; (800c3c0 <HAL_GPIO_Init+0x328>)
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	089b      	lsrs	r3, r3, #2
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c2f6:	4b3d      	ldr	r3, [pc, #244]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	43db      	mvns	r3, r3
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	4013      	ands	r3, r2
 800c304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	4313      	orrs	r3, r2
 800c318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c31a:	4a34      	ldr	r2, [pc, #208]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c320:	4b32      	ldr	r3, [pc, #200]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	43db      	mvns	r3, r3
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	4013      	ands	r3, r2
 800c32e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	4313      	orrs	r3, r2
 800c342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c344:	4a29      	ldr	r2, [pc, #164]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c34a:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	43db      	mvns	r3, r3
 800c354:	69ba      	ldr	r2, [r7, #24]
 800c356:	4013      	ands	r3, r2
 800c358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c366:	69ba      	ldr	r2, [r7, #24]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c36e:	4a1f      	ldr	r2, [pc, #124]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c374:	4b1d      	ldr	r3, [pc, #116]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	43db      	mvns	r3, r3
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	4013      	ands	r3, r2
 800c382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d003      	beq.n	800c398 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c390:	69ba      	ldr	r2, [r7, #24]
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	4313      	orrs	r3, r2
 800c396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c398:	4a14      	ldr	r2, [pc, #80]	; (800c3ec <HAL_GPIO_Init+0x354>)
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	61fb      	str	r3, [r7, #28]
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	2b0f      	cmp	r3, #15
 800c3a8:	f67f ae86 	bls.w	800c0b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	3724      	adds	r7, #36	; 0x24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	40023800 	.word	0x40023800
 800c3c0:	40013800 	.word	0x40013800
 800c3c4:	40020000 	.word	0x40020000
 800c3c8:	40020400 	.word	0x40020400
 800c3cc:	40020800 	.word	0x40020800
 800c3d0:	40020c00 	.word	0x40020c00
 800c3d4:	40021000 	.word	0x40021000
 800c3d8:	40021400 	.word	0x40021400
 800c3dc:	40021800 	.word	0x40021800
 800c3e0:	40021c00 	.word	0x40021c00
 800c3e4:	40022000 	.word	0x40022000
 800c3e8:	40022400 	.word	0x40022400
 800c3ec:	40013c00 	.word	0x40013c00

0800c3f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	807b      	strh	r3, [r7, #2]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c400:	787b      	ldrb	r3, [r7, #1]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c406:	887a      	ldrh	r2, [r7, #2]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c40c:	e003      	b.n	800c416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c40e:	887b      	ldrh	r3, [r7, #2]
 800c410:	041a      	lsls	r2, r3, #16
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	619a      	str	r2, [r3, #24]
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	460b      	mov	r3, r1
 800c42c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c434:	887a      	ldrh	r2, [r7, #2]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	4013      	ands	r3, r2
 800c43a:	041a      	lsls	r2, r3, #16
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	43d9      	mvns	r1, r3
 800c440:	887b      	ldrh	r3, [r7, #2]
 800c442:	400b      	ands	r3, r1
 800c444:	431a      	orrs	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	619a      	str	r2, [r3, #24]
}
 800c44a:	bf00      	nop
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
	...

0800c458 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c462:	4b23      	ldr	r3, [pc, #140]	; (800c4f0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	4a22      	ldr	r2, [pc, #136]	; (800c4f0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c46c:	6413      	str	r3, [r2, #64]	; 0x40
 800c46e:	4b20      	ldr	r3, [pc, #128]	; (800c4f0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c47a:	4b1e      	ldr	r3, [pc, #120]	; (800c4f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a1d      	ldr	r2, [pc, #116]	; (800c4f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c484:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c486:	f7ff f9cf 	bl	800b828 <HAL_GetTick>
 800c48a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c48c:	e009      	b.n	800c4a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c48e:	f7ff f9cb 	bl	800b828 <HAL_GetTick>
 800c492:	4602      	mov	r2, r0
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c49c:	d901      	bls.n	800c4a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	e022      	b.n	800c4e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c4a2:	4b14      	ldr	r3, [pc, #80]	; (800c4f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ae:	d1ee      	bne.n	800c48e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c4b0:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a0f      	ldr	r2, [pc, #60]	; (800c4f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c4bc:	f7ff f9b4 	bl	800b828 <HAL_GetTick>
 800c4c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4c2:	e009      	b.n	800c4d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c4c4:	f7ff f9b0 	bl	800b828 <HAL_GetTick>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4d2:	d901      	bls.n	800c4d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e007      	b.n	800c4e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c4d8:	4b06      	ldr	r3, [pc, #24]	; (800c4f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e4:	d1ee      	bne.n	800c4c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	40023800 	.word	0x40023800
 800c4f4:	40007000 	.word	0x40007000

0800c4f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c500:	2300      	movs	r3, #0
 800c502:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d101      	bne.n	800c50e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e291      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 8087 	beq.w	800c62a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c51c:	4b96      	ldr	r3, [pc, #600]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	f003 030c 	and.w	r3, r3, #12
 800c524:	2b04      	cmp	r3, #4
 800c526:	d00c      	beq.n	800c542 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c528:	4b93      	ldr	r3, [pc, #588]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f003 030c 	and.w	r3, r3, #12
 800c530:	2b08      	cmp	r3, #8
 800c532:	d112      	bne.n	800c55a <HAL_RCC_OscConfig+0x62>
 800c534:	4b90      	ldr	r3, [pc, #576]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c53c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c540:	d10b      	bne.n	800c55a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c542:	4b8d      	ldr	r3, [pc, #564]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d06c      	beq.n	800c628 <HAL_RCC_OscConfig+0x130>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d168      	bne.n	800c628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	e26b      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c562:	d106      	bne.n	800c572 <HAL_RCC_OscConfig+0x7a>
 800c564:	4b84      	ldr	r3, [pc, #528]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a83      	ldr	r2, [pc, #524]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c56a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	e02e      	b.n	800c5d0 <HAL_RCC_OscConfig+0xd8>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10c      	bne.n	800c594 <HAL_RCC_OscConfig+0x9c>
 800c57a:	4b7f      	ldr	r3, [pc, #508]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a7e      	ldr	r2, [pc, #504]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	4b7c      	ldr	r3, [pc, #496]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a7b      	ldr	r2, [pc, #492]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c58c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c590:	6013      	str	r3, [r2, #0]
 800c592:	e01d      	b.n	800c5d0 <HAL_RCC_OscConfig+0xd8>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c59c:	d10c      	bne.n	800c5b8 <HAL_RCC_OscConfig+0xc0>
 800c59e:	4b76      	ldr	r3, [pc, #472]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a75      	ldr	r2, [pc, #468]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c5a8:	6013      	str	r3, [r2, #0]
 800c5aa:	4b73      	ldr	r3, [pc, #460]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a72      	ldr	r2, [pc, #456]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	e00b      	b.n	800c5d0 <HAL_RCC_OscConfig+0xd8>
 800c5b8:	4b6f      	ldr	r3, [pc, #444]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a6e      	ldr	r2, [pc, #440]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	4b6c      	ldr	r3, [pc, #432]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a6b      	ldr	r2, [pc, #428]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d013      	beq.n	800c600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5d8:	f7ff f926 	bl	800b828 <HAL_GetTick>
 800c5dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5de:	e008      	b.n	800c5f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5e0:	f7ff f922 	bl	800b828 <HAL_GetTick>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	2b64      	cmp	r3, #100	; 0x64
 800c5ec:	d901      	bls.n	800c5f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	e21f      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5f2:	4b61      	ldr	r3, [pc, #388]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0f0      	beq.n	800c5e0 <HAL_RCC_OscConfig+0xe8>
 800c5fe:	e014      	b.n	800c62a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c600:	f7ff f912 	bl	800b828 <HAL_GetTick>
 800c604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c606:	e008      	b.n	800c61a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c608:	f7ff f90e 	bl	800b828 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b64      	cmp	r3, #100	; 0x64
 800c614:	d901      	bls.n	800c61a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e20b      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c61a:	4b57      	ldr	r3, [pc, #348]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1f0      	bne.n	800c608 <HAL_RCC_OscConfig+0x110>
 800c626:	e000      	b.n	800c62a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 0302 	and.w	r3, r3, #2
 800c632:	2b00      	cmp	r3, #0
 800c634:	d069      	beq.n	800c70a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c636:	4b50      	ldr	r3, [pc, #320]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f003 030c 	and.w	r3, r3, #12
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00b      	beq.n	800c65a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c642:	4b4d      	ldr	r3, [pc, #308]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f003 030c 	and.w	r3, r3, #12
 800c64a:	2b08      	cmp	r3, #8
 800c64c:	d11c      	bne.n	800c688 <HAL_RCC_OscConfig+0x190>
 800c64e:	4b4a      	ldr	r3, [pc, #296]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c656:	2b00      	cmp	r3, #0
 800c658:	d116      	bne.n	800c688 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c65a:	4b47      	ldr	r3, [pc, #284]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f003 0302 	and.w	r3, r3, #2
 800c662:	2b00      	cmp	r3, #0
 800c664:	d005      	beq.n	800c672 <HAL_RCC_OscConfig+0x17a>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d001      	beq.n	800c672 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	e1df      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c672:	4b41      	ldr	r3, [pc, #260]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	493d      	ldr	r1, [pc, #244]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c682:	4313      	orrs	r3, r2
 800c684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c686:	e040      	b.n	800c70a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d023      	beq.n	800c6d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c690:	4b39      	ldr	r3, [pc, #228]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a38      	ldr	r2, [pc, #224]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c696:	f043 0301 	orr.w	r3, r3, #1
 800c69a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c69c:	f7ff f8c4 	bl	800b828 <HAL_GetTick>
 800c6a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6a2:	e008      	b.n	800c6b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6a4:	f7ff f8c0 	bl	800b828 <HAL_GetTick>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d901      	bls.n	800c6b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	e1bd      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6b6:	4b30      	ldr	r3, [pc, #192]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 0302 	and.w	r3, r3, #2
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0f0      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6c2:	4b2d      	ldr	r3, [pc, #180]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	4929      	ldr	r1, [pc, #164]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	600b      	str	r3, [r1, #0]
 800c6d6:	e018      	b.n	800c70a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c6d8:	4b27      	ldr	r3, [pc, #156]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a26      	ldr	r2, [pc, #152]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c6de:	f023 0301 	bic.w	r3, r3, #1
 800c6e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6e4:	f7ff f8a0 	bl	800b828 <HAL_GetTick>
 800c6e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6ea:	e008      	b.n	800c6fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6ec:	f7ff f89c 	bl	800b828 <HAL_GetTick>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d901      	bls.n	800c6fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	e199      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6fe:	4b1e      	ldr	r3, [pc, #120]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1f0      	bne.n	800c6ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 0308 	and.w	r3, r3, #8
 800c712:	2b00      	cmp	r3, #0
 800c714:	d038      	beq.n	800c788 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d019      	beq.n	800c752 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c71e:	4b16      	ldr	r3, [pc, #88]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c722:	4a15      	ldr	r2, [pc, #84]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c724:	f043 0301 	orr.w	r3, r3, #1
 800c728:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c72a:	f7ff f87d 	bl	800b828 <HAL_GetTick>
 800c72e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c730:	e008      	b.n	800c744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c732:	f7ff f879 	bl	800b828 <HAL_GetTick>
 800c736:	4602      	mov	r2, r0
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d901      	bls.n	800c744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c740:	2303      	movs	r3, #3
 800c742:	e176      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c744:	4b0c      	ldr	r3, [pc, #48]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c748:	f003 0302 	and.w	r3, r3, #2
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0f0      	beq.n	800c732 <HAL_RCC_OscConfig+0x23a>
 800c750:	e01a      	b.n	800c788 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c752:	4b09      	ldr	r3, [pc, #36]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c756:	4a08      	ldr	r2, [pc, #32]	; (800c778 <HAL_RCC_OscConfig+0x280>)
 800c758:	f023 0301 	bic.w	r3, r3, #1
 800c75c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c75e:	f7ff f863 	bl	800b828 <HAL_GetTick>
 800c762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c764:	e00a      	b.n	800c77c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c766:	f7ff f85f 	bl	800b828 <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	2b02      	cmp	r3, #2
 800c772:	d903      	bls.n	800c77c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c774:	2303      	movs	r3, #3
 800c776:	e15c      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
 800c778:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c77c:	4b91      	ldr	r3, [pc, #580]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c77e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c780:	f003 0302 	and.w	r3, r3, #2
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1ee      	bne.n	800c766 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0304 	and.w	r3, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 80a4 	beq.w	800c8de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c796:	4b8b      	ldr	r3, [pc, #556]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10d      	bne.n	800c7be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7a2:	4b88      	ldr	r3, [pc, #544]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a6:	4a87      	ldr	r2, [pc, #540]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c7a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7ac:	6413      	str	r3, [r2, #64]	; 0x40
 800c7ae:	4b85      	ldr	r3, [pc, #532]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7b6:	60bb      	str	r3, [r7, #8]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7be:	4b82      	ldr	r3, [pc, #520]	; (800c9c8 <HAL_RCC_OscConfig+0x4d0>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d118      	bne.n	800c7fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c7ca:	4b7f      	ldr	r3, [pc, #508]	; (800c9c8 <HAL_RCC_OscConfig+0x4d0>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a7e      	ldr	r2, [pc, #504]	; (800c9c8 <HAL_RCC_OscConfig+0x4d0>)
 800c7d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7d6:	f7ff f827 	bl	800b828 <HAL_GetTick>
 800c7da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7dc:	e008      	b.n	800c7f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7de:	f7ff f823 	bl	800b828 <HAL_GetTick>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	2b64      	cmp	r3, #100	; 0x64
 800c7ea:	d901      	bls.n	800c7f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	e120      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7f0:	4b75      	ldr	r3, [pc, #468]	; (800c9c8 <HAL_RCC_OscConfig+0x4d0>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0f0      	beq.n	800c7de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d106      	bne.n	800c812 <HAL_RCC_OscConfig+0x31a>
 800c804:	4b6f      	ldr	r3, [pc, #444]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c808:	4a6e      	ldr	r2, [pc, #440]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	6713      	str	r3, [r2, #112]	; 0x70
 800c810:	e02d      	b.n	800c86e <HAL_RCC_OscConfig+0x376>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10c      	bne.n	800c834 <HAL_RCC_OscConfig+0x33c>
 800c81a:	4b6a      	ldr	r3, [pc, #424]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c81e:	4a69      	ldr	r2, [pc, #420]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c820:	f023 0301 	bic.w	r3, r3, #1
 800c824:	6713      	str	r3, [r2, #112]	; 0x70
 800c826:	4b67      	ldr	r3, [pc, #412]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82a:	4a66      	ldr	r2, [pc, #408]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c82c:	f023 0304 	bic.w	r3, r3, #4
 800c830:	6713      	str	r3, [r2, #112]	; 0x70
 800c832:	e01c      	b.n	800c86e <HAL_RCC_OscConfig+0x376>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	2b05      	cmp	r3, #5
 800c83a:	d10c      	bne.n	800c856 <HAL_RCC_OscConfig+0x35e>
 800c83c:	4b61      	ldr	r3, [pc, #388]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c840:	4a60      	ldr	r2, [pc, #384]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c842:	f043 0304 	orr.w	r3, r3, #4
 800c846:	6713      	str	r3, [r2, #112]	; 0x70
 800c848:	4b5e      	ldr	r3, [pc, #376]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84c:	4a5d      	ldr	r2, [pc, #372]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c84e:	f043 0301 	orr.w	r3, r3, #1
 800c852:	6713      	str	r3, [r2, #112]	; 0x70
 800c854:	e00b      	b.n	800c86e <HAL_RCC_OscConfig+0x376>
 800c856:	4b5b      	ldr	r3, [pc, #364]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c85a:	4a5a      	ldr	r2, [pc, #360]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c85c:	f023 0301 	bic.w	r3, r3, #1
 800c860:	6713      	str	r3, [r2, #112]	; 0x70
 800c862:	4b58      	ldr	r3, [pc, #352]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c866:	4a57      	ldr	r2, [pc, #348]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c868:	f023 0304 	bic.w	r3, r3, #4
 800c86c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d015      	beq.n	800c8a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c876:	f7fe ffd7 	bl	800b828 <HAL_GetTick>
 800c87a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c87c:	e00a      	b.n	800c894 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c87e:	f7fe ffd3 	bl	800b828 <HAL_GetTick>
 800c882:	4602      	mov	r2, r0
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	f241 3288 	movw	r2, #5000	; 0x1388
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d901      	bls.n	800c894 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e0ce      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c894:	4b4b      	ldr	r3, [pc, #300]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c898:	f003 0302 	and.w	r3, r3, #2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0ee      	beq.n	800c87e <HAL_RCC_OscConfig+0x386>
 800c8a0:	e014      	b.n	800c8cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8a2:	f7fe ffc1 	bl	800b828 <HAL_GetTick>
 800c8a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8a8:	e00a      	b.n	800c8c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8aa:	f7fe ffbd 	bl	800b828 <HAL_GetTick>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d901      	bls.n	800c8c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e0b8      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8c0:	4b40      	ldr	r3, [pc, #256]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c4:	f003 0302 	and.w	r3, r3, #2
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1ee      	bne.n	800c8aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d105      	bne.n	800c8de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8d2:	4b3c      	ldr	r3, [pc, #240]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d6:	4a3b      	ldr	r2, [pc, #236]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c8d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 80a4 	beq.w	800ca30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8e8:	4b36      	ldr	r3, [pc, #216]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	f003 030c 	and.w	r3, r3, #12
 800c8f0:	2b08      	cmp	r3, #8
 800c8f2:	d06b      	beq.n	800c9cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d149      	bne.n	800c990 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8fc:	4b31      	ldr	r3, [pc, #196]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a30      	ldr	r2, [pc, #192]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c908:	f7fe ff8e 	bl	800b828 <HAL_GetTick>
 800c90c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c90e:	e008      	b.n	800c922 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c910:	f7fe ff8a 	bl	800b828 <HAL_GetTick>
 800c914:	4602      	mov	r2, r0
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d901      	bls.n	800c922 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c91e:	2303      	movs	r3, #3
 800c920:	e087      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c922:	4b28      	ldr	r3, [pc, #160]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1f0      	bne.n	800c910 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	69da      	ldr	r2, [r3, #28]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	431a      	orrs	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93c:	019b      	lsls	r3, r3, #6
 800c93e:	431a      	orrs	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c944:	085b      	lsrs	r3, r3, #1
 800c946:	3b01      	subs	r3, #1
 800c948:	041b      	lsls	r3, r3, #16
 800c94a:	431a      	orrs	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	061b      	lsls	r3, r3, #24
 800c952:	4313      	orrs	r3, r2
 800c954:	4a1b      	ldr	r2, [pc, #108]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c95a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c95c:	4b19      	ldr	r3, [pc, #100]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a18      	ldr	r2, [pc, #96]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c968:	f7fe ff5e 	bl	800b828 <HAL_GetTick>
 800c96c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c96e:	e008      	b.n	800c982 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c970:	f7fe ff5a 	bl	800b828 <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d901      	bls.n	800c982 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c97e:	2303      	movs	r3, #3
 800c980:	e057      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c982:	4b10      	ldr	r3, [pc, #64]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0f0      	beq.n	800c970 <HAL_RCC_OscConfig+0x478>
 800c98e:	e04f      	b.n	800ca30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c990:	4b0c      	ldr	r3, [pc, #48]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a0b      	ldr	r2, [pc, #44]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c99a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c99c:	f7fe ff44 	bl	800b828 <HAL_GetTick>
 800c9a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9a2:	e008      	b.n	800c9b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9a4:	f7fe ff40 	bl	800b828 <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e03d      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9b6:	4b03      	ldr	r3, [pc, #12]	; (800c9c4 <HAL_RCC_OscConfig+0x4cc>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1f0      	bne.n	800c9a4 <HAL_RCC_OscConfig+0x4ac>
 800c9c2:	e035      	b.n	800ca30 <HAL_RCC_OscConfig+0x538>
 800c9c4:	40023800 	.word	0x40023800
 800c9c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ca3c <HAL_RCC_OscConfig+0x544>)
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d028      	beq.n	800ca2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d121      	bne.n	800ca2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d11a      	bne.n	800ca2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d111      	bne.n	800ca2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca12:	085b      	lsrs	r3, r3, #1
 800ca14:	3b01      	subs	r3, #1
 800ca16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d107      	bne.n	800ca2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d001      	beq.n	800ca30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e000      	b.n	800ca32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3718      	adds	r7, #24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	40023800 	.word	0x40023800

0800ca40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d101      	bne.n	800ca58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e0d0      	b.n	800cbfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca58:	4b6a      	ldr	r3, [pc, #424]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 030f 	and.w	r3, r3, #15
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d910      	bls.n	800ca88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca66:	4b67      	ldr	r3, [pc, #412]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f023 020f 	bic.w	r2, r3, #15
 800ca6e:	4965      	ldr	r1, [pc, #404]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca76:	4b63      	ldr	r3, [pc, #396]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 030f 	and.w	r3, r3, #15
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d001      	beq.n	800ca88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	e0b8      	b.n	800cbfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d020      	beq.n	800cad6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d005      	beq.n	800caac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800caa0:	4b59      	ldr	r3, [pc, #356]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	4a58      	ldr	r2, [pc, #352]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800caa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800caaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0308 	and.w	r3, r3, #8
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d005      	beq.n	800cac4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cab8:	4b53      	ldr	r3, [pc, #332]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	4a52      	ldr	r2, [pc, #328]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cabe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cac2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cac4:	4b50      	ldr	r3, [pc, #320]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	494d      	ldr	r1, [pc, #308]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cad2:	4313      	orrs	r3, r2
 800cad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d040      	beq.n	800cb64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d107      	bne.n	800cafa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800caea:	4b47      	ldr	r3, [pc, #284]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d115      	bne.n	800cb22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800caf6:	2301      	movs	r3, #1
 800caf8:	e07f      	b.n	800cbfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d107      	bne.n	800cb12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb02:	4b41      	ldr	r3, [pc, #260]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d109      	bne.n	800cb22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e073      	b.n	800cbfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb12:	4b3d      	ldr	r3, [pc, #244]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 0302 	and.w	r3, r3, #2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e06b      	b.n	800cbfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb22:	4b39      	ldr	r3, [pc, #228]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	f023 0203 	bic.w	r2, r3, #3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	4936      	ldr	r1, [pc, #216]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cb30:	4313      	orrs	r3, r2
 800cb32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb34:	f7fe fe78 	bl	800b828 <HAL_GetTick>
 800cb38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb3a:	e00a      	b.n	800cb52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb3c:	f7fe fe74 	bl	800b828 <HAL_GetTick>
 800cb40:	4602      	mov	r2, r0
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d901      	bls.n	800cb52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	e053      	b.n	800cbfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb52:	4b2d      	ldr	r3, [pc, #180]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f003 020c 	and.w	r2, r3, #12
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d1eb      	bne.n	800cb3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb64:	4b27      	ldr	r3, [pc, #156]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 030f 	and.w	r3, r3, #15
 800cb6c:	683a      	ldr	r2, [r7, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d210      	bcs.n	800cb94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb72:	4b24      	ldr	r3, [pc, #144]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f023 020f 	bic.w	r2, r3, #15
 800cb7a:	4922      	ldr	r1, [pc, #136]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb82:	4b20      	ldr	r3, [pc, #128]	; (800cc04 <HAL_RCC_ClockConfig+0x1c4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f003 030f 	and.w	r3, r3, #15
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d001      	beq.n	800cb94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e032      	b.n	800cbfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0304 	and.w	r3, r3, #4
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d008      	beq.n	800cbb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cba0:	4b19      	ldr	r3, [pc, #100]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	4916      	ldr	r1, [pc, #88]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 0308 	and.w	r3, r3, #8
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d009      	beq.n	800cbd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cbbe:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	00db      	lsls	r3, r3, #3
 800cbcc:	490e      	ldr	r1, [pc, #56]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbd2:	f000 f821 	bl	800cc18 <HAL_RCC_GetSysClockFreq>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	4b0b      	ldr	r3, [pc, #44]	; (800cc08 <HAL_RCC_ClockConfig+0x1c8>)
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	091b      	lsrs	r3, r3, #4
 800cbde:	f003 030f 	and.w	r3, r3, #15
 800cbe2:	490a      	ldr	r1, [pc, #40]	; (800cc0c <HAL_RCC_ClockConfig+0x1cc>)
 800cbe4:	5ccb      	ldrb	r3, [r1, r3]
 800cbe6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbea:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <HAL_RCC_ClockConfig+0x1d0>)
 800cbec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cbee:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <HAL_RCC_ClockConfig+0x1d4>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fe fc60 	bl	800b4b8 <HAL_InitTick>

  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	40023c00 	.word	0x40023c00
 800cc08:	40023800 	.word	0x40023800
 800cc0c:	08014640 	.word	0x08014640
 800cc10:	20000250 	.word	0x20000250
 800cc14:	20000254 	.word	0x20000254

0800cc18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc1c:	b094      	sub	sp, #80	; 0x50
 800cc1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	647b      	str	r3, [r7, #68]	; 0x44
 800cc24:	2300      	movs	r3, #0
 800cc26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc28:	2300      	movs	r3, #0
 800cc2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cc30:	4b79      	ldr	r3, [pc, #484]	; (800ce18 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	f003 030c 	and.w	r3, r3, #12
 800cc38:	2b08      	cmp	r3, #8
 800cc3a:	d00d      	beq.n	800cc58 <HAL_RCC_GetSysClockFreq+0x40>
 800cc3c:	2b08      	cmp	r3, #8
 800cc3e:	f200 80e1 	bhi.w	800ce04 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <HAL_RCC_GetSysClockFreq+0x34>
 800cc46:	2b04      	cmp	r3, #4
 800cc48:	d003      	beq.n	800cc52 <HAL_RCC_GetSysClockFreq+0x3a>
 800cc4a:	e0db      	b.n	800ce04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cc4c:	4b73      	ldr	r3, [pc, #460]	; (800ce1c <HAL_RCC_GetSysClockFreq+0x204>)
 800cc4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cc50:	e0db      	b.n	800ce0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cc52:	4b73      	ldr	r3, [pc, #460]	; (800ce20 <HAL_RCC_GetSysClockFreq+0x208>)
 800cc54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cc56:	e0d8      	b.n	800ce0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cc58:	4b6f      	ldr	r3, [pc, #444]	; (800ce18 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cc62:	4b6d      	ldr	r3, [pc, #436]	; (800ce18 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d063      	beq.n	800cd36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cc6e:	4b6a      	ldr	r3, [pc, #424]	; (800ce18 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	099b      	lsrs	r3, r3, #6
 800cc74:	2200      	movs	r2, #0
 800cc76:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc78:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc80:	633b      	str	r3, [r7, #48]	; 0x30
 800cc82:	2300      	movs	r3, #0
 800cc84:	637b      	str	r3, [r7, #52]	; 0x34
 800cc86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	462b      	mov	r3, r5
 800cc8e:	f04f 0000 	mov.w	r0, #0
 800cc92:	f04f 0100 	mov.w	r1, #0
 800cc96:	0159      	lsls	r1, r3, #5
 800cc98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cc9c:	0150      	lsls	r0, r2, #5
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4621      	mov	r1, r4
 800cca4:	1a51      	subs	r1, r2, r1
 800cca6:	6139      	str	r1, [r7, #16]
 800cca8:	4629      	mov	r1, r5
 800ccaa:	eb63 0301 	sbc.w	r3, r3, r1
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	f04f 0200 	mov.w	r2, #0
 800ccb4:	f04f 0300 	mov.w	r3, #0
 800ccb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ccbc:	4659      	mov	r1, fp
 800ccbe:	018b      	lsls	r3, r1, #6
 800ccc0:	4651      	mov	r1, sl
 800ccc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ccc6:	4651      	mov	r1, sl
 800ccc8:	018a      	lsls	r2, r1, #6
 800ccca:	4651      	mov	r1, sl
 800cccc:	ebb2 0801 	subs.w	r8, r2, r1
 800ccd0:	4659      	mov	r1, fp
 800ccd2:	eb63 0901 	sbc.w	r9, r3, r1
 800ccd6:	f04f 0200 	mov.w	r2, #0
 800ccda:	f04f 0300 	mov.w	r3, #0
 800ccde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ccea:	4690      	mov	r8, r2
 800ccec:	4699      	mov	r9, r3
 800ccee:	4623      	mov	r3, r4
 800ccf0:	eb18 0303 	adds.w	r3, r8, r3
 800ccf4:	60bb      	str	r3, [r7, #8]
 800ccf6:	462b      	mov	r3, r5
 800ccf8:	eb49 0303 	adc.w	r3, r9, r3
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	f04f 0200 	mov.w	r2, #0
 800cd02:	f04f 0300 	mov.w	r3, #0
 800cd06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	024b      	lsls	r3, r1, #9
 800cd0e:	4621      	mov	r1, r4
 800cd10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cd14:	4621      	mov	r1, r4
 800cd16:	024a      	lsls	r2, r1, #9
 800cd18:	4610      	mov	r0, r2
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd1e:	2200      	movs	r2, #0
 800cd20:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd22:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd28:	f7f3 ff58 	bl	8000bdc <__aeabi_uldivmod>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	4613      	mov	r3, r2
 800cd32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd34:	e058      	b.n	800cde8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd36:	4b38      	ldr	r3, [pc, #224]	; (800ce18 <HAL_RCC_GetSysClockFreq+0x200>)
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	099b      	lsrs	r3, r3, #6
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	4618      	mov	r0, r3
 800cd40:	4611      	mov	r1, r2
 800cd42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cd46:	623b      	str	r3, [r7, #32]
 800cd48:	2300      	movs	r3, #0
 800cd4a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cd50:	4642      	mov	r2, r8
 800cd52:	464b      	mov	r3, r9
 800cd54:	f04f 0000 	mov.w	r0, #0
 800cd58:	f04f 0100 	mov.w	r1, #0
 800cd5c:	0159      	lsls	r1, r3, #5
 800cd5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cd62:	0150      	lsls	r0, r2, #5
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4641      	mov	r1, r8
 800cd6a:	ebb2 0a01 	subs.w	sl, r2, r1
 800cd6e:	4649      	mov	r1, r9
 800cd70:	eb63 0b01 	sbc.w	fp, r3, r1
 800cd74:	f04f 0200 	mov.w	r2, #0
 800cd78:	f04f 0300 	mov.w	r3, #0
 800cd7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cd80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cd84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cd88:	ebb2 040a 	subs.w	r4, r2, sl
 800cd8c:	eb63 050b 	sbc.w	r5, r3, fp
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	f04f 0300 	mov.w	r3, #0
 800cd98:	00eb      	lsls	r3, r5, #3
 800cd9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cd9e:	00e2      	lsls	r2, r4, #3
 800cda0:	4614      	mov	r4, r2
 800cda2:	461d      	mov	r5, r3
 800cda4:	4643      	mov	r3, r8
 800cda6:	18e3      	adds	r3, r4, r3
 800cda8:	603b      	str	r3, [r7, #0]
 800cdaa:	464b      	mov	r3, r9
 800cdac:	eb45 0303 	adc.w	r3, r5, r3
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	028b      	lsls	r3, r1, #10
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cdc8:	4621      	mov	r1, r4
 800cdca:	028a      	lsls	r2, r1, #10
 800cdcc:	4610      	mov	r0, r2
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	61bb      	str	r3, [r7, #24]
 800cdd6:	61fa      	str	r2, [r7, #28]
 800cdd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cddc:	f7f3 fefe 	bl	8000bdc <__aeabi_uldivmod>
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	4613      	mov	r3, r2
 800cde6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cde8:	4b0b      	ldr	r3, [pc, #44]	; (800ce18 <HAL_RCC_GetSysClockFreq+0x200>)
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	0c1b      	lsrs	r3, r3, #16
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800cdf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ce02:	e002      	b.n	800ce0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ce04:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <HAL_RCC_GetSysClockFreq+0x204>)
 800ce06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ce08:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3750      	adds	r7, #80	; 0x50
 800ce10:	46bd      	mov	sp, r7
 800ce12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce16:	bf00      	nop
 800ce18:	40023800 	.word	0x40023800
 800ce1c:	00f42400 	.word	0x00f42400
 800ce20:	007a1200 	.word	0x007a1200

0800ce24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce24:	b480      	push	{r7}
 800ce26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce28:	4b03      	ldr	r3, [pc, #12]	; (800ce38 <HAL_RCC_GetHCLKFreq+0x14>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	20000250 	.word	0x20000250

0800ce3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ce40:	f7ff fff0 	bl	800ce24 <HAL_RCC_GetHCLKFreq>
 800ce44:	4602      	mov	r2, r0
 800ce46:	4b05      	ldr	r3, [pc, #20]	; (800ce5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	0a9b      	lsrs	r3, r3, #10
 800ce4c:	f003 0307 	and.w	r3, r3, #7
 800ce50:	4903      	ldr	r1, [pc, #12]	; (800ce60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce52:	5ccb      	ldrb	r3, [r1, r3]
 800ce54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	40023800 	.word	0x40023800
 800ce60:	08014650 	.word	0x08014650

0800ce64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ce68:	f7ff ffdc 	bl	800ce24 <HAL_RCC_GetHCLKFreq>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	4b05      	ldr	r3, [pc, #20]	; (800ce84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	0b5b      	lsrs	r3, r3, #13
 800ce74:	f003 0307 	and.w	r3, r3, #7
 800ce78:	4903      	ldr	r1, [pc, #12]	; (800ce88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce7a:	5ccb      	ldrb	r3, [r1, r3]
 800ce7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	40023800 	.word	0x40023800
 800ce88:	08014650 	.word	0x08014650

0800ce8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	220f      	movs	r2, #15
 800ce9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ce9c:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <HAL_RCC_GetClockConfig+0x5c>)
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	f003 0203 	and.w	r2, r3, #3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cea8:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <HAL_RCC_GetClockConfig+0x5c>)
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ceb4:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <HAL_RCC_GetClockConfig+0x5c>)
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cec0:	4b09      	ldr	r3, [pc, #36]	; (800cee8 <HAL_RCC_GetClockConfig+0x5c>)
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	08db      	lsrs	r3, r3, #3
 800cec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cece:	4b07      	ldr	r3, [pc, #28]	; (800ceec <HAL_RCC_GetClockConfig+0x60>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 020f 	and.w	r2, r3, #15
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	601a      	str	r2, [r3, #0]
}
 800ceda:	bf00      	nop
 800cedc:	370c      	adds	r7, #12
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	40023800 	.word	0x40023800
 800ceec:	40023c00 	.word	0x40023c00

0800cef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f003 0301 	and.w	r3, r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d012      	beq.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cf18:	4b69      	ldr	r3, [pc, #420]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	4a68      	ldr	r2, [pc, #416]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf22:	6093      	str	r3, [r2, #8]
 800cf24:	4b66      	ldr	r3, [pc, #408]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf26:	689a      	ldr	r2, [r3, #8]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2c:	4964      	ldr	r1, [pc, #400]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d017      	beq.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf4a:	4b5d      	ldr	r3, [pc, #372]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf58:	4959      	ldr	r1, [pc, #356]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf68:	d101      	bne.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d101      	bne.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cf76:	2301      	movs	r3, #1
 800cf78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d017      	beq.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cf86:	4b4e      	ldr	r3, [pc, #312]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf94:	494a      	ldr	r1, [pc, #296]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfa4:	d101      	bne.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 0320 	and.w	r3, r3, #32
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 808b 	beq.w	800d0ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cfd4:	4b3a      	ldr	r3, [pc, #232]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd8:	4a39      	ldr	r2, [pc, #228]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfde:	6413      	str	r3, [r2, #64]	; 0x40
 800cfe0:	4b37      	ldr	r3, [pc, #220]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfe8:	60bb      	str	r3, [r7, #8]
 800cfea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cfec:	4b35      	ldr	r3, [pc, #212]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a34      	ldr	r2, [pc, #208]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cff8:	f7fe fc16 	bl	800b828 <HAL_GetTick>
 800cffc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cffe:	e008      	b.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d000:	f7fe fc12 	bl	800b828 <HAL_GetTick>
 800d004:	4602      	mov	r2, r0
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	2b64      	cmp	r3, #100	; 0x64
 800d00c:	d901      	bls.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e357      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d012:	4b2c      	ldr	r3, [pc, #176]	; (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0f0      	beq.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d01e:	4b28      	ldr	r3, [pc, #160]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d026:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d035      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d02e      	beq.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d03c:	4b20      	ldr	r3, [pc, #128]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d044:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d046:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04a:	4a1d      	ldr	r2, [pc, #116]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d04c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d050:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d052:	4b1b      	ldr	r3, [pc, #108]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d056:	4a1a      	ldr	r2, [pc, #104]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d05c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d05e:	4a18      	ldr	r2, [pc, #96]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d064:	4b16      	ldr	r3, [pc, #88]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d114      	bne.n	800d09a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d070:	f7fe fbda 	bl	800b828 <HAL_GetTick>
 800d074:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d076:	e00a      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d078:	f7fe fbd6 	bl	800b828 <HAL_GetTick>
 800d07c:	4602      	mov	r2, r0
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	f241 3288 	movw	r2, #5000	; 0x1388
 800d086:	4293      	cmp	r3, r2
 800d088:	d901      	bls.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d08a:	2303      	movs	r3, #3
 800d08c:	e319      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d08e:	4b0c      	ldr	r3, [pc, #48]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d092:	f003 0302 	and.w	r3, r3, #2
 800d096:	2b00      	cmp	r3, #0
 800d098:	d0ee      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0a6:	d111      	bne.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d0a8:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d0b4:	4b04      	ldr	r3, [pc, #16]	; (800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d0b6:	400b      	ands	r3, r1
 800d0b8:	4901      	ldr	r1, [pc, #4]	; (800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	608b      	str	r3, [r1, #8]
 800d0be:	e00b      	b.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d0c0:	40023800 	.word	0x40023800
 800d0c4:	40007000 	.word	0x40007000
 800d0c8:	0ffffcff 	.word	0x0ffffcff
 800d0cc:	4baa      	ldr	r3, [pc, #680]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	4aa9      	ldr	r2, [pc, #676]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d0d6:	6093      	str	r3, [r2, #8]
 800d0d8:	4ba7      	ldr	r3, [pc, #668]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0e4:	49a4      	ldr	r1, [pc, #656]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f003 0310 	and.w	r3, r3, #16
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d010      	beq.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d0f6:	4ba0      	ldr	r3, [pc, #640]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0fc:	4a9e      	ldr	r2, [pc, #632]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d102:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d106:	4b9c      	ldr	r3, [pc, #624]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d108:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d110:	4999      	ldr	r1, [pc, #612]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d112:	4313      	orrs	r3, r2
 800d114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00a      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d124:	4b94      	ldr	r3, [pc, #592]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d12a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d132:	4991      	ldr	r1, [pc, #580]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d134:	4313      	orrs	r3, r2
 800d136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00a      	beq.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d146:	4b8c      	ldr	r3, [pc, #560]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d14c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d154:	4988      	ldr	r1, [pc, #544]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d156:	4313      	orrs	r3, r2
 800d158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00a      	beq.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d168:	4b83      	ldr	r3, [pc, #524]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d16e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d176:	4980      	ldr	r1, [pc, #512]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d178:	4313      	orrs	r3, r2
 800d17a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00a      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d18a:	4b7b      	ldr	r3, [pc, #492]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d190:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d198:	4977      	ldr	r1, [pc, #476]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d19a:	4313      	orrs	r3, r2
 800d19c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00a      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d1ac:	4b72      	ldr	r3, [pc, #456]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1b2:	f023 0203 	bic.w	r2, r3, #3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ba:	496f      	ldr	r1, [pc, #444]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00a      	beq.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d1ce:	4b6a      	ldr	r3, [pc, #424]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1d4:	f023 020c 	bic.w	r2, r3, #12
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1dc:	4966      	ldr	r1, [pc, #408]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00a      	beq.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d1f0:	4b61      	ldr	r3, [pc, #388]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1fe:	495e      	ldr	r1, [pc, #376]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d200:	4313      	orrs	r3, r2
 800d202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00a      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d212:	4b59      	ldr	r3, [pc, #356]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d218:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d220:	4955      	ldr	r1, [pc, #340]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d222:	4313      	orrs	r3, r2
 800d224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00a      	beq.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d234:	4b50      	ldr	r3, [pc, #320]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d23a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d242:	494d      	ldr	r1, [pc, #308]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d244:	4313      	orrs	r3, r2
 800d246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00a      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d256:	4b48      	ldr	r3, [pc, #288]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d25c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d264:	4944      	ldr	r1, [pc, #272]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d266:	4313      	orrs	r3, r2
 800d268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00a      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d278:	4b3f      	ldr	r3, [pc, #252]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d286:	493c      	ldr	r1, [pc, #240]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d288:	4313      	orrs	r3, r2
 800d28a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00a      	beq.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d29a:	4b37      	ldr	r3, [pc, #220]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2a8:	4933      	ldr	r1, [pc, #204]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00a      	beq.n	800d2d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d2bc:	4b2e      	ldr	r3, [pc, #184]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ca:	492b      	ldr	r1, [pc, #172]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d011      	beq.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d2de:	4b26      	ldr	r3, [pc, #152]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ec:	4922      	ldr	r1, [pc, #136]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2fc:	d101      	bne.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d2fe:	2301      	movs	r3, #1
 800d300:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 0308 	and.w	r3, r3, #8
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d30e:	2301      	movs	r3, #1
 800d310:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00a      	beq.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d31e:	4b16      	ldr	r3, [pc, #88]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d324:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d32c:	4912      	ldr	r1, [pc, #72]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d32e:	4313      	orrs	r3, r2
 800d330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00b      	beq.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d340:	4b0d      	ldr	r3, [pc, #52]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d346:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d350:	4909      	ldr	r1, [pc, #36]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d352:	4313      	orrs	r3, r2
 800d354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d006      	beq.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d366:	2b00      	cmp	r3, #0
 800d368:	f000 80d9 	beq.w	800d51e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d36c:	4b02      	ldr	r3, [pc, #8]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a01      	ldr	r2, [pc, #4]	; (800d378 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d376:	e001      	b.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d378:	40023800 	.word	0x40023800
 800d37c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d37e:	f7fe fa53 	bl	800b828 <HAL_GetTick>
 800d382:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d384:	e008      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d386:	f7fe fa4f 	bl	800b828 <HAL_GetTick>
 800d38a:	4602      	mov	r2, r0
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	2b64      	cmp	r3, #100	; 0x64
 800d392:	d901      	bls.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d394:	2303      	movs	r3, #3
 800d396:	e194      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d398:	4b6c      	ldr	r3, [pc, #432]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1f0      	bne.n	800d386 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d021      	beq.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d11d      	bne.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d3b8:	4b64      	ldr	r3, [pc, #400]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d3ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3be:	0c1b      	lsrs	r3, r3, #16
 800d3c0:	f003 0303 	and.w	r3, r3, #3
 800d3c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d3c6:	4b61      	ldr	r3, [pc, #388]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3cc:	0e1b      	lsrs	r3, r3, #24
 800d3ce:	f003 030f 	and.w	r3, r3, #15
 800d3d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	019a      	lsls	r2, r3, #6
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	041b      	lsls	r3, r3, #16
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	061b      	lsls	r3, r3, #24
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	071b      	lsls	r3, r3, #28
 800d3ec:	4957      	ldr	r1, [pc, #348]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d004      	beq.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d408:	d00a      	beq.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d412:	2b00      	cmp	r3, #0
 800d414:	d02e      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d41e:	d129      	bne.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d420:	4b4a      	ldr	r3, [pc, #296]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d426:	0c1b      	lsrs	r3, r3, #16
 800d428:	f003 0303 	and.w	r3, r3, #3
 800d42c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d42e:	4b47      	ldr	r3, [pc, #284]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d434:	0f1b      	lsrs	r3, r3, #28
 800d436:	f003 0307 	and.w	r3, r3, #7
 800d43a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	019a      	lsls	r2, r3, #6
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	041b      	lsls	r3, r3, #16
 800d446:	431a      	orrs	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	061b      	lsls	r3, r3, #24
 800d44e:	431a      	orrs	r2, r3
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	071b      	lsls	r3, r3, #28
 800d454:	493d      	ldr	r1, [pc, #244]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d456:	4313      	orrs	r3, r2
 800d458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d45c:	4b3b      	ldr	r3, [pc, #236]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d462:	f023 021f 	bic.w	r2, r3, #31
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46a:	3b01      	subs	r3, #1
 800d46c:	4937      	ldr	r1, [pc, #220]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d46e:	4313      	orrs	r3, r2
 800d470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d01d      	beq.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d480:	4b32      	ldr	r3, [pc, #200]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d486:	0e1b      	lsrs	r3, r3, #24
 800d488:	f003 030f 	and.w	r3, r3, #15
 800d48c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d48e:	4b2f      	ldr	r3, [pc, #188]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d494:	0f1b      	lsrs	r3, r3, #28
 800d496:	f003 0307 	and.w	r3, r3, #7
 800d49a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	019a      	lsls	r2, r3, #6
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	041b      	lsls	r3, r3, #16
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	061b      	lsls	r3, r3, #24
 800d4ae:	431a      	orrs	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	071b      	lsls	r3, r3, #28
 800d4b4:	4925      	ldr	r1, [pc, #148]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d011      	beq.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	019a      	lsls	r2, r3, #6
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	041b      	lsls	r3, r3, #16
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	061b      	lsls	r3, r3, #24
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	071b      	lsls	r3, r3, #28
 800d4e4:	4919      	ldr	r1, [pc, #100]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d4ec:	4b17      	ldr	r3, [pc, #92]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a16      	ldr	r2, [pc, #88]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d4f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d4f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4f8:	f7fe f996 	bl	800b828 <HAL_GetTick>
 800d4fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d4fe:	e008      	b.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d500:	f7fe f992 	bl	800b828 <HAL_GetTick>
 800d504:	4602      	mov	r2, r0
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	2b64      	cmp	r3, #100	; 0x64
 800d50c:	d901      	bls.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d50e:	2303      	movs	r3, #3
 800d510:	e0d7      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d512:	4b0e      	ldr	r3, [pc, #56]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d0f0      	beq.n	800d500 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	2b01      	cmp	r3, #1
 800d522:	f040 80cd 	bne.w	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d526:	4b09      	ldr	r3, [pc, #36]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a08      	ldr	r2, [pc, #32]	; (800d54c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d52c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d532:	f7fe f979 	bl	800b828 <HAL_GetTick>
 800d536:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d538:	e00a      	b.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d53a:	f7fe f975 	bl	800b828 <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	2b64      	cmp	r3, #100	; 0x64
 800d546:	d903      	bls.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d548:	2303      	movs	r3, #3
 800d54a:	e0ba      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d54c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d550:	4b5e      	ldr	r3, [pc, #376]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d55c:	d0ed      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d003      	beq.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d02e      	beq.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d582:	2b00      	cmp	r3, #0
 800d584:	d12a      	bne.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d586:	4b51      	ldr	r3, [pc, #324]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d58c:	0c1b      	lsrs	r3, r3, #16
 800d58e:	f003 0303 	and.w	r3, r3, #3
 800d592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d594:	4b4d      	ldr	r3, [pc, #308]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d59a:	0f1b      	lsrs	r3, r3, #28
 800d59c:	f003 0307 	and.w	r3, r3, #7
 800d5a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	019a      	lsls	r2, r3, #6
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	041b      	lsls	r3, r3, #16
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	061b      	lsls	r3, r3, #24
 800d5b4:	431a      	orrs	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	071b      	lsls	r3, r3, #28
 800d5ba:	4944      	ldr	r1, [pc, #272]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d5c2:	4b42      	ldr	r3, [pc, #264]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d5c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	021b      	lsls	r3, r3, #8
 800d5d4:	493d      	ldr	r1, [pc, #244]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d022      	beq.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5f0:	d11d      	bne.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d5f2:	4b36      	ldr	r3, [pc, #216]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5f8:	0e1b      	lsrs	r3, r3, #24
 800d5fa:	f003 030f 	and.w	r3, r3, #15
 800d5fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d600:	4b32      	ldr	r3, [pc, #200]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d606:	0f1b      	lsrs	r3, r3, #28
 800d608:	f003 0307 	and.w	r3, r3, #7
 800d60c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	019a      	lsls	r2, r3, #6
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	041b      	lsls	r3, r3, #16
 800d61a:	431a      	orrs	r2, r3
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	061b      	lsls	r3, r3, #24
 800d620:	431a      	orrs	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	071b      	lsls	r3, r3, #28
 800d626:	4929      	ldr	r1, [pc, #164]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d628:	4313      	orrs	r3, r2
 800d62a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f003 0308 	and.w	r3, r3, #8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d028      	beq.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d63a:	4b24      	ldr	r3, [pc, #144]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d640:	0e1b      	lsrs	r3, r3, #24
 800d642:	f003 030f 	and.w	r3, r3, #15
 800d646:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d648:	4b20      	ldr	r3, [pc, #128]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d64e:	0c1b      	lsrs	r3, r3, #16
 800d650:	f003 0303 	and.w	r3, r3, #3
 800d654:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	019a      	lsls	r2, r3, #6
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	041b      	lsls	r3, r3, #16
 800d660:	431a      	orrs	r2, r3
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	061b      	lsls	r3, r3, #24
 800d666:	431a      	orrs	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	69db      	ldr	r3, [r3, #28]
 800d66c:	071b      	lsls	r3, r3, #28
 800d66e:	4917      	ldr	r1, [pc, #92]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d670:	4313      	orrs	r3, r2
 800d672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d676:	4b15      	ldr	r3, [pc, #84]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d67c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d684:	4911      	ldr	r1, [pc, #68]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d686:	4313      	orrs	r3, r2
 800d688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d68c:	4b0f      	ldr	r3, [pc, #60]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a0e      	ldr	r2, [pc, #56]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d698:	f7fe f8c6 	bl	800b828 <HAL_GetTick>
 800d69c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d69e:	e008      	b.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d6a0:	f7fe f8c2 	bl	800b828 <HAL_GetTick>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	2b64      	cmp	r3, #100	; 0x64
 800d6ac:	d901      	bls.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e007      	b.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d6b2:	4b06      	ldr	r3, [pc, #24]	; (800d6cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6be:	d1ef      	bne.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	40023800 	.word	0x40023800

0800d6d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e01c      	b.n	800d71c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	795b      	ldrb	r3, [r3, #5]
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d105      	bne.n	800d6f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fd fe4c 	bl	800b390 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f042 0204 	orr.w	r2, r2, #4
 800d70c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	791b      	ldrb	r3, [r3, #4]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d101      	bne.n	800d73e <HAL_RNG_GenerateRandomNumber+0x1a>
 800d73a:	2302      	movs	r3, #2
 800d73c:	e044      	b.n	800d7c8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2201      	movs	r2, #1
 800d742:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	795b      	ldrb	r3, [r3, #5]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d133      	bne.n	800d7b6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2202      	movs	r2, #2
 800d752:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d754:	f7fe f868 	bl	800b828 <HAL_GetTick>
 800d758:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d75a:	e018      	b.n	800d78e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d75c:	f7fe f864 	bl	800b828 <HAL_GetTick>
 800d760:	4602      	mov	r2, r0
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	2b02      	cmp	r3, #2
 800d768:	d911      	bls.n	800d78e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	f003 0301 	and.w	r3, r3, #1
 800d774:	2b01      	cmp	r3, #1
 800d776:	d00a      	beq.n	800d78e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2202      	movs	r2, #2
 800d782:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e01c      	b.n	800d7c8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d1df      	bne.n	800d75c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	689a      	ldr	r2, [r3, #8]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68da      	ldr	r2, [r3, #12]
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	715a      	strb	r2, [r3, #5]
 800d7b4:	e004      	b.n	800d7c0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2204      	movs	r2, #4
 800d7ba:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	711a      	strb	r2, [r3, #4]

  return status;
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d101      	bne.n	800d7e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e049      	b.n	800d876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d106      	bne.n	800d7fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f841 	bl	800d87e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2202      	movs	r2, #2
 800d800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	3304      	adds	r3, #4
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f000 fa00 	bl	800dc14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d87e:	b480      	push	{r7}
 800d880:	b083      	sub	sp, #12
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d886:	bf00      	nop
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
	...

0800d894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d001      	beq.n	800d8ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e054      	b.n	800d956 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68da      	ldr	r2, [r3, #12]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f042 0201 	orr.w	r2, r2, #1
 800d8c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a26      	ldr	r2, [pc, #152]	; (800d964 <HAL_TIM_Base_Start_IT+0xd0>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d022      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x80>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8d6:	d01d      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x80>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a22      	ldr	r2, [pc, #136]	; (800d968 <HAL_TIM_Base_Start_IT+0xd4>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d018      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x80>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a21      	ldr	r2, [pc, #132]	; (800d96c <HAL_TIM_Base_Start_IT+0xd8>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d013      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x80>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a1f      	ldr	r2, [pc, #124]	; (800d970 <HAL_TIM_Base_Start_IT+0xdc>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d00e      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x80>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a1e      	ldr	r2, [pc, #120]	; (800d974 <HAL_TIM_Base_Start_IT+0xe0>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d009      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x80>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a1c      	ldr	r2, [pc, #112]	; (800d978 <HAL_TIM_Base_Start_IT+0xe4>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d004      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0x80>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a1b      	ldr	r2, [pc, #108]	; (800d97c <HAL_TIM_Base_Start_IT+0xe8>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d115      	bne.n	800d940 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689a      	ldr	r2, [r3, #8]
 800d91a:	4b19      	ldr	r3, [pc, #100]	; (800d980 <HAL_TIM_Base_Start_IT+0xec>)
 800d91c:	4013      	ands	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b06      	cmp	r3, #6
 800d924:	d015      	beq.n	800d952 <HAL_TIM_Base_Start_IT+0xbe>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d92c:	d011      	beq.n	800d952 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f042 0201 	orr.w	r2, r2, #1
 800d93c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d93e:	e008      	b.n	800d952 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f042 0201 	orr.w	r2, r2, #1
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	e000      	b.n	800d954 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	40010000 	.word	0x40010000
 800d968:	40000400 	.word	0x40000400
 800d96c:	40000800 	.word	0x40000800
 800d970:	40000c00 	.word	0x40000c00
 800d974:	40010400 	.word	0x40010400
 800d978:	40014000 	.word	0x40014000
 800d97c:	40001800 	.word	0x40001800
 800d980:	00010007 	.word	0x00010007

0800d984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	f003 0302 	and.w	r3, r3, #2
 800d996:	2b02      	cmp	r3, #2
 800d998:	d122      	bne.n	800d9e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	f003 0302 	and.w	r3, r3, #2
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d11b      	bne.n	800d9e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f06f 0202 	mvn.w	r2, #2
 800d9b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	f003 0303 	and.w	r3, r3, #3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d003      	beq.n	800d9ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f905 	bl	800dbd6 <HAL_TIM_IC_CaptureCallback>
 800d9cc:	e005      	b.n	800d9da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f8f7 	bl	800dbc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f908 	bl	800dbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	f003 0304 	and.w	r3, r3, #4
 800d9ea:	2b04      	cmp	r3, #4
 800d9ec:	d122      	bne.n	800da34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f003 0304 	and.w	r3, r3, #4
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	d11b      	bne.n	800da34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f06f 0204 	mvn.w	r2, #4
 800da04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2202      	movs	r2, #2
 800da0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f8db 	bl	800dbd6 <HAL_TIM_IC_CaptureCallback>
 800da20:	e005      	b.n	800da2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f8cd 	bl	800dbc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f8de 	bl	800dbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	f003 0308 	and.w	r3, r3, #8
 800da3e:	2b08      	cmp	r3, #8
 800da40:	d122      	bne.n	800da88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	f003 0308 	and.w	r3, r3, #8
 800da4c:	2b08      	cmp	r3, #8
 800da4e:	d11b      	bne.n	800da88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f06f 0208 	mvn.w	r2, #8
 800da58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2204      	movs	r2, #4
 800da5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	f003 0303 	and.w	r3, r3, #3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f8b1 	bl	800dbd6 <HAL_TIM_IC_CaptureCallback>
 800da74:	e005      	b.n	800da82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f8a3 	bl	800dbc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f8b4 	bl	800dbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	f003 0310 	and.w	r3, r3, #16
 800da92:	2b10      	cmp	r3, #16
 800da94:	d122      	bne.n	800dadc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	f003 0310 	and.w	r3, r3, #16
 800daa0:	2b10      	cmp	r3, #16
 800daa2:	d11b      	bne.n	800dadc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f06f 0210 	mvn.w	r2, #16
 800daac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2208      	movs	r2, #8
 800dab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f887 	bl	800dbd6 <HAL_TIM_IC_CaptureCallback>
 800dac8:	e005      	b.n	800dad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 f879 	bl	800dbc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 f88a 	bl	800dbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	f003 0301 	and.w	r3, r3, #1
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d10e      	bne.n	800db08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d107      	bne.n	800db08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f06f 0201 	mvn.w	r2, #1
 800db00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7f3 fbd6 	bl	80012b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db12:	2b80      	cmp	r3, #128	; 0x80
 800db14:	d10e      	bne.n	800db34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db20:	2b80      	cmp	r3, #128	; 0x80
 800db22:	d107      	bne.n	800db34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f91a 	bl	800dd68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db42:	d10e      	bne.n	800db62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db4e:	2b80      	cmp	r3, #128	; 0x80
 800db50:	d107      	bne.n	800db62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800db5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 f90d 	bl	800dd7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db6c:	2b40      	cmp	r3, #64	; 0x40
 800db6e:	d10e      	bne.n	800db8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db7a:	2b40      	cmp	r3, #64	; 0x40
 800db7c:	d107      	bne.n	800db8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f838 	bl	800dbfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	f003 0320 	and.w	r3, r3, #32
 800db98:	2b20      	cmp	r3, #32
 800db9a:	d10e      	bne.n	800dbba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b20      	cmp	r3, #32
 800dba8:	d107      	bne.n	800dbba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f06f 0220 	mvn.w	r2, #32
 800dbb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f8cd 	bl	800dd54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dbba:	bf00      	nop
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbc2:	b480      	push	{r7}
 800dbc4:	b083      	sub	sp, #12
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbca:	bf00      	nop
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dbde:	bf00      	nop
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
	...

0800dc14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a40      	ldr	r2, [pc, #256]	; (800dd28 <TIM_Base_SetConfig+0x114>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d013      	beq.n	800dc54 <TIM_Base_SetConfig+0x40>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc32:	d00f      	beq.n	800dc54 <TIM_Base_SetConfig+0x40>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4a3d      	ldr	r2, [pc, #244]	; (800dd2c <TIM_Base_SetConfig+0x118>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d00b      	beq.n	800dc54 <TIM_Base_SetConfig+0x40>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4a3c      	ldr	r2, [pc, #240]	; (800dd30 <TIM_Base_SetConfig+0x11c>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d007      	beq.n	800dc54 <TIM_Base_SetConfig+0x40>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4a3b      	ldr	r2, [pc, #236]	; (800dd34 <TIM_Base_SetConfig+0x120>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d003      	beq.n	800dc54 <TIM_Base_SetConfig+0x40>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a3a      	ldr	r2, [pc, #232]	; (800dd38 <TIM_Base_SetConfig+0x124>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d108      	bne.n	800dc66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	4a2f      	ldr	r2, [pc, #188]	; (800dd28 <TIM_Base_SetConfig+0x114>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d02b      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc74:	d027      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4a2c      	ldr	r2, [pc, #176]	; (800dd2c <TIM_Base_SetConfig+0x118>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d023      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4a2b      	ldr	r2, [pc, #172]	; (800dd30 <TIM_Base_SetConfig+0x11c>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d01f      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a2a      	ldr	r2, [pc, #168]	; (800dd34 <TIM_Base_SetConfig+0x120>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d01b      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a29      	ldr	r2, [pc, #164]	; (800dd38 <TIM_Base_SetConfig+0x124>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d017      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a28      	ldr	r2, [pc, #160]	; (800dd3c <TIM_Base_SetConfig+0x128>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d013      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a27      	ldr	r2, [pc, #156]	; (800dd40 <TIM_Base_SetConfig+0x12c>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d00f      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a26      	ldr	r2, [pc, #152]	; (800dd44 <TIM_Base_SetConfig+0x130>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d00b      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a25      	ldr	r2, [pc, #148]	; (800dd48 <TIM_Base_SetConfig+0x134>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d007      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a24      	ldr	r2, [pc, #144]	; (800dd4c <TIM_Base_SetConfig+0x138>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d003      	beq.n	800dcc6 <TIM_Base_SetConfig+0xb2>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a23      	ldr	r2, [pc, #140]	; (800dd50 <TIM_Base_SetConfig+0x13c>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d108      	bne.n	800dcd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	4313      	orrs	r3, r2
 800dce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	689a      	ldr	r2, [r3, #8]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a0a      	ldr	r2, [pc, #40]	; (800dd28 <TIM_Base_SetConfig+0x114>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d003      	beq.n	800dd0c <TIM_Base_SetConfig+0xf8>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4a0c      	ldr	r2, [pc, #48]	; (800dd38 <TIM_Base_SetConfig+0x124>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d103      	bne.n	800dd14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	691a      	ldr	r2, [r3, #16]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	615a      	str	r2, [r3, #20]
}
 800dd1a:	bf00      	nop
 800dd1c:	3714      	adds	r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	40010000 	.word	0x40010000
 800dd2c:	40000400 	.word	0x40000400
 800dd30:	40000800 	.word	0x40000800
 800dd34:	40000c00 	.word	0x40000c00
 800dd38:	40010400 	.word	0x40010400
 800dd3c:	40014000 	.word	0x40014000
 800dd40:	40014400 	.word	0x40014400
 800dd44:	40014800 	.word	0x40014800
 800dd48:	40001800 	.word	0x40001800
 800dd4c:	40001c00 	.word	0x40001c00
 800dd50:	40002000 	.word	0x40002000

0800dd54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd5c:	bf00      	nop
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd70:	bf00      	nop
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e040      	b.n	800de24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d106      	bne.n	800ddb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7fd fb20 	bl	800b3f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2224      	movs	r2, #36	; 0x24
 800ddbc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f022 0201 	bic.w	r2, r2, #1
 800ddcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 f8b0 	bl	800df34 <UART_SetConfig>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d101      	bne.n	800ddde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	e022      	b.n	800de24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d002      	beq.n	800ddec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fb08 	bl	800e3fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	689a      	ldr	r2, [r3, #8]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f042 0201 	orr.w	r2, r2, #1
 800de1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fb8f 	bl	800e540 <UART_CheckIdleState>
 800de22:	4603      	mov	r3, r0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3708      	adds	r7, #8
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b08a      	sub	sp, #40	; 0x28
 800de30:	af02      	add	r7, sp, #8
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	4613      	mov	r3, r2
 800de3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de40:	2b20      	cmp	r3, #32
 800de42:	d171      	bne.n	800df28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d002      	beq.n	800de50 <HAL_UART_Transmit+0x24>
 800de4a:	88fb      	ldrh	r3, [r7, #6]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800de50:	2301      	movs	r3, #1
 800de52:	e06a      	b.n	800df2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2221      	movs	r2, #33	; 0x21
 800de60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de62:	f7fd fce1 	bl	800b828 <HAL_GetTick>
 800de66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	88fa      	ldrh	r2, [r7, #6]
 800de6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	88fa      	ldrh	r2, [r7, #6]
 800de74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de80:	d108      	bne.n	800de94 <HAL_UART_Transmit+0x68>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d104      	bne.n	800de94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800de8a:	2300      	movs	r3, #0
 800de8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	61bb      	str	r3, [r7, #24]
 800de92:	e003      	b.n	800de9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de98:	2300      	movs	r3, #0
 800de9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de9c:	e02c      	b.n	800def8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2200      	movs	r2, #0
 800dea6:	2180      	movs	r1, #128	; 0x80
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 fb80 	bl	800e5ae <UART_WaitOnFlagUntilTimeout>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d001      	beq.n	800deb8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800deb4:	2303      	movs	r3, #3
 800deb6:	e038      	b.n	800df2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10b      	bne.n	800ded6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	461a      	mov	r2, r3
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800decc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	3302      	adds	r3, #2
 800ded2:	61bb      	str	r3, [r7, #24]
 800ded4:	e007      	b.n	800dee6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	781a      	ldrb	r2, [r3, #0]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	3301      	adds	r3, #1
 800dee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800deec:	b29b      	uxth	r3, r3
 800deee:	3b01      	subs	r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800defe:	b29b      	uxth	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1cc      	bne.n	800de9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	2200      	movs	r2, #0
 800df0c:	2140      	movs	r1, #64	; 0x40
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f000 fb4d 	bl	800e5ae <UART_WaitOnFlagUntilTimeout>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800df1a:	2303      	movs	r3, #3
 800df1c:	e005      	b.n	800df2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2220      	movs	r2, #32
 800df22:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800df24:	2300      	movs	r3, #0
 800df26:	e000      	b.n	800df2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800df28:	2302      	movs	r3, #2
  }
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3720      	adds	r7, #32
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
	...

0800df34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	689a      	ldr	r2, [r3, #8]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	431a      	orrs	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	431a      	orrs	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	69db      	ldr	r3, [r3, #28]
 800df54:	4313      	orrs	r3, r2
 800df56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	4ba6      	ldr	r3, [pc, #664]	; (800e1f8 <UART_SetConfig+0x2c4>)
 800df60:	4013      	ands	r3, r2
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6812      	ldr	r2, [r2, #0]
 800df66:	6979      	ldr	r1, [r7, #20]
 800df68:	430b      	orrs	r3, r1
 800df6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68da      	ldr	r2, [r3, #12]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	430a      	orrs	r2, r1
 800df80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	699b      	ldr	r3, [r3, #24]
 800df86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a1b      	ldr	r3, [r3, #32]
 800df8c:	697a      	ldr	r2, [r7, #20]
 800df8e:	4313      	orrs	r3, r2
 800df90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	697a      	ldr	r2, [r7, #20]
 800dfa2:	430a      	orrs	r2, r1
 800dfa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a94      	ldr	r2, [pc, #592]	; (800e1fc <UART_SetConfig+0x2c8>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d120      	bne.n	800dff2 <UART_SetConfig+0xbe>
 800dfb0:	4b93      	ldr	r3, [pc, #588]	; (800e200 <UART_SetConfig+0x2cc>)
 800dfb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfb6:	f003 0303 	and.w	r3, r3, #3
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d816      	bhi.n	800dfec <UART_SetConfig+0xb8>
 800dfbe:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <UART_SetConfig+0x90>)
 800dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc4:	0800dfd5 	.word	0x0800dfd5
 800dfc8:	0800dfe1 	.word	0x0800dfe1
 800dfcc:	0800dfdb 	.word	0x0800dfdb
 800dfd0:	0800dfe7 	.word	0x0800dfe7
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	77fb      	strb	r3, [r7, #31]
 800dfd8:	e150      	b.n	800e27c <UART_SetConfig+0x348>
 800dfda:	2302      	movs	r3, #2
 800dfdc:	77fb      	strb	r3, [r7, #31]
 800dfde:	e14d      	b.n	800e27c <UART_SetConfig+0x348>
 800dfe0:	2304      	movs	r3, #4
 800dfe2:	77fb      	strb	r3, [r7, #31]
 800dfe4:	e14a      	b.n	800e27c <UART_SetConfig+0x348>
 800dfe6:	2308      	movs	r3, #8
 800dfe8:	77fb      	strb	r3, [r7, #31]
 800dfea:	e147      	b.n	800e27c <UART_SetConfig+0x348>
 800dfec:	2310      	movs	r3, #16
 800dfee:	77fb      	strb	r3, [r7, #31]
 800dff0:	e144      	b.n	800e27c <UART_SetConfig+0x348>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a83      	ldr	r2, [pc, #524]	; (800e204 <UART_SetConfig+0x2d0>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d132      	bne.n	800e062 <UART_SetConfig+0x12e>
 800dffc:	4b80      	ldr	r3, [pc, #512]	; (800e200 <UART_SetConfig+0x2cc>)
 800dffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e002:	f003 030c 	and.w	r3, r3, #12
 800e006:	2b0c      	cmp	r3, #12
 800e008:	d828      	bhi.n	800e05c <UART_SetConfig+0x128>
 800e00a:	a201      	add	r2, pc, #4	; (adr r2, 800e010 <UART_SetConfig+0xdc>)
 800e00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e010:	0800e045 	.word	0x0800e045
 800e014:	0800e05d 	.word	0x0800e05d
 800e018:	0800e05d 	.word	0x0800e05d
 800e01c:	0800e05d 	.word	0x0800e05d
 800e020:	0800e051 	.word	0x0800e051
 800e024:	0800e05d 	.word	0x0800e05d
 800e028:	0800e05d 	.word	0x0800e05d
 800e02c:	0800e05d 	.word	0x0800e05d
 800e030:	0800e04b 	.word	0x0800e04b
 800e034:	0800e05d 	.word	0x0800e05d
 800e038:	0800e05d 	.word	0x0800e05d
 800e03c:	0800e05d 	.word	0x0800e05d
 800e040:	0800e057 	.word	0x0800e057
 800e044:	2300      	movs	r3, #0
 800e046:	77fb      	strb	r3, [r7, #31]
 800e048:	e118      	b.n	800e27c <UART_SetConfig+0x348>
 800e04a:	2302      	movs	r3, #2
 800e04c:	77fb      	strb	r3, [r7, #31]
 800e04e:	e115      	b.n	800e27c <UART_SetConfig+0x348>
 800e050:	2304      	movs	r3, #4
 800e052:	77fb      	strb	r3, [r7, #31]
 800e054:	e112      	b.n	800e27c <UART_SetConfig+0x348>
 800e056:	2308      	movs	r3, #8
 800e058:	77fb      	strb	r3, [r7, #31]
 800e05a:	e10f      	b.n	800e27c <UART_SetConfig+0x348>
 800e05c:	2310      	movs	r3, #16
 800e05e:	77fb      	strb	r3, [r7, #31]
 800e060:	e10c      	b.n	800e27c <UART_SetConfig+0x348>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a68      	ldr	r2, [pc, #416]	; (800e208 <UART_SetConfig+0x2d4>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d120      	bne.n	800e0ae <UART_SetConfig+0x17a>
 800e06c:	4b64      	ldr	r3, [pc, #400]	; (800e200 <UART_SetConfig+0x2cc>)
 800e06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e072:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e076:	2b30      	cmp	r3, #48	; 0x30
 800e078:	d013      	beq.n	800e0a2 <UART_SetConfig+0x16e>
 800e07a:	2b30      	cmp	r3, #48	; 0x30
 800e07c:	d814      	bhi.n	800e0a8 <UART_SetConfig+0x174>
 800e07e:	2b20      	cmp	r3, #32
 800e080:	d009      	beq.n	800e096 <UART_SetConfig+0x162>
 800e082:	2b20      	cmp	r3, #32
 800e084:	d810      	bhi.n	800e0a8 <UART_SetConfig+0x174>
 800e086:	2b00      	cmp	r3, #0
 800e088:	d002      	beq.n	800e090 <UART_SetConfig+0x15c>
 800e08a:	2b10      	cmp	r3, #16
 800e08c:	d006      	beq.n	800e09c <UART_SetConfig+0x168>
 800e08e:	e00b      	b.n	800e0a8 <UART_SetConfig+0x174>
 800e090:	2300      	movs	r3, #0
 800e092:	77fb      	strb	r3, [r7, #31]
 800e094:	e0f2      	b.n	800e27c <UART_SetConfig+0x348>
 800e096:	2302      	movs	r3, #2
 800e098:	77fb      	strb	r3, [r7, #31]
 800e09a:	e0ef      	b.n	800e27c <UART_SetConfig+0x348>
 800e09c:	2304      	movs	r3, #4
 800e09e:	77fb      	strb	r3, [r7, #31]
 800e0a0:	e0ec      	b.n	800e27c <UART_SetConfig+0x348>
 800e0a2:	2308      	movs	r3, #8
 800e0a4:	77fb      	strb	r3, [r7, #31]
 800e0a6:	e0e9      	b.n	800e27c <UART_SetConfig+0x348>
 800e0a8:	2310      	movs	r3, #16
 800e0aa:	77fb      	strb	r3, [r7, #31]
 800e0ac:	e0e6      	b.n	800e27c <UART_SetConfig+0x348>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a56      	ldr	r2, [pc, #344]	; (800e20c <UART_SetConfig+0x2d8>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d120      	bne.n	800e0fa <UART_SetConfig+0x1c6>
 800e0b8:	4b51      	ldr	r3, [pc, #324]	; (800e200 <UART_SetConfig+0x2cc>)
 800e0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e0c2:	2bc0      	cmp	r3, #192	; 0xc0
 800e0c4:	d013      	beq.n	800e0ee <UART_SetConfig+0x1ba>
 800e0c6:	2bc0      	cmp	r3, #192	; 0xc0
 800e0c8:	d814      	bhi.n	800e0f4 <UART_SetConfig+0x1c0>
 800e0ca:	2b80      	cmp	r3, #128	; 0x80
 800e0cc:	d009      	beq.n	800e0e2 <UART_SetConfig+0x1ae>
 800e0ce:	2b80      	cmp	r3, #128	; 0x80
 800e0d0:	d810      	bhi.n	800e0f4 <UART_SetConfig+0x1c0>
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <UART_SetConfig+0x1a8>
 800e0d6:	2b40      	cmp	r3, #64	; 0x40
 800e0d8:	d006      	beq.n	800e0e8 <UART_SetConfig+0x1b4>
 800e0da:	e00b      	b.n	800e0f4 <UART_SetConfig+0x1c0>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	77fb      	strb	r3, [r7, #31]
 800e0e0:	e0cc      	b.n	800e27c <UART_SetConfig+0x348>
 800e0e2:	2302      	movs	r3, #2
 800e0e4:	77fb      	strb	r3, [r7, #31]
 800e0e6:	e0c9      	b.n	800e27c <UART_SetConfig+0x348>
 800e0e8:	2304      	movs	r3, #4
 800e0ea:	77fb      	strb	r3, [r7, #31]
 800e0ec:	e0c6      	b.n	800e27c <UART_SetConfig+0x348>
 800e0ee:	2308      	movs	r3, #8
 800e0f0:	77fb      	strb	r3, [r7, #31]
 800e0f2:	e0c3      	b.n	800e27c <UART_SetConfig+0x348>
 800e0f4:	2310      	movs	r3, #16
 800e0f6:	77fb      	strb	r3, [r7, #31]
 800e0f8:	e0c0      	b.n	800e27c <UART_SetConfig+0x348>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a44      	ldr	r2, [pc, #272]	; (800e210 <UART_SetConfig+0x2dc>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d125      	bne.n	800e150 <UART_SetConfig+0x21c>
 800e104:	4b3e      	ldr	r3, [pc, #248]	; (800e200 <UART_SetConfig+0x2cc>)
 800e106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e10a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e10e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e112:	d017      	beq.n	800e144 <UART_SetConfig+0x210>
 800e114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e118:	d817      	bhi.n	800e14a <UART_SetConfig+0x216>
 800e11a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e11e:	d00b      	beq.n	800e138 <UART_SetConfig+0x204>
 800e120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e124:	d811      	bhi.n	800e14a <UART_SetConfig+0x216>
 800e126:	2b00      	cmp	r3, #0
 800e128:	d003      	beq.n	800e132 <UART_SetConfig+0x1fe>
 800e12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e12e:	d006      	beq.n	800e13e <UART_SetConfig+0x20a>
 800e130:	e00b      	b.n	800e14a <UART_SetConfig+0x216>
 800e132:	2300      	movs	r3, #0
 800e134:	77fb      	strb	r3, [r7, #31]
 800e136:	e0a1      	b.n	800e27c <UART_SetConfig+0x348>
 800e138:	2302      	movs	r3, #2
 800e13a:	77fb      	strb	r3, [r7, #31]
 800e13c:	e09e      	b.n	800e27c <UART_SetConfig+0x348>
 800e13e:	2304      	movs	r3, #4
 800e140:	77fb      	strb	r3, [r7, #31]
 800e142:	e09b      	b.n	800e27c <UART_SetConfig+0x348>
 800e144:	2308      	movs	r3, #8
 800e146:	77fb      	strb	r3, [r7, #31]
 800e148:	e098      	b.n	800e27c <UART_SetConfig+0x348>
 800e14a:	2310      	movs	r3, #16
 800e14c:	77fb      	strb	r3, [r7, #31]
 800e14e:	e095      	b.n	800e27c <UART_SetConfig+0x348>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a2f      	ldr	r2, [pc, #188]	; (800e214 <UART_SetConfig+0x2e0>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d125      	bne.n	800e1a6 <UART_SetConfig+0x272>
 800e15a:	4b29      	ldr	r3, [pc, #164]	; (800e200 <UART_SetConfig+0x2cc>)
 800e15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e168:	d017      	beq.n	800e19a <UART_SetConfig+0x266>
 800e16a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e16e:	d817      	bhi.n	800e1a0 <UART_SetConfig+0x26c>
 800e170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e174:	d00b      	beq.n	800e18e <UART_SetConfig+0x25a>
 800e176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e17a:	d811      	bhi.n	800e1a0 <UART_SetConfig+0x26c>
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <UART_SetConfig+0x254>
 800e180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e184:	d006      	beq.n	800e194 <UART_SetConfig+0x260>
 800e186:	e00b      	b.n	800e1a0 <UART_SetConfig+0x26c>
 800e188:	2301      	movs	r3, #1
 800e18a:	77fb      	strb	r3, [r7, #31]
 800e18c:	e076      	b.n	800e27c <UART_SetConfig+0x348>
 800e18e:	2302      	movs	r3, #2
 800e190:	77fb      	strb	r3, [r7, #31]
 800e192:	e073      	b.n	800e27c <UART_SetConfig+0x348>
 800e194:	2304      	movs	r3, #4
 800e196:	77fb      	strb	r3, [r7, #31]
 800e198:	e070      	b.n	800e27c <UART_SetConfig+0x348>
 800e19a:	2308      	movs	r3, #8
 800e19c:	77fb      	strb	r3, [r7, #31]
 800e19e:	e06d      	b.n	800e27c <UART_SetConfig+0x348>
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	77fb      	strb	r3, [r7, #31]
 800e1a4:	e06a      	b.n	800e27c <UART_SetConfig+0x348>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a1b      	ldr	r2, [pc, #108]	; (800e218 <UART_SetConfig+0x2e4>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d138      	bne.n	800e222 <UART_SetConfig+0x2ee>
 800e1b0:	4b13      	ldr	r3, [pc, #76]	; (800e200 <UART_SetConfig+0x2cc>)
 800e1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e1ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e1be:	d017      	beq.n	800e1f0 <UART_SetConfig+0x2bc>
 800e1c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e1c4:	d82a      	bhi.n	800e21c <UART_SetConfig+0x2e8>
 800e1c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1ca:	d00b      	beq.n	800e1e4 <UART_SetConfig+0x2b0>
 800e1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1d0:	d824      	bhi.n	800e21c <UART_SetConfig+0x2e8>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d003      	beq.n	800e1de <UART_SetConfig+0x2aa>
 800e1d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1da:	d006      	beq.n	800e1ea <UART_SetConfig+0x2b6>
 800e1dc:	e01e      	b.n	800e21c <UART_SetConfig+0x2e8>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	77fb      	strb	r3, [r7, #31]
 800e1e2:	e04b      	b.n	800e27c <UART_SetConfig+0x348>
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	77fb      	strb	r3, [r7, #31]
 800e1e8:	e048      	b.n	800e27c <UART_SetConfig+0x348>
 800e1ea:	2304      	movs	r3, #4
 800e1ec:	77fb      	strb	r3, [r7, #31]
 800e1ee:	e045      	b.n	800e27c <UART_SetConfig+0x348>
 800e1f0:	2308      	movs	r3, #8
 800e1f2:	77fb      	strb	r3, [r7, #31]
 800e1f4:	e042      	b.n	800e27c <UART_SetConfig+0x348>
 800e1f6:	bf00      	nop
 800e1f8:	efff69f3 	.word	0xefff69f3
 800e1fc:	40011000 	.word	0x40011000
 800e200:	40023800 	.word	0x40023800
 800e204:	40004400 	.word	0x40004400
 800e208:	40004800 	.word	0x40004800
 800e20c:	40004c00 	.word	0x40004c00
 800e210:	40005000 	.word	0x40005000
 800e214:	40011400 	.word	0x40011400
 800e218:	40007800 	.word	0x40007800
 800e21c:	2310      	movs	r3, #16
 800e21e:	77fb      	strb	r3, [r7, #31]
 800e220:	e02c      	b.n	800e27c <UART_SetConfig+0x348>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a72      	ldr	r2, [pc, #456]	; (800e3f0 <UART_SetConfig+0x4bc>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d125      	bne.n	800e278 <UART_SetConfig+0x344>
 800e22c:	4b71      	ldr	r3, [pc, #452]	; (800e3f4 <UART_SetConfig+0x4c0>)
 800e22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e232:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e236:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e23a:	d017      	beq.n	800e26c <UART_SetConfig+0x338>
 800e23c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e240:	d817      	bhi.n	800e272 <UART_SetConfig+0x33e>
 800e242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e246:	d00b      	beq.n	800e260 <UART_SetConfig+0x32c>
 800e248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e24c:	d811      	bhi.n	800e272 <UART_SetConfig+0x33e>
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <UART_SetConfig+0x326>
 800e252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e256:	d006      	beq.n	800e266 <UART_SetConfig+0x332>
 800e258:	e00b      	b.n	800e272 <UART_SetConfig+0x33e>
 800e25a:	2300      	movs	r3, #0
 800e25c:	77fb      	strb	r3, [r7, #31]
 800e25e:	e00d      	b.n	800e27c <UART_SetConfig+0x348>
 800e260:	2302      	movs	r3, #2
 800e262:	77fb      	strb	r3, [r7, #31]
 800e264:	e00a      	b.n	800e27c <UART_SetConfig+0x348>
 800e266:	2304      	movs	r3, #4
 800e268:	77fb      	strb	r3, [r7, #31]
 800e26a:	e007      	b.n	800e27c <UART_SetConfig+0x348>
 800e26c:	2308      	movs	r3, #8
 800e26e:	77fb      	strb	r3, [r7, #31]
 800e270:	e004      	b.n	800e27c <UART_SetConfig+0x348>
 800e272:	2310      	movs	r3, #16
 800e274:	77fb      	strb	r3, [r7, #31]
 800e276:	e001      	b.n	800e27c <UART_SetConfig+0x348>
 800e278:	2310      	movs	r3, #16
 800e27a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	69db      	ldr	r3, [r3, #28]
 800e280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e284:	d15b      	bne.n	800e33e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e286:	7ffb      	ldrb	r3, [r7, #31]
 800e288:	2b08      	cmp	r3, #8
 800e28a:	d828      	bhi.n	800e2de <UART_SetConfig+0x3aa>
 800e28c:	a201      	add	r2, pc, #4	; (adr r2, 800e294 <UART_SetConfig+0x360>)
 800e28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e292:	bf00      	nop
 800e294:	0800e2b9 	.word	0x0800e2b9
 800e298:	0800e2c1 	.word	0x0800e2c1
 800e29c:	0800e2c9 	.word	0x0800e2c9
 800e2a0:	0800e2df 	.word	0x0800e2df
 800e2a4:	0800e2cf 	.word	0x0800e2cf
 800e2a8:	0800e2df 	.word	0x0800e2df
 800e2ac:	0800e2df 	.word	0x0800e2df
 800e2b0:	0800e2df 	.word	0x0800e2df
 800e2b4:	0800e2d7 	.word	0x0800e2d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2b8:	f7fe fdc0 	bl	800ce3c <HAL_RCC_GetPCLK1Freq>
 800e2bc:	61b8      	str	r0, [r7, #24]
        break;
 800e2be:	e013      	b.n	800e2e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2c0:	f7fe fdd0 	bl	800ce64 <HAL_RCC_GetPCLK2Freq>
 800e2c4:	61b8      	str	r0, [r7, #24]
        break;
 800e2c6:	e00f      	b.n	800e2e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e2c8:	4b4b      	ldr	r3, [pc, #300]	; (800e3f8 <UART_SetConfig+0x4c4>)
 800e2ca:	61bb      	str	r3, [r7, #24]
        break;
 800e2cc:	e00c      	b.n	800e2e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e2ce:	f7fe fca3 	bl	800cc18 <HAL_RCC_GetSysClockFreq>
 800e2d2:	61b8      	str	r0, [r7, #24]
        break;
 800e2d4:	e008      	b.n	800e2e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2da:	61bb      	str	r3, [r7, #24]
        break;
 800e2dc:	e004      	b.n	800e2e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	77bb      	strb	r3, [r7, #30]
        break;
 800e2e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d074      	beq.n	800e3d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	005a      	lsls	r2, r3, #1
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	085b      	lsrs	r3, r3, #1
 800e2f8:	441a      	add	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	2b0f      	cmp	r3, #15
 800e308:	d916      	bls.n	800e338 <UART_SetConfig+0x404>
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e310:	d212      	bcs.n	800e338 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	b29b      	uxth	r3, r3
 800e316:	f023 030f 	bic.w	r3, r3, #15
 800e31a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	085b      	lsrs	r3, r3, #1
 800e320:	b29b      	uxth	r3, r3
 800e322:	f003 0307 	and.w	r3, r3, #7
 800e326:	b29a      	uxth	r2, r3
 800e328:	89fb      	ldrh	r3, [r7, #14]
 800e32a:	4313      	orrs	r3, r2
 800e32c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	89fa      	ldrh	r2, [r7, #14]
 800e334:	60da      	str	r2, [r3, #12]
 800e336:	e04f      	b.n	800e3d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e338:	2301      	movs	r3, #1
 800e33a:	77bb      	strb	r3, [r7, #30]
 800e33c:	e04c      	b.n	800e3d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e33e:	7ffb      	ldrb	r3, [r7, #31]
 800e340:	2b08      	cmp	r3, #8
 800e342:	d828      	bhi.n	800e396 <UART_SetConfig+0x462>
 800e344:	a201      	add	r2, pc, #4	; (adr r2, 800e34c <UART_SetConfig+0x418>)
 800e346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e34a:	bf00      	nop
 800e34c:	0800e371 	.word	0x0800e371
 800e350:	0800e379 	.word	0x0800e379
 800e354:	0800e381 	.word	0x0800e381
 800e358:	0800e397 	.word	0x0800e397
 800e35c:	0800e387 	.word	0x0800e387
 800e360:	0800e397 	.word	0x0800e397
 800e364:	0800e397 	.word	0x0800e397
 800e368:	0800e397 	.word	0x0800e397
 800e36c:	0800e38f 	.word	0x0800e38f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e370:	f7fe fd64 	bl	800ce3c <HAL_RCC_GetPCLK1Freq>
 800e374:	61b8      	str	r0, [r7, #24]
        break;
 800e376:	e013      	b.n	800e3a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e378:	f7fe fd74 	bl	800ce64 <HAL_RCC_GetPCLK2Freq>
 800e37c:	61b8      	str	r0, [r7, #24]
        break;
 800e37e:	e00f      	b.n	800e3a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e380:	4b1d      	ldr	r3, [pc, #116]	; (800e3f8 <UART_SetConfig+0x4c4>)
 800e382:	61bb      	str	r3, [r7, #24]
        break;
 800e384:	e00c      	b.n	800e3a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e386:	f7fe fc47 	bl	800cc18 <HAL_RCC_GetSysClockFreq>
 800e38a:	61b8      	str	r0, [r7, #24]
        break;
 800e38c:	e008      	b.n	800e3a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e38e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e392:	61bb      	str	r3, [r7, #24]
        break;
 800e394:	e004      	b.n	800e3a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e396:	2300      	movs	r3, #0
 800e398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	77bb      	strb	r3, [r7, #30]
        break;
 800e39e:	bf00      	nop
    }

    if (pclk != 0U)
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d018      	beq.n	800e3d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	085a      	lsrs	r2, r3, #1
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	441a      	add	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	2b0f      	cmp	r3, #15
 800e3be:	d909      	bls.n	800e3d4 <UART_SetConfig+0x4a0>
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3c6:	d205      	bcs.n	800e3d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	60da      	str	r2, [r3, #12]
 800e3d2:	e001      	b.n	800e3d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e3e4:	7fbb      	ldrb	r3, [r7, #30]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3720      	adds	r7, #32
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	40007c00 	.word	0x40007c00
 800e3f4:	40023800 	.word	0x40023800
 800e3f8:	00f42400 	.word	0x00f42400

0800e3fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e408:	f003 0301 	and.w	r3, r3, #1
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00a      	beq.n	800e426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	430a      	orrs	r2, r1
 800e424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42a:	f003 0302 	and.w	r3, r3, #2
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00a      	beq.n	800e448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	430a      	orrs	r2, r1
 800e446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	430a      	orrs	r2, r1
 800e468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46e:	f003 0308 	and.w	r3, r3, #8
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00a      	beq.n	800e48c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e490:	f003 0310 	and.w	r3, r3, #16
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00a      	beq.n	800e4ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b2:	f003 0320 	and.w	r3, r3, #32
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00a      	beq.n	800e4d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	430a      	orrs	r2, r1
 800e4ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d01a      	beq.n	800e512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	430a      	orrs	r2, r1
 800e4f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4fa:	d10a      	bne.n	800e512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	430a      	orrs	r2, r1
 800e510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00a      	beq.n	800e534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	430a      	orrs	r2, r1
 800e532:	605a      	str	r2, [r3, #4]
  }
}
 800e534:	bf00      	nop
 800e536:	370c      	adds	r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af02      	add	r7, sp, #8
 800e546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e550:	f7fd f96a 	bl	800b828 <HAL_GetTick>
 800e554:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f003 0308 	and.w	r3, r3, #8
 800e560:	2b08      	cmp	r3, #8
 800e562:	d10e      	bne.n	800e582 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f81b 	bl	800e5ae <UART_WaitOnFlagUntilTimeout>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e57e:	2303      	movs	r3, #3
 800e580:	e011      	b.n	800e5a6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2220      	movs	r2, #32
 800e586:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2220      	movs	r2, #32
 800e58c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e5a4:	2300      	movs	r3, #0
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b09c      	sub	sp, #112	; 0x70
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	603b      	str	r3, [r7, #0]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5be:	e0a7      	b.n	800e710 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c6:	f000 80a3 	beq.w	800e710 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5ca:	f7fd f92d 	bl	800b828 <HAL_GetTick>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d302      	bcc.n	800e5e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e5da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d13f      	bne.n	800e660 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5e8:	e853 3f00 	ldrex	r3, [r3]
 800e5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5f4:	667b      	str	r3, [r7, #100]	; 0x64
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e600:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e606:	e841 2300 	strex	r3, r2, [r1]
 800e60a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e60c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1e6      	bne.n	800e5e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	3308      	adds	r3, #8
 800e618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e61c:	e853 3f00 	ldrex	r3, [r3]
 800e620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e624:	f023 0301 	bic.w	r3, r3, #1
 800e628:	663b      	str	r3, [r7, #96]	; 0x60
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	3308      	adds	r3, #8
 800e630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e632:	64ba      	str	r2, [r7, #72]	; 0x48
 800e634:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e63a:	e841 2300 	strex	r3, r2, [r1]
 800e63e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1e5      	bne.n	800e612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2220      	movs	r2, #32
 800e64a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2220      	movs	r2, #32
 800e650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e65c:	2303      	movs	r3, #3
 800e65e:	e068      	b.n	800e732 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f003 0304 	and.w	r3, r3, #4
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d050      	beq.n	800e710 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	69db      	ldr	r3, [r3, #28]
 800e674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e67c:	d148      	bne.n	800e710 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e686:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e690:	e853 3f00 	ldrex	r3, [r3]
 800e694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e69c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6a6:	637b      	str	r3, [r7, #52]	; 0x34
 800e6a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6ae:	e841 2300 	strex	r3, r2, [r1]
 800e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1e6      	bne.n	800e688 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3308      	adds	r3, #8
 800e6c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	e853 3f00 	ldrex	r3, [r3]
 800e6c8:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f023 0301 	bic.w	r3, r3, #1
 800e6d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e6da:	623a      	str	r2, [r7, #32]
 800e6dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6de:	69f9      	ldr	r1, [r7, #28]
 800e6e0:	6a3a      	ldr	r2, [r7, #32]
 800e6e2:	e841 2300 	strex	r3, r2, [r1]
 800e6e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1e5      	bne.n	800e6ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2220      	movs	r2, #32
 800e6f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2220      	movs	r2, #32
 800e6f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2220      	movs	r2, #32
 800e700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e70c:	2303      	movs	r3, #3
 800e70e:	e010      	b.n	800e732 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	69da      	ldr	r2, [r3, #28]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	4013      	ands	r3, r2
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	bf0c      	ite	eq
 800e720:	2301      	moveq	r3, #1
 800e722:	2300      	movne	r3, #0
 800e724:	b2db      	uxtb	r3, r3
 800e726:	461a      	mov	r2, r3
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	f43f af48 	beq.w	800e5c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	4618      	mov	r0, r3
 800e734:	3770      	adds	r7, #112	; 0x70
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e73a:	b480      	push	{r7}
 800e73c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e73e:	bf00      	nop
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e74e:	f3ef 8305 	mrs	r3, IPSR
 800e752:	60bb      	str	r3, [r7, #8]
  return(result);
 800e754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e756:	2b00      	cmp	r3, #0
 800e758:	d10f      	bne.n	800e77a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e75a:	f3ef 8310 	mrs	r3, PRIMASK
 800e75e:	607b      	str	r3, [r7, #4]
  return(result);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d105      	bne.n	800e772 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e766:	f3ef 8311 	mrs	r3, BASEPRI
 800e76a:	603b      	str	r3, [r7, #0]
  return(result);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d007      	beq.n	800e782 <osKernelInitialize+0x3a>
 800e772:	4b0e      	ldr	r3, [pc, #56]	; (800e7ac <osKernelInitialize+0x64>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b02      	cmp	r3, #2
 800e778:	d103      	bne.n	800e782 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e77a:	f06f 0305 	mvn.w	r3, #5
 800e77e:	60fb      	str	r3, [r7, #12]
 800e780:	e00c      	b.n	800e79c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e782:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <osKernelInitialize+0x64>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d105      	bne.n	800e796 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e78a:	4b08      	ldr	r3, [pc, #32]	; (800e7ac <osKernelInitialize+0x64>)
 800e78c:	2201      	movs	r2, #1
 800e78e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e790:	2300      	movs	r3, #0
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	e002      	b.n	800e79c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e796:	f04f 33ff 	mov.w	r3, #4294967295
 800e79a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e79c:	68fb      	ldr	r3, [r7, #12]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3714      	adds	r7, #20
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	200036cc 	.word	0x200036cc

0800e7b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7b6:	f3ef 8305 	mrs	r3, IPSR
 800e7ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d10f      	bne.n	800e7e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e7c6:	607b      	str	r3, [r7, #4]
  return(result);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d105      	bne.n	800e7da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7ce:	f3ef 8311 	mrs	r3, BASEPRI
 800e7d2:	603b      	str	r3, [r7, #0]
  return(result);
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d007      	beq.n	800e7ea <osKernelStart+0x3a>
 800e7da:	4b0f      	ldr	r3, [pc, #60]	; (800e818 <osKernelStart+0x68>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d103      	bne.n	800e7ea <osKernelStart+0x3a>
    stat = osErrorISR;
 800e7e2:	f06f 0305 	mvn.w	r3, #5
 800e7e6:	60fb      	str	r3, [r7, #12]
 800e7e8:	e010      	b.n	800e80c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e7ea:	4b0b      	ldr	r3, [pc, #44]	; (800e818 <osKernelStart+0x68>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d109      	bne.n	800e806 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e7f2:	f7ff ffa2 	bl	800e73a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e7f6:	4b08      	ldr	r3, [pc, #32]	; (800e818 <osKernelStart+0x68>)
 800e7f8:	2202      	movs	r2, #2
 800e7fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e7fc:	f001 f8e6 	bl	800f9cc <vTaskStartScheduler>
      stat = osOK;
 800e800:	2300      	movs	r3, #0
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e002      	b.n	800e80c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e806:	f04f 33ff 	mov.w	r3, #4294967295
 800e80a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e80c:	68fb      	ldr	r3, [r7, #12]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	200036cc 	.word	0x200036cc

0800e81c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e822:	f3ef 8305 	mrs	r3, IPSR
 800e826:	60bb      	str	r3, [r7, #8]
  return(result);
 800e828:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d10f      	bne.n	800e84e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e82e:	f3ef 8310 	mrs	r3, PRIMASK
 800e832:	607b      	str	r3, [r7, #4]
  return(result);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d105      	bne.n	800e846 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e83a:	f3ef 8311 	mrs	r3, BASEPRI
 800e83e:	603b      	str	r3, [r7, #0]
  return(result);
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d007      	beq.n	800e856 <osKernelGetTickCount+0x3a>
 800e846:	4b08      	ldr	r3, [pc, #32]	; (800e868 <osKernelGetTickCount+0x4c>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d103      	bne.n	800e856 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e84e:	f001 f9e5 	bl	800fc1c <xTaskGetTickCountFromISR>
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	e002      	b.n	800e85c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e856:	f001 f9d1 	bl	800fbfc <xTaskGetTickCount>
 800e85a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e85c:	68fb      	ldr	r3, [r7, #12]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	200036cc 	.word	0x200036cc

0800e86c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800e870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800e874:	4618      	mov	r0, r3
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr
	...

0800e880 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e880:	b580      	push	{r7, lr}
 800e882:	b090      	sub	sp, #64	; 0x40
 800e884:	af04      	add	r7, sp, #16
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e88c:	2300      	movs	r3, #0
 800e88e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e890:	f3ef 8305 	mrs	r3, IPSR
 800e894:	61fb      	str	r3, [r7, #28]
  return(result);
 800e896:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f040 808f 	bne.w	800e9bc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e89e:	f3ef 8310 	mrs	r3, PRIMASK
 800e8a2:	61bb      	str	r3, [r7, #24]
  return(result);
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d105      	bne.n	800e8b6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8aa:	f3ef 8311 	mrs	r3, BASEPRI
 800e8ae:	617b      	str	r3, [r7, #20]
  return(result);
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d003      	beq.n	800e8be <osThreadNew+0x3e>
 800e8b6:	4b44      	ldr	r3, [pc, #272]	; (800e9c8 <osThreadNew+0x148>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d07e      	beq.n	800e9bc <osThreadNew+0x13c>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d07b      	beq.n	800e9bc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e8c4:	2380      	movs	r3, #128	; 0x80
 800e8c6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e8c8:	2318      	movs	r3, #24
 800e8ca:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d045      	beq.n	800e968 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <osThreadNew+0x6a>
        name = attr->name;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	699b      	ldr	r3, [r3, #24]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d002      	beq.n	800e8f8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d008      	beq.n	800e910 <osThreadNew+0x90>
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	2b38      	cmp	r3, #56	; 0x38
 800e902:	d805      	bhi.n	800e910 <osThreadNew+0x90>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	f003 0301 	and.w	r3, r3, #1
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <osThreadNew+0x94>
        return (NULL);
 800e910:	2300      	movs	r3, #0
 800e912:	e054      	b.n	800e9be <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d003      	beq.n	800e924 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	089b      	lsrs	r3, r3, #2
 800e922:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d00e      	beq.n	800e94a <osThreadNew+0xca>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	2b5b      	cmp	r3, #91	; 0x5b
 800e932:	d90a      	bls.n	800e94a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d006      	beq.n	800e94a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	695b      	ldr	r3, [r3, #20]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <osThreadNew+0xca>
        mem = 1;
 800e944:	2301      	movs	r3, #1
 800e946:	623b      	str	r3, [r7, #32]
 800e948:	e010      	b.n	800e96c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10c      	bne.n	800e96c <osThreadNew+0xec>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d108      	bne.n	800e96c <osThreadNew+0xec>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	691b      	ldr	r3, [r3, #16]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d104      	bne.n	800e96c <osThreadNew+0xec>
          mem = 0;
 800e962:	2300      	movs	r3, #0
 800e964:	623b      	str	r3, [r7, #32]
 800e966:	e001      	b.n	800e96c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e968:	2300      	movs	r3, #0
 800e96a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d110      	bne.n	800e994 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e97a:	9202      	str	r2, [sp, #8]
 800e97c:	9301      	str	r3, [sp, #4]
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	9300      	str	r3, [sp, #0]
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f000 fe3f 	bl	800f60c <xTaskCreateStatic>
 800e98e:	4603      	mov	r3, r0
 800e990:	613b      	str	r3, [r7, #16]
 800e992:	e013      	b.n	800e9bc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d110      	bne.n	800e9bc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	f107 0310 	add.w	r3, r7, #16
 800e9a2:	9301      	str	r3, [sp, #4]
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f000 fe90 	bl	800f6d2 <xTaskCreate>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d001      	beq.n	800e9bc <osThreadNew+0x13c>
          hTask = NULL;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e9bc:	693b      	ldr	r3, [r7, #16]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3730      	adds	r7, #48	; 0x30
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	200036cc 	.word	0x200036cc

0800e9cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9d4:	f3ef 8305 	mrs	r3, IPSR
 800e9d8:	613b      	str	r3, [r7, #16]
  return(result);
 800e9da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10f      	bne.n	800ea00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e9e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d105      	bne.n	800e9f8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9ec:	f3ef 8311 	mrs	r3, BASEPRI
 800e9f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d007      	beq.n	800ea08 <osDelay+0x3c>
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <osDelay+0x58>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d103      	bne.n	800ea08 <osDelay+0x3c>
    stat = osErrorISR;
 800ea00:	f06f 0305 	mvn.w	r3, #5
 800ea04:	617b      	str	r3, [r7, #20]
 800ea06:	e007      	b.n	800ea18 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d002      	beq.n	800ea18 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 ffa4 	bl	800f960 <vTaskDelay>
    }
  }

  return (stat);
 800ea18:	697b      	ldr	r3, [r7, #20]
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3718      	adds	r7, #24
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	200036cc 	.word	0x200036cc

0800ea28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea28:	b480      	push	{r7}
 800ea2a:	b085      	sub	sp, #20
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	4a07      	ldr	r2, [pc, #28]	; (800ea54 <vApplicationGetIdleTaskMemory+0x2c>)
 800ea38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	4a06      	ldr	r2, [pc, #24]	; (800ea58 <vApplicationGetIdleTaskMemory+0x30>)
 800ea3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2280      	movs	r2, #128	; 0x80
 800ea44:	601a      	str	r2, [r3, #0]
}
 800ea46:	bf00      	nop
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	200036d0 	.word	0x200036d0
 800ea58:	2000372c 	.word	0x2000372c

0800ea5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4a07      	ldr	r2, [pc, #28]	; (800ea88 <vApplicationGetTimerTaskMemory+0x2c>)
 800ea6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	4a06      	ldr	r2, [pc, #24]	; (800ea8c <vApplicationGetTimerTaskMemory+0x30>)
 800ea72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea7a:	601a      	str	r2, [r3, #0]
}
 800ea7c:	bf00      	nop
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr
 800ea88:	2000392c 	.word	0x2000392c
 800ea8c:	20003988 	.word	0x20003988

0800ea90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f103 0208 	add.w	r2, r3, #8
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f103 0208 	add.w	r2, r3, #8
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f103 0208 	add.w	r2, r3, #8
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eade:	bf00      	nop
 800eae0:	370c      	adds	r7, #12
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eaea:	b480      	push	{r7}
 800eaec:	b085      	sub	sp, #20
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	689a      	ldr	r2, [r3, #8]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	601a      	str	r2, [r3, #0]
}
 800eb26:	bf00      	nop
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb32:	b480      	push	{r7}
 800eb34:	b085      	sub	sp, #20
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
 800eb3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb48:	d103      	bne.n	800eb52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	e00c      	b.n	800eb6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3308      	adds	r3, #8
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	e002      	b.n	800eb60 <vListInsert+0x2e>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d2f6      	bcs.n	800eb5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	685a      	ldr	r2, [r3, #4]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	601a      	str	r2, [r3, #0]
}
 800eb98:	bf00      	nop
 800eb9a:	3714      	adds	r7, #20
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	6892      	ldr	r2, [r2, #8]
 800ebba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	6852      	ldr	r2, [r2, #4]
 800ebc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d103      	bne.n	800ebd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	689a      	ldr	r2, [r3, #8]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	1e5a      	subs	r2, r3, #1
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d10c      	bne.n	800ec26 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ec0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec10:	b672      	cpsid	i
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	b662      	cpsie	i
 800ec20:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ec26:	f002 f891 	bl	8010d4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec32:	68f9      	ldr	r1, [r7, #12]
 800ec34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec36:	fb01 f303 	mul.w	r3, r1, r3
 800ec3a:	441a      	add	r2, r3
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2200      	movs	r2, #0
 800ec44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec56:	3b01      	subs	r3, #1
 800ec58:	68f9      	ldr	r1, [r7, #12]
 800ec5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec5c:	fb01 f303 	mul.w	r3, r1, r3
 800ec60:	441a      	add	r2, r3
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	22ff      	movs	r2, #255	; 0xff
 800ec6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	22ff      	movs	r2, #255	; 0xff
 800ec72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d114      	bne.n	800eca6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d01a      	beq.n	800ecba <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	3310      	adds	r3, #16
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f001 f949 	bl	800ff20 <xTaskRemoveFromEventList>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d012      	beq.n	800ecba <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ec94:	4b0c      	ldr	r3, [pc, #48]	; (800ecc8 <xQueueGenericReset+0xd0>)
 800ec96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	f3bf 8f6f 	isb	sy
 800eca4:	e009      	b.n	800ecba <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3310      	adds	r3, #16
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7ff fef0 	bl	800ea90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3324      	adds	r3, #36	; 0x24
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7ff feeb 	bl	800ea90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ecba:	f002 f87b 	bl	8010db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ecbe:	2301      	movs	r3, #1
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	e000ed04 	.word	0xe000ed04

0800eccc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b08e      	sub	sp, #56	; 0x38
 800ecd0:	af02      	add	r7, sp, #8
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
 800ecd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10c      	bne.n	800ecfa <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	b672      	cpsid	i
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	b662      	cpsie	i
 800ecf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ecf6:	bf00      	nop
 800ecf8:	e7fe      	b.n	800ecf8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10c      	bne.n	800ed1a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed04:	b672      	cpsid	i
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	b662      	cpsie	i
 800ed14:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed16:	bf00      	nop
 800ed18:	e7fe      	b.n	800ed18 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d002      	beq.n	800ed26 <xQueueGenericCreateStatic+0x5a>
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <xQueueGenericCreateStatic+0x5e>
 800ed26:	2301      	movs	r3, #1
 800ed28:	e000      	b.n	800ed2c <xQueueGenericCreateStatic+0x60>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10c      	bne.n	800ed4a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	b672      	cpsid	i
 800ed36:	f383 8811 	msr	BASEPRI, r3
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	b662      	cpsie	i
 800ed44:	623b      	str	r3, [r7, #32]
}
 800ed46:	bf00      	nop
 800ed48:	e7fe      	b.n	800ed48 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <xQueueGenericCreateStatic+0x8a>
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d101      	bne.n	800ed5a <xQueueGenericCreateStatic+0x8e>
 800ed56:	2301      	movs	r3, #1
 800ed58:	e000      	b.n	800ed5c <xQueueGenericCreateStatic+0x90>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10c      	bne.n	800ed7a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	b672      	cpsid	i
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	b662      	cpsie	i
 800ed74:	61fb      	str	r3, [r7, #28]
}
 800ed76:	bf00      	nop
 800ed78:	e7fe      	b.n	800ed78 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ed7a:	2350      	movs	r3, #80	; 0x50
 800ed7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	2b50      	cmp	r3, #80	; 0x50
 800ed82:	d00c      	beq.n	800ed9e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ed84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed88:	b672      	cpsid	i
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	b662      	cpsie	i
 800ed98:	61bb      	str	r3, [r7, #24]
}
 800ed9a:	bf00      	nop
 800ed9c:	e7fe      	b.n	800ed9c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ed9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00d      	beq.n	800edc6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	2201      	movs	r2, #1
 800edae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800edb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	4613      	mov	r3, r2
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	68b9      	ldr	r1, [r7, #8]
 800edc0:	68f8      	ldr	r0, [r7, #12]
 800edc2:	f000 f805 	bl	800edd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800edc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800edc8:	4618      	mov	r0, r3
 800edca:	3730      	adds	r7, #48	; 0x30
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d103      	bne.n	800edec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	69ba      	ldr	r2, [r7, #24]
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	e002      	b.n	800edf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800edf8:	69bb      	ldr	r3, [r7, #24]
 800edfa:	68ba      	ldr	r2, [r7, #8]
 800edfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800edfe:	2101      	movs	r1, #1
 800ee00:	69b8      	ldr	r0, [r7, #24]
 800ee02:	f7ff fef9 	bl	800ebf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	78fa      	ldrb	r2, [r7, #3]
 800ee0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ee0e:	bf00      	nop
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
	...

0800ee18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08e      	sub	sp, #56	; 0x38
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee26:	2300      	movs	r3, #0
 800ee28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d10c      	bne.n	800ee4e <xQueueGenericSend+0x36>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	b672      	cpsid	i
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	b662      	cpsie	i
 800ee48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d103      	bne.n	800ee5c <xQueueGenericSend+0x44>
 800ee54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d101      	bne.n	800ee60 <xQueueGenericSend+0x48>
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e000      	b.n	800ee62 <xQueueGenericSend+0x4a>
 800ee60:	2300      	movs	r3, #0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10c      	bne.n	800ee80 <xQueueGenericSend+0x68>
	__asm volatile
 800ee66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6a:	b672      	cpsid	i
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	b662      	cpsie	i
 800ee7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee7c:	bf00      	nop
 800ee7e:	e7fe      	b.n	800ee7e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	d103      	bne.n	800ee8e <xQueueGenericSend+0x76>
 800ee86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d101      	bne.n	800ee92 <xQueueGenericSend+0x7a>
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e000      	b.n	800ee94 <xQueueGenericSend+0x7c>
 800ee92:	2300      	movs	r3, #0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10c      	bne.n	800eeb2 <xQueueGenericSend+0x9a>
	__asm volatile
 800ee98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9c:	b672      	cpsid	i
 800ee9e:	f383 8811 	msr	BASEPRI, r3
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	f3bf 8f4f 	dsb	sy
 800eeaa:	b662      	cpsie	i
 800eeac:	623b      	str	r3, [r7, #32]
}
 800eeae:	bf00      	nop
 800eeb0:	e7fe      	b.n	800eeb0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eeb2:	f001 f9fb 	bl	80102ac <xTaskGetSchedulerState>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d102      	bne.n	800eec2 <xQueueGenericSend+0xaa>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d101      	bne.n	800eec6 <xQueueGenericSend+0xae>
 800eec2:	2301      	movs	r3, #1
 800eec4:	e000      	b.n	800eec8 <xQueueGenericSend+0xb0>
 800eec6:	2300      	movs	r3, #0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10c      	bne.n	800eee6 <xQueueGenericSend+0xce>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	b672      	cpsid	i
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	b662      	cpsie	i
 800eee0:	61fb      	str	r3, [r7, #28]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eee6:	f001 ff31 	bl	8010d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d302      	bcc.n	800eefc <xQueueGenericSend+0xe4>
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d129      	bne.n	800ef50 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	68b9      	ldr	r1, [r7, #8]
 800ef00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef02:	f000 fa15 	bl	800f330 <prvCopyDataToQueue>
 800ef06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d010      	beq.n	800ef32 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef12:	3324      	adds	r3, #36	; 0x24
 800ef14:	4618      	mov	r0, r3
 800ef16:	f001 f803 	bl	800ff20 <xTaskRemoveFromEventList>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d013      	beq.n	800ef48 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef20:	4b3f      	ldr	r3, [pc, #252]	; (800f020 <xQueueGenericSend+0x208>)
 800ef22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef26:	601a      	str	r2, [r3, #0]
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	e00a      	b.n	800ef48 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d007      	beq.n	800ef48 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef38:	4b39      	ldr	r3, [pc, #228]	; (800f020 <xQueueGenericSend+0x208>)
 800ef3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef3e:	601a      	str	r2, [r3, #0]
 800ef40:	f3bf 8f4f 	dsb	sy
 800ef44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef48:	f001 ff34 	bl	8010db4 <vPortExitCritical>
				return pdPASS;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e063      	b.n	800f018 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d103      	bne.n	800ef5e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef56:	f001 ff2d 	bl	8010db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e05c      	b.n	800f018 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d106      	bne.n	800ef72 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef64:	f107 0314 	add.w	r3, r7, #20
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f001 f83f 	bl	800ffec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef72:	f001 ff1f 	bl	8010db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef76:	f000 fd93 	bl	800faa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef7a:	f001 fee7 	bl	8010d4c <vPortEnterCritical>
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef84:	b25b      	sxtb	r3, r3
 800ef86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8a:	d103      	bne.n	800ef94 <xQueueGenericSend+0x17c>
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef9a:	b25b      	sxtb	r3, r3
 800ef9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa0:	d103      	bne.n	800efaa <xQueueGenericSend+0x192>
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	2200      	movs	r2, #0
 800efa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efaa:	f001 ff03 	bl	8010db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efae:	1d3a      	adds	r2, r7, #4
 800efb0:	f107 0314 	add.w	r3, r7, #20
 800efb4:	4611      	mov	r1, r2
 800efb6:	4618      	mov	r0, r3
 800efb8:	f001 f82e 	bl	8010018 <xTaskCheckForTimeOut>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d124      	bne.n	800f00c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800efc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efc4:	f000 faac 	bl	800f520 <prvIsQueueFull>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d018      	beq.n	800f000 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd0:	3310      	adds	r3, #16
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	4611      	mov	r1, r2
 800efd6:	4618      	mov	r0, r3
 800efd8:	f000 ff4e 	bl	800fe78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800efdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efde:	f000 fa37 	bl	800f450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800efe2:	f000 fd6b 	bl	800fabc <xTaskResumeAll>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f47f af7c 	bne.w	800eee6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800efee:	4b0c      	ldr	r3, [pc, #48]	; (800f020 <xQueueGenericSend+0x208>)
 800eff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eff4:	601a      	str	r2, [r3, #0]
 800eff6:	f3bf 8f4f 	dsb	sy
 800effa:	f3bf 8f6f 	isb	sy
 800effe:	e772      	b.n	800eee6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f002:	f000 fa25 	bl	800f450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f006:	f000 fd59 	bl	800fabc <xTaskResumeAll>
 800f00a:	e76c      	b.n	800eee6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f00e:	f000 fa1f 	bl	800f450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f012:	f000 fd53 	bl	800fabc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3738      	adds	r7, #56	; 0x38
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	e000ed04 	.word	0xe000ed04

0800f024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08e      	sub	sp, #56	; 0x38
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10c      	bne.n	800f056 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f040:	b672      	cpsid	i
 800f042:	f383 8811 	msr	BASEPRI, r3
 800f046:	f3bf 8f6f 	isb	sy
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	b662      	cpsie	i
 800f050:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f052:	bf00      	nop
 800f054:	e7fe      	b.n	800f054 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d103      	bne.n	800f064 <xQueueGenericSendFromISR+0x40>
 800f05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f060:	2b00      	cmp	r3, #0
 800f062:	d101      	bne.n	800f068 <xQueueGenericSendFromISR+0x44>
 800f064:	2301      	movs	r3, #1
 800f066:	e000      	b.n	800f06a <xQueueGenericSendFromISR+0x46>
 800f068:	2300      	movs	r3, #0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10c      	bne.n	800f088 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	b672      	cpsid	i
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	b662      	cpsie	i
 800f082:	623b      	str	r3, [r7, #32]
}
 800f084:	bf00      	nop
 800f086:	e7fe      	b.n	800f086 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d103      	bne.n	800f096 <xQueueGenericSendFromISR+0x72>
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f092:	2b01      	cmp	r3, #1
 800f094:	d101      	bne.n	800f09a <xQueueGenericSendFromISR+0x76>
 800f096:	2301      	movs	r3, #1
 800f098:	e000      	b.n	800f09c <xQueueGenericSendFromISR+0x78>
 800f09a:	2300      	movs	r3, #0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10c      	bne.n	800f0ba <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	b672      	cpsid	i
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	b662      	cpsie	i
 800f0b4:	61fb      	str	r3, [r7, #28]
}
 800f0b6:	bf00      	nop
 800f0b8:	e7fe      	b.n	800f0b8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0ba:	f001 ff2f 	bl	8010f1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f0be:	f3ef 8211 	mrs	r2, BASEPRI
 800f0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c6:	b672      	cpsid	i
 800f0c8:	f383 8811 	msr	BASEPRI, r3
 800f0cc:	f3bf 8f6f 	isb	sy
 800f0d0:	f3bf 8f4f 	dsb	sy
 800f0d4:	b662      	cpsie	i
 800f0d6:	61ba      	str	r2, [r7, #24]
 800f0d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f0da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d302      	bcc.n	800f0f0 <xQueueGenericSendFromISR+0xcc>
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b02      	cmp	r3, #2
 800f0ee:	d12c      	bne.n	800f14a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0fa:	683a      	ldr	r2, [r7, #0]
 800f0fc:	68b9      	ldr	r1, [r7, #8]
 800f0fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f100:	f000 f916 	bl	800f330 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f104:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10c:	d112      	bne.n	800f134 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f112:	2b00      	cmp	r3, #0
 800f114:	d016      	beq.n	800f144 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f118:	3324      	adds	r3, #36	; 0x24
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 ff00 	bl	800ff20 <xTaskRemoveFromEventList>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00e      	beq.n	800f144 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d00b      	beq.n	800f144 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	e007      	b.n	800f144 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f134:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f138:	3301      	adds	r3, #1
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	b25a      	sxtb	r2, r3
 800f13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f144:	2301      	movs	r3, #1
 800f146:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f148:	e001      	b.n	800f14e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f14a:	2300      	movs	r3, #0
 800f14c:	637b      	str	r3, [r7, #52]	; 0x34
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3738      	adds	r7, #56	; 0x38
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b08c      	sub	sp, #48	; 0x30
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f170:	2300      	movs	r3, #0
 800f172:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d10c      	bne.n	800f198 <xQueueReceive+0x34>
	__asm volatile
 800f17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f182:	b672      	cpsid	i
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	b662      	cpsie	i
 800f192:	623b      	str	r3, [r7, #32]
}
 800f194:	bf00      	nop
 800f196:	e7fe      	b.n	800f196 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d103      	bne.n	800f1a6 <xQueueReceive+0x42>
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <xQueueReceive+0x46>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e000      	b.n	800f1ac <xQueueReceive+0x48>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d10c      	bne.n	800f1ca <xQueueReceive+0x66>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	b672      	cpsid	i
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	b662      	cpsie	i
 800f1c4:	61fb      	str	r3, [r7, #28]
}
 800f1c6:	bf00      	nop
 800f1c8:	e7fe      	b.n	800f1c8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1ca:	f001 f86f 	bl	80102ac <xTaskGetSchedulerState>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d102      	bne.n	800f1da <xQueueReceive+0x76>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <xQueueReceive+0x7a>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e000      	b.n	800f1e0 <xQueueReceive+0x7c>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10c      	bne.n	800f1fe <xQueueReceive+0x9a>
	__asm volatile
 800f1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e8:	b672      	cpsid	i
 800f1ea:	f383 8811 	msr	BASEPRI, r3
 800f1ee:	f3bf 8f6f 	isb	sy
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	b662      	cpsie	i
 800f1f8:	61bb      	str	r3, [r7, #24]
}
 800f1fa:	bf00      	nop
 800f1fc:	e7fe      	b.n	800f1fc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1fe:	f001 fda5 	bl	8010d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f206:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d01f      	beq.n	800f24e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f20e:	68b9      	ldr	r1, [r7, #8]
 800f210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f212:	f000 f8f7 	bl	800f404 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f218:	1e5a      	subs	r2, r3, #1
 800f21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00f      	beq.n	800f246 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f228:	3310      	adds	r3, #16
 800f22a:	4618      	mov	r0, r3
 800f22c:	f000 fe78 	bl	800ff20 <xTaskRemoveFromEventList>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d007      	beq.n	800f246 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f236:	4b3d      	ldr	r3, [pc, #244]	; (800f32c <xQueueReceive+0x1c8>)
 800f238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f23c:	601a      	str	r2, [r3, #0]
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f246:	f001 fdb5 	bl	8010db4 <vPortExitCritical>
				return pdPASS;
 800f24a:	2301      	movs	r3, #1
 800f24c:	e069      	b.n	800f322 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d103      	bne.n	800f25c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f254:	f001 fdae 	bl	8010db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f258:	2300      	movs	r3, #0
 800f25a:	e062      	b.n	800f322 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f262:	f107 0310 	add.w	r3, r7, #16
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fec0 	bl	800ffec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f26c:	2301      	movs	r3, #1
 800f26e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f270:	f001 fda0 	bl	8010db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f274:	f000 fc14 	bl	800faa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f278:	f001 fd68 	bl	8010d4c <vPortEnterCritical>
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f282:	b25b      	sxtb	r3, r3
 800f284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f288:	d103      	bne.n	800f292 <xQueueReceive+0x12e>
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	2200      	movs	r2, #0
 800f28e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f298:	b25b      	sxtb	r3, r3
 800f29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29e:	d103      	bne.n	800f2a8 <xQueueReceive+0x144>
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2a8:	f001 fd84 	bl	8010db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2ac:	1d3a      	adds	r2, r7, #4
 800f2ae:	f107 0310 	add.w	r3, r7, #16
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 feaf 	bl	8010018 <xTaskCheckForTimeOut>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d123      	bne.n	800f308 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2c2:	f000 f917 	bl	800f4f4 <prvIsQueueEmpty>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d017      	beq.n	800f2fc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ce:	3324      	adds	r3, #36	; 0x24
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f000 fdcf 	bl	800fe78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2dc:	f000 f8b8 	bl	800f450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2e0:	f000 fbec 	bl	800fabc <xTaskResumeAll>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d189      	bne.n	800f1fe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f2ea:	4b10      	ldr	r3, [pc, #64]	; (800f32c <xQueueReceive+0x1c8>)
 800f2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2f0:	601a      	str	r2, [r3, #0]
 800f2f2:	f3bf 8f4f 	dsb	sy
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	e780      	b.n	800f1fe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2fe:	f000 f8a7 	bl	800f450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f302:	f000 fbdb 	bl	800fabc <xTaskResumeAll>
 800f306:	e77a      	b.n	800f1fe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f30a:	f000 f8a1 	bl	800f450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f30e:	f000 fbd5 	bl	800fabc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f314:	f000 f8ee 	bl	800f4f4 <prvIsQueueEmpty>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f43f af6f 	beq.w	800f1fe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f320:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f322:	4618      	mov	r0, r3
 800f324:	3730      	adds	r7, #48	; 0x30
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	e000ed04 	.word	0xe000ed04

0800f330 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f33c:	2300      	movs	r3, #0
 800f33e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f344:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d10d      	bne.n	800f36a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d14d      	bne.n	800f3f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f000 ffc4 	bl	80102e8 <xTaskPriorityDisinherit>
 800f360:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	609a      	str	r2, [r3, #8]
 800f368:	e043      	b.n	800f3f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d119      	bne.n	800f3a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6858      	ldr	r0, [r3, #4]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f378:	461a      	mov	r2, r3
 800f37a:	68b9      	ldr	r1, [r7, #8]
 800f37c:	f002 fbbf 	bl	8011afe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f388:	441a      	add	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	429a      	cmp	r2, r3
 800f398:	d32b      	bcc.n	800f3f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	605a      	str	r2, [r3, #4]
 800f3a2:	e026      	b.n	800f3f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	68d8      	ldr	r0, [r3, #12]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	68b9      	ldr	r1, [r7, #8]
 800f3b0:	f002 fba5 	bl	8011afe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	68da      	ldr	r2, [r3, #12]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3bc:	425b      	negs	r3, r3
 800f3be:	441a      	add	r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68da      	ldr	r2, [r3, #12]
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d207      	bcs.n	800f3e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	689a      	ldr	r2, [r3, #8]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d8:	425b      	negs	r3, r3
 800f3da:	441a      	add	r2, r3
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d105      	bne.n	800f3f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d002      	beq.n	800f3f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	1c5a      	adds	r2, r3, #1
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3fa:	697b      	ldr	r3, [r7, #20]
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3718      	adds	r7, #24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f412:	2b00      	cmp	r3, #0
 800f414:	d018      	beq.n	800f448 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68da      	ldr	r2, [r3, #12]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41e:	441a      	add	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	68da      	ldr	r2, [r3, #12]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d303      	bcc.n	800f438 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	68d9      	ldr	r1, [r3, #12]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f440:	461a      	mov	r2, r3
 800f442:	6838      	ldr	r0, [r7, #0]
 800f444:	f002 fb5b 	bl	8011afe <memcpy>
	}
}
 800f448:	bf00      	nop
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f458:	f001 fc78 	bl	8010d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f462:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f464:	e011      	b.n	800f48a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d012      	beq.n	800f494 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	3324      	adds	r3, #36	; 0x24
 800f472:	4618      	mov	r0, r3
 800f474:	f000 fd54 	bl	800ff20 <xTaskRemoveFromEventList>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d001      	beq.n	800f482 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f47e:	f000 fe31 	bl	80100e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f482:	7bfb      	ldrb	r3, [r7, #15]
 800f484:	3b01      	subs	r3, #1
 800f486:	b2db      	uxtb	r3, r3
 800f488:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	dce9      	bgt.n	800f466 <prvUnlockQueue+0x16>
 800f492:	e000      	b.n	800f496 <prvUnlockQueue+0x46>
					break;
 800f494:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	22ff      	movs	r2, #255	; 0xff
 800f49a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f49e:	f001 fc89 	bl	8010db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f4a2:	f001 fc53 	bl	8010d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4ae:	e011      	b.n	800f4d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d012      	beq.n	800f4de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	3310      	adds	r3, #16
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 fd2f 	bl	800ff20 <xTaskRemoveFromEventList>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d001      	beq.n	800f4cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4c8:	f000 fe0c 	bl	80100e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4cc:	7bbb      	ldrb	r3, [r7, #14]
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	dce9      	bgt.n	800f4b0 <prvUnlockQueue+0x60>
 800f4dc:	e000      	b.n	800f4e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	22ff      	movs	r2, #255	; 0xff
 800f4e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4e8:	f001 fc64 	bl	8010db4 <vPortExitCritical>
}
 800f4ec:	bf00      	nop
 800f4ee:	3710      	adds	r7, #16
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4fc:	f001 fc26 	bl	8010d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f504:	2b00      	cmp	r3, #0
 800f506:	d102      	bne.n	800f50e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f508:	2301      	movs	r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	e001      	b.n	800f512 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f50e:	2300      	movs	r3, #0
 800f510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f512:	f001 fc4f 	bl	8010db4 <vPortExitCritical>

	return xReturn;
 800f516:	68fb      	ldr	r3, [r7, #12]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f528:	f001 fc10 	bl	8010d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f534:	429a      	cmp	r2, r3
 800f536:	d102      	bne.n	800f53e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f538:	2301      	movs	r3, #1
 800f53a:	60fb      	str	r3, [r7, #12]
 800f53c:	e001      	b.n	800f542 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f53e:	2300      	movs	r3, #0
 800f540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f542:	f001 fc37 	bl	8010db4 <vPortExitCritical>

	return xReturn;
 800f546:	68fb      	ldr	r3, [r7, #12]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f55a:	2300      	movs	r3, #0
 800f55c:	60fb      	str	r3, [r7, #12]
 800f55e:	e014      	b.n	800f58a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f560:	4a0f      	ldr	r2, [pc, #60]	; (800f5a0 <vQueueAddToRegistry+0x50>)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10b      	bne.n	800f584 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f56c:	490c      	ldr	r1, [pc, #48]	; (800f5a0 <vQueueAddToRegistry+0x50>)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	683a      	ldr	r2, [r7, #0]
 800f572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f576:	4a0a      	ldr	r2, [pc, #40]	; (800f5a0 <vQueueAddToRegistry+0x50>)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	4413      	add	r3, r2
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f582:	e006      	b.n	800f592 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	3301      	adds	r3, #1
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2b07      	cmp	r3, #7
 800f58e:	d9e7      	bls.n	800f560 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f590:	bf00      	nop
 800f592:	bf00      	nop
 800f594:	3714      	adds	r7, #20
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr
 800f59e:	bf00      	nop
 800f5a0:	20003d88 	.word	0x20003d88

0800f5a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5b4:	f001 fbca 	bl	8010d4c <vPortEnterCritical>
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5be:	b25b      	sxtb	r3, r3
 800f5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c4:	d103      	bne.n	800f5ce <vQueueWaitForMessageRestricted+0x2a>
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5d4:	b25b      	sxtb	r3, r3
 800f5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5da:	d103      	bne.n	800f5e4 <vQueueWaitForMessageRestricted+0x40>
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5e4:	f001 fbe6 	bl	8010db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d106      	bne.n	800f5fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	3324      	adds	r3, #36	; 0x24
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	68b9      	ldr	r1, [r7, #8]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f000 fc63 	bl	800fec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5fe:	6978      	ldr	r0, [r7, #20]
 800f600:	f7ff ff26 	bl	800f450 <prvUnlockQueue>
	}
 800f604:	bf00      	nop
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b08e      	sub	sp, #56	; 0x38
 800f610:	af04      	add	r7, sp, #16
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
 800f618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10c      	bne.n	800f63a <xTaskCreateStatic+0x2e>
	__asm volatile
 800f620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f624:	b672      	cpsid	i
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	b662      	cpsie	i
 800f634:	623b      	str	r3, [r7, #32]
}
 800f636:	bf00      	nop
 800f638:	e7fe      	b.n	800f638 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10c      	bne.n	800f65a <xTaskCreateStatic+0x4e>
	__asm volatile
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	b672      	cpsid	i
 800f646:	f383 8811 	msr	BASEPRI, r3
 800f64a:	f3bf 8f6f 	isb	sy
 800f64e:	f3bf 8f4f 	dsb	sy
 800f652:	b662      	cpsie	i
 800f654:	61fb      	str	r3, [r7, #28]
}
 800f656:	bf00      	nop
 800f658:	e7fe      	b.n	800f658 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f65a:	235c      	movs	r3, #92	; 0x5c
 800f65c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	2b5c      	cmp	r3, #92	; 0x5c
 800f662:	d00c      	beq.n	800f67e <xTaskCreateStatic+0x72>
	__asm volatile
 800f664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f668:	b672      	cpsid	i
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	b662      	cpsie	i
 800f678:	61bb      	str	r3, [r7, #24]
}
 800f67a:	bf00      	nop
 800f67c:	e7fe      	b.n	800f67c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f67e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f682:	2b00      	cmp	r3, #0
 800f684:	d01e      	beq.n	800f6c4 <xTaskCreateStatic+0xb8>
 800f686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01b      	beq.n	800f6c4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f694:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f698:	2202      	movs	r2, #2
 800f69a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f69e:	2300      	movs	r3, #0
 800f6a0:	9303      	str	r3, [sp, #12]
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a4:	9302      	str	r3, [sp, #8]
 800f6a6:	f107 0314 	add.w	r3, r7, #20
 800f6aa:	9301      	str	r3, [sp, #4]
 800f6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ae:	9300      	str	r3, [sp, #0]
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	68b9      	ldr	r1, [r7, #8]
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f000 f850 	bl	800f75c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6be:	f000 f8df 	bl	800f880 <prvAddNewTaskToReadyList>
 800f6c2:	e001      	b.n	800f6c8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6c8:	697b      	ldr	r3, [r7, #20]
	}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3728      	adds	r7, #40	; 0x28
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b08c      	sub	sp, #48	; 0x30
 800f6d6:	af04      	add	r7, sp, #16
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	603b      	str	r3, [r7, #0]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6e2:	88fb      	ldrh	r3, [r7, #6]
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f001 fc5c 	bl	8010fa4 <pvPortMalloc>
 800f6ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00e      	beq.n	800f712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f6f4:	205c      	movs	r0, #92	; 0x5c
 800f6f6:	f001 fc55 	bl	8010fa4 <pvPortMalloc>
 800f6fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d003      	beq.n	800f70a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	697a      	ldr	r2, [r7, #20]
 800f706:	631a      	str	r2, [r3, #48]	; 0x30
 800f708:	e005      	b.n	800f716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f70a:	6978      	ldr	r0, [r7, #20]
 800f70c:	f001 fd14 	bl	8011138 <vPortFree>
 800f710:	e001      	b.n	800f716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f712:	2300      	movs	r3, #0
 800f714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d017      	beq.n	800f74c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f724:	88fa      	ldrh	r2, [r7, #6]
 800f726:	2300      	movs	r3, #0
 800f728:	9303      	str	r3, [sp, #12]
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	9302      	str	r3, [sp, #8]
 800f72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f730:	9301      	str	r3, [sp, #4]
 800f732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	68b9      	ldr	r1, [r7, #8]
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f000 f80e 	bl	800f75c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f740:	69f8      	ldr	r0, [r7, #28]
 800f742:	f000 f89d 	bl	800f880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f746:	2301      	movs	r3, #1
 800f748:	61bb      	str	r3, [r7, #24]
 800f74a:	e002      	b.n	800f752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f74c:	f04f 33ff 	mov.w	r3, #4294967295
 800f750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f752:	69bb      	ldr	r3, [r7, #24]
	}
 800f754:	4618      	mov	r0, r3
 800f756:	3720      	adds	r7, #32
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b088      	sub	sp, #32
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
 800f768:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	461a      	mov	r2, r3
 800f774:	21a5      	movs	r1, #165	; 0xa5
 800f776:	f002 f8f8 	bl	801196a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f77e:	6879      	ldr	r1, [r7, #4]
 800f780:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f784:	440b      	add	r3, r1
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	4413      	add	r3, r2
 800f78a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	f023 0307 	bic.w	r3, r3, #7
 800f792:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	f003 0307 	and.w	r3, r3, #7
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00c      	beq.n	800f7b8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a2:	b672      	cpsid	i
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	b662      	cpsie	i
 800f7b2:	617b      	str	r3, [r7, #20]
}
 800f7b4:	bf00      	nop
 800f7b6:	e7fe      	b.n	800f7b6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d01f      	beq.n	800f7fe <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7be:	2300      	movs	r3, #0
 800f7c0:	61fb      	str	r3, [r7, #28]
 800f7c2:	e012      	b.n	800f7ea <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	7819      	ldrb	r1, [r3, #0]
 800f7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	3334      	adds	r3, #52	; 0x34
 800f7d4:	460a      	mov	r2, r1
 800f7d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	4413      	add	r3, r2
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d006      	beq.n	800f7f2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	61fb      	str	r3, [r7, #28]
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	2b0f      	cmp	r3, #15
 800f7ee:	d9e9      	bls.n	800f7c4 <prvInitialiseNewTask+0x68>
 800f7f0:	e000      	b.n	800f7f4 <prvInitialiseNewTask+0x98>
			{
				break;
 800f7f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7fc:	e003      	b.n	800f806 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f808:	2b37      	cmp	r3, #55	; 0x37
 800f80a:	d901      	bls.n	800f810 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f80c:	2337      	movs	r3, #55	; 0x37
 800f80e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f814:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f81a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	2200      	movs	r2, #0
 800f820:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	3304      	adds	r3, #4
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff f952 	bl	800ead0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	3318      	adds	r3, #24
 800f830:	4618      	mov	r0, r3
 800f832:	f7ff f94d 	bl	800ead0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f83a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f84a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	2200      	movs	r2, #0
 800f850:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	2200      	movs	r2, #0
 800f856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f85a:	683a      	ldr	r2, [r7, #0]
 800f85c:	68f9      	ldr	r1, [r7, #12]
 800f85e:	69b8      	ldr	r0, [r7, #24]
 800f860:	f001 f964 	bl	8010b2c <pxPortInitialiseStack>
 800f864:	4602      	mov	r2, r0
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f876:	bf00      	nop
 800f878:	3720      	adds	r7, #32
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
	...

0800f880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f888:	f001 fa60 	bl	8010d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f88c:	4b2d      	ldr	r3, [pc, #180]	; (800f944 <prvAddNewTaskToReadyList+0xc4>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3301      	adds	r3, #1
 800f892:	4a2c      	ldr	r2, [pc, #176]	; (800f944 <prvAddNewTaskToReadyList+0xc4>)
 800f894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f896:	4b2c      	ldr	r3, [pc, #176]	; (800f948 <prvAddNewTaskToReadyList+0xc8>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d109      	bne.n	800f8b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f89e:	4a2a      	ldr	r2, [pc, #168]	; (800f948 <prvAddNewTaskToReadyList+0xc8>)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8a4:	4b27      	ldr	r3, [pc, #156]	; (800f944 <prvAddNewTaskToReadyList+0xc4>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d110      	bne.n	800f8ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8ac:	f000 fc3e 	bl	801012c <prvInitialiseTaskLists>
 800f8b0:	e00d      	b.n	800f8ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8b2:	4b26      	ldr	r3, [pc, #152]	; (800f94c <prvAddNewTaskToReadyList+0xcc>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d109      	bne.n	800f8ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8ba:	4b23      	ldr	r3, [pc, #140]	; (800f948 <prvAddNewTaskToReadyList+0xc8>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d802      	bhi.n	800f8ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8c8:	4a1f      	ldr	r2, [pc, #124]	; (800f948 <prvAddNewTaskToReadyList+0xc8>)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8ce:	4b20      	ldr	r3, [pc, #128]	; (800f950 <prvAddNewTaskToReadyList+0xd0>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	4a1e      	ldr	r2, [pc, #120]	; (800f950 <prvAddNewTaskToReadyList+0xd0>)
 800f8d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f8d8:	4b1d      	ldr	r3, [pc, #116]	; (800f950 <prvAddNewTaskToReadyList+0xd0>)
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e4:	4b1b      	ldr	r3, [pc, #108]	; (800f954 <prvAddNewTaskToReadyList+0xd4>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d903      	bls.n	800f8f4 <prvAddNewTaskToReadyList+0x74>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f0:	4a18      	ldr	r2, [pc, #96]	; (800f954 <prvAddNewTaskToReadyList+0xd4>)
 800f8f2:	6013      	str	r3, [r2, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	4413      	add	r3, r2
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	4a15      	ldr	r2, [pc, #84]	; (800f958 <prvAddNewTaskToReadyList+0xd8>)
 800f902:	441a      	add	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3304      	adds	r3, #4
 800f908:	4619      	mov	r1, r3
 800f90a:	4610      	mov	r0, r2
 800f90c:	f7ff f8ed 	bl	800eaea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f910:	f001 fa50 	bl	8010db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f914:	4b0d      	ldr	r3, [pc, #52]	; (800f94c <prvAddNewTaskToReadyList+0xcc>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d00e      	beq.n	800f93a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <prvAddNewTaskToReadyList+0xc8>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f926:	429a      	cmp	r2, r3
 800f928:	d207      	bcs.n	800f93a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f92a:	4b0c      	ldr	r3, [pc, #48]	; (800f95c <prvAddNewTaskToReadyList+0xdc>)
 800f92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	f3bf 8f4f 	dsb	sy
 800f936:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	2000429c 	.word	0x2000429c
 800f948:	20003dc8 	.word	0x20003dc8
 800f94c:	200042a8 	.word	0x200042a8
 800f950:	200042b8 	.word	0x200042b8
 800f954:	200042a4 	.word	0x200042a4
 800f958:	20003dcc 	.word	0x20003dcc
 800f95c:	e000ed04 	.word	0xe000ed04

0800f960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f968:	2300      	movs	r3, #0
 800f96a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d019      	beq.n	800f9a6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f972:	4b14      	ldr	r3, [pc, #80]	; (800f9c4 <vTaskDelay+0x64>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00c      	beq.n	800f994 <vTaskDelay+0x34>
	__asm volatile
 800f97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97e:	b672      	cpsid	i
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	b662      	cpsie	i
 800f98e:	60bb      	str	r3, [r7, #8]
}
 800f990:	bf00      	nop
 800f992:	e7fe      	b.n	800f992 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f994:	f000 f884 	bl	800faa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f998:	2100      	movs	r1, #0
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fd16 	bl	80103cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9a0:	f000 f88c 	bl	800fabc <xTaskResumeAll>
 800f9a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d107      	bne.n	800f9bc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f9ac:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <vTaskDelay+0x68>)
 800f9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9b2:	601a      	str	r2, [r3, #0]
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9bc:	bf00      	nop
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	200042c4 	.word	0x200042c4
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b08a      	sub	sp, #40	; 0x28
 800f9d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9da:	463a      	mov	r2, r7
 800f9dc:	1d39      	adds	r1, r7, #4
 800f9de:	f107 0308 	add.w	r3, r7, #8
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7ff f820 	bl	800ea28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9e8:	6839      	ldr	r1, [r7, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	9202      	str	r2, [sp, #8]
 800f9f0:	9301      	str	r3, [sp, #4]
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	460a      	mov	r2, r1
 800f9fa:	4923      	ldr	r1, [pc, #140]	; (800fa88 <vTaskStartScheduler+0xbc>)
 800f9fc:	4823      	ldr	r0, [pc, #140]	; (800fa8c <vTaskStartScheduler+0xc0>)
 800f9fe:	f7ff fe05 	bl	800f60c <xTaskCreateStatic>
 800fa02:	4603      	mov	r3, r0
 800fa04:	4a22      	ldr	r2, [pc, #136]	; (800fa90 <vTaskStartScheduler+0xc4>)
 800fa06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa08:	4b21      	ldr	r3, [pc, #132]	; (800fa90 <vTaskStartScheduler+0xc4>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa10:	2301      	movs	r3, #1
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	e001      	b.n	800fa1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa16:	2300      	movs	r3, #0
 800fa18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d102      	bne.n	800fa26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa20:	f000 fd28 	bl	8010474 <xTimerCreateTimerTask>
 800fa24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d118      	bne.n	800fa5e <vTaskStartScheduler+0x92>
	__asm volatile
 800fa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa30:	b672      	cpsid	i
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	b662      	cpsie	i
 800fa40:	613b      	str	r3, [r7, #16]
}
 800fa42:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa44:	4b13      	ldr	r3, [pc, #76]	; (800fa94 <vTaskStartScheduler+0xc8>)
 800fa46:	f04f 32ff 	mov.w	r2, #4294967295
 800fa4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa4c:	4b12      	ldr	r3, [pc, #72]	; (800fa98 <vTaskStartScheduler+0xcc>)
 800fa4e:	2201      	movs	r2, #1
 800fa50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa52:	4b12      	ldr	r3, [pc, #72]	; (800fa9c <vTaskStartScheduler+0xd0>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa58:	f001 f8fa 	bl	8010c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa5c:	e010      	b.n	800fa80 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa64:	d10c      	bne.n	800fa80 <vTaskStartScheduler+0xb4>
	__asm volatile
 800fa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6a:	b672      	cpsid	i
 800fa6c:	f383 8811 	msr	BASEPRI, r3
 800fa70:	f3bf 8f6f 	isb	sy
 800fa74:	f3bf 8f4f 	dsb	sy
 800fa78:	b662      	cpsie	i
 800fa7a:	60fb      	str	r3, [r7, #12]
}
 800fa7c:	bf00      	nop
 800fa7e:	e7fe      	b.n	800fa7e <vTaskStartScheduler+0xb2>
}
 800fa80:	bf00      	nop
 800fa82:	3718      	adds	r7, #24
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	08013ffc 	.word	0x08013ffc
 800fa8c:	080100fd 	.word	0x080100fd
 800fa90:	200042c0 	.word	0x200042c0
 800fa94:	200042bc 	.word	0x200042bc
 800fa98:	200042a8 	.word	0x200042a8
 800fa9c:	200042a0 	.word	0x200042a0

0800faa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800faa0:	b480      	push	{r7}
 800faa2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800faa4:	4b04      	ldr	r3, [pc, #16]	; (800fab8 <vTaskSuspendAll+0x18>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	3301      	adds	r3, #1
 800faaa:	4a03      	ldr	r2, [pc, #12]	; (800fab8 <vTaskSuspendAll+0x18>)
 800faac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800faae:	bf00      	nop
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	200042c4 	.word	0x200042c4

0800fabc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fac2:	2300      	movs	r3, #0
 800fac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800faca:	4b43      	ldr	r3, [pc, #268]	; (800fbd8 <xTaskResumeAll+0x11c>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10c      	bne.n	800faec <xTaskResumeAll+0x30>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad6:	b672      	cpsid	i
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	b662      	cpsie	i
 800fae6:	603b      	str	r3, [r7, #0]
}
 800fae8:	bf00      	nop
 800faea:	e7fe      	b.n	800faea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800faec:	f001 f92e 	bl	8010d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800faf0:	4b39      	ldr	r3, [pc, #228]	; (800fbd8 <xTaskResumeAll+0x11c>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	4a38      	ldr	r2, [pc, #224]	; (800fbd8 <xTaskResumeAll+0x11c>)
 800faf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fafa:	4b37      	ldr	r3, [pc, #220]	; (800fbd8 <xTaskResumeAll+0x11c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d162      	bne.n	800fbc8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb02:	4b36      	ldr	r3, [pc, #216]	; (800fbdc <xTaskResumeAll+0x120>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d05e      	beq.n	800fbc8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb0a:	e02f      	b.n	800fb6c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb0c:	4b34      	ldr	r3, [pc, #208]	; (800fbe0 <xTaskResumeAll+0x124>)
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	3318      	adds	r3, #24
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7ff f843 	bl	800eba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3304      	adds	r3, #4
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff f83e 	bl	800eba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2c:	4b2d      	ldr	r3, [pc, #180]	; (800fbe4 <xTaskResumeAll+0x128>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d903      	bls.n	800fb3c <xTaskResumeAll+0x80>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb38:	4a2a      	ldr	r2, [pc, #168]	; (800fbe4 <xTaskResumeAll+0x128>)
 800fb3a:	6013      	str	r3, [r2, #0]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb40:	4613      	mov	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4a27      	ldr	r2, [pc, #156]	; (800fbe8 <xTaskResumeAll+0x12c>)
 800fb4a:	441a      	add	r2, r3
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	3304      	adds	r3, #4
 800fb50:	4619      	mov	r1, r3
 800fb52:	4610      	mov	r0, r2
 800fb54:	f7fe ffc9 	bl	800eaea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb5c:	4b23      	ldr	r3, [pc, #140]	; (800fbec <xTaskResumeAll+0x130>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d302      	bcc.n	800fb6c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800fb66:	4b22      	ldr	r3, [pc, #136]	; (800fbf0 <xTaskResumeAll+0x134>)
 800fb68:	2201      	movs	r2, #1
 800fb6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb6c:	4b1c      	ldr	r3, [pc, #112]	; (800fbe0 <xTaskResumeAll+0x124>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1cb      	bne.n	800fb0c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d001      	beq.n	800fb7e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb7a:	f000 fb77 	bl	801026c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fb7e:	4b1d      	ldr	r3, [pc, #116]	; (800fbf4 <xTaskResumeAll+0x138>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d010      	beq.n	800fbac <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb8a:	f000 f859 	bl	800fc40 <xTaskIncrementTick>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d002      	beq.n	800fb9a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800fb94:	4b16      	ldr	r3, [pc, #88]	; (800fbf0 <xTaskResumeAll+0x134>)
 800fb96:	2201      	movs	r2, #1
 800fb98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1f1      	bne.n	800fb8a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800fba6:	4b13      	ldr	r3, [pc, #76]	; (800fbf4 <xTaskResumeAll+0x138>)
 800fba8:	2200      	movs	r2, #0
 800fbaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbac:	4b10      	ldr	r3, [pc, #64]	; (800fbf0 <xTaskResumeAll+0x134>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d009      	beq.n	800fbc8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbb8:	4b0f      	ldr	r3, [pc, #60]	; (800fbf8 <xTaskResumeAll+0x13c>)
 800fbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbbe:	601a      	str	r2, [r3, #0]
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbc8:	f001 f8f4 	bl	8010db4 <vPortExitCritical>

	return xAlreadyYielded;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	200042c4 	.word	0x200042c4
 800fbdc:	2000429c 	.word	0x2000429c
 800fbe0:	2000425c 	.word	0x2000425c
 800fbe4:	200042a4 	.word	0x200042a4
 800fbe8:	20003dcc 	.word	0x20003dcc
 800fbec:	20003dc8 	.word	0x20003dc8
 800fbf0:	200042b0 	.word	0x200042b0
 800fbf4:	200042ac 	.word	0x200042ac
 800fbf8:	e000ed04 	.word	0xe000ed04

0800fbfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc02:	4b05      	ldr	r3, [pc, #20]	; (800fc18 <xTaskGetTickCount+0x1c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc08:	687b      	ldr	r3, [r7, #4]
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	370c      	adds	r7, #12
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	200042a0 	.word	0x200042a0

0800fc1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc22:	f001 f97b 	bl	8010f1c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc26:	2300      	movs	r3, #0
 800fc28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc2a:	4b04      	ldr	r3, [pc, #16]	; (800fc3c <xTaskGetTickCountFromISR+0x20>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc30:	683b      	ldr	r3, [r7, #0]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	200042a0 	.word	0x200042a0

0800fc40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc46:	2300      	movs	r3, #0
 800fc48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc4a:	4b50      	ldr	r3, [pc, #320]	; (800fd8c <xTaskIncrementTick+0x14c>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f040 808b 	bne.w	800fd6a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc54:	4b4e      	ldr	r3, [pc, #312]	; (800fd90 <xTaskIncrementTick+0x150>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc5c:	4a4c      	ldr	r2, [pc, #304]	; (800fd90 <xTaskIncrementTick+0x150>)
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d122      	bne.n	800fcae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc68:	4b4a      	ldr	r3, [pc, #296]	; (800fd94 <xTaskIncrementTick+0x154>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00c      	beq.n	800fc8c <xTaskIncrementTick+0x4c>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc76:	b672      	cpsid	i
 800fc78:	f383 8811 	msr	BASEPRI, r3
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	f3bf 8f4f 	dsb	sy
 800fc84:	b662      	cpsie	i
 800fc86:	603b      	str	r3, [r7, #0]
}
 800fc88:	bf00      	nop
 800fc8a:	e7fe      	b.n	800fc8a <xTaskIncrementTick+0x4a>
 800fc8c:	4b41      	ldr	r3, [pc, #260]	; (800fd94 <xTaskIncrementTick+0x154>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	60fb      	str	r3, [r7, #12]
 800fc92:	4b41      	ldr	r3, [pc, #260]	; (800fd98 <xTaskIncrementTick+0x158>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a3f      	ldr	r2, [pc, #252]	; (800fd94 <xTaskIncrementTick+0x154>)
 800fc98:	6013      	str	r3, [r2, #0]
 800fc9a:	4a3f      	ldr	r2, [pc, #252]	; (800fd98 <xTaskIncrementTick+0x158>)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6013      	str	r3, [r2, #0]
 800fca0:	4b3e      	ldr	r3, [pc, #248]	; (800fd9c <xTaskIncrementTick+0x15c>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	3301      	adds	r3, #1
 800fca6:	4a3d      	ldr	r2, [pc, #244]	; (800fd9c <xTaskIncrementTick+0x15c>)
 800fca8:	6013      	str	r3, [r2, #0]
 800fcaa:	f000 fadf 	bl	801026c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcae:	4b3c      	ldr	r3, [pc, #240]	; (800fda0 <xTaskIncrementTick+0x160>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d349      	bcc.n	800fd4c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcb8:	4b36      	ldr	r3, [pc, #216]	; (800fd94 <xTaskIncrementTick+0x154>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d104      	bne.n	800fccc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcc2:	4b37      	ldr	r3, [pc, #220]	; (800fda0 <xTaskIncrementTick+0x160>)
 800fcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800fcc8:	601a      	str	r2, [r3, #0]
					break;
 800fcca:	e03f      	b.n	800fd4c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fccc:	4b31      	ldr	r3, [pc, #196]	; (800fd94 <xTaskIncrementTick+0x154>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcdc:	693a      	ldr	r2, [r7, #16]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d203      	bcs.n	800fcec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fce4:	4a2e      	ldr	r2, [pc, #184]	; (800fda0 <xTaskIncrementTick+0x160>)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fcea:	e02f      	b.n	800fd4c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	3304      	adds	r3, #4
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fe ff57 	bl	800eba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d004      	beq.n	800fd08 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	3318      	adds	r3, #24
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe ff4e 	bl	800eba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd0c:	4b25      	ldr	r3, [pc, #148]	; (800fda4 <xTaskIncrementTick+0x164>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d903      	bls.n	800fd1c <xTaskIncrementTick+0xdc>
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd18:	4a22      	ldr	r2, [pc, #136]	; (800fda4 <xTaskIncrementTick+0x164>)
 800fd1a:	6013      	str	r3, [r2, #0]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd20:	4613      	mov	r3, r2
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	4413      	add	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	4a1f      	ldr	r2, [pc, #124]	; (800fda8 <xTaskIncrementTick+0x168>)
 800fd2a:	441a      	add	r2, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	3304      	adds	r3, #4
 800fd30:	4619      	mov	r1, r3
 800fd32:	4610      	mov	r0, r2
 800fd34:	f7fe fed9 	bl	800eaea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd3c:	4b1b      	ldr	r3, [pc, #108]	; (800fdac <xTaskIncrementTick+0x16c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d3b8      	bcc.n	800fcb8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800fd46:	2301      	movs	r3, #1
 800fd48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd4a:	e7b5      	b.n	800fcb8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd4c:	4b17      	ldr	r3, [pc, #92]	; (800fdac <xTaskIncrementTick+0x16c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd52:	4915      	ldr	r1, [pc, #84]	; (800fda8 <xTaskIncrementTick+0x168>)
 800fd54:	4613      	mov	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4413      	add	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	440b      	add	r3, r1
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d907      	bls.n	800fd74 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800fd64:	2301      	movs	r3, #1
 800fd66:	617b      	str	r3, [r7, #20]
 800fd68:	e004      	b.n	800fd74 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fd6a:	4b11      	ldr	r3, [pc, #68]	; (800fdb0 <xTaskIncrementTick+0x170>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	4a0f      	ldr	r2, [pc, #60]	; (800fdb0 <xTaskIncrementTick+0x170>)
 800fd72:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fd74:	4b0f      	ldr	r3, [pc, #60]	; (800fdb4 <xTaskIncrementTick+0x174>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fd80:	697b      	ldr	r3, [r7, #20]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3718      	adds	r7, #24
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	200042c4 	.word	0x200042c4
 800fd90:	200042a0 	.word	0x200042a0
 800fd94:	20004254 	.word	0x20004254
 800fd98:	20004258 	.word	0x20004258
 800fd9c:	200042b4 	.word	0x200042b4
 800fda0:	200042bc 	.word	0x200042bc
 800fda4:	200042a4 	.word	0x200042a4
 800fda8:	20003dcc 	.word	0x20003dcc
 800fdac:	20003dc8 	.word	0x20003dc8
 800fdb0:	200042ac 	.word	0x200042ac
 800fdb4:	200042b0 	.word	0x200042b0

0800fdb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b085      	sub	sp, #20
 800fdbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdbe:	4b29      	ldr	r3, [pc, #164]	; (800fe64 <vTaskSwitchContext+0xac>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d003      	beq.n	800fdce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdc6:	4b28      	ldr	r3, [pc, #160]	; (800fe68 <vTaskSwitchContext+0xb0>)
 800fdc8:	2201      	movs	r2, #1
 800fdca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdcc:	e043      	b.n	800fe56 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800fdce:	4b26      	ldr	r3, [pc, #152]	; (800fe68 <vTaskSwitchContext+0xb0>)
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdd4:	4b25      	ldr	r3, [pc, #148]	; (800fe6c <vTaskSwitchContext+0xb4>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	60fb      	str	r3, [r7, #12]
 800fdda:	e012      	b.n	800fe02 <vTaskSwitchContext+0x4a>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d10c      	bne.n	800fdfc <vTaskSwitchContext+0x44>
	__asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde6:	b672      	cpsid	i
 800fde8:	f383 8811 	msr	BASEPRI, r3
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	f3bf 8f4f 	dsb	sy
 800fdf4:	b662      	cpsie	i
 800fdf6:	607b      	str	r3, [r7, #4]
}
 800fdf8:	bf00      	nop
 800fdfa:	e7fe      	b.n	800fdfa <vTaskSwitchContext+0x42>
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	60fb      	str	r3, [r7, #12]
 800fe02:	491b      	ldr	r1, [pc, #108]	; (800fe70 <vTaskSwitchContext+0xb8>)
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	440b      	add	r3, r1
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d0e2      	beq.n	800fddc <vTaskSwitchContext+0x24>
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	4613      	mov	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	4413      	add	r3, r2
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	4a13      	ldr	r2, [pc, #76]	; (800fe70 <vTaskSwitchContext+0xb8>)
 800fe22:	4413      	add	r3, r2
 800fe24:	60bb      	str	r3, [r7, #8]
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	605a      	str	r2, [r3, #4]
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	685a      	ldr	r2, [r3, #4]
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	3308      	adds	r3, #8
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d104      	bne.n	800fe46 <vTaskSwitchContext+0x8e>
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	685a      	ldr	r2, [r3, #4]
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	605a      	str	r2, [r3, #4]
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	4a09      	ldr	r2, [pc, #36]	; (800fe74 <vTaskSwitchContext+0xbc>)
 800fe4e:	6013      	str	r3, [r2, #0]
 800fe50:	4a06      	ldr	r2, [pc, #24]	; (800fe6c <vTaskSwitchContext+0xb4>)
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6013      	str	r3, [r2, #0]
}
 800fe56:	bf00      	nop
 800fe58:	3714      	adds	r7, #20
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	200042c4 	.word	0x200042c4
 800fe68:	200042b0 	.word	0x200042b0
 800fe6c:	200042a4 	.word	0x200042a4
 800fe70:	20003dcc 	.word	0x20003dcc
 800fe74:	20003dc8 	.word	0x20003dc8

0800fe78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10c      	bne.n	800fea2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	b672      	cpsid	i
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	b662      	cpsie	i
 800fe9c:	60fb      	str	r3, [r7, #12]
}
 800fe9e:	bf00      	nop
 800fea0:	e7fe      	b.n	800fea0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fea2:	4b07      	ldr	r3, [pc, #28]	; (800fec0 <vTaskPlaceOnEventList+0x48>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	3318      	adds	r3, #24
 800fea8:	4619      	mov	r1, r3
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f7fe fe41 	bl	800eb32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800feb0:	2101      	movs	r1, #1
 800feb2:	6838      	ldr	r0, [r7, #0]
 800feb4:	f000 fa8a 	bl	80103cc <prvAddCurrentTaskToDelayedList>
}
 800feb8:	bf00      	nop
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20003dc8 	.word	0x20003dc8

0800fec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10c      	bne.n	800fef0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	b672      	cpsid	i
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	b662      	cpsie	i
 800feea:	617b      	str	r3, [r7, #20]
}
 800feec:	bf00      	nop
 800feee:	e7fe      	b.n	800feee <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fef0:	4b0a      	ldr	r3, [pc, #40]	; (800ff1c <vTaskPlaceOnEventListRestricted+0x58>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	3318      	adds	r3, #24
 800fef6:	4619      	mov	r1, r3
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f7fe fdf6 	bl	800eaea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d002      	beq.n	800ff0a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ff04:	f04f 33ff 	mov.w	r3, #4294967295
 800ff08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff0a:	6879      	ldr	r1, [r7, #4]
 800ff0c:	68b8      	ldr	r0, [r7, #8]
 800ff0e:	f000 fa5d 	bl	80103cc <prvAddCurrentTaskToDelayedList>
	}
 800ff12:	bf00      	nop
 800ff14:	3718      	adds	r7, #24
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	20003dc8 	.word	0x20003dc8

0800ff20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b086      	sub	sp, #24
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d10c      	bne.n	800ff50 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ff36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3a:	b672      	cpsid	i
 800ff3c:	f383 8811 	msr	BASEPRI, r3
 800ff40:	f3bf 8f6f 	isb	sy
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	b662      	cpsie	i
 800ff4a:	60fb      	str	r3, [r7, #12]
}
 800ff4c:	bf00      	nop
 800ff4e:	e7fe      	b.n	800ff4e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	3318      	adds	r3, #24
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fe fe25 	bl	800eba4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff5a:	4b1e      	ldr	r3, [pc, #120]	; (800ffd4 <xTaskRemoveFromEventList+0xb4>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d11d      	bne.n	800ff9e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	3304      	adds	r3, #4
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fe fe1c 	bl	800eba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff70:	4b19      	ldr	r3, [pc, #100]	; (800ffd8 <xTaskRemoveFromEventList+0xb8>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d903      	bls.n	800ff80 <xTaskRemoveFromEventList+0x60>
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7c:	4a16      	ldr	r2, [pc, #88]	; (800ffd8 <xTaskRemoveFromEventList+0xb8>)
 800ff7e:	6013      	str	r3, [r2, #0]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff84:	4613      	mov	r3, r2
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	4413      	add	r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	4a13      	ldr	r2, [pc, #76]	; (800ffdc <xTaskRemoveFromEventList+0xbc>)
 800ff8e:	441a      	add	r2, r3
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	3304      	adds	r3, #4
 800ff94:	4619      	mov	r1, r3
 800ff96:	4610      	mov	r0, r2
 800ff98:	f7fe fda7 	bl	800eaea <vListInsertEnd>
 800ff9c:	e005      	b.n	800ffaa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	3318      	adds	r3, #24
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	480e      	ldr	r0, [pc, #56]	; (800ffe0 <xTaskRemoveFromEventList+0xc0>)
 800ffa6:	f7fe fda0 	bl	800eaea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffae:	4b0d      	ldr	r3, [pc, #52]	; (800ffe4 <xTaskRemoveFromEventList+0xc4>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d905      	bls.n	800ffc4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffbc:	4b0a      	ldr	r3, [pc, #40]	; (800ffe8 <xTaskRemoveFromEventList+0xc8>)
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	601a      	str	r2, [r3, #0]
 800ffc2:	e001      	b.n	800ffc8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffc8:	697b      	ldr	r3, [r7, #20]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3718      	adds	r7, #24
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	200042c4 	.word	0x200042c4
 800ffd8:	200042a4 	.word	0x200042a4
 800ffdc:	20003dcc 	.word	0x20003dcc
 800ffe0:	2000425c 	.word	0x2000425c
 800ffe4:	20003dc8 	.word	0x20003dc8
 800ffe8:	200042b0 	.word	0x200042b0

0800ffec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fff4:	4b06      	ldr	r3, [pc, #24]	; (8010010 <vTaskInternalSetTimeOutState+0x24>)
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fffc:	4b05      	ldr	r3, [pc, #20]	; (8010014 <vTaskInternalSetTimeOutState+0x28>)
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	605a      	str	r2, [r3, #4]
}
 8010004:	bf00      	nop
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr
 8010010:	200042b4 	.word	0x200042b4
 8010014:	200042a0 	.word	0x200042a0

08010018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b088      	sub	sp, #32
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10c      	bne.n	8010042 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002c:	b672      	cpsid	i
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	b662      	cpsie	i
 801003c:	613b      	str	r3, [r7, #16]
}
 801003e:	bf00      	nop
 8010040:	e7fe      	b.n	8010040 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10c      	bne.n	8010062 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	b672      	cpsid	i
 801004e:	f383 8811 	msr	BASEPRI, r3
 8010052:	f3bf 8f6f 	isb	sy
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	b662      	cpsie	i
 801005c:	60fb      	str	r3, [r7, #12]
}
 801005e:	bf00      	nop
 8010060:	e7fe      	b.n	8010060 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010062:	f000 fe73 	bl	8010d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010066:	4b1d      	ldr	r3, [pc, #116]	; (80100dc <xTaskCheckForTimeOut+0xc4>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	69ba      	ldr	r2, [r7, #24]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007e:	d102      	bne.n	8010086 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010080:	2300      	movs	r3, #0
 8010082:	61fb      	str	r3, [r7, #28]
 8010084:	e023      	b.n	80100ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	4b15      	ldr	r3, [pc, #84]	; (80100e0 <xTaskCheckForTimeOut+0xc8>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	429a      	cmp	r2, r3
 8010090:	d007      	beq.n	80100a2 <xTaskCheckForTimeOut+0x8a>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	69ba      	ldr	r2, [r7, #24]
 8010098:	429a      	cmp	r2, r3
 801009a:	d302      	bcc.n	80100a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801009c:	2301      	movs	r3, #1
 801009e:	61fb      	str	r3, [r7, #28]
 80100a0:	e015      	b.n	80100ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d20b      	bcs.n	80100c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	1ad2      	subs	r2, r2, r3
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f7ff ff97 	bl	800ffec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100be:	2300      	movs	r3, #0
 80100c0:	61fb      	str	r3, [r7, #28]
 80100c2:	e004      	b.n	80100ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	2200      	movs	r2, #0
 80100c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100ca:	2301      	movs	r3, #1
 80100cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100ce:	f000 fe71 	bl	8010db4 <vPortExitCritical>

	return xReturn;
 80100d2:	69fb      	ldr	r3, [r7, #28]
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3720      	adds	r7, #32
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	200042a0 	.word	0x200042a0
 80100e0:	200042b4 	.word	0x200042b4

080100e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100e4:	b480      	push	{r7}
 80100e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100e8:	4b03      	ldr	r3, [pc, #12]	; (80100f8 <vTaskMissedYield+0x14>)
 80100ea:	2201      	movs	r2, #1
 80100ec:	601a      	str	r2, [r3, #0]
}
 80100ee:	bf00      	nop
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	200042b0 	.word	0x200042b0

080100fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010104:	f000 f852 	bl	80101ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010108:	4b06      	ldr	r3, [pc, #24]	; (8010124 <prvIdleTask+0x28>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d9f9      	bls.n	8010104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010110:	4b05      	ldr	r3, [pc, #20]	; (8010128 <prvIdleTask+0x2c>)
 8010112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010116:	601a      	str	r2, [r3, #0]
 8010118:	f3bf 8f4f 	dsb	sy
 801011c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010120:	e7f0      	b.n	8010104 <prvIdleTask+0x8>
 8010122:	bf00      	nop
 8010124:	20003dcc 	.word	0x20003dcc
 8010128:	e000ed04 	.word	0xe000ed04

0801012c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010132:	2300      	movs	r3, #0
 8010134:	607b      	str	r3, [r7, #4]
 8010136:	e00c      	b.n	8010152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	4613      	mov	r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4413      	add	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4a12      	ldr	r2, [pc, #72]	; (801018c <prvInitialiseTaskLists+0x60>)
 8010144:	4413      	add	r3, r2
 8010146:	4618      	mov	r0, r3
 8010148:	f7fe fca2 	bl	800ea90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	3301      	adds	r3, #1
 8010150:	607b      	str	r3, [r7, #4]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b37      	cmp	r3, #55	; 0x37
 8010156:	d9ef      	bls.n	8010138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010158:	480d      	ldr	r0, [pc, #52]	; (8010190 <prvInitialiseTaskLists+0x64>)
 801015a:	f7fe fc99 	bl	800ea90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801015e:	480d      	ldr	r0, [pc, #52]	; (8010194 <prvInitialiseTaskLists+0x68>)
 8010160:	f7fe fc96 	bl	800ea90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010164:	480c      	ldr	r0, [pc, #48]	; (8010198 <prvInitialiseTaskLists+0x6c>)
 8010166:	f7fe fc93 	bl	800ea90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801016a:	480c      	ldr	r0, [pc, #48]	; (801019c <prvInitialiseTaskLists+0x70>)
 801016c:	f7fe fc90 	bl	800ea90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010170:	480b      	ldr	r0, [pc, #44]	; (80101a0 <prvInitialiseTaskLists+0x74>)
 8010172:	f7fe fc8d 	bl	800ea90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010176:	4b0b      	ldr	r3, [pc, #44]	; (80101a4 <prvInitialiseTaskLists+0x78>)
 8010178:	4a05      	ldr	r2, [pc, #20]	; (8010190 <prvInitialiseTaskLists+0x64>)
 801017a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801017c:	4b0a      	ldr	r3, [pc, #40]	; (80101a8 <prvInitialiseTaskLists+0x7c>)
 801017e:	4a05      	ldr	r2, [pc, #20]	; (8010194 <prvInitialiseTaskLists+0x68>)
 8010180:	601a      	str	r2, [r3, #0]
}
 8010182:	bf00      	nop
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	20003dcc 	.word	0x20003dcc
 8010190:	2000422c 	.word	0x2000422c
 8010194:	20004240 	.word	0x20004240
 8010198:	2000425c 	.word	0x2000425c
 801019c:	20004270 	.word	0x20004270
 80101a0:	20004288 	.word	0x20004288
 80101a4:	20004254 	.word	0x20004254
 80101a8:	20004258 	.word	0x20004258

080101ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101b2:	e019      	b.n	80101e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101b4:	f000 fdca 	bl	8010d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101b8:	4b10      	ldr	r3, [pc, #64]	; (80101fc <prvCheckTasksWaitingTermination+0x50>)
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3304      	adds	r3, #4
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fe fced 	bl	800eba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101ca:	4b0d      	ldr	r3, [pc, #52]	; (8010200 <prvCheckTasksWaitingTermination+0x54>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	3b01      	subs	r3, #1
 80101d0:	4a0b      	ldr	r2, [pc, #44]	; (8010200 <prvCheckTasksWaitingTermination+0x54>)
 80101d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101d4:	4b0b      	ldr	r3, [pc, #44]	; (8010204 <prvCheckTasksWaitingTermination+0x58>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3b01      	subs	r3, #1
 80101da:	4a0a      	ldr	r2, [pc, #40]	; (8010204 <prvCheckTasksWaitingTermination+0x58>)
 80101dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101de:	f000 fde9 	bl	8010db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f810 	bl	8010208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101e8:	4b06      	ldr	r3, [pc, #24]	; (8010204 <prvCheckTasksWaitingTermination+0x58>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e1      	bne.n	80101b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101f0:	bf00      	nop
 80101f2:	bf00      	nop
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20004270 	.word	0x20004270
 8010200:	2000429c 	.word	0x2000429c
 8010204:	20004284 	.word	0x20004284

08010208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010216:	2b00      	cmp	r3, #0
 8010218:	d108      	bne.n	801022c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801021e:	4618      	mov	r0, r3
 8010220:	f000 ff8a 	bl	8011138 <vPortFree>
				vPortFree( pxTCB );
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 ff87 	bl	8011138 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801022a:	e01a      	b.n	8010262 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010232:	2b01      	cmp	r3, #1
 8010234:	d103      	bne.n	801023e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f000 ff7e 	bl	8011138 <vPortFree>
	}
 801023c:	e011      	b.n	8010262 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010244:	2b02      	cmp	r3, #2
 8010246:	d00c      	beq.n	8010262 <prvDeleteTCB+0x5a>
	__asm volatile
 8010248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801024c:	b672      	cpsid	i
 801024e:	f383 8811 	msr	BASEPRI, r3
 8010252:	f3bf 8f6f 	isb	sy
 8010256:	f3bf 8f4f 	dsb	sy
 801025a:	b662      	cpsie	i
 801025c:	60fb      	str	r3, [r7, #12]
}
 801025e:	bf00      	nop
 8010260:	e7fe      	b.n	8010260 <prvDeleteTCB+0x58>
	}
 8010262:	bf00      	nop
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010272:	4b0c      	ldr	r3, [pc, #48]	; (80102a4 <prvResetNextTaskUnblockTime+0x38>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d104      	bne.n	8010286 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801027c:	4b0a      	ldr	r3, [pc, #40]	; (80102a8 <prvResetNextTaskUnblockTime+0x3c>)
 801027e:	f04f 32ff 	mov.w	r2, #4294967295
 8010282:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010284:	e008      	b.n	8010298 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010286:	4b07      	ldr	r3, [pc, #28]	; (80102a4 <prvResetNextTaskUnblockTime+0x38>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	4a04      	ldr	r2, [pc, #16]	; (80102a8 <prvResetNextTaskUnblockTime+0x3c>)
 8010296:	6013      	str	r3, [r2, #0]
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	20004254 	.word	0x20004254
 80102a8:	200042bc 	.word	0x200042bc

080102ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102b2:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <xTaskGetSchedulerState+0x34>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d102      	bne.n	80102c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102ba:	2301      	movs	r3, #1
 80102bc:	607b      	str	r3, [r7, #4]
 80102be:	e008      	b.n	80102d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102c0:	4b08      	ldr	r3, [pc, #32]	; (80102e4 <xTaskGetSchedulerState+0x38>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d102      	bne.n	80102ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102c8:	2302      	movs	r3, #2
 80102ca:	607b      	str	r3, [r7, #4]
 80102cc:	e001      	b.n	80102d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102ce:	2300      	movs	r3, #0
 80102d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102d2:	687b      	ldr	r3, [r7, #4]
	}
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr
 80102e0:	200042a8 	.word	0x200042a8
 80102e4:	200042c4 	.word	0x200042c4

080102e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b086      	sub	sp, #24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102f4:	2300      	movs	r3, #0
 80102f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d05a      	beq.n	80103b4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102fe:	4b30      	ldr	r3, [pc, #192]	; (80103c0 <xTaskPriorityDisinherit+0xd8>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	429a      	cmp	r2, r3
 8010306:	d00c      	beq.n	8010322 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030c:	b672      	cpsid	i
 801030e:	f383 8811 	msr	BASEPRI, r3
 8010312:	f3bf 8f6f 	isb	sy
 8010316:	f3bf 8f4f 	dsb	sy
 801031a:	b662      	cpsie	i
 801031c:	60fb      	str	r3, [r7, #12]
}
 801031e:	bf00      	nop
 8010320:	e7fe      	b.n	8010320 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10c      	bne.n	8010344 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801032a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032e:	b672      	cpsid	i
 8010330:	f383 8811 	msr	BASEPRI, r3
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	b662      	cpsie	i
 801033e:	60bb      	str	r3, [r7, #8]
}
 8010340:	bf00      	nop
 8010342:	e7fe      	b.n	8010342 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010348:	1e5a      	subs	r2, r3, #1
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010356:	429a      	cmp	r2, r3
 8010358:	d02c      	beq.n	80103b4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801035e:	2b00      	cmp	r3, #0
 8010360:	d128      	bne.n	80103b4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	3304      	adds	r3, #4
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe fc1c 	bl	800eba4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010384:	4b0f      	ldr	r3, [pc, #60]	; (80103c4 <xTaskPriorityDisinherit+0xdc>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	429a      	cmp	r2, r3
 801038a:	d903      	bls.n	8010394 <xTaskPriorityDisinherit+0xac>
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010390:	4a0c      	ldr	r2, [pc, #48]	; (80103c4 <xTaskPriorityDisinherit+0xdc>)
 8010392:	6013      	str	r3, [r2, #0]
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010398:	4613      	mov	r3, r2
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	4413      	add	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4a09      	ldr	r2, [pc, #36]	; (80103c8 <xTaskPriorityDisinherit+0xe0>)
 80103a2:	441a      	add	r2, r3
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	3304      	adds	r3, #4
 80103a8:	4619      	mov	r1, r3
 80103aa:	4610      	mov	r0, r2
 80103ac:	f7fe fb9d 	bl	800eaea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103b0:	2301      	movs	r3, #1
 80103b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103b4:	697b      	ldr	r3, [r7, #20]
	}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3718      	adds	r7, #24
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	20003dc8 	.word	0x20003dc8
 80103c4:	200042a4 	.word	0x200042a4
 80103c8:	20003dcc 	.word	0x20003dcc

080103cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80103d6:	4b21      	ldr	r3, [pc, #132]	; (801045c <prvAddCurrentTaskToDelayedList+0x90>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103dc:	4b20      	ldr	r3, [pc, #128]	; (8010460 <prvAddCurrentTaskToDelayedList+0x94>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	3304      	adds	r3, #4
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fe fbde 	bl	800eba4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ee:	d10a      	bne.n	8010406 <prvAddCurrentTaskToDelayedList+0x3a>
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d007      	beq.n	8010406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103f6:	4b1a      	ldr	r3, [pc, #104]	; (8010460 <prvAddCurrentTaskToDelayedList+0x94>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3304      	adds	r3, #4
 80103fc:	4619      	mov	r1, r3
 80103fe:	4819      	ldr	r0, [pc, #100]	; (8010464 <prvAddCurrentTaskToDelayedList+0x98>)
 8010400:	f7fe fb73 	bl	800eaea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010404:	e026      	b.n	8010454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4413      	add	r3, r2
 801040c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801040e:	4b14      	ldr	r3, [pc, #80]	; (8010460 <prvAddCurrentTaskToDelayedList+0x94>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	429a      	cmp	r2, r3
 801041c:	d209      	bcs.n	8010432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801041e:	4b12      	ldr	r3, [pc, #72]	; (8010468 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	4b0f      	ldr	r3, [pc, #60]	; (8010460 <prvAddCurrentTaskToDelayedList+0x94>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	3304      	adds	r3, #4
 8010428:	4619      	mov	r1, r3
 801042a:	4610      	mov	r0, r2
 801042c:	f7fe fb81 	bl	800eb32 <vListInsert>
}
 8010430:	e010      	b.n	8010454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010432:	4b0e      	ldr	r3, [pc, #56]	; (801046c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	4b0a      	ldr	r3, [pc, #40]	; (8010460 <prvAddCurrentTaskToDelayedList+0x94>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	3304      	adds	r3, #4
 801043c:	4619      	mov	r1, r3
 801043e:	4610      	mov	r0, r2
 8010440:	f7fe fb77 	bl	800eb32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010444:	4b0a      	ldr	r3, [pc, #40]	; (8010470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	68ba      	ldr	r2, [r7, #8]
 801044a:	429a      	cmp	r2, r3
 801044c:	d202      	bcs.n	8010454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801044e:	4a08      	ldr	r2, [pc, #32]	; (8010470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	6013      	str	r3, [r2, #0]
}
 8010454:	bf00      	nop
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	200042a0 	.word	0x200042a0
 8010460:	20003dc8 	.word	0x20003dc8
 8010464:	20004288 	.word	0x20004288
 8010468:	20004258 	.word	0x20004258
 801046c:	20004254 	.word	0x20004254
 8010470:	200042bc 	.word	0x200042bc

08010474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b08a      	sub	sp, #40	; 0x28
 8010478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801047a:	2300      	movs	r3, #0
 801047c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801047e:	f000 fb15 	bl	8010aac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010482:	4b1d      	ldr	r3, [pc, #116]	; (80104f8 <xTimerCreateTimerTask+0x84>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d021      	beq.n	80104ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801048e:	2300      	movs	r3, #0
 8010490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010492:	1d3a      	adds	r2, r7, #4
 8010494:	f107 0108 	add.w	r1, r7, #8
 8010498:	f107 030c 	add.w	r3, r7, #12
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe fadd 	bl	800ea5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80104a2:	6879      	ldr	r1, [r7, #4]
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	68fa      	ldr	r2, [r7, #12]
 80104a8:	9202      	str	r2, [sp, #8]
 80104aa:	9301      	str	r3, [sp, #4]
 80104ac:	2302      	movs	r3, #2
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	2300      	movs	r3, #0
 80104b2:	460a      	mov	r2, r1
 80104b4:	4911      	ldr	r1, [pc, #68]	; (80104fc <xTimerCreateTimerTask+0x88>)
 80104b6:	4812      	ldr	r0, [pc, #72]	; (8010500 <xTimerCreateTimerTask+0x8c>)
 80104b8:	f7ff f8a8 	bl	800f60c <xTaskCreateStatic>
 80104bc:	4603      	mov	r3, r0
 80104be:	4a11      	ldr	r2, [pc, #68]	; (8010504 <xTimerCreateTimerTask+0x90>)
 80104c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80104c2:	4b10      	ldr	r3, [pc, #64]	; (8010504 <xTimerCreateTimerTask+0x90>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80104ca:	2301      	movs	r3, #1
 80104cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d10c      	bne.n	80104ee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80104d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d8:	b672      	cpsid	i
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	b662      	cpsie	i
 80104e8:	613b      	str	r3, [r7, #16]
}
 80104ea:	bf00      	nop
 80104ec:	e7fe      	b.n	80104ec <xTimerCreateTimerTask+0x78>
	return xReturn;
 80104ee:	697b      	ldr	r3, [r7, #20]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3718      	adds	r7, #24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	200042f8 	.word	0x200042f8
 80104fc:	08014004 	.word	0x08014004
 8010500:	08010645 	.word	0x08010645
 8010504:	200042fc 	.word	0x200042fc

08010508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b08a      	sub	sp, #40	; 0x28
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
 8010514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010516:	2300      	movs	r3, #0
 8010518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10c      	bne.n	801053a <xTimerGenericCommand+0x32>
	__asm volatile
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	b672      	cpsid	i
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	b662      	cpsie	i
 8010534:	623b      	str	r3, [r7, #32]
}
 8010536:	bf00      	nop
 8010538:	e7fe      	b.n	8010538 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801053a:	4b1a      	ldr	r3, [pc, #104]	; (80105a4 <xTimerGenericCommand+0x9c>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d02a      	beq.n	8010598 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	2b05      	cmp	r3, #5
 8010552:	dc18      	bgt.n	8010586 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010554:	f7ff feaa 	bl	80102ac <xTaskGetSchedulerState>
 8010558:	4603      	mov	r3, r0
 801055a:	2b02      	cmp	r3, #2
 801055c:	d109      	bne.n	8010572 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801055e:	4b11      	ldr	r3, [pc, #68]	; (80105a4 <xTimerGenericCommand+0x9c>)
 8010560:	6818      	ldr	r0, [r3, #0]
 8010562:	f107 0110 	add.w	r1, r7, #16
 8010566:	2300      	movs	r3, #0
 8010568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801056a:	f7fe fc55 	bl	800ee18 <xQueueGenericSend>
 801056e:	6278      	str	r0, [r7, #36]	; 0x24
 8010570:	e012      	b.n	8010598 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010572:	4b0c      	ldr	r3, [pc, #48]	; (80105a4 <xTimerGenericCommand+0x9c>)
 8010574:	6818      	ldr	r0, [r3, #0]
 8010576:	f107 0110 	add.w	r1, r7, #16
 801057a:	2300      	movs	r3, #0
 801057c:	2200      	movs	r2, #0
 801057e:	f7fe fc4b 	bl	800ee18 <xQueueGenericSend>
 8010582:	6278      	str	r0, [r7, #36]	; 0x24
 8010584:	e008      	b.n	8010598 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010586:	4b07      	ldr	r3, [pc, #28]	; (80105a4 <xTimerGenericCommand+0x9c>)
 8010588:	6818      	ldr	r0, [r3, #0]
 801058a:	f107 0110 	add.w	r1, r7, #16
 801058e:	2300      	movs	r3, #0
 8010590:	683a      	ldr	r2, [r7, #0]
 8010592:	f7fe fd47 	bl	800f024 <xQueueGenericSendFromISR>
 8010596:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801059a:	4618      	mov	r0, r3
 801059c:	3728      	adds	r7, #40	; 0x28
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	200042f8 	.word	0x200042f8

080105a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b088      	sub	sp, #32
 80105ac:	af02      	add	r7, sp, #8
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105b2:	4b23      	ldr	r3, [pc, #140]	; (8010640 <prvProcessExpiredTimer+0x98>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	3304      	adds	r3, #4
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7fe faef 	bl	800eba4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105cc:	f003 0304 	and.w	r3, r3, #4
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d024      	beq.n	801061e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	699a      	ldr	r2, [r3, #24]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	18d1      	adds	r1, r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	6978      	ldr	r0, [r7, #20]
 80105e2:	f000 f8d3 	bl	801078c <prvInsertTimerInActiveList>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d021      	beq.n	8010630 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105ec:	2300      	movs	r3, #0
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	2300      	movs	r3, #0
 80105f2:	687a      	ldr	r2, [r7, #4]
 80105f4:	2100      	movs	r1, #0
 80105f6:	6978      	ldr	r0, [r7, #20]
 80105f8:	f7ff ff86 	bl	8010508 <xTimerGenericCommand>
 80105fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d115      	bne.n	8010630 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8010604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010608:	b672      	cpsid	i
 801060a:	f383 8811 	msr	BASEPRI, r3
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f3bf 8f4f 	dsb	sy
 8010616:	b662      	cpsie	i
 8010618:	60fb      	str	r3, [r7, #12]
}
 801061a:	bf00      	nop
 801061c:	e7fe      	b.n	801061c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010624:	f023 0301 	bic.w	r3, r3, #1
 8010628:	b2da      	uxtb	r2, r3
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	6a1b      	ldr	r3, [r3, #32]
 8010634:	6978      	ldr	r0, [r7, #20]
 8010636:	4798      	blx	r3
}
 8010638:	bf00      	nop
 801063a:	3718      	adds	r7, #24
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	200042f0 	.word	0x200042f0

08010644 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801064c:	f107 0308 	add.w	r3, r7, #8
 8010650:	4618      	mov	r0, r3
 8010652:	f000 f857 	bl	8010704 <prvGetNextExpireTime>
 8010656:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	4619      	mov	r1, r3
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f000 f803 	bl	8010668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010662:	f000 f8d5 	bl	8010810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010666:	e7f1      	b.n	801064c <prvTimerTask+0x8>

08010668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010672:	f7ff fa15 	bl	800faa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010676:	f107 0308 	add.w	r3, r7, #8
 801067a:	4618      	mov	r0, r3
 801067c:	f000 f866 	bl	801074c <prvSampleTimeNow>
 8010680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d130      	bne.n	80106ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d10a      	bne.n	80106a4 <prvProcessTimerOrBlockTask+0x3c>
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	429a      	cmp	r2, r3
 8010694:	d806      	bhi.n	80106a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010696:	f7ff fa11 	bl	800fabc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801069a:	68f9      	ldr	r1, [r7, #12]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7ff ff83 	bl	80105a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80106a2:	e024      	b.n	80106ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d008      	beq.n	80106bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80106aa:	4b13      	ldr	r3, [pc, #76]	; (80106f8 <prvProcessTimerOrBlockTask+0x90>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <prvProcessTimerOrBlockTask+0x50>
 80106b4:	2301      	movs	r3, #1
 80106b6:	e000      	b.n	80106ba <prvProcessTimerOrBlockTask+0x52>
 80106b8:	2300      	movs	r3, #0
 80106ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80106bc:	4b0f      	ldr	r3, [pc, #60]	; (80106fc <prvProcessTimerOrBlockTask+0x94>)
 80106be:	6818      	ldr	r0, [r3, #0]
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	683a      	ldr	r2, [r7, #0]
 80106c8:	4619      	mov	r1, r3
 80106ca:	f7fe ff6b 	bl	800f5a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80106ce:	f7ff f9f5 	bl	800fabc <xTaskResumeAll>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10a      	bne.n	80106ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80106d8:	4b09      	ldr	r3, [pc, #36]	; (8010700 <prvProcessTimerOrBlockTask+0x98>)
 80106da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106de:	601a      	str	r2, [r3, #0]
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	f3bf 8f6f 	isb	sy
}
 80106e8:	e001      	b.n	80106ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80106ea:	f7ff f9e7 	bl	800fabc <xTaskResumeAll>
}
 80106ee:	bf00      	nop
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	200042f4 	.word	0x200042f4
 80106fc:	200042f8 	.word	0x200042f8
 8010700:	e000ed04 	.word	0xe000ed04

08010704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801070c:	4b0e      	ldr	r3, [pc, #56]	; (8010748 <prvGetNextExpireTime+0x44>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d101      	bne.n	801071a <prvGetNextExpireTime+0x16>
 8010716:	2201      	movs	r2, #1
 8010718:	e000      	b.n	801071c <prvGetNextExpireTime+0x18>
 801071a:	2200      	movs	r2, #0
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d105      	bne.n	8010734 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010728:	4b07      	ldr	r3, [pc, #28]	; (8010748 <prvGetNextExpireTime+0x44>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	60fb      	str	r3, [r7, #12]
 8010732:	e001      	b.n	8010738 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010734:	2300      	movs	r3, #0
 8010736:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010738:	68fb      	ldr	r3, [r7, #12]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3714      	adds	r7, #20
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	200042f0 	.word	0x200042f0

0801074c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010754:	f7ff fa52 	bl	800fbfc <xTaskGetTickCount>
 8010758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801075a:	4b0b      	ldr	r3, [pc, #44]	; (8010788 <prvSampleTimeNow+0x3c>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	68fa      	ldr	r2, [r7, #12]
 8010760:	429a      	cmp	r2, r3
 8010762:	d205      	bcs.n	8010770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010764:	f000 f93c 	bl	80109e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2201      	movs	r2, #1
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	e002      	b.n	8010776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010776:	4a04      	ldr	r2, [pc, #16]	; (8010788 <prvSampleTimeNow+0x3c>)
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801077c:	68fb      	ldr	r3, [r7, #12]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	20004300 	.word	0x20004300

0801078c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b086      	sub	sp, #24
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801079a:	2300      	movs	r3, #0
 801079c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68ba      	ldr	r2, [r7, #8]
 80107a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d812      	bhi.n	80107d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	1ad2      	subs	r2, r2, r3
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	699b      	ldr	r3, [r3, #24]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d302      	bcc.n	80107c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80107c0:	2301      	movs	r3, #1
 80107c2:	617b      	str	r3, [r7, #20]
 80107c4:	e01b      	b.n	80107fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80107c6:	4b10      	ldr	r3, [pc, #64]	; (8010808 <prvInsertTimerInActiveList+0x7c>)
 80107c8:	681a      	ldr	r2, [r3, #0]
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	3304      	adds	r3, #4
 80107ce:	4619      	mov	r1, r3
 80107d0:	4610      	mov	r0, r2
 80107d2:	f7fe f9ae 	bl	800eb32 <vListInsert>
 80107d6:	e012      	b.n	80107fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d206      	bcs.n	80107ee <prvInsertTimerInActiveList+0x62>
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d302      	bcc.n	80107ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80107e8:	2301      	movs	r3, #1
 80107ea:	617b      	str	r3, [r7, #20]
 80107ec:	e007      	b.n	80107fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107ee:	4b07      	ldr	r3, [pc, #28]	; (801080c <prvInsertTimerInActiveList+0x80>)
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	3304      	adds	r3, #4
 80107f6:	4619      	mov	r1, r3
 80107f8:	4610      	mov	r0, r2
 80107fa:	f7fe f99a 	bl	800eb32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80107fe:	697b      	ldr	r3, [r7, #20]
}
 8010800:	4618      	mov	r0, r3
 8010802:	3718      	adds	r7, #24
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}
 8010808:	200042f4 	.word	0x200042f4
 801080c:	200042f0 	.word	0x200042f0

08010810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b08e      	sub	sp, #56	; 0x38
 8010814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010816:	e0d0      	b.n	80109ba <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	da1a      	bge.n	8010854 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801081e:	1d3b      	adds	r3, r7, #4
 8010820:	3304      	adds	r3, #4
 8010822:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010826:	2b00      	cmp	r3, #0
 8010828:	d10c      	bne.n	8010844 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801082a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082e:	b672      	cpsid	i
 8010830:	f383 8811 	msr	BASEPRI, r3
 8010834:	f3bf 8f6f 	isb	sy
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	b662      	cpsie	i
 801083e:	61fb      	str	r3, [r7, #28]
}
 8010840:	bf00      	nop
 8010842:	e7fe      	b.n	8010842 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801084a:	6850      	ldr	r0, [r2, #4]
 801084c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801084e:	6892      	ldr	r2, [r2, #8]
 8010850:	4611      	mov	r1, r2
 8010852:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	f2c0 80af 	blt.w	80109ba <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	695b      	ldr	r3, [r3, #20]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d004      	beq.n	8010872 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086a:	3304      	adds	r3, #4
 801086c:	4618      	mov	r0, r3
 801086e:	f7fe f999 	bl	800eba4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010872:	463b      	mov	r3, r7
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff ff69 	bl	801074c <prvSampleTimeNow>
 801087a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2b09      	cmp	r3, #9
 8010880:	f200 809a 	bhi.w	80109b8 <prvProcessReceivedCommands+0x1a8>
 8010884:	a201      	add	r2, pc, #4	; (adr r2, 801088c <prvProcessReceivedCommands+0x7c>)
 8010886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801088a:	bf00      	nop
 801088c:	080108b5 	.word	0x080108b5
 8010890:	080108b5 	.word	0x080108b5
 8010894:	080108b5 	.word	0x080108b5
 8010898:	0801092d 	.word	0x0801092d
 801089c:	08010941 	.word	0x08010941
 80108a0:	0801098f 	.word	0x0801098f
 80108a4:	080108b5 	.word	0x080108b5
 80108a8:	080108b5 	.word	0x080108b5
 80108ac:	0801092d 	.word	0x0801092d
 80108b0:	08010941 	.word	0x08010941
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108ba:	f043 0301 	orr.w	r3, r3, #1
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	18d1      	adds	r1, r2, r3
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108d4:	f7ff ff5a 	bl	801078c <prvInsertTimerInActiveList>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d06d      	beq.n	80109ba <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	6a1b      	ldr	r3, [r3, #32]
 80108e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108ec:	f003 0304 	and.w	r3, r3, #4
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d062      	beq.n	80109ba <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	441a      	add	r2, r3
 80108fc:	2300      	movs	r3, #0
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	2300      	movs	r3, #0
 8010902:	2100      	movs	r1, #0
 8010904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010906:	f7ff fdff 	bl	8010508 <xTimerGenericCommand>
 801090a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801090c:	6a3b      	ldr	r3, [r7, #32]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d153      	bne.n	80109ba <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010916:	b672      	cpsid	i
 8010918:	f383 8811 	msr	BASEPRI, r3
 801091c:	f3bf 8f6f 	isb	sy
 8010920:	f3bf 8f4f 	dsb	sy
 8010924:	b662      	cpsie	i
 8010926:	61bb      	str	r3, [r7, #24]
}
 8010928:	bf00      	nop
 801092a:	e7fe      	b.n	801092a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010932:	f023 0301 	bic.w	r3, r3, #1
 8010936:	b2da      	uxtb	r2, r3
 8010938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801093e:	e03c      	b.n	80109ba <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010946:	f043 0301 	orr.w	r3, r3, #1
 801094a:	b2da      	uxtb	r2, r3
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010956:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095a:	699b      	ldr	r3, [r3, #24]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10c      	bne.n	801097a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	b672      	cpsid	i
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	b662      	cpsie	i
 8010974:	617b      	str	r3, [r7, #20]
}
 8010976:	bf00      	nop
 8010978:	e7fe      	b.n	8010978 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097c:	699a      	ldr	r2, [r3, #24]
 801097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010980:	18d1      	adds	r1, r2, r3
 8010982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010988:	f7ff ff00 	bl	801078c <prvInsertTimerInActiveList>
					break;
 801098c:	e015      	b.n	80109ba <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010994:	f003 0302 	and.w	r3, r3, #2
 8010998:	2b00      	cmp	r3, #0
 801099a:	d103      	bne.n	80109a4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 801099c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801099e:	f000 fbcb 	bl	8011138 <vPortFree>
 80109a2:	e00a      	b.n	80109ba <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109aa:	f023 0301 	bic.w	r3, r3, #1
 80109ae:	b2da      	uxtb	r2, r3
 80109b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80109b6:	e000      	b.n	80109ba <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80109b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109ba:	4b08      	ldr	r3, [pc, #32]	; (80109dc <prvProcessReceivedCommands+0x1cc>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	1d39      	adds	r1, r7, #4
 80109c0:	2200      	movs	r2, #0
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe fbce 	bl	800f164 <xQueueReceive>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	f47f af24 	bne.w	8010818 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80109d0:	bf00      	nop
 80109d2:	bf00      	nop
 80109d4:	3730      	adds	r7, #48	; 0x30
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	200042f8 	.word	0x200042f8

080109e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b088      	sub	sp, #32
 80109e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109e6:	e04a      	b.n	8010a7e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109e8:	4b2e      	ldr	r3, [pc, #184]	; (8010aa4 <prvSwitchTimerLists+0xc4>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109f2:	4b2c      	ldr	r3, [pc, #176]	; (8010aa4 <prvSwitchTimerLists+0xc4>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	3304      	adds	r3, #4
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fe f8cf 	bl	800eba4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	6a1b      	ldr	r3, [r3, #32]
 8010a0a:	68f8      	ldr	r0, [r7, #12]
 8010a0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a14:	f003 0304 	and.w	r3, r3, #4
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d030      	beq.n	8010a7e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	699b      	ldr	r3, [r3, #24]
 8010a20:	693a      	ldr	r2, [r7, #16]
 8010a22:	4413      	add	r3, r2
 8010a24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a26:	68ba      	ldr	r2, [r7, #8]
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d90e      	bls.n	8010a4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	68ba      	ldr	r2, [r7, #8]
 8010a32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a3a:	4b1a      	ldr	r3, [pc, #104]	; (8010aa4 <prvSwitchTimerLists+0xc4>)
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	3304      	adds	r3, #4
 8010a42:	4619      	mov	r1, r3
 8010a44:	4610      	mov	r0, r2
 8010a46:	f7fe f874 	bl	800eb32 <vListInsert>
 8010a4a:	e018      	b.n	8010a7e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	2300      	movs	r3, #0
 8010a52:	693a      	ldr	r2, [r7, #16]
 8010a54:	2100      	movs	r1, #0
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f7ff fd56 	bl	8010508 <xTimerGenericCommand>
 8010a5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d10c      	bne.n	8010a7e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a68:	b672      	cpsid	i
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	b662      	cpsie	i
 8010a78:	603b      	str	r3, [r7, #0]
}
 8010a7a:	bf00      	nop
 8010a7c:	e7fe      	b.n	8010a7c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a7e:	4b09      	ldr	r3, [pc, #36]	; (8010aa4 <prvSwitchTimerLists+0xc4>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1af      	bne.n	80109e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a88:	4b06      	ldr	r3, [pc, #24]	; (8010aa4 <prvSwitchTimerLists+0xc4>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a8e:	4b06      	ldr	r3, [pc, #24]	; (8010aa8 <prvSwitchTimerLists+0xc8>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4a04      	ldr	r2, [pc, #16]	; (8010aa4 <prvSwitchTimerLists+0xc4>)
 8010a94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a96:	4a04      	ldr	r2, [pc, #16]	; (8010aa8 <prvSwitchTimerLists+0xc8>)
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	6013      	str	r3, [r2, #0]
}
 8010a9c:	bf00      	nop
 8010a9e:	3718      	adds	r7, #24
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	200042f0 	.word	0x200042f0
 8010aa8:	200042f4 	.word	0x200042f4

08010aac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010ab2:	f000 f94b 	bl	8010d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010ab6:	4b15      	ldr	r3, [pc, #84]	; (8010b0c <prvCheckForValidListAndQueue+0x60>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d120      	bne.n	8010b00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010abe:	4814      	ldr	r0, [pc, #80]	; (8010b10 <prvCheckForValidListAndQueue+0x64>)
 8010ac0:	f7fd ffe6 	bl	800ea90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010ac4:	4813      	ldr	r0, [pc, #76]	; (8010b14 <prvCheckForValidListAndQueue+0x68>)
 8010ac6:	f7fd ffe3 	bl	800ea90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010aca:	4b13      	ldr	r3, [pc, #76]	; (8010b18 <prvCheckForValidListAndQueue+0x6c>)
 8010acc:	4a10      	ldr	r2, [pc, #64]	; (8010b10 <prvCheckForValidListAndQueue+0x64>)
 8010ace:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ad0:	4b12      	ldr	r3, [pc, #72]	; (8010b1c <prvCheckForValidListAndQueue+0x70>)
 8010ad2:	4a10      	ldr	r2, [pc, #64]	; (8010b14 <prvCheckForValidListAndQueue+0x68>)
 8010ad4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	4b11      	ldr	r3, [pc, #68]	; (8010b20 <prvCheckForValidListAndQueue+0x74>)
 8010adc:	4a11      	ldr	r2, [pc, #68]	; (8010b24 <prvCheckForValidListAndQueue+0x78>)
 8010ade:	2110      	movs	r1, #16
 8010ae0:	200a      	movs	r0, #10
 8010ae2:	f7fe f8f3 	bl	800eccc <xQueueGenericCreateStatic>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	4a08      	ldr	r2, [pc, #32]	; (8010b0c <prvCheckForValidListAndQueue+0x60>)
 8010aea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010aec:	4b07      	ldr	r3, [pc, #28]	; (8010b0c <prvCheckForValidListAndQueue+0x60>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d005      	beq.n	8010b00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010af4:	4b05      	ldr	r3, [pc, #20]	; (8010b0c <prvCheckForValidListAndQueue+0x60>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	490b      	ldr	r1, [pc, #44]	; (8010b28 <prvCheckForValidListAndQueue+0x7c>)
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fe fd28 	bl	800f550 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b00:	f000 f958 	bl	8010db4 <vPortExitCritical>
}
 8010b04:	bf00      	nop
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	200042f8 	.word	0x200042f8
 8010b10:	200042c8 	.word	0x200042c8
 8010b14:	200042dc 	.word	0x200042dc
 8010b18:	200042f0 	.word	0x200042f0
 8010b1c:	200042f4 	.word	0x200042f4
 8010b20:	200043a4 	.word	0x200043a4
 8010b24:	20004304 	.word	0x20004304
 8010b28:	0801400c 	.word	0x0801400c

08010b2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	3b04      	subs	r3, #4
 8010b3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3b04      	subs	r3, #4
 8010b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	f023 0201 	bic.w	r2, r3, #1
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3b04      	subs	r3, #4
 8010b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b5c:	4a0c      	ldr	r2, [pc, #48]	; (8010b90 <pxPortInitialiseStack+0x64>)
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	3b14      	subs	r3, #20
 8010b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	3b04      	subs	r3, #4
 8010b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f06f 0202 	mvn.w	r2, #2
 8010b7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	3b20      	subs	r3, #32
 8010b80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b82:	68fb      	ldr	r3, [r7, #12]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr
 8010b90:	08010b95 	.word	0x08010b95

08010b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b94:	b480      	push	{r7}
 8010b96:	b085      	sub	sp, #20
 8010b98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b9e:	4b14      	ldr	r3, [pc, #80]	; (8010bf0 <prvTaskExitError+0x5c>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba6:	d00c      	beq.n	8010bc2 <prvTaskExitError+0x2e>
	__asm volatile
 8010ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bac:	b672      	cpsid	i
 8010bae:	f383 8811 	msr	BASEPRI, r3
 8010bb2:	f3bf 8f6f 	isb	sy
 8010bb6:	f3bf 8f4f 	dsb	sy
 8010bba:	b662      	cpsie	i
 8010bbc:	60fb      	str	r3, [r7, #12]
}
 8010bbe:	bf00      	nop
 8010bc0:	e7fe      	b.n	8010bc0 <prvTaskExitError+0x2c>
	__asm volatile
 8010bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc6:	b672      	cpsid	i
 8010bc8:	f383 8811 	msr	BASEPRI, r3
 8010bcc:	f3bf 8f6f 	isb	sy
 8010bd0:	f3bf 8f4f 	dsb	sy
 8010bd4:	b662      	cpsie	i
 8010bd6:	60bb      	str	r3, [r7, #8]
}
 8010bd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010bda:	bf00      	nop
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d0fc      	beq.n	8010bdc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010be2:	bf00      	nop
 8010be4:	bf00      	nop
 8010be6:	3714      	adds	r7, #20
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr
 8010bf0:	2000025c 	.word	0x2000025c
	...

08010c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c00:	4b07      	ldr	r3, [pc, #28]	; (8010c20 <pxCurrentTCBConst2>)
 8010c02:	6819      	ldr	r1, [r3, #0]
 8010c04:	6808      	ldr	r0, [r1, #0]
 8010c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c0a:	f380 8809 	msr	PSP, r0
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	f380 8811 	msr	BASEPRI, r0
 8010c1a:	4770      	bx	lr
 8010c1c:	f3af 8000 	nop.w

08010c20 <pxCurrentTCBConst2>:
 8010c20:	20003dc8 	.word	0x20003dc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c24:	bf00      	nop
 8010c26:	bf00      	nop

08010c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c28:	4808      	ldr	r0, [pc, #32]	; (8010c4c <prvPortStartFirstTask+0x24>)
 8010c2a:	6800      	ldr	r0, [r0, #0]
 8010c2c:	6800      	ldr	r0, [r0, #0]
 8010c2e:	f380 8808 	msr	MSP, r0
 8010c32:	f04f 0000 	mov.w	r0, #0
 8010c36:	f380 8814 	msr	CONTROL, r0
 8010c3a:	b662      	cpsie	i
 8010c3c:	b661      	cpsie	f
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	df00      	svc	0
 8010c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c4a:	bf00      	nop
 8010c4c:	e000ed08 	.word	0xe000ed08

08010c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c56:	4b37      	ldr	r3, [pc, #220]	; (8010d34 <xPortStartScheduler+0xe4>)
 8010c58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	22ff      	movs	r2, #255	; 0xff
 8010c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c70:	78fb      	ldrb	r3, [r7, #3]
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c78:	b2da      	uxtb	r2, r3
 8010c7a:	4b2f      	ldr	r3, [pc, #188]	; (8010d38 <xPortStartScheduler+0xe8>)
 8010c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c7e:	4b2f      	ldr	r3, [pc, #188]	; (8010d3c <xPortStartScheduler+0xec>)
 8010c80:	2207      	movs	r2, #7
 8010c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c84:	e009      	b.n	8010c9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010c86:	4b2d      	ldr	r3, [pc, #180]	; (8010d3c <xPortStartScheduler+0xec>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	4a2b      	ldr	r2, [pc, #172]	; (8010d3c <xPortStartScheduler+0xec>)
 8010c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c90:	78fb      	ldrb	r3, [r7, #3]
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	005b      	lsls	r3, r3, #1
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c9a:	78fb      	ldrb	r3, [r7, #3]
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ca2:	2b80      	cmp	r3, #128	; 0x80
 8010ca4:	d0ef      	beq.n	8010c86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ca6:	4b25      	ldr	r3, [pc, #148]	; (8010d3c <xPortStartScheduler+0xec>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f1c3 0307 	rsb	r3, r3, #7
 8010cae:	2b04      	cmp	r3, #4
 8010cb0:	d00c      	beq.n	8010ccc <xPortStartScheduler+0x7c>
	__asm volatile
 8010cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb6:	b672      	cpsid	i
 8010cb8:	f383 8811 	msr	BASEPRI, r3
 8010cbc:	f3bf 8f6f 	isb	sy
 8010cc0:	f3bf 8f4f 	dsb	sy
 8010cc4:	b662      	cpsie	i
 8010cc6:	60bb      	str	r3, [r7, #8]
}
 8010cc8:	bf00      	nop
 8010cca:	e7fe      	b.n	8010cca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ccc:	4b1b      	ldr	r3, [pc, #108]	; (8010d3c <xPortStartScheduler+0xec>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	021b      	lsls	r3, r3, #8
 8010cd2:	4a1a      	ldr	r2, [pc, #104]	; (8010d3c <xPortStartScheduler+0xec>)
 8010cd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010cd6:	4b19      	ldr	r3, [pc, #100]	; (8010d3c <xPortStartScheduler+0xec>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010cde:	4a17      	ldr	r2, [pc, #92]	; (8010d3c <xPortStartScheduler+0xec>)
 8010ce0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cea:	4b15      	ldr	r3, [pc, #84]	; (8010d40 <xPortStartScheduler+0xf0>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4a14      	ldr	r2, [pc, #80]	; (8010d40 <xPortStartScheduler+0xf0>)
 8010cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010cf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010cf6:	4b12      	ldr	r3, [pc, #72]	; (8010d40 <xPortStartScheduler+0xf0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4a11      	ldr	r2, [pc, #68]	; (8010d40 <xPortStartScheduler+0xf0>)
 8010cfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d02:	f000 f8dd 	bl	8010ec0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d06:	4b0f      	ldr	r3, [pc, #60]	; (8010d44 <xPortStartScheduler+0xf4>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d0c:	f000 f8fc 	bl	8010f08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d10:	4b0d      	ldr	r3, [pc, #52]	; (8010d48 <xPortStartScheduler+0xf8>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a0c      	ldr	r2, [pc, #48]	; (8010d48 <xPortStartScheduler+0xf8>)
 8010d16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d1c:	f7ff ff84 	bl	8010c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d20:	f7ff f84a 	bl	800fdb8 <vTaskSwitchContext>
	prvTaskExitError();
 8010d24:	f7ff ff36 	bl	8010b94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d28:	2300      	movs	r3, #0
}
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3710      	adds	r7, #16
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	e000e400 	.word	0xe000e400
 8010d38:	200043f4 	.word	0x200043f4
 8010d3c:	200043f8 	.word	0x200043f8
 8010d40:	e000ed20 	.word	0xe000ed20
 8010d44:	2000025c 	.word	0x2000025c
 8010d48:	e000ef34 	.word	0xe000ef34

08010d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
	__asm volatile
 8010d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d56:	b672      	cpsid	i
 8010d58:	f383 8811 	msr	BASEPRI, r3
 8010d5c:	f3bf 8f6f 	isb	sy
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	b662      	cpsie	i
 8010d66:	607b      	str	r3, [r7, #4]
}
 8010d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d6a:	4b10      	ldr	r3, [pc, #64]	; (8010dac <vPortEnterCritical+0x60>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	4a0e      	ldr	r2, [pc, #56]	; (8010dac <vPortEnterCritical+0x60>)
 8010d72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d74:	4b0d      	ldr	r3, [pc, #52]	; (8010dac <vPortEnterCritical+0x60>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d111      	bne.n	8010da0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d7c:	4b0c      	ldr	r3, [pc, #48]	; (8010db0 <vPortEnterCritical+0x64>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00c      	beq.n	8010da0 <vPortEnterCritical+0x54>
	__asm volatile
 8010d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8a:	b672      	cpsid	i
 8010d8c:	f383 8811 	msr	BASEPRI, r3
 8010d90:	f3bf 8f6f 	isb	sy
 8010d94:	f3bf 8f4f 	dsb	sy
 8010d98:	b662      	cpsie	i
 8010d9a:	603b      	str	r3, [r7, #0]
}
 8010d9c:	bf00      	nop
 8010d9e:	e7fe      	b.n	8010d9e <vPortEnterCritical+0x52>
	}
}
 8010da0:	bf00      	nop
 8010da2:	370c      	adds	r7, #12
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr
 8010dac:	2000025c 	.word	0x2000025c
 8010db0:	e000ed04 	.word	0xe000ed04

08010db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010dba:	4b13      	ldr	r3, [pc, #76]	; (8010e08 <vPortExitCritical+0x54>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d10c      	bne.n	8010ddc <vPortExitCritical+0x28>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc6:	b672      	cpsid	i
 8010dc8:	f383 8811 	msr	BASEPRI, r3
 8010dcc:	f3bf 8f6f 	isb	sy
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	b662      	cpsie	i
 8010dd6:	607b      	str	r3, [r7, #4]
}
 8010dd8:	bf00      	nop
 8010dda:	e7fe      	b.n	8010dda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010ddc:	4b0a      	ldr	r3, [pc, #40]	; (8010e08 <vPortExitCritical+0x54>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	3b01      	subs	r3, #1
 8010de2:	4a09      	ldr	r2, [pc, #36]	; (8010e08 <vPortExitCritical+0x54>)
 8010de4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010de6:	4b08      	ldr	r3, [pc, #32]	; (8010e08 <vPortExitCritical+0x54>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d105      	bne.n	8010dfa <vPortExitCritical+0x46>
 8010dee:	2300      	movs	r3, #0
 8010df0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	f383 8811 	msr	BASEPRI, r3
}
 8010df8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010dfa:	bf00      	nop
 8010dfc:	370c      	adds	r7, #12
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	2000025c 	.word	0x2000025c
 8010e0c:	00000000 	.word	0x00000000

08010e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e10:	f3ef 8009 	mrs	r0, PSP
 8010e14:	f3bf 8f6f 	isb	sy
 8010e18:	4b15      	ldr	r3, [pc, #84]	; (8010e70 <pxCurrentTCBConst>)
 8010e1a:	681a      	ldr	r2, [r3, #0]
 8010e1c:	f01e 0f10 	tst.w	lr, #16
 8010e20:	bf08      	it	eq
 8010e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2a:	6010      	str	r0, [r2, #0]
 8010e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010e34:	b672      	cpsid	i
 8010e36:	f380 8811 	msr	BASEPRI, r0
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	f3bf 8f6f 	isb	sy
 8010e42:	b662      	cpsie	i
 8010e44:	f7fe ffb8 	bl	800fdb8 <vTaskSwitchContext>
 8010e48:	f04f 0000 	mov.w	r0, #0
 8010e4c:	f380 8811 	msr	BASEPRI, r0
 8010e50:	bc09      	pop	{r0, r3}
 8010e52:	6819      	ldr	r1, [r3, #0]
 8010e54:	6808      	ldr	r0, [r1, #0]
 8010e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5a:	f01e 0f10 	tst.w	lr, #16
 8010e5e:	bf08      	it	eq
 8010e60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e64:	f380 8809 	msr	PSP, r0
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop

08010e70 <pxCurrentTCBConst>:
 8010e70:	20003dc8 	.word	0x20003dc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e74:	bf00      	nop
 8010e76:	bf00      	nop

08010e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e82:	b672      	cpsid	i
 8010e84:	f383 8811 	msr	BASEPRI, r3
 8010e88:	f3bf 8f6f 	isb	sy
 8010e8c:	f3bf 8f4f 	dsb	sy
 8010e90:	b662      	cpsie	i
 8010e92:	607b      	str	r3, [r7, #4]
}
 8010e94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e96:	f7fe fed3 	bl	800fc40 <xTaskIncrementTick>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d003      	beq.n	8010ea8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010ea0:	4b06      	ldr	r3, [pc, #24]	; (8010ebc <SysTick_Handler+0x44>)
 8010ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ea6:	601a      	str	r2, [r3, #0]
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	f383 8811 	msr	BASEPRI, r3
}
 8010eb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010eb4:	bf00      	nop
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	e000ed04 	.word	0xe000ed04

08010ec0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010ec4:	4b0b      	ldr	r3, [pc, #44]	; (8010ef4 <vPortSetupTimerInterrupt+0x34>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010eca:	4b0b      	ldr	r3, [pc, #44]	; (8010ef8 <vPortSetupTimerInterrupt+0x38>)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010ed0:	4b0a      	ldr	r3, [pc, #40]	; (8010efc <vPortSetupTimerInterrupt+0x3c>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4a0a      	ldr	r2, [pc, #40]	; (8010f00 <vPortSetupTimerInterrupt+0x40>)
 8010ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eda:	099b      	lsrs	r3, r3, #6
 8010edc:	4a09      	ldr	r2, [pc, #36]	; (8010f04 <vPortSetupTimerInterrupt+0x44>)
 8010ede:	3b01      	subs	r3, #1
 8010ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010ee2:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <vPortSetupTimerInterrupt+0x34>)
 8010ee4:	2207      	movs	r2, #7
 8010ee6:	601a      	str	r2, [r3, #0]
}
 8010ee8:	bf00      	nop
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop
 8010ef4:	e000e010 	.word	0xe000e010
 8010ef8:	e000e018 	.word	0xe000e018
 8010efc:	20000250 	.word	0x20000250
 8010f00:	10624dd3 	.word	0x10624dd3
 8010f04:	e000e014 	.word	0xe000e014

08010f08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010f18 <vPortEnableVFP+0x10>
 8010f0c:	6801      	ldr	r1, [r0, #0]
 8010f0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f12:	6001      	str	r1, [r0, #0]
 8010f14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f16:	bf00      	nop
 8010f18:	e000ed88 	.word	0xe000ed88

08010f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f22:	f3ef 8305 	mrs	r3, IPSR
 8010f26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2b0f      	cmp	r3, #15
 8010f2c:	d916      	bls.n	8010f5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f2e:	4a19      	ldr	r2, [pc, #100]	; (8010f94 <vPortValidateInterruptPriority+0x78>)
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	4413      	add	r3, r2
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f38:	4b17      	ldr	r3, [pc, #92]	; (8010f98 <vPortValidateInterruptPriority+0x7c>)
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	7afa      	ldrb	r2, [r7, #11]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d20c      	bcs.n	8010f5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f46:	b672      	cpsid	i
 8010f48:	f383 8811 	msr	BASEPRI, r3
 8010f4c:	f3bf 8f6f 	isb	sy
 8010f50:	f3bf 8f4f 	dsb	sy
 8010f54:	b662      	cpsie	i
 8010f56:	607b      	str	r3, [r7, #4]
}
 8010f58:	bf00      	nop
 8010f5a:	e7fe      	b.n	8010f5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f5c:	4b0f      	ldr	r3, [pc, #60]	; (8010f9c <vPortValidateInterruptPriority+0x80>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f64:	4b0e      	ldr	r3, [pc, #56]	; (8010fa0 <vPortValidateInterruptPriority+0x84>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d90c      	bls.n	8010f86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f70:	b672      	cpsid	i
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	b662      	cpsie	i
 8010f80:	603b      	str	r3, [r7, #0]
}
 8010f82:	bf00      	nop
 8010f84:	e7fe      	b.n	8010f84 <vPortValidateInterruptPriority+0x68>
	}
 8010f86:	bf00      	nop
 8010f88:	3714      	adds	r7, #20
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	e000e3f0 	.word	0xe000e3f0
 8010f98:	200043f4 	.word	0x200043f4
 8010f9c:	e000ed0c 	.word	0xe000ed0c
 8010fa0:	200043f8 	.word	0x200043f8

08010fa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b08a      	sub	sp, #40	; 0x28
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010fac:	2300      	movs	r3, #0
 8010fae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010fb0:	f7fe fd76 	bl	800faa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010fb4:	4b5b      	ldr	r3, [pc, #364]	; (8011124 <pvPortMalloc+0x180>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d101      	bne.n	8010fc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010fbc:	f000 f91a 	bl	80111f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010fc0:	4b59      	ldr	r3, [pc, #356]	; (8011128 <pvPortMalloc+0x184>)
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4013      	ands	r3, r2
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f040 8092 	bne.w	80110f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d01f      	beq.n	8011014 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010fd4:	2208      	movs	r2, #8
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4413      	add	r3, r2
 8010fda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f003 0307 	and.w	r3, r3, #7
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d016      	beq.n	8011014 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f023 0307 	bic.w	r3, r3, #7
 8010fec:	3308      	adds	r3, #8
 8010fee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f003 0307 	and.w	r3, r3, #7
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00c      	beq.n	8011014 <pvPortMalloc+0x70>
	__asm volatile
 8010ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffe:	b672      	cpsid	i
 8011000:	f383 8811 	msr	BASEPRI, r3
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	b662      	cpsie	i
 801100e:	617b      	str	r3, [r7, #20]
}
 8011010:	bf00      	nop
 8011012:	e7fe      	b.n	8011012 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d06b      	beq.n	80110f2 <pvPortMalloc+0x14e>
 801101a:	4b44      	ldr	r3, [pc, #272]	; (801112c <pvPortMalloc+0x188>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d866      	bhi.n	80110f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011024:	4b42      	ldr	r3, [pc, #264]	; (8011130 <pvPortMalloc+0x18c>)
 8011026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011028:	4b41      	ldr	r3, [pc, #260]	; (8011130 <pvPortMalloc+0x18c>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801102e:	e004      	b.n	801103a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	429a      	cmp	r2, r3
 8011042:	d903      	bls.n	801104c <pvPortMalloc+0xa8>
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1f1      	bne.n	8011030 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801104c:	4b35      	ldr	r3, [pc, #212]	; (8011124 <pvPortMalloc+0x180>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011052:	429a      	cmp	r2, r3
 8011054:	d04d      	beq.n	80110f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011056:	6a3b      	ldr	r3, [r7, #32]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2208      	movs	r2, #8
 801105c:	4413      	add	r3, r2
 801105e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	1ad2      	subs	r2, r2, r3
 8011070:	2308      	movs	r3, #8
 8011072:	005b      	lsls	r3, r3, #1
 8011074:	429a      	cmp	r2, r3
 8011076:	d921      	bls.n	80110bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4413      	add	r3, r2
 801107e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	f003 0307 	and.w	r3, r3, #7
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00c      	beq.n	80110a4 <pvPortMalloc+0x100>
	__asm volatile
 801108a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108e:	b672      	cpsid	i
 8011090:	f383 8811 	msr	BASEPRI, r3
 8011094:	f3bf 8f6f 	isb	sy
 8011098:	f3bf 8f4f 	dsb	sy
 801109c:	b662      	cpsie	i
 801109e:	613b      	str	r3, [r7, #16]
}
 80110a0:	bf00      	nop
 80110a2:	e7fe      	b.n	80110a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80110a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a6:	685a      	ldr	r2, [r3, #4]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	1ad2      	subs	r2, r2, r3
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80110b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80110b6:	69b8      	ldr	r0, [r7, #24]
 80110b8:	f000 f8fe 	bl	80112b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80110bc:	4b1b      	ldr	r3, [pc, #108]	; (801112c <pvPortMalloc+0x188>)
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	1ad3      	subs	r3, r2, r3
 80110c6:	4a19      	ldr	r2, [pc, #100]	; (801112c <pvPortMalloc+0x188>)
 80110c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80110ca:	4b18      	ldr	r3, [pc, #96]	; (801112c <pvPortMalloc+0x188>)
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	4b19      	ldr	r3, [pc, #100]	; (8011134 <pvPortMalloc+0x190>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d203      	bcs.n	80110de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80110d6:	4b15      	ldr	r3, [pc, #84]	; (801112c <pvPortMalloc+0x188>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a16      	ldr	r2, [pc, #88]	; (8011134 <pvPortMalloc+0x190>)
 80110dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80110de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e0:	685a      	ldr	r2, [r3, #4]
 80110e2:	4b11      	ldr	r3, [pc, #68]	; (8011128 <pvPortMalloc+0x184>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	431a      	orrs	r2, r3
 80110e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80110ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ee:	2200      	movs	r2, #0
 80110f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80110f2:	f7fe fce3 	bl	800fabc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80110f6:	69fb      	ldr	r3, [r7, #28]
 80110f8:	f003 0307 	and.w	r3, r3, #7
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00c      	beq.n	801111a <pvPortMalloc+0x176>
	__asm volatile
 8011100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011104:	b672      	cpsid	i
 8011106:	f383 8811 	msr	BASEPRI, r3
 801110a:	f3bf 8f6f 	isb	sy
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	b662      	cpsie	i
 8011114:	60fb      	str	r3, [r7, #12]
}
 8011116:	bf00      	nop
 8011118:	e7fe      	b.n	8011118 <pvPortMalloc+0x174>
	return pvReturn;
 801111a:	69fb      	ldr	r3, [r7, #28]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3728      	adds	r7, #40	; 0x28
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	20008004 	.word	0x20008004
 8011128:	20008010 	.word	0x20008010
 801112c:	20008008 	.word	0x20008008
 8011130:	20007ffc 	.word	0x20007ffc
 8011134:	2000800c 	.word	0x2000800c

08011138 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d04c      	beq.n	80111e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801114a:	2308      	movs	r3, #8
 801114c:	425b      	negs	r3, r3
 801114e:	697a      	ldr	r2, [r7, #20]
 8011150:	4413      	add	r3, r2
 8011152:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	4b23      	ldr	r3, [pc, #140]	; (80111ec <vPortFree+0xb4>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	4013      	ands	r3, r2
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10c      	bne.n	8011180 <vPortFree+0x48>
	__asm volatile
 8011166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116a:	b672      	cpsid	i
 801116c:	f383 8811 	msr	BASEPRI, r3
 8011170:	f3bf 8f6f 	isb	sy
 8011174:	f3bf 8f4f 	dsb	sy
 8011178:	b662      	cpsie	i
 801117a:	60fb      	str	r3, [r7, #12]
}
 801117c:	bf00      	nop
 801117e:	e7fe      	b.n	801117e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00c      	beq.n	80111a2 <vPortFree+0x6a>
	__asm volatile
 8011188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118c:	b672      	cpsid	i
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	b662      	cpsie	i
 801119c:	60bb      	str	r3, [r7, #8]
}
 801119e:	bf00      	nop
 80111a0:	e7fe      	b.n	80111a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	685a      	ldr	r2, [r3, #4]
 80111a6:	4b11      	ldr	r3, [pc, #68]	; (80111ec <vPortFree+0xb4>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4013      	ands	r3, r2
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d019      	beq.n	80111e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d115      	bne.n	80111e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	685a      	ldr	r2, [r3, #4]
 80111bc:	4b0b      	ldr	r3, [pc, #44]	; (80111ec <vPortFree+0xb4>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	43db      	mvns	r3, r3
 80111c2:	401a      	ands	r2, r3
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80111c8:	f7fe fc6a 	bl	800faa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	685a      	ldr	r2, [r3, #4]
 80111d0:	4b07      	ldr	r3, [pc, #28]	; (80111f0 <vPortFree+0xb8>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	4413      	add	r3, r2
 80111d6:	4a06      	ldr	r2, [pc, #24]	; (80111f0 <vPortFree+0xb8>)
 80111d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80111da:	6938      	ldr	r0, [r7, #16]
 80111dc:	f000 f86c 	bl	80112b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80111e0:	f7fe fc6c 	bl	800fabc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80111e4:	bf00      	nop
 80111e6:	3718      	adds	r7, #24
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	20008010 	.word	0x20008010
 80111f0:	20008008 	.word	0x20008008

080111f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80111fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80111fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011200:	4b27      	ldr	r3, [pc, #156]	; (80112a0 <prvHeapInit+0xac>)
 8011202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f003 0307 	and.w	r3, r3, #7
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00c      	beq.n	8011228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	3307      	adds	r3, #7
 8011212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f023 0307 	bic.w	r3, r3, #7
 801121a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801121c:	68ba      	ldr	r2, [r7, #8]
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	4a1f      	ldr	r2, [pc, #124]	; (80112a0 <prvHeapInit+0xac>)
 8011224:	4413      	add	r3, r2
 8011226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801122c:	4a1d      	ldr	r2, [pc, #116]	; (80112a4 <prvHeapInit+0xb0>)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011232:	4b1c      	ldr	r3, [pc, #112]	; (80112a4 <prvHeapInit+0xb0>)
 8011234:	2200      	movs	r2, #0
 8011236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	68ba      	ldr	r2, [r7, #8]
 801123c:	4413      	add	r3, r2
 801123e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011240:	2208      	movs	r2, #8
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	1a9b      	subs	r3, r3, r2
 8011246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	f023 0307 	bic.w	r3, r3, #7
 801124e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	4a15      	ldr	r2, [pc, #84]	; (80112a8 <prvHeapInit+0xb4>)
 8011254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011256:	4b14      	ldr	r3, [pc, #80]	; (80112a8 <prvHeapInit+0xb4>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2200      	movs	r2, #0
 801125c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801125e:	4b12      	ldr	r3, [pc, #72]	; (80112a8 <prvHeapInit+0xb4>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	2200      	movs	r2, #0
 8011264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	68fa      	ldr	r2, [r7, #12]
 801126e:	1ad2      	subs	r2, r2, r3
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011274:	4b0c      	ldr	r3, [pc, #48]	; (80112a8 <prvHeapInit+0xb4>)
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	4a0a      	ldr	r2, [pc, #40]	; (80112ac <prvHeapInit+0xb8>)
 8011282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	4a09      	ldr	r2, [pc, #36]	; (80112b0 <prvHeapInit+0xbc>)
 801128a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801128c:	4b09      	ldr	r3, [pc, #36]	; (80112b4 <prvHeapInit+0xc0>)
 801128e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011292:	601a      	str	r2, [r3, #0]
}
 8011294:	bf00      	nop
 8011296:	3714      	adds	r7, #20
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	200043fc 	.word	0x200043fc
 80112a4:	20007ffc 	.word	0x20007ffc
 80112a8:	20008004 	.word	0x20008004
 80112ac:	2000800c 	.word	0x2000800c
 80112b0:	20008008 	.word	0x20008008
 80112b4:	20008010 	.word	0x20008010

080112b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80112c0:	4b28      	ldr	r3, [pc, #160]	; (8011364 <prvInsertBlockIntoFreeList+0xac>)
 80112c2:	60fb      	str	r3, [r7, #12]
 80112c4:	e002      	b.n	80112cc <prvInsertBlockIntoFreeList+0x14>
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	60fb      	str	r3, [r7, #12]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d8f7      	bhi.n	80112c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	68ba      	ldr	r2, [r7, #8]
 80112e0:	4413      	add	r3, r2
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d108      	bne.n	80112fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	685a      	ldr	r2, [r3, #4]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	441a      	add	r2, r3
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	68ba      	ldr	r2, [r7, #8]
 8011304:	441a      	add	r2, r3
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	429a      	cmp	r2, r3
 801130c:	d118      	bne.n	8011340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681a      	ldr	r2, [r3, #0]
 8011312:	4b15      	ldr	r3, [pc, #84]	; (8011368 <prvInsertBlockIntoFreeList+0xb0>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	429a      	cmp	r2, r3
 8011318:	d00d      	beq.n	8011336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	685a      	ldr	r2, [r3, #4]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	441a      	add	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	601a      	str	r2, [r3, #0]
 8011334:	e008      	b.n	8011348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011336:	4b0c      	ldr	r3, [pc, #48]	; (8011368 <prvInsertBlockIntoFreeList+0xb0>)
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	601a      	str	r2, [r3, #0]
 801133e:	e003      	b.n	8011348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011348:	68fa      	ldr	r2, [r7, #12]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	429a      	cmp	r2, r3
 801134e:	d002      	beq.n	8011356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011356:	bf00      	nop
 8011358:	3714      	adds	r7, #20
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr
 8011362:	bf00      	nop
 8011364:	20007ffc 	.word	0x20007ffc
 8011368:	20008004 	.word	0x20008004

0801136c <__assert_func>:
 801136c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801136e:	4614      	mov	r4, r2
 8011370:	461a      	mov	r2, r3
 8011372:	4b09      	ldr	r3, [pc, #36]	; (8011398 <__assert_func+0x2c>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4605      	mov	r5, r0
 8011378:	68d8      	ldr	r0, [r3, #12]
 801137a:	b14c      	cbz	r4, 8011390 <__assert_func+0x24>
 801137c:	4b07      	ldr	r3, [pc, #28]	; (801139c <__assert_func+0x30>)
 801137e:	9100      	str	r1, [sp, #0]
 8011380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011384:	4906      	ldr	r1, [pc, #24]	; (80113a0 <__assert_func+0x34>)
 8011386:	462b      	mov	r3, r5
 8011388:	f000 fa4a 	bl	8011820 <fiprintf>
 801138c:	f000 fbc5 	bl	8011b1a <abort>
 8011390:	4b04      	ldr	r3, [pc, #16]	; (80113a4 <__assert_func+0x38>)
 8011392:	461c      	mov	r4, r3
 8011394:	e7f3      	b.n	801137e <__assert_func+0x12>
 8011396:	bf00      	nop
 8011398:	200002b8 	.word	0x200002b8
 801139c:	08014658 	.word	0x08014658
 80113a0:	08014665 	.word	0x08014665
 80113a4:	08014693 	.word	0x08014693

080113a8 <atoi>:
 80113a8:	220a      	movs	r2, #10
 80113aa:	2100      	movs	r1, #0
 80113ac:	f000 b98a 	b.w	80116c4 <strtol>

080113b0 <calloc>:
 80113b0:	4b02      	ldr	r3, [pc, #8]	; (80113bc <calloc+0xc>)
 80113b2:	460a      	mov	r2, r1
 80113b4:	4601      	mov	r1, r0
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	f000 b802 	b.w	80113c0 <_calloc_r>
 80113bc:	200002b8 	.word	0x200002b8

080113c0 <_calloc_r>:
 80113c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80113c2:	fba1 2402 	umull	r2, r4, r1, r2
 80113c6:	b94c      	cbnz	r4, 80113dc <_calloc_r+0x1c>
 80113c8:	4611      	mov	r1, r2
 80113ca:	9201      	str	r2, [sp, #4]
 80113cc:	f000 f83e 	bl	801144c <_malloc_r>
 80113d0:	9a01      	ldr	r2, [sp, #4]
 80113d2:	4605      	mov	r5, r0
 80113d4:	b930      	cbnz	r0, 80113e4 <_calloc_r+0x24>
 80113d6:	4628      	mov	r0, r5
 80113d8:	b003      	add	sp, #12
 80113da:	bd30      	pop	{r4, r5, pc}
 80113dc:	220c      	movs	r2, #12
 80113de:	6002      	str	r2, [r0, #0]
 80113e0:	2500      	movs	r5, #0
 80113e2:	e7f8      	b.n	80113d6 <_calloc_r+0x16>
 80113e4:	4621      	mov	r1, r4
 80113e6:	f000 fac0 	bl	801196a <memset>
 80113ea:	e7f4      	b.n	80113d6 <_calloc_r+0x16>

080113ec <malloc>:
 80113ec:	4b02      	ldr	r3, [pc, #8]	; (80113f8 <malloc+0xc>)
 80113ee:	4601      	mov	r1, r0
 80113f0:	6818      	ldr	r0, [r3, #0]
 80113f2:	f000 b82b 	b.w	801144c <_malloc_r>
 80113f6:	bf00      	nop
 80113f8:	200002b8 	.word	0x200002b8

080113fc <free>:
 80113fc:	4b02      	ldr	r3, [pc, #8]	; (8011408 <free+0xc>)
 80113fe:	4601      	mov	r1, r0
 8011400:	6818      	ldr	r0, [r3, #0]
 8011402:	f000 bb91 	b.w	8011b28 <_free_r>
 8011406:	bf00      	nop
 8011408:	200002b8 	.word	0x200002b8

0801140c <sbrk_aligned>:
 801140c:	b570      	push	{r4, r5, r6, lr}
 801140e:	4e0e      	ldr	r6, [pc, #56]	; (8011448 <sbrk_aligned+0x3c>)
 8011410:	460c      	mov	r4, r1
 8011412:	6831      	ldr	r1, [r6, #0]
 8011414:	4605      	mov	r5, r0
 8011416:	b911      	cbnz	r1, 801141e <sbrk_aligned+0x12>
 8011418:	f000 fb1a 	bl	8011a50 <_sbrk_r>
 801141c:	6030      	str	r0, [r6, #0]
 801141e:	4621      	mov	r1, r4
 8011420:	4628      	mov	r0, r5
 8011422:	f000 fb15 	bl	8011a50 <_sbrk_r>
 8011426:	1c43      	adds	r3, r0, #1
 8011428:	d00a      	beq.n	8011440 <sbrk_aligned+0x34>
 801142a:	1cc4      	adds	r4, r0, #3
 801142c:	f024 0403 	bic.w	r4, r4, #3
 8011430:	42a0      	cmp	r0, r4
 8011432:	d007      	beq.n	8011444 <sbrk_aligned+0x38>
 8011434:	1a21      	subs	r1, r4, r0
 8011436:	4628      	mov	r0, r5
 8011438:	f000 fb0a 	bl	8011a50 <_sbrk_r>
 801143c:	3001      	adds	r0, #1
 801143e:	d101      	bne.n	8011444 <sbrk_aligned+0x38>
 8011440:	f04f 34ff 	mov.w	r4, #4294967295
 8011444:	4620      	mov	r0, r4
 8011446:	bd70      	pop	{r4, r5, r6, pc}
 8011448:	20008018 	.word	0x20008018

0801144c <_malloc_r>:
 801144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011450:	1ccd      	adds	r5, r1, #3
 8011452:	f025 0503 	bic.w	r5, r5, #3
 8011456:	3508      	adds	r5, #8
 8011458:	2d0c      	cmp	r5, #12
 801145a:	bf38      	it	cc
 801145c:	250c      	movcc	r5, #12
 801145e:	2d00      	cmp	r5, #0
 8011460:	4607      	mov	r7, r0
 8011462:	db01      	blt.n	8011468 <_malloc_r+0x1c>
 8011464:	42a9      	cmp	r1, r5
 8011466:	d905      	bls.n	8011474 <_malloc_r+0x28>
 8011468:	230c      	movs	r3, #12
 801146a:	603b      	str	r3, [r7, #0]
 801146c:	2600      	movs	r6, #0
 801146e:	4630      	mov	r0, r6
 8011470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011548 <_malloc_r+0xfc>
 8011478:	f000 f868 	bl	801154c <__malloc_lock>
 801147c:	f8d8 3000 	ldr.w	r3, [r8]
 8011480:	461c      	mov	r4, r3
 8011482:	bb5c      	cbnz	r4, 80114dc <_malloc_r+0x90>
 8011484:	4629      	mov	r1, r5
 8011486:	4638      	mov	r0, r7
 8011488:	f7ff ffc0 	bl	801140c <sbrk_aligned>
 801148c:	1c43      	adds	r3, r0, #1
 801148e:	4604      	mov	r4, r0
 8011490:	d155      	bne.n	801153e <_malloc_r+0xf2>
 8011492:	f8d8 4000 	ldr.w	r4, [r8]
 8011496:	4626      	mov	r6, r4
 8011498:	2e00      	cmp	r6, #0
 801149a:	d145      	bne.n	8011528 <_malloc_r+0xdc>
 801149c:	2c00      	cmp	r4, #0
 801149e:	d048      	beq.n	8011532 <_malloc_r+0xe6>
 80114a0:	6823      	ldr	r3, [r4, #0]
 80114a2:	4631      	mov	r1, r6
 80114a4:	4638      	mov	r0, r7
 80114a6:	eb04 0903 	add.w	r9, r4, r3
 80114aa:	f000 fad1 	bl	8011a50 <_sbrk_r>
 80114ae:	4581      	cmp	r9, r0
 80114b0:	d13f      	bne.n	8011532 <_malloc_r+0xe6>
 80114b2:	6821      	ldr	r1, [r4, #0]
 80114b4:	1a6d      	subs	r5, r5, r1
 80114b6:	4629      	mov	r1, r5
 80114b8:	4638      	mov	r0, r7
 80114ba:	f7ff ffa7 	bl	801140c <sbrk_aligned>
 80114be:	3001      	adds	r0, #1
 80114c0:	d037      	beq.n	8011532 <_malloc_r+0xe6>
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	442b      	add	r3, r5
 80114c6:	6023      	str	r3, [r4, #0]
 80114c8:	f8d8 3000 	ldr.w	r3, [r8]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d038      	beq.n	8011542 <_malloc_r+0xf6>
 80114d0:	685a      	ldr	r2, [r3, #4]
 80114d2:	42a2      	cmp	r2, r4
 80114d4:	d12b      	bne.n	801152e <_malloc_r+0xe2>
 80114d6:	2200      	movs	r2, #0
 80114d8:	605a      	str	r2, [r3, #4]
 80114da:	e00f      	b.n	80114fc <_malloc_r+0xb0>
 80114dc:	6822      	ldr	r2, [r4, #0]
 80114de:	1b52      	subs	r2, r2, r5
 80114e0:	d41f      	bmi.n	8011522 <_malloc_r+0xd6>
 80114e2:	2a0b      	cmp	r2, #11
 80114e4:	d917      	bls.n	8011516 <_malloc_r+0xca>
 80114e6:	1961      	adds	r1, r4, r5
 80114e8:	42a3      	cmp	r3, r4
 80114ea:	6025      	str	r5, [r4, #0]
 80114ec:	bf18      	it	ne
 80114ee:	6059      	strne	r1, [r3, #4]
 80114f0:	6863      	ldr	r3, [r4, #4]
 80114f2:	bf08      	it	eq
 80114f4:	f8c8 1000 	streq.w	r1, [r8]
 80114f8:	5162      	str	r2, [r4, r5]
 80114fa:	604b      	str	r3, [r1, #4]
 80114fc:	4638      	mov	r0, r7
 80114fe:	f104 060b 	add.w	r6, r4, #11
 8011502:	f000 f829 	bl	8011558 <__malloc_unlock>
 8011506:	f026 0607 	bic.w	r6, r6, #7
 801150a:	1d23      	adds	r3, r4, #4
 801150c:	1af2      	subs	r2, r6, r3
 801150e:	d0ae      	beq.n	801146e <_malloc_r+0x22>
 8011510:	1b9b      	subs	r3, r3, r6
 8011512:	50a3      	str	r3, [r4, r2]
 8011514:	e7ab      	b.n	801146e <_malloc_r+0x22>
 8011516:	42a3      	cmp	r3, r4
 8011518:	6862      	ldr	r2, [r4, #4]
 801151a:	d1dd      	bne.n	80114d8 <_malloc_r+0x8c>
 801151c:	f8c8 2000 	str.w	r2, [r8]
 8011520:	e7ec      	b.n	80114fc <_malloc_r+0xb0>
 8011522:	4623      	mov	r3, r4
 8011524:	6864      	ldr	r4, [r4, #4]
 8011526:	e7ac      	b.n	8011482 <_malloc_r+0x36>
 8011528:	4634      	mov	r4, r6
 801152a:	6876      	ldr	r6, [r6, #4]
 801152c:	e7b4      	b.n	8011498 <_malloc_r+0x4c>
 801152e:	4613      	mov	r3, r2
 8011530:	e7cc      	b.n	80114cc <_malloc_r+0x80>
 8011532:	230c      	movs	r3, #12
 8011534:	603b      	str	r3, [r7, #0]
 8011536:	4638      	mov	r0, r7
 8011538:	f000 f80e 	bl	8011558 <__malloc_unlock>
 801153c:	e797      	b.n	801146e <_malloc_r+0x22>
 801153e:	6025      	str	r5, [r4, #0]
 8011540:	e7dc      	b.n	80114fc <_malloc_r+0xb0>
 8011542:	605b      	str	r3, [r3, #4]
 8011544:	deff      	udf	#255	; 0xff
 8011546:	bf00      	nop
 8011548:	20008014 	.word	0x20008014

0801154c <__malloc_lock>:
 801154c:	4801      	ldr	r0, [pc, #4]	; (8011554 <__malloc_lock+0x8>)
 801154e:	f000 bacc 	b.w	8011aea <__retarget_lock_acquire_recursive>
 8011552:	bf00      	nop
 8011554:	2000815c 	.word	0x2000815c

08011558 <__malloc_unlock>:
 8011558:	4801      	ldr	r0, [pc, #4]	; (8011560 <__malloc_unlock+0x8>)
 801155a:	f000 bac7 	b.w	8011aec <__retarget_lock_release_recursive>
 801155e:	bf00      	nop
 8011560:	2000815c 	.word	0x2000815c

08011564 <srand>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	4b10      	ldr	r3, [pc, #64]	; (80115a8 <srand+0x44>)
 8011568:	681d      	ldr	r5, [r3, #0]
 801156a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801156c:	4604      	mov	r4, r0
 801156e:	b9b3      	cbnz	r3, 801159e <srand+0x3a>
 8011570:	2018      	movs	r0, #24
 8011572:	f7ff ff3b 	bl	80113ec <malloc>
 8011576:	4602      	mov	r2, r0
 8011578:	6328      	str	r0, [r5, #48]	; 0x30
 801157a:	b920      	cbnz	r0, 8011586 <srand+0x22>
 801157c:	4b0b      	ldr	r3, [pc, #44]	; (80115ac <srand+0x48>)
 801157e:	480c      	ldr	r0, [pc, #48]	; (80115b0 <srand+0x4c>)
 8011580:	2146      	movs	r1, #70	; 0x46
 8011582:	f7ff fef3 	bl	801136c <__assert_func>
 8011586:	490b      	ldr	r1, [pc, #44]	; (80115b4 <srand+0x50>)
 8011588:	4b0b      	ldr	r3, [pc, #44]	; (80115b8 <srand+0x54>)
 801158a:	e9c0 1300 	strd	r1, r3, [r0]
 801158e:	4b0b      	ldr	r3, [pc, #44]	; (80115bc <srand+0x58>)
 8011590:	6083      	str	r3, [r0, #8]
 8011592:	230b      	movs	r3, #11
 8011594:	8183      	strh	r3, [r0, #12]
 8011596:	2100      	movs	r1, #0
 8011598:	2001      	movs	r0, #1
 801159a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801159e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80115a0:	2200      	movs	r2, #0
 80115a2:	611c      	str	r4, [r3, #16]
 80115a4:	615a      	str	r2, [r3, #20]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	200002b8 	.word	0x200002b8
 80115ac:	08014694 	.word	0x08014694
 80115b0:	080146ab 	.word	0x080146ab
 80115b4:	abcd330e 	.word	0xabcd330e
 80115b8:	e66d1234 	.word	0xe66d1234
 80115bc:	0005deec 	.word	0x0005deec

080115c0 <_strtol_l.constprop.0>:
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c6:	d001      	beq.n	80115cc <_strtol_l.constprop.0+0xc>
 80115c8:	2b24      	cmp	r3, #36	; 0x24
 80115ca:	d906      	bls.n	80115da <_strtol_l.constprop.0+0x1a>
 80115cc:	f000 fa62 	bl	8011a94 <__errno>
 80115d0:	2316      	movs	r3, #22
 80115d2:	6003      	str	r3, [r0, #0]
 80115d4:	2000      	movs	r0, #0
 80115d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80116c0 <_strtol_l.constprop.0+0x100>
 80115de:	460d      	mov	r5, r1
 80115e0:	462e      	mov	r6, r5
 80115e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80115ea:	f017 0708 	ands.w	r7, r7, #8
 80115ee:	d1f7      	bne.n	80115e0 <_strtol_l.constprop.0+0x20>
 80115f0:	2c2d      	cmp	r4, #45	; 0x2d
 80115f2:	d132      	bne.n	801165a <_strtol_l.constprop.0+0x9a>
 80115f4:	782c      	ldrb	r4, [r5, #0]
 80115f6:	2701      	movs	r7, #1
 80115f8:	1cb5      	adds	r5, r6, #2
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d05b      	beq.n	80116b6 <_strtol_l.constprop.0+0xf6>
 80115fe:	2b10      	cmp	r3, #16
 8011600:	d109      	bne.n	8011616 <_strtol_l.constprop.0+0x56>
 8011602:	2c30      	cmp	r4, #48	; 0x30
 8011604:	d107      	bne.n	8011616 <_strtol_l.constprop.0+0x56>
 8011606:	782c      	ldrb	r4, [r5, #0]
 8011608:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801160c:	2c58      	cmp	r4, #88	; 0x58
 801160e:	d14d      	bne.n	80116ac <_strtol_l.constprop.0+0xec>
 8011610:	786c      	ldrb	r4, [r5, #1]
 8011612:	2310      	movs	r3, #16
 8011614:	3502      	adds	r5, #2
 8011616:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801161a:	f108 38ff 	add.w	r8, r8, #4294967295
 801161e:	f04f 0e00 	mov.w	lr, #0
 8011622:	fbb8 f9f3 	udiv	r9, r8, r3
 8011626:	4676      	mov	r6, lr
 8011628:	fb03 8a19 	mls	sl, r3, r9, r8
 801162c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011630:	f1bc 0f09 	cmp.w	ip, #9
 8011634:	d816      	bhi.n	8011664 <_strtol_l.constprop.0+0xa4>
 8011636:	4664      	mov	r4, ip
 8011638:	42a3      	cmp	r3, r4
 801163a:	dd24      	ble.n	8011686 <_strtol_l.constprop.0+0xc6>
 801163c:	f1be 3fff 	cmp.w	lr, #4294967295
 8011640:	d008      	beq.n	8011654 <_strtol_l.constprop.0+0x94>
 8011642:	45b1      	cmp	r9, r6
 8011644:	d31c      	bcc.n	8011680 <_strtol_l.constprop.0+0xc0>
 8011646:	d101      	bne.n	801164c <_strtol_l.constprop.0+0x8c>
 8011648:	45a2      	cmp	sl, r4
 801164a:	db19      	blt.n	8011680 <_strtol_l.constprop.0+0xc0>
 801164c:	fb06 4603 	mla	r6, r6, r3, r4
 8011650:	f04f 0e01 	mov.w	lr, #1
 8011654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011658:	e7e8      	b.n	801162c <_strtol_l.constprop.0+0x6c>
 801165a:	2c2b      	cmp	r4, #43	; 0x2b
 801165c:	bf04      	itt	eq
 801165e:	782c      	ldrbeq	r4, [r5, #0]
 8011660:	1cb5      	addeq	r5, r6, #2
 8011662:	e7ca      	b.n	80115fa <_strtol_l.constprop.0+0x3a>
 8011664:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011668:	f1bc 0f19 	cmp.w	ip, #25
 801166c:	d801      	bhi.n	8011672 <_strtol_l.constprop.0+0xb2>
 801166e:	3c37      	subs	r4, #55	; 0x37
 8011670:	e7e2      	b.n	8011638 <_strtol_l.constprop.0+0x78>
 8011672:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011676:	f1bc 0f19 	cmp.w	ip, #25
 801167a:	d804      	bhi.n	8011686 <_strtol_l.constprop.0+0xc6>
 801167c:	3c57      	subs	r4, #87	; 0x57
 801167e:	e7db      	b.n	8011638 <_strtol_l.constprop.0+0x78>
 8011680:	f04f 3eff 	mov.w	lr, #4294967295
 8011684:	e7e6      	b.n	8011654 <_strtol_l.constprop.0+0x94>
 8011686:	f1be 3fff 	cmp.w	lr, #4294967295
 801168a:	d105      	bne.n	8011698 <_strtol_l.constprop.0+0xd8>
 801168c:	2322      	movs	r3, #34	; 0x22
 801168e:	6003      	str	r3, [r0, #0]
 8011690:	4646      	mov	r6, r8
 8011692:	b942      	cbnz	r2, 80116a6 <_strtol_l.constprop.0+0xe6>
 8011694:	4630      	mov	r0, r6
 8011696:	e79e      	b.n	80115d6 <_strtol_l.constprop.0+0x16>
 8011698:	b107      	cbz	r7, 801169c <_strtol_l.constprop.0+0xdc>
 801169a:	4276      	negs	r6, r6
 801169c:	2a00      	cmp	r2, #0
 801169e:	d0f9      	beq.n	8011694 <_strtol_l.constprop.0+0xd4>
 80116a0:	f1be 0f00 	cmp.w	lr, #0
 80116a4:	d000      	beq.n	80116a8 <_strtol_l.constprop.0+0xe8>
 80116a6:	1e69      	subs	r1, r5, #1
 80116a8:	6011      	str	r1, [r2, #0]
 80116aa:	e7f3      	b.n	8011694 <_strtol_l.constprop.0+0xd4>
 80116ac:	2430      	movs	r4, #48	; 0x30
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1b1      	bne.n	8011616 <_strtol_l.constprop.0+0x56>
 80116b2:	2308      	movs	r3, #8
 80116b4:	e7af      	b.n	8011616 <_strtol_l.constprop.0+0x56>
 80116b6:	2c30      	cmp	r4, #48	; 0x30
 80116b8:	d0a5      	beq.n	8011606 <_strtol_l.constprop.0+0x46>
 80116ba:	230a      	movs	r3, #10
 80116bc:	e7ab      	b.n	8011616 <_strtol_l.constprop.0+0x56>
 80116be:	bf00      	nop
 80116c0:	08014704 	.word	0x08014704

080116c4 <strtol>:
 80116c4:	4613      	mov	r3, r2
 80116c6:	460a      	mov	r2, r1
 80116c8:	4601      	mov	r1, r0
 80116ca:	4802      	ldr	r0, [pc, #8]	; (80116d4 <strtol+0x10>)
 80116cc:	6800      	ldr	r0, [r0, #0]
 80116ce:	f7ff bf77 	b.w	80115c0 <_strtol_l.constprop.0>
 80116d2:	bf00      	nop
 80116d4:	200002b8 	.word	0x200002b8

080116d8 <std>:
 80116d8:	2300      	movs	r3, #0
 80116da:	b510      	push	{r4, lr}
 80116dc:	4604      	mov	r4, r0
 80116de:	e9c0 3300 	strd	r3, r3, [r0]
 80116e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116e6:	6083      	str	r3, [r0, #8]
 80116e8:	8181      	strh	r1, [r0, #12]
 80116ea:	6643      	str	r3, [r0, #100]	; 0x64
 80116ec:	81c2      	strh	r2, [r0, #14]
 80116ee:	6183      	str	r3, [r0, #24]
 80116f0:	4619      	mov	r1, r3
 80116f2:	2208      	movs	r2, #8
 80116f4:	305c      	adds	r0, #92	; 0x5c
 80116f6:	f000 f938 	bl	801196a <memset>
 80116fa:	4b0d      	ldr	r3, [pc, #52]	; (8011730 <std+0x58>)
 80116fc:	6263      	str	r3, [r4, #36]	; 0x24
 80116fe:	4b0d      	ldr	r3, [pc, #52]	; (8011734 <std+0x5c>)
 8011700:	62a3      	str	r3, [r4, #40]	; 0x28
 8011702:	4b0d      	ldr	r3, [pc, #52]	; (8011738 <std+0x60>)
 8011704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011706:	4b0d      	ldr	r3, [pc, #52]	; (801173c <std+0x64>)
 8011708:	6323      	str	r3, [r4, #48]	; 0x30
 801170a:	4b0d      	ldr	r3, [pc, #52]	; (8011740 <std+0x68>)
 801170c:	6224      	str	r4, [r4, #32]
 801170e:	429c      	cmp	r4, r3
 8011710:	d006      	beq.n	8011720 <std+0x48>
 8011712:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011716:	4294      	cmp	r4, r2
 8011718:	d002      	beq.n	8011720 <std+0x48>
 801171a:	33d0      	adds	r3, #208	; 0xd0
 801171c:	429c      	cmp	r4, r3
 801171e:	d105      	bne.n	801172c <std+0x54>
 8011720:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011728:	f000 b9de 	b.w	8011ae8 <__retarget_lock_init_recursive>
 801172c:	bd10      	pop	{r4, pc}
 801172e:	bf00      	nop
 8011730:	08011891 	.word	0x08011891
 8011734:	080118b3 	.word	0x080118b3
 8011738:	080118eb 	.word	0x080118eb
 801173c:	0801190f 	.word	0x0801190f
 8011740:	2000801c 	.word	0x2000801c

08011744 <stdio_exit_handler>:
 8011744:	4a02      	ldr	r2, [pc, #8]	; (8011750 <stdio_exit_handler+0xc>)
 8011746:	4903      	ldr	r1, [pc, #12]	; (8011754 <stdio_exit_handler+0x10>)
 8011748:	4803      	ldr	r0, [pc, #12]	; (8011758 <stdio_exit_handler+0x14>)
 801174a:	f000 b87b 	b.w	8011844 <_fwalk_sglue>
 801174e:	bf00      	nop
 8011750:	20000260 	.word	0x20000260
 8011754:	08012275 	.word	0x08012275
 8011758:	2000026c 	.word	0x2000026c

0801175c <cleanup_stdio>:
 801175c:	6841      	ldr	r1, [r0, #4]
 801175e:	4b0c      	ldr	r3, [pc, #48]	; (8011790 <cleanup_stdio+0x34>)
 8011760:	4299      	cmp	r1, r3
 8011762:	b510      	push	{r4, lr}
 8011764:	4604      	mov	r4, r0
 8011766:	d001      	beq.n	801176c <cleanup_stdio+0x10>
 8011768:	f000 fd84 	bl	8012274 <_fflush_r>
 801176c:	68a1      	ldr	r1, [r4, #8]
 801176e:	4b09      	ldr	r3, [pc, #36]	; (8011794 <cleanup_stdio+0x38>)
 8011770:	4299      	cmp	r1, r3
 8011772:	d002      	beq.n	801177a <cleanup_stdio+0x1e>
 8011774:	4620      	mov	r0, r4
 8011776:	f000 fd7d 	bl	8012274 <_fflush_r>
 801177a:	68e1      	ldr	r1, [r4, #12]
 801177c:	4b06      	ldr	r3, [pc, #24]	; (8011798 <cleanup_stdio+0x3c>)
 801177e:	4299      	cmp	r1, r3
 8011780:	d004      	beq.n	801178c <cleanup_stdio+0x30>
 8011782:	4620      	mov	r0, r4
 8011784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011788:	f000 bd74 	b.w	8012274 <_fflush_r>
 801178c:	bd10      	pop	{r4, pc}
 801178e:	bf00      	nop
 8011790:	2000801c 	.word	0x2000801c
 8011794:	20008084 	.word	0x20008084
 8011798:	200080ec 	.word	0x200080ec

0801179c <global_stdio_init.part.0>:
 801179c:	b510      	push	{r4, lr}
 801179e:	4b0b      	ldr	r3, [pc, #44]	; (80117cc <global_stdio_init.part.0+0x30>)
 80117a0:	4c0b      	ldr	r4, [pc, #44]	; (80117d0 <global_stdio_init.part.0+0x34>)
 80117a2:	4a0c      	ldr	r2, [pc, #48]	; (80117d4 <global_stdio_init.part.0+0x38>)
 80117a4:	601a      	str	r2, [r3, #0]
 80117a6:	4620      	mov	r0, r4
 80117a8:	2200      	movs	r2, #0
 80117aa:	2104      	movs	r1, #4
 80117ac:	f7ff ff94 	bl	80116d8 <std>
 80117b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80117b4:	2201      	movs	r2, #1
 80117b6:	2109      	movs	r1, #9
 80117b8:	f7ff ff8e 	bl	80116d8 <std>
 80117bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80117c0:	2202      	movs	r2, #2
 80117c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117c6:	2112      	movs	r1, #18
 80117c8:	f7ff bf86 	b.w	80116d8 <std>
 80117cc:	20008154 	.word	0x20008154
 80117d0:	2000801c 	.word	0x2000801c
 80117d4:	08011745 	.word	0x08011745

080117d8 <__sfp_lock_acquire>:
 80117d8:	4801      	ldr	r0, [pc, #4]	; (80117e0 <__sfp_lock_acquire+0x8>)
 80117da:	f000 b986 	b.w	8011aea <__retarget_lock_acquire_recursive>
 80117de:	bf00      	nop
 80117e0:	2000815d 	.word	0x2000815d

080117e4 <__sfp_lock_release>:
 80117e4:	4801      	ldr	r0, [pc, #4]	; (80117ec <__sfp_lock_release+0x8>)
 80117e6:	f000 b981 	b.w	8011aec <__retarget_lock_release_recursive>
 80117ea:	bf00      	nop
 80117ec:	2000815d 	.word	0x2000815d

080117f0 <__sinit>:
 80117f0:	b510      	push	{r4, lr}
 80117f2:	4604      	mov	r4, r0
 80117f4:	f7ff fff0 	bl	80117d8 <__sfp_lock_acquire>
 80117f8:	6a23      	ldr	r3, [r4, #32]
 80117fa:	b11b      	cbz	r3, 8011804 <__sinit+0x14>
 80117fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011800:	f7ff bff0 	b.w	80117e4 <__sfp_lock_release>
 8011804:	4b04      	ldr	r3, [pc, #16]	; (8011818 <__sinit+0x28>)
 8011806:	6223      	str	r3, [r4, #32]
 8011808:	4b04      	ldr	r3, [pc, #16]	; (801181c <__sinit+0x2c>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d1f5      	bne.n	80117fc <__sinit+0xc>
 8011810:	f7ff ffc4 	bl	801179c <global_stdio_init.part.0>
 8011814:	e7f2      	b.n	80117fc <__sinit+0xc>
 8011816:	bf00      	nop
 8011818:	0801175d 	.word	0x0801175d
 801181c:	20008154 	.word	0x20008154

08011820 <fiprintf>:
 8011820:	b40e      	push	{r1, r2, r3}
 8011822:	b503      	push	{r0, r1, lr}
 8011824:	4601      	mov	r1, r0
 8011826:	ab03      	add	r3, sp, #12
 8011828:	4805      	ldr	r0, [pc, #20]	; (8011840 <fiprintf+0x20>)
 801182a:	f853 2b04 	ldr.w	r2, [r3], #4
 801182e:	6800      	ldr	r0, [r0, #0]
 8011830:	9301      	str	r3, [sp, #4]
 8011832:	f000 f9ef 	bl	8011c14 <_vfiprintf_r>
 8011836:	b002      	add	sp, #8
 8011838:	f85d eb04 	ldr.w	lr, [sp], #4
 801183c:	b003      	add	sp, #12
 801183e:	4770      	bx	lr
 8011840:	200002b8 	.word	0x200002b8

08011844 <_fwalk_sglue>:
 8011844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011848:	4607      	mov	r7, r0
 801184a:	4688      	mov	r8, r1
 801184c:	4614      	mov	r4, r2
 801184e:	2600      	movs	r6, #0
 8011850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011854:	f1b9 0901 	subs.w	r9, r9, #1
 8011858:	d505      	bpl.n	8011866 <_fwalk_sglue+0x22>
 801185a:	6824      	ldr	r4, [r4, #0]
 801185c:	2c00      	cmp	r4, #0
 801185e:	d1f7      	bne.n	8011850 <_fwalk_sglue+0xc>
 8011860:	4630      	mov	r0, r6
 8011862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011866:	89ab      	ldrh	r3, [r5, #12]
 8011868:	2b01      	cmp	r3, #1
 801186a:	d907      	bls.n	801187c <_fwalk_sglue+0x38>
 801186c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011870:	3301      	adds	r3, #1
 8011872:	d003      	beq.n	801187c <_fwalk_sglue+0x38>
 8011874:	4629      	mov	r1, r5
 8011876:	4638      	mov	r0, r7
 8011878:	47c0      	blx	r8
 801187a:	4306      	orrs	r6, r0
 801187c:	3568      	adds	r5, #104	; 0x68
 801187e:	e7e9      	b.n	8011854 <_fwalk_sglue+0x10>

08011880 <putchar>:
 8011880:	4b02      	ldr	r3, [pc, #8]	; (801188c <putchar+0xc>)
 8011882:	4601      	mov	r1, r0
 8011884:	6818      	ldr	r0, [r3, #0]
 8011886:	6882      	ldr	r2, [r0, #8]
 8011888:	f000 bd1c 	b.w	80122c4 <_putc_r>
 801188c:	200002b8 	.word	0x200002b8

08011890 <__sread>:
 8011890:	b510      	push	{r4, lr}
 8011892:	460c      	mov	r4, r1
 8011894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011898:	f000 f8c8 	bl	8011a2c <_read_r>
 801189c:	2800      	cmp	r0, #0
 801189e:	bfab      	itete	ge
 80118a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80118a2:	89a3      	ldrhlt	r3, [r4, #12]
 80118a4:	181b      	addge	r3, r3, r0
 80118a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80118aa:	bfac      	ite	ge
 80118ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80118ae:	81a3      	strhlt	r3, [r4, #12]
 80118b0:	bd10      	pop	{r4, pc}

080118b2 <__swrite>:
 80118b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b6:	461f      	mov	r7, r3
 80118b8:	898b      	ldrh	r3, [r1, #12]
 80118ba:	05db      	lsls	r3, r3, #23
 80118bc:	4605      	mov	r5, r0
 80118be:	460c      	mov	r4, r1
 80118c0:	4616      	mov	r6, r2
 80118c2:	d505      	bpl.n	80118d0 <__swrite+0x1e>
 80118c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118c8:	2302      	movs	r3, #2
 80118ca:	2200      	movs	r2, #0
 80118cc:	f000 f89c 	bl	8011a08 <_lseek_r>
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118da:	81a3      	strh	r3, [r4, #12]
 80118dc:	4632      	mov	r2, r6
 80118de:	463b      	mov	r3, r7
 80118e0:	4628      	mov	r0, r5
 80118e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118e6:	f000 b8c3 	b.w	8011a70 <_write_r>

080118ea <__sseek>:
 80118ea:	b510      	push	{r4, lr}
 80118ec:	460c      	mov	r4, r1
 80118ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f2:	f000 f889 	bl	8011a08 <_lseek_r>
 80118f6:	1c43      	adds	r3, r0, #1
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	bf15      	itete	ne
 80118fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80118fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011906:	81a3      	strheq	r3, [r4, #12]
 8011908:	bf18      	it	ne
 801190a:	81a3      	strhne	r3, [r4, #12]
 801190c:	bd10      	pop	{r4, pc}

0801190e <__sclose>:
 801190e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011912:	f000 b869 	b.w	80119e8 <_close_r>

08011916 <memcmp>:
 8011916:	b510      	push	{r4, lr}
 8011918:	3901      	subs	r1, #1
 801191a:	4402      	add	r2, r0
 801191c:	4290      	cmp	r0, r2
 801191e:	d101      	bne.n	8011924 <memcmp+0xe>
 8011920:	2000      	movs	r0, #0
 8011922:	e005      	b.n	8011930 <memcmp+0x1a>
 8011924:	7803      	ldrb	r3, [r0, #0]
 8011926:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801192a:	42a3      	cmp	r3, r4
 801192c:	d001      	beq.n	8011932 <memcmp+0x1c>
 801192e:	1b18      	subs	r0, r3, r4
 8011930:	bd10      	pop	{r4, pc}
 8011932:	3001      	adds	r0, #1
 8011934:	e7f2      	b.n	801191c <memcmp+0x6>

08011936 <memmove>:
 8011936:	4288      	cmp	r0, r1
 8011938:	b510      	push	{r4, lr}
 801193a:	eb01 0402 	add.w	r4, r1, r2
 801193e:	d902      	bls.n	8011946 <memmove+0x10>
 8011940:	4284      	cmp	r4, r0
 8011942:	4623      	mov	r3, r4
 8011944:	d807      	bhi.n	8011956 <memmove+0x20>
 8011946:	1e43      	subs	r3, r0, #1
 8011948:	42a1      	cmp	r1, r4
 801194a:	d008      	beq.n	801195e <memmove+0x28>
 801194c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011950:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011954:	e7f8      	b.n	8011948 <memmove+0x12>
 8011956:	4402      	add	r2, r0
 8011958:	4601      	mov	r1, r0
 801195a:	428a      	cmp	r2, r1
 801195c:	d100      	bne.n	8011960 <memmove+0x2a>
 801195e:	bd10      	pop	{r4, pc}
 8011960:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011964:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011968:	e7f7      	b.n	801195a <memmove+0x24>

0801196a <memset>:
 801196a:	4402      	add	r2, r0
 801196c:	4603      	mov	r3, r0
 801196e:	4293      	cmp	r3, r2
 8011970:	d100      	bne.n	8011974 <memset+0xa>
 8011972:	4770      	bx	lr
 8011974:	f803 1b01 	strb.w	r1, [r3], #1
 8011978:	e7f9      	b.n	801196e <memset+0x4>

0801197a <strchr>:
 801197a:	b2c9      	uxtb	r1, r1
 801197c:	4603      	mov	r3, r0
 801197e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011982:	b11a      	cbz	r2, 801198c <strchr+0x12>
 8011984:	428a      	cmp	r2, r1
 8011986:	d1f9      	bne.n	801197c <strchr+0x2>
 8011988:	4618      	mov	r0, r3
 801198a:	4770      	bx	lr
 801198c:	2900      	cmp	r1, #0
 801198e:	bf18      	it	ne
 8011990:	2300      	movne	r3, #0
 8011992:	e7f9      	b.n	8011988 <strchr+0xe>

08011994 <strncmp>:
 8011994:	b510      	push	{r4, lr}
 8011996:	b16a      	cbz	r2, 80119b4 <strncmp+0x20>
 8011998:	3901      	subs	r1, #1
 801199a:	1884      	adds	r4, r0, r2
 801199c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d103      	bne.n	80119b0 <strncmp+0x1c>
 80119a8:	42a0      	cmp	r0, r4
 80119aa:	d001      	beq.n	80119b0 <strncmp+0x1c>
 80119ac:	2a00      	cmp	r2, #0
 80119ae:	d1f5      	bne.n	801199c <strncmp+0x8>
 80119b0:	1ad0      	subs	r0, r2, r3
 80119b2:	bd10      	pop	{r4, pc}
 80119b4:	4610      	mov	r0, r2
 80119b6:	e7fc      	b.n	80119b2 <strncmp+0x1e>

080119b8 <strrchr>:
 80119b8:	b513      	push	{r0, r1, r4, lr}
 80119ba:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80119be:	4603      	mov	r3, r0
 80119c0:	d110      	bne.n	80119e4 <strrchr+0x2c>
 80119c2:	b002      	add	sp, #8
 80119c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c8:	f7ff bfd7 	b.w	801197a <strchr>
 80119cc:	1c43      	adds	r3, r0, #1
 80119ce:	4604      	mov	r4, r0
 80119d0:	4618      	mov	r0, r3
 80119d2:	9101      	str	r1, [sp, #4]
 80119d4:	f7ff ffd1 	bl	801197a <strchr>
 80119d8:	9901      	ldr	r1, [sp, #4]
 80119da:	2800      	cmp	r0, #0
 80119dc:	d1f6      	bne.n	80119cc <strrchr+0x14>
 80119de:	4620      	mov	r0, r4
 80119e0:	b002      	add	sp, #8
 80119e2:	bd10      	pop	{r4, pc}
 80119e4:	2400      	movs	r4, #0
 80119e6:	e7f3      	b.n	80119d0 <strrchr+0x18>

080119e8 <_close_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	4d06      	ldr	r5, [pc, #24]	; (8011a04 <_close_r+0x1c>)
 80119ec:	2300      	movs	r3, #0
 80119ee:	4604      	mov	r4, r0
 80119f0:	4608      	mov	r0, r1
 80119f2:	602b      	str	r3, [r5, #0]
 80119f4:	f7f9 fe52 	bl	800b69c <_close>
 80119f8:	1c43      	adds	r3, r0, #1
 80119fa:	d102      	bne.n	8011a02 <_close_r+0x1a>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	b103      	cbz	r3, 8011a02 <_close_r+0x1a>
 8011a00:	6023      	str	r3, [r4, #0]
 8011a02:	bd38      	pop	{r3, r4, r5, pc}
 8011a04:	20008158 	.word	0x20008158

08011a08 <_lseek_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4d07      	ldr	r5, [pc, #28]	; (8011a28 <_lseek_r+0x20>)
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	4608      	mov	r0, r1
 8011a10:	4611      	mov	r1, r2
 8011a12:	2200      	movs	r2, #0
 8011a14:	602a      	str	r2, [r5, #0]
 8011a16:	461a      	mov	r2, r3
 8011a18:	f7f9 fe67 	bl	800b6ea <_lseek>
 8011a1c:	1c43      	adds	r3, r0, #1
 8011a1e:	d102      	bne.n	8011a26 <_lseek_r+0x1e>
 8011a20:	682b      	ldr	r3, [r5, #0]
 8011a22:	b103      	cbz	r3, 8011a26 <_lseek_r+0x1e>
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	bd38      	pop	{r3, r4, r5, pc}
 8011a28:	20008158 	.word	0x20008158

08011a2c <_read_r>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	4d07      	ldr	r5, [pc, #28]	; (8011a4c <_read_r+0x20>)
 8011a30:	4604      	mov	r4, r0
 8011a32:	4608      	mov	r0, r1
 8011a34:	4611      	mov	r1, r2
 8011a36:	2200      	movs	r2, #0
 8011a38:	602a      	str	r2, [r5, #0]
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	f7f9 fdf8 	bl	800b630 <_read>
 8011a40:	1c43      	adds	r3, r0, #1
 8011a42:	d102      	bne.n	8011a4a <_read_r+0x1e>
 8011a44:	682b      	ldr	r3, [r5, #0]
 8011a46:	b103      	cbz	r3, 8011a4a <_read_r+0x1e>
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	20008158 	.word	0x20008158

08011a50 <_sbrk_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4d06      	ldr	r5, [pc, #24]	; (8011a6c <_sbrk_r+0x1c>)
 8011a54:	2300      	movs	r3, #0
 8011a56:	4604      	mov	r4, r0
 8011a58:	4608      	mov	r0, r1
 8011a5a:	602b      	str	r3, [r5, #0]
 8011a5c:	f7f9 fe52 	bl	800b704 <_sbrk>
 8011a60:	1c43      	adds	r3, r0, #1
 8011a62:	d102      	bne.n	8011a6a <_sbrk_r+0x1a>
 8011a64:	682b      	ldr	r3, [r5, #0]
 8011a66:	b103      	cbz	r3, 8011a6a <_sbrk_r+0x1a>
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	bd38      	pop	{r3, r4, r5, pc}
 8011a6c:	20008158 	.word	0x20008158

08011a70 <_write_r>:
 8011a70:	b538      	push	{r3, r4, r5, lr}
 8011a72:	4d07      	ldr	r5, [pc, #28]	; (8011a90 <_write_r+0x20>)
 8011a74:	4604      	mov	r4, r0
 8011a76:	4608      	mov	r0, r1
 8011a78:	4611      	mov	r1, r2
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	602a      	str	r2, [r5, #0]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	f7f9 fdf4 	bl	800b66c <_write>
 8011a84:	1c43      	adds	r3, r0, #1
 8011a86:	d102      	bne.n	8011a8e <_write_r+0x1e>
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	b103      	cbz	r3, 8011a8e <_write_r+0x1e>
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	bd38      	pop	{r3, r4, r5, pc}
 8011a90:	20008158 	.word	0x20008158

08011a94 <__errno>:
 8011a94:	4b01      	ldr	r3, [pc, #4]	; (8011a9c <__errno+0x8>)
 8011a96:	6818      	ldr	r0, [r3, #0]
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	200002b8 	.word	0x200002b8

08011aa0 <__libc_init_array>:
 8011aa0:	b570      	push	{r4, r5, r6, lr}
 8011aa2:	4d0d      	ldr	r5, [pc, #52]	; (8011ad8 <__libc_init_array+0x38>)
 8011aa4:	4c0d      	ldr	r4, [pc, #52]	; (8011adc <__libc_init_array+0x3c>)
 8011aa6:	1b64      	subs	r4, r4, r5
 8011aa8:	10a4      	asrs	r4, r4, #2
 8011aaa:	2600      	movs	r6, #0
 8011aac:	42a6      	cmp	r6, r4
 8011aae:	d109      	bne.n	8011ac4 <__libc_init_array+0x24>
 8011ab0:	4d0b      	ldr	r5, [pc, #44]	; (8011ae0 <__libc_init_array+0x40>)
 8011ab2:	4c0c      	ldr	r4, [pc, #48]	; (8011ae4 <__libc_init_array+0x44>)
 8011ab4:	f000 fd98 	bl	80125e8 <_init>
 8011ab8:	1b64      	subs	r4, r4, r5
 8011aba:	10a4      	asrs	r4, r4, #2
 8011abc:	2600      	movs	r6, #0
 8011abe:	42a6      	cmp	r6, r4
 8011ac0:	d105      	bne.n	8011ace <__libc_init_array+0x2e>
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}
 8011ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ac8:	4798      	blx	r3
 8011aca:	3601      	adds	r6, #1
 8011acc:	e7ee      	b.n	8011aac <__libc_init_array+0xc>
 8011ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ad2:	4798      	blx	r3
 8011ad4:	3601      	adds	r6, #1
 8011ad6:	e7f2      	b.n	8011abe <__libc_init_array+0x1e>
 8011ad8:	08014840 	.word	0x08014840
 8011adc:	08014840 	.word	0x08014840
 8011ae0:	08014840 	.word	0x08014840
 8011ae4:	08014844 	.word	0x08014844

08011ae8 <__retarget_lock_init_recursive>:
 8011ae8:	4770      	bx	lr

08011aea <__retarget_lock_acquire_recursive>:
 8011aea:	4770      	bx	lr

08011aec <__retarget_lock_release_recursive>:
 8011aec:	4770      	bx	lr

08011aee <strcpy>:
 8011aee:	4603      	mov	r3, r0
 8011af0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011af4:	f803 2b01 	strb.w	r2, [r3], #1
 8011af8:	2a00      	cmp	r2, #0
 8011afa:	d1f9      	bne.n	8011af0 <strcpy+0x2>
 8011afc:	4770      	bx	lr

08011afe <memcpy>:
 8011afe:	440a      	add	r2, r1
 8011b00:	4291      	cmp	r1, r2
 8011b02:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b06:	d100      	bne.n	8011b0a <memcpy+0xc>
 8011b08:	4770      	bx	lr
 8011b0a:	b510      	push	{r4, lr}
 8011b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b14:	4291      	cmp	r1, r2
 8011b16:	d1f9      	bne.n	8011b0c <memcpy+0xe>
 8011b18:	bd10      	pop	{r4, pc}

08011b1a <abort>:
 8011b1a:	b508      	push	{r3, lr}
 8011b1c:	2006      	movs	r0, #6
 8011b1e:	f000 fcc3 	bl	80124a8 <raise>
 8011b22:	2001      	movs	r0, #1
 8011b24:	f7f9 fd7a 	bl	800b61c <_exit>

08011b28 <_free_r>:
 8011b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b2a:	2900      	cmp	r1, #0
 8011b2c:	d044      	beq.n	8011bb8 <_free_r+0x90>
 8011b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b32:	9001      	str	r0, [sp, #4]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f1a1 0404 	sub.w	r4, r1, #4
 8011b3a:	bfb8      	it	lt
 8011b3c:	18e4      	addlt	r4, r4, r3
 8011b3e:	f7ff fd05 	bl	801154c <__malloc_lock>
 8011b42:	4a1e      	ldr	r2, [pc, #120]	; (8011bbc <_free_r+0x94>)
 8011b44:	9801      	ldr	r0, [sp, #4]
 8011b46:	6813      	ldr	r3, [r2, #0]
 8011b48:	b933      	cbnz	r3, 8011b58 <_free_r+0x30>
 8011b4a:	6063      	str	r3, [r4, #4]
 8011b4c:	6014      	str	r4, [r2, #0]
 8011b4e:	b003      	add	sp, #12
 8011b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b54:	f7ff bd00 	b.w	8011558 <__malloc_unlock>
 8011b58:	42a3      	cmp	r3, r4
 8011b5a:	d908      	bls.n	8011b6e <_free_r+0x46>
 8011b5c:	6825      	ldr	r5, [r4, #0]
 8011b5e:	1961      	adds	r1, r4, r5
 8011b60:	428b      	cmp	r3, r1
 8011b62:	bf01      	itttt	eq
 8011b64:	6819      	ldreq	r1, [r3, #0]
 8011b66:	685b      	ldreq	r3, [r3, #4]
 8011b68:	1949      	addeq	r1, r1, r5
 8011b6a:	6021      	streq	r1, [r4, #0]
 8011b6c:	e7ed      	b.n	8011b4a <_free_r+0x22>
 8011b6e:	461a      	mov	r2, r3
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	b10b      	cbz	r3, 8011b78 <_free_r+0x50>
 8011b74:	42a3      	cmp	r3, r4
 8011b76:	d9fa      	bls.n	8011b6e <_free_r+0x46>
 8011b78:	6811      	ldr	r1, [r2, #0]
 8011b7a:	1855      	adds	r5, r2, r1
 8011b7c:	42a5      	cmp	r5, r4
 8011b7e:	d10b      	bne.n	8011b98 <_free_r+0x70>
 8011b80:	6824      	ldr	r4, [r4, #0]
 8011b82:	4421      	add	r1, r4
 8011b84:	1854      	adds	r4, r2, r1
 8011b86:	42a3      	cmp	r3, r4
 8011b88:	6011      	str	r1, [r2, #0]
 8011b8a:	d1e0      	bne.n	8011b4e <_free_r+0x26>
 8011b8c:	681c      	ldr	r4, [r3, #0]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	6053      	str	r3, [r2, #4]
 8011b92:	440c      	add	r4, r1
 8011b94:	6014      	str	r4, [r2, #0]
 8011b96:	e7da      	b.n	8011b4e <_free_r+0x26>
 8011b98:	d902      	bls.n	8011ba0 <_free_r+0x78>
 8011b9a:	230c      	movs	r3, #12
 8011b9c:	6003      	str	r3, [r0, #0]
 8011b9e:	e7d6      	b.n	8011b4e <_free_r+0x26>
 8011ba0:	6825      	ldr	r5, [r4, #0]
 8011ba2:	1961      	adds	r1, r4, r5
 8011ba4:	428b      	cmp	r3, r1
 8011ba6:	bf04      	itt	eq
 8011ba8:	6819      	ldreq	r1, [r3, #0]
 8011baa:	685b      	ldreq	r3, [r3, #4]
 8011bac:	6063      	str	r3, [r4, #4]
 8011bae:	bf04      	itt	eq
 8011bb0:	1949      	addeq	r1, r1, r5
 8011bb2:	6021      	streq	r1, [r4, #0]
 8011bb4:	6054      	str	r4, [r2, #4]
 8011bb6:	e7ca      	b.n	8011b4e <_free_r+0x26>
 8011bb8:	b003      	add	sp, #12
 8011bba:	bd30      	pop	{r4, r5, pc}
 8011bbc:	20008014 	.word	0x20008014

08011bc0 <__sfputc_r>:
 8011bc0:	6893      	ldr	r3, [r2, #8]
 8011bc2:	3b01      	subs	r3, #1
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	b410      	push	{r4}
 8011bc8:	6093      	str	r3, [r2, #8]
 8011bca:	da08      	bge.n	8011bde <__sfputc_r+0x1e>
 8011bcc:	6994      	ldr	r4, [r2, #24]
 8011bce:	42a3      	cmp	r3, r4
 8011bd0:	db01      	blt.n	8011bd6 <__sfputc_r+0x16>
 8011bd2:	290a      	cmp	r1, #10
 8011bd4:	d103      	bne.n	8011bde <__sfputc_r+0x1e>
 8011bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bda:	f000 bba7 	b.w	801232c <__swbuf_r>
 8011bde:	6813      	ldr	r3, [r2, #0]
 8011be0:	1c58      	adds	r0, r3, #1
 8011be2:	6010      	str	r0, [r2, #0]
 8011be4:	7019      	strb	r1, [r3, #0]
 8011be6:	4608      	mov	r0, r1
 8011be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bec:	4770      	bx	lr

08011bee <__sfputs_r>:
 8011bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	460f      	mov	r7, r1
 8011bf4:	4614      	mov	r4, r2
 8011bf6:	18d5      	adds	r5, r2, r3
 8011bf8:	42ac      	cmp	r4, r5
 8011bfa:	d101      	bne.n	8011c00 <__sfputs_r+0x12>
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	e007      	b.n	8011c10 <__sfputs_r+0x22>
 8011c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c04:	463a      	mov	r2, r7
 8011c06:	4630      	mov	r0, r6
 8011c08:	f7ff ffda 	bl	8011bc0 <__sfputc_r>
 8011c0c:	1c43      	adds	r3, r0, #1
 8011c0e:	d1f3      	bne.n	8011bf8 <__sfputs_r+0xa>
 8011c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c14 <_vfiprintf_r>:
 8011c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c18:	460d      	mov	r5, r1
 8011c1a:	b09d      	sub	sp, #116	; 0x74
 8011c1c:	4614      	mov	r4, r2
 8011c1e:	4698      	mov	r8, r3
 8011c20:	4606      	mov	r6, r0
 8011c22:	b118      	cbz	r0, 8011c2c <_vfiprintf_r+0x18>
 8011c24:	6a03      	ldr	r3, [r0, #32]
 8011c26:	b90b      	cbnz	r3, 8011c2c <_vfiprintf_r+0x18>
 8011c28:	f7ff fde2 	bl	80117f0 <__sinit>
 8011c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c2e:	07d9      	lsls	r1, r3, #31
 8011c30:	d405      	bmi.n	8011c3e <_vfiprintf_r+0x2a>
 8011c32:	89ab      	ldrh	r3, [r5, #12]
 8011c34:	059a      	lsls	r2, r3, #22
 8011c36:	d402      	bmi.n	8011c3e <_vfiprintf_r+0x2a>
 8011c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c3a:	f7ff ff56 	bl	8011aea <__retarget_lock_acquire_recursive>
 8011c3e:	89ab      	ldrh	r3, [r5, #12]
 8011c40:	071b      	lsls	r3, r3, #28
 8011c42:	d501      	bpl.n	8011c48 <_vfiprintf_r+0x34>
 8011c44:	692b      	ldr	r3, [r5, #16]
 8011c46:	b99b      	cbnz	r3, 8011c70 <_vfiprintf_r+0x5c>
 8011c48:	4629      	mov	r1, r5
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f000 fbac 	bl	80123a8 <__swsetup_r>
 8011c50:	b170      	cbz	r0, 8011c70 <_vfiprintf_r+0x5c>
 8011c52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c54:	07dc      	lsls	r4, r3, #31
 8011c56:	d504      	bpl.n	8011c62 <_vfiprintf_r+0x4e>
 8011c58:	f04f 30ff 	mov.w	r0, #4294967295
 8011c5c:	b01d      	add	sp, #116	; 0x74
 8011c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c62:	89ab      	ldrh	r3, [r5, #12]
 8011c64:	0598      	lsls	r0, r3, #22
 8011c66:	d4f7      	bmi.n	8011c58 <_vfiprintf_r+0x44>
 8011c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c6a:	f7ff ff3f 	bl	8011aec <__retarget_lock_release_recursive>
 8011c6e:	e7f3      	b.n	8011c58 <_vfiprintf_r+0x44>
 8011c70:	2300      	movs	r3, #0
 8011c72:	9309      	str	r3, [sp, #36]	; 0x24
 8011c74:	2320      	movs	r3, #32
 8011c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c7e:	2330      	movs	r3, #48	; 0x30
 8011c80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011e34 <_vfiprintf_r+0x220>
 8011c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c88:	f04f 0901 	mov.w	r9, #1
 8011c8c:	4623      	mov	r3, r4
 8011c8e:	469a      	mov	sl, r3
 8011c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c94:	b10a      	cbz	r2, 8011c9a <_vfiprintf_r+0x86>
 8011c96:	2a25      	cmp	r2, #37	; 0x25
 8011c98:	d1f9      	bne.n	8011c8e <_vfiprintf_r+0x7a>
 8011c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8011c9e:	d00b      	beq.n	8011cb8 <_vfiprintf_r+0xa4>
 8011ca0:	465b      	mov	r3, fp
 8011ca2:	4622      	mov	r2, r4
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f7ff ffa1 	bl	8011bee <__sfputs_r>
 8011cac:	3001      	adds	r0, #1
 8011cae:	f000 80a9 	beq.w	8011e04 <_vfiprintf_r+0x1f0>
 8011cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cb4:	445a      	add	r2, fp
 8011cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8011cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	f000 80a1 	beq.w	8011e04 <_vfiprintf_r+0x1f0>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ccc:	f10a 0a01 	add.w	sl, sl, #1
 8011cd0:	9304      	str	r3, [sp, #16]
 8011cd2:	9307      	str	r3, [sp, #28]
 8011cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8011cda:	4654      	mov	r4, sl
 8011cdc:	2205      	movs	r2, #5
 8011cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ce2:	4854      	ldr	r0, [pc, #336]	; (8011e34 <_vfiprintf_r+0x220>)
 8011ce4:	f7ee faa4 	bl	8000230 <memchr>
 8011ce8:	9a04      	ldr	r2, [sp, #16]
 8011cea:	b9d8      	cbnz	r0, 8011d24 <_vfiprintf_r+0x110>
 8011cec:	06d1      	lsls	r1, r2, #27
 8011cee:	bf44      	itt	mi
 8011cf0:	2320      	movmi	r3, #32
 8011cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cf6:	0713      	lsls	r3, r2, #28
 8011cf8:	bf44      	itt	mi
 8011cfa:	232b      	movmi	r3, #43	; 0x2b
 8011cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d00:	f89a 3000 	ldrb.w	r3, [sl]
 8011d04:	2b2a      	cmp	r3, #42	; 0x2a
 8011d06:	d015      	beq.n	8011d34 <_vfiprintf_r+0x120>
 8011d08:	9a07      	ldr	r2, [sp, #28]
 8011d0a:	4654      	mov	r4, sl
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	f04f 0c0a 	mov.w	ip, #10
 8011d12:	4621      	mov	r1, r4
 8011d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d18:	3b30      	subs	r3, #48	; 0x30
 8011d1a:	2b09      	cmp	r3, #9
 8011d1c:	d94d      	bls.n	8011dba <_vfiprintf_r+0x1a6>
 8011d1e:	b1b0      	cbz	r0, 8011d4e <_vfiprintf_r+0x13a>
 8011d20:	9207      	str	r2, [sp, #28]
 8011d22:	e014      	b.n	8011d4e <_vfiprintf_r+0x13a>
 8011d24:	eba0 0308 	sub.w	r3, r0, r8
 8011d28:	fa09 f303 	lsl.w	r3, r9, r3
 8011d2c:	4313      	orrs	r3, r2
 8011d2e:	9304      	str	r3, [sp, #16]
 8011d30:	46a2      	mov	sl, r4
 8011d32:	e7d2      	b.n	8011cda <_vfiprintf_r+0xc6>
 8011d34:	9b03      	ldr	r3, [sp, #12]
 8011d36:	1d19      	adds	r1, r3, #4
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	9103      	str	r1, [sp, #12]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	bfbb      	ittet	lt
 8011d40:	425b      	neglt	r3, r3
 8011d42:	f042 0202 	orrlt.w	r2, r2, #2
 8011d46:	9307      	strge	r3, [sp, #28]
 8011d48:	9307      	strlt	r3, [sp, #28]
 8011d4a:	bfb8      	it	lt
 8011d4c:	9204      	strlt	r2, [sp, #16]
 8011d4e:	7823      	ldrb	r3, [r4, #0]
 8011d50:	2b2e      	cmp	r3, #46	; 0x2e
 8011d52:	d10c      	bne.n	8011d6e <_vfiprintf_r+0x15a>
 8011d54:	7863      	ldrb	r3, [r4, #1]
 8011d56:	2b2a      	cmp	r3, #42	; 0x2a
 8011d58:	d134      	bne.n	8011dc4 <_vfiprintf_r+0x1b0>
 8011d5a:	9b03      	ldr	r3, [sp, #12]
 8011d5c:	1d1a      	adds	r2, r3, #4
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	9203      	str	r2, [sp, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	bfb8      	it	lt
 8011d66:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d6a:	3402      	adds	r4, #2
 8011d6c:	9305      	str	r3, [sp, #20]
 8011d6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011e44 <_vfiprintf_r+0x230>
 8011d72:	7821      	ldrb	r1, [r4, #0]
 8011d74:	2203      	movs	r2, #3
 8011d76:	4650      	mov	r0, sl
 8011d78:	f7ee fa5a 	bl	8000230 <memchr>
 8011d7c:	b138      	cbz	r0, 8011d8e <_vfiprintf_r+0x17a>
 8011d7e:	9b04      	ldr	r3, [sp, #16]
 8011d80:	eba0 000a 	sub.w	r0, r0, sl
 8011d84:	2240      	movs	r2, #64	; 0x40
 8011d86:	4082      	lsls	r2, r0
 8011d88:	4313      	orrs	r3, r2
 8011d8a:	3401      	adds	r4, #1
 8011d8c:	9304      	str	r3, [sp, #16]
 8011d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d92:	4829      	ldr	r0, [pc, #164]	; (8011e38 <_vfiprintf_r+0x224>)
 8011d94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d98:	2206      	movs	r2, #6
 8011d9a:	f7ee fa49 	bl	8000230 <memchr>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d03f      	beq.n	8011e22 <_vfiprintf_r+0x20e>
 8011da2:	4b26      	ldr	r3, [pc, #152]	; (8011e3c <_vfiprintf_r+0x228>)
 8011da4:	bb1b      	cbnz	r3, 8011dee <_vfiprintf_r+0x1da>
 8011da6:	9b03      	ldr	r3, [sp, #12]
 8011da8:	3307      	adds	r3, #7
 8011daa:	f023 0307 	bic.w	r3, r3, #7
 8011dae:	3308      	adds	r3, #8
 8011db0:	9303      	str	r3, [sp, #12]
 8011db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011db4:	443b      	add	r3, r7
 8011db6:	9309      	str	r3, [sp, #36]	; 0x24
 8011db8:	e768      	b.n	8011c8c <_vfiprintf_r+0x78>
 8011dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	2001      	movs	r0, #1
 8011dc2:	e7a6      	b.n	8011d12 <_vfiprintf_r+0xfe>
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	3401      	adds	r4, #1
 8011dc8:	9305      	str	r3, [sp, #20]
 8011dca:	4619      	mov	r1, r3
 8011dcc:	f04f 0c0a 	mov.w	ip, #10
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dd6:	3a30      	subs	r2, #48	; 0x30
 8011dd8:	2a09      	cmp	r2, #9
 8011dda:	d903      	bls.n	8011de4 <_vfiprintf_r+0x1d0>
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d0c6      	beq.n	8011d6e <_vfiprintf_r+0x15a>
 8011de0:	9105      	str	r1, [sp, #20]
 8011de2:	e7c4      	b.n	8011d6e <_vfiprintf_r+0x15a>
 8011de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011de8:	4604      	mov	r4, r0
 8011dea:	2301      	movs	r3, #1
 8011dec:	e7f0      	b.n	8011dd0 <_vfiprintf_r+0x1bc>
 8011dee:	ab03      	add	r3, sp, #12
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	462a      	mov	r2, r5
 8011df4:	4b12      	ldr	r3, [pc, #72]	; (8011e40 <_vfiprintf_r+0x22c>)
 8011df6:	a904      	add	r1, sp, #16
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f3af 8000 	nop.w
 8011dfe:	4607      	mov	r7, r0
 8011e00:	1c78      	adds	r0, r7, #1
 8011e02:	d1d6      	bne.n	8011db2 <_vfiprintf_r+0x19e>
 8011e04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e06:	07d9      	lsls	r1, r3, #31
 8011e08:	d405      	bmi.n	8011e16 <_vfiprintf_r+0x202>
 8011e0a:	89ab      	ldrh	r3, [r5, #12]
 8011e0c:	059a      	lsls	r2, r3, #22
 8011e0e:	d402      	bmi.n	8011e16 <_vfiprintf_r+0x202>
 8011e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e12:	f7ff fe6b 	bl	8011aec <__retarget_lock_release_recursive>
 8011e16:	89ab      	ldrh	r3, [r5, #12]
 8011e18:	065b      	lsls	r3, r3, #25
 8011e1a:	f53f af1d 	bmi.w	8011c58 <_vfiprintf_r+0x44>
 8011e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e20:	e71c      	b.n	8011c5c <_vfiprintf_r+0x48>
 8011e22:	ab03      	add	r3, sp, #12
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	462a      	mov	r2, r5
 8011e28:	4b05      	ldr	r3, [pc, #20]	; (8011e40 <_vfiprintf_r+0x22c>)
 8011e2a:	a904      	add	r1, sp, #16
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	f000 f879 	bl	8011f24 <_printf_i>
 8011e32:	e7e4      	b.n	8011dfe <_vfiprintf_r+0x1ea>
 8011e34:	08014804 	.word	0x08014804
 8011e38:	0801480e 	.word	0x0801480e
 8011e3c:	00000000 	.word	0x00000000
 8011e40:	08011bef 	.word	0x08011bef
 8011e44:	0801480a 	.word	0x0801480a

08011e48 <_printf_common>:
 8011e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e4c:	4616      	mov	r6, r2
 8011e4e:	4699      	mov	r9, r3
 8011e50:	688a      	ldr	r2, [r1, #8]
 8011e52:	690b      	ldr	r3, [r1, #16]
 8011e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	bfb8      	it	lt
 8011e5c:	4613      	movlt	r3, r2
 8011e5e:	6033      	str	r3, [r6, #0]
 8011e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e64:	4607      	mov	r7, r0
 8011e66:	460c      	mov	r4, r1
 8011e68:	b10a      	cbz	r2, 8011e6e <_printf_common+0x26>
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	6033      	str	r3, [r6, #0]
 8011e6e:	6823      	ldr	r3, [r4, #0]
 8011e70:	0699      	lsls	r1, r3, #26
 8011e72:	bf42      	ittt	mi
 8011e74:	6833      	ldrmi	r3, [r6, #0]
 8011e76:	3302      	addmi	r3, #2
 8011e78:	6033      	strmi	r3, [r6, #0]
 8011e7a:	6825      	ldr	r5, [r4, #0]
 8011e7c:	f015 0506 	ands.w	r5, r5, #6
 8011e80:	d106      	bne.n	8011e90 <_printf_common+0x48>
 8011e82:	f104 0a19 	add.w	sl, r4, #25
 8011e86:	68e3      	ldr	r3, [r4, #12]
 8011e88:	6832      	ldr	r2, [r6, #0]
 8011e8a:	1a9b      	subs	r3, r3, r2
 8011e8c:	42ab      	cmp	r3, r5
 8011e8e:	dc26      	bgt.n	8011ede <_printf_common+0x96>
 8011e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e94:	1e13      	subs	r3, r2, #0
 8011e96:	6822      	ldr	r2, [r4, #0]
 8011e98:	bf18      	it	ne
 8011e9a:	2301      	movne	r3, #1
 8011e9c:	0692      	lsls	r2, r2, #26
 8011e9e:	d42b      	bmi.n	8011ef8 <_printf_common+0xb0>
 8011ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ea4:	4649      	mov	r1, r9
 8011ea6:	4638      	mov	r0, r7
 8011ea8:	47c0      	blx	r8
 8011eaa:	3001      	adds	r0, #1
 8011eac:	d01e      	beq.n	8011eec <_printf_common+0xa4>
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	6922      	ldr	r2, [r4, #16]
 8011eb2:	f003 0306 	and.w	r3, r3, #6
 8011eb6:	2b04      	cmp	r3, #4
 8011eb8:	bf02      	ittt	eq
 8011eba:	68e5      	ldreq	r5, [r4, #12]
 8011ebc:	6833      	ldreq	r3, [r6, #0]
 8011ebe:	1aed      	subeq	r5, r5, r3
 8011ec0:	68a3      	ldr	r3, [r4, #8]
 8011ec2:	bf0c      	ite	eq
 8011ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ec8:	2500      	movne	r5, #0
 8011eca:	4293      	cmp	r3, r2
 8011ecc:	bfc4      	itt	gt
 8011ece:	1a9b      	subgt	r3, r3, r2
 8011ed0:	18ed      	addgt	r5, r5, r3
 8011ed2:	2600      	movs	r6, #0
 8011ed4:	341a      	adds	r4, #26
 8011ed6:	42b5      	cmp	r5, r6
 8011ed8:	d11a      	bne.n	8011f10 <_printf_common+0xc8>
 8011eda:	2000      	movs	r0, #0
 8011edc:	e008      	b.n	8011ef0 <_printf_common+0xa8>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	4652      	mov	r2, sl
 8011ee2:	4649      	mov	r1, r9
 8011ee4:	4638      	mov	r0, r7
 8011ee6:	47c0      	blx	r8
 8011ee8:	3001      	adds	r0, #1
 8011eea:	d103      	bne.n	8011ef4 <_printf_common+0xac>
 8011eec:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef4:	3501      	adds	r5, #1
 8011ef6:	e7c6      	b.n	8011e86 <_printf_common+0x3e>
 8011ef8:	18e1      	adds	r1, r4, r3
 8011efa:	1c5a      	adds	r2, r3, #1
 8011efc:	2030      	movs	r0, #48	; 0x30
 8011efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f02:	4422      	add	r2, r4
 8011f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f0c:	3302      	adds	r3, #2
 8011f0e:	e7c7      	b.n	8011ea0 <_printf_common+0x58>
 8011f10:	2301      	movs	r3, #1
 8011f12:	4622      	mov	r2, r4
 8011f14:	4649      	mov	r1, r9
 8011f16:	4638      	mov	r0, r7
 8011f18:	47c0      	blx	r8
 8011f1a:	3001      	adds	r0, #1
 8011f1c:	d0e6      	beq.n	8011eec <_printf_common+0xa4>
 8011f1e:	3601      	adds	r6, #1
 8011f20:	e7d9      	b.n	8011ed6 <_printf_common+0x8e>
	...

08011f24 <_printf_i>:
 8011f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f28:	7e0f      	ldrb	r7, [r1, #24]
 8011f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f2c:	2f78      	cmp	r7, #120	; 0x78
 8011f2e:	4691      	mov	r9, r2
 8011f30:	4680      	mov	r8, r0
 8011f32:	460c      	mov	r4, r1
 8011f34:	469a      	mov	sl, r3
 8011f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f3a:	d807      	bhi.n	8011f4c <_printf_i+0x28>
 8011f3c:	2f62      	cmp	r7, #98	; 0x62
 8011f3e:	d80a      	bhi.n	8011f56 <_printf_i+0x32>
 8011f40:	2f00      	cmp	r7, #0
 8011f42:	f000 80d4 	beq.w	80120ee <_printf_i+0x1ca>
 8011f46:	2f58      	cmp	r7, #88	; 0x58
 8011f48:	f000 80c0 	beq.w	80120cc <_printf_i+0x1a8>
 8011f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f54:	e03a      	b.n	8011fcc <_printf_i+0xa8>
 8011f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f5a:	2b15      	cmp	r3, #21
 8011f5c:	d8f6      	bhi.n	8011f4c <_printf_i+0x28>
 8011f5e:	a101      	add	r1, pc, #4	; (adr r1, 8011f64 <_printf_i+0x40>)
 8011f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f64:	08011fbd 	.word	0x08011fbd
 8011f68:	08011fd1 	.word	0x08011fd1
 8011f6c:	08011f4d 	.word	0x08011f4d
 8011f70:	08011f4d 	.word	0x08011f4d
 8011f74:	08011f4d 	.word	0x08011f4d
 8011f78:	08011f4d 	.word	0x08011f4d
 8011f7c:	08011fd1 	.word	0x08011fd1
 8011f80:	08011f4d 	.word	0x08011f4d
 8011f84:	08011f4d 	.word	0x08011f4d
 8011f88:	08011f4d 	.word	0x08011f4d
 8011f8c:	08011f4d 	.word	0x08011f4d
 8011f90:	080120d5 	.word	0x080120d5
 8011f94:	08011ffd 	.word	0x08011ffd
 8011f98:	0801208f 	.word	0x0801208f
 8011f9c:	08011f4d 	.word	0x08011f4d
 8011fa0:	08011f4d 	.word	0x08011f4d
 8011fa4:	080120f7 	.word	0x080120f7
 8011fa8:	08011f4d 	.word	0x08011f4d
 8011fac:	08011ffd 	.word	0x08011ffd
 8011fb0:	08011f4d 	.word	0x08011f4d
 8011fb4:	08011f4d 	.word	0x08011f4d
 8011fb8:	08012097 	.word	0x08012097
 8011fbc:	682b      	ldr	r3, [r5, #0]
 8011fbe:	1d1a      	adds	r2, r3, #4
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	602a      	str	r2, [r5, #0]
 8011fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fcc:	2301      	movs	r3, #1
 8011fce:	e09f      	b.n	8012110 <_printf_i+0x1ec>
 8011fd0:	6820      	ldr	r0, [r4, #0]
 8011fd2:	682b      	ldr	r3, [r5, #0]
 8011fd4:	0607      	lsls	r7, r0, #24
 8011fd6:	f103 0104 	add.w	r1, r3, #4
 8011fda:	6029      	str	r1, [r5, #0]
 8011fdc:	d501      	bpl.n	8011fe2 <_printf_i+0xbe>
 8011fde:	681e      	ldr	r6, [r3, #0]
 8011fe0:	e003      	b.n	8011fea <_printf_i+0xc6>
 8011fe2:	0646      	lsls	r6, r0, #25
 8011fe4:	d5fb      	bpl.n	8011fde <_printf_i+0xba>
 8011fe6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011fea:	2e00      	cmp	r6, #0
 8011fec:	da03      	bge.n	8011ff6 <_printf_i+0xd2>
 8011fee:	232d      	movs	r3, #45	; 0x2d
 8011ff0:	4276      	negs	r6, r6
 8011ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ff6:	485a      	ldr	r0, [pc, #360]	; (8012160 <_printf_i+0x23c>)
 8011ff8:	230a      	movs	r3, #10
 8011ffa:	e012      	b.n	8012022 <_printf_i+0xfe>
 8011ffc:	682b      	ldr	r3, [r5, #0]
 8011ffe:	6820      	ldr	r0, [r4, #0]
 8012000:	1d19      	adds	r1, r3, #4
 8012002:	6029      	str	r1, [r5, #0]
 8012004:	0605      	lsls	r5, r0, #24
 8012006:	d501      	bpl.n	801200c <_printf_i+0xe8>
 8012008:	681e      	ldr	r6, [r3, #0]
 801200a:	e002      	b.n	8012012 <_printf_i+0xee>
 801200c:	0641      	lsls	r1, r0, #25
 801200e:	d5fb      	bpl.n	8012008 <_printf_i+0xe4>
 8012010:	881e      	ldrh	r6, [r3, #0]
 8012012:	4853      	ldr	r0, [pc, #332]	; (8012160 <_printf_i+0x23c>)
 8012014:	2f6f      	cmp	r7, #111	; 0x6f
 8012016:	bf0c      	ite	eq
 8012018:	2308      	moveq	r3, #8
 801201a:	230a      	movne	r3, #10
 801201c:	2100      	movs	r1, #0
 801201e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012022:	6865      	ldr	r5, [r4, #4]
 8012024:	60a5      	str	r5, [r4, #8]
 8012026:	2d00      	cmp	r5, #0
 8012028:	bfa2      	ittt	ge
 801202a:	6821      	ldrge	r1, [r4, #0]
 801202c:	f021 0104 	bicge.w	r1, r1, #4
 8012030:	6021      	strge	r1, [r4, #0]
 8012032:	b90e      	cbnz	r6, 8012038 <_printf_i+0x114>
 8012034:	2d00      	cmp	r5, #0
 8012036:	d04b      	beq.n	80120d0 <_printf_i+0x1ac>
 8012038:	4615      	mov	r5, r2
 801203a:	fbb6 f1f3 	udiv	r1, r6, r3
 801203e:	fb03 6711 	mls	r7, r3, r1, r6
 8012042:	5dc7      	ldrb	r7, [r0, r7]
 8012044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012048:	4637      	mov	r7, r6
 801204a:	42bb      	cmp	r3, r7
 801204c:	460e      	mov	r6, r1
 801204e:	d9f4      	bls.n	801203a <_printf_i+0x116>
 8012050:	2b08      	cmp	r3, #8
 8012052:	d10b      	bne.n	801206c <_printf_i+0x148>
 8012054:	6823      	ldr	r3, [r4, #0]
 8012056:	07de      	lsls	r6, r3, #31
 8012058:	d508      	bpl.n	801206c <_printf_i+0x148>
 801205a:	6923      	ldr	r3, [r4, #16]
 801205c:	6861      	ldr	r1, [r4, #4]
 801205e:	4299      	cmp	r1, r3
 8012060:	bfde      	ittt	le
 8012062:	2330      	movle	r3, #48	; 0x30
 8012064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012068:	f105 35ff 	addle.w	r5, r5, #4294967295
 801206c:	1b52      	subs	r2, r2, r5
 801206e:	6122      	str	r2, [r4, #16]
 8012070:	f8cd a000 	str.w	sl, [sp]
 8012074:	464b      	mov	r3, r9
 8012076:	aa03      	add	r2, sp, #12
 8012078:	4621      	mov	r1, r4
 801207a:	4640      	mov	r0, r8
 801207c:	f7ff fee4 	bl	8011e48 <_printf_common>
 8012080:	3001      	adds	r0, #1
 8012082:	d14a      	bne.n	801211a <_printf_i+0x1f6>
 8012084:	f04f 30ff 	mov.w	r0, #4294967295
 8012088:	b004      	add	sp, #16
 801208a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	f043 0320 	orr.w	r3, r3, #32
 8012094:	6023      	str	r3, [r4, #0]
 8012096:	4833      	ldr	r0, [pc, #204]	; (8012164 <_printf_i+0x240>)
 8012098:	2778      	movs	r7, #120	; 0x78
 801209a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801209e:	6823      	ldr	r3, [r4, #0]
 80120a0:	6829      	ldr	r1, [r5, #0]
 80120a2:	061f      	lsls	r7, r3, #24
 80120a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80120a8:	d402      	bmi.n	80120b0 <_printf_i+0x18c>
 80120aa:	065f      	lsls	r7, r3, #25
 80120ac:	bf48      	it	mi
 80120ae:	b2b6      	uxthmi	r6, r6
 80120b0:	07df      	lsls	r7, r3, #31
 80120b2:	bf48      	it	mi
 80120b4:	f043 0320 	orrmi.w	r3, r3, #32
 80120b8:	6029      	str	r1, [r5, #0]
 80120ba:	bf48      	it	mi
 80120bc:	6023      	strmi	r3, [r4, #0]
 80120be:	b91e      	cbnz	r6, 80120c8 <_printf_i+0x1a4>
 80120c0:	6823      	ldr	r3, [r4, #0]
 80120c2:	f023 0320 	bic.w	r3, r3, #32
 80120c6:	6023      	str	r3, [r4, #0]
 80120c8:	2310      	movs	r3, #16
 80120ca:	e7a7      	b.n	801201c <_printf_i+0xf8>
 80120cc:	4824      	ldr	r0, [pc, #144]	; (8012160 <_printf_i+0x23c>)
 80120ce:	e7e4      	b.n	801209a <_printf_i+0x176>
 80120d0:	4615      	mov	r5, r2
 80120d2:	e7bd      	b.n	8012050 <_printf_i+0x12c>
 80120d4:	682b      	ldr	r3, [r5, #0]
 80120d6:	6826      	ldr	r6, [r4, #0]
 80120d8:	6961      	ldr	r1, [r4, #20]
 80120da:	1d18      	adds	r0, r3, #4
 80120dc:	6028      	str	r0, [r5, #0]
 80120de:	0635      	lsls	r5, r6, #24
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	d501      	bpl.n	80120e8 <_printf_i+0x1c4>
 80120e4:	6019      	str	r1, [r3, #0]
 80120e6:	e002      	b.n	80120ee <_printf_i+0x1ca>
 80120e8:	0670      	lsls	r0, r6, #25
 80120ea:	d5fb      	bpl.n	80120e4 <_printf_i+0x1c0>
 80120ec:	8019      	strh	r1, [r3, #0]
 80120ee:	2300      	movs	r3, #0
 80120f0:	6123      	str	r3, [r4, #16]
 80120f2:	4615      	mov	r5, r2
 80120f4:	e7bc      	b.n	8012070 <_printf_i+0x14c>
 80120f6:	682b      	ldr	r3, [r5, #0]
 80120f8:	1d1a      	adds	r2, r3, #4
 80120fa:	602a      	str	r2, [r5, #0]
 80120fc:	681d      	ldr	r5, [r3, #0]
 80120fe:	6862      	ldr	r2, [r4, #4]
 8012100:	2100      	movs	r1, #0
 8012102:	4628      	mov	r0, r5
 8012104:	f7ee f894 	bl	8000230 <memchr>
 8012108:	b108      	cbz	r0, 801210e <_printf_i+0x1ea>
 801210a:	1b40      	subs	r0, r0, r5
 801210c:	6060      	str	r0, [r4, #4]
 801210e:	6863      	ldr	r3, [r4, #4]
 8012110:	6123      	str	r3, [r4, #16]
 8012112:	2300      	movs	r3, #0
 8012114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012118:	e7aa      	b.n	8012070 <_printf_i+0x14c>
 801211a:	6923      	ldr	r3, [r4, #16]
 801211c:	462a      	mov	r2, r5
 801211e:	4649      	mov	r1, r9
 8012120:	4640      	mov	r0, r8
 8012122:	47d0      	blx	sl
 8012124:	3001      	adds	r0, #1
 8012126:	d0ad      	beq.n	8012084 <_printf_i+0x160>
 8012128:	6823      	ldr	r3, [r4, #0]
 801212a:	079b      	lsls	r3, r3, #30
 801212c:	d413      	bmi.n	8012156 <_printf_i+0x232>
 801212e:	68e0      	ldr	r0, [r4, #12]
 8012130:	9b03      	ldr	r3, [sp, #12]
 8012132:	4298      	cmp	r0, r3
 8012134:	bfb8      	it	lt
 8012136:	4618      	movlt	r0, r3
 8012138:	e7a6      	b.n	8012088 <_printf_i+0x164>
 801213a:	2301      	movs	r3, #1
 801213c:	4632      	mov	r2, r6
 801213e:	4649      	mov	r1, r9
 8012140:	4640      	mov	r0, r8
 8012142:	47d0      	blx	sl
 8012144:	3001      	adds	r0, #1
 8012146:	d09d      	beq.n	8012084 <_printf_i+0x160>
 8012148:	3501      	adds	r5, #1
 801214a:	68e3      	ldr	r3, [r4, #12]
 801214c:	9903      	ldr	r1, [sp, #12]
 801214e:	1a5b      	subs	r3, r3, r1
 8012150:	42ab      	cmp	r3, r5
 8012152:	dcf2      	bgt.n	801213a <_printf_i+0x216>
 8012154:	e7eb      	b.n	801212e <_printf_i+0x20a>
 8012156:	2500      	movs	r5, #0
 8012158:	f104 0619 	add.w	r6, r4, #25
 801215c:	e7f5      	b.n	801214a <_printf_i+0x226>
 801215e:	bf00      	nop
 8012160:	08014815 	.word	0x08014815
 8012164:	08014826 	.word	0x08014826

08012168 <__sflush_r>:
 8012168:	898a      	ldrh	r2, [r1, #12]
 801216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801216e:	4605      	mov	r5, r0
 8012170:	0710      	lsls	r0, r2, #28
 8012172:	460c      	mov	r4, r1
 8012174:	d458      	bmi.n	8012228 <__sflush_r+0xc0>
 8012176:	684b      	ldr	r3, [r1, #4]
 8012178:	2b00      	cmp	r3, #0
 801217a:	dc05      	bgt.n	8012188 <__sflush_r+0x20>
 801217c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801217e:	2b00      	cmp	r3, #0
 8012180:	dc02      	bgt.n	8012188 <__sflush_r+0x20>
 8012182:	2000      	movs	r0, #0
 8012184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801218a:	2e00      	cmp	r6, #0
 801218c:	d0f9      	beq.n	8012182 <__sflush_r+0x1a>
 801218e:	2300      	movs	r3, #0
 8012190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012194:	682f      	ldr	r7, [r5, #0]
 8012196:	6a21      	ldr	r1, [r4, #32]
 8012198:	602b      	str	r3, [r5, #0]
 801219a:	d032      	beq.n	8012202 <__sflush_r+0x9a>
 801219c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	075a      	lsls	r2, r3, #29
 80121a2:	d505      	bpl.n	80121b0 <__sflush_r+0x48>
 80121a4:	6863      	ldr	r3, [r4, #4]
 80121a6:	1ac0      	subs	r0, r0, r3
 80121a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80121aa:	b10b      	cbz	r3, 80121b0 <__sflush_r+0x48>
 80121ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80121ae:	1ac0      	subs	r0, r0, r3
 80121b0:	2300      	movs	r3, #0
 80121b2:	4602      	mov	r2, r0
 80121b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121b6:	6a21      	ldr	r1, [r4, #32]
 80121b8:	4628      	mov	r0, r5
 80121ba:	47b0      	blx	r6
 80121bc:	1c43      	adds	r3, r0, #1
 80121be:	89a3      	ldrh	r3, [r4, #12]
 80121c0:	d106      	bne.n	80121d0 <__sflush_r+0x68>
 80121c2:	6829      	ldr	r1, [r5, #0]
 80121c4:	291d      	cmp	r1, #29
 80121c6:	d82b      	bhi.n	8012220 <__sflush_r+0xb8>
 80121c8:	4a29      	ldr	r2, [pc, #164]	; (8012270 <__sflush_r+0x108>)
 80121ca:	410a      	asrs	r2, r1
 80121cc:	07d6      	lsls	r6, r2, #31
 80121ce:	d427      	bmi.n	8012220 <__sflush_r+0xb8>
 80121d0:	2200      	movs	r2, #0
 80121d2:	6062      	str	r2, [r4, #4]
 80121d4:	04d9      	lsls	r1, r3, #19
 80121d6:	6922      	ldr	r2, [r4, #16]
 80121d8:	6022      	str	r2, [r4, #0]
 80121da:	d504      	bpl.n	80121e6 <__sflush_r+0x7e>
 80121dc:	1c42      	adds	r2, r0, #1
 80121de:	d101      	bne.n	80121e4 <__sflush_r+0x7c>
 80121e0:	682b      	ldr	r3, [r5, #0]
 80121e2:	b903      	cbnz	r3, 80121e6 <__sflush_r+0x7e>
 80121e4:	6560      	str	r0, [r4, #84]	; 0x54
 80121e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121e8:	602f      	str	r7, [r5, #0]
 80121ea:	2900      	cmp	r1, #0
 80121ec:	d0c9      	beq.n	8012182 <__sflush_r+0x1a>
 80121ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121f2:	4299      	cmp	r1, r3
 80121f4:	d002      	beq.n	80121fc <__sflush_r+0x94>
 80121f6:	4628      	mov	r0, r5
 80121f8:	f7ff fc96 	bl	8011b28 <_free_r>
 80121fc:	2000      	movs	r0, #0
 80121fe:	6360      	str	r0, [r4, #52]	; 0x34
 8012200:	e7c0      	b.n	8012184 <__sflush_r+0x1c>
 8012202:	2301      	movs	r3, #1
 8012204:	4628      	mov	r0, r5
 8012206:	47b0      	blx	r6
 8012208:	1c41      	adds	r1, r0, #1
 801220a:	d1c8      	bne.n	801219e <__sflush_r+0x36>
 801220c:	682b      	ldr	r3, [r5, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d0c5      	beq.n	801219e <__sflush_r+0x36>
 8012212:	2b1d      	cmp	r3, #29
 8012214:	d001      	beq.n	801221a <__sflush_r+0xb2>
 8012216:	2b16      	cmp	r3, #22
 8012218:	d101      	bne.n	801221e <__sflush_r+0xb6>
 801221a:	602f      	str	r7, [r5, #0]
 801221c:	e7b1      	b.n	8012182 <__sflush_r+0x1a>
 801221e:	89a3      	ldrh	r3, [r4, #12]
 8012220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012224:	81a3      	strh	r3, [r4, #12]
 8012226:	e7ad      	b.n	8012184 <__sflush_r+0x1c>
 8012228:	690f      	ldr	r7, [r1, #16]
 801222a:	2f00      	cmp	r7, #0
 801222c:	d0a9      	beq.n	8012182 <__sflush_r+0x1a>
 801222e:	0793      	lsls	r3, r2, #30
 8012230:	680e      	ldr	r6, [r1, #0]
 8012232:	bf08      	it	eq
 8012234:	694b      	ldreq	r3, [r1, #20]
 8012236:	600f      	str	r7, [r1, #0]
 8012238:	bf18      	it	ne
 801223a:	2300      	movne	r3, #0
 801223c:	eba6 0807 	sub.w	r8, r6, r7
 8012240:	608b      	str	r3, [r1, #8]
 8012242:	f1b8 0f00 	cmp.w	r8, #0
 8012246:	dd9c      	ble.n	8012182 <__sflush_r+0x1a>
 8012248:	6a21      	ldr	r1, [r4, #32]
 801224a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801224c:	4643      	mov	r3, r8
 801224e:	463a      	mov	r2, r7
 8012250:	4628      	mov	r0, r5
 8012252:	47b0      	blx	r6
 8012254:	2800      	cmp	r0, #0
 8012256:	dc06      	bgt.n	8012266 <__sflush_r+0xfe>
 8012258:	89a3      	ldrh	r3, [r4, #12]
 801225a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801225e:	81a3      	strh	r3, [r4, #12]
 8012260:	f04f 30ff 	mov.w	r0, #4294967295
 8012264:	e78e      	b.n	8012184 <__sflush_r+0x1c>
 8012266:	4407      	add	r7, r0
 8012268:	eba8 0800 	sub.w	r8, r8, r0
 801226c:	e7e9      	b.n	8012242 <__sflush_r+0xda>
 801226e:	bf00      	nop
 8012270:	dfbffffe 	.word	0xdfbffffe

08012274 <_fflush_r>:
 8012274:	b538      	push	{r3, r4, r5, lr}
 8012276:	690b      	ldr	r3, [r1, #16]
 8012278:	4605      	mov	r5, r0
 801227a:	460c      	mov	r4, r1
 801227c:	b913      	cbnz	r3, 8012284 <_fflush_r+0x10>
 801227e:	2500      	movs	r5, #0
 8012280:	4628      	mov	r0, r5
 8012282:	bd38      	pop	{r3, r4, r5, pc}
 8012284:	b118      	cbz	r0, 801228e <_fflush_r+0x1a>
 8012286:	6a03      	ldr	r3, [r0, #32]
 8012288:	b90b      	cbnz	r3, 801228e <_fflush_r+0x1a>
 801228a:	f7ff fab1 	bl	80117f0 <__sinit>
 801228e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d0f3      	beq.n	801227e <_fflush_r+0xa>
 8012296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012298:	07d0      	lsls	r0, r2, #31
 801229a:	d404      	bmi.n	80122a6 <_fflush_r+0x32>
 801229c:	0599      	lsls	r1, r3, #22
 801229e:	d402      	bmi.n	80122a6 <_fflush_r+0x32>
 80122a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122a2:	f7ff fc22 	bl	8011aea <__retarget_lock_acquire_recursive>
 80122a6:	4628      	mov	r0, r5
 80122a8:	4621      	mov	r1, r4
 80122aa:	f7ff ff5d 	bl	8012168 <__sflush_r>
 80122ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122b0:	07da      	lsls	r2, r3, #31
 80122b2:	4605      	mov	r5, r0
 80122b4:	d4e4      	bmi.n	8012280 <_fflush_r+0xc>
 80122b6:	89a3      	ldrh	r3, [r4, #12]
 80122b8:	059b      	lsls	r3, r3, #22
 80122ba:	d4e1      	bmi.n	8012280 <_fflush_r+0xc>
 80122bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122be:	f7ff fc15 	bl	8011aec <__retarget_lock_release_recursive>
 80122c2:	e7dd      	b.n	8012280 <_fflush_r+0xc>

080122c4 <_putc_r>:
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	460d      	mov	r5, r1
 80122c8:	4614      	mov	r4, r2
 80122ca:	4606      	mov	r6, r0
 80122cc:	b118      	cbz	r0, 80122d6 <_putc_r+0x12>
 80122ce:	6a03      	ldr	r3, [r0, #32]
 80122d0:	b90b      	cbnz	r3, 80122d6 <_putc_r+0x12>
 80122d2:	f7ff fa8d 	bl	80117f0 <__sinit>
 80122d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122d8:	07d8      	lsls	r0, r3, #31
 80122da:	d405      	bmi.n	80122e8 <_putc_r+0x24>
 80122dc:	89a3      	ldrh	r3, [r4, #12]
 80122de:	0599      	lsls	r1, r3, #22
 80122e0:	d402      	bmi.n	80122e8 <_putc_r+0x24>
 80122e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122e4:	f7ff fc01 	bl	8011aea <__retarget_lock_acquire_recursive>
 80122e8:	68a3      	ldr	r3, [r4, #8]
 80122ea:	3b01      	subs	r3, #1
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	60a3      	str	r3, [r4, #8]
 80122f0:	da05      	bge.n	80122fe <_putc_r+0x3a>
 80122f2:	69a2      	ldr	r2, [r4, #24]
 80122f4:	4293      	cmp	r3, r2
 80122f6:	db12      	blt.n	801231e <_putc_r+0x5a>
 80122f8:	b2eb      	uxtb	r3, r5
 80122fa:	2b0a      	cmp	r3, #10
 80122fc:	d00f      	beq.n	801231e <_putc_r+0x5a>
 80122fe:	6823      	ldr	r3, [r4, #0]
 8012300:	1c5a      	adds	r2, r3, #1
 8012302:	6022      	str	r2, [r4, #0]
 8012304:	701d      	strb	r5, [r3, #0]
 8012306:	b2ed      	uxtb	r5, r5
 8012308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801230a:	07da      	lsls	r2, r3, #31
 801230c:	d405      	bmi.n	801231a <_putc_r+0x56>
 801230e:	89a3      	ldrh	r3, [r4, #12]
 8012310:	059b      	lsls	r3, r3, #22
 8012312:	d402      	bmi.n	801231a <_putc_r+0x56>
 8012314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012316:	f7ff fbe9 	bl	8011aec <__retarget_lock_release_recursive>
 801231a:	4628      	mov	r0, r5
 801231c:	bd70      	pop	{r4, r5, r6, pc}
 801231e:	4629      	mov	r1, r5
 8012320:	4622      	mov	r2, r4
 8012322:	4630      	mov	r0, r6
 8012324:	f000 f802 	bl	801232c <__swbuf_r>
 8012328:	4605      	mov	r5, r0
 801232a:	e7ed      	b.n	8012308 <_putc_r+0x44>

0801232c <__swbuf_r>:
 801232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232e:	460e      	mov	r6, r1
 8012330:	4614      	mov	r4, r2
 8012332:	4605      	mov	r5, r0
 8012334:	b118      	cbz	r0, 801233e <__swbuf_r+0x12>
 8012336:	6a03      	ldr	r3, [r0, #32]
 8012338:	b90b      	cbnz	r3, 801233e <__swbuf_r+0x12>
 801233a:	f7ff fa59 	bl	80117f0 <__sinit>
 801233e:	69a3      	ldr	r3, [r4, #24]
 8012340:	60a3      	str	r3, [r4, #8]
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	071a      	lsls	r2, r3, #28
 8012346:	d525      	bpl.n	8012394 <__swbuf_r+0x68>
 8012348:	6923      	ldr	r3, [r4, #16]
 801234a:	b31b      	cbz	r3, 8012394 <__swbuf_r+0x68>
 801234c:	6823      	ldr	r3, [r4, #0]
 801234e:	6922      	ldr	r2, [r4, #16]
 8012350:	1a98      	subs	r0, r3, r2
 8012352:	6963      	ldr	r3, [r4, #20]
 8012354:	b2f6      	uxtb	r6, r6
 8012356:	4283      	cmp	r3, r0
 8012358:	4637      	mov	r7, r6
 801235a:	dc04      	bgt.n	8012366 <__swbuf_r+0x3a>
 801235c:	4621      	mov	r1, r4
 801235e:	4628      	mov	r0, r5
 8012360:	f7ff ff88 	bl	8012274 <_fflush_r>
 8012364:	b9e0      	cbnz	r0, 80123a0 <__swbuf_r+0x74>
 8012366:	68a3      	ldr	r3, [r4, #8]
 8012368:	3b01      	subs	r3, #1
 801236a:	60a3      	str	r3, [r4, #8]
 801236c:	6823      	ldr	r3, [r4, #0]
 801236e:	1c5a      	adds	r2, r3, #1
 8012370:	6022      	str	r2, [r4, #0]
 8012372:	701e      	strb	r6, [r3, #0]
 8012374:	6962      	ldr	r2, [r4, #20]
 8012376:	1c43      	adds	r3, r0, #1
 8012378:	429a      	cmp	r2, r3
 801237a:	d004      	beq.n	8012386 <__swbuf_r+0x5a>
 801237c:	89a3      	ldrh	r3, [r4, #12]
 801237e:	07db      	lsls	r3, r3, #31
 8012380:	d506      	bpl.n	8012390 <__swbuf_r+0x64>
 8012382:	2e0a      	cmp	r6, #10
 8012384:	d104      	bne.n	8012390 <__swbuf_r+0x64>
 8012386:	4621      	mov	r1, r4
 8012388:	4628      	mov	r0, r5
 801238a:	f7ff ff73 	bl	8012274 <_fflush_r>
 801238e:	b938      	cbnz	r0, 80123a0 <__swbuf_r+0x74>
 8012390:	4638      	mov	r0, r7
 8012392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012394:	4621      	mov	r1, r4
 8012396:	4628      	mov	r0, r5
 8012398:	f000 f806 	bl	80123a8 <__swsetup_r>
 801239c:	2800      	cmp	r0, #0
 801239e:	d0d5      	beq.n	801234c <__swbuf_r+0x20>
 80123a0:	f04f 37ff 	mov.w	r7, #4294967295
 80123a4:	e7f4      	b.n	8012390 <__swbuf_r+0x64>
	...

080123a8 <__swsetup_r>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	4b2a      	ldr	r3, [pc, #168]	; (8012454 <__swsetup_r+0xac>)
 80123ac:	4605      	mov	r5, r0
 80123ae:	6818      	ldr	r0, [r3, #0]
 80123b0:	460c      	mov	r4, r1
 80123b2:	b118      	cbz	r0, 80123bc <__swsetup_r+0x14>
 80123b4:	6a03      	ldr	r3, [r0, #32]
 80123b6:	b90b      	cbnz	r3, 80123bc <__swsetup_r+0x14>
 80123b8:	f7ff fa1a 	bl	80117f0 <__sinit>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123c2:	0718      	lsls	r0, r3, #28
 80123c4:	d422      	bmi.n	801240c <__swsetup_r+0x64>
 80123c6:	06d9      	lsls	r1, r3, #27
 80123c8:	d407      	bmi.n	80123da <__swsetup_r+0x32>
 80123ca:	2309      	movs	r3, #9
 80123cc:	602b      	str	r3, [r5, #0]
 80123ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80123d2:	81a3      	strh	r3, [r4, #12]
 80123d4:	f04f 30ff 	mov.w	r0, #4294967295
 80123d8:	e034      	b.n	8012444 <__swsetup_r+0x9c>
 80123da:	0758      	lsls	r0, r3, #29
 80123dc:	d512      	bpl.n	8012404 <__swsetup_r+0x5c>
 80123de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123e0:	b141      	cbz	r1, 80123f4 <__swsetup_r+0x4c>
 80123e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123e6:	4299      	cmp	r1, r3
 80123e8:	d002      	beq.n	80123f0 <__swsetup_r+0x48>
 80123ea:	4628      	mov	r0, r5
 80123ec:	f7ff fb9c 	bl	8011b28 <_free_r>
 80123f0:	2300      	movs	r3, #0
 80123f2:	6363      	str	r3, [r4, #52]	; 0x34
 80123f4:	89a3      	ldrh	r3, [r4, #12]
 80123f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123fa:	81a3      	strh	r3, [r4, #12]
 80123fc:	2300      	movs	r3, #0
 80123fe:	6063      	str	r3, [r4, #4]
 8012400:	6923      	ldr	r3, [r4, #16]
 8012402:	6023      	str	r3, [r4, #0]
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	f043 0308 	orr.w	r3, r3, #8
 801240a:	81a3      	strh	r3, [r4, #12]
 801240c:	6923      	ldr	r3, [r4, #16]
 801240e:	b94b      	cbnz	r3, 8012424 <__swsetup_r+0x7c>
 8012410:	89a3      	ldrh	r3, [r4, #12]
 8012412:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801241a:	d003      	beq.n	8012424 <__swsetup_r+0x7c>
 801241c:	4621      	mov	r1, r4
 801241e:	4628      	mov	r0, r5
 8012420:	f000 f884 	bl	801252c <__smakebuf_r>
 8012424:	89a0      	ldrh	r0, [r4, #12]
 8012426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801242a:	f010 0301 	ands.w	r3, r0, #1
 801242e:	d00a      	beq.n	8012446 <__swsetup_r+0x9e>
 8012430:	2300      	movs	r3, #0
 8012432:	60a3      	str	r3, [r4, #8]
 8012434:	6963      	ldr	r3, [r4, #20]
 8012436:	425b      	negs	r3, r3
 8012438:	61a3      	str	r3, [r4, #24]
 801243a:	6923      	ldr	r3, [r4, #16]
 801243c:	b943      	cbnz	r3, 8012450 <__swsetup_r+0xa8>
 801243e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012442:	d1c4      	bne.n	80123ce <__swsetup_r+0x26>
 8012444:	bd38      	pop	{r3, r4, r5, pc}
 8012446:	0781      	lsls	r1, r0, #30
 8012448:	bf58      	it	pl
 801244a:	6963      	ldrpl	r3, [r4, #20]
 801244c:	60a3      	str	r3, [r4, #8]
 801244e:	e7f4      	b.n	801243a <__swsetup_r+0x92>
 8012450:	2000      	movs	r0, #0
 8012452:	e7f7      	b.n	8012444 <__swsetup_r+0x9c>
 8012454:	200002b8 	.word	0x200002b8

08012458 <_raise_r>:
 8012458:	291f      	cmp	r1, #31
 801245a:	b538      	push	{r3, r4, r5, lr}
 801245c:	4604      	mov	r4, r0
 801245e:	460d      	mov	r5, r1
 8012460:	d904      	bls.n	801246c <_raise_r+0x14>
 8012462:	2316      	movs	r3, #22
 8012464:	6003      	str	r3, [r0, #0]
 8012466:	f04f 30ff 	mov.w	r0, #4294967295
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801246e:	b112      	cbz	r2, 8012476 <_raise_r+0x1e>
 8012470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012474:	b94b      	cbnz	r3, 801248a <_raise_r+0x32>
 8012476:	4620      	mov	r0, r4
 8012478:	f000 f830 	bl	80124dc <_getpid_r>
 801247c:	462a      	mov	r2, r5
 801247e:	4601      	mov	r1, r0
 8012480:	4620      	mov	r0, r4
 8012482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012486:	f000 b817 	b.w	80124b8 <_kill_r>
 801248a:	2b01      	cmp	r3, #1
 801248c:	d00a      	beq.n	80124a4 <_raise_r+0x4c>
 801248e:	1c59      	adds	r1, r3, #1
 8012490:	d103      	bne.n	801249a <_raise_r+0x42>
 8012492:	2316      	movs	r3, #22
 8012494:	6003      	str	r3, [r0, #0]
 8012496:	2001      	movs	r0, #1
 8012498:	e7e7      	b.n	801246a <_raise_r+0x12>
 801249a:	2400      	movs	r4, #0
 801249c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124a0:	4628      	mov	r0, r5
 80124a2:	4798      	blx	r3
 80124a4:	2000      	movs	r0, #0
 80124a6:	e7e0      	b.n	801246a <_raise_r+0x12>

080124a8 <raise>:
 80124a8:	4b02      	ldr	r3, [pc, #8]	; (80124b4 <raise+0xc>)
 80124aa:	4601      	mov	r1, r0
 80124ac:	6818      	ldr	r0, [r3, #0]
 80124ae:	f7ff bfd3 	b.w	8012458 <_raise_r>
 80124b2:	bf00      	nop
 80124b4:	200002b8 	.word	0x200002b8

080124b8 <_kill_r>:
 80124b8:	b538      	push	{r3, r4, r5, lr}
 80124ba:	4d07      	ldr	r5, [pc, #28]	; (80124d8 <_kill_r+0x20>)
 80124bc:	2300      	movs	r3, #0
 80124be:	4604      	mov	r4, r0
 80124c0:	4608      	mov	r0, r1
 80124c2:	4611      	mov	r1, r2
 80124c4:	602b      	str	r3, [r5, #0]
 80124c6:	f7f9 f899 	bl	800b5fc <_kill>
 80124ca:	1c43      	adds	r3, r0, #1
 80124cc:	d102      	bne.n	80124d4 <_kill_r+0x1c>
 80124ce:	682b      	ldr	r3, [r5, #0]
 80124d0:	b103      	cbz	r3, 80124d4 <_kill_r+0x1c>
 80124d2:	6023      	str	r3, [r4, #0]
 80124d4:	bd38      	pop	{r3, r4, r5, pc}
 80124d6:	bf00      	nop
 80124d8:	20008158 	.word	0x20008158

080124dc <_getpid_r>:
 80124dc:	f7f9 b886 	b.w	800b5ec <_getpid>

080124e0 <__swhatbuf_r>:
 80124e0:	b570      	push	{r4, r5, r6, lr}
 80124e2:	460c      	mov	r4, r1
 80124e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124e8:	2900      	cmp	r1, #0
 80124ea:	b096      	sub	sp, #88	; 0x58
 80124ec:	4615      	mov	r5, r2
 80124ee:	461e      	mov	r6, r3
 80124f0:	da0d      	bge.n	801250e <__swhatbuf_r+0x2e>
 80124f2:	89a3      	ldrh	r3, [r4, #12]
 80124f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80124f8:	f04f 0100 	mov.w	r1, #0
 80124fc:	bf0c      	ite	eq
 80124fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012502:	2340      	movne	r3, #64	; 0x40
 8012504:	2000      	movs	r0, #0
 8012506:	6031      	str	r1, [r6, #0]
 8012508:	602b      	str	r3, [r5, #0]
 801250a:	b016      	add	sp, #88	; 0x58
 801250c:	bd70      	pop	{r4, r5, r6, pc}
 801250e:	466a      	mov	r2, sp
 8012510:	f000 f848 	bl	80125a4 <_fstat_r>
 8012514:	2800      	cmp	r0, #0
 8012516:	dbec      	blt.n	80124f2 <__swhatbuf_r+0x12>
 8012518:	9901      	ldr	r1, [sp, #4]
 801251a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801251e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012522:	4259      	negs	r1, r3
 8012524:	4159      	adcs	r1, r3
 8012526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801252a:	e7eb      	b.n	8012504 <__swhatbuf_r+0x24>

0801252c <__smakebuf_r>:
 801252c:	898b      	ldrh	r3, [r1, #12]
 801252e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012530:	079d      	lsls	r5, r3, #30
 8012532:	4606      	mov	r6, r0
 8012534:	460c      	mov	r4, r1
 8012536:	d507      	bpl.n	8012548 <__smakebuf_r+0x1c>
 8012538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801253c:	6023      	str	r3, [r4, #0]
 801253e:	6123      	str	r3, [r4, #16]
 8012540:	2301      	movs	r3, #1
 8012542:	6163      	str	r3, [r4, #20]
 8012544:	b002      	add	sp, #8
 8012546:	bd70      	pop	{r4, r5, r6, pc}
 8012548:	ab01      	add	r3, sp, #4
 801254a:	466a      	mov	r2, sp
 801254c:	f7ff ffc8 	bl	80124e0 <__swhatbuf_r>
 8012550:	9900      	ldr	r1, [sp, #0]
 8012552:	4605      	mov	r5, r0
 8012554:	4630      	mov	r0, r6
 8012556:	f7fe ff79 	bl	801144c <_malloc_r>
 801255a:	b948      	cbnz	r0, 8012570 <__smakebuf_r+0x44>
 801255c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012560:	059a      	lsls	r2, r3, #22
 8012562:	d4ef      	bmi.n	8012544 <__smakebuf_r+0x18>
 8012564:	f023 0303 	bic.w	r3, r3, #3
 8012568:	f043 0302 	orr.w	r3, r3, #2
 801256c:	81a3      	strh	r3, [r4, #12]
 801256e:	e7e3      	b.n	8012538 <__smakebuf_r+0xc>
 8012570:	89a3      	ldrh	r3, [r4, #12]
 8012572:	6020      	str	r0, [r4, #0]
 8012574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012578:	81a3      	strh	r3, [r4, #12]
 801257a:	9b00      	ldr	r3, [sp, #0]
 801257c:	6163      	str	r3, [r4, #20]
 801257e:	9b01      	ldr	r3, [sp, #4]
 8012580:	6120      	str	r0, [r4, #16]
 8012582:	b15b      	cbz	r3, 801259c <__smakebuf_r+0x70>
 8012584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012588:	4630      	mov	r0, r6
 801258a:	f000 f81d 	bl	80125c8 <_isatty_r>
 801258e:	b128      	cbz	r0, 801259c <__smakebuf_r+0x70>
 8012590:	89a3      	ldrh	r3, [r4, #12]
 8012592:	f023 0303 	bic.w	r3, r3, #3
 8012596:	f043 0301 	orr.w	r3, r3, #1
 801259a:	81a3      	strh	r3, [r4, #12]
 801259c:	89a3      	ldrh	r3, [r4, #12]
 801259e:	431d      	orrs	r5, r3
 80125a0:	81a5      	strh	r5, [r4, #12]
 80125a2:	e7cf      	b.n	8012544 <__smakebuf_r+0x18>

080125a4 <_fstat_r>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4d07      	ldr	r5, [pc, #28]	; (80125c4 <_fstat_r+0x20>)
 80125a8:	2300      	movs	r3, #0
 80125aa:	4604      	mov	r4, r0
 80125ac:	4608      	mov	r0, r1
 80125ae:	4611      	mov	r1, r2
 80125b0:	602b      	str	r3, [r5, #0]
 80125b2:	f7f9 f87f 	bl	800b6b4 <_fstat>
 80125b6:	1c43      	adds	r3, r0, #1
 80125b8:	d102      	bne.n	80125c0 <_fstat_r+0x1c>
 80125ba:	682b      	ldr	r3, [r5, #0]
 80125bc:	b103      	cbz	r3, 80125c0 <_fstat_r+0x1c>
 80125be:	6023      	str	r3, [r4, #0]
 80125c0:	bd38      	pop	{r3, r4, r5, pc}
 80125c2:	bf00      	nop
 80125c4:	20008158 	.word	0x20008158

080125c8 <_isatty_r>:
 80125c8:	b538      	push	{r3, r4, r5, lr}
 80125ca:	4d06      	ldr	r5, [pc, #24]	; (80125e4 <_isatty_r+0x1c>)
 80125cc:	2300      	movs	r3, #0
 80125ce:	4604      	mov	r4, r0
 80125d0:	4608      	mov	r0, r1
 80125d2:	602b      	str	r3, [r5, #0]
 80125d4:	f7f9 f87e 	bl	800b6d4 <_isatty>
 80125d8:	1c43      	adds	r3, r0, #1
 80125da:	d102      	bne.n	80125e2 <_isatty_r+0x1a>
 80125dc:	682b      	ldr	r3, [r5, #0]
 80125de:	b103      	cbz	r3, 80125e2 <_isatty_r+0x1a>
 80125e0:	6023      	str	r3, [r4, #0]
 80125e2:	bd38      	pop	{r3, r4, r5, pc}
 80125e4:	20008158 	.word	0x20008158

080125e8 <_init>:
 80125e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ea:	bf00      	nop
 80125ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ee:	bc08      	pop	{r3}
 80125f0:	469e      	mov	lr, r3
 80125f2:	4770      	bx	lr

080125f4 <_fini>:
 80125f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125f6:	bf00      	nop
 80125f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125fa:	bc08      	pop	{r3}
 80125fc:	469e      	mov	lr, r3
 80125fe:	4770      	bx	lr
