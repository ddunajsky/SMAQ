
SMAQProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002278  08012490  08012490  00022490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014708  08014708  000303fc  2**0
                  CONTENTS
  4 .ARM          00000008  08014708  08014708  00024708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014710  08014710  000303fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014710  08014710  00024710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014714  08014714  00024714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  08014718  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002bc  080149d4  000302bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000035c  08014a74  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d5c  20000400  08014b14  00030400  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000815c  08014b14  0003815c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303fc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00028cd9  00000000  00000000  0003046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000430c  00000000  00000000  00059148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002298  00000000  00000000  0005d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001bfe  00000000  00000000  0005f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000060aa  00000000  00000000  000612ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026b13  00000000  00000000  00067398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00108f05  00000000  00000000  0008deab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a68c  00000000  00000000  00196db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001a143c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000400 	.word	0x20000400
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012478 	.word	0x08012478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000404 	.word	0x20000404
 800020c:	08012478 	.word	0x08012478

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
static uint32_t Hum;  // Humidity readings from SCD-40-2
static uint32_t Carb; // C02 readings from SCD-40-2
static uint32_t Pm;  // PM 2.5 readings from SNJGAC5
static double aqi = 0;
//static char *str;
int main(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000edc:	f00a fbcf 	bl	800b67e <HAL_Init>

  /* Configure the system clock */
    SystemClock_Config();
 8000ee0:	f000 f838 	bl	8000f54 <SystemClock_Config>

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ee4:	f000 f932 	bl	800114c <MX_GPIO_Init>
    MX_ETH_Init();
 8000ee8:	f000 f8a0 	bl	800102c <MX_ETH_Init>
    MX_RNG_Init();
 8000eec:	f000 f8ea 	bl	80010c4 <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000ef0:	f000 f8fc 	bl	80010ec <MX_USART3_UART_Init>

    osKernelInitialize();
 8000ef4:	f00d fb74 	bl	800e5e0 <osKernelInitialize>

    ServerHandle = osThreadNew(server, NULL, &Server_attributes);
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <main+0x58>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <main+0x5c>)
 8000efe:	f00d fc0b 	bl	800e718 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <main+0x60>)
 8000f06:	6013      	str	r3, [r2, #0]
    BlinkerHandle = osThreadNew(blinker, NULL, &Blinker_attributes);
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <main+0x64>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <main+0x68>)
 8000f0e:	f00d fc03 	bl	800e718 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <main+0x6c>)
 8000f16:	6013      	str	r3, [r2, #0]
    SCDHandle = osThreadNew(sensor1, NULL, &SCD_attributes);
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <main+0x70>)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <main+0x74>)
 8000f1e:	f00d fbfb 	bl	800e718 <osThreadNew>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <main+0x78>)
 8000f26:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8000f28:	f00d fb8e 	bl	800e648 <osKernelStart>

    while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x54>
 8000f2e:	bf00      	nop
 8000f30:	08013ee4 	.word	0x08013ee4
 8000f34:	080015ad 	.word	0x080015ad
 8000f38:	200005a0 	.word	0x200005a0
 8000f3c:	08013ec0 	.word	0x08013ec0
 8000f40:	080013e9 	.word	0x080013e9
 8000f44:	2000059c 	.word	0x2000059c
 8000f48:	08013f08 	.word	0x08013f08
 8000f4c:	080013d5 	.word	0x080013d5
 8000f50:	200005a4 	.word	0x200005a4

08000f54 <SystemClock_Config>:
    }

}

void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f010 fc49 	bl	80117fa <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <SystemClock_Config+0xd0>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a29      	ldr	r2, [pc, #164]	; (8001024 <SystemClock_Config+0xd0>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <SystemClock_Config+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <SystemClock_Config+0xd4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <SystemClock_Config+0xd4>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xd4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fc0:	23d8      	movs	r3, #216	; 0xd8
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fc8:	2309      	movs	r3, #9
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00b f9dd 	bl	800c390 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x8c>
	  {
	    Error_Handler();
 8000fdc:	f000 fbc8 	bl	8001770 <Error_Handler>
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe0:	f00b f986 	bl	800c2f0 <HAL_PWREx_EnableOverDrive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000fea:	f000 fbc1 	bl	8001770 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffe:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2107      	movs	r1, #7
 800100c:	4618      	mov	r0, r3
 800100e:	f00b fc63 	bl	800c8d8 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xc8>
	  {
	    Error_Handler();
 8001018:	f000 fbaa 	bl	8001770 <Error_Handler>
	  }
	}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	; 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_ETH_Init+0x80>)
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <MX_ETH_Init+0x84>)
 8001034:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_ETH_Init+0x88>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ETH_Init+0x88>)
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_ETH_Init+0x88>)
 8001044:	22e1      	movs	r2, #225	; 0xe1
 8001046:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_ETH_Init+0x88>)
 800104a:	2200      	movs	r2, #0
 800104c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ETH_Init+0x88>)
 8001050:	2200      	movs	r2, #0
 8001052:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_ETH_Init+0x88>)
 8001056:	2200      	movs	r2, #0
 8001058:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_ETH_Init+0x80>)
 800105c:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <MX_ETH_Init+0x88>)
 800105e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_ETH_Init+0x80>)
 8001062:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001066:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_ETH_Init+0x80>)
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <MX_ETH_Init+0x8c>)
 800106c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ETH_Init+0x80>)
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_ETH_Init+0x90>)
 8001072:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 0;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_ETH_Init+0x80>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800107a:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_ETH_Init+0x80>)
 800107c:	f00a fc32 	bl	800b8e4 <HAL_ETH_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001086:	f000 fb73 	bl	8001770 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800108a:	2238      	movs	r2, #56	; 0x38
 800108c:	2100      	movs	r1, #0
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_ETH_Init+0x94>)
 8001090:	f010 fbb3 	bl	80117fa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_ETH_Init+0x94>)
 8001096:	2221      	movs	r2, #33	; 0x21
 8001098:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_ETH_Init+0x94>)
 800109c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_ETH_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000454 	.word	0x20000454
 80010b0:	40028000 	.word	0x40028000
 80010b4:	200005c0 	.word	0x200005c0
 80010b8:	2000035c 	.word	0x2000035c
 80010bc:	200002bc 	.word	0x200002bc
 80010c0:	2000041c 	.word	0x2000041c

080010c4 <MX_RNG_Init>:


static void MX_RNG_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_RNG_Init+0x20>)
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <MX_RNG_Init+0x24>)
 80010cc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_RNG_Init+0x20>)
 80010d0:	f00c fa4a 	bl	800d568 <HAL_RNG_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80010da:	f000 fb49 	bl	8001770 <Error_Handler>
  }


}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000504 	.word	0x20000504
 80010e8:	50060800 	.word	0x50060800

080010ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_USART3_UART_Init+0x58>)
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <MX_USART3_UART_Init+0x5c>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_USART3_UART_Init+0x58>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART3_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_USART3_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART3_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART3_UART_Init+0x58>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART3_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART3_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART3_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART3_UART_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART3_UART_Init+0x58>)
 8001130:	f00c fd7a 	bl	800dc28 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800113a:	f000 fb19 	bl	8001770 <Error_Handler>
  }

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000514 	.word	0x20000514
 8001148:	40004800 	.word	0x40004800

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b56      	ldr	r3, [pc, #344]	; (80012bc <MX_GPIO_Init+0x170>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a55      	ldr	r2, [pc, #340]	; (80012bc <MX_GPIO_Init+0x170>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b53      	ldr	r3, [pc, #332]	; (80012bc <MX_GPIO_Init+0x170>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	4b50      	ldr	r3, [pc, #320]	; (80012bc <MX_GPIO_Init+0x170>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <MX_GPIO_Init+0x170>)
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <MX_GPIO_Init+0x170>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <MX_GPIO_Init+0x170>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a49      	ldr	r2, [pc, #292]	; (80012bc <MX_GPIO_Init+0x170>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <MX_GPIO_Init+0x170>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <MX_GPIO_Init+0x170>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a43      	ldr	r2, [pc, #268]	; (80012bc <MX_GPIO_Init+0x170>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b41      	ldr	r3, [pc, #260]	; (80012bc <MX_GPIO_Init+0x170>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <MX_GPIO_Init+0x170>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <MX_GPIO_Init+0x170>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <MX_GPIO_Init+0x170>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <MX_GPIO_Init+0x170>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a37      	ldr	r2, [pc, #220]	; (80012bc <MX_GPIO_Init+0x170>)
 80011e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <MX_GPIO_Init+0x170>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80011f8:	4831      	ldr	r0, [pc, #196]	; (80012c0 <MX_GPIO_Init+0x174>)
 80011fa:	f00b f845 	bl	800c288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	4830      	ldr	r0, [pc, #192]	; (80012c4 <MX_GPIO_Init+0x178>)
 8001204:	f00b f840 	bl	800c288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	482a      	ldr	r0, [pc, #168]	; (80012c8 <MX_GPIO_Init+0x17c>)
 8001220:	f00a fe86 	bl	800bf30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001224:	f244 0381 	movw	r3, #16513	; 0x4081
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4820      	ldr	r0, [pc, #128]	; (80012c0 <MX_GPIO_Init+0x174>)
 800123e:	f00a fe77 	bl	800bf30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	481a      	ldr	r0, [pc, #104]	; (80012c4 <MX_GPIO_Init+0x178>)
 800125a:	f00a fe69 	bl	800bf30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <MX_GPIO_Init+0x178>)
 8001272:	f00a fe5d 	bl	800bf30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
   GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001276:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800127a:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001288:	230a      	movs	r3, #10
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_GPIO_Init+0x180>)
 8001294:	f00a fe4c 	bl	800bf30 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_VBUS_Pin */
     GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_GPIO_Init+0x180>)
 80012ae:	f00a fe3f 	bl	800bf30 <HAL_GPIO_Init>

}
 80012b2:	bf00      	nop
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000

080012d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e2:	f00a f9d9 	bl	800b698 <HAL_IncTick>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40001000 	.word	0x40001000

080012f4 <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e01a      	b.n	800133a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4619      	mov	r1, r3
 800130a:	4810      	ldr	r0, [pc, #64]	; (800134c <mg_random+0x58>)
 800130c:	f00c f956 	bl	800d5bc <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	18d0      	adds	r0, r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3304      	adds	r3, #4
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d203      	bcs.n	8001328 <mg_random+0x34>
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	e000      	b.n	800132a <mg_random+0x36>
 8001328:	2304      	movs	r3, #4
 800132a:	f107 0108 	add.w	r1, r7, #8
 800132e:	461a      	mov	r2, r3
 8001330:	f010 fb2d 	bl	801198e <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3304      	adds	r3, #4
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3e0      	bcc.n	8001304 <mg_random+0x10>
  }
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000504 	.word	0x20000504

08001350 <timer_fn>:

static void timer_fn(void *arg) {
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af04      	add	r7, sp, #16
 8001356:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = arg;                  // And show
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	61fb      	str	r3, [r7, #28]
  const char *names[] = {"down", "up", "req", "ready"};  // network stats
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <timer_fn+0x70>)
 800135e:	f107 040c 	add.w	r4, r7, #12
 8001362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <timer_fn+0x74>)
 800136a:	f240 1269 	movw	r2, #361	; 0x169
 800136e:	4916      	ldr	r1, [pc, #88]	; (80013c8 <timer_fn+0x78>)
 8001370:	2002      	movs	r0, #2
 8001372:	f004 ffa5 	bl	80062c0 <mg_log_prefix>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d01c      	beq.n	80013b6 <timer_fn+0x66>
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	3320      	adds	r3, #32
 8001386:	443b      	add	r3, r7
 8001388:	f853 4c14 	ldr.w	r4, [r3, #-20]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f103 0508 	add.w	r5, r3, #8
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800139a:	69f9      	ldr	r1, [r7, #28]
 800139c:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800139e:	69f8      	ldr	r0, [r7, #28]
 80013a0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80013a2:	9003      	str	r0, [sp, #12]
 80013a4:	9102      	str	r1, [sp, #8]
 80013a6:	9201      	str	r2, [sp, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	462b      	mov	r3, r5
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <timer_fn+0x7c>)
 80013ae:	4621      	mov	r1, r4
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <timer_fn+0x80>)
 80013b2:	f004 ffdf 	bl	8006374 <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bdb0      	pop	{r4, r5, r7, pc}
 80013be:	bf00      	nop
 80013c0:	0801250c 	.word	0x0801250c
 80013c4:	08013f2c 	.word	0x08013f2c
 80013c8:	080124ac 	.word	0x080124ac
 80013cc:	08006b11 	.word	0x08006b11
 80013d0:	080124c0 	.word	0x080124c0

080013d4 <sensor1>:

void sensor1(void *argument) {
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	for (;;) {
		Temp = 15;
 80013dc:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <sensor1+0x10>)
 80013de:	220f      	movs	r2, #15
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e7fb      	b.n	80013dc <sensor1+0x8>
 80013e4:	200005a8 	.word	0x200005a8

080013e8 <blinker>:
	}
	(void) argument;

}

void blinker(void *argument) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	for (;;) {
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	4809      	ldr	r0, [pc, #36]	; (8001418 <blinker+0x30>)
 80013f4:	f00a ff61 	bl	800c2ba <HAL_GPIO_TogglePin>
	    osDelay((osKernelGetTickFreq() * BLINK_PERIOD_MS) / 1000U);
 80013f8:	f00d f984 	bl	800e704 <osKernelGetTickFreq>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <blinker+0x34>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	4618      	mov	r0, r3
 8001410:	f00d fa28 	bl	800e864 <osDelay>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 8001414:	e7ec      	b.n	80013f0 <blinker+0x8>
 8001416:	bf00      	nop
 8001418:	40020400 	.word	0x40020400
 800141c:	10624dd3 	.word	0x10624dd3

08001420 <fn>:
 * 	accepts the HTTP requests and feeds sensor *
 * 	values back in JSON format for the client  *
 * 	to receive then the javascript code takes  *
 *  over and displays the values on our UI.    *
 ***********************************************/
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b09e      	sub	sp, #120	; 0x78
 8001424:	af10      	add	r7, sp, #64	; 0x40
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]


	if (ev == MG_EV_HTTP_MSG) {
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b0a      	cmp	r3, #10
 8001432:	f040 8089 	bne.w	8001548 <fn+0x128>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
		if (mg_http_match_uri(hm, "/api/dispAQI")){
 800143a:	4945      	ldr	r1, [pc, #276]	; (8001550 <fn+0x130>)
 800143c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800143e:	f003 fd4d 	bl	8004edc <mg_http_match_uri>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d010      	beq.n	800146a <fn+0x4a>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 8001448:	4b42      	ldr	r3, [pc, #264]	; (8001554 <fn+0x134>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <fn+0x138>)
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2300      	movs	r3, #0
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	4b40      	ldr	r3, [pc, #256]	; (800155c <fn+0x13c>)
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <fn+0x140>)
 8001460:	4a40      	ldr	r2, [pc, #256]	; (8001564 <fn+0x144>)
 8001462:	21c8      	movs	r1, #200	; 0xc8
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f002 fe33 	bl	80040d0 <mg_http_reply>
					"{%m:%f}\n", MG_ESC("aqi"), aqi);
		}
		if(mg_http_match_uri(hm, "/api/AQI")){
 800146a:	493f      	ldr	r1, [pc, #252]	; (8001568 <fn+0x148>)
 800146c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800146e:	f003 fd35 	bl	8004edc <mg_http_match_uri>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <fn+0x84>
			struct mg_str json = hm -> body;
 8001478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001486:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_json_get_num(json, "$.aqi", &aqi);
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <fn+0x134>)
 800148c:	4a37      	ldr	r2, [pc, #220]	; (800156c <fn+0x14c>)
 800148e:	f107 0114 	add.w	r1, r7, #20
 8001492:	c903      	ldmia	r1, {r0, r1}
 8001494:	f004 fe7a 	bl	800618c <mg_json_get_num>
//			str = mg_json_get_str(json, "&.health_level");
			mg_http_reply(c, 200, NULL, NULL);
 8001498:	2300      	movs	r3, #0
 800149a:	2200      	movs	r2, #0
 800149c:	21c8      	movs	r1, #200	; 0xc8
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f002 fe16 	bl	80040d0 <mg_http_reply>
		}
		if(mg_http_match_uri(hm, "/api/sensors")){
 80014a4:	4932      	ldr	r1, [pc, #200]	; (8001570 <fn+0x150>)
 80014a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014a8:	f003 fd18 	bl	8004edc <mg_http_match_uri>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d029      	beq.n	8001506 <fn+0xe6>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <fn+0x154>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a30      	ldr	r2, [pc, #192]	; (8001578 <fn+0x158>)
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4930      	ldr	r1, [pc, #192]	; (800157c <fn+0x15c>)
 80014bc:	6809      	ldr	r1, [r1, #0]
 80014be:	4830      	ldr	r0, [pc, #192]	; (8001580 <fn+0x160>)
 80014c0:	6800      	ldr	r0, [r0, #0]
 80014c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80014c4:	482f      	ldr	r0, [pc, #188]	; (8001584 <fn+0x164>)
 80014c6:	900e      	str	r0, [sp, #56]	; 0x38
 80014c8:	2000      	movs	r0, #0
 80014ca:	900d      	str	r0, [sp, #52]	; 0x34
 80014cc:	4823      	ldr	r0, [pc, #140]	; (800155c <fn+0x13c>)
 80014ce:	900c      	str	r0, [sp, #48]	; 0x30
 80014d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80014d2:	492d      	ldr	r1, [pc, #180]	; (8001588 <fn+0x168>)
 80014d4:	910a      	str	r1, [sp, #40]	; 0x28
 80014d6:	2100      	movs	r1, #0
 80014d8:	9109      	str	r1, [sp, #36]	; 0x24
 80014da:	4920      	ldr	r1, [pc, #128]	; (800155c <fn+0x13c>)
 80014dc:	9108      	str	r1, [sp, #32]
 80014de:	9207      	str	r2, [sp, #28]
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <fn+0x16c>)
 80014e2:	9206      	str	r2, [sp, #24]
 80014e4:	2200      	movs	r2, #0
 80014e6:	9205      	str	r2, [sp, #20]
 80014e8:	4a1c      	ldr	r2, [pc, #112]	; (800155c <fn+0x13c>)
 80014ea:	9204      	str	r2, [sp, #16]
 80014ec:	9303      	str	r3, [sp, #12]
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <fn+0x170>)
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	2300      	movs	r3, #0
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <fn+0x13c>)
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <fn+0x174>)
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <fn+0x144>)
 80014fe:	21c8      	movs	r1, #200	; 0xc8
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f002 fde5 	bl	80040d0 <mg_http_reply>
					"{%m:%u,%m:%u,%m:%u,%m:%u}\n", MG_ESC("temperature"), Temp,
												   MG_ESC("humidity"), Hum,
												   MG_ESC("pm25"), Pm,
												   MG_ESC("co2"), Carb);
		}
		MG_INFO(("connection established"));
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <fn+0x178>)
 8001508:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800150c:	4923      	ldr	r1, [pc, #140]	; (800159c <fn+0x17c>)
 800150e:	2002      	movs	r0, #2
 8001510:	f004 fed6 	bl	80062c0 <mg_log_prefix>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <fn+0x100>
 800151a:	4821      	ldr	r0, [pc, #132]	; (80015a0 <fn+0x180>)
 800151c:	f004 ff2a 	bl	8006374 <mg_log>
	    struct mg_http_serve_opts opts = {
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	615a      	str	r2, [r3, #20]
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <fn+0x184>)
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <fn+0x188>)
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
	        .root_dir = "/web_root",
	        .fs = &mg_fs_packed
	      };
	    mg_http_serve_dir(c, ev_data, &opts);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	461a      	mov	r2, r3
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f003 fc6e 	bl	8004e24 <mg_http_serve_dir>
	  }
	  (void) fn_data;
}
 8001548:	bf00      	nop
 800154a:	3738      	adds	r7, #56	; 0x38
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	0801251c 	.word	0x0801251c
 8001554:	200005b8 	.word	0x200005b8
 8001558:	0801255c 	.word	0x0801255c
 800155c:	08006d5d 	.word	0x08006d5d
 8001560:	0801252c 	.word	0x0801252c
 8001564:	08012538 	.word	0x08012538
 8001568:	08012560 	.word	0x08012560
 800156c:	0801256c 	.word	0x0801256c
 8001570:	08012574 	.word	0x08012574
 8001574:	200005a8 	.word	0x200005a8
 8001578:	200005ac 	.word	0x200005ac
 800157c:	200005b4 	.word	0x200005b4
 8001580:	200005b0 	.word	0x200005b0
 8001584:	080125a0 	.word	0x080125a0
 8001588:	080125a4 	.word	0x080125a4
 800158c:	080125ac 	.word	0x080125ac
 8001590:	080125b8 	.word	0x080125b8
 8001594:	08012584 	.word	0x08012584
 8001598:	08013f38 	.word	0x08013f38
 800159c:	080124ac 	.word	0x080124ac
 80015a0:	080125c4 	.word	0x080125c4
 80015a4:	080125dc 	.word	0x080125dc
 80015a8:	20000000 	.word	0x20000000

080015ac <server>:

void server(void *argument)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0b6      	sub	sp, #216	; 0xd8
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	6078      	str	r0, [r7, #4]
	Temp = 20;
 80015b4:	4b54      	ldr	r3, [pc, #336]	; (8001708 <server+0x15c>)
 80015b6:	2214      	movs	r2, #20
 80015b8:	601a      	str	r2, [r3, #0]
	Hum = 30;
 80015ba:	4b54      	ldr	r3, [pc, #336]	; (800170c <server+0x160>)
 80015bc:	221e      	movs	r2, #30
 80015be:	601a      	str	r2, [r3, #0]
	Carb = 800;
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <server+0x164>)
 80015c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80015c6:	601a      	str	r2, [r3, #0]
	Pm = 12;
 80015c8:	4b52      	ldr	r3, [pc, #328]	; (8001714 <server+0x168>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]

	struct mg_mgr mgr;        // Initialise Mongoose event manager
	mg_mgr_init(&mgr);        // and attach it to the interface
 80015ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015d2:	4618      	mov	r0, r3
 80015d4:	f005 f942 	bl	800685c <mg_mgr_init>
	mg_log_set(MG_LL_DEBUG);  // Set log level
 80015d8:	2003      	movs	r0, #3
 80015da:	f004 fe4f 	bl	800627c <mg_log_set>

		// Initialise Mongoose network stack
	  struct mg_tcpip_driver_stm32_data driver_data = {.mdc_cr = 4};
 80015de:	2304      	movs	r3, #4
 80015e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2278      	movs	r2, #120	; 0x78
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f010 f904 	bl	80117fa <memset>
 80015f2:	2302      	movs	r3, #2
 80015f4:	723b      	strb	r3, [r7, #8]
 80015f6:	4b48      	ldr	r3, [pc, #288]	; (8001718 <server+0x16c>)
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	4b48      	ldr	r3, [pc, #288]	; (800171c <server+0x170>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4053      	eors	r3, r2
 8001600:	b2db      	uxtb	r3, r3
 8001602:	727b      	strb	r3, [r7, #9]
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <server+0x174>)
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	4b46      	ldr	r3, [pc, #280]	; (8001724 <server+0x178>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4053      	eors	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	72bb      	strb	r3, [r7, #10]
 8001612:	4b45      	ldr	r3, [pc, #276]	; (8001728 <server+0x17c>)
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b45      	ldr	r3, [pc, #276]	; (800172c <server+0x180>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4053      	eors	r3, r2
 800161c:	b2db      	uxtb	r3, r3
 800161e:	72fb      	strb	r3, [r7, #11]
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <server+0x184>)
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	4b43      	ldr	r3, [pc, #268]	; (8001734 <server+0x188>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4053      	eors	r3, r2
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b42      	ldr	r3, [pc, #264]	; (8001738 <server+0x18c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4053      	eors	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	733b      	strb	r3, [r7, #12]
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <server+0x190>)
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	4b41      	ldr	r3, [pc, #260]	; (8001740 <server+0x194>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4053      	eors	r3, r2
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b40      	ldr	r3, [pc, #256]	; (8001744 <server+0x198>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4053      	eors	r3, r2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	737b      	strb	r3, [r7, #13]
 800164c:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <server+0x19c>)
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001650:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
		                          .driver = &mg_tcpip_driver_stm32,
		                          .driver_data = &driver_data};
		mg_tcpip_init(&mgr, &mif);
 8001656:	f107 0208 	add.w	r2, r7, #8
 800165a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f009 fa37 	bl	800aad4 <mg_tcpip_init>
		mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 8001666:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <server+0x1a0>)
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2301      	movs	r3, #1
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	4608      	mov	r0, r1
 8001682:	f005 f8c1 	bl	8006808 <mg_timer_add>
		MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <server+0x1a4>)
 8001688:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800168c:	4931      	ldr	r1, [pc, #196]	; (8001754 <server+0x1a8>)
 800168e:	2002      	movs	r0, #2
 8001690:	f004 fe16 	bl	80062c0 <mg_log_prefix>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <server+0x10a>
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	461a      	mov	r2, r3
 80016a0:	492d      	ldr	r1, [pc, #180]	; (8001758 <server+0x1ac>)
 80016a2:	482e      	ldr	r0, [pc, #184]	; (800175c <server+0x1b0>)
 80016a4:	f004 fe66 	bl	8006374 <mg_log>
		while (mif.state != MG_TCPIP_STATE_READY) {
 80016a8:	e005      	b.n	80016b6 <server+0x10a>
		    mg_mgr_poll(&mgr, 0);
 80016aa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 fbad 	bl	800ae10 <mg_mgr_poll>
		while (mif.state != MG_TCPIP_STATE_READY) {
 80016b6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d1f5      	bne.n	80016aa <server+0xfe>
		}

		MG_INFO(("Initialising application..."));
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <server+0x1a4>)
 80016c0:	f240 12bd 	movw	r2, #445	; 0x1bd
 80016c4:	4923      	ldr	r1, [pc, #140]	; (8001754 <server+0x1a8>)
 80016c6:	2002      	movs	r0, #2
 80016c8:	f004 fdfa 	bl	80062c0 <mg_log_prefix>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <server+0x12c>
 80016d2:	4823      	ldr	r0, [pc, #140]	; (8001760 <server+0x1b4>)
 80016d4:	f004 fe4e 	bl	8006374 <mg_log>
		mg_http_listen(&mgr, HTTP_URL, fn, &mgr);
 80016d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016dc:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <server+0x1b8>)
 80016e2:	4921      	ldr	r1, [pc, #132]	; (8001768 <server+0x1bc>)
 80016e4:	f003 ff1a 	bl	800551c <mg_http_listen>
		mg_http_listen(&mgr, HTTPS_URL, fn, &mgr);
 80016e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016ec:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016f0:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <server+0x1b8>)
 80016f2:	491e      	ldr	r1, [pc, #120]	; (800176c <server+0x1c0>)
 80016f4:	f003 ff12 	bl	800551c <mg_http_listen>
		for (;;) {
			mg_mgr_poll(&mgr, 1);
 80016f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016fc:	2101      	movs	r1, #1
 80016fe:	4618      	mov	r0, r3
 8001700:	f009 fb86 	bl	800ae10 <mg_mgr_poll>
 8001704:	e7f8      	b.n	80016f8 <server+0x14c>
 8001706:	bf00      	nop
 8001708:	200005a8 	.word	0x200005a8
 800170c:	200005ac 	.word	0x200005ac
 8001710:	200005b0 	.word	0x200005b0
 8001714:	200005b4 	.word	0x200005b4
 8001718:	1ff0f420 	.word	0x1ff0f420
 800171c:	1ff0f421 	.word	0x1ff0f421
 8001720:	1ff0f422 	.word	0x1ff0f422
 8001724:	1ff0f423 	.word	0x1ff0f423
 8001728:	1ff0f424 	.word	0x1ff0f424
 800172c:	1ff0f425 	.word	0x1ff0f425
 8001730:	1ff0f426 	.word	0x1ff0f426
 8001734:	1ff0f427 	.word	0x1ff0f427
 8001738:	1ff0f428 	.word	0x1ff0f428
 800173c:	1ff0f429 	.word	0x1ff0f429
 8001740:	1ff0f42a 	.word	0x1ff0f42a
 8001744:	1ff0f42b 	.word	0x1ff0f42b
 8001748:	20000240 	.word	0x20000240
 800174c:	08001351 	.word	0x08001351
 8001750:	08013f3c 	.word	0x08013f3c
 8001754:	080124ac 	.word	0x080124ac
 8001758:	08006bd5 	.word	0x08006bd5
 800175c:	080125e8 	.word	0x080125e8
 8001760:	08012604 	.word	0x08012604
 8001764:	08001421 	.word	0x08001421
 8001768:	08012620 	.word	0x08012620
 800176c:	08012634 	.word	0x08012634

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>

0800177a <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	3330      	adds	r3, #48	; 0x30
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e002      	b.n	8001794 <mg_dns_free+0x1a>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d1f7      	bne.n	800178e <mg_dns_free+0x14>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 80017a6:	6838      	ldr	r0, [r7, #0]
 80017a8:	f00f fd70 	bl	801128c <free>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 80017c4:	e00d      	b.n	80017e2 <mg_resolve_cancel+0x2e>
    tmp = d->next;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d103      	bne.n	80017de <mg_resolve_cancel+0x2a>
 80017d6:	68f9      	ldr	r1, [r7, #12]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffce 	bl	800177a <mg_dns_free>
  for (; d != NULL; d = tmp) {
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ee      	bne.n	80017c6 <mg_resolve_cancel+0x12>
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80017f2:	b590      	push	{r4, r7, lr}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <mg_call+0x24>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <mg_call+0x3c>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	47a0      	blx	r4
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
	...

08001838 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8001838:	b40e      	push	{r1, r2, r3}
 800183a:	b580      	push	{r7, lr}
 800183c:	b095      	sub	sp, #84	; 0x54
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8001842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001846:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	f107 0010 	add.w	r0, r7, #16
 8001850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	f005 f88a 	bl	800696c <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <mg_error+0x70>)
 800185a:	f240 1293 	movw	r2, #403	; 0x193
 800185e:	4913      	ldr	r1, [pc, #76]	; (80018ac <mg_error+0x74>)
 8001860:	2001      	movs	r0, #1
 8001862:	f004 fd2d 	bl	80062c0 <mg_log_prefix>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <mg_error+0x46>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <mg_error+0x78>)
 800187a:	f004 fd7b 	bl	8006374 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	461a      	mov	r2, r3
 8001892:	2100      	movs	r1, #0
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffac 	bl	80017f2 <mg_call>
}
 800189a:	bf00      	nop
 800189c:	3754      	adds	r7, #84	; 0x54
 800189e:	46bd      	mov	sp, r7
 80018a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018a4:	b003      	add	sp, #12
 80018a6:	4770      	bx	lr
 80018a8:	08013f4c 	.word	0x08013f4c
 80018ac:	08012658 	.word	0x08012658
 80018b0:	08012764 	.word	0x08012764

080018b4 <is_digit>:
#endif




static bool is_digit(int c) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b2f      	cmp	r3, #47	; 0x2f
 80018c0:	dd04      	ble.n	80018cc <is_digit+0x18>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b39      	cmp	r3, #57	; 0x39
 80018c6:	dc01      	bgt.n	80018cc <is_digit+0x18>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <is_digit+0x1a>
 80018cc:	2300      	movs	r3, #0
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <addexp>:

static int addexp(char *buf, int e, int sign) {
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  int n = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	617a      	str	r2, [r7, #20]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	2265      	movs	r2, #101	; 0x65
 80018fe:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	617a      	str	r2, [r7, #20]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001918:	dd01      	ble.n	800191e <addexp+0x3e>
 800191a:	2300      	movs	r3, #0
 800191c:	e057      	b.n	80019ce <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b09      	cmp	r3, #9
 8001922:	dc07      	bgt.n	8001934 <addexp+0x54>
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	617a      	str	r2, [r7, #20]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	2230      	movs	r2, #48	; 0x30
 8001932:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b63      	cmp	r3, #99	; 0x63
 8001938:	dd1c      	ble.n	8001974 <addexp+0x94>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <addexp+0xfc>)
 800193e:	fb82 1203 	smull	r1, r2, r2, r3
 8001942:	1152      	asrs	r2, r2, #5
 8001944:	17db      	asrs	r3, r3, #31
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	b2da      	uxtb	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	1c59      	adds	r1, r3, #1
 800194e:	6179      	str	r1, [r7, #20]
 8001950:	4619      	mov	r1, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	440b      	add	r3, r1
 8001956:	3230      	adds	r2, #48	; 0x30
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <addexp+0xfc>)
 8001960:	fb82 1203 	smull	r1, r2, r2, r3
 8001964:	1151      	asrs	r1, r2, #5
 8001966:	17da      	asrs	r2, r3, #31
 8001968:	1a8a      	subs	r2, r1, r2
 800196a:	2164      	movs	r1, #100	; 0x64
 800196c:	fb01 f202 	mul.w	r2, r1, r2
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b09      	cmp	r3, #9
 8001978:	dd1d      	ble.n	80019b6 <addexp+0xd6>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <addexp+0x100>)
 800197e:	fb82 1203 	smull	r1, r2, r2, r3
 8001982:	1092      	asrs	r2, r2, #2
 8001984:	17db      	asrs	r3, r3, #31
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	b2da      	uxtb	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	1c59      	adds	r1, r3, #1
 800198e:	6179      	str	r1, [r7, #20]
 8001990:	4619      	mov	r1, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	440b      	add	r3, r1
 8001996:	3230      	adds	r2, #48	; 0x30
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <addexp+0x100>)
 80019a0:	fb83 1302 	smull	r1, r3, r3, r2
 80019a4:	1099      	asrs	r1, r3, #2
 80019a6:	17d3      	asrs	r3, r2, #31
 80019a8:	1ac9      	subs	r1, r1, r3
 80019aa:	460b      	mov	r3, r1
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	1c59      	adds	r1, r3, #1
 80019be:	6179      	str	r1, [r7, #20]
 80019c0:	4619      	mov	r1, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	440b      	add	r3, r1
 80019c6:	3230      	adds	r2, #48	; 0x30
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	701a      	strb	r2, [r3, #0]
  return n;
 80019cc:	697b      	ldr	r3, [r7, #20]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	51eb851f 	.word	0x51eb851f
 80019e0:	66666667 	.word	0x66666667

080019e4 <xisinf>:

static int xisinf(double x) {
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80019ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80019f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	000a      	movs	r2, r1
 8001a04:	2300      	movs	r3, #0
 8001a06:	4613      	mov	r3, r2
 8001a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <xisinf+0x4c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d106      	bne.n	8001a20 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8001a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a16:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <xisinf+0x3c>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <xisinf+0x3e>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	7ff00000 	.word	0x7ff00000

08001a34 <xisnan>:

static int xisnan(double x) {
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a42:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001a46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	000a      	movs	r2, r1
 8001a54:	2300      	movs	r3, #0
 8001a56:	4613      	mov	r3, r2
 8001a58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a60:	4613      	mov	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001a6c:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <xisnan+0x54>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bf8c      	ite	hi
 8001a74:	2301      	movhi	r3, #1
 8001a76:	2300      	movls	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	7ff00000 	.word	0x7ff00000
 8001a8c:	00000000 	.word	0x00000000

08001a90 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b09e      	sub	sp, #120	; 0x78
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6178      	str	r0, [r7, #20]
 8001a98:	6139      	str	r1, [r7, #16]
 8001a9a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8001aaa:	2300      	movs	r3, #0
 8001aac:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aba:	f7ff f835 	bl	8000b28 <__aeabi_dcmpeq>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <mg_dtoa+0x44>
 8001ac4:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <mg_dtoa+0x234>)
 8001ac6:	4a80      	ldr	r2, [pc, #512]	; (8001cc8 <mg_dtoa+0x238>)
 8001ac8:	6939      	ldr	r1, [r7, #16]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f004 ff76 	bl	80069bc <mg_snprintf>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	e2c9      	b.n	8002068 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8001ad4:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ad8:	f7ff ff84 	bl	80019e4 <xisinf>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d014      	beq.n	8001b0c <mg_dtoa+0x7c>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aee:	f7ff f843 	bl	8000b78 <__aeabi_dcmpgt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <mg_dtoa+0x6c>
 8001af8:	4b74      	ldr	r3, [pc, #464]	; (8001ccc <mg_dtoa+0x23c>)
 8001afa:	e000      	b.n	8001afe <mg_dtoa+0x6e>
 8001afc:	4b74      	ldr	r3, [pc, #464]	; (8001cd0 <mg_dtoa+0x240>)
 8001afe:	4a72      	ldr	r2, [pc, #456]	; (8001cc8 <mg_dtoa+0x238>)
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f004 ff5a 	bl	80069bc <mg_snprintf>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	e2ad      	b.n	8002068 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8001b0c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001b10:	f7ff ff90 	bl	8001a34 <xisnan>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <mg_dtoa+0x9a>
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <mg_dtoa+0x244>)
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	; (8001cc8 <mg_dtoa+0x238>)
 8001b1e:	6939      	ldr	r1, [r7, #16]
 8001b20:	6978      	ldr	r0, [r7, #20]
 8001b22:	f004 ff4b 	bl	80069bc <mg_snprintf>
 8001b26:	4603      	mov	r3, r0
 8001b28:	e29e      	b.n	8002068 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b36:	f7ff f801 	bl	8000b3c <__aeabi_dcmplt>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00d      	beq.n	8001b5c <mg_dtoa+0xcc>
 8001b40:	68bc      	ldr	r4, [r7, #8]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b48:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8001b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	66ba      	str	r2, [r7, #104]	; 0x68
 8001b52:	3370      	adds	r3, #112	; 0x70
 8001b54:	443b      	add	r3, r7
 8001b56:	222d      	movs	r2, #45	; 0x2d
 8001b58:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8001b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b60:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <mg_dtoa+0x248>)
 8001b6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001b6e:	e00a      	b.n	8001b86 <mg_dtoa+0xf6>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <mg_dtoa+0x24c>)
 8001b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b7a:	f7fe fd6d 	bl	8000658 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <mg_dtoa+0x24c>)
 8001b8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b90:	f7fe ffe8 	bl	8000b64 <__aeabi_dcmpge>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d011      	beq.n	8001bbe <mg_dtoa+0x12e>
 8001b9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ba2:	f7fe fe83 	bl	80008ac <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <mg_dtoa+0x24c>)
 8001bb4:	f7fe ffd6 	bl	8000b64 <__aeabi_dcmpge>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1d8      	bne.n	8001b70 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8001bbe:	e00a      	b.n	8001bd6 <mg_dtoa+0x146>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <mg_dtoa+0x24c>)
 8001bc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001bca:	f7fe fe6f 	bl	80008ac <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <mg_dtoa+0x248>)
 8001bdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001be0:	f7fe ffb6 	bl	8000b50 <__aeabi_dcmple>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d011      	beq.n	8001c0e <mg_dtoa+0x17e>
 8001bea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf2:	f7fe fe5b 	bl	80008ac <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <mg_dtoa+0x248>)
 8001c04:	f7fe ffa4 	bl	8000b50 <__aeabi_dcmple>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1d8      	bne.n	8001bc0 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <mg_dtoa+0x250>)
 8001c18:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c1c:	f7fe fd1c 	bl	8000658 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001c28:	e00d      	b.n	8001c46 <mg_dtoa+0x1b6>
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <mg_dtoa+0x24c>)
 8001c30:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c34:	f7fe fe3a 	bl	80008ac <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c42:	3301      	adds	r3, #1
 8001c44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbed      	blt.n	8001c2a <mg_dtoa+0x19a>
  d += t;
 8001c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c56:	f7fe fb49 	bl	80002ec <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <mg_dtoa+0x248>)
 8001c68:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8001c6c:	e00d      	b.n	8001c8a <mg_dtoa+0x1fa>
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <mg_dtoa+0x24c>)
 8001c74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c78:	f7fe fcee 	bl	8000658 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c86:	3301      	adds	r3, #1
 8001c88:	663b      	str	r3, [r7, #96]	; 0x60
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <mg_dtoa+0x24c>)
 8001c90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c94:	f7fe ff66 	bl	8000b64 <__aeabi_dcmpge>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d011      	beq.n	8001cc2 <mg_dtoa+0x232>
 8001c9e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ca2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ca6:	f7fe fe01 	bl	80008ac <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <mg_dtoa+0x24c>)
 8001cb8:	f7fe ff54 	bl	8000b64 <__aeabi_dcmpge>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1d5      	bne.n	8001c6e <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8001cc2:	e01d      	b.n	8001d00 <mg_dtoa+0x270>
 8001cc4:	08012770 	.word	0x08012770
 8001cc8:	08012774 	.word	0x08012774
 8001ccc:	08012778 	.word	0x08012778
 8001cd0:	0801277c 	.word	0x0801277c
 8001cd4:	08012784 	.word	0x08012784
 8001cd8:	3ff00000 	.word	0x3ff00000
 8001cdc:	40240000 	.word	0x40240000
 8001ce0:	40140000 	.word	0x40140000
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b9d      	ldr	r3, [pc, #628]	; (8001f60 <mg_dtoa+0x4d0>)
 8001cea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001cee:	f7fe fddd 	bl	80008ac <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b97      	ldr	r3, [pc, #604]	; (8001f64 <mg_dtoa+0x4d4>)
 8001d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d0a:	f7fe ff17 	bl	8000b3c <__aeabi_dcmplt>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d011      	beq.n	8001d38 <mg_dtoa+0x2a8>
 8001d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d1c:	f7fe fdc6 	bl	80008ac <__aeabi_ddiv>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <mg_dtoa+0x4d4>)
 8001d2e:	f7fe ff05 	bl	8000b3c <__aeabi_dcmplt>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1d5      	bne.n	8001ce4 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8001d38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	db33      	blt.n	8001da8 <mg_dtoa+0x318>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	dd30      	ble.n	8001da8 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001d46:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d4e:	f7fe fdad 	bl	80008ac <__aeabi_ddiv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	ec43 2b17 	vmov	d7, r2, r3
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f107 0018 	add.w	r0, r7, #24
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	eeb0 0a47 	vmov.f32	s0, s14
 8001d66:	eef0 0a67 	vmov.f32	s1, s15
 8001d6a:	2128      	movs	r1, #40	; 0x28
 8001d6c:	f7ff fe90 	bl	8001a90 <mg_dtoa>
 8001d70:	4603      	mov	r3, r0
 8001d72:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8001d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d78:	4413      	add	r3, r2
 8001d7a:	f107 0218 	add.w	r2, r7, #24
 8001d7e:	4413      	add	r3, r2
 8001d80:	222b      	movs	r2, #43	; 0x2b
 8001d82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fdab 	bl	80018e0 <addexp>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d8e:	4413      	add	r3, r2
 8001d90:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d9a:	4a73      	ldr	r2, [pc, #460]	; (8001f68 <mg_dtoa+0x4d8>)
 8001d9c:	6939      	ldr	r1, [r7, #16]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f004 fe0c 	bl	80069bc <mg_snprintf>
 8001da4:	4603      	mov	r3, r0
 8001da6:	e15f      	b.n	8002068 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	425b      	negs	r3, r3
 8001dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dc34      	bgt.n	8001e1c <mg_dtoa+0x38c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	dd31      	ble.n	8001e1c <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001dbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001dc0:	f7fe fd74 	bl	80008ac <__aeabi_ddiv>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	ec43 2b17 	vmov	d7, r2, r3
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f107 0018 	add.w	r0, r7, #24
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd8:	eef0 0a67 	vmov.f32	s1, s15
 8001ddc:	2128      	movs	r1, #40	; 0x28
 8001dde:	f7ff fe57 	bl	8001a90 <mg_dtoa>
 8001de2:	4603      	mov	r3, r0
 8001de4:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8001de6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dea:	4413      	add	r3, r2
 8001dec:	f107 0218 	add.w	r2, r7, #24
 8001df0:	18d0      	adds	r0, r2, r3
 8001df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001df4:	425b      	negs	r3, r3
 8001df6:	222d      	movs	r2, #45	; 0x2d
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fd71 	bl	80018e0 <addexp>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e02:	4413      	add	r3, r2
 8001e04:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e0e:	4a56      	ldr	r2, [pc, #344]	; (8001f68 <mg_dtoa+0x4d8>)
 8001e10:	6939      	ldr	r1, [r7, #16]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f004 fdd2 	bl	80069bc <mg_snprintf>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	e125      	b.n	8002068 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e24:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001e28:	e03f      	b.n	8001eaa <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8001e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e32:	f7fe fd3b 	bl	80008ac <__aeabi_ddiv>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fea5 	bl	8000b8c <__aeabi_d2iz>
 8001e42:	4603      	mov	r3, r0
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8001e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	dc02      	bgt.n	8001e52 <mg_dtoa+0x3c2>
 8001e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dd0c      	ble.n	8001e6c <mg_dtoa+0x3dc>
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e58:	1c59      	adds	r1, r3, #1
 8001e5a:	6679      	str	r1, [r7, #100]	; 0x64
 8001e5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e5e:	440b      	add	r3, r1
 8001e60:	3230      	adds	r2, #48	; 0x30
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	3370      	adds	r3, #112	; 0x70
 8001e66:	443b      	add	r3, r7
 8001e68:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001e6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e6e:	f7fe fb89 	bl	8000584 <__aeabi_i2d>
 8001e72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e76:	f7fe fbef 	bl	8000658 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e82:	f7fe fa31 	bl	80002e8 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <mg_dtoa+0x4d0>)
 8001e94:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e98:	f7fe fd08 	bl	80008ac <__aeabi_ddiv>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <mg_dtoa+0x4d4>)
 8001eb0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001eb4:	f7fe fe56 	bl	8000b64 <__aeabi_dcmpge>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <mg_dtoa+0x438>
 8001ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec2:	4413      	add	r3, r2
 8001ec4:	2b27      	cmp	r3, #39	; 0x27
 8001ec6:	ddb0      	ble.n	8001e2a <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8001ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d11b      	bne.n	8001f06 <mg_dtoa+0x476>
 8001ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	66ba      	str	r2, [r7, #104]	; 0x68
 8001ed4:	3370      	adds	r3, #112	; 0x70
 8001ed6:	443b      	add	r3, r7
 8001ed8:	2230      	movs	r2, #48	; 0x30
 8001eda:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8001ede:	e012      	b.n	8001f06 <mg_dtoa+0x476>
 8001ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	667a      	str	r2, [r7, #100]	; 0x64
 8001ee6:	3370      	adds	r3, #112	; 0x70
 8001ee8:	443b      	add	r3, r7
 8001eea:	2230      	movs	r2, #48	; 0x30
 8001eec:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <mg_dtoa+0x4d0>)
 8001ef6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001efa:	f7fe fcd7 	bl	80008ac <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <mg_dtoa+0x4d4>)
 8001f0c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f10:	f7fe fe28 	bl	8000b64 <__aeabi_dcmpge>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <mg_dtoa+0x494>
 8001f1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f1e:	4413      	add	r3, r2
 8001f20:	2b27      	cmp	r3, #39	; 0x27
 8001f22:	dddd      	ble.n	8001ee0 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8001f24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f28:	4413      	add	r3, r2
 8001f2a:	2b27      	cmp	r3, #39	; 0x27
 8001f2c:	dc09      	bgt.n	8001f42 <mg_dtoa+0x4b2>
 8001f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	66ba      	str	r2, [r7, #104]	; 0x68
 8001f34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f36:	4413      	add	r3, r2
 8001f38:	3370      	adds	r3, #112	; 0x70
 8001f3a:	443b      	add	r3, r7
 8001f3c:	222e      	movs	r2, #46	; 0x2e
 8001f3e:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001f42:	2300      	movs	r3, #0
 8001f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f46:	a304      	add	r3, pc, #16	; (adr r3, 8001f58 <mg_dtoa+0x4c8>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f50:	e046      	b.n	8001fe0 <mg_dtoa+0x550>
 8001f52:	bf00      	nop
 8001f54:	f3af 8000 	nop.w
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3fb99999 	.word	0x3fb99999
 8001f60:	40240000 	.word	0x40240000
 8001f64:	3ff00000 	.word	0x3ff00000
 8001f68:	08012788 	.word	0x08012788
      int ch = (int) (d / t);
 8001f6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f74:	f7fe fc9a 	bl	80008ac <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe04 	bl	8000b8c <__aeabi_d2iz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 8001f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	6679      	str	r1, [r7, #100]	; 0x64
 8001f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f94:	440b      	add	r3, r1
 8001f96:	3230      	adds	r2, #48	; 0x30
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	3370      	adds	r3, #112	; 0x70
 8001f9c:	443b      	add	r3, r7
 8001f9e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001fa2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fa4:	f7fe faee 	bl	8000584 <__aeabi_i2d>
 8001fa8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fac:	f7fe fb54 	bl	8000658 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fb8:	f7fe f996 	bl	80002e8 <__aeabi_dsub>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <mg_dtoa+0x5e0>)
 8001fca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fce:	f7fe fc6d 	bl	80008ac <__aeabi_ddiv>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fdc:	3301      	adds	r3, #1
 8001fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fe0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe4:	4413      	add	r3, r2
 8001fe6:	2b27      	cmp	r3, #39	; 0x27
 8001fe8:	dc07      	bgt.n	8001ffa <mg_dtoa+0x56a>
 8001fea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbbc      	blt.n	8001f6c <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8001ff2:	e002      	b.n	8001ffa <mg_dtoa+0x56a>
 8001ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <mg_dtoa+0x58a>
 8002000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002002:	2b00      	cmp	r3, #0
 8002004:	dd09      	ble.n	800201a <mg_dtoa+0x58a>
 8002006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800200a:	4413      	add	r3, r2
 800200c:	3b01      	subs	r3, #1
 800200e:	3370      	adds	r3, #112	; 0x70
 8002010:	443b      	add	r3, r7
 8002012:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002016:	2b30      	cmp	r3, #48	; 0x30
 8002018:	d0ec      	beq.n	8001ff4 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 800201a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800201c:	2b00      	cmp	r3, #0
 800201e:	dd0c      	ble.n	800203a <mg_dtoa+0x5aa>
 8002020:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002024:	4413      	add	r3, r2
 8002026:	3b01      	subs	r3, #1
 8002028:	3370      	adds	r3, #112	; 0x70
 800202a:	443b      	add	r3, r7
 800202c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002030:	2b2e      	cmp	r3, #46	; 0x2e
 8002032:	d102      	bne.n	800203a <mg_dtoa+0x5aa>
 8002034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002036:	3b01      	subs	r3, #1
 8002038:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 800203a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800203c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800203e:	4413      	add	r3, r2
 8002040:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8002042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002044:	2b27      	cmp	r3, #39	; 0x27
 8002046:	dd01      	ble.n	800204c <mg_dtoa+0x5bc>
 8002048:	2327      	movs	r3, #39	; 0x27
 800204a:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 800204c:	f107 0218 	add.w	r2, r7, #24
 8002050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002052:	4413      	add	r3, r2
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <mg_dtoa+0x5e4>)
 800205e:	6939      	ldr	r1, [r7, #16]
 8002060:	6978      	ldr	r0, [r7, #20]
 8002062:	f004 fcab 	bl	80069bc <mg_snprintf>
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3770      	adds	r7, #112	; 0x70
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	40240000 	.word	0x40240000
 8002074:	08012774 	.word	0x08012774

08002078 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <mg_lld+0x15c>)
 8002086:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800208c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002094:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d012      	beq.n	80020c2 <mg_lld+0x4a>
 800209c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	da0e      	bge.n	80020c2 <mg_lld+0x4a>
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	627a      	str	r2, [r7, #36]	; 0x24
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	222d      	movs	r2, #45	; 0x2d
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020b6:	2100      	movs	r1, #0
 80020b8:	4254      	negs	r4, r2
 80020ba:	eb61 0503 	sbc.w	r5, r1, r3
 80020be:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 80020c2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d021      	beq.n	800210e <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
 80020ce:	e019      	b.n	8002104 <mg_lld+0x8c>
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	441a      	add	r2, r3
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	1c59      	adds	r1, r3, #1
 80020de:	6239      	str	r1, [r7, #32]
 80020e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e2:	440b      	add	r3, r1
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	440b      	add	r3, r1
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	0902      	lsrs	r2, r0, #4
 80020fa:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80020fe:	090b      	lsrs	r3, r1, #4
 8002100:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002104:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002108:	4313      	orrs	r3, r2
 800210a:	d1e1      	bne.n	80020d0 <mg_lld+0x58>
 800210c:	e025      	b.n	800215a <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
 8002112:	e01e      	b.n	8002152 <mg_lld+0xda>
 8002114:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002118:	f04f 020a 	mov.w	r2, #10
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	f7fe fd5c 	bl	8000bdc <__aeabi_uldivmod>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	441a      	add	r2, r3
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	6239      	str	r1, [r7, #32]
 800212e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002130:	440b      	add	r3, r1
 8002132:	68f9      	ldr	r1, [r7, #12]
 8002134:	440b      	add	r3, r1
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800213e:	f04f 020a 	mov.w	r2, #10
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	f7fe fd49 	bl	8000bdc <__aeabi_uldivmod>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002156:	4313      	orrs	r3, r2
 8002158:	d1dc      	bne.n	8002114 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e022      	b.n	80021a6 <mg_lld+0x12e>
    char t = buf[s + i];
 8002160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800216e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	441a      	add	r2, r3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	441a      	add	r2, r3
 800217e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	440b      	add	r3, r1
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	440b      	add	r3, r1
 8002188:	7812      	ldrb	r2, [r2, #0]
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	441a      	add	r2, r3
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	7dfa      	ldrb	r2, [r7, #23]
 800219e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3d7      	bcc.n	8002160 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 80021b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	d106      	bne.n	80021c6 <mg_lld+0x14e>
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	623a      	str	r2, [r7, #32]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	2230      	movs	r2, #48	; 0x30
 80021c4:	701a      	strb	r2, [r3, #0]
  return n + s;
 80021c6:	6a3a      	ldr	r2, [r7, #32]
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	4413      	add	r3, r2
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3730      	adds	r7, #48	; 0x30
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bdb0      	pop	{r4, r5, r7, pc}
 80021d4:	08012790 	.word	0x08012790

080021d8 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80021ea:	e009      	b.n	8002200 <scpy+0x28>
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	617a      	str	r2, [r7, #20]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	4610      	mov	r0, r2
 80021fe:	4798      	blx	r3
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d205      	bcs.n	8002214 <scpy+0x3c>
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1eb      	bne.n	80021ec <scpy+0x14>
  return i;
 8002214:	697b      	ldr	r3, [r7, #20]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 800221e:	b40c      	push	{r2, r3}
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f809 	bl	8002254 <mg_vxprintf>
 8002242:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8002244:	68fb      	ldr	r3, [r7, #12]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002250:	b002      	add	sp, #8
 8002252:	4770      	bx	lr

08002254 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8002254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002258:	b0a6      	sub	sp, #152	; 0x98
 800225a:	af02      	add	r7, sp, #8
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8002270:	e383      	b.n	800297a <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b25      	cmp	r3, #37	; 0x25
 800227e:	f040 8369 	bne.w	8002954 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8002282:	2300      	movs	r3, #0
 8002284:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002286:	2300      	movs	r3, #0
 8002288:	67bb      	str	r3, [r7, #120]	; 0x78
 800228a:	2300      	movs	r3, #0
 800228c:	677b      	str	r3, [r7, #116]	; 0x74
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002294:	2320      	movs	r3, #32
 8002296:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800229a:	2300      	movs	r3, #0
 800229c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80022a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 80022b8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022bc:	2b23      	cmp	r3, #35	; 0x23
 80022be:	d10e      	bne.n	80022de <mg_vxprintf+0x8a>
 80022c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022c2:	3301      	adds	r3, #1
 80022c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ca:	3301      	adds	r3, #1
 80022cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80022de:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022e2:	2b2d      	cmp	r3, #45	; 0x2d
 80022e4:	d110      	bne.n	8002308 <mg_vxprintf+0xb4>
 80022e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022ea:	3301      	adds	r3, #1
 80022ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80022f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f4:	3301      	adds	r3, #1
 80022f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8002308:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800230c:	2b30      	cmp	r3, #48	; 0x30
 800230e:	d127      	bne.n	8002360 <mg_vxprintf+0x10c>
 8002310:	2330      	movs	r3, #48	; 0x30
 8002312:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800231a:	3301      	adds	r3, #1
 800231c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002326:	4413      	add	r3, r2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 800232e:	e017      	b.n	8002360 <mg_vxprintf+0x10c>
 8002330:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	677b      	str	r3, [r7, #116]	; 0x74
 800233c:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002342:	4413      	add	r3, r2
 8002344:	3b30      	subs	r3, #48	; 0x30
 8002346:	677b      	str	r3, [r7, #116]	; 0x74
 8002348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800234c:	3301      	adds	r3, #1
 800234e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002360:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff faa5 	bl	80018b4 <is_digit>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1df      	bne.n	8002330 <mg_vxprintf+0xdc>
      if (c == '.') {
 8002370:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002374:	2b2e      	cmp	r3, #46	; 0x2e
 8002376:	d153      	bne.n	8002420 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002378:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800237c:	3301      	adds	r3, #1
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8002390:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002394:	2b2a      	cmp	r3, #42	; 0x2a
 8002396:	d113      	bne.n	80023c0 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1d19      	adds	r1, r3, #4
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	6011      	str	r1, [r2, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 80023a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023aa:	3301      	adds	r3, #1
 80023ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023be:	e02f      	b.n	8002420 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80023c4:	e017      	b.n	80023f6 <mg_vxprintf+0x1a2>
 80023c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	673b      	str	r3, [r7, #112]	; 0x70
 80023d2:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80023d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d8:	4413      	add	r3, r2
 80023da:	3b30      	subs	r3, #48	; 0x30
 80023dc:	673b      	str	r3, [r7, #112]	; 0x70
 80023de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023f6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fa5a 	bl	80018b4 <is_digit>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1df      	bne.n	80023c6 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8002406:	e00b      	b.n	8002420 <mg_vxprintf+0x1cc>
 8002408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240c:	3301      	adds	r3, #1
 800240e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002418:	4413      	add	r3, r2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002420:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002424:	2b68      	cmp	r3, #104	; 0x68
 8002426:	d0ef      	beq.n	8002408 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8002428:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800242c:	2b6c      	cmp	r3, #108	; 0x6c
 800242e:	d121      	bne.n	8002474 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8002430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002432:	3301      	adds	r3, #1
 8002434:	67bb      	str	r3, [r7, #120]	; 0x78
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243a:	3301      	adds	r3, #1
 800243c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 800244e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002452:	2b6c      	cmp	r3, #108	; 0x6c
 8002454:	d10e      	bne.n	8002474 <mg_vxprintf+0x220>
 8002456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002458:	3301      	adds	r3, #1
 800245a:	67bb      	str	r3, [r7, #120]	; 0x78
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002460:	3301      	adds	r3, #1
 8002462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002474:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d103      	bne.n	8002484 <mg_vxprintf+0x230>
 800247c:	2301      	movs	r3, #1
 800247e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002480:	2301      	movs	r3, #1
 8002482:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002484:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002488:	2b64      	cmp	r3, #100	; 0x64
 800248a:	d018      	beq.n	80024be <mg_vxprintf+0x26a>
 800248c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002490:	2b75      	cmp	r3, #117	; 0x75
 8002492:	d014      	beq.n	80024be <mg_vxprintf+0x26a>
 8002494:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002498:	2b78      	cmp	r3, #120	; 0x78
 800249a:	d010      	beq.n	80024be <mg_vxprintf+0x26a>
 800249c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024a0:	2b58      	cmp	r3, #88	; 0x58
 80024a2:	d00c      	beq.n	80024be <mg_vxprintf+0x26a>
 80024a4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024a8:	2b70      	cmp	r3, #112	; 0x70
 80024aa:	d008      	beq.n	80024be <mg_vxprintf+0x26a>
 80024ac:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024b0:	2b67      	cmp	r3, #103	; 0x67
 80024b2:	d004      	beq.n	80024be <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 80024b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024b8:	2b66      	cmp	r3, #102	; 0x66
 80024ba:	f040 816c 	bne.w	8002796 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80024be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80024ce:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024d2:	2b78      	cmp	r3, #120	; 0x78
 80024d4:	d007      	beq.n	80024e6 <mg_vxprintf+0x292>
 80024d6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024da:	2b58      	cmp	r3, #88	; 0x58
 80024dc:	d003      	beq.n	80024e6 <mg_vxprintf+0x292>
 80024de:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024e2:	2b70      	cmp	r3, #112	; 0x70
 80024e4:	d101      	bne.n	80024ea <mg_vxprintf+0x296>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <mg_vxprintf+0x298>
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80024f0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 80024fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <mg_vxprintf+0x2b2>
 8002502:	2302      	movs	r3, #2
 8002504:	e000      	b.n	8002508 <mg_vxprintf+0x2b4>
 8002506:	2300      	movs	r3, #0
 8002508:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 800250a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800250e:	2b67      	cmp	r3, #103	; 0x67
 8002510:	d003      	beq.n	800251a <mg_vxprintf+0x2c6>
 8002512:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002516:	2b66      	cmp	r3, #102	; 0x66
 8002518:	d124      	bne.n	8002564 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3307      	adds	r3, #7
 8002520:	f023 0307 	bic.w	r3, r3, #7
 8002524:	f103 0108 	add.w	r1, r3, #8
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	6011      	str	r1, [r2, #0]
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 8002534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d101      	bne.n	8002540 <mg_vxprintf+0x2ec>
 800253c:	2306      	movs	r3, #6
 800253e:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002540:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002542:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002546:	2b67      	cmp	r3, #103	; 0x67
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f107 0014 	add.w	r0, r7, #20
 8002554:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002558:	2128      	movs	r1, #40	; 0x28
 800255a:	f7ff fa99 	bl	8001a90 <mg_dtoa>
 800255e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 8002562:	e069      	b.n	8002638 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002566:	2b02      	cmp	r3, #2
 8002568:	d11c      	bne.n	80025a4 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3307      	adds	r3, #7
 8002570:	f023 0307 	bic.w	r3, r3, #7
 8002574:	f103 0108 	add.w	r1, r3, #8
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	6011      	str	r1, [r2, #0]
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 8002584:	f107 0114 	add.w	r1, r7, #20
 8002588:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002598:	4608      	mov	r0, r1
 800259a:	f7ff fd6d 	bl	8002078 <mg_lld>
 800259e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80025a2:	e049      	b.n	8002638 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 80025a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d123      	bne.n	80025f2 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1d19      	adds	r1, r3, #4
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	6011      	str	r1, [r2, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 80025b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <mg_vxprintf+0x376>
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	17da      	asrs	r2, r3, #31
 80025c4:	461c      	mov	r4, r3
 80025c6:	4615      	mov	r5, r2
 80025c8:	e003      	b.n	80025d2 <mg_vxprintf+0x37e>
 80025ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025cc:	2200      	movs	r2, #0
 80025ce:	461c      	mov	r4, r3
 80025d0:	4615      	mov	r5, r2
 80025d2:	f107 0114 	add.w	r1, r7, #20
 80025d6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4622      	mov	r2, r4
 80025e4:	462b      	mov	r3, r5
 80025e6:	4608      	mov	r0, r1
 80025e8:	f7ff fd46 	bl	8002078 <mg_lld>
 80025ec:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80025f0:	e022      	b.n	8002638 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1d19      	adds	r1, r3, #4
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	6011      	str	r1, [r2, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8002600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <mg_vxprintf+0x3be>
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	17da      	asrs	r2, r3, #31
 800260c:	4698      	mov	r8, r3
 800260e:	4691      	mov	r9, r2
 8002610:	e003      	b.n	800261a <mg_vxprintf+0x3c6>
 8002612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002614:	2200      	movs	r2, #0
 8002616:	4698      	mov	r8, r3
 8002618:	4691      	mov	r9, r2
 800261a:	f107 0114 	add.w	r1, r7, #20
 800261e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4642      	mov	r2, r8
 800262c:	464b      	mov	r3, r9
 800262e:	4608      	mov	r0, r1
 8002630:	f7ff fd22 	bl	8002078 <mg_lld>
 8002634:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800263e:	e007      	b.n	8002650 <mg_vxprintf+0x3fc>
 8002640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002642:	3b01      	subs	r3, #1
 8002644:	677b      	str	r3, [r7, #116]	; 0x74
 8002646:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800264a:	3301      	adds	r3, #1
 800264c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002650:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002656:	429a      	cmp	r2, r3
 8002658:	d202      	bcs.n	8002660 <mg_vxprintf+0x40c>
 800265a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ef      	bne.n	8002640 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002666:	e011      	b.n	800268c <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002668:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800266c:	2301      	movs	r3, #1
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fdb1 	bl	80021d8 <scpy>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800267c:	4413      	add	r3, r2
 800267e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002686:	3301      	adds	r3, #1
 8002688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800268c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002690:	2b20      	cmp	r3, #32
 8002692:	d110      	bne.n	80026b6 <mg_vxprintf+0x462>
 8002694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10c      	bne.n	80026b6 <mg_vxprintf+0x462>
 800269c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d207      	bcs.n	80026b6 <mg_vxprintf+0x462>
 80026a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ae:	4413      	add	r3, r2
 80026b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d8d8      	bhi.n	8002668 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 80026b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b8:	4ab7      	ldr	r2, [pc, #732]	; (8002998 <mg_vxprintf+0x744>)
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff fd8b 	bl	80021d8 <scpy>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026c8:	4413      	add	r3, r2
 80026ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026d4:	e011      	b.n	80026fa <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 80026d6:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80026da:	2301      	movs	r3, #1
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff fd7a 	bl	80021d8 <scpy>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026ea:	4413      	add	r3, r2
 80026ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80026f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f4:	3301      	adds	r3, #1
 80026f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80026fe:	2b30      	cmp	r3, #48	; 0x30
 8002700:	d10c      	bne.n	800271c <mg_vxprintf+0x4c8>
 8002702:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002708:	429a      	cmp	r2, r3
 800270a:	d207      	bcs.n	800271c <mg_vxprintf+0x4c8>
 800270c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002714:	4413      	add	r3, r2
 8002716:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002718:	429a      	cmp	r2, r3
 800271a:	d8dc      	bhi.n	80026d6 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 800271c:	f107 0214 	add.w	r2, r7, #20
 8002720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff fd56 	bl	80021d8 <scpy>
 800272c:	4602      	mov	r2, r0
 800272e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002732:	4413      	add	r3, r2
 8002734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800273e:	e011      	b.n	8002764 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002740:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002744:	2301      	movs	r3, #1
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff fd45 	bl	80021d8 <scpy>
 800274e:	4602      	mov	r2, r0
 8002750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002754:	4413      	add	r3, r2
 8002756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800275a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800275e:	3301      	adds	r3, #1
 8002760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002764:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002768:	2b20      	cmp	r3, #32
 800276a:	f040 80ea 	bne.w	8002942 <mg_vxprintf+0x6ee>
 800276e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80e5 	beq.w	8002942 <mg_vxprintf+0x6ee>
 8002778:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800277c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277e:	429a      	cmp	r2, r3
 8002780:	f080 80df 	bcs.w	8002942 <mg_vxprintf+0x6ee>
 8002784:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002788:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800278c:	4413      	add	r3, r2
 800278e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002790:	429a      	cmp	r2, r3
 8002792:	d8d5      	bhi.n	8002740 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002794:	e0d5      	b.n	8002942 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8002796:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800279a:	2b6d      	cmp	r3, #109	; 0x6d
 800279c:	d003      	beq.n	80027a6 <mg_vxprintf+0x552>
 800279e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027a2:	2b4d      	cmp	r3, #77	; 0x4d
 80027a4:	d128      	bne.n	80027f8 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1d19      	adds	r1, r3, #4
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	6011      	str	r1, [r2, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 80027b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027b8:	2b6d      	cmp	r3, #109	; 0x6d
 80027ba:	d103      	bne.n	80027c4 <mg_vxprintf+0x570>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	2022      	movs	r0, #34	; 0x22
 80027c2:	4798      	blx	r3
        n += f(out, param, ap);
 80027c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	4798      	blx	r3
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027d4:	4413      	add	r3, r2
 80027d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 80027da:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027de:	2b6d      	cmp	r3, #109	; 0x6d
 80027e0:	f040 80b1 	bne.w	8002946 <mg_vxprintf+0x6f2>
 80027e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027e8:	3302      	adds	r3, #2
 80027ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	2022      	movs	r0, #34	; 0x22
 80027f4:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 80027f6:	e0a6      	b.n	8002946 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 80027f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027fc:	2b63      	cmp	r3, #99	; 0x63
 80027fe:	d112      	bne.n	8002826 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	1d19      	adds	r1, r3, #4
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6011      	str	r1, [r2, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 800280e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	4610      	mov	r0, r2
 8002818:	4798      	blx	r3
        n++;
 800281a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800281e:	3301      	adds	r3, #1
 8002820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002824:	e090      	b.n	8002948 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8002826:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800282a:	2b73      	cmp	r3, #115	; 0x73
 800282c:	d16b      	bne.n	8002906 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1d19      	adds	r1, r3, #4
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	6011      	str	r1, [r2, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 800283c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d109      	bne.n	8002858 <mg_vxprintf+0x604>
 8002844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002846:	2b00      	cmp	r3, #0
 8002848:	d004      	beq.n	8002854 <mg_vxprintf+0x600>
 800284a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800284c:	f7fd fd40 	bl	80002d0 <strlen>
 8002850:	4603      	mov	r3, r0
 8002852:	e000      	b.n	8002856 <mg_vxprintf+0x602>
 8002854:	2300      	movs	r3, #0
 8002856:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800285e:	e011      	b.n	8002884 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002860:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002864:	2301      	movs	r3, #1
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff fcb5 	bl	80021d8 <scpy>
 800286e:	4602      	mov	r2, r0
 8002870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002874:	4413      	add	r3, r2
 8002876:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	3301      	adds	r3, #1
 8002880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002884:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <mg_vxprintf+0x64e>
 800288c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800288e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002890:	429a      	cmp	r2, r3
 8002892:	d206      	bcs.n	80028a2 <mg_vxprintf+0x64e>
 8002894:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289a:	4413      	add	r3, r2
 800289c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800289e:	429a      	cmp	r2, r3
 80028a0:	d8de      	bhi.n	8002860 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 80028a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff fc95 	bl	80021d8 <scpy>
 80028ae:	4602      	mov	r2, r0
 80028b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028b4:	4413      	add	r3, r2
 80028b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028c0:	e011      	b.n	80028e6 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 80028c2:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80028c6:	2301      	movs	r3, #1
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fc84 	bl	80021d8 <scpy>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d6:	4413      	add	r3, r2
 80028d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80028dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e0:	3301      	adds	r3, #1
 80028e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d02c      	beq.n	8002948 <mg_vxprintf+0x6f4>
 80028ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d228      	bcs.n	8002948 <mg_vxprintf+0x6f4>
 80028f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80028fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028fc:	4413      	add	r3, r2
 80028fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002900:	429a      	cmp	r2, r3
 8002902:	d8de      	bhi.n	80028c2 <mg_vxprintf+0x66e>
 8002904:	e020      	b.n	8002948 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8002906:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800290a:	2b25      	cmp	r3, #37	; 0x25
 800290c:	d109      	bne.n	8002922 <mg_vxprintf+0x6ce>
        out('%', param);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	2025      	movs	r0, #37	; 0x25
 8002914:	4798      	blx	r3
        n++;
 8002916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800291a:	3301      	adds	r3, #1
 800291c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002920:	e012      	b.n	8002948 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	2025      	movs	r0, #37	; 0x25
 8002928:	4798      	blx	r3
        out(c, param);
 800292a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4610      	mov	r0, r2
 8002934:	4798      	blx	r3
        n += 2;
 8002936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800293a:	3302      	adds	r3, #2
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002940:	e002      	b.n	8002948 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8002946:	bf00      	nop
      }
      i++;
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294c:	3301      	adds	r3, #1
 800294e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002952:	e012      	b.n	800297a <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295a:	4413      	add	r3, r2
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	4610      	mov	r0, r2
 8002964:	4798      	blx	r3
 8002966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800296a:	3301      	adds	r3, #1
 800296c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002974:	3301      	adds	r3, #1
 8002976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002980:	4413      	add	r3, r2
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f ac74 	bne.w	8002272 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800298a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800298e:	4618      	mov	r0, r3
 8002990:	3790      	adds	r7, #144	; 0x90
 8002992:	46bd      	mov	sp, r7
 8002994:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002998:	080127a4 	.word	0x080127a4

0800299c <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 80029a8:	2108      	movs	r1, #8
 80029aa:	2001      	movs	r0, #1
 80029ac:	f00e fc48 	bl	8011240 <calloc>
 80029b0:	4603      	mov	r3, r0
 80029b2:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d013      	beq.n	80029e2 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	68b8      	ldr	r0, [r7, #8]
 80029c2:	4798      	blx	r3
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <mg_fs_open+0x46>
      free(fd);
 80029d8:	6978      	ldr	r0, [r7, #20]
 80029da:	f00e fc57 	bl	801128c <free>
      fd = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 80029e2:	697b      	ldr	r3, [r7, #20]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	4610      	mov	r0, r2
 8002a06:	4798      	blx	r3
    free(fd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f00e fc3f 	bl	801128c <free>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fd fc54 	bl	80002d0 <strlen>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d219      	bcs.n	8002a64 <is_dir_prefix+0x4e>
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f00e fef5 	bl	8011824 <strncmp>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d111      	bne.n	8002a64 <is_dir_prefix+0x4e>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a50:	d006      	beq.n	8002a60 <is_dir_prefix+0x4a>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a5e:	d101      	bne.n	8002a64 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <is_dir_prefix+0x50>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b088      	sub	sp, #32
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7fd fc28 	bl	80002d0 <strlen>
 8002a80:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f008 fab0 	bl	800afec <mg_unpack>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <packed_stat+0x28>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e017      	b.n	8002ac6 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e00c      	b.n	8002ab6 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff ffb8 	bl	8002a16 <is_dir_prefix>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <packed_stat+0x42>
 8002aac:	2304      	movs	r3, #4
 8002aae:	e00a      	b.n	8002ac6 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	69f8      	ldr	r0, [r7, #28]
 8002ab8:	f008 fa84 	bl	800afc4 <mg_unlist>
 8002abc:	6178      	str	r0, [r7, #20]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1eb      	bne.n	8002a9c <packed_stat+0x2e>
  }
  return 0;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b0cc      	sub	sp, #304	; 0x130
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ada:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ade:	6018      	str	r0, [r3, #0]
 8002ae0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ae4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ae8:	6019      	str	r1, [r3, #0]
 8002aea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002aee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002af2:	601a      	str	r2, [r3, #0]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8002af4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002af8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	f7fd fbe7 	bl	80002d0 <strlen>
 8002b02:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  tmp[0] = '\0';  // Previously listed entry
 8002b06:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b18:	e065      	b.n	8002be6 <packed_list+0x116>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002b1a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b26:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f7ff ff73 	bl	8002a16 <is_dir_prefix>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d04f      	beq.n	8002bd6 <packed_list+0x106>
    begin = &path[n + 1];
 8002b36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b40:	4413      	add	r3, r2
 8002b42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    end = strchr(begin, '/');
 8002b46:	212f      	movs	r1, #47	; 0x2f
 8002b48:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002b4c:	f00e fe5d 	bl	801180a <strchr>
 8002b50:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (end == NULL) end = begin + strlen(begin);
 8002b54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <packed_list+0xa0>
 8002b5c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002b60:	f7fd fbb6 	bl	80002d0 <strlen>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8002b70:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b78:	1ad2      	subs	r2, r2, r3
 8002b7a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <packed_list+0x138>)
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	f003 ff17 	bl	80069bc <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8002b94:	f107 0214 	add.w	r2, r7, #20
 8002b98:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fb36 	bl	8000210 <strcmp>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d017      	beq.n	8002bda <packed_list+0x10a>
    fn(buf, userdata);  // Not yet listed, call user function
 8002baa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bae:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8002bb2:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002bb6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002bba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6811      	ldr	r1, [r2, #0]
 8002bc2:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8002bc4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f00e fed5 	bl	801197e <strcpy>
 8002bd4:	e002      	b.n	8002bdc <packed_list+0x10c>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <packed_list+0x10c>
    if (strcmp(buf, tmp) == 0) continue;
 8002bda:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002be0:	3301      	adds	r3, #1
 8002be2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002be6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002bea:	f008 f9eb 	bl	800afc4 <mg_unlist>
 8002bee:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8002bf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d18f      	bne.n	8002b1a <packed_list+0x4a>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08012788 	.word	0x08012788

08002c0c <packed_open>:

static void *packed_open(const char *path, int flags) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f008 f9e2 	bl	800afec <mg_unpack>
 8002c28:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <packed_open+0x2c>
 8002c34:	2300      	movs	r3, #0
 8002c36:	e016      	b.n	8002c66 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <packed_open+0x3a>
 8002c42:	2300      	movs	r3, #0
 8002c44:	e00f      	b.n	8002c66 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8002c46:	210c      	movs	r1, #12
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f00e faf9 	bl	8011240 <calloc>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <packed_open+0x58>
    fp->size = size;
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8002c64:	693b      	ldr	r3, [r7, #16]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <packed_close>:

static void packed_close(void *fp) {
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <packed_close+0x14>
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f00e fb05 	bl	801128c <free>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d905      	bls.n	8002cb6 <packed_read+0x2c>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	68b8      	ldr	r0, [r7, #8]
 8002cc6:	f00e fe62 	bl	801198e <memcpy>
  fp->pos += len;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	609a      	str	r2, [r3, #8]
  return len;
 8002cd6:	687b      	ldr	r3, [r7, #4]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d903      	bls.n	8002d22 <packed_seek+0x28>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <packed_remove>:

static bool packed_remove(const char *path) {
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <p_open>:
static void *p_open(const char *path, int flags) {
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <p_close>:
static void p_close(void *fp) {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <p_remove>:
static bool p_remove(const char *path) {
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8002e68:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e6c:	b08f      	sub	sp, #60	; 0x3c
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	f107 0318 	add.w	r3, r7, #24
 8002e74:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e78:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002e86:	a340      	add	r3, pc, #256	; (adr r3, 8002f88 <mg_to_size_t+0x120>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 8002e94:	e002      	b.n	8002e9c <mg_to_size_t+0x34>
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	3301      	adds	r3, #1
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d20b      	bcs.n	8002ebc <mg_to_size_t+0x54>
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d0f2      	beq.n	8002e96 <mg_to_size_t+0x2e>
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	4413      	add	r3, r2
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	d0ec      	beq.n	8002e96 <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d244      	bcs.n	8002f4e <mg_to_size_t+0xe6>
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b2d      	cmp	r3, #45	; 0x2d
 8002ece:	d13e      	bne.n	8002f4e <mg_to_size_t+0xe6>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e050      	b.n	8002f76 <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 8002ed4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ed8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002edc:	4290      	cmp	r0, r2
 8002ede:	eb71 0303 	sbcs.w	r3, r1, r3
 8002ee2:	d201      	bcs.n	8002ee8 <mg_to_size_t+0x80>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e046      	b.n	8002f76 <mg_to_size_t+0x10e>
    result *= 10;
 8002ee8:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	0099      	lsls	r1, r3, #2
 8002efa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002efe:	0090      	lsls	r0, r2, #2
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	eb12 0408 	adds.w	r4, r2, r8
 8002f08:	eb43 0509 	adc.w	r5, r3, r9
 8002f0c:	1923      	adds	r3, r4, r4
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	eb45 0305 	adc.w	r3, r5, r5
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1a:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3b30      	subs	r3, #48	; 0x30
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4692      	mov	sl, r2
 8002f2e:	469b      	mov	fp, r3
 8002f30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f34:	eb12 010a 	adds.w	r1, r2, sl
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	eb43 030b 	adc.w	r3, r3, fp
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d20b      	bcs.n	8002f6e <mg_to_size_t+0x106>
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b2f      	cmp	r3, #47	; 0x2f
 8002f60:	d905      	bls.n	8002f6e <mg_to_size_t+0x106>
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b39      	cmp	r3, #57	; 0x39
 8002f6c:	d9b2      	bls.n	8002ed4 <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 8002f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	601a      	str	r2, [r3, #0]
  return true;
 8002f74:	2301      	movs	r3, #1
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	373c      	adds	r7, #60	; 0x3c
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	f3af 8000 	nop.w
 8002f88:	99999998 	.word	0x99999998
 8002f8c:	19999999 	.word	0x19999999

08002f90 <isx>:
    }
  }
  return len;
}

static bool isx(int c) {
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8002f9c:	dd02      	ble.n	8002fa4 <isx+0x14>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b39      	cmp	r3, #57	; 0x39
 8002fa2:	dd0b      	ble.n	8002fbc <isx+0x2c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b60      	cmp	r3, #96	; 0x60
 8002fa8:	dd02      	ble.n	8002fb0 <isx+0x20>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b66      	cmp	r3, #102	; 0x66
 8002fae:	dd05      	ble.n	8002fbc <isx+0x2c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	dd04      	ble.n	8002fc0 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b46      	cmp	r3, #70	; 0x46
 8002fba:	dc01      	bgt.n	8002fc0 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <isx+0x32>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e04f      	b.n	800308c <mg_url_decode+0xb8>
    if (src[i] == '%') {
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b25      	cmp	r3, #37	; 0x25
 8002ff6:	d12c      	bne.n	8003052 <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d924      	bls.n	800304c <mg_url_decode+0x78>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3301      	adds	r3, #1
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ffbf 	bl	8002f90 <isx>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d019      	beq.n	800304c <mg_url_decode+0x78>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3302      	adds	r3, #2
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ffb4 	bl	8002f90 <isx>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3301      	adds	r3, #1
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	18d0      	adds	r0, r2, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	461a      	mov	r2, r3
 800303e:	2102      	movs	r1, #2
 8003040:	f004 fb81 	bl	8007746 <mg_unhex>
        i += 2;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3302      	adds	r3, #2
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e019      	b.n	8003080 <mg_url_decode+0xac>
      } else {
        return -1;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	e03a      	b.n	80030c8 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <mg_url_decode+0x9c>
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b2b      	cmp	r3, #43	; 0x2b
 8003062:	d105      	bne.n	8003070 <mg_url_decode+0x9c>
      dst[j] = ' ';
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	2220      	movs	r2, #32
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e007      	b.n	8003080 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	441a      	add	r2, r3
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	440b      	add	r3, r1
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	3301      	adds	r3, #1
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	429a      	cmp	r2, r3
 8003092:	d204      	bcs.n	800309e <mg_url_decode+0xca>
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	3301      	adds	r3, #1
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d8a6      	bhi.n	8002fec <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d204      	bcs.n	80030b0 <mg_url_decode+0xdc>
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d305      	bcc.n	80030c4 <mg_url_decode+0xf0>
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d201      	bcs.n	80030c4 <mg_url_decode+0xf0>
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	e001      	b.n	80030c8 <mg_url_decode+0xf4>
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <isok>:

static bool isok(uint8_t c) {
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b0a      	cmp	r3, #10
 80030de:	d005      	beq.n	80030ec <isok+0x1c>
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	2b0d      	cmp	r3, #13
 80030e4:	d002      	beq.n	80030ec <isok+0x1c>
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	2b1f      	cmp	r3, #31
 80030ea:	d901      	bls.n	80030f0 <isok+0x20>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <isok+0x22>
 80030f0:	2300      	movs	r3, #0
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	b2db      	uxtb	r3, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e03c      	b.n	800318e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ffd7 	bl	80030d0 <isok>
 8003122:	4603      	mov	r3, r0
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <mg_http_get_request_len+0x30>
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	e031      	b.n	8003198 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <mg_http_get_request_len+0x50>
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b0a      	cmp	r3, #10
 8003144:	d106      	bne.n	8003154 <mg_http_get_request_len+0x50>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3b01      	subs	r3, #1
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b0a      	cmp	r3, #10
 8003152:	d016      	beq.n	8003182 <mg_http_get_request_len+0x7e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d916      	bls.n	8003188 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b0a      	cmp	r3, #10
 8003164:	d110      	bne.n	8003188 <mg_http_get_request_len+0x84>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3b01      	subs	r3, #1
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b0d      	cmp	r3, #13
 8003172:	d109      	bne.n	8003188 <mg_http_get_request_len+0x84>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3b02      	subs	r3, #2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b0a      	cmp	r3, #10
 8003180:	d102      	bne.n	8003188 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3301      	adds	r3, #1
 8003186:	e007      	b.n	8003198 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d3be      	bcc.n	8003114 <mg_http_get_request_len+0x10>
  }
  return 0;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	f7fd f890 	bl	80002d0 <strlen>
 80031b0:	61b8      	str	r0, [r7, #24]
 80031b2:	231e      	movs	r3, #30
 80031b4:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e01f      	b.n	80031fc <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	3302      	adds	r3, #2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	3328      	adds	r3, #40	; 0x28
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10b      	bne.n	80031f6 <mg_http_get_header+0x56>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	6839      	ldr	r1, [r7, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 ff7e 	bl	80070e8 <mg_ncasecmp>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <mg_http_get_header+0x56>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e010      	b.n	8003218 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	d208      	bcs.n	8003216 <mg_http_get_header+0x76>
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3302      	adds	r3, #2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1d2      	bne.n	80031bc <mg_http_get_header+0x1c>
  }
  return NULL;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <clen>:

// Get character length. Used to parse method, URI, headers
static size_t clen(const char *s) {
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint8_t c = *(uint8_t *) s;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	73fb      	strb	r3, [r7, #15]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b20      	cmp	r3, #32
 8003232:	d904      	bls.n	800323e <clen+0x1e>
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b7d      	cmp	r3, #125	; 0x7d
 8003238:	d801      	bhi.n	800323e <clen+0x1e>
 800323a:	2301      	movs	r3, #1
 800323c:	e015      	b.n	800326a <clen+0x4a>
  if ((c & 0xe0) == 0xc0) return 2;  // 2-byte UTF8
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003244:	2bc0      	cmp	r3, #192	; 0xc0
 8003246:	d101      	bne.n	800324c <clen+0x2c>
 8003248:	2302      	movs	r3, #2
 800324a:	e00e      	b.n	800326a <clen+0x4a>
  if ((c & 0xf0) == 0xe0) return 3;  // 3-byte UTF8
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003252:	2be0      	cmp	r3, #224	; 0xe0
 8003254:	d101      	bne.n	800325a <clen+0x3a>
 8003256:	2303      	movs	r3, #3
 8003258:	e007      	b.n	800326a <clen+0x4a>
  if ((c & 0xf8) == 0xf0) return 4;  // 4-byte UTF8
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003260:	2bf0      	cmp	r3, #240	; 0xf0
 8003262:	d101      	bne.n	8003268 <clen+0x48>
 8003264:	2304      	movs	r3, #4
 8003266:	e000      	b.n	800326a <clen+0x4a>
  return 0;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  v->ptr = s;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8003288:	e007      	b.n	800329a <skiptorn+0x24>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d207      	bcs.n	80032b2 <skiptorn+0x3c>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b0a      	cmp	r3, #10
 80032a8:	d003      	beq.n	80032b2 <skiptorn+0x3c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b0d      	cmp	r3, #13
 80032b0:	d1eb      	bne.n	800328a <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d208      	bcs.n	80032cc <skiptorn+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b0d      	cmp	r3, #13
 80032c0:	d106      	bne.n	80032d0 <skiptorn+0x5a>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3301      	adds	r3, #1
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b0a      	cmp	r3, #10
 80032ca:	d001      	beq.n	80032d0 <skiptorn+0x5a>
 80032cc:	2300      	movs	r3, #0
 80032ce:	e017      	b.n	8003300 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d206      	bcs.n	80032e6 <skiptorn+0x70>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b0d      	cmp	r3, #13
 80032de:	d102      	bne.n	80032e6 <skiptorn+0x70>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3301      	adds	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d205      	bcs.n	80032fa <skiptorn+0x84>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	60fa      	str	r2, [r7, #12]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b0a      	cmp	r3, #10
 80032f8:	d001      	beq.n	80032fe <skiptorn+0x88>
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <skiptorn+0x8a>
  return s;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e083      	b.n	8003428 <mg_http_parse_headers+0x11c>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d301      	bcc.n	800333c <mg_http_parse_headers+0x30>
 8003338:	2300      	movs	r3, #0
 800333a:	e07b      	b.n	8003434 <mg_http_parse_headers+0x128>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b0a      	cmp	r3, #10
 8003342:	d076      	beq.n	8003432 <mg_http_parse_headers+0x126>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b0d      	cmp	r3, #13
 800334a:	d104      	bne.n	8003356 <mg_http_parse_headers+0x4a>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b0a      	cmp	r3, #10
 8003354:	d06d      	beq.n	8003432 <mg_http_parse_headers+0x126>
    k.ptr = s;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s)) > 0) s += n, k.len += n;
 800335a:	e007      	b.n	800336c <mg_http_parse_headers+0x60>
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	4413      	add	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	4413      	add	r3, r2
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	429a      	cmp	r2, r3
 8003372:	d20a      	bcs.n	800338a <mg_http_parse_headers+0x7e>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b3a      	cmp	r3, #58	; 0x3a
 800337a:	d006      	beq.n	800338a <mg_http_parse_headers+0x7e>
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff ff4f 	bl	8003220 <clen>
 8003382:	6238      	str	r0, [r7, #32]
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e8      	bne.n	800335c <mg_http_parse_headers+0x50>
    if (k.len == 0) return false;               // Empty name
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <mg_http_parse_headers+0x88>
 8003390:	2300      	movs	r3, #0
 8003392:	e04f      	b.n	8003434 <mg_http_parse_headers+0x128>
    if (s >= end || *s++ != ':') return false;  // Invalid, not followed by :
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	429a      	cmp	r2, r3
 800339a:	d205      	bcs.n	80033a8 <mg_http_parse_headers+0x9c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	60fa      	str	r2, [r7, #12]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b3a      	cmp	r3, #58	; 0x3a
 80033a6:	d004      	beq.n	80033b2 <mg_http_parse_headers+0xa6>
 80033a8:	2300      	movs	r3, #0
 80033aa:	e043      	b.n	8003434 <mg_http_parse_headers+0x128>
    while (s < end && s[0] == ' ') s++;         // Skip spaces
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d203      	bcs.n	80033c2 <mg_http_parse_headers+0xb6>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d0f4      	beq.n	80033ac <mg_http_parse_headers+0xa0>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 80033c2:	f107 0310 	add.w	r3, r7, #16
 80033c6:	461a      	mov	r2, r3
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff ff53 	bl	8003276 <skiptorn>
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <mg_http_parse_headers+0xd6>
 80033d8:	2300      	movs	r3, #0
 80033da:	e02b      	b.n	8003434 <mg_http_parse_headers+0x128>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	3b01      	subs	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <mg_http_parse_headers+0xea>
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d0f2      	beq.n	80033dc <mg_http_parse_headers+0xd0>
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	461a      	mov	r2, r3
 8003400:	f107 0318 	add.w	r3, r7, #24
 8003404:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003408:	e882 0003 	stmia.w	r2, {r0, r1}
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	3308      	adds	r3, #8
 8003416:	f107 0210 	add.w	r2, r7, #16
 800341a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341e:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	3301      	adds	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	f4ff af77 	bcc.w	8003320 <mg_http_parse_headers+0x14>
  }
  return true;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff fe5a 	bl	8003104 <mg_http_get_request_len>
 8003450:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <mg_http_parse+0x24>
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	e000      	b.n	8003462 <mg_http_parse+0x26>
 8003460:	2300      	movs	r3, #0
 8003462:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8003464:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003468:	2100      	movs	r1, #0
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f00e f9c5 	bl	80117fa <memset>
  if (req_len <= 0) return req_len;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	dc01      	bgt.n	800347a <mg_http_parse+0x3e>
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	e120      	b.n	80036bc <mg_http_parse+0x280>

  hm->message.ptr = hm->head.ptr = s;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a3a      	ldr	r2, [r7, #32]
 8003492:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  hm->method.ptr = s;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s)) > 0) s += n, hm->method.len += n;
 80034c2:	e009      	b.n	80034d8 <mg_http_parse+0x9c>
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	441a      	add	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d20a      	bcs.n	80034f6 <mg_http_parse+0xba>
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fe9d 	bl	8003220 <clen>
 80034e6:	61f8      	str	r0, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ea      	bne.n	80034c4 <mg_http_parse+0x88>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80034ee:	e002      	b.n	80034f6 <mg_http_parse+0xba>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d203      	bcs.n	8003506 <mg_http_parse+0xca>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b20      	cmp	r3, #32
 8003504:	d0f4      	beq.n	80034f0 <mg_http_parse+0xb4>
  hm->uri.ptr = s;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s)) > 0) s += n, hm->uri.len += n;
 800350c:	e009      	b.n	8003522 <mg_http_parse+0xe6>
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	429a      	cmp	r2, r3
 8003528:	d20a      	bcs.n	8003540 <mg_http_parse+0x104>
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fe78 	bl	8003220 <clen>
 8003530:	61f8      	str	r0, [r7, #28]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ea      	bne.n	800350e <mg_http_parse+0xd2>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8003538:	e002      	b.n	8003540 <mg_http_parse+0x104>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3301      	adds	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	429a      	cmp	r2, r3
 8003546:	d203      	bcs.n	8003550 <mg_http_parse+0x114>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b20      	cmp	r3, #32
 800354e:	d0f4      	beq.n	800353a <mg_http_parse+0xfe>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3318      	adds	r3, #24
 8003554:	461a      	mov	r2, r3
 8003556:	6a39      	ldr	r1, [r7, #32]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff fe8c 	bl	8003276 <skiptorn>
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <mg_http_parse+0x12e>
 8003566:	2300      	movs	r3, #0
 8003568:	e0a8      	b.n	80036bc <mg_http_parse+0x280>

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <mg_http_parse+0x13e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <mg_http_parse+0x144>
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e09d      	b.n	80036bc <mg_http_parse+0x280>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6898      	ldr	r0, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	461a      	mov	r2, r3
 800358a:	213f      	movs	r1, #63	; 0x3f
 800358c:	f7fc fe50 	bl	8000230 <memchr>
 8003590:	61b8      	str	r0, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d015      	beq.n	80035c4 <mg_http_parse+0x188>
    hm->query.ptr = qs + 1;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	441a      	add	r2, r3
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	3301      	adds	r3, #1
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f103 0220 	add.w	r2, r3, #32
 80035ca:	231e      	movs	r3, #30
 80035cc:	6a39      	ldr	r1, [r7, #32]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff fe9c 	bl	800330c <mg_http_parse_headers>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f083 0301 	eor.w	r3, r3, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <mg_http_parse+0x1aa>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	e06a      	b.n	80036bc <mg_http_parse+0x280>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80035e6:	4937      	ldr	r1, [pc, #220]	; (80036c4 <mg_http_parse+0x288>)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fdd9 	bl	80031a0 <mg_http_get_header>
 80035ee:	6178      	str	r0, [r7, #20]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <mg_http_parse+0x1ec>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f503 7201 	add.w	r2, r3, #516	; 0x204
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003602:	f7ff fc31 	bl	8002e68 <mg_to_size_t>
 8003606:	4603      	mov	r3, r0
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <mg_http_parse+0x1dc>
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	e051      	b.n	80036bc <mg_http_parse+0x280>
    hm->message.len = (size_t) req_len + hm->body.len;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2205      	movs	r2, #5
 800362e:	4926      	ldr	r1, [pc, #152]	; (80036c8 <mg_http_parse+0x28c>)
 8003630:	4618      	mov	r0, r3
 8003632:	f003 fd59 	bl	80070e8 <mg_ncasecmp>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	613b      	str	r3, [r7, #16]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d11a      	bne.n	8003686 <mg_http_parse+0x24a>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d117      	bne.n	8003686 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	491c      	ldr	r1, [pc, #112]	; (80036cc <mg_http_parse+0x290>)
 800365a:	4618      	mov	r0, r3
 800365c:	f003 fd96 	bl	800718c <mg_vcasecmp>
 8003660:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00f      	beq.n	8003686 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4919      	ldr	r1, [pc, #100]	; (80036d0 <mg_http_parse+0x294>)
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fd8e 	bl	800718c <mg_vcasecmp>
 8003670:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <mg_http_parse+0x24a>
    hm->body.len = 0;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d113      	bne.n	80036ba <mg_http_parse+0x27e>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <mg_http_parse+0x27e>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3308      	adds	r3, #8
 800369c:	490d      	ldr	r1, [pc, #52]	; (80036d4 <mg_http_parse+0x298>)
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fd74 	bl	800718c <mg_vcasecmp>
 80036a4:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <mg_http_parse+0x27e>
    hm->body.len = 0;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	08012804 	.word	0x08012804
 80036c8:	08012814 	.word	0x08012814
 80036cc:	0801281c 	.word	0x0801281c
 80036d0:	08012820 	.word	0x08012820
 80036d4:	08012828 	.word	0x08012828

080036d8 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b64      	subs	r3, #100	; 0x64
 80036e4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80036e8:	4293      	cmp	r3, r2
 80036ea:	f200 8469 	bhi.w	8003fc0 <mg_http_status_code_str+0x8e8>
 80036ee:	a101      	add	r1, pc, #4	; (adr r1, 80036f4 <mg_http_status_code_str+0x1c>)
 80036f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036f4:	08003ec5 	.word	0x08003ec5
 80036f8:	08003ec9 	.word	0x08003ec9
 80036fc:	08003ecd 	.word	0x08003ecd
 8003700:	08003fc1 	.word	0x08003fc1
 8003704:	08003fc1 	.word	0x08003fc1
 8003708:	08003fc1 	.word	0x08003fc1
 800370c:	08003fc1 	.word	0x08003fc1
 8003710:	08003fc1 	.word	0x08003fc1
 8003714:	08003fc1 	.word	0x08003fc1
 8003718:	08003fc1 	.word	0x08003fc1
 800371c:	08003fc1 	.word	0x08003fc1
 8003720:	08003fc1 	.word	0x08003fc1
 8003724:	08003fc1 	.word	0x08003fc1
 8003728:	08003fc1 	.word	0x08003fc1
 800372c:	08003fc1 	.word	0x08003fc1
 8003730:	08003fc1 	.word	0x08003fc1
 8003734:	08003fc1 	.word	0x08003fc1
 8003738:	08003fc1 	.word	0x08003fc1
 800373c:	08003fc1 	.word	0x08003fc1
 8003740:	08003fc1 	.word	0x08003fc1
 8003744:	08003fc1 	.word	0x08003fc1
 8003748:	08003fc1 	.word	0x08003fc1
 800374c:	08003fc1 	.word	0x08003fc1
 8003750:	08003fc1 	.word	0x08003fc1
 8003754:	08003fc1 	.word	0x08003fc1
 8003758:	08003fc1 	.word	0x08003fc1
 800375c:	08003fc1 	.word	0x08003fc1
 8003760:	08003fc1 	.word	0x08003fc1
 8003764:	08003fc1 	.word	0x08003fc1
 8003768:	08003fc1 	.word	0x08003fc1
 800376c:	08003fc1 	.word	0x08003fc1
 8003770:	08003fc1 	.word	0x08003fc1
 8003774:	08003fc1 	.word	0x08003fc1
 8003778:	08003fc1 	.word	0x08003fc1
 800377c:	08003fc1 	.word	0x08003fc1
 8003780:	08003fc1 	.word	0x08003fc1
 8003784:	08003fc1 	.word	0x08003fc1
 8003788:	08003fc1 	.word	0x08003fc1
 800378c:	08003fc1 	.word	0x08003fc1
 8003790:	08003fc1 	.word	0x08003fc1
 8003794:	08003fc1 	.word	0x08003fc1
 8003798:	08003fc1 	.word	0x08003fc1
 800379c:	08003fc1 	.word	0x08003fc1
 80037a0:	08003fc1 	.word	0x08003fc1
 80037a4:	08003fc1 	.word	0x08003fc1
 80037a8:	08003fc1 	.word	0x08003fc1
 80037ac:	08003fc1 	.word	0x08003fc1
 80037b0:	08003fc1 	.word	0x08003fc1
 80037b4:	08003fc1 	.word	0x08003fc1
 80037b8:	08003fc1 	.word	0x08003fc1
 80037bc:	08003fc1 	.word	0x08003fc1
 80037c0:	08003fc1 	.word	0x08003fc1
 80037c4:	08003fc1 	.word	0x08003fc1
 80037c8:	08003fc1 	.word	0x08003fc1
 80037cc:	08003fc1 	.word	0x08003fc1
 80037d0:	08003fc1 	.word	0x08003fc1
 80037d4:	08003fc1 	.word	0x08003fc1
 80037d8:	08003fc1 	.word	0x08003fc1
 80037dc:	08003fc1 	.word	0x08003fc1
 80037e0:	08003fc1 	.word	0x08003fc1
 80037e4:	08003fc1 	.word	0x08003fc1
 80037e8:	08003fc1 	.word	0x08003fc1
 80037ec:	08003fc1 	.word	0x08003fc1
 80037f0:	08003fc1 	.word	0x08003fc1
 80037f4:	08003fc1 	.word	0x08003fc1
 80037f8:	08003fc1 	.word	0x08003fc1
 80037fc:	08003fc1 	.word	0x08003fc1
 8003800:	08003fc1 	.word	0x08003fc1
 8003804:	08003fc1 	.word	0x08003fc1
 8003808:	08003fc1 	.word	0x08003fc1
 800380c:	08003fc1 	.word	0x08003fc1
 8003810:	08003fc1 	.word	0x08003fc1
 8003814:	08003fc1 	.word	0x08003fc1
 8003818:	08003fc1 	.word	0x08003fc1
 800381c:	08003fc1 	.word	0x08003fc1
 8003820:	08003fc1 	.word	0x08003fc1
 8003824:	08003fc1 	.word	0x08003fc1
 8003828:	08003fc1 	.word	0x08003fc1
 800382c:	08003fc1 	.word	0x08003fc1
 8003830:	08003fc1 	.word	0x08003fc1
 8003834:	08003fc1 	.word	0x08003fc1
 8003838:	08003fc1 	.word	0x08003fc1
 800383c:	08003fc1 	.word	0x08003fc1
 8003840:	08003fc1 	.word	0x08003fc1
 8003844:	08003fc1 	.word	0x08003fc1
 8003848:	08003fc1 	.word	0x08003fc1
 800384c:	08003fc1 	.word	0x08003fc1
 8003850:	08003fc1 	.word	0x08003fc1
 8003854:	08003fc1 	.word	0x08003fc1
 8003858:	08003fc1 	.word	0x08003fc1
 800385c:	08003fc1 	.word	0x08003fc1
 8003860:	08003fc1 	.word	0x08003fc1
 8003864:	08003fc1 	.word	0x08003fc1
 8003868:	08003fc1 	.word	0x08003fc1
 800386c:	08003fc1 	.word	0x08003fc1
 8003870:	08003fc1 	.word	0x08003fc1
 8003874:	08003fc1 	.word	0x08003fc1
 8003878:	08003fc1 	.word	0x08003fc1
 800387c:	08003fc1 	.word	0x08003fc1
 8003880:	08003fc1 	.word	0x08003fc1
 8003884:	08003ed1 	.word	0x08003ed1
 8003888:	08003ed5 	.word	0x08003ed5
 800388c:	08003ed9 	.word	0x08003ed9
 8003890:	08003edd 	.word	0x08003edd
 8003894:	08003ee1 	.word	0x08003ee1
 8003898:	08003ee5 	.word	0x08003ee5
 800389c:	08003ee9 	.word	0x08003ee9
 80038a0:	08003eed 	.word	0x08003eed
 80038a4:	08003ef1 	.word	0x08003ef1
 80038a8:	08003fc1 	.word	0x08003fc1
 80038ac:	08003fc1 	.word	0x08003fc1
 80038b0:	08003fc1 	.word	0x08003fc1
 80038b4:	08003fc1 	.word	0x08003fc1
 80038b8:	08003fc1 	.word	0x08003fc1
 80038bc:	08003fc1 	.word	0x08003fc1
 80038c0:	08003fc1 	.word	0x08003fc1
 80038c4:	08003fc1 	.word	0x08003fc1
 80038c8:	08003fc1 	.word	0x08003fc1
 80038cc:	08003fc1 	.word	0x08003fc1
 80038d0:	08003fc1 	.word	0x08003fc1
 80038d4:	08003fc1 	.word	0x08003fc1
 80038d8:	08003fc1 	.word	0x08003fc1
 80038dc:	08003fc1 	.word	0x08003fc1
 80038e0:	08003fc1 	.word	0x08003fc1
 80038e4:	08003fc1 	.word	0x08003fc1
 80038e8:	08003fc1 	.word	0x08003fc1
 80038ec:	08003ef5 	.word	0x08003ef5
 80038f0:	08003fc1 	.word	0x08003fc1
 80038f4:	08003fc1 	.word	0x08003fc1
 80038f8:	08003fc1 	.word	0x08003fc1
 80038fc:	08003fc1 	.word	0x08003fc1
 8003900:	08003fc1 	.word	0x08003fc1
 8003904:	08003fc1 	.word	0x08003fc1
 8003908:	08003fc1 	.word	0x08003fc1
 800390c:	08003fc1 	.word	0x08003fc1
 8003910:	08003fc1 	.word	0x08003fc1
 8003914:	08003fc1 	.word	0x08003fc1
 8003918:	08003fc1 	.word	0x08003fc1
 800391c:	08003fc1 	.word	0x08003fc1
 8003920:	08003fc1 	.word	0x08003fc1
 8003924:	08003fc1 	.word	0x08003fc1
 8003928:	08003fc1 	.word	0x08003fc1
 800392c:	08003fc1 	.word	0x08003fc1
 8003930:	08003fc1 	.word	0x08003fc1
 8003934:	08003fc1 	.word	0x08003fc1
 8003938:	08003fc1 	.word	0x08003fc1
 800393c:	08003fc1 	.word	0x08003fc1
 8003940:	08003fc1 	.word	0x08003fc1
 8003944:	08003fc1 	.word	0x08003fc1
 8003948:	08003fc1 	.word	0x08003fc1
 800394c:	08003fc1 	.word	0x08003fc1
 8003950:	08003fc1 	.word	0x08003fc1
 8003954:	08003fc1 	.word	0x08003fc1
 8003958:	08003fc1 	.word	0x08003fc1
 800395c:	08003fc1 	.word	0x08003fc1
 8003960:	08003fc1 	.word	0x08003fc1
 8003964:	08003fc1 	.word	0x08003fc1
 8003968:	08003fc1 	.word	0x08003fc1
 800396c:	08003fc1 	.word	0x08003fc1
 8003970:	08003fc1 	.word	0x08003fc1
 8003974:	08003fc1 	.word	0x08003fc1
 8003978:	08003fc1 	.word	0x08003fc1
 800397c:	08003fc1 	.word	0x08003fc1
 8003980:	08003fc1 	.word	0x08003fc1
 8003984:	08003fc1 	.word	0x08003fc1
 8003988:	08003fc1 	.word	0x08003fc1
 800398c:	08003fc1 	.word	0x08003fc1
 8003990:	08003fc1 	.word	0x08003fc1
 8003994:	08003fc1 	.word	0x08003fc1
 8003998:	08003fc1 	.word	0x08003fc1
 800399c:	08003fc1 	.word	0x08003fc1
 80039a0:	08003fc1 	.word	0x08003fc1
 80039a4:	08003fc1 	.word	0x08003fc1
 80039a8:	08003fc1 	.word	0x08003fc1
 80039ac:	08003fc1 	.word	0x08003fc1
 80039b0:	08003fc1 	.word	0x08003fc1
 80039b4:	08003fc1 	.word	0x08003fc1
 80039b8:	08003fc1 	.word	0x08003fc1
 80039bc:	08003fc1 	.word	0x08003fc1
 80039c0:	08003fc1 	.word	0x08003fc1
 80039c4:	08003fc1 	.word	0x08003fc1
 80039c8:	08003fc1 	.word	0x08003fc1
 80039cc:	08003fc1 	.word	0x08003fc1
 80039d0:	08003fc1 	.word	0x08003fc1
 80039d4:	08003fc1 	.word	0x08003fc1
 80039d8:	08003fc1 	.word	0x08003fc1
 80039dc:	08003fc1 	.word	0x08003fc1
 80039e0:	08003fc1 	.word	0x08003fc1
 80039e4:	08003fc1 	.word	0x08003fc1
 80039e8:	08003fc1 	.word	0x08003fc1
 80039ec:	08003fc1 	.word	0x08003fc1
 80039f0:	08003fc1 	.word	0x08003fc1
 80039f4:	08003fc1 	.word	0x08003fc1
 80039f8:	08003fc1 	.word	0x08003fc1
 80039fc:	08003fc1 	.word	0x08003fc1
 8003a00:	08003fc1 	.word	0x08003fc1
 8003a04:	08003fc1 	.word	0x08003fc1
 8003a08:	08003fc1 	.word	0x08003fc1
 8003a0c:	08003fc1 	.word	0x08003fc1
 8003a10:	08003fc1 	.word	0x08003fc1
 8003a14:	08003ef9 	.word	0x08003ef9
 8003a18:	08003efd 	.word	0x08003efd
 8003a1c:	08003f01 	.word	0x08003f01
 8003a20:	08003f05 	.word	0x08003f05
 8003a24:	08003f09 	.word	0x08003f09
 8003a28:	08003f0d 	.word	0x08003f0d
 8003a2c:	08003fc1 	.word	0x08003fc1
 8003a30:	08003f11 	.word	0x08003f11
 8003a34:	08003f15 	.word	0x08003f15
 8003a38:	08003fc1 	.word	0x08003fc1
 8003a3c:	08003fc1 	.word	0x08003fc1
 8003a40:	08003fc1 	.word	0x08003fc1
 8003a44:	08003fc1 	.word	0x08003fc1
 8003a48:	08003fc1 	.word	0x08003fc1
 8003a4c:	08003fc1 	.word	0x08003fc1
 8003a50:	08003fc1 	.word	0x08003fc1
 8003a54:	08003fc1 	.word	0x08003fc1
 8003a58:	08003fc1 	.word	0x08003fc1
 8003a5c:	08003fc1 	.word	0x08003fc1
 8003a60:	08003fc1 	.word	0x08003fc1
 8003a64:	08003fc1 	.word	0x08003fc1
 8003a68:	08003fc1 	.word	0x08003fc1
 8003a6c:	08003fc1 	.word	0x08003fc1
 8003a70:	08003fc1 	.word	0x08003fc1
 8003a74:	08003fc1 	.word	0x08003fc1
 8003a78:	08003fc1 	.word	0x08003fc1
 8003a7c:	08003fc1 	.word	0x08003fc1
 8003a80:	08003fc1 	.word	0x08003fc1
 8003a84:	08003fc1 	.word	0x08003fc1
 8003a88:	08003fc1 	.word	0x08003fc1
 8003a8c:	08003fc1 	.word	0x08003fc1
 8003a90:	08003fc1 	.word	0x08003fc1
 8003a94:	08003fc1 	.word	0x08003fc1
 8003a98:	08003fc1 	.word	0x08003fc1
 8003a9c:	08003fc1 	.word	0x08003fc1
 8003aa0:	08003fc1 	.word	0x08003fc1
 8003aa4:	08003fc1 	.word	0x08003fc1
 8003aa8:	08003fc1 	.word	0x08003fc1
 8003aac:	08003fc1 	.word	0x08003fc1
 8003ab0:	08003fc1 	.word	0x08003fc1
 8003ab4:	08003fc1 	.word	0x08003fc1
 8003ab8:	08003fc1 	.word	0x08003fc1
 8003abc:	08003fc1 	.word	0x08003fc1
 8003ac0:	08003fc1 	.word	0x08003fc1
 8003ac4:	08003fc1 	.word	0x08003fc1
 8003ac8:	08003fc1 	.word	0x08003fc1
 8003acc:	08003fc1 	.word	0x08003fc1
 8003ad0:	08003fc1 	.word	0x08003fc1
 8003ad4:	08003fc1 	.word	0x08003fc1
 8003ad8:	08003fc1 	.word	0x08003fc1
 8003adc:	08003fc1 	.word	0x08003fc1
 8003ae0:	08003fc1 	.word	0x08003fc1
 8003ae4:	08003fc1 	.word	0x08003fc1
 8003ae8:	08003fc1 	.word	0x08003fc1
 8003aec:	08003fc1 	.word	0x08003fc1
 8003af0:	08003fc1 	.word	0x08003fc1
 8003af4:	08003fc1 	.word	0x08003fc1
 8003af8:	08003fc1 	.word	0x08003fc1
 8003afc:	08003fc1 	.word	0x08003fc1
 8003b00:	08003fc1 	.word	0x08003fc1
 8003b04:	08003fc1 	.word	0x08003fc1
 8003b08:	08003fc1 	.word	0x08003fc1
 8003b0c:	08003fc1 	.word	0x08003fc1
 8003b10:	08003fc1 	.word	0x08003fc1
 8003b14:	08003fc1 	.word	0x08003fc1
 8003b18:	08003fc1 	.word	0x08003fc1
 8003b1c:	08003fc1 	.word	0x08003fc1
 8003b20:	08003fc1 	.word	0x08003fc1
 8003b24:	08003fc1 	.word	0x08003fc1
 8003b28:	08003fc1 	.word	0x08003fc1
 8003b2c:	08003fc1 	.word	0x08003fc1
 8003b30:	08003fc1 	.word	0x08003fc1
 8003b34:	08003fc1 	.word	0x08003fc1
 8003b38:	08003fc1 	.word	0x08003fc1
 8003b3c:	08003fc1 	.word	0x08003fc1
 8003b40:	08003fc1 	.word	0x08003fc1
 8003b44:	08003fc1 	.word	0x08003fc1
 8003b48:	08003fc1 	.word	0x08003fc1
 8003b4c:	08003fc1 	.word	0x08003fc1
 8003b50:	08003fc1 	.word	0x08003fc1
 8003b54:	08003fc1 	.word	0x08003fc1
 8003b58:	08003fc1 	.word	0x08003fc1
 8003b5c:	08003fc1 	.word	0x08003fc1
 8003b60:	08003fc1 	.word	0x08003fc1
 8003b64:	08003fc1 	.word	0x08003fc1
 8003b68:	08003fc1 	.word	0x08003fc1
 8003b6c:	08003fc1 	.word	0x08003fc1
 8003b70:	08003fc1 	.word	0x08003fc1
 8003b74:	08003fc1 	.word	0x08003fc1
 8003b78:	08003fc1 	.word	0x08003fc1
 8003b7c:	08003fc1 	.word	0x08003fc1
 8003b80:	08003fc1 	.word	0x08003fc1
 8003b84:	08003fc1 	.word	0x08003fc1
 8003b88:	08003fc1 	.word	0x08003fc1
 8003b8c:	08003fc1 	.word	0x08003fc1
 8003b90:	08003fc1 	.word	0x08003fc1
 8003b94:	08003fc1 	.word	0x08003fc1
 8003b98:	08003fc1 	.word	0x08003fc1
 8003b9c:	08003fc1 	.word	0x08003fc1
 8003ba0:	08003fc1 	.word	0x08003fc1
 8003ba4:	08003f19 	.word	0x08003f19
 8003ba8:	08003f1d 	.word	0x08003f1d
 8003bac:	08003f21 	.word	0x08003f21
 8003bb0:	08003f25 	.word	0x08003f25
 8003bb4:	08003f29 	.word	0x08003f29
 8003bb8:	08003f2d 	.word	0x08003f2d
 8003bbc:	08003f31 	.word	0x08003f31
 8003bc0:	08003f35 	.word	0x08003f35
 8003bc4:	08003f39 	.word	0x08003f39
 8003bc8:	08003f3d 	.word	0x08003f3d
 8003bcc:	08003f41 	.word	0x08003f41
 8003bd0:	08003f45 	.word	0x08003f45
 8003bd4:	08003f49 	.word	0x08003f49
 8003bd8:	08003f4d 	.word	0x08003f4d
 8003bdc:	08003f51 	.word	0x08003f51
 8003be0:	08003f55 	.word	0x08003f55
 8003be4:	08003f59 	.word	0x08003f59
 8003be8:	08003f5d 	.word	0x08003f5d
 8003bec:	08003f61 	.word	0x08003f61
 8003bf0:	08003fc1 	.word	0x08003fc1
 8003bf4:	08003fc1 	.word	0x08003fc1
 8003bf8:	08003f65 	.word	0x08003f65
 8003bfc:	08003f69 	.word	0x08003f69
 8003c00:	08003f6d 	.word	0x08003f6d
 8003c04:	08003f71 	.word	0x08003f71
 8003c08:	08003fc1 	.word	0x08003fc1
 8003c0c:	08003f75 	.word	0x08003f75
 8003c10:	08003fc1 	.word	0x08003fc1
 8003c14:	08003f79 	.word	0x08003f79
 8003c18:	08003f7d 	.word	0x08003f7d
 8003c1c:	08003fc1 	.word	0x08003fc1
 8003c20:	08003f81 	.word	0x08003f81
 8003c24:	08003fc1 	.word	0x08003fc1
 8003c28:	08003fc1 	.word	0x08003fc1
 8003c2c:	08003fc1 	.word	0x08003fc1
 8003c30:	08003fc1 	.word	0x08003fc1
 8003c34:	08003fc1 	.word	0x08003fc1
 8003c38:	08003fc1 	.word	0x08003fc1
 8003c3c:	08003fc1 	.word	0x08003fc1
 8003c40:	08003fc1 	.word	0x08003fc1
 8003c44:	08003fc1 	.word	0x08003fc1
 8003c48:	08003fc1 	.word	0x08003fc1
 8003c4c:	08003fc1 	.word	0x08003fc1
 8003c50:	08003fc1 	.word	0x08003fc1
 8003c54:	08003f85 	.word	0x08003f85
 8003c58:	08003fc1 	.word	0x08003fc1
 8003c5c:	08003fc1 	.word	0x08003fc1
 8003c60:	08003fc1 	.word	0x08003fc1
 8003c64:	08003fc1 	.word	0x08003fc1
 8003c68:	08003fc1 	.word	0x08003fc1
 8003c6c:	08003fc1 	.word	0x08003fc1
 8003c70:	08003f89 	.word	0x08003f89
 8003c74:	08003fc1 	.word	0x08003fc1
 8003c78:	08003fc1 	.word	0x08003fc1
 8003c7c:	08003fc1 	.word	0x08003fc1
 8003c80:	08003fc1 	.word	0x08003fc1
 8003c84:	08003fc1 	.word	0x08003fc1
 8003c88:	08003fc1 	.word	0x08003fc1
 8003c8c:	08003fc1 	.word	0x08003fc1
 8003c90:	08003fc1 	.word	0x08003fc1
 8003c94:	08003fc1 	.word	0x08003fc1
 8003c98:	08003fc1 	.word	0x08003fc1
 8003c9c:	08003fc1 	.word	0x08003fc1
 8003ca0:	08003fc1 	.word	0x08003fc1
 8003ca4:	08003fc1 	.word	0x08003fc1
 8003ca8:	08003fc1 	.word	0x08003fc1
 8003cac:	08003fc1 	.word	0x08003fc1
 8003cb0:	08003fc1 	.word	0x08003fc1
 8003cb4:	08003fc1 	.word	0x08003fc1
 8003cb8:	08003fc1 	.word	0x08003fc1
 8003cbc:	08003fc1 	.word	0x08003fc1
 8003cc0:	08003fc1 	.word	0x08003fc1
 8003cc4:	08003fc1 	.word	0x08003fc1
 8003cc8:	08003fc1 	.word	0x08003fc1
 8003ccc:	08003fc1 	.word	0x08003fc1
 8003cd0:	08003fc1 	.word	0x08003fc1
 8003cd4:	08003fc1 	.word	0x08003fc1
 8003cd8:	08003fc1 	.word	0x08003fc1
 8003cdc:	08003fc1 	.word	0x08003fc1
 8003ce0:	08003fc1 	.word	0x08003fc1
 8003ce4:	08003fc1 	.word	0x08003fc1
 8003ce8:	08003fc1 	.word	0x08003fc1
 8003cec:	08003fc1 	.word	0x08003fc1
 8003cf0:	08003fc1 	.word	0x08003fc1
 8003cf4:	08003fc1 	.word	0x08003fc1
 8003cf8:	08003fc1 	.word	0x08003fc1
 8003cfc:	08003fc1 	.word	0x08003fc1
 8003d00:	08003fc1 	.word	0x08003fc1
 8003d04:	08003fc1 	.word	0x08003fc1
 8003d08:	08003fc1 	.word	0x08003fc1
 8003d0c:	08003fc1 	.word	0x08003fc1
 8003d10:	08003fc1 	.word	0x08003fc1
 8003d14:	08003fc1 	.word	0x08003fc1
 8003d18:	08003fc1 	.word	0x08003fc1
 8003d1c:	08003fc1 	.word	0x08003fc1
 8003d20:	08003fc1 	.word	0x08003fc1
 8003d24:	08003fc1 	.word	0x08003fc1
 8003d28:	08003fc1 	.word	0x08003fc1
 8003d2c:	08003fc1 	.word	0x08003fc1
 8003d30:	08003f8d 	.word	0x08003f8d
 8003d34:	08003f91 	.word	0x08003f91
 8003d38:	08003f95 	.word	0x08003f95
 8003d3c:	08003f99 	.word	0x08003f99
 8003d40:	08003f9d 	.word	0x08003f9d
 8003d44:	08003fa1 	.word	0x08003fa1
 8003d48:	08003fa5 	.word	0x08003fa5
 8003d4c:	08003fa9 	.word	0x08003fa9
 8003d50:	08003fad 	.word	0x08003fad
 8003d54:	08003fb1 	.word	0x08003fb1
 8003d58:	08003fc1 	.word	0x08003fc1
 8003d5c:	08003fb5 	.word	0x08003fb5
 8003d60:	08003fb9 	.word	0x08003fb9
 8003d64:	08003fc1 	.word	0x08003fc1
 8003d68:	08003fc1 	.word	0x08003fc1
 8003d6c:	08003fc1 	.word	0x08003fc1
 8003d70:	08003fc1 	.word	0x08003fc1
 8003d74:	08003fc1 	.word	0x08003fc1
 8003d78:	08003fc1 	.word	0x08003fc1
 8003d7c:	08003fc1 	.word	0x08003fc1
 8003d80:	08003fc1 	.word	0x08003fc1
 8003d84:	08003fc1 	.word	0x08003fc1
 8003d88:	08003fc1 	.word	0x08003fc1
 8003d8c:	08003fc1 	.word	0x08003fc1
 8003d90:	08003fc1 	.word	0x08003fc1
 8003d94:	08003fc1 	.word	0x08003fc1
 8003d98:	08003fc1 	.word	0x08003fc1
 8003d9c:	08003fc1 	.word	0x08003fc1
 8003da0:	08003fc1 	.word	0x08003fc1
 8003da4:	08003fc1 	.word	0x08003fc1
 8003da8:	08003fc1 	.word	0x08003fc1
 8003dac:	08003fc1 	.word	0x08003fc1
 8003db0:	08003fc1 	.word	0x08003fc1
 8003db4:	08003fc1 	.word	0x08003fc1
 8003db8:	08003fc1 	.word	0x08003fc1
 8003dbc:	08003fc1 	.word	0x08003fc1
 8003dc0:	08003fc1 	.word	0x08003fc1
 8003dc4:	08003fc1 	.word	0x08003fc1
 8003dc8:	08003fc1 	.word	0x08003fc1
 8003dcc:	08003fc1 	.word	0x08003fc1
 8003dd0:	08003fc1 	.word	0x08003fc1
 8003dd4:	08003fc1 	.word	0x08003fc1
 8003dd8:	08003fc1 	.word	0x08003fc1
 8003ddc:	08003fc1 	.word	0x08003fc1
 8003de0:	08003fc1 	.word	0x08003fc1
 8003de4:	08003fc1 	.word	0x08003fc1
 8003de8:	08003fc1 	.word	0x08003fc1
 8003dec:	08003fc1 	.word	0x08003fc1
 8003df0:	08003fc1 	.word	0x08003fc1
 8003df4:	08003fc1 	.word	0x08003fc1
 8003df8:	08003fc1 	.word	0x08003fc1
 8003dfc:	08003fc1 	.word	0x08003fc1
 8003e00:	08003fc1 	.word	0x08003fc1
 8003e04:	08003fc1 	.word	0x08003fc1
 8003e08:	08003fc1 	.word	0x08003fc1
 8003e0c:	08003fc1 	.word	0x08003fc1
 8003e10:	08003fc1 	.word	0x08003fc1
 8003e14:	08003fc1 	.word	0x08003fc1
 8003e18:	08003fc1 	.word	0x08003fc1
 8003e1c:	08003fc1 	.word	0x08003fc1
 8003e20:	08003fc1 	.word	0x08003fc1
 8003e24:	08003fc1 	.word	0x08003fc1
 8003e28:	08003fc1 	.word	0x08003fc1
 8003e2c:	08003fc1 	.word	0x08003fc1
 8003e30:	08003fc1 	.word	0x08003fc1
 8003e34:	08003fc1 	.word	0x08003fc1
 8003e38:	08003fc1 	.word	0x08003fc1
 8003e3c:	08003fc1 	.word	0x08003fc1
 8003e40:	08003fc1 	.word	0x08003fc1
 8003e44:	08003fc1 	.word	0x08003fc1
 8003e48:	08003fc1 	.word	0x08003fc1
 8003e4c:	08003fc1 	.word	0x08003fc1
 8003e50:	08003fc1 	.word	0x08003fc1
 8003e54:	08003fc1 	.word	0x08003fc1
 8003e58:	08003fc1 	.word	0x08003fc1
 8003e5c:	08003fc1 	.word	0x08003fc1
 8003e60:	08003fc1 	.word	0x08003fc1
 8003e64:	08003fc1 	.word	0x08003fc1
 8003e68:	08003fc1 	.word	0x08003fc1
 8003e6c:	08003fc1 	.word	0x08003fc1
 8003e70:	08003fc1 	.word	0x08003fc1
 8003e74:	08003fc1 	.word	0x08003fc1
 8003e78:	08003fc1 	.word	0x08003fc1
 8003e7c:	08003fc1 	.word	0x08003fc1
 8003e80:	08003fc1 	.word	0x08003fc1
 8003e84:	08003fc1 	.word	0x08003fc1
 8003e88:	08003fc1 	.word	0x08003fc1
 8003e8c:	08003fc1 	.word	0x08003fc1
 8003e90:	08003fc1 	.word	0x08003fc1
 8003e94:	08003fc1 	.word	0x08003fc1
 8003e98:	08003fc1 	.word	0x08003fc1
 8003e9c:	08003fc1 	.word	0x08003fc1
 8003ea0:	08003fc1 	.word	0x08003fc1
 8003ea4:	08003fc1 	.word	0x08003fc1
 8003ea8:	08003fc1 	.word	0x08003fc1
 8003eac:	08003fc1 	.word	0x08003fc1
 8003eb0:	08003fc1 	.word	0x08003fc1
 8003eb4:	08003fc1 	.word	0x08003fc1
 8003eb8:	08003fc1 	.word	0x08003fc1
 8003ebc:	08003fc1 	.word	0x08003fc1
 8003ec0:	08003fbd 	.word	0x08003fbd
    case 100: return "Continue";
 8003ec4:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <mg_http_status_code_str+0x8f8>)
 8003ec6:	e07c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <mg_http_status_code_str+0x8fc>)
 8003eca:	e07a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8003ecc:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <mg_http_status_code_str+0x900>)
 8003ece:	e078      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <mg_http_status_code_str+0x904>)
 8003ed2:	e076      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <mg_http_status_code_str+0x908>)
 8003ed6:	e074      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <mg_http_status_code_str+0x90c>)
 8003eda:	e072      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8003edc:	4b42      	ldr	r3, [pc, #264]	; (8003fe8 <mg_http_status_code_str+0x910>)
 8003ede:	e070      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8003ee0:	4b42      	ldr	r3, [pc, #264]	; (8003fec <mg_http_status_code_str+0x914>)
 8003ee2:	e06e      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <mg_http_status_code_str+0x918>)
 8003ee6:	e06c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <mg_http_status_code_str+0x91c>)
 8003eea:	e06a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8003eec:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <mg_http_status_code_str+0x920>)
 8003eee:	e068      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <mg_http_status_code_str+0x924>)
 8003ef2:	e066      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <mg_http_status_code_str+0x928>)
 8003ef6:	e064      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8003ef8:	4b42      	ldr	r3, [pc, #264]	; (8004004 <mg_http_status_code_str+0x92c>)
 8003efa:	e062      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <mg_http_status_code_str+0x930>)
 8003efe:	e060      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8003f00:	4b42      	ldr	r3, [pc, #264]	; (800400c <mg_http_status_code_str+0x934>)
 8003f02:	e05e      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8003f04:	4b42      	ldr	r3, [pc, #264]	; (8004010 <mg_http_status_code_str+0x938>)
 8003f06:	e05c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <mg_http_status_code_str+0x93c>)
 8003f0a:	e05a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <mg_http_status_code_str+0x940>)
 8003f0e:	e058      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8003f10:	4b42      	ldr	r3, [pc, #264]	; (800401c <mg_http_status_code_str+0x944>)
 8003f12:	e056      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8003f14:	4b42      	ldr	r3, [pc, #264]	; (8004020 <mg_http_status_code_str+0x948>)
 8003f16:	e054      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <mg_http_status_code_str+0x94c>)
 8003f1a:	e052      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8003f1c:	4b42      	ldr	r3, [pc, #264]	; (8004028 <mg_http_status_code_str+0x950>)
 8003f1e:	e050      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8003f20:	4b42      	ldr	r3, [pc, #264]	; (800402c <mg_http_status_code_str+0x954>)
 8003f22:	e04e      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <mg_http_status_code_str+0x958>)
 8003f26:	e04c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <mg_http_status_code_str+0x95c>)
 8003f2a:	e04a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8003f2c:	4b42      	ldr	r3, [pc, #264]	; (8004038 <mg_http_status_code_str+0x960>)
 8003f2e:	e048      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8003f30:	4b42      	ldr	r3, [pc, #264]	; (800403c <mg_http_status_code_str+0x964>)
 8003f32:	e046      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8003f34:	4b42      	ldr	r3, [pc, #264]	; (8004040 <mg_http_status_code_str+0x968>)
 8003f36:	e044      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8003f38:	4b42      	ldr	r3, [pc, #264]	; (8004044 <mg_http_status_code_str+0x96c>)
 8003f3a:	e042      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8003f3c:	4b42      	ldr	r3, [pc, #264]	; (8004048 <mg_http_status_code_str+0x970>)
 8003f3e:	e040      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <mg_http_status_code_str+0x974>)
 8003f42:	e03e      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <mg_http_status_code_str+0x978>)
 8003f46:	e03c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8003f48:	4b42      	ldr	r3, [pc, #264]	; (8004054 <mg_http_status_code_str+0x97c>)
 8003f4a:	e03a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8003f4c:	4b42      	ldr	r3, [pc, #264]	; (8004058 <mg_http_status_code_str+0x980>)
 8003f4e:	e038      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <mg_http_status_code_str+0x984>)
 8003f52:	e036      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8003f54:	4b42      	ldr	r3, [pc, #264]	; (8004060 <mg_http_status_code_str+0x988>)
 8003f56:	e034      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <mg_http_status_code_str+0x98c>)
 8003f5a:	e032      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <mg_http_status_code_str+0x990>)
 8003f5e:	e030      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <mg_http_status_code_str+0x994>)
 8003f62:	e02e      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8003f64:	4b42      	ldr	r3, [pc, #264]	; (8004070 <mg_http_status_code_str+0x998>)
 8003f66:	e02c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <mg_http_status_code_str+0x99c>)
 8003f6a:	e02a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <mg_http_status_code_str+0x9a0>)
 8003f6e:	e028      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <mg_http_status_code_str+0x9a4>)
 8003f72:	e026      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8003f74:	4b42      	ldr	r3, [pc, #264]	; (8004080 <mg_http_status_code_str+0x9a8>)
 8003f76:	e024      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8003f78:	4b42      	ldr	r3, [pc, #264]	; (8004084 <mg_http_status_code_str+0x9ac>)
 8003f7a:	e022      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8003f7c:	4b42      	ldr	r3, [pc, #264]	; (8004088 <mg_http_status_code_str+0x9b0>)
 8003f7e:	e020      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8003f80:	4b42      	ldr	r3, [pc, #264]	; (800408c <mg_http_status_code_str+0x9b4>)
 8003f82:	e01e      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <mg_http_status_code_str+0x9b8>)
 8003f86:	e01c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <mg_http_status_code_str+0x9bc>)
 8003f8a:	e01a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8003f8c:	4b42      	ldr	r3, [pc, #264]	; (8004098 <mg_http_status_code_str+0x9c0>)
 8003f8e:	e018      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8003f90:	4b42      	ldr	r3, [pc, #264]	; (800409c <mg_http_status_code_str+0x9c4>)
 8003f92:	e016      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8003f94:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <mg_http_status_code_str+0x9c8>)
 8003f96:	e014      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8003f98:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <mg_http_status_code_str+0x9cc>)
 8003f9a:	e012      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8003f9c:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <mg_http_status_code_str+0x9d0>)
 8003f9e:	e010      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8003fa0:	4b42      	ldr	r3, [pc, #264]	; (80040ac <mg_http_status_code_str+0x9d4>)
 8003fa2:	e00e      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8003fa4:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <mg_http_status_code_str+0x9d8>)
 8003fa6:	e00c      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <mg_http_status_code_str+0x9dc>)
 8003faa:	e00a      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8003fac:	4b42      	ldr	r3, [pc, #264]	; (80040b8 <mg_http_status_code_str+0x9e0>)
 8003fae:	e008      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8003fb0:	4b42      	ldr	r3, [pc, #264]	; (80040bc <mg_http_status_code_str+0x9e4>)
 8003fb2:	e006      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8003fb4:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <mg_http_status_code_str+0x9e8>)
 8003fb6:	e004      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8003fb8:	4b42      	ldr	r3, [pc, #264]	; (80040c4 <mg_http_status_code_str+0x9ec>)
 8003fba:	e002      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <mg_http_status_code_str+0x9f0>)
 8003fbe:	e000      	b.n	8003fc2 <mg_http_status_code_str+0x8ea>
    default: return "";
 8003fc0:	4b42      	ldr	r3, [pc, #264]	; (80040cc <mg_http_status_code_str+0x9f4>)
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	08012848 	.word	0x08012848
 8003fd4:	08012854 	.word	0x08012854
 8003fd8:	08012868 	.word	0x08012868
 8003fdc:	08012874 	.word	0x08012874
 8003fe0:	08012878 	.word	0x08012878
 8003fe4:	08012880 	.word	0x08012880
 8003fe8:	0801288c 	.word	0x0801288c
 8003fec:	080128ac 	.word	0x080128ac
 8003ff0:	080128b8 	.word	0x080128b8
 8003ff4:	080128c8 	.word	0x080128c8
 8003ff8:	080128d8 	.word	0x080128d8
 8003ffc:	080128e8 	.word	0x080128e8
 8004000:	080128fc 	.word	0x080128fc
 8004004:	08012904 	.word	0x08012904
 8004008:	08012918 	.word	0x08012918
 800400c:	0801292c 	.word	0x0801292c
 8004010:	08012934 	.word	0x08012934
 8004014:	08012940 	.word	0x08012940
 8004018:	08012950 	.word	0x08012950
 800401c:	0801295c 	.word	0x0801295c
 8004020:	08012970 	.word	0x08012970
 8004024:	08012984 	.word	0x08012984
 8004028:	08012990 	.word	0x08012990
 800402c:	080129a0 	.word	0x080129a0
 8004030:	080129b4 	.word	0x080129b4
 8004034:	080129c0 	.word	0x080129c0
 8004038:	080129cc 	.word	0x080129cc
 800403c:	080129e0 	.word	0x080129e0
 8004040:	080129f0 	.word	0x080129f0
 8004044:	08012a10 	.word	0x08012a10
 8004048:	08012a20 	.word	0x08012a20
 800404c:	08012a2c 	.word	0x08012a2c
 8004050:	08012a34 	.word	0x08012a34
 8004054:	08012a44 	.word	0x08012a44
 8004058:	08012a58 	.word	0x08012a58
 800405c:	08012a6c 	.word	0x08012a6c
 8004060:	08012a84 	.word	0x08012a84
 8004064:	08012a9c 	.word	0x08012a9c
 8004068:	08012abc 	.word	0x08012abc
 800406c:	08012ad0 	.word	0x08012ad0
 8004070:	08012ae0 	.word	0x08012ae0
 8004074:	08012af4 	.word	0x08012af4
 8004078:	08012b0c 	.word	0x08012b0c
 800407c:	08012b14 	.word	0x08012b14
 8004080:	08012b28 	.word	0x08012b28
 8004084:	08012b3c 	.word	0x08012b3c
 8004088:	08012b54 	.word	0x08012b54
 800408c:	08012b68 	.word	0x08012b68
 8004090:	08012b88 	.word	0x08012b88
 8004094:	08012bac 	.word	0x08012bac
 8004098:	08012bcc 	.word	0x08012bcc
 800409c:	08012be4 	.word	0x08012be4
 80040a0:	08012bfc 	.word	0x08012bfc
 80040a4:	08012c0c 	.word	0x08012c0c
 80040a8:	08012c18 	.word	0x08012c18
 80040ac:	08012c2c 	.word	0x08012c2c
 80040b0:	08012c3c 	.word	0x08012c3c
 80040b4:	08012c58 	.word	0x08012c58
 80040b8:	08012c70 	.word	0x08012c70
 80040bc:	08012c88 	.word	0x08012c88
 80040c0:	08012c98 	.word	0x08012c98
 80040c4:	08012ca8 	.word	0x08012ca8
 80040c8:	08012cc8 	.word	0x08012cc8
 80040cc:	08012ce8 	.word	0x08012ce8

080040d0 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80040d0:	b408      	push	{r3}
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b08b      	sub	sp, #44	; 0x2c
 80040d6:	af02      	add	r7, sp, #8
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80040de:	68b8      	ldr	r0, [r7, #8]
 80040e0:	f7ff fafa 	bl	80036d8 <mg_http_status_code_str>
 80040e4:	4602      	mov	r2, r0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <mg_http_reply+0x20>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	e000      	b.n	80040f2 <mg_http_reply+0x22>
 80040f0:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <mg_http_reply+0xa0>)
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	491e      	ldr	r1, [pc, #120]	; (8004174 <mg_http_reply+0xa4>)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f002 fa40 	bl	8006580 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8004106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800410a:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004118:	4817      	ldr	r0, [pc, #92]	; (8004178 <mg_http_reply+0xa8>)
 800411a:	f7fe f89b 	bl	8002254 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	2b10      	cmp	r3, #16
 8004124:	d916      	bls.n	8004154 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3b0f      	subs	r3, #15
 800412e:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004138:	4a10      	ldr	r2, [pc, #64]	; (800417c <mg_http_reply+0xac>)
 800413a:	210b      	movs	r1, #11
 800413c:	f002 fc3e 	bl	80069bc <mg_snprintf>
 8004140:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004146:	69f9      	ldr	r1, [r7, #28]
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	440b      	add	r3, r1
 800414c:	3b0f      	subs	r3, #15
 800414e:	4413      	add	r3, r2
 8004150:	2220      	movs	r2, #32
 8004152:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800415a:	f36f 13c7 	bfc	r3, #7, #1
 800415e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 8004162:	bf00      	nop
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800416c:	b001      	add	sp, #4
 800416e:	4770      	bx	lr
 8004170:	08012ce8 	.word	0x08012ce8
 8004174:	08012cec 	.word	0x08012cec
 8004178:	0800694d 	.word	0x0800694d
 800417c:	08012d20 	.word	0x08012d20

08004180 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fc2d 	bl	80029ec <mg_fs_close>
  c->pfn_data = NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a06      	ldr	r2, [pc, #24]	; (80041b4 <restore_http_cb+0x34>)
 800419c:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80041a4:	f36f 13c7 	bfc	r3, #7, #1
 80041a8:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	080052d9 	.word	0x080052d9

080041b8 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af04      	add	r7, sp, #16
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	461c      	mov	r4, r3
 80041ca:	4615      	mov	r5, r2
 80041cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041d4:	e9cd 2300 	strd	r2, r3, [sp]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <mg_http_etag+0x34>)
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f002 fbed 	bl	80069bc <mg_snprintf>
  return buf;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdb0      	pop	{r4, r5, r7, pc}
 80041ec:	08012d28 	.word	0x08012d28

080041f0 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d002      	beq.n	800420a <static_cb+0x1a>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d146      	bne.n	8004298 <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800420e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004212:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3384      	adds	r3, #132	; 0x84
 8004218:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	429a      	cmp	r2, r3
 8004222:	d905      	bls.n	8004230 <static_cb+0x40>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3348      	adds	r3, #72	; 0x48
 8004228:	69f9      	ldr	r1, [r7, #28]
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f9c6 	bl	80055bc <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004238:	429a      	cmp	r2, r3
 800423a:	d234      	bcs.n	80042a6 <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	429a      	cmp	r2, r3
 8004250:	d902      	bls.n	8004258 <static_cb+0x68>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	6810      	ldr	r0, [r2, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426a:	4411      	add	r1, r2
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	4798      	blx	r3
 8004270:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1ad2      	subs	r2, r2, r3
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10c      	bne.n	80042aa <static_cb+0xba>
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff ff75 	bl	8004180 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004296:	e008      	b.n	80042aa <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b09      	cmp	r3, #9
 800429c:	d106      	bne.n	80042ac <static_cb+0xbc>
    restore_http_cb(c);
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff6e 	bl	8004180 <restore_http_cb>
 80042a4:	e002      	b.n	80042ac <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80042aa:	bf00      	nop
  }
  (void) ev_data;
}
 80042ac:	3728      	adds	r7, #40	; 0x28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b08d      	sub	sp, #52	; 0x34
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	1d38      	adds	r0, r7, #4
 80042be:	e880 0006 	stmia.w	r0, {r1, r2}
 80042c2:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 fec0 	bl	8007050 <mg_str_s>
  size_t i = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 80042d4:	e002      	b.n	80042dc <guess_content_type+0x28>
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	3301      	adds	r3, #1
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d208      	bcs.n	80042f6 <guess_content_type+0x42>
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4413      	add	r3, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b2e      	cmp	r3, #46	; 0x2e
 80042f4:	d1ef      	bne.n	80042d6 <guess_content_type+0x22>
  path.ptr += path.len - i;
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	1acb      	subs	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	607b      	str	r3, [r7, #4]
  path.len = i;
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 8004306:	e012      	b.n	800432e <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 8004308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800430c:	cb0c      	ldmia	r3, {r2, r3}
 800430e:	1d39      	adds	r1, r7, #4
 8004310:	c903      	ldmia	r1, {r0, r1}
 8004312:	f002 ff5f 	bl	80071d4 <mg_strcmp>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d108      	bne.n	800432e <guess_content_type+0x7a>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004328:	e882 0003 	stmia.w	r2, {r0, r1}
 800432c:	e034      	b.n	8004398 <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 800432e:	f107 021c 	add.w	r2, r7, #28
 8004332:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004336:	f107 0314 	add.w	r3, r7, #20
 800433a:	4618      	mov	r0, r3
 800433c:	f003 f9a9 	bl	8007692 <mg_commalist>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e0      	bne.n	8004308 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 8004346:	2300      	movs	r3, #0
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434a:	e01a      	b.n	8004382 <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800434c:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <guess_content_type+0xec>)
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	cb0c      	ldmia	r3, {r2, r3}
 8004356:	1d39      	adds	r1, r7, #4
 8004358:	c903      	ldmia	r1, {r0, r1}
 800435a:	f002 ff3b 	bl	80071d4 <mg_strcmp>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <guess_content_type+0xc8>
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	3301      	adds	r3, #1
 8004368:	68f9      	ldr	r1, [r7, #12]
 800436a:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <guess_content_type+0xec>)
 800436c:	460c      	mov	r4, r1
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004376:	e884 0003 	stmia.w	r4, {r0, r1}
 800437a:	e00d      	b.n	8004398 <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	3302      	adds	r3, #2
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <guess_content_type+0xec>)
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1de      	bne.n	800434c <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4904      	ldr	r1, [pc, #16]	; (80043a4 <guess_content_type+0xf0>)
 8004392:	4618      	mov	r0, r3
 8004394:	f002 fe5c 	bl	8007050 <mg_str_s>
}
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	3734      	adds	r7, #52	; 0x34
 800439c:	46bd      	mov	sp, r7
 800439e:	bd90      	pop	{r4, r7, pc}
 80043a0:	20000050 	.word	0x20000050
 80043a4:	08012e10 	.word	0x08012e10

080043a8 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e076      	b.n	80044ac <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	2206      	movs	r2, #6
 80043c8:	493f      	ldr	r1, [pc, #252]	; (80044c8 <getrange+0x120>)
 80043ca:	4618      	mov	r0, r3
 80043cc:	f00d f9eb 	bl	80117a6 <memcmp>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d167      	bne.n	80044a6 <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3306      	adds	r3, #6
 80043de:	18d1      	adds	r1, r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	1f9a      	subs	r2, r3, #6
 80043ea:	f107 0310 	add.w	r3, r7, #16
 80043ee:	4618      	mov	r0, r3
 80043f0:	f002 fe4b 	bl	800708a <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <getrange+0x68>
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b2f      	cmp	r3, #47	; 0x2f
 8004400:	d906      	bls.n	8004410 <getrange+0x68>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b39      	cmp	r3, #57	; 0x39
 8004408:	d802      	bhi.n	8004410 <getrange+0x68>
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	3301      	adds	r3, #1
 800440e:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	f107 0310 	add.w	r3, r7, #16
 8004416:	e893 0003 	ldmia.w	r3, {r0, r1}
 800441a:	f7fe fd25 	bl	8002e68 <mg_to_size_t>
 800441e:	4603      	mov	r3, r0
 8004420:	f083 0301 	eor.w	r3, r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <getrange+0x92>
 800442a:	2300      	movs	r3, #0
 800442c:	e047      	b.n	80044be <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3b01      	subs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <getrange+0xa8>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b2f      	cmp	r3, #47	; 0x2f
 8004446:	d903      	bls.n	8004450 <getrange+0xa8>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b39      	cmp	r3, #57	; 0x39
 800444e:	d9ee      	bls.n	800442e <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <getrange+0xc2>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b2d      	cmp	r3, #45	; 0x2d
 800445c:	d105      	bne.n	800446a <getrange+0xc2>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3301      	adds	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3b01      	subs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	f107 0310 	add.w	r3, r7, #16
 8004470:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004474:	f7fe fcf8 	bl	8002e68 <mg_to_size_t>
 8004478:	4603      	mov	r3, r0
 800447a:	f083 0301 	eor.w	r3, r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <getrange+0xe0>
 8004484:	2300      	movs	r3, #0
 8004486:	e01a      	b.n	80044be <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d015      	beq.n	80044ba <getrange+0x112>
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b2f      	cmp	r3, #47	; 0x2f
 8004494:	d911      	bls.n	80044ba <getrange+0x112>
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b39      	cmp	r3, #57	; 0x39
 800449c:	d80d      	bhi.n	80044ba <getrange+0x112>
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3301      	adds	r3, #1
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e00a      	b.n	80044bc <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	1d9a      	adds	r2, r3, #6
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d382      	bcc.n	80043be <getrange+0x16>
 80044b8:	e000      	b.n	80044bc <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 80044ba:	bf00      	nop
    }
  }
  return (int) numparsed;
 80044bc:	69bb      	ldr	r3, [r7, #24]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	08012f94 	.word	0x08012f94

080044cc <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 80044cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	b0f7      	sub	sp, #476	; 0x1dc
 80044d2:	af0a      	add	r7, sp, #40	; 0x28
 80044d4:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 80044d8:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 80044dc:	6020      	str	r0, [r4, #0]
 80044de:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 80044e2:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 80044e6:	6001      	str	r1, [r0, #0]
 80044e8:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 80044ec:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 80044f0:	600a      	str	r2, [r1, #0]
 80044f2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80044f6:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80044fa:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80044fc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004500:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d006      	beq.n	800451a <mg_http_serve_file+0x4e>
 800450c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004510:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	e000      	b.n	800451c <mg_http_serve_file+0x50>
 800451a:	4b9d      	ldr	r3, [pc, #628]	; (8004790 <mg_http_serve_file+0x2c4>)
 800451c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  struct mg_fd *fd = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  size_t size = 0;
 8004526:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800452a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8004544:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004548:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800454c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	4610      	mov	r0, r2
 8004554:	f002 fd7c 	bl	8007050 <mg_str_s>
 8004558:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800455c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004568:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 800456c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004570:	ca06      	ldmia	r2, {r1, r2}
 8004572:	f7ff fe9f 	bl	80042b4 <guess_content_type>
  bool gzip = false;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

  if (path != NULL) {
 800457c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004580:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d051      	beq.n	800462e <mg_http_serve_file+0x162>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800458a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800458e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004592:	4980      	ldr	r1, [pc, #512]	; (8004794 <mg_http_serve_file+0x2c8>)
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	f7fe fe03 	bl	80031a0 <mg_http_get_header>
 800459a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 800459e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d033      	beq.n	800460e <mg_http_serve_file+0x142>
 80045a6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80045aa:	497b      	ldr	r1, [pc, #492]	; (8004798 <mg_http_serve_file+0x2cc>)
 80045ac:	4618      	mov	r0, r3
 80045ae:	f002 fd4f 	bl	8007050 <mg_str_s>
 80045b2:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80045b6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80045ba:	cb0c      	ldmia	r3, {r2, r3}
 80045bc:	c903      	ldmia	r1, {r0, r1}
 80045be:	f002 fe4b 	bl	8007258 <mg_strstr>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d022      	beq.n	800460e <mg_http_serve_file+0x142>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80045c8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045cc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045d0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a71      	ldr	r2, [pc, #452]	; (800479c <mg_http_serve_file+0x2d0>)
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	f002 f9ef 	bl	80069bc <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80045de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045e2:	2201      	movs	r2, #1
 80045e4:	4619      	mov	r1, r3
 80045e6:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80045ea:	f7fe f9d7 	bl	800299c <mg_fs_open>
 80045ee:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
      if (fd != NULL) gzip = true, path = tmp;
 80045f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <mg_http_serve_file+0x142>
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8004600:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004604:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004608:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800460c:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 800460e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <mg_http_serve_file+0x162>
 8004616:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800461a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800461e:	2201      	movs	r2, #1
 8004620:	6819      	ldr	r1, [r3, #0]
 8004622:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8004626:	f7fe f9b9 	bl	800299c <mg_fs_open>
 800462a:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 800462e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004632:	2b00      	cmp	r3, #0
 8004634:	d144      	bne.n	80046c0 <mg_http_serve_file+0x1f4>
 8004636:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800463a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d03c      	beq.n	80046c0 <mg_http_serve_file+0x1f4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8004646:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800464a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2201      	movs	r2, #1
 8004654:	4619      	mov	r1, r3
 8004656:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800465a:	f7fe f99f 	bl	800299c <mg_fs_open>
 800465e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8004662:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004666:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800466a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	4610      	mov	r0, r2
 8004672:	f002 fced 	bl	8007050 <mg_str_s>
 8004676:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800467a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004686:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 800468a:	f107 0010 	add.w	r0, r7, #16
 800468e:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004692:	ca06      	ldmia	r2, {r1, r2}
 8004694:	f7ff fe0e 	bl	80042b4 <guess_content_type>
 8004698:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800469c:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80046a0:	4623      	mov	r3, r4
 80046a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046a6:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 80046aa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046b2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80046b6:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	6912      	ldr	r2, [r2, #16]
 80046be:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80046c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00f      	beq.n	80046e8 <mg_http_serve_file+0x21c>
 80046c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80046cc:	681c      	ldr	r4, [r3, #0]
 80046ce:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80046d2:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80046d6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	47a0      	blx	r4
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d114      	bne.n	8004712 <mg_http_serve_file+0x246>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 80046e8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046ec:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046f8:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <mg_http_serve_file+0x2d4>)
 80046fe:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004702:	6800      	ldr	r0, [r0, #0]
 8004704:	f7ff fce4 	bl	80040d0 <mg_http_reply>
    mg_fs_close(fd);
 8004708:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800470c:	f7fe f96e 	bl	80029ec <mg_fs_close>
 8004710:	e193      	b.n	8004a3a <mg_http_serve_file+0x56e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004712:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800471a:	6819      	ldr	r1, [r3, #0]
 800471c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004720:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004724:	e9cd 2300 	strd	r2, r3, [sp]
 8004728:	460a      	mov	r2, r1
 800472a:	2140      	movs	r1, #64	; 0x40
 800472c:	f7ff fd44 	bl	80041b8 <mg_http_etag>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d03a      	beq.n	80047ac <mg_http_serve_file+0x2e0>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004736:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800473a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800473e:	4919      	ldr	r1, [pc, #100]	; (80047a4 <mg_http_serve_file+0x2d8>)
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	f7fe fd2d 	bl	80031a0 <mg_http_get_header>
 8004746:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800474a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02c      	beq.n	80047ac <mg_http_serve_file+0x2e0>
             mg_vcasecmp(inm, etag) == 0) {
 8004752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004756:	4619      	mov	r1, r3
 8004758:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 800475c:	f002 fd16 	bl	800718c <mg_vcasecmp>
 8004760:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d122      	bne.n	80047ac <mg_http_serve_file+0x2e0>
    mg_fs_close(fd);
 8004766:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800476a:	f7fe f93f 	bl	80029ec <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800476e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004772:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800477e:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <mg_http_serve_file+0x2dc>)
 8004784:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004788:	6800      	ldr	r0, [r0, #0]
 800478a:	f7ff fca1 	bl	80040d0 <mg_http_reply>
 800478e:	e154      	b.n	8004a3a <mg_http_serve_file+0x56e>
 8004790:	20000028 	.word	0x20000028
 8004794:	08012f9c 	.word	0x08012f9c
 8004798:	08012fac 	.word	0x08012fac
 800479c:	08012fb4 	.word	0x08012fb4
 80047a0:	08012fbc 	.word	0x08012fbc
 80047a4:	08012fc8 	.word	0x08012fc8
 80047a8:	08012ce8 	.word	0x08012ce8
  } else {
    int n, status = 200;
 80047ac:	23c8      	movs	r3, #200	; 0xc8
 80047ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 80047b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80047d8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047e0:	4999      	ldr	r1, [pc, #612]	; (8004a48 <mg_http_serve_file+0x57c>)
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	f7fe fcdc 	bl	80031a0 <mg_http_get_header>
 80047e8:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    range[0] = '\0';
 80047ec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80047f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8095 	beq.w	800492c <mg_http_serve_file+0x460>
 8004802:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004806:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800480a:	4619      	mov	r1, r3
 800480c:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8004810:	f7ff fdca 	bl	80043a8 <getrange>
 8004814:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8004818:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800481c:	2b00      	cmp	r3, #0
 800481e:	f340 8085 	ble.w	800492c <mg_http_serve_file+0x460>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8004822:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <mg_http_serve_file+0x36e>
 800482a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800482e:	1e5a      	subs	r2, r3, #1
 8004830:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004834:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004838:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800483a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800483e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004848:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d808      	bhi.n	8004864 <mg_http_serve_file+0x398>
 8004852:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004856:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004860:	429a      	cmp	r2, r3
 8004862:	d81a      	bhi.n	800489a <mg_http_serve_file+0x3ce>
        status = 416;
 8004864:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004868:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8004872:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2200      	movs	r2, #0
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	60fa      	str	r2, [r7, #12]
 8004882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004886:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800488a:	e9cd 1200 	strd	r1, r2, [sp]
 800488e:	4a6f      	ldr	r2, [pc, #444]	; (8004a4c <mg_http_serve_file+0x580>)
 8004890:	2164      	movs	r1, #100	; 0x64
 8004892:	4618      	mov	r0, r3
 8004894:	f002 f892 	bl	80069bc <mg_snprintf>
 8004898:	e048      	b.n	800492c <mg_http_serve_file+0x460>
                    (int64_t) size);
      } else {
        status = 206;
 800489a:	23ce      	movs	r3, #206	; 0xce
 800489c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = r2 - r1 + 1;
 80048a0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range),
 80048bc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	469a      	mov	sl, r3
 80048ca:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 80048cc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80048da:	4413      	add	r3, r2
 80048dc:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 80048de:	2200      	movs	r2, #0
 80048e0:	461d      	mov	r5, r3
 80048e2:	4616      	mov	r6, r2
 80048e4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048fc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004900:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8004904:	e9cd ab00 	strd	sl, fp, [sp]
 8004908:	4a51      	ldr	r2, [pc, #324]	; (8004a50 <mg_http_serve_file+0x584>)
 800490a:	2164      	movs	r1, #100	; 0x64
 800490c:	4618      	mov	r0, r3
 800490e:	f002 f855 	bl	80069bc <mg_snprintf>
        fs->sk(fd->fd, r1);
 8004912:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800491c:	6810      	ldr	r0, [r2, #0]
 800491e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004922:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	4611      	mov	r1, r2
 800492a:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800492c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8004930:	f7fe fed2 	bl	80036d8 <mg_http_status_code_str>
 8004934:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 8004936:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800493a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800493e:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8004940:	461d      	mov	r5, r3
 8004942:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004946:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004950:	2100      	movs	r1, #0
 8004952:	4698      	mov	r8, r3
 8004954:	4689      	mov	r9, r1
 8004956:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <mg_http_serve_file+0x496>
 800495e:	493d      	ldr	r1, [pc, #244]	; (8004a54 <mg_http_serve_file+0x588>)
 8004960:	e000      	b.n	8004964 <mg_http_serve_file+0x498>
 8004962:	493d      	ldr	r1, [pc, #244]	; (8004a58 <mg_http_serve_file+0x58c>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8004964:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004968:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8004970:	2b00      	cmp	r3, #0
 8004972:	d006      	beq.n	8004982 <mg_http_serve_file+0x4b6>
 8004974:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004978:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	e000      	b.n	8004984 <mg_http_serve_file+0x4b8>
 8004982:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <mg_http_serve_file+0x58c>)
 8004984:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004988:	f5a0 70c6 	sub.w	r0, r0, #396	; 0x18c
 800498c:	9308      	str	r3, [sp, #32]
 800498e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004992:	9307      	str	r3, [sp, #28]
 8004994:	9106      	str	r1, [sp, #24]
 8004996:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800499a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499e:	9302      	str	r3, [sp, #8]
 80049a0:	9201      	str	r2, [sp, #4]
 80049a2:	9500      	str	r5, [sp, #0]
 80049a4:	4623      	mov	r3, r4
 80049a6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80049aa:	492c      	ldr	r1, [pc, #176]	; (8004a5c <mg_http_serve_file+0x590>)
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f001 fde7 	bl	8006580 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 80049b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049b6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4928      	ldr	r1, [pc, #160]	; (8004a60 <mg_http_serve_file+0x594>)
 80049be:	4618      	mov	r0, r3
 80049c0:	f002 fbe4 	bl	800718c <mg_vcasecmp>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11a      	bne.n	8004a00 <mg_http_serve_file+0x534>
      c->is_draining = 1;
 80049ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80049d8:	f043 0310 	orr.w	r3, r3, #16
 80049dc:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 80049e0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80049ee:	f36f 13c7 	bfc	r3, #7, #1
 80049f2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 80049f6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80049fa:	f7fd fff7 	bl	80029ec <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 80049fe:	e01c      	b.n	8004a3a <mg_http_serve_file+0x56e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004a00:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3384      	adds	r3, #132	; 0x84
 8004a0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      c->pfn = static_cb;
 8004a10:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a14:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <mg_http_serve_file+0x598>)
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 8004a1e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004a22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8004a2c:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 8004a2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a32:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004a36:	601a      	str	r2, [r3, #0]
}
 8004a38:	e7ff      	b.n	8004a3a <mg_http_serve_file+0x56e>
 8004a3a:	bf00      	nop
 8004a3c:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8004a40:	46bd      	mov	sp, r7
 8004a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a46:	bf00      	nop
 8004a48:	08012fd8 	.word	0x08012fd8
 8004a4c:	08012fe0 	.word	0x08012fe0
 8004a50:	08013000 	.word	0x08013000
 8004a54:	08013028 	.word	0x08013028
 8004a58:	08012ce8 	.word	0x08012ce8
 8004a5c:	08013044 	.word	0x08013044
 8004a60:	08013094 	.word	0x08013094
 8004a64:	080041f1 	.word	0x080041f1

08004a68 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8004a68:	b082      	sub	sp, #8
 8004a6a:	b590      	push	{r4, r7, lr}
 8004a6c:	b08b      	sub	sp, #44	; 0x2c
 8004a6e:	af02      	add	r7, sp, #8
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 8004a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	4a97      	ldr	r2, [pc, #604]	; (8004ce0 <uri_to_path2+0x278>)
 8004a84:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a88:	f001 ff98 	bl	80069bc <mg_snprintf>
 8004a8c:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d909      	bls.n	8004aaa <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8004a96:	4b93      	ldr	r3, [pc, #588]	; (8004ce4 <uri_to_path2+0x27c>)
 8004a98:	4a93      	ldr	r2, [pc, #588]	; (8004ce8 <uri_to_path2+0x280>)
 8004a9a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff fb16 	bl	80040d0 <mg_http_reply>
    return -1;
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	e113      	b.n	8004cd2 <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aac:	3b01      	subs	r3, #1
 8004aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ab0:	4413      	add	r3, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d912      	bls.n	8004ae6 <uri_to_path2+0x7e>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac6:	4413      	add	r3, r2
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b2f      	cmp	r3, #47	; 0x2f
 8004acc:	d00b      	beq.n	8004ae6 <uri_to_path2+0x7e>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	617a      	str	r2, [r7, #20]
 8004ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad6:	4413      	add	r3, r2
 8004ad8:	222f      	movs	r2, #47	; 0x2f
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	18d0      	adds	r0, r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	1ad1      	subs	r1, r2, r3
 8004af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	18d4      	adds	r4, r2, r3
 8004afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2200      	movs	r2, #0
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	4622      	mov	r2, r4
 8004b08:	f7fe fa64 	bl	8002fd4 <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 8004b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b12:	4413      	add	r3, r2
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 8004b18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b1a:	f002 fe37 	bl	800778c <mg_path_is_sane>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f083 0301 	eor.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 8004b2a:	4b70      	ldr	r3, [pc, #448]	; (8004cec <uri_to_path2+0x284>)
 8004b2c:	4a6e      	ldr	r2, [pc, #440]	; (8004ce8 <uri_to_path2+0x280>)
 8004b2e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff facc 	bl	80040d0 <mg_http_reply>
    return -1;
 8004b38:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3c:	e0c9      	b.n	8004cd2 <uri_to_path2+0x26a>
  }
  n = strlen(path);
 8004b3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b40:	f7fb fbc6 	bl	80002d0 <strlen>
 8004b44:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8004b46:	e007      	b.n	8004b58 <uri_to_path2+0xf0>
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4413      	add	r3, r2
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d906      	bls.n	8004b6c <uri_to_path2+0x104>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b64:	4413      	add	r3, r2
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b2f      	cmp	r3, #47	; 0x2f
 8004b6a:	d0ed      	beq.n	8004b48 <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	495f      	ldr	r1, [pc, #380]	; (8004cf0 <uri_to_path2+0x288>)
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 fae6 	bl	8007144 <mg_vcmp>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <uri_to_path2+0x126>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b88:	4798      	blx	r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	e000      	b.n	8004b90 <uri_to_path2+0x128>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 8004b92:	4b58      	ldr	r3, [pc, #352]	; (8004cf4 <uri_to_path2+0x28c>)
 8004b94:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8004b98:	4957      	ldr	r1, [pc, #348]	; (8004cf8 <uri_to_path2+0x290>)
 8004b9a:	2004      	movs	r0, #4
 8004b9c:	f001 fb90 	bl	80062c0 <mg_log_prefix>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00f      	beq.n	8004bc6 <uri_to_path2+0x15e>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	484e      	ldr	r0, [pc, #312]	; (8004cfc <uri_to_path2+0x294>)
 8004bc2:	f001 fbd7 	bl	8006374 <mg_log>
              flags));
  if (flags == 0) {
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8081 	beq.w	8004cd0 <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <uri_to_path2+0x1b2>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01c      	beq.n	8004c1a <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	4413      	add	r3, r2
 8004bec:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004bee:	2b2f      	cmp	r3, #47	; 0x2f
 8004bf0:	d013      	beq.n	8004c1a <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4940      	ldr	r1, [pc, #256]	; (8004d00 <uri_to_path2+0x298>)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f001 fcbe 	bl	8006580 <mg_printf>
    c->is_resp = 0;
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004c0a:	f36f 13c7 	bfc	r3, #7, #1
 8004c0e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 8004c12:	f04f 33ff 	mov.w	r3, #4294967295
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	e05a      	b.n	8004cd0 <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d055      	beq.n	8004cd0 <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	18d0      	adds	r0, r2, r3
 8004c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	4a34      	ldr	r2, [pc, #208]	; (8004d04 <uri_to_path2+0x29c>)
 8004c32:	4619      	mov	r1, r3
 8004c34:	f001 fec2 	bl	80069bc <mg_snprintf>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2100      	movs	r1, #0
 8004c46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c48:	4798      	blx	r3
 8004c4a:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d116      	bne.n	8004c80 <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	18d0      	adds	r0, r2, r3
 8004c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <uri_to_path2+0x2a0>)
 8004c60:	4619      	mov	r1, r3
 8004c62:	f001 feab 	bl	80069bc <mg_snprintf>
 8004c66:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2100      	movs	r1, #0
 8004c74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c76:	4798      	blx	r3
 8004c78:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <uri_to_path2+0x21e>
      flags = tmp;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e024      	b.n	8004cd0 <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8004c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	18d0      	adds	r0, r2, r3
 8004c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <uri_to_path2+0x2a4>)
 8004c94:	4619      	mov	r1, r3
 8004c96:	f001 fe91 	bl	80069bc <mg_snprintf>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004caa:	4798      	blx	r3
 8004cac:	61b8      	str	r0, [r7, #24]
                    0 &&
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	330b      	adds	r3, #11
 8004cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cbe:	4413      	add	r3, r2
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	e004      	b.n	8004cd0 <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3724      	adds	r7, #36	; 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004cdc:	b002      	add	sp, #8
 8004cde:	4770      	bx	lr
 8004ce0:	08012788 	.word	0x08012788
 8004ce4:	0801309c 	.word	0x0801309c
 8004ce8:	08012ce8 	.word	0x08012ce8
 8004cec:	080130b0 	.word	0x080130b0
 8004cf0:	080130c0 	.word	0x080130c0
 8004cf4:	08013f58 	.word	0x08013f58
 8004cf8:	08012658 	.word	0x08012658
 8004cfc:	080130c4 	.word	0x080130c4
 8004d00:	080130d8 	.word	0x080130d8
 8004d04:	08013114 	.word	0x08013114
 8004d08:	08013120 	.word	0x08013120
 8004d0c:	08013130 	.word	0x08013130

08004d10 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b09a      	sub	sp, #104	; 0x68
 8004d14:	af06      	add	r7, sp, #24
 8004d16:	6178      	str	r0, [r7, #20]
 8004d18:	6139      	str	r1, [r7, #16]
 8004d1a:	60fa      	str	r2, [r7, #12]
 8004d1c:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <uri_to_path+0x1c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	e000      	b.n	8004d2e <uri_to_path+0x1e>
 8004d2c:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <uri_to_path+0x10c>)
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f002 f988 	bl	8007050 <mg_str_s>
 8004d40:	2300      	movs	r3, #0
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	2300      	movs	r3, #0
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 8004d50:	e040      	b.n	8004dd4 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d113      	bne.n	8004d80 <uri_to_path+0x70>
 8004d58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d5c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d64:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d68:	463b      	mov	r3, r7
 8004d6a:	492d      	ldr	r1, [pc, #180]	; (8004e20 <uri_to_path+0x110>)
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f002 f96f 	bl	8007050 <mg_str_s>
 8004d72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d76:	463a      	mov	r2, r7
 8004d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d7c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d200      	bcs.n	8004d8c <uri_to_path+0x7c>
 8004d8a:	e023      	b.n	8004dd4 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d96:	4618      	mov	r0, r3
 8004d98:	f002 f977 	bl	800708a <mg_str_n>
 8004d9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004da0:	cb0c      	ldmia	r3, {r2, r3}
 8004da2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004da6:	c903      	ldmia	r1, {r0, r1}
 8004da8:	f002 fa14 	bl	80071d4 <mg_strcmp>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <uri_to_path+0xa4>
 8004db2:	e00f      	b.n	8004dd4 <uri_to_path+0xc4>
    u = k, p = v;
 8004db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004dbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8004dc4:	f107 031c 	add.w	r3, r7, #28
 8004dc8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004dcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dd0:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 8004dd4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004dd8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 fc56 	bl	8007692 <mg_commalist>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1b2      	bne.n	8004d52 <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8004dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dee:	9304      	str	r3, [sp, #16]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	9303      	str	r3, [sp, #12]
 8004df4:	aa01      	add	r2, sp, #4
 8004df6:	f107 031c 	add.w	r3, r7, #28
 8004dfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dfe:	e882 0003 	stmia.w	r2, {r0, r1}
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0a:	6939      	ldr	r1, [r7, #16]
 8004e0c:	6978      	ldr	r0, [r7, #20]
 8004e0e:	f7ff fe2b 	bl	8004a68 <uri_to_path2>
 8004e12:	4603      	mov	r3, r0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3750      	adds	r7, #80	; 0x50
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000028 	.word	0x20000028
 8004e20:	080130c0 	.word	0x080130c0

08004e24 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b0a9      	sub	sp, #164	; 0xa4
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	2280      	movs	r2, #128	; 0x80
 8004e3e:	9200      	str	r2, [sp, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff ff63 	bl	8004d10 <uri_to_path>
 8004e4a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (flags < 0) {
 8004e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	db3a      	blt.n	8004ecc <mg_http_serve_dir+0xa8>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8004e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <mg_http_serve_dir+0xb0>)
 8004e64:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <mg_http_serve_dir+0xb4>)
 8004e66:	f240 1193 	movw	r1, #403	; 0x193
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff f930 	bl	80040d0 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8004e70:	e02c      	b.n	8004ecc <mg_http_serve_dir+0xa8>
  } else if (flags && sp != NULL &&
 8004e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d021      	beq.n	8004ebe <mg_http_serve_dir+0x9a>
 8004e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01d      	beq.n	8004ebe <mg_http_serve_dir+0x9a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 8004e82:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004e86:	f7fb fa23 	bl	80002d0 <strlen>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	f107 0310 	add.w	r3, r7, #16
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb fa1d 	bl	80002d0 <strlen>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f107 0210 	add.w	r2, r7, #16
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004ea2:	f002 faf5 	bl	8007490 <mg_globmatch>
 8004ea6:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <mg_http_serve_dir+0x9a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f107 0210 	add.w	r2, r7, #16
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f002 f8b6 	bl	8007028 <mg_http_serve_ssi>
}
 8004ebc:	e006      	b.n	8004ecc <mg_http_serve_dir+0xa8>
    mg_http_serve_file(c, hm, path, opts);
 8004ebe:	f107 0210 	add.w	r2, r7, #16
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff fb00 	bl	80044cc <mg_http_serve_file>
}
 8004ecc:	bf00      	nop
 8004ece:	379c      	adds	r7, #156	; 0x9c
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	08013140 	.word	0x08013140
 8004ed8:	08012ce8 	.word	0x08012ce8

08004edc <mg_http_match_uri>:
    }
  }
  return mg_str_n(NULL, 0);
}

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f002 f8af 	bl	8007050 <mg_str_s>
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	cb0c      	ldmia	r3, {r2, r3}
 8004efe:	3108      	adds	r1, #8
 8004f00:	c903      	ldmia	r1, {r0, r1}
 8004f02:	f002 f9de 	bl	80072c2 <mg_match>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	f107 0408 	add.w	r4, r7, #8
 8004f1a:	e884 0003 	stmia.w	r4, {r0, r1}
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 8004f26:	e002      	b.n	8004f2e <getchunk+0x1e>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d20b      	bcs.n	8004f4e <getchunk+0x3e>
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b0d      	cmp	r3, #13
 8004f40:	d005      	beq.n	8004f4e <getchunk+0x3e>
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b0a      	cmp	r3, #10
 8004f4c:	d1ec      	bne.n	8004f28 <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6979      	ldr	r1, [r7, #20]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 fbd0 	bl	80076f8 <mg_unhexn>
 8004f58:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	440b      	add	r3, r1
 8004f62:	3304      	adds	r3, #4
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d201      	bcs.n	8004f6c <getchunk+0x5c>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e02a      	b.n	8004fc2 <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	4413      	add	r3, r2
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b0d      	cmp	r3, #13
 8004f76:	d106      	bne.n	8004f86 <getchunk+0x76>
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b0a      	cmp	r3, #10
 8004f84:	d001      	beq.n	8004f8a <getchunk+0x7a>
 8004f86:	2300      	movs	r3, #0
 8004f88:	e01b      	b.n	8004fc2 <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	6979      	ldr	r1, [r7, #20]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	440b      	add	r3, r1
 8004f92:	3302      	adds	r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b0d      	cmp	r3, #13
 8004f9a:	d108      	bne.n	8004fae <getchunk+0x9e>
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3303      	adds	r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b0a      	cmp	r3, #10
 8004fac:	d001      	beq.n	8004fb2 <getchunk+0xa2>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e007      	b.n	8004fc2 <getchunk+0xb2>
  *prefixlen = i + 2;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
  *datalen = n;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	601a      	str	r2, [r3, #0]
  return true;
 8004fc0:	2301      	movs	r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}
	...

08004fcc <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <mg_is_chunked+0x40>)
 8004fd6:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8004fd8:	490d      	ldr	r1, [pc, #52]	; (8005010 <mg_is_chunked+0x44>)
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fe f8e0 	bl	80031a0 <mg_http_get_header>
 8004fe0:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <mg_is_chunked+0x2e>
 8004fe8:	68f9      	ldr	r1, [r7, #12]
 8004fea:	68b8      	ldr	r0, [r7, #8]
 8004fec:	f002 f8ce 	bl	800718c <mg_vcasecmp>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <mg_is_chunked+0x2e>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <mg_is_chunked+0x30>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	b2db      	uxtb	r3, r3
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	080131f8 	.word	0x080131f8
 8005010:	08013200 	.word	0x08013200

08005014 <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b095      	sub	sp, #84	; 0x54
 8005018:	af00      	add	r7, sp, #0
 800501a:	6178      	str	r0, [r7, #20]
 800501c:	6139      	str	r1, [r7, #16]
 800501e:	60fa      	str	r2, [r7, #12]
 8005020:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800502c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	643b      	str	r3, [r7, #64]	; 0x40
 8005048:	2300      	movs	r3, #0
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 800504c:	2300      	movs	r3, #0
 800504e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 8005052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005056:	429a      	cmp	r2, r3
 8005058:	d851      	bhi.n	80050fe <deliver_chunked_chunks+0xea>
 800505a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800505c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	64bb      	str	r3, [r7, #72]	; 0x48
 8005062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	4413      	add	r3, r2
 8005068:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 800506a:	e048      	b.n	80050fe <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 8005072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005076:	18d0      	adds	r0, r2, r3
 8005078:	6a3a      	ldr	r2, [r7, #32]
 800507a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507c:	4413      	add	r3, r2
 800507e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005080:	4413      	add	r3, r2
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	4619      	mov	r1, r3
 8005086:	f00c fb9e 	bl	80117c6 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 800508a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	18d1      	adds	r1, r2, r3
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	68fc      	ldr	r4, [r7, #12]
 8005094:	463b      	mov	r3, r7
 8005096:	4618      	mov	r0, r3
 8005098:	f001 fff7 	bl	800708a <mg_str_n>
 800509c:	f504 7304 	add.w	r3, r4, #528	; 0x210
 80050a0:	463a      	mov	r2, r7
 80050a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050a6:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	210b      	movs	r1, #11
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7fc fb9f 	bl	80017f2 <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	441a      	add	r2, r3
 80050ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050bc:	4413      	add	r3, r2
 80050be:	3302      	adds	r3, #2
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c2:	6a3a      	ldr	r2, [r7, #32]
 80050c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c6:	4413      	add	r3, r2
 80050c8:	3302      	adds	r3, #2
 80050ca:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d0:	4413      	add	r3, r2
 80050d2:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	429a      	cmp	r2, r3
 80050dc:	d008      	beq.n	80050f0 <deliver_chunked_chunks+0xdc>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	647b      	str	r3, [r7, #68]	; 0x44
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	425b      	negs	r3, r3
 80050ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ec:	4413      	add	r3, r2
 80050ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 80050fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005102:	f083 0301 	eor.w	r3, r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d016      	beq.n	800513a <deliver_chunked_chunks+0x126>
 800510c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800510e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005110:	18d1      	adds	r1, r2, r3
 8005112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800511c:	4618      	mov	r0, r3
 800511e:	f001 ffb4 	bl	800708a <mg_str_n>
 8005122:	f107 031c 	add.w	r3, r7, #28
 8005126:	f107 0220 	add.w	r2, r7, #32
 800512a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800512e:	c903      	ldmia	r1, {r0, r1}
 8005130:	f7ff feee 	bl	8004f10 <getchunk>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d198      	bne.n	800506c <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005144:	4413      	add	r3, r2
 8005146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005148:	4619      	mov	r1, r3
 800514a:	f000 fac1 	bl	80056d0 <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	4313      	orrs	r3, r2
 800515e:	461a      	mov	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 8005164:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005170:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005178:	441a      	add	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2200      	movs	r2, #0
 8005184:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <deliver_chunked_chunks+0x18c>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3338      	adds	r3, #56	; 0x38
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fa9b 	bl	80056d0 <mg_iobuf_del>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 80051a0:	bf00      	nop
 80051a2:	3754      	adds	r7, #84	; 0x54
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd90      	pop	{r4, r7, pc}

080051a8 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b08b      	sub	sp, #44	; 0x2c
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6178      	str	r0, [r7, #20]
 80051b0:	6139      	str	r1, [r7, #16]
 80051b2:	60fa      	str	r2, [r7, #12]
 80051b4:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c8:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	18d1      	adds	r1, r2, r3
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	68fc      	ldr	r4, [r7, #12]
 80051dc:	463b      	mov	r3, r7
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 ff53 	bl	800708a <mg_str_n>
 80051e4:	f504 7304 	add.w	r3, r4, #528	; 0x210
 80051e8:	463a      	mov	r2, r7
 80051ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051ee:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d812      	bhi.n	8005224 <deliver_normal_chunks+0x7c>
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10f      	bne.n	8005224 <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	1ad2      	subs	r2, r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	441a      	add	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	429a      	cmp	r2, r3
 800522e:	d805      	bhi.n	800523c <deliver_normal_chunks+0x94>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	e000      	b.n	800523e <deliver_normal_chunks+0x96>
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	429a      	cmp	r2, r3
 800524a:	d203      	bcs.n	8005254 <deliver_normal_chunks+0xac>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <deliver_normal_chunks+0xc0>
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	210b      	movs	r1, #11
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7fc fac5 	bl	80017f2 <mg_call>
  processed += hm->chunk.len;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	4413      	add	r3, r2
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527c:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005286:	429a      	cmp	r2, r3
 8005288:	d31c      	bcc.n	80052c4 <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	210b      	movs	r1, #11
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f7fc faab 	bl	80017f2 <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <deliver_normal_chunks+0x128>
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d010      	beq.n	80052d0 <deliver_normal_chunks+0x128>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3338      	adds	r3, #56	; 0x38
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fa0a 	bl	80056d0 <mg_iobuf_del>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 80052c2:	e005      	b.n	80052d0 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	461a      	mov	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052d0:	bf00      	nop
 80052d2:	372c      	adds	r7, #44	; 0x2c
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd90      	pop	{r4, r7, pc}

080052d8 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 80052d8:	b590      	push	{r4, r7, lr}
 80052da:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80052de:	af00      	add	r7, sp, #0
 80052e0:	f507 740e 	add.w	r4, r7, #568	; 0x238
 80052e4:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 80052e8:	6020      	str	r0, [r4, #0]
 80052ea:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80052ee:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 80052f2:	6001      	str	r1, [r0, #0]
 80052f4:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80052f8:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 80052fc:	600a      	str	r2, [r1, #0]
 80052fe:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005302:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005306:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 8005308:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800530c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b07      	cmp	r3, #7
 8005314:	f000 80e9 	beq.w	80054ea <http_cb+0x212>
 8005318:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800531c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b09      	cmp	r3, #9
 8005324:	f040 80f2 	bne.w	800550c <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005328:	e0df      	b.n	80054ea <http_cb+0x212>
      bool next = false;
 800532a:	2300      	movs	r3, #0
 800532c:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 8005330:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005334:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800533c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005340:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f107 0210 	add.w	r2, r7, #16
 800534c:	4619      	mov	r1, r3
 800534e:	f7fe f875 	bl	800343c <mg_http_parse>
 8005352:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 8005356:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800535a:	2b00      	cmp	r3, #0
 800535c:	da17      	bge.n	800538e <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 800535e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005362:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4619      	mov	r1, r3
 800536c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005370:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800537c:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8005380:	460a      	mov	r2, r1
 8005382:	4965      	ldr	r1, [pc, #404]	; (8005518 <http_cb+0x240>)
 8005384:	6800      	ldr	r0, [r0, #0]
 8005386:	f7fc fa57 	bl	8001838 <mg_error>
        break;
 800538a:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 800538c:	e0be      	b.n	800550c <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 800538e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005392:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800539c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f040 809b 	bne.w	80054de <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 80053a8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8098 	beq.w	80054e2 <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 80053b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053b6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d125      	bne.n	800540c <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 80053c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053c4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053cc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053d0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80053d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 80053d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053dc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80053e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80053e4:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80053e8:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80053ec:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80053f0:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80053f4:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80053f8:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 80053fc:	1a8a      	subs	r2, r1, r2
 80053fe:	1a9a      	subs	r2, r3, r2
 8005400:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005404:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005408:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 800540c:	f107 0310 	add.w	r3, r7, #16
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fddb 	bl	8004fcc <mg_is_chunked>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00d      	beq.n	8005438 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 800541c:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005420:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005424:	f107 0210 	add.w	r2, r7, #16
 8005428:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800542c:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005430:	6800      	ldr	r0, [r0, #0]
 8005432:	f7ff fdef 	bl	8005014 <deliver_chunked_chunks>
 8005436:	e00c      	b.n	8005452 <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 8005438:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800543c:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005440:	f107 0210 	add.w	r2, r7, #16
 8005444:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005448:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 800544c:	6800      	ldr	r0, [r0, #0]
 800544e:	f7ff feab 	bl	80051a8 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 8005452:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8005456:	2b00      	cmp	r3, #0
 8005458:	d000      	beq.n	800545c <http_cb+0x184>
 800545a:	e046      	b.n	80054ea <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 800545c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005460:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005468:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800546c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005470:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005474:	429a      	cmp	r2, r3
 8005476:	d336      	bcc.n	80054e6 <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8005478:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800547c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <http_cb+0x1ce>
 8005490:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005494:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800549e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80054a6:	f107 0210 	add.w	r2, r7, #16
 80054aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054ae:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054b2:	210a      	movs	r1, #10
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	f7fc f99c 	bl	80017f2 <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 80054ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054be:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80054c8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054cc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80054d0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80054d4:	461a      	mov	r2, r3
 80054d6:	2100      	movs	r1, #0
 80054d8:	f000 f8fa 	bl	80056d0 <mg_iobuf_del>
 80054dc:	e005      	b.n	80054ea <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 80054de:	bf00      	nop
 80054e0:	e014      	b.n	800550c <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 80054e2:	bf00      	nop
 80054e4:	e012      	b.n	800550c <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 80054e6:	bf00      	nop
}
 80054e8:	e010      	b.n	800550c <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 80054ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054ee:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <http_cb+0x234>
 80054fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054fe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	f47f af0f 	bne.w	800532a <http_cb+0x52>
}
 800550c:	bf00      	nop
 800550e:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8005512:	46bd      	mov	sp, r7
 8005514:	bd90      	pop	{r4, r7, pc}
 8005516:	bf00      	nop
 8005518:	08013214 	.word	0x08013214

0800551c <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f001 f8cb 	bl	80066cc <mg_listen>
 8005536:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <mg_http_listen+0x28>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4a03      	ldr	r2, [pc, #12]	; (8005550 <mg_http_listen+0x34>)
 8005542:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 8005544:	697b      	ldr	r3, [r7, #20]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	080052d9 	.word	0x080052d9

08005554 <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <zeromem+0x26>
    while (len--) *buf++ = 0;
 8005564:	e004      	b.n	8005570 <zeromem+0x1c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	1e5a      	subs	r2, r3, #1
 8005574:	603a      	str	r2, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f5      	bne.n	8005566 <zeromem+0x12>
  }
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <roundup>:

static size_t roundup(size_t size, size_t align) {
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <roundup+0x26>
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4413      	add	r3, r2
 800559c:	1e5a      	subs	r2, r3, #1
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	fb02 f303 	mul.w	r3, r2, r3
 80055aa:	e000      	b.n	80055ae <roundup+0x28>
 80055ac:	687b      	ldr	r3, [r7, #4]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 80055bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  int ok = 1;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4619      	mov	r1, r3
 80055d2:	6838      	ldr	r0, [r7, #0]
 80055d4:	f7ff ffd7 	bl	8005586 <roundup>
 80055d8:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d117      	bne.n	8005610 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7ff ffb2 	bl	8005554 <zeromem>
    free(io->buf);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f00b fe49 	bl	801128c <free>
    io->buf = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
 800560e:	e052      	b.n	80056b6 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d04d      	beq.n	80056b6 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	2001      	movs	r0, #1
 800561e:	f00b fe0f 	bl	8011240 <calloc>
 8005622:	4603      	mov	r3, r0
 8005624:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d028      	beq.n	800567e <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	4293      	cmp	r3, r2
 8005634:	bf28      	it	cs
 8005636:	4613      	movcs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <mg_iobuf_resize+0x9a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d006      	beq.n	8005656 <mg_iobuf_resize+0x9a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4619      	mov	r1, r3
 8005650:	6938      	ldr	r0, [r7, #16]
 8005652:	f00c f8b8 	bl	80117c6 <memmove>
      zeromem(io->buf, io->size);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f7ff ff77 	bl	8005554 <zeromem>
      free(io->buf);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f00b fe0e 	bl	801128c <free>
      io->buf = (unsigned char *) p;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	e01b      	b.n	80056b6 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8005682:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <mg_iobuf_resize+0x108>)
 8005684:	f640 1255 	movw	r2, #2389	; 0x955
 8005688:	490f      	ldr	r1, [pc, #60]	; (80056c8 <mg_iobuf_resize+0x10c>)
 800568a:	2001      	movs	r0, #1
 800568c:	f000 fe18 	bl	80062c0 <mg_log_prefix>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00f      	beq.n	80056b6 <mg_iobuf_resize+0xfa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	4698      	mov	r8, r3
 800569e:	4691      	mov	r9, r2
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	461c      	mov	r4, r3
 80056a6:	4615      	mov	r5, r2
 80056a8:	e9cd 4500 	strd	r4, r5, [sp]
 80056ac:	4642      	mov	r2, r8
 80056ae:	464b      	mov	r3, r9
 80056b0:	4806      	ldr	r0, [pc, #24]	; (80056cc <mg_iobuf_resize+0x110>)
 80056b2:	f000 fe5f 	bl	8006374 <mg_log>
    }
  }
  return ok;
 80056b6:	697b      	ldr	r3, [r7, #20]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056c2:	bf00      	nop
 80056c4:	08013f68 	.word	0x08013f68
 80056c8:	08012658 	.word	0x08012658
 80056cc:	08013260 	.word	0x08013260

080056d0 <mg_iobuf_del>:
  if (ofs > io->len) io->len += ofs - io->len;
  io->len += len;
  return len;
}

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d902      	bls.n	80056ec <mg_iobuf_del+0x1c>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	441a      	add	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d904      	bls.n	8005704 <mg_iobuf_del+0x34>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d012      	beq.n	8005732 <mg_iobuf_del+0x62>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	18d0      	adds	r0, r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	440b      	add	r3, r1
 800571e:	18d1      	adds	r1, r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	461a      	mov	r2, r3
 800572e:	f00c f84a 	bl	80117c6 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <mg_iobuf_del+0x80>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6899      	ldr	r1, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	1acb      	subs	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff ff02 	bl	8005554 <zeromem>
  io->len -= len;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	609a      	str	r2, [r3, #8]
  return len;
 800575c:	687b      	ldr	r3, [r7, #4]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800576e:	2100      	movs	r1, #0
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff23 	bl	80055bc <mg_iobuf_resize>
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <escapeseq+0x12>
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <escapeseq+0x20>)
 8005790:	e000      	b.n	8005794 <escapeseq+0x14>
 8005792:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <escapeseq+0x24>)
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	0801326c 	.word	0x0801326c
 80057a4:	08013274 	.word	0x08013274

080057a8 <json_esc>:

static char json_esc(int c, int esc) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 80057b2:	6838      	ldr	r0, [r7, #0]
 80057b4:	f7ff ffe4 	bl	8005780 <escapeseq>
 80057b8:	6138      	str	r0, [r7, #16]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf0c      	ite	eq
 80057c0:	2301      	moveq	r3, #1
 80057c2:	2300      	movne	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff ffda 	bl	8005780 <escapeseq>
 80057cc:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e010      	b.n	80057f6 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4293      	cmp	r3, r2
 80057de:	d107      	bne.n	80057f0 <json_esc+0x48>
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	e007      	b.n	8005800 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3301      	adds	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ea      	bne.n	80057d4 <json_esc+0x2c>
  }
  return 0;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e02e      	b.n	8005876 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b5c      	cmp	r3, #92	; 0x5c
 8005822:	d114      	bne.n	800584e <mg_pass_string+0x46>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	dd0f      	ble.n	800584e <mg_pass_string+0x46>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2101      	movs	r1, #1
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ffb4 	bl	80057a8 <json_esc>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <mg_pass_string+0x46>
      i++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e010      	b.n	8005870 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d102      	bne.n	8005860 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800585a:	f06f 0301 	mvn.w	r3, #1
 800585e:	e010      	b.n	8005882 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4413      	add	r3, r2
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b22      	cmp	r3, #34	; 0x22
 800586a:	d101      	bne.n	8005870 <mg_pass_string+0x68>
      return i;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	e008      	b.n	8005882 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	dbcc      	blt.n	8005818 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800587e:	f06f 0301 	mvn.w	r3, #1
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	0000      	movs	r0, r0
 800588c:	0000      	movs	r0, r0
	...

08005890 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b090      	sub	sp, #64	; 0x40
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 80058a8:	2300      	movs	r3, #0
 80058aa:	637b      	str	r3, [r7, #52]	; 0x34
 80058ac:	2301      	movs	r3, #1
 80058ae:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 80058b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	da0a      	bge.n	80058ce <mg_atod+0x3e>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b2d      	cmp	r3, #45	; 0x2d
 80058be:	d106      	bne.n	80058ce <mg_atod+0x3e>
    sign = -1, i++;
 80058c0:	f04f 33ff 	mov.w	r3, #4294967295
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	3301      	adds	r3, #1
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
 80058cc:	e00a      	b.n	80058e4 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 80058ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	da27      	bge.n	8005926 <mg_atod+0x96>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b2b      	cmp	r3, #43	; 0x2b
 80058dc:	d123      	bne.n	8005926 <mg_atod+0x96>
    i++;
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	3301      	adds	r3, #1
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80058e4:	e01f      	b.n	8005926 <mg_atod+0x96>
    d *= 10.0;
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	4b9d      	ldr	r3, [pc, #628]	; (8005b60 <mg_atod+0x2d0>)
 80058ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058f0:	f7fa feb2 	bl	8000658 <__aeabi_dmul>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    d += p[i] - '0';
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	3b30      	subs	r3, #48	; 0x30
 8005906:	4618      	mov	r0, r3
 8005908:	f7fa fe3c 	bl	8000584 <__aeabi_i2d>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005914:	f7fa fcea 	bl	80002ec <__adddf3>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	3301      	adds	r3, #1
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
 8005926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	da0b      	bge.n	8005946 <mg_atod+0xb6>
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b2f      	cmp	r3, #47	; 0x2f
 8005938:	d905      	bls.n	8005946 <mg_atod+0xb6>
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b39      	cmp	r3, #57	; 0x39
 8005944:	d9cf      	bls.n	80058e6 <mg_atod+0x56>
  }
  d *= sign;
 8005946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005948:	f7fa fe1c 	bl	8000584 <__aeabi_i2d>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005954:	f7fa fe80 	bl	8000658 <__aeabi_dmul>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8005960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	da59      	bge.n	8005a1c <mg_atod+0x18c>
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b2e      	cmp	r3, #46	; 0x2e
 8005972:	d153      	bne.n	8005a1c <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005980:	a375      	add	r3, pc, #468	; (adr r3, 8005b58 <mg_atod+0x2c8>)
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	3301      	adds	r3, #1
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005990:	e023      	b.n	80059da <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 8005992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	3b30      	subs	r3, #48	; 0x30
 800599c:	4618      	mov	r0, r3
 800599e:	f7fa fdf1 	bl	8000584 <__aeabi_i2d>
 80059a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059a6:	f7fa fe57 	bl	8000658 <__aeabi_dmul>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059b2:	f7fa fc9b 	bl	80002ec <__adddf3>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      base /= 10.0;
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	4b67      	ldr	r3, [pc, #412]	; (8005b60 <mg_atod+0x2d0>)
 80059c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80059c8:	f7fa ff70 	bl	80008ac <__aeabi_ddiv>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80059d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d6:	3301      	adds	r3, #1
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
 80059da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	da0b      	bge.n	80059fa <mg_atod+0x16a>
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b2f      	cmp	r3, #47	; 0x2f
 80059ec:	d905      	bls.n	80059fa <mg_atod+0x16a>
 80059ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b39      	cmp	r3, #57	; 0x39
 80059f8:	d9cb      	bls.n	8005992 <mg_atod+0x102>
    }
    d += frac * sign;
 80059fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059fc:	f7fa fdc2 	bl	8000584 <__aeabi_i2d>
 8005a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a04:	f7fa fe28 	bl	8000658 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a10:	f7fa fc6c 	bl	80002ec <__adddf3>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8005a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	f280 8085 	bge.w	8005b30 <mg_atod+0x2a0>
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b65      	cmp	r3, #101	; 0x65
 8005a30:	d005      	beq.n	8005a3e <mg_atod+0x1ae>
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b45      	cmp	r3, #69	; 0x45
 8005a3c:	d178      	bne.n	8005b30 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
    i++;
 8005a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a48:	3301      	adds	r3, #1
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 8005a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	da0a      	bge.n	8005a6a <mg_atod+0x1da>
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b2d      	cmp	r3, #45	; 0x2d
 8005a5e:	d104      	bne.n	8005a6a <mg_atod+0x1da>
 8005a60:	2301      	movs	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	3301      	adds	r3, #1
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8005a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	da19      	bge.n	8005aa6 <mg_atod+0x216>
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b2b      	cmp	r3, #43	; 0x2b
 8005a7c:	d113      	bne.n	8005aa6 <mg_atod+0x216>
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	3301      	adds	r3, #1
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005a84:	e00f      	b.n	8005aa6 <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4619      	mov	r1, r3
 8005a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	637a      	str	r2, [r7, #52]	; 0x34
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3b30      	subs	r3, #48	; 0x30
 8005aa2:	440b      	add	r3, r1
 8005aa4:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	da0f      	bge.n	8005ace <mg_atod+0x23e>
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b2f      	cmp	r3, #47	; 0x2f
 8005ab8:	d909      	bls.n	8005ace <mg_atod+0x23e>
 8005aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b39      	cmp	r3, #57	; 0x39
 8005ac4:	d803      	bhi.n	8005ace <mg_atod+0x23e>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005acc:	dbdb      	blt.n	8005a86 <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <mg_atod+0x24a>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	425b      	negs	r3, r3
 8005ad8:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	e00d      	b.n	8005afc <mg_atod+0x26c>
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <mg_atod+0x2d0>)
 8005ae6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005aea:	f7fa fdb5 	bl	8000658 <__aeabi_dmul>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	dbed      	blt.n	8005ae0 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e00d      	b.n	8005b26 <mg_atod+0x296>
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <mg_atod+0x2d0>)
 8005b10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b14:	f7fa feca 	bl	80008ac <__aeabi_ddiv>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	425b      	negs	r3, r3
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	dbec      	blt.n	8005b0a <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <mg_atod+0x2ac>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b3a:	601a      	str	r2, [r3, #0]
  return d;
 8005b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b40:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b44:	eeb0 0a47 	vmov.f32	s0, s14
 8005b48:	eef0 0a67 	vmov.f32	s1, s15
 8005b4c:	3740      	adds	r7, #64	; 0x40
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	f3af 8000 	nop.w
 8005b58:	9999999a 	.word	0x9999999a
 8005b5c:	3fb99999 	.word	0x3fb99999
 8005b60:	40240000 	.word	0x40240000

08005b64 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b09b      	sub	sp, #108	; 0x6c
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	f107 0408 	add.w	r4, r7, #8
 8005b6e:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8005b84:	2300      	movs	r3, #0
 8005b86:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 8005b90:	2300      	movs	r3, #0
 8005b92:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 8005b94:	2301      	movs	r3, #1
 8005b96:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <mg_json_get+0x4c>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b24      	cmp	r3, #36	; 0x24
 8005bb6:	d002      	beq.n	8005bbe <mg_json_get+0x5a>
 8005bb8:	f06f 0301 	mvn.w	r3, #1
 8005bbc:	e2e2      	b.n	8006184 <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005bc2:	e2d8      	b.n	8006176 <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 8005bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bc8:	4413      	add	r3, r2
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8005bd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	f000 82c8 	beq.w	800616a <mg_json_get+0x606>
 8005bda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bde:	2b09      	cmp	r3, #9
 8005be0:	f000 82c3 	beq.w	800616a <mg_json_get+0x606>
 8005be4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005be8:	2b0a      	cmp	r3, #10
 8005bea:	f000 82be 	beq.w	800616a <mg_json_get+0x606>
 8005bee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bf2:	2b0d      	cmp	r3, #13
 8005bf4:	f000 82b9 	beq.w	800616a <mg_json_get+0x606>
    switch (expecting) {
 8005bf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	f200 82b7 	bhi.w	8006170 <mg_json_get+0x60c>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <mg_json_get+0xa4>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005f01 	.word	0x08005f01
 8005c10:	0800608b 	.word	0x0800608b
 8005c14:	080060a1 	.word	0x080060a1
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8005c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d101      	bne.n	8005c24 <mg_json_get+0xc0>
 8005c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c22:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 8005c24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c28:	2b7b      	cmp	r3, #123	; 0x7b
 8005c2a:	d12b      	bne.n	8005c84 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c2e:	2b1d      	cmp	r3, #29
 8005c30:	dd02      	ble.n	8005c38 <mg_json_get+0xd4>
 8005c32:	f04f 33ff 	mov.w	r3, #4294967295
 8005c36:	e2a5      	b.n	8006184 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8005c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d114      	bne.n	8005c6a <mg_json_get+0x106>
 8005c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4413      	add	r3, r2
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b2e      	cmp	r3, #46	; 0x2e
 8005c4a:	d10e      	bne.n	8005c6a <mg_json_get+0x106>
 8005c4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d10a      	bne.n	8005c6a <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8005c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c56:	3301      	adds	r3, #1
 8005c58:	657b      	str	r3, [r7, #84]	; 0x54
 8005c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c68:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8005c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c70:	3368      	adds	r3, #104	; 0x68
 8005c72:	443b      	add	r3, r7
 8005c74:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005c78:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8005c82:	e275      	b.n	8006170 <mg_json_get+0x60c>
        } else if (c == '[') {
 8005c84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c88:	2b5b      	cmp	r3, #91	; 0x5b
 8005c8a:	d14e      	bne.n	8005d2a <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c8e:	2b1d      	cmp	r3, #29
 8005c90:	dd02      	ble.n	8005c98 <mg_json_get+0x134>
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295
 8005c96:	e275      	b.n	8006184 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8005c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d13a      	bne.n	8005d16 <mg_json_get+0x1b2>
 8005ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b5b      	cmp	r3, #91	; 0x5b
 8005caa:	d134      	bne.n	8005d16 <mg_json_get+0x1b2>
 8005cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d130      	bne.n	8005d16 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	657b      	str	r3, [r7, #84]	; 0x54
 8005cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc8:	e010      	b.n	8005cec <mg_json_get+0x188>
              ei *= 10;
 8005cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4413      	add	r3, r2
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	3b30      	subs	r3, #48	; 0x30
 8005ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce2:	4413      	add	r3, r2
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce8:	3301      	adds	r3, #1
 8005cea:	653b      	str	r3, [r7, #80]	; 0x50
 8005cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b5d      	cmp	r3, #93	; 0x5d
 8005cf6:	d005      	beq.n	8005d04 <mg_json_get+0x1a0>
 8005cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e2      	bne.n	8005cca <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8005d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	4413      	add	r3, r2
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <mg_json_get+0x1b2>
 8005d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d12:	3301      	adds	r3, #1
 8005d14:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 8005d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d1c:	3368      	adds	r3, #104	; 0x68
 8005d1e:	443b      	add	r3, r7
 8005d20:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005d24:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8005d28:	e222      	b.n	8006170 <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 8005d2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d2e:	2b5d      	cmp	r3, #93	; 0x5d
 8005d30:	d13a      	bne.n	8005da8 <mg_json_get+0x244>
 8005d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dd37      	ble.n	8005da8 <mg_json_get+0x244>
          MG_EOO(']');
 8005d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d106      	bne.n	8005d4e <mg_json_get+0x1ea>
 8005d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d002      	beq.n	8005d4e <mg_json_get+0x1ea>
 8005d48:	f06f 0302 	mvn.w	r3, #2
 8005d4c:	e21a      	b.n	8006184 <mg_json_get+0x620>
 8005d4e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d54:	3b01      	subs	r3, #1
 8005d56:	3368      	adds	r3, #104	; 0x68
 8005d58:	443b      	add	r3, r7
 8005d5a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005d5e:	3302      	adds	r3, #2
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d002      	beq.n	8005d6a <mg_json_get+0x206>
 8005d64:	f06f 0301 	mvn.w	r3, #1
 8005d68:	e20c      	b.n	8006184 <mg_json_get+0x620>
 8005d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d74:	429a      	cmp	r2, r3
 8005d76:	f040 809c 	bne.w	8005eb2 <mg_json_get+0x34e>
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 8095 	bne.w	8005eb2 <mg_json_get+0x34e>
 8005d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	f040 8090 	bne.w	8005eb2 <mg_json_get+0x34e>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <mg_json_get+0x240>
 8005d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da6:	e1ed      	b.n	8006184 <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8005da8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dac:	2b74      	cmp	r3, #116	; 0x74
 8005dae:	d113      	bne.n	8005dd8 <mg_json_get+0x274>
 8005db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db2:	3303      	adds	r3, #3
 8005db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005db6:	429a      	cmp	r2, r3
 8005db8:	dd0e      	ble.n	8005dd8 <mg_json_get+0x274>
 8005dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dbe:	4413      	add	r3, r2
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	4998      	ldr	r1, [pc, #608]	; (8006024 <mg_json_get+0x4c0>)
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f00b fcee 	bl	80117a6 <memcmp>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <mg_json_get+0x274>
          i += 3;
 8005dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd2:	3303      	adds	r3, #3
 8005dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd6:	e06c      	b.n	8005eb2 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8005dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ddc:	2b6e      	cmp	r3, #110	; 0x6e
 8005dde:	d113      	bne.n	8005e08 <mg_json_get+0x2a4>
 8005de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de2:	3303      	adds	r3, #3
 8005de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de6:	429a      	cmp	r2, r3
 8005de8:	dd0e      	ble.n	8005e08 <mg_json_get+0x2a4>
 8005dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dee:	4413      	add	r3, r2
 8005df0:	2204      	movs	r2, #4
 8005df2:	498d      	ldr	r1, [pc, #564]	; (8006028 <mg_json_get+0x4c4>)
 8005df4:	4618      	mov	r0, r3
 8005df6:	f00b fcd6 	bl	80117a6 <memcmp>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <mg_json_get+0x2a4>
          i += 3;
 8005e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e02:	3303      	adds	r3, #3
 8005e04:	663b      	str	r3, [r7, #96]	; 0x60
 8005e06:	e054      	b.n	8005eb2 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8005e08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e0c:	2b66      	cmp	r3, #102	; 0x66
 8005e0e:	d113      	bne.n	8005e38 <mg_json_get+0x2d4>
 8005e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e12:	3304      	adds	r3, #4
 8005e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e16:	429a      	cmp	r2, r3
 8005e18:	dd0e      	ble.n	8005e38 <mg_json_get+0x2d4>
 8005e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e1e:	4413      	add	r3, r2
 8005e20:	2205      	movs	r2, #5
 8005e22:	4982      	ldr	r1, [pc, #520]	; (800602c <mg_json_get+0x4c8>)
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00b fcbe 	bl	80117a6 <memcmp>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <mg_json_get+0x2d4>
          i += 4;
 8005e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e32:	3304      	adds	r3, #4
 8005e34:	663b      	str	r3, [r7, #96]	; 0x60
 8005e36:	e03c      	b.n	8005eb2 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005e38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e3c:	2b2d      	cmp	r3, #45	; 0x2d
 8005e3e:	d007      	beq.n	8005e50 <mg_json_get+0x2ec>
 8005e40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e44:	2b2f      	cmp	r3, #47	; 0x2f
 8005e46:	d916      	bls.n	8005e76 <mg_json_get+0x312>
 8005e48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e4c:	2b39      	cmp	r3, #57	; 0x39
 8005e4e:	d812      	bhi.n	8005e76 <mg_json_get+0x312>
          int numlen = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8005e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e58:	18d0      	adds	r0, r2, r3
 8005e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f107 0210 	add.w	r2, r7, #16
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7ff fd13 	bl	8005890 <mg_atod>
          i += numlen - 1;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e70:	4413      	add	r3, r2
 8005e72:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005e74:	e01d      	b.n	8005eb2 <mg_json_get+0x34e>
        } else if (c == '"') {
 8005e76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e7a:	2b22      	cmp	r3, #34	; 0x22
 8005e7c:	d116      	bne.n	8005eac <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8005e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e80:	3301      	adds	r3, #1
 8005e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e84:	18d0      	adds	r0, r2, r3
 8005e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	4619      	mov	r1, r3
 8005e90:	f7ff fcba 	bl	8005808 <mg_pass_string>
 8005e94:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da01      	bge.n	8005ea0 <mg_json_get+0x33c>
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	e171      	b.n	8006184 <mg_json_get+0x620>
          i += n + 1;
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ea6:	4413      	add	r3, r2
 8005ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eaa:	e002      	b.n	8005eb2 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8005eac:	f06f 0301 	mvn.w	r3, #1
 8005eb0:	e168      	b.n	8006184 <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 8005eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d114      	bne.n	8005ee4 <mg_json_get+0x380>
 8005eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10e      	bne.n	8005ee4 <mg_json_get+0x380>
 8005ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d10a      	bne.n	8005ee4 <mg_json_get+0x380>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <mg_json_get+0x37c>
 8005ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee2:	e14f      	b.n	8006184 <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 8005ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d105      	bne.n	8005ef8 <mg_json_get+0x394>
 8005eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db02      	blt.n	8005ef8 <mg_json_get+0x394>
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 8005efe:	e137      	b.n	8006170 <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 8005f00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f04:	2b22      	cmp	r3, #34	; 0x22
 8005f06:	d170      	bne.n	8005fea <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8005f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f0e:	18d0      	adds	r0, r2, r3
 8005f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	4619      	mov	r1, r3
 8005f1a:	f7ff fc75 	bl	8005808 <mg_pass_string>
 8005f1e:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da01      	bge.n	8005f2a <mg_json_get+0x3c6>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	e12c      	b.n	8006184 <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8005f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	4413      	add	r3, r2
 8005f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f34:	429a      	cmp	r2, r3
 8005f36:	dc02      	bgt.n	8005f3e <mg_json_get+0x3da>
 8005f38:	f06f 0302 	mvn.w	r3, #2
 8005f3c:	e122      	b.n	8006184 <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8005f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f42:	429a      	cmp	r2, r3
 8005f44:	da02      	bge.n	8005f4c <mg_json_get+0x3e8>
 8005f46:	f06f 0302 	mvn.w	r3, #2
 8005f4a:	e11b      	b.n	8006184 <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8005f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d109      	bne.n	8005f68 <mg_json_get+0x404>
 8005f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f56:	3b01      	subs	r3, #1
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f60:	d002      	beq.n	8005f68 <mg_json_get+0x404>
 8005f62:	f06f 0302 	mvn.w	r3, #2
 8005f66:	e10d      	b.n	8006184 <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8005f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d133      	bne.n	8005fd8 <mg_json_get+0x474>
 8005f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f72:	3b01      	subs	r3, #1
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f7c:	d12c      	bne.n	8005fd8 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8005f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f80:	3301      	adds	r3, #1
 8005f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f84:	18d0      	adds	r0, r2, r3
 8005f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8e:	4619      	mov	r1, r3
 8005f90:	f00b fc48 	bl	8011824 <strncmp>
 8005f94:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d11e      	bne.n	8005fd8 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005f9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	4413      	add	r3, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d011      	beq.n	8005fd0 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005fac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	4413      	add	r3, r2
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b2e      	cmp	r3, #46	; 0x2e
 8005fbc:	d008      	beq.n	8005fd0 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8005fbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	4413      	add	r3, r2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4413      	add	r3, r2
 8005fca:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005fcc:	2b5b      	cmp	r3, #91	; 0x5b
 8005fce:	d103      	bne.n	8005fd8 <mg_json_get+0x474>
            pos += n;
 8005fd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	4413      	add	r3, r2
 8005fd6:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fde:	4413      	add	r3, r2
 8005fe0:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8005fe8:	e0c1      	b.n	800616e <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 8005fea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fee:	2b7d      	cmp	r3, #125	; 0x7d
 8005ff0:	d148      	bne.n	8006084 <mg_json_get+0x520>
          MG_EOO('}');
 8005ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d106      	bne.n	8006008 <mg_json_get+0x4a4>
 8005ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d002      	beq.n	8006008 <mg_json_get+0x4a4>
 8006002:	f06f 0302 	mvn.w	r3, #2
 8006006:	e0bd      	b.n	8006184 <mg_json_get+0x620>
 8006008:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800600c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800600e:	3b01      	subs	r3, #1
 8006010:	3368      	adds	r3, #104	; 0x68
 8006012:	443b      	add	r3, r7
 8006014:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006018:	3302      	adds	r3, #2
 800601a:	429a      	cmp	r2, r3
 800601c:	d008      	beq.n	8006030 <mg_json_get+0x4cc>
 800601e:	f06f 0301 	mvn.w	r3, #1
 8006022:	e0af      	b.n	8006184 <mg_json_get+0x620>
 8006024:	0801327c 	.word	0x0801327c
 8006028:	08013284 	.word	0x08013284
 800602c:	0801328c 	.word	0x0801328c
 8006030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006032:	3b01      	subs	r3, #1
 8006034:	65bb      	str	r3, [r7, #88]	; 0x58
 8006036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603a:	429a      	cmp	r2, r3
 800603c:	d114      	bne.n	8006068 <mg_json_get+0x504>
 800603e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10e      	bne.n	8006068 <mg_json_get+0x504>
 800604a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800604c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604e:	429a      	cmp	r2, r3
 8006050:	d10a      	bne.n	8006068 <mg_json_get+0x504>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <mg_json_get+0x500>
 8006058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800605a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006066:	e08d      	b.n	8006184 <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 8006068:	2303      	movs	r3, #3
 800606a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 800606e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006072:	429a      	cmp	r2, r3
 8006074:	d17b      	bne.n	800616e <mg_json_get+0x60a>
 8006076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006078:	2b00      	cmp	r3, #0
 800607a:	db78      	blt.n	800616e <mg_json_get+0x60a>
 800607c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607e:	3301      	adds	r3, #1
 8006080:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8006082:	e074      	b.n	800616e <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 8006084:	f06f 0301 	mvn.w	r3, #1
 8006088:	e07c      	b.n	8006184 <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 800608a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800608e:	2b3a      	cmp	r3, #58	; 0x3a
 8006090:	d103      	bne.n	800609a <mg_json_get+0x536>
          expecting = S_VALUE;
 8006092:	2300      	movs	r3, #0
 8006094:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006098:	e06a      	b.n	8006170 <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 800609a:	f06f 0301 	mvn.w	r3, #1
 800609e:	e071      	b.n	8006184 <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 80060a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dc02      	bgt.n	80060ac <mg_json_get+0x548>
          return MG_JSON_INVALID;
 80060a6:	f06f 0301 	mvn.w	r3, #1
 80060aa:	e06b      	b.n	8006184 <mg_json_get+0x620>
        } else if (c == ',') {
 80060ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060b0:	2b2c      	cmp	r3, #44	; 0x2c
 80060b2:	d10d      	bne.n	80060d0 <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 80060b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b6:	3b01      	subs	r3, #1
 80060b8:	3368      	adds	r3, #104	; 0x68
 80060ba:	443b      	add	r3, r7
 80060bc:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80060c0:	2b7b      	cmp	r3, #123	; 0x7b
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 80060ce:	e04f      	b.n	8006170 <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 80060d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060d4:	2b5d      	cmp	r3, #93	; 0x5d
 80060d6:	d003      	beq.n	80060e0 <mg_json_get+0x57c>
 80060d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060dc:	2b7d      	cmp	r3, #125	; 0x7d
 80060de:	d13f      	bne.n	8006160 <mg_json_get+0x5fc>
          MG_EOO('O');
 80060e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d106      	bne.n	80060f6 <mg_json_get+0x592>
 80060e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d002      	beq.n	80060f6 <mg_json_get+0x592>
 80060f0:	f06f 0302 	mvn.w	r3, #2
 80060f4:	e046      	b.n	8006184 <mg_json_get+0x620>
 80060f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80060fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fc:	3b01      	subs	r3, #1
 80060fe:	3368      	adds	r3, #104	; 0x68
 8006100:	443b      	add	r3, r7
 8006102:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006106:	3302      	adds	r3, #2
 8006108:	429a      	cmp	r2, r3
 800610a:	d002      	beq.n	8006112 <mg_json_get+0x5ae>
 800610c:	f06f 0301 	mvn.w	r3, #1
 8006110:	e038      	b.n	8006184 <mg_json_get+0x620>
 8006112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006114:	3b01      	subs	r3, #1
 8006116:	65bb      	str	r3, [r7, #88]	; 0x58
 8006118:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800611a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611c:	429a      	cmp	r2, r3
 800611e:	d114      	bne.n	800614a <mg_json_get+0x5e6>
 8006120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10e      	bne.n	800614a <mg_json_get+0x5e6>
 800612c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800612e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006130:	429a      	cmp	r2, r3
 8006132:	d10a      	bne.n	800614a <mg_json_get+0x5e6>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <mg_json_get+0x5e2>
 800613a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800613c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006148:	e01c      	b.n	8006184 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 800614a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800614c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614e:	429a      	cmp	r2, r3
 8006150:	d109      	bne.n	8006166 <mg_json_get+0x602>
 8006152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006154:	2b00      	cmp	r3, #0
 8006156:	db06      	blt.n	8006166 <mg_json_get+0x602>
 8006158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615a:	3301      	adds	r3, #1
 800615c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615e:	e002      	b.n	8006166 <mg_json_get+0x602>
          return MG_JSON_INVALID;
 8006160:	f06f 0301 	mvn.w	r3, #1
 8006164:	e00e      	b.n	8006184 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006166:	bf00      	nop
        break;
 8006168:	e002      	b.n	8006170 <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <mg_json_get+0x60c>
        break;
 800616e:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006172:	3301      	adds	r3, #1
 8006174:	663b      	str	r3, [r7, #96]	; 0x60
 8006176:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617a:	429a      	cmp	r2, r3
 800617c:	f6ff ad22 	blt.w	8005bc4 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006180:	f06f 0302 	mvn.w	r3, #2
}
 8006184:	4618      	mov	r0, r3
 8006186:	376c      	adds	r7, #108	; 0x6c
 8006188:	46bd      	mov	sp, r7
 800618a:	bd90      	pop	{r4, r7, pc}

0800618c <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b089      	sub	sp, #36	; 0x24
 8006190:	af00      	add	r7, sp, #0
 8006192:	f107 0408 	add.w	r4, r7, #8
 8006196:	e884 0003 	stmia.w	r4, {r0, r1}
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	f107 0108 	add.w	r1, r7, #8
 80061ac:	c903      	ldmia	r1, {r0, r1}
 80061ae:	f7ff fcd9 	bl	8005b64 <mg_json_get>
 80061b2:	61b8      	str	r0, [r7, #24]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	db25      	blt.n	8006206 <mg_json_get_num+0x7a>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 80061c2:	2b2d      	cmp	r3, #45	; 0x2d
 80061c4:	d00b      	beq.n	80061de <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	4413      	add	r3, r2
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b2f      	cmp	r3, #47	; 0x2f
 80061d0:	d919      	bls.n	8006206 <mg_json_get_num+0x7a>
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	4413      	add	r3, r2
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b39      	cmp	r3, #57	; 0x39
 80061dc:	d813      	bhi.n	8006206 <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00e      	beq.n	8006202 <mg_json_get_num+0x76>
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4413      	add	r3, r2
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fb4e 	bl	8005890 <mg_atod>
 80061f4:	eeb0 7a40 	vmov.f32	s14, s0
 80061f8:	eef0 7a60 	vmov.f32	s15, s1
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8006202:	2301      	movs	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	2b00      	cmp	r3, #0
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
}
 8006212:	4618      	mov	r0, r3
 8006214:	3724      	adds	r7, #36	; 0x24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd90      	pop	{r4, r7, pc}
	...

0800621c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8006226:	4b05      	ldr	r3, [pc, #20]	; (800623c <logc+0x20>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a05      	ldr	r2, [pc, #20]	; (8006240 <logc+0x24>)
 800622c:	6811      	ldr	r1, [r2, #0]
 800622e:	79fa      	ldrb	r2, [r7, #7]
 8006230:	4610      	mov	r0, r2
 8006232:	4798      	blx	r3
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	2000023c 	.word	0x2000023c
 8006240:	200005c8 	.word	0x200005c8

08006244 <logs>:

static void logs(const char *buf, size_t len) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e009      	b.n	8006268 <logs+0x24>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4413      	add	r3, r2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff ffdd 	bl	800621c <logc>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d3f1      	bcc.n	8006254 <logs+0x10>
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <mg_log_set>:

void mg_log_set(int log_level) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 8006284:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <mg_log_set+0x34>)
 8006286:	f640 22c8 	movw	r2, #2760	; 0xac8
 800628a:	490a      	ldr	r1, [pc, #40]	; (80062b4 <mg_log_set+0x38>)
 800628c:	2003      	movs	r0, #3
 800628e:	f000 f817 	bl	80062c0 <mg_log_prefix>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <mg_log_set+0x24>
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4807      	ldr	r0, [pc, #28]	; (80062b8 <mg_log_set+0x3c>)
 800629c:	f000 f86a 	bl	8006374 <mg_log>
  s_level = log_level;
 80062a0:	4a06      	ldr	r2, [pc, #24]	; (80062bc <mg_log_set+0x40>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6013      	str	r3, [r2, #0]
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	08013f78 	.word	0x08013f78
 80062b4:	08012658 	.word	0x08012658
 80062b8:	08013294 	.word	0x08013294
 80062bc:	20000238 	.word	0x20000238

080062c0 <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b099      	sub	sp, #100	; 0x64
 80062c4:	af06      	add	r7, sp, #24
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 80062ce:	4b27      	ldr	r3, [pc, #156]	; (800636c <mg_log_prefix+0xac>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	dc43      	bgt.n	8006360 <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 80062d8:	212f      	movs	r1, #47	; 0x2f
 80062da:	68b8      	ldr	r0, [r7, #8]
 80062dc:	f00b fab4 	bl	8011848 <strrchr>
 80062e0:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 80062e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <mg_log_prefix+0x32>
 80062e8:	215c      	movs	r1, #92	; 0x5c
 80062ea:	68b8      	ldr	r0, [r7, #8]
 80062ec:	f00b faac 	bl	8011848 <strrchr>
 80062f0:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 80062f2:	f001 fd55 	bl	8007da0 <mg_millis>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d002      	beq.n	8006306 <mg_log_prefix+0x46>
 8006300:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006302:	3101      	adds	r1, #1
 8006304:	e000      	b.n	8006308 <mg_log_prefix+0x48>
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	f107 0414 	add.w	r4, r7, #20
 800630c:	6838      	ldr	r0, [r7, #0]
 800630e:	9005      	str	r0, [sp, #20]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	9004      	str	r0, [sp, #16]
 8006314:	9103      	str	r1, [sp, #12]
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	9102      	str	r1, [sp, #8]
 800631a:	e9cd 2300 	strd	r2, r3, [sp]
 800631e:	4a14      	ldr	r2, [pc, #80]	; (8006370 <mg_log_prefix+0xb0>)
 8006320:	2129      	movs	r1, #41	; 0x29
 8006322:	4620      	mov	r0, r4
 8006324:	f000 fb4a 	bl	80069bc <mg_snprintf>
 8006328:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800632a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632c:	2b27      	cmp	r3, #39	; 0x27
 800632e:	d90a      	bls.n	8006346 <mg_log_prefix+0x86>
 8006330:	2327      	movs	r3, #39	; 0x27
 8006332:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 8006334:	e007      	b.n	8006346 <mg_log_prefix+0x86>
 8006336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	643a      	str	r2, [r7, #64]	; 0x40
 800633c:	3348      	adds	r3, #72	; 0x48
 800633e:	443b      	add	r3, r7
 8006340:	2220      	movs	r2, #32
 8006342:	f803 2c34 	strb.w	r2, [r3, #-52]
 8006346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006348:	2b28      	cmp	r3, #40	; 0x28
 800634a:	d9f4      	bls.n	8006336 <mg_log_prefix+0x76>
    logs(buf, n - 1);
 800634c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634e:	1e5a      	subs	r2, r3, #1
 8006350:	f107 0314 	add.w	r3, r7, #20
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff ff74 	bl	8006244 <logs>
    return true;
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <mg_log_prefix+0xa2>
  } else {
    return false;
 8006360:	2300      	movs	r3, #0
  }
}
 8006362:	4618      	mov	r0, r3
 8006364:	374c      	adds	r7, #76	; 0x4c
 8006366:	46bd      	mov	sp, r7
 8006368:	bd90      	pop	{r4, r7, pc}
 800636a:	bf00      	nop
 800636c:	20000238 	.word	0x20000238
 8006370:	080132ac 	.word	0x080132ac

08006374 <mg_log>:

void mg_log(const char *fmt, ...) {
 8006374:	b40f      	push	{r0, r1, r2, r3}
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800637c:	f107 0314 	add.w	r3, r7, #20
 8006380:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <mg_log+0x34>)
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <mg_log+0x38>)
 8006388:	6819      	ldr	r1, [r3, #0]
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	f7fb ff61 	bl	8002254 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8006392:	2102      	movs	r1, #2
 8006394:	4806      	ldr	r0, [pc, #24]	; (80063b0 <mg_log+0x3c>)
 8006396:	f7ff ff55 	bl	8006244 <logs>
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a4:	b004      	add	sp, #16
 80063a6:	4770      	bx	lr
 80063a8:	2000023c 	.word	0x2000023c
 80063ac:	200005c8 	.word	0x200005c8
 80063b0:	080127f0 	.word	0x080127f0

080063b4 <nibble>:

static unsigned char nibble(unsigned c) {
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b09      	cmp	r3, #9
 80063c0:	d804      	bhi.n	80063cc <nibble+0x18>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	3330      	adds	r3, #48	; 0x30
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e003      	b.n	80063d4 <nibble+0x20>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	3357      	adds	r3, #87	; 0x57
 80063d2:	b2db      	uxtb	r3, r3
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 80063f4:	2300      	movs	r3, #0
 80063f6:	623b      	str	r3, [r7, #32]
 80063f8:	e07a      	b.n	80064f0 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	2b00      	cmp	r3, #0
 8006402:	d13a      	bne.n	800647a <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00f      	beq.n	800642a <mg_hexdump+0x4a>
 800640a:	2102      	movs	r1, #2
 800640c:	484c      	ldr	r0, [pc, #304]	; (8006540 <mg_hexdump+0x160>)
 800640e:	f7ff ff19 	bl	8006244 <logs>
 8006412:	f107 030c 	add.w	r3, r7, #12
 8006416:	2110      	movs	r1, #16
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff ff13 	bl	8006244 <logs>
 800641e:	200a      	movs	r0, #10
 8006420:	f7ff fefc 	bl	800621c <logc>
 8006424:	2300      	movs	r3, #0
 8006426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	0b1b      	lsrs	r3, r3, #12
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff ffbe 	bl	80063b4 <nibble>
 8006438:	4603      	mov	r3, r0
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff feee 	bl	800621c <logc>
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff ffb3 	bl	80063b4 <nibble>
 800644e:	4603      	mov	r3, r0
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fee3 	bl	800621c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff ffa8 	bl	80063b4 <nibble>
 8006464:	4603      	mov	r3, r0
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fed8 	bl	800621c <logc>
 800646c:	2030      	movs	r0, #48	; 0x30
 800646e:	f7ff fed5 	bl	800621c <logc>
 8006472:	2103      	movs	r1, #3
 8006474:	4833      	ldr	r0, [pc, #204]	; (8006544 <mg_hexdump+0x164>)
 8006476:	f7ff fee5 	bl	8006244 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	4413      	add	r3, r2
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	091b      	lsrs	r3, r3, #4
 8006484:	b2db      	uxtb	r3, r3
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff94 	bl	80063b4 <nibble>
 800648c:	4603      	mov	r3, r0
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fec4 	bl	800621c <logc>
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	4413      	add	r3, r2
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff87 	bl	80063b4 <nibble>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff feb7 	bl	800621c <logc>
    logc(' ');                                         // Space after hex number
 80064ae:	2020      	movs	r0, #32
 80064b0:	f7ff feb4 	bl	800621c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	4413      	add	r3, r2
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b1f      	cmp	r3, #31
 80064be:	d90a      	bls.n	80064d6 <mg_hexdump+0xf6>
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	4413      	add	r3, r2
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b7e      	cmp	r3, #126	; 0x7e
 80064ca:	d804      	bhi.n	80064d6 <mg_hexdump+0xf6>
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	4413      	add	r3, r2
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	e000      	b.n	80064d8 <mg_hexdump+0xf8>
 80064d6:	222e      	movs	r2, #46	; 0x2e
 80064d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064dc:	1c59      	adds	r1, r3, #1
 80064de:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80064e2:	3328      	adds	r3, #40	; 0x28
 80064e4:	443b      	add	r3, r7
 80064e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	3301      	adds	r3, #1
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d380      	bcc.n	80063fa <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80064f8:	e00d      	b.n	8006516 <mg_hexdump+0x136>
 80064fa:	2103      	movs	r1, #3
 80064fc:	4811      	ldr	r0, [pc, #68]	; (8006544 <mg_hexdump+0x164>)
 80064fe:	f7ff fea1 	bl	8006244 <logs>
 8006502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800650c:	3328      	adds	r3, #40	; 0x28
 800650e:	443b      	add	r3, r7
 8006510:	2220      	movs	r2, #32
 8006512:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8006516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d9ed      	bls.n	80064fa <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 800651e:	2102      	movs	r1, #2
 8006520:	4807      	ldr	r0, [pc, #28]	; (8006540 <mg_hexdump+0x160>)
 8006522:	f7ff fe8f 	bl	8006244 <logs>
 8006526:	f107 030c 	add.w	r3, r7, #12
 800652a:	2110      	movs	r1, #16
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fe89 	bl	8006244 <logs>
 8006532:	200a      	movs	r0, #10
 8006534:	f7ff fe72 	bl	800621c <logc>
}
 8006538:	bf00      	nop
 800653a:	3728      	adds	r7, #40	; 0x28
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	080132c0 	.word	0x080132c0
 8006544:	080132c4 	.word	0x080132c4

08006548 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006558:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	4805      	ldr	r0, [pc, #20]	; (800657c <mg_vprintf+0x34>)
 8006566:	f7fb fe75 	bl	8002254 <mg_vxprintf>
  return c->send.len - old;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1ad3      	subs	r3, r2, r3
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	0800694d 	.word	0x0800694d

08006580 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8006580:	b40e      	push	{r1, r2, r3}
 8006582:	b580      	push	{r7, lr}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800658e:	f107 0320 	add.w	r3, r7, #32
 8006592:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8006594:	f107 0308 	add.w	r3, r7, #8
 8006598:	461a      	mov	r2, r3
 800659a:	69f9      	ldr	r1, [r7, #28]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff ffd3 	bl	8006548 <mg_vprintf>
 80065a2:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80065a4:	68fb      	ldr	r3, [r7, #12]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b0:	b003      	add	sp, #12
 80065b2:	4770      	bx	lr

080065b4 <mg_alloc_conn>:
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
         mg_aton6(str, addr);
}

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	3390      	adds	r3, #144	; 0x90
 80065c2:	4619      	mov	r1, r3
 80065c4:	2001      	movs	r0, #1
 80065c6:	f00a fe3b 	bl	8011240 <calloc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d013      	beq.n	80065fc <mg_alloc_conn+0x48>
    c->mgr = mgr;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e0:	645a      	str	r2, [r3, #68]	; 0x44
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	61da      	str	r2, [r3, #28]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fb f8cf 	bl	80017b4 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	e002      	b.n	8006624 <mg_close_conn+0x1c>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	429a      	cmp	r2, r3
 800662c:	d1f7      	bne.n	800661e <mg_close_conn+0x16>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d103      	bne.n	800664a <mg_close_conn+0x42>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d103      	bne.n	800665e <mg_close_conn+0x56>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800665e:	2200      	movs	r2, #0
 8006660:	2109      	movs	r1, #9
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fb f8c5 	bl	80017f2 <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <mg_close_conn+0xb8>)
 800666a:	f640 626c 	movw	r2, #3692	; 0xe6c
 800666e:	4915      	ldr	r1, [pc, #84]	; (80066c4 <mg_close_conn+0xbc>)
 8006670:	2003      	movs	r0, #3
 8006672:	f7ff fe25 	bl	80062c0 <mg_log_prefix>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <mg_close_conn+0x84>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	461a      	mov	r2, r3
 8006686:	4810      	ldr	r0, [pc, #64]	; (80066c8 <mg_close_conn+0xc0>)
 8006688:	f7ff fe74 	bl	8006374 <mg_log>

  mg_tls_free(c);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 f9bd 	bl	8007a0c <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3338      	adds	r3, #56	; 0x38
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff f865 	bl	8005766 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3348      	adds	r3, #72	; 0x48
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff f860 	bl	8005766 <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 80066a6:	2290      	movs	r2, #144	; 0x90
 80066a8:	2100      	movs	r1, #0
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f00b f8a5 	bl	80117fa <memset>
  free(c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f00a fdeb 	bl	801128c <free>
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	08013f84 	.word	0x08013f84
 80066c4:	08012658 	.word	0x08012658
 80066c8:	0801335c 	.word	0x0801335c

080066cc <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff ff68 	bl	80065b4 <mg_alloc_conn>
 80066e4:	6178      	str	r0, [r7, #20]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10e      	bne.n	800670a <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 80066ec:	4b40      	ldr	r3, [pc, #256]	; (80067f0 <mg_listen+0x124>)
 80066ee:	f640 6292 	movw	r2, #3730	; 0xe92
 80066f2:	4940      	ldr	r1, [pc, #256]	; (80067f4 <mg_listen+0x128>)
 80066f4:	2001      	movs	r0, #1
 80066f6:	f7ff fde3 	bl	80062c0 <mg_log_prefix>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d071      	beq.n	80067e4 <mg_listen+0x118>
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	483d      	ldr	r0, [pc, #244]	; (80067f8 <mg_listen+0x12c>)
 8006704:	f7ff fe36 	bl	8006374 <mg_log>
 8006708:	e06c      	b.n	80067e4 <mg_listen+0x118>
  } else if (!mg_open_listener(c, url)) {
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f004 fab1 	bl	800ac74 <mg_open_listener>
 8006712:	4603      	mov	r3, r0
 8006714:	f083 0301 	eor.w	r3, r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d018      	beq.n	8006750 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800671e:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <mg_listen+0x124>)
 8006720:	f640 6294 	movw	r2, #3732	; 0xe94
 8006724:	4933      	ldr	r1, [pc, #204]	; (80067f4 <mg_listen+0x128>)
 8006726:	2001      	movs	r0, #1
 8006728:	f7ff fdca 	bl	80062c0 <mg_log_prefix>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <mg_listen+0x78>
 8006732:	f00b f8f7 	bl	8011924 <__errno>
 8006736:	4603      	mov	r3, r0
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	482f      	ldr	r0, [pc, #188]	; (80067fc <mg_listen+0x130>)
 8006740:	f7ff fe18 	bl	8006374 <mg_log>
    free(c);
 8006744:	6978      	ldr	r0, [r7, #20]
 8006746:	f00a fda1 	bl	801128c <free>
    c = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e049      	b.n	80067e4 <mg_listen+0x118>
  } else {
    c->is_listening = 1;
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8006756:	f043 0301 	orr.w	r3, r3, #1
 800675a:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800675e:	2204      	movs	r2, #4
 8006760:	4927      	ldr	r1, [pc, #156]	; (8006800 <mg_listen+0x134>)
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	f00b f85e 	bl	8011824 <strncmp>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	bf0c      	ite	eq
 800676e:	2301      	moveq	r3, #1
 8006770:	2300      	movne	r3, #0
 8006772:	b2d9      	uxtb	r1, r3
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800677a:	f361 0300 	bfi	r3, r1, #0, #1
 800677e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 800679c:	2200      	movs	r2, #0
 800679e:	2101      	movs	r1, #1
 80067a0:	6978      	ldr	r0, [r7, #20]
 80067a2:	f7fb f826 	bl	80017f2 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1; // Accepted connection must
 80067a6:	68b8      	ldr	r0, [r7, #8]
 80067a8:	f001 f96c 	bl	8007a84 <mg_url_is_ssl>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <mg_listen+0xf4>
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 80067b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067bc:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <mg_listen+0x124>)
 80067c2:	f640 629f 	movw	r2, #3743	; 0xe9f
 80067c6:	490b      	ldr	r1, [pc, #44]	; (80067f4 <mg_listen+0x128>)
 80067c8:	2003      	movs	r0, #3
 80067ca:	f7ff fd79 	bl	80062c0 <mg_log_prefix>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d007      	beq.n	80067e4 <mg_listen+0x118>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4809      	ldr	r0, [pc, #36]	; (8006804 <mg_listen+0x138>)
 80067e0:	f7ff fdc8 	bl	8006374 <mg_log>
  }
  return c;
 80067e4:	697b      	ldr	r3, [r7, #20]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	08013f94 	.word	0x08013f94
 80067f4:	08012658 	.word	0x08012658
 80067f8:	08013384 	.word	0x08013384
 80067fc:	0801338c 	.word	0x0801338c
 8006800:	0801337c 	.word	0x0801337c
 8006804:	08012764 	.word	0x08012764

08006808 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	; 0x28
 800680c:	af04      	add	r7, sp, #16
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8006814:	2128      	movs	r1, #40	; 0x28
 8006816:	2001      	movs	r0, #1
 8006818:	f00a fd12 	bl	8011240 <calloc>
 800681c:	4603      	mov	r3, r0
 800681e:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d014      	beq.n	8006850 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	f000 ffd2 	bl	80077e6 <mg_timer_init>
    t->id = mgr->timerid++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	6211      	str	r1, [r2, #32]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	6013      	str	r3, [r2, #0]
  }
  return t;
 8006850:	697b      	ldr	r3, [r7, #20]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8006864:	2244      	movs	r2, #68	; 0x44
 8006866:	2100      	movs	r1, #0
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f00a ffc6 	bl	80117fa <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f04f 32ff 	mov.w	r2, #4294967295
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800687c:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <mg_mgr_init+0x38>)
 8006882:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a04      	ldr	r2, [pc, #16]	; (8006898 <mg_mgr_init+0x3c>)
 8006888:	60da      	str	r2, [r3, #12]
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	080133bc 	.word	0x080133bc
 8006898:	080133d0 	.word	0x080133d0

0800689c <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	6039      	str	r1, [r7, #0]
 80068a6:	71fb      	strb	r3, [r7, #7]
 80068a8:	4613      	mov	r3, r2
 80068aa:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80068b0:	79bb      	ldrb	r3, [r7, #6]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <mg_pfn_iobuf_private+0x36>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	1c9a      	adds	r2, r3, #2
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d906      	bls.n	80068d2 <mg_pfn_iobuf_private+0x36>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	3302      	adds	r3, #2
 80068ca:	4619      	mov	r1, r3
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7fe fe75 	bl	80055bc <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	1c9a      	adds	r2, r3, #2
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d811      	bhi.n	8006904 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	1c58      	adds	r0, r3, #1
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	6088      	str	r0, [r1, #8]
 80068ee:	4413      	add	r3, r2
 80068f0:	79fa      	ldrb	r2, [r7, #7]
 80068f2:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8006902:	e00f      	b.n	8006924 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d209      	bcs.n	8006924 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	1c58      	adds	r0, r3, #1
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	6088      	str	r0, [r1, #8]
 800691e:	4413      	add	r3, r2
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2200      	movs	r2, #0
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff ffac 	bl	800689c <mg_pfn_iobuf_private>
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	6039      	str	r1, [r7, #0]
 8006956:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	2201      	movs	r2, #1
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff ff9c 	bl	800689c <mg_pfn_iobuf_private>
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	; 0x28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	2300      	movs	r3, #0
 8006988:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800698a:	f107 0114 	add.w	r1, r7, #20
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4809      	ldr	r0, [pc, #36]	; (80069b8 <mg_vsnprintf+0x4c>)
 8006994:	f7fb fc5e 	bl	8002254 <mg_vxprintf>
 8006998:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 800699a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d204      	bcs.n	80069ac <mg_vsnprintf+0x40>
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	4413      	add	r3, r2
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]
  return n;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	0800692d 	.word	0x0800692d

080069bc <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 80069bc:	b40c      	push	{r2, r3}
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 80069c8:	f107 031c 	add.w	r3, r7, #28
 80069cc:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff ffc8 	bl	800696c <mg_vsnprintf>
 80069dc:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 80069de:	68fb      	ldr	r3, [r7, #12]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ea:	b002      	add	sp, #8
 80069ec:	4770      	bx	lr

080069ee <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	4603      	mov	r3, r0
 80069f6:	6039      	str	r1, [r7, #0]
 80069f8:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f00a fe87 	bl	8011710 <putchar>
  (void) param;
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af04      	add	r7, sp, #16
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3301      	adds	r3, #1
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3303      	adds	r3, #3
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	9302      	str	r3, [sp, #8]
 8006a36:	9101      	str	r1, [sp, #4]
 8006a38:	9200      	str	r2, [sp, #0]
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <print_ip4+0x44>)
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7fb fbec 	bl	800221e <mg_xprintf>
 8006a46:	4603      	mov	r3, r0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	080133f0 	.word	0x080133f0

08006a54 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8006a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a58:	b08e      	sub	sp, #56	; 0x38
 8006a5a:	af08      	add	r7, sp, #32
 8006a5c:	6178      	str	r0, [r7, #20]
 8006a5e:	6139      	str	r1, [r7, #16]
 8006a60:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f949 	bl	8007cfe <mg_ntohs>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3302      	adds	r3, #2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f941 	bl	8007cfe <mg_ntohs>
 8006a7c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a7e:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3304      	adds	r3, #4
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f939 	bl	8007cfe <mg_ntohs>
 8006a8c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a8e:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3306      	adds	r3, #6
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f931 	bl	8007cfe <mg_ntohs>
 8006a9c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a9e:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f929 	bl	8007cfe <mg_ntohs>
 8006aac:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006aae:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	330a      	adds	r3, #10
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f921 	bl	8007cfe <mg_ntohs>
 8006abc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006abe:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	330c      	adds	r3, #12
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 f919 	bl	8007cfe <mg_ntohs>
 8006acc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006ace:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	330e      	adds	r3, #14
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 f911 	bl	8007cfe <mg_ntohs>
 8006adc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006ade:	9306      	str	r3, [sp, #24]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	9205      	str	r2, [sp, #20]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	9204      	str	r2, [sp, #16]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	9303      	str	r3, [sp, #12]
 8006aec:	9602      	str	r6, [sp, #8]
 8006aee:	9501      	str	r5, [sp, #4]
 8006af0:	9400      	str	r4, [sp, #0]
 8006af2:	4643      	mov	r3, r8
 8006af4:	4a05      	ldr	r2, [pc, #20]	; (8006b0c <print_ip6+0xb8>)
 8006af6:	6939      	ldr	r1, [r7, #16]
 8006af8:	6978      	ldr	r0, [r7, #20]
 8006afa:	f7fb fb90 	bl	800221e <mg_xprintf>
 8006afe:	4603      	mov	r3, r0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b0a:	bf00      	nop
 8006b0c:	080133fc 	.word	0x080133fc

08006b10 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	1d19      	adds	r1, r3, #4
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff ff6c 	bl	8006a0c <print_ip4>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	1d19      	adds	r1, r3, #4
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6011      	str	r1, [r2, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	7c9b      	ldrb	r3, [r3, #18]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <mg_print_ip+0x32>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	461a      	mov	r2, r3
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff ff74 	bl	8006a54 <print_ip6>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	e006      	b.n	8006b7e <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff ff48 	bl	8006a0c <print_ip4>
 8006b7c:	4603      	mov	r3, r0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6011      	str	r1, [r2, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	8a1b      	ldrh	r3, [r3, #16]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 f8a9 	bl	8007cfe <mg_ntohs>
 8006bac:	4603      	mov	r3, r0
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <mg_print_ip_port+0x44>)
 8006bb6:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <mg_print_ip_port+0x48>)
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7fb fb2f 	bl	800221e <mg_xprintf>
 8006bc0:	4603      	mov	r3, r0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	08006b3f 	.word	0x08006b3f
 8006bd0:	08013418 	.word	0x08013418

08006bd4 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8006bd4:	b5b0      	push	{r4, r5, r7, lr}
 8006bd6:	b08c      	sub	sp, #48	; 0x30
 8006bd8:	af06      	add	r7, sp, #24
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	1d19      	adds	r1, r3, #4
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6011      	str	r1, [r2, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3302      	adds	r3, #2
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	3303      	adds	r3, #3
 8006c08:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006c0a:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006c12:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	3305      	adds	r3, #5
 8006c18:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	9403      	str	r4, [sp, #12]
 8006c1e:	9002      	str	r0, [sp, #8]
 8006c20:	9101      	str	r1, [sp, #4]
 8006c22:	9200      	str	r2, [sp, #0]
 8006c24:	462b      	mov	r3, r5
 8006c26:	4a05      	ldr	r2, [pc, #20]	; (8006c3c <mg_print_mac+0x68>)
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7fb faf7 	bl	800221e <mg_xprintf>
 8006c30:	4603      	mov	r3, r0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bdb0      	pop	{r4, r5, r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08013420 	.word	0x08013420

08006c40 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8006c4c:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <mg_esc+0x74>)
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	4b19      	ldr	r3, [pc, #100]	; (8006cb8 <mg_esc+0x78>)
 8006c52:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <mg_esc+0x1e>
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	e000      	b.n	8006c60 <mg_esc+0x20>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e01b      	b.n	8006c9c <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d112      	bne.n	8006c96 <mg_esc+0x56>
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <mg_esc+0x46>
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4413      	add	r3, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	e00f      	b.n	8006ca6 <mg_esc+0x66>
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4413      	add	r3, r2
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	e007      	b.n	8006ca6 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1df      	bne.n	8006c64 <mg_esc+0x24>
  }
  return 0;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	0801326c 	.word	0x0801326c
 8006cb8:	08013274 	.word	0x08013274

08006cbc <mg_escape>:

static char mg_escape(int c) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff ffba 	bl	8006c40 <mg_esc>
 8006ccc:	4603      	mov	r3, r0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e023      	b.n	8006d3a <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff ffde 	bl	8006cbc <mg_escape>
 8006d00:	4603      	mov	r3, r0
 8006d02:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	205c      	movs	r0, #92	; 0x5c
 8006d10:	4798      	blx	r3
 8006d12:	7dfa      	ldrb	r2, [r7, #23]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e007      	b.n	8006d34 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	3301      	adds	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d205      	bcs.n	8006d4e <qcpy+0x78>
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1d1      	bne.n	8006cf2 <qcpy+0x1c>
    }
  }
  return i + extra;
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	4413      	add	r3, r2
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3720      	adds	r7, #32
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	1d19      	adds	r1, r3, #4
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6011      	str	r1, [r2, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	1d19      	adds	r1, r3, #4
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6011      	str	r1, [r2, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <mg_print_esc+0x42>
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <mg_print_esc+0x3e>
 8006d90:	6938      	ldr	r0, [r7, #16]
 8006d92:	f7f9 fa9d 	bl	80002d0 <strlen>
 8006d96:	4603      	mov	r3, r0
 8006d98:	e000      	b.n	8006d9c <mg_print_esc+0x40>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff ff96 	bl	8006cd6 <qcpy>
 8006daa:	4603      	mov	r3, r0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8006dc0:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	4413      	add	r3, r2
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d906      	bls.n	8006df2 <mg_queue_read_len+0x3e>
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <mg_queue_read_len+0x48>)
 8006de6:	4a06      	ldr	r2, [pc, #24]	; (8006e00 <mg_queue_read_len+0x4c>)
 8006de8:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8006dec:	4805      	ldr	r0, [pc, #20]	; (8006e04 <mg_queue_read_len+0x50>)
 8006dee:	f00a fa05 	bl	80111fc <__assert_func>
  return n;
 8006df2:	68fb      	ldr	r3, [r7, #12]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	08013484 	.word	0x08013484
 8006e00:	08013fa0 	.word	0x08013fa0
 8006e04:	08012658 	.word	0x08012658

08006e08 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8006e24:	f3bf 8f5b 	dmb	ish
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	2308      	movs	r3, #8
 8006e46:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d312      	bcc.n	8006e7a <mg_queue_book+0x46>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	441a      	add	r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	441a      	add	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d808      	bhi.n	8006e7a <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	1ad2      	subs	r2, r2, r3
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	e011      	b.n	8006e9e <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d30b      	bcc.n	8006e9e <mg_queue_book+0x6a>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d206      	bcs.n	8006e9e <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8006e90:	2100      	movs	r1, #0
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff ffb8 	bl	8006e08 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68da      	ldr	r2, [r3, #12]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	441a      	add	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d207      	bcs.n	8006ec2 <mg_queue_book+0x8e>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <mg_queue_book+0xa4>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	601a      	str	r2, [r3, #0]
  return space;
 8006ed8:	697b      	ldr	r3, [r7, #20]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d013      	beq.n	8006f26 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff ff58 	bl	8006db4 <mg_queue_read_len>
 8006f04:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10c      	bne.n	8006f26 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d903      	bls.n	8006f26 <mg_queue_next+0x42>
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff ff48 	bl	8006db4 <mg_queue_read_len>
 8006f24:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <mg_queue_next+0x58>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	3304      	adds	r3, #4
 8006f36:	441a      	add	r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	441a      	add	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d906      	bls.n	8006f5a <mg_queue_next+0x76>
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <mg_queue_next+0x80>)
 8006f4e:	4a06      	ldr	r2, [pc, #24]	; (8006f68 <mg_queue_next+0x84>)
 8006f50:	f640 71e6 	movw	r1, #4070	; 0xfe6
 8006f54:	4805      	ldr	r0, [pc, #20]	; (8006f6c <mg_queue_next+0x88>)
 8006f56:	f00a f951 	bl	80111fc <__assert_func>
  return len;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	080134a8 	.word	0x080134a8
 8006f68:	08013fb4 	.word	0x08013fb4
 8006f6c:	08012658 	.word	0x08012658

08006f70 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <mg_queue_add+0x1e>
 8006f80:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <mg_queue_add+0x60>)
 8006f82:	4a14      	ldr	r2, [pc, #80]	; (8006fd4 <mg_queue_add+0x64>)
 8006f84:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8006f88:	4813      	ldr	r0, [pc, #76]	; (8006fd8 <mg_queue_add+0x68>)
 8006f8a:	f00a f937 	bl	80111fc <__assert_func>
  mg_queue_write_len(q, len);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff ff39 	bl	8006e08 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f103 0208 	add.w	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d906      	bls.n	8006fb8 <mg_queue_add+0x48>
 8006faa:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <mg_queue_add+0x6c>)
 8006fac:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <mg_queue_add+0x64>)
 8006fae:	f640 71ed 	movw	r1, #4077	; 0xfed
 8006fb2:	4809      	ldr	r0, [pc, #36]	; (8006fd8 <mg_queue_add+0x68>)
 8006fb4:	f00a f922 	bl	80111fc <__assert_func>
  q->head += len + sizeof(uint32_t);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60da      	str	r2, [r3, #12]
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	080134c4 	.word	0x080134c4
 8006fd4:	08013fc4 	.word	0x08013fc4
 8006fd8:	08012658 	.word	0x08012658
 8006fdc:	080134cc 	.word	0x080134cc

08006fe0 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	1d1a      	adds	r2, r3, #4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	1d1a      	adds	r2, r3, #4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	429a      	cmp	r2, r3
 8007004:	d906      	bls.n	8007014 <mg_queue_del+0x34>
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <mg_queue_del+0x3c>)
 8007008:	4a05      	ldr	r2, [pc, #20]	; (8007020 <mg_queue_del+0x40>)
 800700a:	f640 71f3 	movw	r1, #4083	; 0xff3
 800700e:	4805      	ldr	r0, [pc, #20]	; (8007024 <mg_queue_del+0x44>)
 8007010:	f00a f8f4 	bl	80111fc <__assert_func>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	080134fc 	.word	0x080134fc
 8007020:	08013fd4 	.word	0x08013fd4
 8007024:	08012658 	.word	0x08012658

08007028 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <mg_http_serve_ssi+0x24>)
 8007036:	2200      	movs	r2, #0
 8007038:	f240 11f5 	movw	r1, #501	; 0x1f5
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7fd f847 	bl	80040d0 <mg_http_reply>
  (void) root, (void) fullpath;
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	080136ac 	.word	0x080136ac

08007050 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	60bb      	str	r3, [r7, #8]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d004      	beq.n	800706e <mg_str_s+0x1e>
 8007064:	6838      	ldr	r0, [r7, #0]
 8007066:	f7f9 f933 	bl	80002d0 <strlen>
 800706a:	4603      	mov	r3, r0
 800706c:	e000      	b.n	8007070 <mg_str_s+0x20>
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
  return str;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	461a      	mov	r2, r3
 8007076:	f107 0308 	add.w	r3, r7, #8
 800707a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800707e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800708a:	b480      	push	{r7}
 800708c:	b087      	sub	sp, #28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	617b      	str	r3, [r7, #20]
  return str;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	461a      	mov	r2, r3
 80070a2:	f107 0310 	add.w	r3, r7, #16
 80070a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80070aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <mg_lower>:

int mg_lower(const char *s) {
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  int c = *s;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	dd05      	ble.n	80070da <mg_lower+0x20>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b5a      	cmp	r3, #90	; 0x5a
 80070d2:	dc02      	bgt.n	80070da <mg_lower+0x20>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3320      	adds	r3, #32
 80070d8:	60fb      	str	r3, [r7, #12]
  return c;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  int diff = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01d      	beq.n	800713a <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	60fa      	str	r2, [r7, #12]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ffd8 	bl	80070ba <mg_lower>
 800710a:	4604      	mov	r4, r0
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	60ba      	str	r2, [r7, #8]
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff ffd1 	bl	80070ba <mg_lower>
 8007118:	4603      	mov	r3, r0
 800711a:	1ae3      	subs	r3, r4, r3
 800711c:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <mg_ncasecmp+0x52>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3b01      	subs	r3, #1
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <mg_ncasecmp+0x52>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3b01      	subs	r3, #1
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e1      	bne.n	80070fe <mg_ncasecmp+0x16>
  return diff;
 800713a:	697b      	ldr	r3, [r7, #20]
}
 800713c:	4618      	mov	r0, r3
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd90      	pop	{r4, r7, pc}

08007144 <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 800714e:	6838      	ldr	r0, [r7, #0]
 8007150:	f7f9 f8be 	bl	80002d0 <strlen>
 8007154:	6178      	str	r0, [r7, #20]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	4293      	cmp	r3, r2
 8007166:	bf28      	it	cs
 8007168:	4613      	movcs	r3, r2
 800716a:	461a      	mov	r2, r3
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	f00a fb59 	bl	8011824 <strncmp>
 8007172:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d103      	bne.n	8007182 <mg_vcmp+0x3e>
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	e000      	b.n	8007184 <mg_vcmp+0x40>
  return r;
 8007182:	68fb      	ldr	r3, [r7, #12]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 8007196:	6838      	ldr	r0, [r7, #0]
 8007198:	f7f9 f89a 	bl	80002d0 <strlen>
 800719c:	6178      	str	r0, [r7, #20]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6818      	ldr	r0, [r3, #0]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bf28      	it	cs
 80071b0:	4613      	movcs	r3, r2
 80071b2:	461a      	mov	r2, r3
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	f7ff ff97 	bl	80070e8 <mg_ncasecmp>
 80071ba:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d103      	bne.n	80071ca <mg_vcasecmp+0x3e>
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	e000      	b.n	80071cc <mg_vcasecmp+0x40>
  return r;
 80071ca:	68fb      	ldr	r3, [r7, #12]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80071d4:	b490      	push	{r4, r7}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	f107 0408 	add.w	r4, r7, #8
 80071de:	e884 0003 	stmia.w	r4, {r0, r1}
 80071e2:	4639      	mov	r1, r7
 80071e4:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80071ec:	e019      	b.n	8007222 <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	4413      	add	r3, r2
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	429a      	cmp	r2, r3
 8007208:	da02      	bge.n	8007210 <mg_strcmp+0x3c>
 800720a:	f04f 33ff 	mov.w	r3, #4294967295
 800720e:	e01e      	b.n	800724e <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	429a      	cmp	r2, r3
 8007216:	dd01      	ble.n	800721c <mg_strcmp+0x48>
 8007218:	2301      	movs	r3, #1
 800721a:	e018      	b.n	800724e <mg_strcmp+0x7a>
    i++;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	429a      	cmp	r2, r3
 8007228:	d203      	bcs.n	8007232 <mg_strcmp+0x5e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	429a      	cmp	r2, r3
 8007230:	d3dd      	bcc.n	80071ee <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	429a      	cmp	r2, r3
 8007238:	d201      	bcs.n	800723e <mg_strcmp+0x6a>
 800723a:	2301      	movs	r3, #1
 800723c:	e007      	b.n	800724e <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	429a      	cmp	r2, r3
 8007244:	d202      	bcs.n	800724c <mg_strcmp+0x78>
 8007246:	f04f 33ff 	mov.w	r3, #4294967295
 800724a:	e000      	b.n	800724e <mg_strcmp+0x7a>
  return 0;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bc90      	pop	{r4, r7}
 8007256:	4770      	bx	lr

08007258 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 8007258:	b590      	push	{r4, r7, lr}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	f107 0408 	add.w	r4, r7, #8
 8007262:	e884 0003 	stmia.w	r4, {r0, r1}
 8007266:	4639      	mov	r1, r7
 8007268:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	429a      	cmp	r2, r3
 8007272:	d901      	bls.n	8007278 <mg_strstr+0x20>
 8007274:	2300      	movs	r3, #0
 8007276:	e020      	b.n	80072ba <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <mg_strstr+0x2a>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	e01b      	b.n	80072ba <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	e011      	b.n	80072ac <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4413      	add	r3, r2
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4618      	mov	r0, r3
 8007294:	f00a fa87 	bl	80117a6 <memcmp>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <mg_strstr+0x4e>
      return haystack.ptr + i;
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	e009      	b.n	80072ba <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	3301      	adds	r3, #1
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d9e7      	bls.n	8007288 <mg_strstr+0x30>
    }
  }
  return NULL;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd90      	pop	{r4, r7, pc}

080072c2 <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80072c2:	b490      	push	{r4, r7}
 80072c4:	b088      	sub	sp, #32
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	f107 0408 	add.w	r4, r7, #8
 80072cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80072d0:	4639      	mov	r1, r7
 80072d2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	2300      	movs	r3, #0
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	2300      	movs	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80ad 	beq.w	8007448 <mg_match+0x186>
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	2200      	movs	r2, #0
 80072f8:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 80072fa:	e0a5      	b.n	8007448 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	429a      	cmp	r2, r3
 8007302:	d24f      	bcs.n	80073a4 <mg_match+0xe2>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	429a      	cmp	r2, r3
 800730a:	d24b      	bcs.n	80073a4 <mg_match+0xe2>
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b3f      	cmp	r3, #63	; 0x3f
 8007316:	d009      	beq.n	800732c <mg_match+0x6a>
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	4413      	add	r3, r2
 800731e:	781a      	ldrb	r2, [r3, #0]
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	440b      	add	r3, r1
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d13b      	bne.n	80073a4 <mg_match+0xe2>
      if (caps == NULL) {
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d031      	beq.n	8007396 <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b3f      	cmp	r3, #63	; 0x3f
 800733c:	d111      	bne.n	8007362 <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	441a      	add	r2, r3
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	2201      	movs	r2, #1
 800734c:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	3308      	adds	r3, #8
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	2200      	movs	r2, #0
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	e019      	b.n	8007396 <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d015      	beq.n	8007396 <mg_match+0xd4>
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d111      	bne.n	8007396 <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	441a      	add	r2, r3
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	461a      	mov	r2, r3
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	3308      	adds	r3, #8
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	2200      	movs	r2, #0
 800738e:	605a      	str	r2, [r3, #4]
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	3301      	adds	r3, #1
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	3301      	adds	r3, #1
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	e051      	b.n	8007448 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d222      	bcs.n	80073f2 <mg_match+0x130>
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b2a      	cmp	r3, #42	; 0x2a
 80073b6:	d005      	beq.n	80073c4 <mg_match+0x102>
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b23      	cmp	r3, #35	; 0x23
 80073c2:	d116      	bne.n	80073f2 <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <mg_match+0x120>
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <mg_match+0x120>
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2200      	movs	r2, #0
 80073d6:	605a      	str	r2, [r3, #4]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	441a      	add	r2, r3
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	61fa      	str	r2, [r7, #28]
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	3301      	adds	r3, #1
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	e02a      	b.n	8007448 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d025      	beq.n	8007444 <mg_match+0x182>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d821      	bhi.n	8007444 <mg_match+0x182>
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	4413      	add	r3, r2
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b23      	cmp	r3, #35	; 0x23
 800740a:	d005      	beq.n	8007418 <mg_match+0x156>
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	4413      	add	r3, r2
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b2f      	cmp	r3, #47	; 0x2f
 8007416:	d015      	beq.n	8007444 <mg_match+0x182>
      i = ni, j = nj;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	2b00      	cmp	r3, #0
 8007424:	d010      	beq.n	8007448 <mg_match+0x186>
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <mg_match+0x186>
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	3b08      	subs	r3, #8
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	2200      	movs	r2, #0
 8007440:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8007442:	e001      	b.n	8007448 <mg_match+0x186>
      }
    } else {
      return false;
 8007444:	2300      	movs	r3, #0
 8007446:	e01e      	b.n	8007486 <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	429a      	cmp	r2, r3
 800744e:	f4ff af55 	bcc.w	80072fc <mg_match+0x3a>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	429a      	cmp	r2, r3
 8007458:	f4ff af50 	bcc.w	80072fc <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	2b00      	cmp	r3, #0
 8007460:	d010      	beq.n	8007484 <mg_match+0x1c2>
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00c      	beq.n	8007484 <mg_match+0x1c2>
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d108      	bne.n	8007484 <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	441a      	add	r2, r3
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	461a      	mov	r2, r3
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	605a      	str	r2, [r3, #4]
  }
  return true;
 8007484:	2301      	movs	r3, #1
}
 8007486:	4618      	mov	r0, r3
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bc90      	pop	{r4, r7}
 800748e:	4770      	bx	lr

08007490 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 800749e:	f107 0310 	add.w	r3, r7, #16
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fdef 	bl	800708a <mg_str_n>
 80074ac:	f107 0318 	add.w	r3, r7, #24
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fde8 	bl	800708a <mg_str_n>
 80074ba:	2300      	movs	r3, #0
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	f107 0318 	add.w	r3, r7, #24
 80074c2:	cb0c      	ldmia	r3, {r2, r3}
 80074c4:	f107 0110 	add.w	r1, r7, #16
 80074c8:	c903      	ldmia	r1, {r0, r1}
 80074ca:	f7ff fefa 	bl	80072c2 <mg_match>
 80074ce:	4603      	mov	r3, r0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e002      	b.n	80074f2 <mg_nce+0x1a>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	3301      	adds	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	4413      	add	r3, r2
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d909      	bls.n	8007512 <mg_nce+0x3a>
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	4413      	add	r3, r2
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800750e:	429a      	cmp	r2, r3
 8007510:	d1ec      	bne.n	80074ec <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 8007512:	2300      	movs	r3, #0
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	e002      	b.n	800751e <mg_nce+0x46>
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3301      	adds	r3, #1
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	429a      	cmp	r2, r3
 8007524:	d207      	bcs.n	8007536 <mg_nce+0x5e>
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4413      	add	r3, r2
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b3d      	cmp	r3, #61	; 0x3d
 8007534:	d1f0      	bne.n	8007518 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <mg_nce+0x6a>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <mg_nce+0x76>
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <mg_nce+0x94>
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	429a      	cmp	r2, r3
 800755a:	d204      	bcs.n	8007566 <mg_nce+0x8e>
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	4413      	add	r3, r2
 8007562:	3301      	adds	r3, #1
 8007564:	e000      	b.n	8007568 <mg_nce+0x90>
 8007566:	2300      	movs	r3, #0
 8007568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756a:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <mg_nce+0xb2>
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	429a      	cmp	r2, r3
 8007578:	d204      	bcs.n	8007584 <mg_nce+0xac>
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	e000      	b.n	8007586 <mg_nce+0xae>
 8007584:	2300      	movs	r3, #0
 8007586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007588:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4413      	add	r3, r2
 8007590:	3301      	adds	r3, #1
 8007592:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	4293      	cmp	r3, r2
 800759a:	bf28      	it	cs
 800759c:	4613      	movcs	r3, r2
}
 800759e:	4618      	mov	r0, r3
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 80075aa:	b590      	push	{r4, r7, lr}
 80075ac:	b091      	sub	sp, #68	; 0x44
 80075ae:	af04      	add	r7, sp, #16
 80075b0:	6178      	str	r0, [r7, #20]
 80075b2:	6139      	str	r1, [r7, #16]
 80075b4:	60fa      	str	r2, [r7, #12]
 80075b6:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80075bc:	2300      	movs	r3, #0
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
 80075c0:	2300      	movs	r3, #0
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	2300      	movs	r3, #0
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	2300      	movs	r3, #0
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <mg_split+0x32>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <mg_split+0x36>
 80075dc:	2300      	movs	r3, #0
 80075de:	e054      	b.n	800768a <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	6859      	ldr	r1, [r3, #4]
 80075e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	f107 031c 	add.w	r3, r7, #28
 80075f4:	9302      	str	r3, [sp, #8]
 80075f6:	f107 0320 	add.w	r3, r7, #32
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	2200      	movs	r2, #0
 8007606:	f7ff ff67 	bl	80074d8 <mg_nce>
 800760a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00f      	beq.n	8007632 <mg_split+0x88>
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	18d1      	adds	r1, r2, r3
 800761a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761c:	693c      	ldr	r4, [r7, #16]
 800761e:	463b      	mov	r3, r7
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fd32 	bl	800708a <mg_str_n>
 8007626:	4622      	mov	r2, r4
 8007628:	463b      	mov	r3, r7
 800762a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800762e:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00f      	beq.n	8007658 <mg_split+0xae>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	18d1      	adds	r1, r2, r3
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	68fc      	ldr	r4, [r7, #12]
 8007644:	463b      	mov	r3, r7
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff fd1f 	bl	800708a <mg_str_n>
 800764c:	4622      	mov	r2, r4
 800764e:	463b      	mov	r3, r7
 8007650:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007654:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	18d1      	adds	r1, r2, r3
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	697c      	ldr	r4, [r7, #20]
 800766a:	463b      	mov	r3, r7
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff fd0c 	bl	800708a <mg_str_n>
 8007672:	4622      	mov	r2, r4
 8007674:	463b      	mov	r3, r7
 8007676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800767a:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	2b00      	cmp	r3, #0
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
}
 800768a:	4618      	mov	r0, r3
 800768c:	3734      	adds	r7, #52	; 0x34
 800768e:	46bd      	mov	sp, r7
 8007690:	bd90      	pop	{r4, r7, pc}

08007692 <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 800769e:	232c      	movs	r3, #44	; 0x2c
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff ff80 	bl	80075aa <mg_split>
 80076aa:	4603      	mov	r3, r0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <mg_unhex_nimble>:
  }
  to[i] = '\0';
  return to;
}

static unsigned char mg_unhex_nimble(unsigned char c) {
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	2b2f      	cmp	r3, #47	; 0x2f
 80076c2:	d906      	bls.n	80076d2 <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b39      	cmp	r3, #57	; 0x39
 80076c8:	d803      	bhi.n	80076d2 <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	3b30      	subs	r3, #48	; 0x30
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	e00c      	b.n	80076ec <mg_unhex_nimble+0x38>
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	d906      	bls.n	80076e6 <mg_unhex_nimble+0x32>
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	2b46      	cmp	r3, #70	; 0x46
 80076dc:	d803      	bhi.n	80076e6 <mg_unhex_nimble+0x32>
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	3b37      	subs	r3, #55	; 0x37
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e002      	b.n	80076ec <mg_unhex_nimble+0x38>
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	3b57      	subs	r3, #87	; 0x57
 80076ea:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	e011      	b.n	8007734 <mg_unhexn+0x3c>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff ffc8 	bl	80076b4 <mg_unhex_nimble>
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4313      	orrs	r3, r2
 800772c:	60bb      	str	r3, [r7, #8]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d3e9      	bcc.n	8007710 <mg_unhexn+0x18>
  return v;
 800773c:	68bb      	ldr	r3, [r7, #8]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e010      	b.n	800777a <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	4413      	add	r3, r2
 800775e:	2102      	movs	r1, #2
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff ffc9 	bl	80076f8 <mg_unhexn>
 8007766:	4601      	mov	r1, r0
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	b2ca      	uxtb	r2, r1
 8007772:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	3302      	adds	r3, #2
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	429a      	cmp	r2, r3
 8007780:	d3ea      	bcc.n	8007758 <mg_unhex+0x12>
  }
}
 8007782:	bf00      	nop
 8007784:	bf00      	nop
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  const char *s = path;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 8007798:	e01a      	b.n	80077d0 <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d007      	beq.n	80077b2 <mg_path_is_sane+0x26>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b2f      	cmp	r3, #47	; 0x2f
 80077a8:	d003      	beq.n	80077b2 <mg_path_is_sane+0x26>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b5c      	cmp	r3, #92	; 0x5c
 80077b0:	d10b      	bne.n	80077ca <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3301      	adds	r3, #1
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b2e      	cmp	r3, #46	; 0x2e
 80077ba:	d106      	bne.n	80077ca <mg_path_is_sane+0x3e>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3302      	adds	r3, #2
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b2e      	cmp	r3, #46	; 0x2e
 80077c4:	d101      	bne.n	80077ca <mg_path_is_sane+0x3e>
 80077c6:	2300      	movs	r3, #0
 80077c8:	e007      	b.n	80077da <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e0      	bne.n	800779a <mg_path_is_sane+0xe>
    }
  }
  return true;
 80077d8:	2301      	movs	r3, #1
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007800:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	619a      	str	r2, [r3, #24]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	61da      	str	r2, [r3, #28]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6a3a      	ldr	r2, [r7, #32]
 8007822:	621a      	str	r2, [r3, #32]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800783e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6178      	str	r0, [r7, #20]
 8007848:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800784c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007854:	eb10 0a02 	adds.w	sl, r0, r2
 8007858:	eb41 0b03 	adc.w	fp, r1, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	4592      	cmp	sl, r2
 8007864:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007868:	d206      	bcs.n	8007878 <mg_timer_expired+0x3a>
 800786a:	6979      	ldr	r1, [r7, #20]
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	4313      	orrs	r3, r2
 8007880:	d10d      	bne.n	800789e <mg_timer_expired+0x60>
 8007882:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800788a:	1886      	adds	r6, r0, r2
 800788c:	603e      	str	r6, [r7, #0]
 800788e:	eb41 0303 	adc.w	r3, r1, r3
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	e9d7 1200 	ldrd	r1, r2, [r7]
 800789a:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80078a8:	4290      	cmp	r0, r2
 80078aa:	eb71 0303 	sbcs.w	r3, r1, r3
 80078ae:	d201      	bcs.n	80078b4 <mg_timer_expired+0x76>
 80078b0:	2300      	movs	r3, #0
 80078b2:	e022      	b.n	80078fa <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80078be:	ebb0 0802 	subs.w	r8, r0, r2
 80078c2:	eb61 0903 	sbc.w	r9, r1, r3
 80078c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ca:	4542      	cmp	r2, r8
 80078cc:	eb73 0309 	sbcs.w	r3, r3, r9
 80078d0:	d207      	bcs.n	80078e2 <mg_timer_expired+0xa4>
 80078d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80078d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078da:	1884      	adds	r4, r0, r2
 80078dc:	eb41 0503 	adc.w	r5, r1, r3
 80078e0:	e007      	b.n	80078f2 <mg_timer_expired+0xb4>
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ec:	1884      	adds	r4, r0, r2
 80078ee:	eb41 0503 	adc.w	r5, r1, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80078f8:	2301      	movs	r3, #1
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007904:	4770      	bx	lr

08007906 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8007906:	b590      	push	{r4, r7, lr}
 8007908:	b08b      	sub	sp, #44	; 0x2c
 800790a:	af02      	add	r7, sp, #8
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	61fb      	str	r3, [r7, #28]
 8007918:	e054      	b.n	80079c4 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	d10d      	bne.n	8007940 <mg_timer_poll+0x3a>
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <mg_timer_poll+0x3a>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <mg_timer_poll+0x3c>
 8007940:	2300      	movs	r3, #0
 8007942:	76fb      	strb	r3, [r7, #27]
 8007944:	7efb      	ldrb	r3, [r7, #27]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f103 0410 	add.w	r4, r3, #16
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800795c:	e9cd 2300 	strd	r2, r3, [sp]
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	4620      	mov	r0, r4
 8007966:	f7ff ff6a 	bl	800783e <mg_timer_expired>
 800796a:	4603      	mov	r3, r0
 800796c:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8007974:	7efb      	ldrb	r3, [r7, #27]
 8007976:	f083 0301 	eor.w	r3, r3, #1
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <mg_timer_poll+0x86>
 8007980:	7ebb      	ldrb	r3, [r7, #26]
 8007982:	f083 0301 	eor.w	r3, r3, #1
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d118      	bne.n	80079be <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <mg_timer_poll+0x9e>
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	6a12      	ldr	r2, [r2, #32]
 80079ac:	4610      	mov	r0, r2
 80079ae:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f043 0204 	orr.w	r2, r3, #4
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	619a      	str	r2, [r3, #24]
 80079bc:	e000      	b.n	80079c0 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 80079be:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	61fb      	str	r3, [r7, #28]
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1a7      	bne.n	800791a <mg_timer_poll+0x14>
  }
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	3724      	adds	r7, #36	; 0x24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd90      	pop	{r4, r7, pc}

080079d4 <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, struct mg_str hostname) {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	1d3b      	adds	r3, r7, #4
 80079de:	e883 0006 	stmia.w	r3, {r1, r2}
  (void) hostname;
  mg_error(c, "TLS is not enabled");
 80079e2:	4904      	ldr	r1, [pc, #16]	; (80079f4 <mg_tls_init+0x20>)
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7f9 ff27 	bl	8001838 <mg_error>
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	080136bc 	.word	0x080136bc

080079f8 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  (void) c;
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <mg_tls_recv+0x1e>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <mg_tls_recv+0x1e>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <mg_tls_recv+0x22>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e001      	b.n	8007a46 <mg_tls_recv+0x26>
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <mg_tls_send+0x1e>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <mg_tls_send+0x1e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <mg_tls_send+0x22>
 8007a70:	2300      	movs	r3, #0
 8007a72:	e001      	b.n	8007a78 <mg_tls_send+0x26>
 8007a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	4917      	ldr	r1, [pc, #92]	; (8007aec <mg_url_is_ssl+0x68>)
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f009 fec7 	bl	8011824 <strncmp>
 8007a96:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01f      	beq.n	8007adc <mg_url_is_ssl+0x58>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007a9c:	2206      	movs	r2, #6
 8007a9e:	4914      	ldr	r1, [pc, #80]	; (8007af0 <mg_url_is_ssl+0x6c>)
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f009 febf 	bl	8011824 <strncmp>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d017      	beq.n	8007adc <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007aac:	2206      	movs	r2, #6
 8007aae:	4911      	ldr	r1, [pc, #68]	; (8007af4 <mg_url_is_ssl+0x70>)
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f009 feb7 	bl	8011824 <strncmp>
 8007ab6:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00f      	beq.n	8007adc <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007abc:	2204      	movs	r2, #4
 8007abe:	490e      	ldr	r1, [pc, #56]	; (8007af8 <mg_url_is_ssl+0x74>)
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f009 feaf 	bl	8011824 <strncmp>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <mg_url_is_ssl+0x58>
         strncmp(url, "tls:", 4) == 0;
 8007acc:	2204      	movs	r2, #4
 8007ace:	490b      	ldr	r1, [pc, #44]	; (8007afc <mg_url_is_ssl+0x78>)
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f009 fea7 	bl	8011824 <strncmp>
 8007ad6:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <mg_url_is_ssl+0x5c>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <mg_url_is_ssl+0x5e>
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	080136d0 	.word	0x080136d0
 8007af0:	080136d8 	.word	0x080136d8
 8007af4:	080136e0 	.word	0x080136e0
 8007af8:	080136e8 	.word	0x080136e8
 8007afc:	080136f0 	.word	0x080136f0

08007b00 <urlparse>:

static struct url urlparse(const char *url) {
 8007b00:	b5b0      	push	{r4, r5, r7, lr}
 8007b02:	b08a      	sub	sp, #40	; 0x28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8007b0a:	f107 0308 	add.w	r3, r7, #8
 8007b0e:	221c      	movs	r2, #28
 8007b10:	2100      	movs	r1, #0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f009 fe71 	bl	80117fa <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8007b18:	2300      	movs	r3, #0
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1c:	e05b      	b.n	8007bd6 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	4413      	add	r3, r2
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b2f      	cmp	r3, #47	; 0x2f
 8007b28:	d112      	bne.n	8007b50 <urlparse+0x50>
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00f      	beq.n	8007b50 <urlparse+0x50>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10c      	bne.n	8007b50 <urlparse+0x50>
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b2f      	cmp	r3, #47	; 0x2f
 8007b42:	d105      	bne.n	8007b50 <urlparse+0x50>
      u.host = i + 1;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	3301      	adds	r3, #1
 8007b48:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	e03f      	b.n	8007bd0 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	4413      	add	r3, r2
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b5d      	cmp	r3, #93	; 0x5d
 8007b5a:	d102      	bne.n	8007b62 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	61bb      	str	r3, [r7, #24]
 8007b60:	e036      	b.n	8007bd0 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	4413      	add	r3, r2
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b3a      	cmp	r3, #58	; 0x3a
 8007b6c:	d109      	bne.n	8007b82 <urlparse+0x82>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <urlparse+0x82>
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <urlparse+0x82>
      u.port = i + 1;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	e026      	b.n	8007bd0 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	4413      	add	r3, r2
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b40      	cmp	r3, #64	; 0x40
 8007b8c:	d112      	bne.n	8007bb4 <urlparse+0xb4>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10f      	bne.n	8007bb4 <urlparse+0xb4>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10c      	bne.n	8007bb4 <urlparse+0xb4>
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d109      	bne.n	8007bb4 <urlparse+0xb4>
      u.user = u.host;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	3301      	adds	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	e00d      	b.n	8007bd0 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	4413      	add	r3, r2
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b2f      	cmp	r3, #47	; 0x2f
 8007bbe:	d107      	bne.n	8007bd0 <urlparse+0xd0>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d004      	beq.n	8007bd0 <urlparse+0xd0>
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <urlparse+0xd0>
      u.uri = i;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	4413      	add	r3, r2
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d19d      	bne.n	8007b1e <urlparse+0x1e>
    }
  }
  u.end = i;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	461d      	mov	r5, r3
 8007bea:	f107 0408 	add.w	r4, r7, #8
 8007bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bf2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007bf6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	3728      	adds	r7, #40	; 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007c04 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	; 0x28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8007c0c:	f107 0308 	add.w	r3, r7, #8
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff ff74 	bl	8007b00 <urlparse>
  unsigned short port = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	4925      	ldr	r1, [pc, #148]	; (8007cb4 <mg_url_port+0xb0>)
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f009 fdff 	bl	8011824 <strncmp>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <mg_url_port+0x38>
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	4922      	ldr	r1, [pc, #136]	; (8007cb8 <mg_url_port+0xb4>)
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f009 fdf7 	bl	8011824 <strncmp>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <mg_url_port+0x3c>
 8007c3c:	2350      	movs	r3, #80	; 0x50
 8007c3e:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8007c40:	2204      	movs	r2, #4
 8007c42:	491e      	ldr	r1, [pc, #120]	; (8007cbc <mg_url_port+0xb8>)
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f009 fded 	bl	8011824 <strncmp>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <mg_url_port+0x5c>
 8007c50:	2206      	movs	r2, #6
 8007c52:	491b      	ldr	r1, [pc, #108]	; (8007cc0 <mg_url_port+0xbc>)
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f009 fde5 	bl	8011824 <strncmp>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <mg_url_port+0x62>
    port = 443;
 8007c60:	f240 13bb 	movw	r3, #443	; 0x1bb
 8007c64:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8007c66:	2205      	movs	r2, #5
 8007c68:	4916      	ldr	r1, [pc, #88]	; (8007cc4 <mg_url_port+0xc0>)
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f009 fdda 	bl	8011824 <strncmp>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <mg_url_port+0x78>
 8007c76:	f240 735b 	movw	r3, #1883	; 0x75b
 8007c7a:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8007c7c:	2206      	movs	r2, #6
 8007c7e:	4912      	ldr	r1, [pc, #72]	; (8007cc8 <mg_url_port+0xc4>)
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f009 fdcf 	bl	8011824 <strncmp>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d102      	bne.n	8007c92 <mg_url_port+0x8e>
 8007c8c:	f242 23b3 	movw	r3, #8883	; 0x22b3
 8007c90:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <mg_url_port+0xa4>
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f009 faca 	bl	8011238 <atoi>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 8007ca8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3728      	adds	r7, #40	; 0x28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	080136f8 	.word	0x080136f8
 8007cb8:	08013700 	.word	0x08013700
 8007cbc:	080136d0 	.word	0x080136d0
 8007cc0:	080136d8 	.word	0x080136d8
 8007cc4:	08013704 	.word	0x08013704
 8007cc8:	080136e0 	.word	0x080136e0

08007ccc <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 8007cda:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007ce6:	7b7b      	ldrb	r3, [r7, #13]
 8007ce8:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007cea:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007cec:	7b3b      	ldrb	r3, [r7, #12]
 8007cee:	061b      	lsls	r3, r3, #24
 8007cf0:	4313      	orrs	r3, r2
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	4603      	mov	r3, r0
 8007d06:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8007d08:	2300      	movs	r3, #0
 8007d0a:	81bb      	strh	r3, [r7, #12]
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 8007d0e:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8007d10:	7b7b      	ldrb	r3, [r7, #13]
 8007d12:	b21a      	sxth	r2, r3
 8007d14:	7b3b      	ldrb	r3, [r7, #12]
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	b21b      	sxth	r3, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b21b      	sxth	r3, r3
 8007d1e:	b29b      	uxth	r3, r3
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007d3e:	e01f      	b.n	8007d80 <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *) buf++;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	60ba      	str	r2, [r7, #8]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 8007d4a:	7dfa      	ldrb	r2, [r7, #23]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4053      	eors	r3, r2
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <mg_crc32+0x70>)
 8007d56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	091b      	lsrs	r3, r3, #4
 8007d5e:	4053      	eors	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4053      	eors	r3, r2
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <mg_crc32+0x70>)
 8007d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	091b      	lsrs	r3, r3, #4
 8007d7c:	4053      	eors	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	1e5a      	subs	r2, r3, #1
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1da      	bne.n	8007d40 <mg_crc32+0x14>
  }
  return ~crc;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	43db      	mvns	r3, r3
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	08013fe4 	.word	0x08013fe4

08007da0 <mg_millis>:
  return allowed == '+';
}

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8007da0:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
 8007da4:	af00      	add	r7, sp, #0
#elif MG_ARCH == MG_ARCH_ZEPHYR
  return (uint64_t) k_uptime_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS1
  return (uint64_t) rt_time_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS2
  return (uint64_t) ((osKernelGetTickCount() * 1000) / osKernelGetTickFreq());
 8007da6:	f006 fc85 	bl	800e6b4 <osKernelGetTickCount>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007db0:	fb02 f403 	mul.w	r4, r2, r3
 8007db4:	f006 fca6 	bl	800e704 <osKernelGetTickFreq>
 8007db8:	4603      	mov	r3, r0
 8007dba:	fbb4 f3f3 	udiv	r3, r4, r3
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	4698      	mov	r8, r3
 8007dc2:	4691      	mov	r9, r2
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	464b      	mov	r3, r9
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4619      	mov	r1, r3
 8007dcc:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}

08007dd0 <eth_read_phy>:
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface
enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1, PHY_CSCR = 31 };

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	460a      	mov	r2, r1
 8007dda:	71fb      	strb	r3, [r7, #7]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 8007de0:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <eth_read_phy+0x5c>)
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	4a11      	ldr	r2, [pc, #68]	; (8007e2c <eth_read_phy+0x5c>)
 8007de6:	f003 031c 	and.w	r3, r3, #28
 8007dea:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <eth_read_phy+0x5c>)
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	02d9      	lsls	r1, r3, #11
 8007df4:	79bb      	ldrb	r3, [r7, #6]
 8007df6:	019b      	lsls	r3, r3, #6
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	490c      	ldr	r1, [pc, #48]	; (8007e2c <eth_read_phy+0x5c>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= BIT(0);
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <eth_read_phy+0x5c>)
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <eth_read_phy+0x5c>)
 8007e06:	f043 0301 	orr.w	r3, r3, #1
 8007e0a:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007e0c:	bf00      	nop
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <eth_read_phy+0x5c>)
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1f9      	bne.n	8007e0e <eth_read_phy+0x3e>
  return ETH->MACMIIDR;
 8007e1a:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <eth_read_phy+0x5c>)
 8007e1c:	695b      	ldr	r3, [r3, #20]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40028000 	.word	0x40028000

08007e30 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	603a      	str	r2, [r7, #0]
 8007e3a:	71fb      	strb	r3, [r7, #7]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIDR = val;
 8007e40:	4a14      	ldr	r2, [pc, #80]	; (8007e94 <eth_write_phy+0x64>)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <eth_write_phy+0x64>)
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <eth_write_phy+0x64>)
 8007e4c:	f003 031c 	and.w	r3, r3, #28
 8007e50:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | BIT(1);
 8007e52:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <eth_write_phy+0x64>)
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	02d9      	lsls	r1, r3, #11
 8007e5a:	79bb      	ldrb	r3, [r7, #6]
 8007e5c:	019b      	lsls	r3, r3, #6
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	4a0c      	ldr	r2, [pc, #48]	; (8007e94 <eth_write_phy+0x64>)
 8007e64:	f043 0302 	orr.w	r3, r3, #2
 8007e68:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= BIT(0);
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <eth_write_phy+0x64>)
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <eth_write_phy+0x64>)
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007e76:	bf00      	nop
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <eth_write_phy+0x64>)
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f9      	bne.n	8007e78 <eth_write_phy+0x48>
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40028000 	.word	0x40028000

08007e98 <get_hclk>:

static uint32_t get_hclk(void) {
 8007e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	b08d      	sub	sp, #52	; 0x34
 8007e9e:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 8007ea0:	4e3c      	ldr	r6, [pc, #240]	; (8007f94 <get_hclk+0xfc>)
 8007ea2:	62be      	str	r6, [r7, #40]	; 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	62fe      	str	r6, [r7, #44]	; 0x2c
 8007ea8:	4e3b      	ldr	r6, [pc, #236]	; (8007f98 <get_hclk+0x100>)
 8007eaa:	627e      	str	r6, [r7, #36]	; 0x24
 8007eac:	4e3b      	ldr	r6, [pc, #236]	; (8007f9c <get_hclk+0x104>)
 8007eae:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 8007eb0:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007eb2:	68b6      	ldr	r6, [r6, #8]
 8007eb4:	f006 0604 	and.w	r6, r6, #4
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	d002      	beq.n	8007ec2 <get_hclk+0x2a>
    clk = hse;
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec0:	e049      	b.n	8007f56 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 8007ec2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ec4:	68b6      	ldr	r6, [r6, #8]
 8007ec6:	f006 0608 	and.w	r6, r6, #8
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	d041      	beq.n	8007f52 <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 8007ece:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ed0:	6876      	ldr	r6, [r6, #4]
 8007ed2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8007ed6:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8007ed8:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007eda:	6876      	ldr	r6, [r6, #4]
 8007edc:	09b6      	lsrs	r6, r6, #6
 8007ede:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007ee2:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 8007ee4:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ee6:	6876      	ldr	r6, [r6, #4]
 8007ee8:	0c36      	lsrs	r6, r6, #16
 8007eea:	f006 0603 	and.w	r6, r6, #3
 8007eee:	3601      	adds	r6, #1
 8007ef0:	0076      	lsls	r6, r6, #1
 8007ef2:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 8007ef4:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ef6:	6876      	ldr	r6, [r6, #4]
 8007ef8:	f406 0680 	and.w	r6, r6, #4194304	; 0x400000
 8007efc:	2e00      	cmp	r6, #0
 8007efe:	d001      	beq.n	8007f04 <get_hclk+0x6c>
 8007f00:	6a3e      	ldr	r6, [r7, #32]
 8007f02:	e000      	b.n	8007f06 <get_hclk+0x6e>
 8007f04:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8007f06:	62fe      	str	r6, [r7, #44]	; 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8007f08:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8007f0a:	f04f 0c00 	mov.w	ip, #0
 8007f0e:	4634      	mov	r4, r6
 8007f10:	4665      	mov	r5, ip
 8007f12:	69be      	ldr	r6, [r7, #24]
 8007f14:	f04f 0c00 	mov.w	ip, #0
 8007f18:	4632      	mov	r2, r6
 8007f1a:	4663      	mov	r3, ip
 8007f1c:	fb02 fc05 	mul.w	ip, r2, r5
 8007f20:	fb04 f603 	mul.w	r6, r4, r3
 8007f24:	4466      	add	r6, ip
 8007f26:	fba4 0102 	umull	r0, r1, r4, r2
 8007f2a:	1873      	adds	r3, r6, r1
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	2200      	movs	r2, #0
 8007f32:	4698      	mov	r8, r3
 8007f34:	4691      	mov	r9, r2
 8007f36:	4642      	mov	r2, r8
 8007f38:	464b      	mov	r3, r9
 8007f3a:	f7f8 fe4f 	bl	8000bdc <__aeabi_uldivmod>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4613      	mov	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f50:	e001      	b.n	8007f56 <get_hclk+0xbe>
  } else {
    clk = hsi;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	f003 030f 	and.w	r3, r3, #15
 8007f60:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b07      	cmp	r3, #7
 8007f66:	d801      	bhi.n	8007f6c <get_hclk+0xd4>
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	e00e      	b.n	8007f8a <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 8007f6c:	4a0c      	ldr	r2, [pc, #48]	; (8007fa0 <get_hclk+0x108>)
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f74:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3b08      	subs	r3, #8
 8007f7c:	3330      	adds	r3, #48	; 0x30
 8007f7e:	443b      	add	r3, r7
 8007f80:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	40d3      	lsrs	r3, r2
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3734      	adds	r7, #52	; 0x34
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f94:	40023800 	.word	0x40023800
 8007f98:	00f42400 	.word	0x00f42400
 8007f9c:	007a1200 	.word	0x007a1200
 8007fa0:	08013904 	.word	0x08013904

08007fa4 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 8007faa:	4a33      	ldr	r2, [pc, #204]	; (8008078 <guess_mdc_cr+0xd4>)
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fb4:	6018      	str	r0, [r3, #0]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 8007fba:	4a30      	ldr	r2, [pc, #192]	; (800807c <guess_mdc_cr+0xd8>)
 8007fbc:	1d3b      	adds	r3, r7, #4
 8007fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fc2:	6018      	str	r0, [r3, #0]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 8007fc8:	f7ff ff66 	bl	8007e98 <get_hclk>
 8007fcc:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd2:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	4a2a      	ldr	r2, [pc, #168]	; (8008080 <guess_mdc_cr+0xdc>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d80d      	bhi.n	8007ff8 <guess_mdc_cr+0x54>
    MG_ERROR(("HCLK too low"));
 8007fdc:	4b29      	ldr	r3, [pc, #164]	; (8008084 <guess_mdc_cr+0xe0>)
 8007fde:	f641 3238 	movw	r2, #6968	; 0x1b38
 8007fe2:	4929      	ldr	r1, [pc, #164]	; (8008088 <guess_mdc_cr+0xe4>)
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	f7fe f96b 	bl	80062c0 <mg_log_prefix>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d02e      	beq.n	800804e <guess_mdc_cr+0xaa>
 8007ff0:	4826      	ldr	r0, [pc, #152]	; (800808c <guess_mdc_cr+0xe8>)
 8007ff2:	f7fe f9bf 	bl	8006374 <mg_log>
 8007ff6:	e02a      	b.n	800804e <guess_mdc_cr+0xaa>
  } else {
    for (int i = 0; i < 6; i++) {
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	e014      	b.n	8008028 <guess_mdc_cr+0x84>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 8007ffe:	1d3a      	adds	r2, r7, #4
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	4413      	add	r3, r2
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	fbb3 f3f2 	udiv	r3, r3, r2
 800800e:	4a20      	ldr	r2, [pc, #128]	; (8008090 <guess_mdc_cr+0xec>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d806      	bhi.n	8008022 <guess_mdc_cr+0x7e>
        result = crs[i];
 8008014:	f107 020c 	add.w	r2, r7, #12
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	4413      	add	r3, r2
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	61fb      	str	r3, [r7, #28]
        break;
 8008020:	e005      	b.n	800802e <guess_mdc_cr+0x8a>
    for (int i = 0; i < 6; i++) {
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	3301      	adds	r3, #1
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	2b05      	cmp	r3, #5
 800802c:	dde7      	ble.n	8007ffe <guess_mdc_cr+0x5a>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	2b00      	cmp	r3, #0
 8008032:	da0c      	bge.n	800804e <guess_mdc_cr+0xaa>
 8008034:	4b13      	ldr	r3, [pc, #76]	; (8008084 <guess_mdc_cr+0xe0>)
 8008036:	f44f 52da 	mov.w	r2, #6976	; 0x1b40
 800803a:	4913      	ldr	r1, [pc, #76]	; (8008088 <guess_mdc_cr+0xe4>)
 800803c:	2001      	movs	r0, #1
 800803e:	f7fe f93f 	bl	80062c0 <mg_log_prefix>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <guess_mdc_cr+0xaa>
 8008048:	4812      	ldr	r0, [pc, #72]	; (8008094 <guess_mdc_cr+0xf0>)
 800804a:	f7fe f993 	bl	8006374 <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <guess_mdc_cr+0xe0>)
 8008050:	f641 3242 	movw	r2, #6978	; 0x1b42
 8008054:	490c      	ldr	r1, [pc, #48]	; (8008088 <guess_mdc_cr+0xe4>)
 8008056:	2003      	movs	r0, #3
 8008058:	f7fe f932 	bl	80062c0 <mg_log_prefix>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <guess_mdc_cr+0xc8>
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	6979      	ldr	r1, [r7, #20]
 8008066:	480c      	ldr	r0, [pc, #48]	; (8008098 <guess_mdc_cr+0xf4>)
 8008068:	f7fe f984 	bl	8006374 <mg_log>
  return result;
 800806c:	69fb      	ldr	r3, [r7, #28]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	08013940 	.word	0x08013940
 800807c:	08013948 	.word	0x08013948
 8008080:	017d783f 	.word	0x017d783f
 8008084:	08014024 	.word	0x08014024
 8008088:	08012658 	.word	0x08012658
 800808c:	0801390c 	.word	0x0801390c
 8008090:	00243d58 	.word	0x00243d58
 8008094:	0801391c 	.word	0x0801391c
 8008098:	0801392c 	.word	0x0801392c

0800809c <mg_tcpip_driver_stm32_init>:

static bool mg_tcpip_driver_stm32_init(struct mg_tcpip_if *ifp) {
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32_data *d =
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32_data *) ifp->driver_data;
  s_ifp = ifp;
 80080aa:	4a6d      	ldr	r2, [pc, #436]	; (8008260 <mg_tcpip_driver_stm32_init+0x1c4>)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e032      	b.n	800811c <mg_tcpip_driver_stm32_init+0x80>
    s_rxdesc[i][0] = BIT(31);                            // Own
 80080b6:	4a6b      	ldr	r2, [pc, #428]	; (8008264 <mg_tcpip_driver_stm32_init+0x1c8>)
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	4413      	add	r3, r2
 80080be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080c2:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | BIT(14);       // 2nd address chained
 80080c4:	4a67      	ldr	r2, [pc, #412]	; (8008264 <mg_tcpip_driver_stm32_init+0x1c8>)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	4413      	add	r3, r2
 80080cc:	3304      	adds	r3, #4
 80080ce:	f244 6204 	movw	r2, #17924	; 0x4604
 80080d2:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f240 6204 	movw	r2, #1540	; 0x604
 80080da:	fb02 f303 	mul.w	r3, r2, r3
 80080de:	4a62      	ldr	r2, [pc, #392]	; (8008268 <mg_tcpip_driver_stm32_init+0x1cc>)
 80080e0:	4413      	add	r3, r2
 80080e2:	4619      	mov	r1, r3
 80080e4:	4a5f      	ldr	r2, [pc, #380]	; (8008264 <mg_tcpip_driver_stm32_init+0x1c8>)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	4413      	add	r3, r2
 80080ec:	3308      	adds	r3, #8
 80080ee:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	3301      	adds	r3, #1
 80080f4:	425a      	negs	r2, r3
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	f002 0203 	and.w	r2, r2, #3
 80080fe:	bf58      	it	pl
 8008100:	4253      	negpl	r3, r2
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	4a57      	ldr	r2, [pc, #348]	; (8008264 <mg_tcpip_driver_stm32_init+0x1c8>)
 8008106:	4413      	add	r3, r2
 8008108:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 800810a:	4a56      	ldr	r2, [pc, #344]	; (8008264 <mg_tcpip_driver_stm32_init+0x1c8>)
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4413      	add	r3, r2
 8008112:	330c      	adds	r3, #12
 8008114:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	3301      	adds	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b03      	cmp	r3, #3
 8008120:	ddc9      	ble.n	80080b6 <mg_tcpip_driver_stm32_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008122:	2300      	movs	r3, #0
 8008124:	613b      	str	r3, [r7, #16]
 8008126:	e023      	b.n	8008170 <mg_tcpip_driver_stm32_init+0xd4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f240 6204 	movw	r2, #1540	; 0x604
 800812e:	fb02 f303 	mul.w	r3, r2, r3
 8008132:	4a4e      	ldr	r2, [pc, #312]	; (800826c <mg_tcpip_driver_stm32_init+0x1d0>)
 8008134:	4413      	add	r3, r2
 8008136:	4619      	mov	r1, r3
 8008138:	4a4d      	ldr	r2, [pc, #308]	; (8008270 <mg_tcpip_driver_stm32_init+0x1d4>)
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	4413      	add	r3, r2
 8008140:	3308      	adds	r3, #8
 8008142:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	3301      	adds	r3, #1
 8008148:	425a      	negs	r2, r3
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	f002 0203 	and.w	r2, r2, #3
 8008152:	bf58      	it	pl
 8008154:	4253      	negpl	r3, r2
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	4a45      	ldr	r2, [pc, #276]	; (8008270 <mg_tcpip_driver_stm32_init+0x1d4>)
 800815a:	4413      	add	r3, r2
 800815c:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 800815e:	4a44      	ldr	r2, [pc, #272]	; (8008270 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	4413      	add	r3, r2
 8008166:	330c      	adds	r3, #12
 8008168:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3301      	adds	r3, #1
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b03      	cmp	r3, #3
 8008174:	ddd8      	ble.n	8008128 <mg_tcpip_driver_stm32_init+0x8c>
  }

  ETH->DMABMR |= BIT(0);                         // Software reset
 8008176:	4b3f      	ldr	r3, [pc, #252]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a3d      	ldr	r2, [pc, #244]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008180:	f043 0301 	orr.w	r3, r3, #1
 8008184:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008188:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & BIT(0)) != 0) (void) 0;  // Wait until done
 800818a:	bf00      	nop
 800818c:	4b39      	ldr	r3, [pc, #228]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 800818e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f7      	bne.n	800818c <mg_tcpip_driver_stm32_init+0xf0>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <mg_tcpip_driver_stm32_init+0x10e>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da03      	bge.n	80081b2 <mg_tcpip_driver_stm32_init+0x116>
 80081aa:	f7ff fefb 	bl	8007fa4 <guess_mdc_cr>
 80081ae:	4603      	mov	r3, r0
 80081b0:	e001      	b.n	80081b6 <mg_tcpip_driver_stm32_init+0x11a>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60bb      	str	r3, [r7, #8]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081be:	f003 031c 	and.w	r3, r3, #28
 80081c2:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = BIT(13) | BIT(16) | BIT(22) | BIT(23) | BIT(25);
  ETH->MACIMR = BIT(3) | BIT(9);  // Mask timestamp & PMT IT
 80081c4:	4b2b      	ldr	r3, [pc, #172]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081c6:	f44f 7202 	mov.w	r2, #520	; 0x208
 80081ca:	63da      	str	r2, [r3, #60]	; 0x3c
  ETH->MACFCR = BIT(7);           // Disable zero quarta pause
 80081cc:	4b29      	ldr	r3, [pc, #164]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081ce:	2280      	movs	r2, #128	; 0x80
 80081d0:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = BIT(31);                            // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));           // Reset PHY
 80081d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80081d6:	2100      	movs	r1, #0
 80081d8:	2000      	movs	r0, #0
 80081da:	f7ff fe29 	bl	8007e30 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));           // Set autonegotiation
 80081de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081e2:	2100      	movs	r1, #0
 80081e4:	2000      	movs	r0, #0
 80081e6:	f7ff fe23 	bl	8007e30 <eth_write_phy>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;     // RX descriptors
 80081ea:	4a22      	ldr	r2, [pc, #136]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081ec:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <mg_tcpip_driver_stm32_init+0x1c8>)
 80081ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081f2:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;     // RX descriptors
 80081f4:	4a1f      	ldr	r2, [pc, #124]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081f6:	4b1e      	ldr	r3, [pc, #120]	; (8008270 <mg_tcpip_driver_stm32_init+0x1d4>)
 80081f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081fc:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = BIT(6) | BIT(16);                      // RIE, NISE
 80081fe:	4b1d      	ldr	r3, [pc, #116]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008204:	461a      	mov	r2, r3
 8008206:	4b1c      	ldr	r3, [pc, #112]	; (8008278 <mg_tcpip_driver_stm32_init+0x1dc>)
 8008208:	61d3      	str	r3, [r2, #28]
  ETH->MACCR = BIT(2) | BIT(3) | BIT(11) | BIT(14);    // RE, TE, Duplex, Fast
 800820a:	4b1a      	ldr	r3, [pc, #104]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 800820c:	f644 020c 	movw	r2, #18444	; 0x480c
 8008210:	601a      	str	r2, [r3, #0]
  ETH->DMAOMR = BIT(1) | BIT(13) | BIT(21) | BIT(25);  // SR, ST, TSF, RSF
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008218:	461a      	mov	r2, r3
 800821a:	4b18      	ldr	r3, [pc, #96]	; (800827c <mg_tcpip_driver_stm32_init+0x1e0>)
 800821c:	6193      	str	r3, [r2, #24]

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	795b      	ldrb	r3, [r3, #5]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7912      	ldrb	r2, [r2, #4]
 8008228:	4611      	mov	r1, r2
 800822a:	4a12      	ldr	r2, [pc, #72]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
 800822c:	430b      	orrs	r3, r1
 800822e:	6413      	str	r3, [r2, #64]	; 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	78db      	ldrb	r3, [r3, #3]
 8008234:	061b      	lsls	r3, r3, #24
 8008236:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	789b      	ldrb	r3, [r3, #2]
 800823c:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800823e:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8008246:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	7812      	ldrb	r2, [r2, #0]
 800824c:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800824e:	4a09      	ldr	r2, [pc, #36]	; (8008274 <mg_tcpip_driver_stm32_init+0x1d8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008250:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008252:	6453      	str	r3, [r2, #68]	; 0x44
  return true;
 8008254:	2301      	movs	r3, #1
}
 8008256:	4618      	mov	r0, r3
 8008258:	3718      	adds	r7, #24
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20003670 	.word	0x20003670
 8008264:	200005cc 	.word	0x200005cc
 8008268:	2000064c 	.word	0x2000064c
 800826c:	20001e5c 	.word	0x20001e5c
 8008270:	2000060c 	.word	0x2000060c
 8008274:	40028000 	.word	0x40028000
 8008278:	00010040 	.word	0x00010040
 800827c:	02202002 	.word	0x02202002

08008280 <mg_tcpip_driver_stm32_tx>:

static size_t mg_tcpip_driver_stm32_tx(const void *buf, size_t len,
                                       struct mg_tcpip_if *ifp) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f240 6204 	movw	r2, #1540	; 0x604
 8008292:	4293      	cmp	r3, r2
 8008294:	d911      	bls.n	80082ba <mg_tcpip_driver_stm32_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8008296:	4b3d      	ldr	r3, [pc, #244]	; (800838c <mg_tcpip_driver_stm32_tx+0x10c>)
 8008298:	f641 327b 	movw	r2, #7035	; 0x1b7b
 800829c:	493c      	ldr	r1, [pc, #240]	; (8008390 <mg_tcpip_driver_stm32_tx+0x110>)
 800829e:	2001      	movs	r0, #1
 80082a0:	f7fe f80e 	bl	80062c0 <mg_log_prefix>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <mg_tcpip_driver_stm32_tx+0x34>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4619      	mov	r1, r3
 80082ae:	4839      	ldr	r0, [pc, #228]	; (8008394 <mg_tcpip_driver_stm32_tx+0x114>)
 80082b0:	f7fe f860 	bl	8006374 <mg_log>
    len = 0;  // Frame is too big
 80082b4:	2300      	movs	r3, #0
 80082b6:	60bb      	str	r3, [r7, #8]
 80082b8:	e055      	b.n	8008366 <mg_tcpip_driver_stm32_tx+0xe6>
  } else if ((s_txdesc[s_txno][0] & BIT(31))) {
 80082ba:	4b37      	ldr	r3, [pc, #220]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	4a37      	ldr	r2, [pc, #220]	; (800839c <mg_tcpip_driver_stm32_tx+0x11c>)
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	4413      	add	r3, r2
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da14      	bge.n	80082f4 <mg_tcpip_driver_stm32_tx+0x74>
    ifp->nerr++;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	671a      	str	r2, [r3, #112]	; 0x70
    MG_ERROR(("No free descriptors"));
 80082d4:	4b2d      	ldr	r3, [pc, #180]	; (800838c <mg_tcpip_driver_stm32_tx+0x10c>)
 80082d6:	f641 327f 	movw	r2, #7039	; 0x1b7f
 80082da:	492d      	ldr	r1, [pc, #180]	; (8008390 <mg_tcpip_driver_stm32_tx+0x110>)
 80082dc:	2001      	movs	r0, #1
 80082de:	f7fd ffef 	bl	80062c0 <mg_log_prefix>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <mg_tcpip_driver_stm32_tx+0x6e>
 80082e8:	482d      	ldr	r0, [pc, #180]	; (80083a0 <mg_tcpip_driver_stm32_tx+0x120>)
 80082ea:	f7fe f843 	bl	8006374 <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 80082ee:	2300      	movs	r3, #0
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	e038      	b.n	8008366 <mg_tcpip_driver_stm32_tx+0xe6>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);     // Copy data
 80082f4:	4b28      	ldr	r3, [pc, #160]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	f240 6304 	movw	r3, #1540	; 0x604
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <mg_tcpip_driver_stm32_tx+0x124>)
 8008304:	4413      	add	r3, r2
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	4618      	mov	r0, r3
 800830c:	f009 fb3f 	bl	801198e <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;  // Set data len
 8008310:	4b21      	ldr	r3, [pc, #132]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	4a21      	ldr	r2, [pc, #132]	; (800839c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	4413      	add	r3, r2
 800831a:	3304      	adds	r3, #4
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = BIT(20) | BIT(28) | BIT(29);  // Chain,FS,LS
 8008320:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	4a1d      	ldr	r2, [pc, #116]	; (800839c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	4413      	add	r3, r2
 800832a:	4a1f      	ldr	r2, [pc, #124]	; (80083a8 <mg_tcpip_driver_stm32_tx+0x128>)
 800832c:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= BIT(31);  // Set OWN bit - let DMA take over
 800832e:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	4a1a      	ldr	r2, [pc, #104]	; (800839c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	4413      	add	r3, r2
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a17      	ldr	r2, [pc, #92]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 800833c:	7812      	ldrb	r2, [r2, #0]
 800833e:	4610      	mov	r0, r2
 8008340:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008344:	4915      	ldr	r1, [pc, #84]	; (800839c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008346:	0103      	lsls	r3, r0, #4
 8008348:	440b      	add	r3, r1
 800834a:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 800834c:	4b12      	ldr	r3, [pc, #72]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	3301      	adds	r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	4b10      	ldr	r3, [pc, #64]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d902      	bls.n	8008366 <mg_tcpip_driver_stm32_tx+0xe6>
 8008360:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <mg_tcpip_driver_stm32_tx+0x118>)
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]
  }
  DSB();                         // ensure descriptors have been written
 8008366:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = BIT(2) | BIT(5);  // Clear any prior TBUS/TUS
 800836a:	4b10      	ldr	r3, [pc, #64]	; (80083ac <mg_tcpip_driver_stm32_tx+0x12c>)
 800836c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008370:	461a      	mov	r2, r3
 8008372:	2324      	movs	r3, #36	; 0x24
 8008374:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;              // and resume
 8008376:	4b0d      	ldr	r3, [pc, #52]	; (80083ac <mg_tcpip_driver_stm32_tx+0x12c>)
 8008378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837c:	461a      	mov	r2, r3
 800837e:	2300      	movs	r3, #0
 8008380:	6053      	str	r3, [r2, #4]
  return len;
 8008382:	68bb      	ldr	r3, [r7, #8]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	08014034 	.word	0x08014034
 8008390:	08012658 	.word	0x08012658
 8008394:	08013950 	.word	0x08013950
 8008398:	2000366c 	.word	0x2000366c
 800839c:	2000060c 	.word	0x2000060c
 80083a0:	08013964 	.word	0x08013964
 80083a4:	20001e5c 	.word	0x20001e5c
 80083a8:	30100000 	.word	0x30100000
 80083ac:	40028000 	.word	0x40028000

080083b0 <mg_tcpip_driver_stm32_up>:

static bool mg_tcpip_driver_stm32_up(struct mg_tcpip_if *ifp) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 80083b8:	2101      	movs	r1, #1
 80083ba:	2000      	movs	r0, #0
 80083bc:	f7ff fd08 	bl	8007dd0 <eth_read_phy>
 80083c0:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	089b      	lsrs	r3, r3, #2
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf14      	ite	ne
 80083ce:	2301      	movne	r3, #1
 80083d0:	2300      	moveq	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d13f      	bne.n	800845e <mg_tcpip_driver_stm32_up+0xae>
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d03c      	beq.n	800845e <mg_tcpip_driver_stm32_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 80083e4:	211f      	movs	r1, #31
 80083e6:	2000      	movs	r0, #0
 80083e8:	f7ff fcf2 	bl	8007dd0 <eth_read_phy>
 80083ec:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(11);  // 100M, Full-duplex
 80083ee:	4b1e      	ldr	r3, [pc, #120]	; (8008468 <mg_tcpip_driver_stm32_up+0xb8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 80083f6:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <mg_tcpip_driver_stm32_up+0x5a>
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008408:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(11);      // Half-duplex
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <mg_tcpip_driver_stm32_up+0x6c>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800841a:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 800841c:	4a12      	ldr	r2, [pc, #72]	; (8008468 <mg_tcpip_driver_stm32_up+0xb8>)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 8008422:	4b12      	ldr	r3, [pc, #72]	; (800846c <mg_tcpip_driver_stm32_up+0xbc>)
 8008424:	f641 3298 	movw	r2, #7064	; 0x1b98
 8008428:	4911      	ldr	r1, [pc, #68]	; (8008470 <mg_tcpip_driver_stm32_up+0xc0>)
 800842a:	2003      	movs	r0, #3
 800842c:	f7fd ff48 	bl	80062c0 <mg_log_prefix>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d013      	beq.n	800845e <mg_tcpip_driver_stm32_up+0xae>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <mg_tcpip_driver_stm32_up+0x94>
 8008440:	2164      	movs	r1, #100	; 0x64
 8008442:	e000      	b.n	8008446 <mg_tcpip_driver_stm32_up+0x96>
 8008444:	210a      	movs	r1, #10
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <mg_tcpip_driver_stm32_up+0xa4>
 8008450:	4b08      	ldr	r3, [pc, #32]	; (8008474 <mg_tcpip_driver_stm32_up+0xc4>)
 8008452:	e000      	b.n	8008456 <mg_tcpip_driver_stm32_up+0xa6>
 8008454:	4b08      	ldr	r3, [pc, #32]	; (8008478 <mg_tcpip_driver_stm32_up+0xc8>)
 8008456:	461a      	mov	r2, r3
 8008458:	4808      	ldr	r0, [pc, #32]	; (800847c <mg_tcpip_driver_stm32_up+0xcc>)
 800845a:	f7fd ff8b 	bl	8006374 <mg_log>
              maccr & BIT(11) ? "full" : "half"));
  }
  return up;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40028000 	.word	0x40028000
 800846c:	08014050 	.word	0x08014050
 8008470:	08012658 	.word	0x08012658
 8008474:	08013978 	.word	0x08013978
 8008478:	08013980 	.word	0x08013980
 800847c:	08013988 	.word	0x08013988

08008480 <ETH_IRQHandler>:

void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
  if (ETH->DMASR & BIT(6)) {             // Frame received, loop
 8008486:	4b3d      	ldr	r3, [pc, #244]	; (800857c <ETH_IRQHandler+0xfc>)
 8008488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d061      	beq.n	800855a <ETH_IRQHandler+0xda>
    ETH->DMASR = BIT(16) | BIT(6);       // Clear flag
 8008496:	4b39      	ldr	r3, [pc, #228]	; (800857c <ETH_IRQHandler+0xfc>)
 8008498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800849c:	461a      	mov	r2, r3
 800849e:	4b38      	ldr	r3, [pc, #224]	; (8008580 <ETH_IRQHandler+0x100>)
 80084a0:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80084a2:	2300      	movs	r3, #0
 80084a4:	607b      	str	r3, [r7, #4]
 80084a6:	e053      	b.n	8008550 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 80084a8:	4b36      	ldr	r3, [pc, #216]	; (8008584 <ETH_IRQHandler+0x104>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	4a36      	ldr	r2, [pc, #216]	; (8008588 <ETH_IRQHandler+0x108>)
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	4413      	add	r3, r2
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	db4f      	blt.n	8008558 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 80084b8:	4b32      	ldr	r3, [pc, #200]	; (8008584 <ETH_IRQHandler+0x104>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4a32      	ldr	r2, [pc, #200]	; (8008588 <ETH_IRQHandler+0x108>)
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	4413      	add	r3, r2
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084cc:	d128      	bne.n	8008520 <ETH_IRQHandler+0xa0>
          !(s_rxdesc[s_rxno][0] & BIT(15))) {  // skip partial/errored frames
 80084ce:	4b2d      	ldr	r3, [pc, #180]	; (8008584 <ETH_IRQHandler+0x104>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	4a2d      	ldr	r2, [pc, #180]	; (8008588 <ETH_IRQHandler+0x108>)
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	4413      	add	r3, r2
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d11e      	bne.n	8008520 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (BIT(14) - 1));
 80084e2:	4b28      	ldr	r3, [pc, #160]	; (8008584 <ETH_IRQHandler+0x104>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	4a28      	ldr	r2, [pc, #160]	; (8008588 <ETH_IRQHandler+0x108>)
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	4413      	add	r3, r2
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80084f4:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80084f6:	4b23      	ldr	r3, [pc, #140]	; (8008584 <ETH_IRQHandler+0x104>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f240 6304 	movw	r3, #1540	; 0x604
 8008500:	fb02 f303 	mul.w	r3, r2, r3
 8008504:	4a21      	ldr	r2, [pc, #132]	; (800858c <ETH_IRQHandler+0x10c>)
 8008506:	1898      	adds	r0, r3, r2
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b04      	cmp	r3, #4
 800850c:	d902      	bls.n	8008514 <ETH_IRQHandler+0x94>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3b04      	subs	r3, #4
 8008512:	e000      	b.n	8008516 <ETH_IRQHandler+0x96>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	4a1e      	ldr	r2, [pc, #120]	; (8008590 <ETH_IRQHandler+0x110>)
 8008518:	6812      	ldr	r2, [r2, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	f002 faac 	bl	800aa78 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = BIT(31);
 8008520:	4b18      	ldr	r3, [pc, #96]	; (8008584 <ETH_IRQHandler+0x104>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	4a18      	ldr	r2, [pc, #96]	; (8008588 <ETH_IRQHandler+0x108>)
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	4413      	add	r3, r2
 800852a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800852e:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8008530:	4b14      	ldr	r3, [pc, #80]	; (8008584 <ETH_IRQHandler+0x104>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	4b12      	ldr	r3, [pc, #72]	; (8008584 <ETH_IRQHandler+0x104>)
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	4b11      	ldr	r3, [pc, #68]	; (8008584 <ETH_IRQHandler+0x104>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d902      	bls.n	800854a <ETH_IRQHandler+0xca>
 8008544:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <ETH_IRQHandler+0x104>)
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3301      	adds	r3, #1
 800854e:	607b      	str	r3, [r7, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b09      	cmp	r3, #9
 8008554:	d9a8      	bls.n	80084a8 <ETH_IRQHandler+0x28>
 8008556:	e000      	b.n	800855a <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8008558:	bf00      	nop
    }
  }
  ETH->DMASR = BIT(7);  // Clear possible RBUS while processing
 800855a:	4b08      	ldr	r3, [pc, #32]	; (800857c <ETH_IRQHandler+0xfc>)
 800855c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008560:	461a      	mov	r2, r3
 8008562:	2380      	movs	r3, #128	; 0x80
 8008564:	6153      	str	r3, [r2, #20]
  ETH->DMARPDR = 0;     // and resume RX
 8008566:	4b05      	ldr	r3, [pc, #20]	; (800857c <ETH_IRQHandler+0xfc>)
 8008568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800856c:	461a      	mov	r2, r3
 800856e:	2300      	movs	r3, #0
 8008570:	6093      	str	r3, [r2, #8]
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40028000 	.word	0x40028000
 8008580:	00010040 	.word	0x00010040
 8008584:	2000366d 	.word	0x2000366d
 8008588:	200005cc 	.word	0x200005cc
 800858c:	2000064c 	.word	0x2000064c
 8008590:	20003670 	.word	0x20003670

08008594 <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 8008594:	b590      	push	{r4, r7, lr}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	441a      	add	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	68fc      	ldr	r4, [r7, #12]
 80085b0:	463b      	mov	r3, r7
 80085b2:	68b9      	ldr	r1, [r7, #8]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fd68 	bl	800708a <mg_str_n>
 80085ba:	f104 0308 	add.w	r3, r4, #8
 80085be:	463a      	mov	r2, r7
 80085c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085c4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd90      	pop	{r4, r7, pc}

080085d0 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e016      	b.n	8008614 <csumup+0x44>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <csumup+0x2c>
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	4413      	add	r3, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	e005      	b.n	8008608 <csumup+0x38>
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4413      	add	r3, r2
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	461a      	mov	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	3301      	adds	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	d3e4      	bcc.n	80085e6 <csumup+0x16>
  return sum;
 800861c:	68fb      	ldr	r3, [r7, #12]
}
 800861e:	4618      	mov	r0, r3
 8008620:	371c      	adds	r7, #28
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8008632:	e005      	b.n	8008640 <csumfin+0x16>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	0c1b      	lsrs	r3, r3, #16
 800863c:	4413      	add	r3, r2
 800863e:	607b      	str	r3, [r7, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f5      	bne.n	8008634 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	b29b      	uxth	r3, r3
 800864c:	43db      	mvns	r3, r3
 800864e:	b29b      	uxth	r3, r3
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fb54 	bl	8007cfe <mg_ntohs>
 8008656:	4603      	mov	r3, r0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	2000      	movs	r0, #0
 8008670:	f7ff ffae 	bl	80085d0 <csumup>
 8008674:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff ffd7 	bl	800862a <csumfin>
 800867c:	4603      	mov	r3, r0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6950      	ldr	r0, [r2, #20]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	4798      	blx	r3
 80086a0:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d104      	bne.n	80086b4 <ether_output+0x2e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 80086b4:	68fb      	ldr	r3, [r7, #12]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	330e      	adds	r3, #14
 80086d2:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2206      	movs	r2, #6
 80086d8:	21ff      	movs	r1, #255	; 0xff
 80086da:	4618      	mov	r0, r3
 80086dc:	f009 f88d 	bl	80117fa <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3306      	adds	r3, #6
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	2206      	movs	r2, #6
 80086e8:	4618      	mov	r0, r3
 80086ea:	f009 f950 	bl	801198e <memcpy>
  eth->type = mg_htons(0x806);
 80086ee:	f640 0006 	movw	r0, #2054	; 0x806
 80086f2:	f7ff fb04 	bl	8007cfe <mg_ntohs>
 80086f6:	4603      	mov	r3, r0
 80086f8:	461a      	mov	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 80086fe:	221c      	movs	r2, #28
 8008700:	2100      	movs	r1, #0
 8008702:	68b8      	ldr	r0, [r7, #8]
 8008704:	f009 f879 	bl	80117fa <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8008708:	2001      	movs	r0, #1
 800870a:	f7ff faf8 	bl	8007cfe <mg_ntohs>
 800870e:	4603      	mov	r3, r0
 8008710:	461a      	mov	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	801a      	strh	r2, [r3, #0]
 8008716:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800871a:	f7ff faf0 	bl	8007cfe <mg_ntohs>
 800871e:	4603      	mov	r3, r0
 8008720:	461a      	mov	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	805a      	strh	r2, [r3, #2]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2206      	movs	r2, #6
 800872a:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2204      	movs	r2, #4
 8008730:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8008732:	2001      	movs	r0, #1
 8008734:	f7ff fae3 	bl	8007cfe <mg_ntohs>
 8008738:	4603      	mov	r3, r0
 800873a:	461a      	mov	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	80da      	strh	r2, [r3, #6]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	619a      	str	r2, [r3, #24]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	3308      	adds	r3, #8
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	2206      	movs	r2, #6
 8008758:	4618      	mov	r0, r3
 800875a:	f009 f918 	bl	801198e <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f103 021c 	add.w	r2, r3, #28
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff8b 	bl	8008686 <ether_output>
}
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008786:	2b03      	cmp	r3, #3
 8008788:	d138      	bne.n	80087fc <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800878a:	4b35      	ldr	r3, [pc, #212]	; (8008860 <onstatechange+0xe8>)
 800878c:	f641 62dd 	movw	r2, #7901	; 0x1edd
 8008790:	4934      	ldr	r1, [pc, #208]	; (8008864 <onstatechange+0xec>)
 8008792:	2002      	movs	r0, #2
 8008794:	f7fd fd94 	bl	80062c0 <mg_log_prefix>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d006      	beq.n	80087ac <onstatechange+0x34>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3308      	adds	r3, #8
 80087a2:	461a      	mov	r2, r3
 80087a4:	4930      	ldr	r1, [pc, #192]	; (8008868 <onstatechange+0xf0>)
 80087a6:	4831      	ldr	r0, [pc, #196]	; (800886c <onstatechange+0xf4>)
 80087a8:	f7fd fde4 	bl	8006374 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 80087ac:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <onstatechange+0xe8>)
 80087ae:	f641 62de 	movw	r2, #7902	; 0x1ede
 80087b2:	492c      	ldr	r1, [pc, #176]	; (8008864 <onstatechange+0xec>)
 80087b4:	2002      	movs	r0, #2
 80087b6:	f7fd fd83 	bl	80062c0 <mg_log_prefix>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <onstatechange+0x56>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3310      	adds	r3, #16
 80087c4:	461a      	mov	r2, r3
 80087c6:	4928      	ldr	r1, [pc, #160]	; (8008868 <onstatechange+0xf0>)
 80087c8:	4829      	ldr	r0, [pc, #164]	; (8008870 <onstatechange+0xf8>)
 80087ca:	f7fd fdd3 	bl	8006374 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <onstatechange+0xe8>)
 80087d0:	f641 62df 	movw	r2, #7903	; 0x1edf
 80087d4:	4923      	ldr	r1, [pc, #140]	; (8008864 <onstatechange+0xec>)
 80087d6:	2002      	movs	r0, #2
 80087d8:	f7fd fd72 	bl	80062c0 <mg_log_prefix>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <onstatechange+0x76>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4923      	ldr	r1, [pc, #140]	; (8008874 <onstatechange+0xfc>)
 80087e8:	4823      	ldr	r0, [pc, #140]	; (8008878 <onstatechange+0x100>)
 80087ea:	f7fd fdc3 	bl	8006374 <mg_log>
    arp_ask(ifp, ifp->gw);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff ff62 	bl	80086be <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 80087fa:	e02c      	b.n	8008856 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008802:	2b01      	cmp	r3, #1
 8008804:	d115      	bne.n	8008832 <onstatechange+0xba>
    MG_ERROR(("Link up"));
 8008806:	4b16      	ldr	r3, [pc, #88]	; (8008860 <onstatechange+0xe8>)
 8008808:	f641 62e2 	movw	r2, #7906	; 0x1ee2
 800880c:	4915      	ldr	r1, [pc, #84]	; (8008864 <onstatechange+0xec>)
 800880e:	2001      	movs	r0, #1
 8008810:	f7fd fd56 	bl	80062c0 <mg_log_prefix>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <onstatechange+0xa8>
 800881a:	4818      	ldr	r0, [pc, #96]	; (800887c <onstatechange+0x104>)
 800881c:	f7fd fdaa 	bl	8006374 <mg_log>
    srand((unsigned int) mg_millis());
 8008820:	f7ff fabe 	bl	8007da0 <mg_millis>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4613      	mov	r3, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f008 fde2 	bl	80113f4 <srand>
}
 8008830:	e011      	b.n	8008856 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10c      	bne.n	8008856 <onstatechange+0xde>
    MG_ERROR(("Link down"));
 800883c:	4b08      	ldr	r3, [pc, #32]	; (8008860 <onstatechange+0xe8>)
 800883e:	f641 62e5 	movw	r2, #7909	; 0x1ee5
 8008842:	4908      	ldr	r1, [pc, #32]	; (8008864 <onstatechange+0xec>)
 8008844:	2001      	movs	r0, #1
 8008846:	f7fd fd3b 	bl	80062c0 <mg_log_prefix>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <onstatechange+0xde>
 8008850:	480b      	ldr	r0, [pc, #44]	; (8008880 <onstatechange+0x108>)
 8008852:	f7fd fd8f 	bl	8006374 <mg_log>
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	0801406c 	.word	0x0801406c
 8008864:	08012658 	.word	0x08012658
 8008868:	08006b11 	.word	0x08006b11
 800886c:	080139a0 	.word	0x080139a0
 8008870:	080139b0 	.word	0x080139b0
 8008874:	08006bd5 	.word	0x08006bd5
 8008878:	080139c0 	.word	0x080139c0
 800887c:	080139d0 	.word	0x080139d0
 8008880:	080139d8 	.word	0x080139d8

08008884 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	4613      	mov	r3, r2
 8008892:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	330e      	adds	r3, #14
 800889e:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2206      	movs	r2, #6
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f009 f871 	bl	801198e <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3306      	adds	r3, #6
 80088b0:	68f9      	ldr	r1, [r7, #12]
 80088b2:	2206      	movs	r2, #6
 80088b4:	4618      	mov	r0, r3
 80088b6:	f009 f86a 	bl	801198e <memcpy>
  eth->type = mg_htons(0x800);
 80088ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80088be:	f7ff fa1e 	bl	8007cfe <mg_ntohs>
 80088c2:	4603      	mov	r3, r0
 80088c4:	461a      	mov	r2, r3
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 80088ca:	2214      	movs	r2, #20
 80088cc:	2100      	movs	r1, #0
 80088ce:	6938      	ldr	r0, [r7, #16]
 80088d0:	f008 ff93 	bl	80117fa <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	2245      	movs	r2, #69	; 0x45
 80088d8:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2200      	movs	r2, #0
 80088de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e2:	719a      	strb	r2, [r3, #6]
 80088e4:	2200      	movs	r2, #0
 80088e6:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	3314      	adds	r3, #20
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff fa04 	bl	8007cfe <mg_ntohs>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2240      	movs	r2, #64	; 0x40
 8008902:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	79fa      	ldrb	r2, [r7, #7]
 8008908:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6a3a      	ldr	r2, [r7, #32]
 8008914:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8008916:	2114      	movs	r1, #20
 8008918:	6938      	ldr	r0, [r7, #16]
 800891a:	f7ff fea1 	bl	8008660 <ipcsum>
 800891e:	4603      	mov	r3, r0
 8008920:	461a      	mov	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	815a      	strh	r2, [r3, #10]
  return ip;
 8008926:	693b      	ldr	r3, [r7, #16]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8008930:	b580      	push	{r7, lr}
 8008932:	b08a      	sub	sp, #40	; 0x28
 8008934:	af02      	add	r7, sp, #8
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	3308      	adds	r3, #8
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2211      	movs	r2, #17
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f7ff ff98 	bl	8008884 <tx_ip>
 8008954:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	3314      	adds	r3, #20
 800895a:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	887a      	ldrh	r2, [r7, #2]
 8008960:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008966:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8008968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896a:	b29b      	uxth	r3, r3
 800896c:	3308      	adds	r3, #8
 800896e:	b29b      	uxth	r3, r3
 8008970:	4618      	mov	r0, r3
 8008972:	f7ff f9c4 	bl	8007cfe <mg_ntohs>
 8008976:	4603      	mov	r3, r0
 8008978:	461a      	mov	r2, r3
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	2200      	movs	r2, #0
 8008982:	719a      	strb	r2, [r3, #6]
 8008984:	2200      	movs	r2, #0
 8008986:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8008988:	2208      	movs	r2, #8
 800898a:	69b9      	ldr	r1, [r7, #24]
 800898c:	2000      	movs	r0, #0
 800898e:	f7ff fe1f 	bl	80085d0 <csumup>
 8008992:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8008994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008998:	6978      	ldr	r0, [r7, #20]
 800899a:	f7ff fe19 	bl	80085d0 <csumup>
 800899e:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	330c      	adds	r3, #12
 80089a4:	2204      	movs	r2, #4
 80089a6:	4619      	mov	r1, r3
 80089a8:	6978      	ldr	r0, [r7, #20]
 80089aa:	f7ff fe11 	bl	80085d0 <csumup>
 80089ae:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	3310      	adds	r3, #16
 80089b4:	2204      	movs	r2, #4
 80089b6:	4619      	mov	r1, r3
 80089b8:	6978      	ldr	r0, [r7, #20]
 80089ba:	f7ff fe09 	bl	80085d0 <csumup>
 80089be:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	7a5b      	ldrb	r3, [r3, #9]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c8:	441a      	add	r2, r3
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	4413      	add	r3, r2
 80089ce:	3308      	adds	r3, #8
 80089d0:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 80089d2:	6978      	ldr	r0, [r7, #20]
 80089d4:	f7ff fe29 	bl	800862a <csumfin>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	3308      	adds	r3, #8
 80089e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089e8:	4618      	mov	r0, r3
 80089ea:	f008 feec 	bl	80117c6 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	332a      	adds	r3, #42	; 0x2a
 80089f2:	4619      	mov	r1, r3
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f7ff fe46 	bl	8008686 <ether_output>
}
 80089fa:	bf00      	nop
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8008a04:	b5b0      	push	{r4, r5, r7, lr}
 8008a06:	b0cc      	sub	sp, #304	; 0x130
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008a0e:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8008a12:	6020      	str	r0, [r4, #0]
 8008a14:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8008a18:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8008a1c:	6001      	str	r1, [r0, #0]
 8008a1e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8008a22:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8008a26:	600a      	str	r2, [r1, #0]
 8008a28:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008a2c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008a30:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8008a32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a36:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a3a:	4a38      	ldr	r2, [pc, #224]	; (8008b1c <tx_dhcp+0x118>)
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	4611      	mov	r1, r2
 8008a40:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a44:	461a      	mov	r2, r3
 8008a46:	f008 ffa2 	bl	801198e <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8008a4a:	4835      	ldr	r0, [pc, #212]	; (8008b20 <tx_dhcp+0x11c>)
 8008a4c:	f7ff f93e 	bl	8007ccc <mg_ntohl>
 8008a50:	4602      	mov	r2, r0
 8008a52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a5a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8008a5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a66:	6819      	ldr	r1, [r3, #0]
 8008a68:	f107 0310 	add.w	r3, r7, #16
 8008a6c:	331c      	adds	r3, #28
 8008a6e:	2206      	movs	r2, #6
 8008a70:	4618      	mov	r0, r3
 8008a72:	f008 ff8c 	bl	801198e <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8008a76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3302      	adds	r3, #2
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a8e:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8008a90:	f107 0310 	add.w	r3, r7, #16
 8008a94:	33f0      	adds	r3, #240	; 0xf0
 8008a96:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008a9a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f008 ff75 	bl	801198e <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8008aa4:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d009      	beq.n	8008ac0 <tx_dhcp+0xbc>
 8008aac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ab4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008ab8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8008ac0:	2044      	movs	r0, #68	; 0x44
 8008ac2:	f7ff f91c 	bl	8007cfe <mg_ntohs>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	461d      	mov	r5, r3
 8008aca:	2043      	movs	r0, #67	; 0x43
 8008acc:	f7ff f917 	bl	8007cfe <mg_ntohs>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ad8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008adc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ae0:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8008ae4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ae8:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008aec:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008af0:	9303      	str	r3, [sp, #12]
 8008af2:	f107 0310 	add.w	r3, r7, #16
 8008af6:	9302      	str	r3, [sp, #8]
 8008af8:	9401      	str	r4, [sp, #4]
 8008afa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008afe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	462b      	mov	r3, r5
 8008b08:	6812      	ldr	r2, [r2, #0]
 8008b0a:	6809      	ldr	r1, [r1, #0]
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	f7ff ff0f 	bl	8008930 <tx_udp>
         sizeof(dhcp));
}
 8008b12:	bf00      	nop
 8008b14:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b1c:	080139e4 	.word	0x080139e4
 8008b20:	63825363 	.word	0x63825363

08008b24 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8008b24:	b5b0      	push	{r4, r5, r7, lr}
 8008b26:	b090      	sub	sp, #64	; 0x40
 8008b28:	af04      	add	r7, sp, #16
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8008b30:	4b19      	ldr	r3, [pc, #100]	; (8008b98 <tx_dhcp_request_sel+0x74>)
 8008b32:	f107 0414 	add.w	r4, r7, #20
 8008b36:	461d      	mov	r5, r3
 8008b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b40:	c403      	stmia	r4!, {r0, r1}
 8008b42:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 8008b44:	f107 0314 	add.w	r3, r7, #20
 8008b48:	330e      	adds	r3, #14
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 8008b4e:	f107 0314 	add.w	r3, r7, #20
 8008b52:	3314      	adds	r3, #20
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	2319      	movs	r3, #25
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	f107 0314 	add.w	r3, r7, #20
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	490b      	ldr	r1, [pc, #44]	; (8008b9c <tx_dhcp_request_sel+0x78>)
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff ff48 	bl	8008a04 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008b74:	4b0a      	ldr	r3, [pc, #40]	; (8008ba0 <tx_dhcp_request_sel+0x7c>)
 8008b76:	f641 7231 	movw	r2, #7985	; 0x1f31
 8008b7a:	490a      	ldr	r1, [pc, #40]	; (8008ba4 <tx_dhcp_request_sel+0x80>)
 8008b7c:	2003      	movs	r0, #3
 8008b7e:	f7fd fb9f 	bl	80062c0 <mg_log_prefix>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <tx_dhcp_request_sel+0x6a>
 8008b88:	4807      	ldr	r0, [pc, #28]	; (8008ba8 <tx_dhcp_request_sel+0x84>)
 8008b8a:	f7fd fbf3 	bl	8006374 <mg_log>
}
 8008b8e:	bf00      	nop
 8008b90:	3730      	adds	r7, #48	; 0x30
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bdb0      	pop	{r4, r5, r7, pc}
 8008b96:	bf00      	nop
 8008b98:	08013b04 	.word	0x08013b04
 8008b9c:	08013f44 	.word	0x08013f44
 8008ba0:	0801407c 	.word	0x0801407c
 8008ba4:	08012658 	.word	0x08012658
 8008ba8:	08013af4 	.word	0x08013af4

08008bac <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	; 0x28
 8008bb0:	af04      	add	r7, sp, #16
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 8008bba:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <tx_dhcp_request_re+0x50>)
 8008bbc:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	9302      	str	r3, [sp, #8]
 8008bc2:	2304      	movs	r3, #4
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f107 0314 	add.w	r3, r7, #20
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff ff16 	bl	8008a04 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <tx_dhcp_request_re+0x54>)
 8008bda:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8008bde:	4909      	ldr	r1, [pc, #36]	; (8008c04 <tx_dhcp_request_re+0x58>)
 8008be0:	2003      	movs	r0, #3
 8008be2:	f7fd fb6d 	bl	80062c0 <mg_log_prefix>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <tx_dhcp_request_re+0x46>
 8008bec:	4806      	ldr	r0, [pc, #24]	; (8008c08 <tx_dhcp_request_re+0x5c>)
 8008bee:	f7fd fbc1 	bl	8006374 <mg_log>
}
 8008bf2:	bf00      	nop
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	ff030135 	.word	0xff030135
 8008c00:	08014090 	.word	0x08014090
 8008c04:	08012658 	.word	0x08012658
 8008c08:	08013af4 	.word	0x08013af4

08008c0c <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af04      	add	r7, sp, #16
 8008c12:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 8008c14:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <tx_dhcp_discover+0x5c>)
 8008c16:	f107 0308 	add.w	r3, r7, #8
 8008c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c1e:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008c22:	2300      	movs	r3, #0
 8008c24:	9302      	str	r3, [sp, #8]
 8008c26:	2308      	movs	r3, #8
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	f107 0308 	add.w	r3, r7, #8
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	f04f 33ff 	mov.w	r3, #4294967295
 8008c34:	2200      	movs	r2, #0
 8008c36:	490d      	ldr	r1, [pc, #52]	; (8008c6c <tx_dhcp_discover+0x60>)
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff fee3 	bl	8008a04 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <tx_dhcp_discover+0x64>)
 8008c40:	f641 7246 	movw	r2, #8006	; 0x1f46
 8008c44:	490b      	ldr	r1, [pc, #44]	; (8008c74 <tx_dhcp_discover+0x68>)
 8008c46:	2003      	movs	r0, #3
 8008c48:	f7fd fb3a 	bl	80062c0 <mg_log_prefix>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <tx_dhcp_discover+0x52>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	461a      	mov	r2, r3
 8008c56:	4908      	ldr	r1, [pc, #32]	; (8008c78 <tx_dhcp_discover+0x6c>)
 8008c58:	4808      	ldr	r0, [pc, #32]	; (8008c7c <tx_dhcp_discover+0x70>)
 8008c5a:	f7fd fb8b 	bl	8006374 <mg_log>
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	08013b40 	.word	0x08013b40
 8008c6c:	08013f44 	.word	0x08013f44
 8008c70:	080140a4 	.word	0x080140a4
 8008c74:	08012658 	.word	0x08012658
 8008c78:	08006bd5 	.word	0x08006bd5
 8008c7c:	08013b20 	.word	0x08013b20

08008c80 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	617b      	str	r3, [r7, #20]
 8008c98:	e03e      	b.n	8008d18 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <getpeer+0x42>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <getpeer+0x42>
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	8b1a      	ldrh	r2, [r3, #24]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cba:	885b      	ldrh	r3, [r3, #2]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d02e      	beq.n	8008d20 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d11f      	bne.n	8008d12 <getpeer+0x92>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d01b      	beq.n	8008d12 <getpeer+0x92>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	8b1a      	ldrh	r2, [r3, #24]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	885b      	ldrh	r3, [r3, #2]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d113      	bne.n	8008d12 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008cf0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cf4:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008cf6:	79fa      	ldrb	r2, [r7, #7]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d10a      	bne.n	8008d12 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10f      	bne.n	8008d22 <getpeer+0xa2>
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d007      	beq.n	8008d22 <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1bd      	bne.n	8008c9a <getpeer+0x1a>
 8008d1e:	e000      	b.n	8008d22 <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008d20:	bf00      	nop
      break;
  }
  return c;
 8008d22:	697b      	ldr	r3, [r7, #20]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	371c      	adds	r7, #28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008d30:	b5b0      	push	{r4, r5, r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	88db      	ldrh	r3, [r3, #6]
 8008d40:	b29c      	uxth	r4, r3
 8008d42:	2001      	movs	r0, #1
 8008d44:	f7fe ffdb 	bl	8007cfe <mg_ntohs>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	429c      	cmp	r4, r3
 8008d4c:	d176      	bne.n	8008e3c <rx_arp+0x10c>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d16f      	bne.n	8008e3c <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	330e      	adds	r3, #14
 8008d66:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8008d68:	6978      	ldr	r0, [r7, #20]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	3306      	adds	r3, #6
 8008d70:	2206      	movs	r2, #6
 8008d72:	4619      	mov	r1, r3
 8008d74:	f008 fe0b 	bl	801198e <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	3306      	adds	r3, #6
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	2206      	movs	r2, #6
 8008d80:	4618      	mov	r0, r3
 8008d82:	f008 fe04 	bl	801198e <memcpy>
    eth->type = mg_htons(0x806);
 8008d86:	f640 0006 	movw	r0, #2054	; 0x806
 8008d8a:	f7fe ffb8 	bl	8007cfe <mg_ntohs>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	461a      	mov	r2, r3
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	699a      	ldr	r2, [r3, #24]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6814      	ldr	r4, [r2, #0]
 8008d9e:	6850      	ldr	r0, [r2, #4]
 8008da0:	6891      	ldr	r1, [r2, #8]
 8008da2:	68d5      	ldr	r5, [r2, #12]
 8008da4:	601c      	str	r4, [r3, #0]
 8008da6:	6058      	str	r0, [r3, #4]
 8008da8:	6099      	str	r1, [r3, #8]
 8008daa:	60dd      	str	r5, [r3, #12]
 8008dac:	6914      	ldr	r4, [r2, #16]
 8008dae:	6950      	ldr	r0, [r2, #20]
 8008db0:	6991      	ldr	r1, [r2, #24]
 8008db2:	611c      	str	r4, [r3, #16]
 8008db4:	6158      	str	r0, [r3, #20]
 8008db6:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8008db8:	2002      	movs	r0, #2
 8008dba:	f7fe ffa0 	bl	8007cfe <mg_ntohs>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f103 0012 	add.w	r0, r3, #18
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	2206      	movs	r2, #6
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f008 fdda 	bl	801198e <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	2206      	movs	r2, #6
 8008de2:	4618      	mov	r0, r3
 8008de4:	f008 fdd3 	bl	801198e <memcpy>
    arp->tpa = pkt->arp->spa;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 8008dfe:	4b46      	ldr	r3, [pc, #280]	; (8008f18 <rx_arp+0x1e8>)
 8008e00:	f641 7265 	movw	r2, #8037	; 0x1f65
 8008e04:	4945      	ldr	r1, [pc, #276]	; (8008f1c <rx_arp+0x1ec>)
 8008e06:	2003      	movs	r0, #3
 8008e08:	f7fd fa5a 	bl	80062c0 <mg_log_prefix>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <rx_arp+0xf8>
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f103 0218 	add.w	r2, r3, #24
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	4b40      	ldr	r3, [pc, #256]	; (8008f20 <rx_arp+0x1f0>)
 8008e20:	493f      	ldr	r1, [pc, #252]	; (8008f20 <rx_arp+0x1f0>)
 8008e22:	4840      	ldr	r0, [pc, #256]	; (8008f24 <rx_arp+0x1f4>)
 8008e24:	f7fd faa6 	bl	8006374 <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f103 021c 	add.w	r2, r3, #28
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fc26 	bl	8008686 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008e3a:	e069      	b.n	8008f10 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	88db      	ldrh	r3, [r3, #6]
 8008e42:	b29c      	uxth	r4, r3
 8008e44:	2002      	movs	r0, #2
 8008e46:	f7fe ff5a 	bl	8007cfe <mg_ntohs>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	d15f      	bne.n	8008f10 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	3312      	adds	r3, #18
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	2206      	movs	r2, #6
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f008 fca3 	bl	80117a6 <memcmp>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d153      	bne.n	8008f0e <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d10a      	bne.n	8008e8c <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	3308      	adds	r3, #8
 8008e82:	2206      	movs	r2, #6
 8008e84:	4619      	mov	r1, r3
 8008e86:	f008 fd82 	bl	801198e <memcpy>
 8008e8a:	e041      	b.n	8008f10 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	2200      	movs	r2, #0
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff fef3 	bl	8008c80 <getpeer>
 8008e9a:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d036      	beq.n	8008f10 <rx_arp+0x1e0>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008ea8:	f003 0310 	and.w	r3, r3, #16
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d02e      	beq.n	8008f10 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3390      	adds	r3, #144	; 0x90
 8008eb6:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f103 0010 	add.w	r0, r3, #16
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	2206      	movs	r2, #6
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f008 fd61 	bl	801198e <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8008ecc:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <rx_arp+0x1e8>)
 8008ece:	f641 7272 	movw	r2, #8050	; 0x1f72
 8008ed2:	4912      	ldr	r1, [pc, #72]	; (8008f1c <rx_arp+0x1ec>)
 8008ed4:	2003      	movs	r0, #3
 8008ed6:	f7fd f9f3 	bl	80062c0 <mg_log_prefix>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00e      	beq.n	8008efe <rx_arp+0x1ce>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f103 021c 	add.w	r2, r3, #28
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	3310      	adds	r3, #16
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <rx_arp+0x1f8>)
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	4a0a      	ldr	r2, [pc, #40]	; (8008f20 <rx_arp+0x1f0>)
 8008ef8:	480c      	ldr	r0, [pc, #48]	; (8008f2c <rx_arp+0x1fc>)
 8008efa:	f7fd fa3b 	bl	8006374 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8008f04:	f36f 1304 	bfc	r3, #4, #1
 8008f08:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 8008f0c:	e000      	b.n	8008f10 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8008f0e:	bf00      	nop
      }
    }
  }
}
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bdb0      	pop	{r4, r5, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	080140b8 	.word	0x080140b8
 8008f1c:	08012658 	.word	0x08012658
 8008f20:	08006b11 	.word	0x08006b11
 8008f24:	08013b48 	.word	0x08013b48
 8008f28:	08006bd5 	.word	0x08006bd5
 8008f2c:	08013b60 	.word	0x08013b60

08008f30 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08a      	sub	sp, #40	; 0x28
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d14d      	bne.n	8008fe0 <rx_icmp+0xb0>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d049      	beq.n	8008fe0 <rx_icmp+0xb0>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	691a      	ldr	r2, [r3, #16]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d142      	bne.n	8008fe0 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 8008f5a:	2326      	movs	r3, #38	; 0x26
 8008f5c:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699a      	ldr	r2, [r3, #24]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d901      	bls.n	8008f7a <rx_icmp+0x4a>
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	1d99      	adds	r1, r3, #6
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6898      	ldr	r0, [r3, #8]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	3204      	adds	r2, #4
 8008f8e:	9201      	str	r2, [sp, #4]
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4603      	mov	r3, r0
 8008f94:	2201      	movs	r2, #1
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff fc74 	bl	8008884 <tx_ip>
 8008f9c:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3314      	adds	r3, #20
 8008fa2:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f008 fc26 	bl	80117fa <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	1d18      	adds	r0, r3, #4
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	f008 fce8 	bl	801198e <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff fb4b 	bl	8008660 <ipcsum>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fb53 	bl	8008686 <ether_output>
  }
}
 8008fe0:	bf00      	nop
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fec:	b08e      	sub	sp, #56	; 0x38
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	623b      	str	r3, [r7, #32]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	2300      	movs	r3, #0
 8009002:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 8009004:	2300      	movs	r3, #0
 8009006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009018:	33f0      	adds	r3, #240	; 0xf0
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4413      	add	r3, r2
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009032:	429a      	cmp	r2, r3
 8009034:	f0c0 8151 	bcc.w	80092da <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903c:	1d18      	adds	r0, r3, #4
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3302      	adds	r3, #2
 8009042:	2204      	movs	r2, #4
 8009044:	4619      	mov	r1, r3
 8009046:	f008 fbae 	bl	80117a6 <memcmp>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 8146 	bne.w	80092de <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8009052:	e05b      	b.n	800910c <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d10e      	bne.n	800907a <rx_dhcp_client+0x92>
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	3301      	adds	r3, #1
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b04      	cmp	r3, #4
 8009064:	d109      	bne.n	800907a <rx_dhcp_client+0x92>
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	3306      	adds	r3, #6
 800906a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906c:	429a      	cmp	r2, r3
 800906e:	d904      	bls.n	800907a <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	3302      	adds	r3, #2
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	e041      	b.n	80090fe <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b03      	cmp	r3, #3
 8009080:	d112      	bne.n	80090a8 <rx_dhcp_client+0xc0>
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	3301      	adds	r3, #1
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d10d      	bne.n	80090a8 <rx_dhcp_client+0xc0>
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	3306      	adds	r3, #6
 8009090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009092:	429a      	cmp	r2, r3
 8009094:	d908      	bls.n	80090a8 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	3302      	adds	r3, #2
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
 80090a6:	e02a      	b.n	80090fe <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b33      	cmp	r3, #51	; 0x33
 80090ae:	d114      	bne.n	80090da <rx_dhcp_client+0xf2>
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	3301      	adds	r3, #1
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d10f      	bne.n	80090da <rx_dhcp_client+0xf2>
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	3306      	adds	r3, #6
 80090be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d90a      	bls.n	80090da <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	3302      	adds	r3, #2
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fdfc 	bl	8007ccc <mg_ntohl>
 80090d4:	4603      	mov	r3, r0
 80090d6:	61bb      	str	r3, [r7, #24]
 80090d8:	e011      	b.n	80090fe <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b35      	cmp	r3, #53	; 0x35
 80090e0:	d10d      	bne.n	80090fe <rx_dhcp_client+0x116>
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	3301      	adds	r3, #1
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d108      	bne.n	80090fe <rx_dhcp_client+0x116>
 80090ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ee:	3306      	adds	r3, #6
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d903      	bls.n	80090fe <rx_dhcp_client+0x116>
      msgtype = p[2];
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	789b      	ldrb	r3, [r3, #2]
 80090fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	3301      	adds	r3, #1
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	3302      	adds	r3, #2
 8009106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009108:	4413      	add	r3, r2
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	3301      	adds	r3, #1
 8009110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009112:	429a      	cmp	r2, r3
 8009114:	d903      	bls.n	800911e <rx_dhcp_client+0x136>
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2bff      	cmp	r3, #255	; 0xff
 800911c:	d19a      	bne.n	8009054 <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800911e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009122:	2b06      	cmp	r3, #6
 8009124:	d10c      	bne.n	8009140 <rx_dhcp_client+0x158>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800912c:	429a      	cmp	r2, r3
 800912e:	d107      	bne.n	8009140 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	609a      	str	r2, [r3, #8]
 800913e:	e0c1      	b.n	80092c4 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8009140:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009144:	2b02      	cmp	r3, #2
 8009146:	d11a      	bne.n	800917e <rx_dhcp_client+0x196>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800914e:	2b01      	cmp	r3, #1
 8009150:	d115      	bne.n	800917e <rx_dhcp_client+0x196>
 8009152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009154:	2b00      	cmp	r3, #0
 8009156:	d012      	beq.n	800917e <rx_dhcp_client+0x196>
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00f      	beq.n	800917e <rx_dhcp_client+0x196>
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00c      	beq.n	800917e <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	461a      	mov	r2, r3
 800916c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fcd8 	bl	8008b24 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800917c:	e0a2      	b.n	80092c4 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 800917e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009182:	2b05      	cmp	r3, #5
 8009184:	f040 809e 	bne.w	80092c4 <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800918e:	2b02      	cmp	r3, #2
 8009190:	d162      	bne.n	8009258 <rx_dhcp_client+0x270>
 8009192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009194:	2b00      	cmp	r3, #0
 8009196:	d05f      	beq.n	8009258 <rx_dhcp_client+0x270>
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d05c      	beq.n	8009258 <rx_dhcp_client+0x270>
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d059      	beq.n	8009258 <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80091aa:	69b9      	ldr	r1, [r7, #24]
 80091ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091b0:	fb00 f101 	mul.w	r1, r0, r1
 80091b4:	2000      	movs	r0, #0
 80091b6:	4688      	mov	r8, r1
 80091b8:	4681      	mov	r9, r0
 80091ba:	eb12 0108 	adds.w	r1, r2, r8
 80091be:	6039      	str	r1, [r7, #0]
 80091c0:	eb43 0309 	adc.w	r3, r3, r9
 80091c4:	607b      	str	r3, [r7, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80091cc:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80091d0:	4b45      	ldr	r3, [pc, #276]	; (80092e8 <rx_dhcp_client+0x300>)
 80091d2:	f641 72aa 	movw	r2, #8106	; 0x1faa
 80091d6:	4945      	ldr	r1, [pc, #276]	; (80092ec <rx_dhcp_client+0x304>)
 80091d8:	2002      	movs	r0, #2
 80091da:	f7fd f871 	bl	80062c0 <mg_log_prefix>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00f      	beq.n	8009204 <rx_dhcp_client+0x21c>
 80091e4:	69bc      	ldr	r4, [r7, #24]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80091ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091f0:	f04f 0300 	mov.w	r3, #0
 80091f4:	f7f7 fcf2 	bl	8000bdc <__aeabi_uldivmod>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4621      	mov	r1, r4
 80091fe:	483c      	ldr	r0, [pc, #240]	; (80092f0 <rx_dhcp_client+0x308>)
 8009200:	f7fd f8b8 	bl	8006374 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	3306      	adds	r3, #6
 8009210:	2206      	movs	r2, #6
 8009212:	4619      	mov	r1, r3
 8009214:	f008 fbbb 	bl	801198e <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800921c:	609a      	str	r2, [r3, #8]
 800921e:	6a3a      	ldr	r2, [r7, #32]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	611a      	str	r2, [r3, #16]
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2203      	movs	r2, #3
 800922e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	2108      	movs	r1, #8
 8009238:	4618      	mov	r0, r3
 800923a:	f7f8 f85b 	bl	80012f4 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800923e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009242:	4614      	mov	r4, r2
 8009244:	f7fe fdac 	bl	8007da0 <mg_millis>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4613      	mov	r3, r2
 800924e:	4423      	add	r3, r4
 8009250:	4618      	mov	r0, r3
 8009252:	f008 f8cf 	bl	80113f4 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8009256:	e035      	b.n	80092c4 <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800925e:	2b03      	cmp	r3, #3
 8009260:	d130      	bne.n	80092c4 <rx_dhcp_client+0x2dc>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009268:	429a      	cmp	r2, r3
 800926a:	d12b      	bne.n	80092c4 <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009272:	69b9      	ldr	r1, [r7, #24]
 8009274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009278:	fb00 f101 	mul.w	r1, r0, r1
 800927c:	2000      	movs	r0, #0
 800927e:	460c      	mov	r4, r1
 8009280:	4605      	mov	r5, r0
 8009282:	eb12 0a04 	adds.w	sl, r2, r4
 8009286:	eb43 0b05 	adc.w	fp, r3, r5
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8009290:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <rx_dhcp_client+0x300>)
 8009292:	f641 72b4 	movw	r2, #8116	; 0x1fb4
 8009296:	4915      	ldr	r1, [pc, #84]	; (80092ec <rx_dhcp_client+0x304>)
 8009298:	2002      	movs	r0, #2
 800929a:	f7fd f811 	bl	80062c0 <mg_log_prefix>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00f      	beq.n	80092c4 <rx_dhcp_client+0x2dc>
 80092a4:	69bc      	ldr	r4, [r7, #24]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80092ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	f7f7 fc92 	bl	8000bdc <__aeabi_uldivmod>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4621      	mov	r1, r4
 80092be:	480c      	ldr	r0, [pc, #48]	; (80092f0 <rx_dhcp_client+0x308>)
 80092c0:	f7fd f858 	bl	8006374 <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092ca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d006      	beq.n	80092e0 <rx_dhcp_client+0x2f8>
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7ff fa50 	bl	8008778 <onstatechange>
 80092d8:	e002      	b.n	80092e0 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80092da:	bf00      	nop
 80092dc:	e000      	b.n	80092e0 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80092de:	bf00      	nop
}
 80092e0:	3738      	adds	r7, #56	; 0x38
 80092e2:	46bd      	mov	sp, r7
 80092e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092e8:	080140c0 	.word	0x080140c0
 80092ec:	08012658 	.word	0x08012658
 80092f0:	08013b7c 	.word	0x08013b7c

080092f4 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	b0d6      	sub	sp, #344	; 0x158
 80092fa:	af04      	add	r7, sp, #16
 80092fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009300:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009304:	6018      	str	r0, [r3, #0]
 8009306:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800930a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800930e:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 8009310:	2300      	movs	r3, #0
 8009312:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8009316:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800931a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	33f0      	adds	r3, #240	; 0xf0
 8009324:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 8009328:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800932c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009338:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	4413      	add	r3, r2
 8009342:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009346:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800934a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009352:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009356:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800935a:	429a      	cmp	r2, r3
 800935c:	f0c0 818b 	bcc.w	8009676 <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8009360:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009364:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009368:	4ac6      	ldr	r2, [pc, #792]	; (8009684 <rx_dhcp_server+0x390>)
 800936a:	4618      	mov	r0, r3
 800936c:	4611      	mov	r1, r2
 800936e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009372:	461a      	mov	r2, r3
 8009374:	f008 fb0b 	bl	801198e <memcpy>
  res.yiaddr = ifp->ip;
 8009378:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800937c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689a      	ldr	r2, [r3, #8]
 8009384:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009388:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800938c:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800938e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009392:	3310      	adds	r3, #16
 8009394:	3303      	adds	r3, #3
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	3201      	adds	r2, #1
 800939a:	b2d2      	uxtb	r2, r2
 800939c:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800939e:	e020      	b.n	80093e2 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 80093a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b35      	cmp	r3, #53	; 0x35
 80093a8:	d111      	bne.n	80093ce <rx_dhcp_server+0xda>
 80093aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093ae:	3301      	adds	r3, #1
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d10b      	bne.n	80093ce <rx_dhcp_server+0xda>
 80093b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093ba:	3302      	adds	r3, #2
 80093bc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d904      	bls.n	80093ce <rx_dhcp_server+0xda>
      op = p[2];
 80093c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093c8:	789b      	ldrb	r3, [r3, #2]
 80093ca:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 80093ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093d2:	3301      	adds	r3, #1
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	3302      	adds	r3, #2
 80093d8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80093dc:	4413      	add	r3, r2
 80093de:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80093e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093e6:	3301      	adds	r3, #1
 80093e8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d904      	bls.n	80093fa <rx_dhcp_server+0x106>
 80093f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2bff      	cmp	r3, #255	; 0xff
 80093f8:	d1d2      	bne.n	80093a0 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 80093fa:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d004      	beq.n	800940c <rx_dhcp_server+0x118>
 8009402:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009406:	2b03      	cmp	r3, #3
 8009408:	f040 8136 	bne.w	8009678 <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800940c:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009410:	2b01      	cmp	r3, #1
 8009412:	d101      	bne.n	8009418 <rx_dhcp_server+0x124>
 8009414:	2302      	movs	r3, #2
 8009416:	e000      	b.n	800941a <rx_dhcp_server+0x126>
 8009418:	2305      	movs	r3, #5
 800941a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 800941e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009422:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009426:	2235      	movs	r2, #53	; 0x35
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800942e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009432:	2201      	movs	r2, #1
 8009434:	705a      	strb	r2, [r3, #1]
 8009436:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800943a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800943e:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8009442:	709a      	strb	r2, [r3, #2]
 8009444:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009448:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800944c:	2201      	movs	r2, #1
 800944e:	70da      	strb	r2, [r3, #3]
 8009450:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009454:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009458:	2204      	movs	r2, #4
 800945a:	711a      	strb	r2, [r3, #4]
 800945c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009460:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009464:	2200      	movs	r2, #0
 8009466:	715a      	strb	r2, [r3, #5]
 8009468:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800946c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009470:	2200      	movs	r2, #0
 8009472:	719a      	strb	r2, [r3, #6]
 8009474:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009478:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800947c:	2200      	movs	r2, #0
 800947e:	71da      	strb	r2, [r3, #7]
 8009480:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009484:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009488:	2200      	movs	r2, #0
 800948a:	721a      	strb	r2, [r3, #8]
 800948c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009490:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009494:	2236      	movs	r2, #54	; 0x36
 8009496:	725a      	strb	r2, [r3, #9]
 8009498:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800949c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094a0:	2204      	movs	r2, #4
 80094a2:	729a      	strb	r2, [r3, #10]
 80094a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094ac:	2200      	movs	r2, #0
 80094ae:	72da      	strb	r2, [r3, #11]
 80094b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094b8:	2200      	movs	r2, #0
 80094ba:	731a      	strb	r2, [r3, #12]
 80094bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094c4:	2200      	movs	r2, #0
 80094c6:	735a      	strb	r2, [r3, #13]
 80094c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094d0:	2200      	movs	r2, #0
 80094d2:	739a      	strb	r2, [r3, #14]
 80094d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094dc:	220c      	movs	r2, #12
 80094de:	73da      	strb	r2, [r3, #15]
 80094e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094e8:	2203      	movs	r2, #3
 80094ea:	741a      	strb	r2, [r3, #16]
 80094ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094f4:	226d      	movs	r2, #109	; 0x6d
 80094f6:	745a      	strb	r2, [r3, #17]
 80094f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009500:	2269      	movs	r2, #105	; 0x69
 8009502:	749a      	strb	r2, [r3, #18]
 8009504:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009508:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800950c:	2270      	movs	r2, #112	; 0x70
 800950e:	74da      	strb	r2, [r3, #19]
 8009510:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009514:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009518:	2233      	movs	r2, #51	; 0x33
 800951a:	751a      	strb	r2, [r3, #20]
 800951c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009520:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009524:	2204      	movs	r2, #4
 8009526:	755a      	strb	r2, [r3, #21]
 8009528:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800952c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009530:	22ff      	movs	r2, #255	; 0xff
 8009532:	759a      	strb	r2, [r3, #22]
 8009534:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009538:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800953c:	22ff      	movs	r2, #255	; 0xff
 800953e:	75da      	strb	r2, [r3, #23]
 8009540:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009544:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009548:	22ff      	movs	r2, #255	; 0xff
 800954a:	761a      	strb	r2, [r3, #24]
 800954c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009550:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	765a      	strb	r2, [r3, #25]
 8009558:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800955c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009560:	22ff      	movs	r2, #255	; 0xff
 8009562:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8009564:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009568:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009570:	f103 011c 	add.w	r1, r3, #28
 8009574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009578:	331c      	adds	r3, #28
 800957a:	2206      	movs	r2, #6
 800957c:	4618      	mov	r0, r3
 800957e:	f008 fa06 	bl	801198e <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8009582:	f107 030c 	add.w	r3, r7, #12
 8009586:	3305      	adds	r3, #5
 8009588:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800958c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	320c      	adds	r2, #12
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8009598:	f107 030c 	add.w	r3, r7, #12
 800959c:	330b      	adds	r3, #11
 800959e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80095a2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	3208      	adds	r2, #8
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 80095ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80095b6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80095ba:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80095be:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80095c2:	4615      	mov	r5, r2
 80095c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80095cc:	c403      	stmia	r4!, {r0, r1}
 80095ce:	8022      	strh	r2, [r4, #0]
 80095d0:	3402      	adds	r4, #2
 80095d2:	0c13      	lsrs	r3, r2, #16
 80095d4:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 80095d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80095e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80095ee:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 80095f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095f6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009604:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009608:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800960a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800960e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	1d9d      	adds	r5, r3, #6
 8009618:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800961c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689e      	ldr	r6, [r3, #8]
 8009624:	2043      	movs	r0, #67	; 0x43
 8009626:	f7fe fb6a 	bl	8007cfe <mg_ntohs>
 800962a:	4603      	mov	r3, r0
 800962c:	4698      	mov	r8, r3
 800962e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009632:	2b01      	cmp	r3, #1
 8009634:	d005      	beq.n	8009642 <rx_dhcp_server+0x34e>
 8009636:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800963a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800963e:	691c      	ldr	r4, [r3, #16]
 8009640:	e001      	b.n	8009646 <rx_dhcp_server+0x352>
 8009642:	f04f 34ff 	mov.w	r4, #4294967295
 8009646:	2044      	movs	r0, #68	; 0x44
 8009648:	f7fe fb59 	bl	8007cfe <mg_ntohs>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009654:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8009658:	f44f 7388 	mov.w	r3, #272	; 0x110
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009662:	9302      	str	r3, [sp, #8]
 8009664:	9201      	str	r2, [sp, #4]
 8009666:	9400      	str	r4, [sp, #0]
 8009668:	4643      	mov	r3, r8
 800966a:	4632      	mov	r2, r6
 800966c:	4629      	mov	r1, r5
 800966e:	6800      	ldr	r0, [r0, #0]
 8009670:	f7ff f95e 	bl	8008930 <tx_udp>
 8009674:	e000      	b.n	8009678 <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009676:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8009678:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800967c:	46bd      	mov	sp, r7
 800967e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009682:	bf00      	nop
 8009684:	08013b94 	.word	0x08013b94

08009688 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009696:	2201      	movs	r2, #1
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff faf0 	bl	8008c80 <getpeer>
 80096a0:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d059      	beq.n	800975c <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	331c      	adds	r3, #28
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	69d2      	ldr	r2, [r2, #28]
 80096bc:	320c      	adds	r2, #12
 80096be:	6812      	ldr	r2, [r2, #0]
 80096c0:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3390      	adds	r3, #144	; 0x90
 80096c6:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f103 0010 	add.w	r0, r3, #16
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	3306      	adds	r3, #6
 80096d4:	2206      	movs	r2, #6
 80096d6:	4619      	mov	r1, r3
 80096d8:	f008 f959 	bl	801198e <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096e4:	d304      	bcc.n	80096f0 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 80096e6:	491f      	ldr	r1, [pc, #124]	; (8009764 <rx_udp+0xdc>)
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7f8 f8a5 	bl	8001838 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 80096ee:	e035      	b.n	800975c <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	1ad2      	subs	r2, r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d212      	bcs.n	8009728 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	4413      	add	r3, r2
 8009712:	4619      	mov	r1, r3
 8009714:	f7fb ff52 	bl	80055bc <mg_iobuf_resize>
 8009718:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <rx_udp+0xa0>
      mg_error(c, "oom");
 800971e:	4912      	ldr	r1, [pc, #72]	; (8009768 <rx_udp+0xe0>)
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7f8 f889 	bl	8001838 <mg_error>
}
 8009726:	e019      	b.n	800975c <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	18d0      	adds	r0, r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	6899      	ldr	r1, [r3, #8]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	461a      	mov	r2, r3
 800973c:	f008 f927 	bl	801198e <memcpy>
      c->recv.len += pkt->pay.len;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	441a      	add	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	330c      	adds	r3, #12
 8009752:	461a      	mov	r2, r3
 8009754:	2107      	movs	r1, #7
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f7f8 f84b 	bl	80017f2 <mg_call>
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	08013ca4 	.word	0x08013ca4
 8009768:	08013cc0 	.word	0x08013cc0

0800976c <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800976c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976e:	b091      	sub	sp, #68	; 0x44
 8009770:	af06      	add	r7, sp, #24
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009780:	3314      	adds	r3, #20
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	4613      	mov	r3, r2
 800978a:	2206      	movs	r2, #6
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff f878 	bl	8008884 <tx_ip>
 8009794:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009798:	3314      	adds	r3, #20
 800979a:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800979c:	2214      	movs	r2, #20
 800979e:	2100      	movs	r1, #0
 80097a0:	6a38      	ldr	r0, [r7, #32]
 80097a2:	f008 f82a 	bl	80117fa <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 80097a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d009      	beq.n	80097c0 <tx_tcp+0x54>
 80097ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d006      	beq.n	80097c0 <tx_tcp+0x54>
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	3314      	adds	r3, #20
 80097b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097ba:	4618      	mov	r0, r3
 80097bc:	f008 f803 	bl	80117c6 <memmove>
  tcp->sport = sport;
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80097c6:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80097ce:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097d4:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097da:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	78fa      	ldrb	r2, [r7, #3]
 80097e0:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 80097e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80097e6:	f7fe fa8a 	bl	8007cfe <mg_ntohs>
 80097ea:	4603      	mov	r3, r0
 80097ec:	461a      	mov	r2, r3
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	2250      	movs	r2, #80	; 0x50
 80097f6:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 80097fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097fe:	b29b      	uxth	r3, r3
 8009800:	3314      	adds	r3, #20
 8009802:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8009804:	2300      	movs	r3, #0
 8009806:	753b      	strb	r3, [r7, #20]
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	7a5b      	ldrb	r3, [r3, #9]
 800980c:	757b      	strb	r3, [r7, #21]
 800980e:	8b7b      	ldrh	r3, [r7, #26]
 8009810:	0a1b      	lsrs	r3, r3, #8
 8009812:	b29b      	uxth	r3, r3
 8009814:	b2db      	uxtb	r3, r3
 8009816:	75bb      	strb	r3, [r7, #22]
 8009818:	8b7b      	ldrh	r3, [r7, #26]
 800981a:	b2db      	uxtb	r3, r3
 800981c:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800981e:	8b7b      	ldrh	r3, [r7, #26]
 8009820:	461a      	mov	r2, r3
 8009822:	6a39      	ldr	r1, [r7, #32]
 8009824:	69f8      	ldr	r0, [r7, #28]
 8009826:	f7fe fed3 	bl	80085d0 <csumup>
 800982a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	330c      	adds	r3, #12
 8009830:	2204      	movs	r2, #4
 8009832:	4619      	mov	r1, r3
 8009834:	69f8      	ldr	r0, [r7, #28]
 8009836:	f7fe fecb 	bl	80085d0 <csumup>
 800983a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	3310      	adds	r3, #16
 8009840:	2204      	movs	r2, #4
 8009842:	4619      	mov	r1, r3
 8009844:	69f8      	ldr	r0, [r7, #28]
 8009846:	f7fe fec3 	bl	80085d0 <csumup>
 800984a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800984c:	f107 0314 	add.w	r3, r7, #20
 8009850:	2204      	movs	r2, #4
 8009852:	4619      	mov	r1, r3
 8009854:	69f8      	ldr	r0, [r7, #28]
 8009856:	f7fe febb 	bl	80085d0 <csumup>
 800985a:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800985c:	69f8      	ldr	r0, [r7, #28]
 800985e:	f7fe fee4 	bl	800862a <csumfin>
 8009862:	4603      	mov	r3, r0
 8009864:	461a      	mov	r2, r3
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800986a:	4b21      	ldr	r3, [pc, #132]	; (80098f0 <tx_tcp+0x184>)
 800986c:	f242 020c 	movw	r2, #8204	; 0x200c
 8009870:	4920      	ldr	r1, [pc, #128]	; (80098f4 <tx_tcp+0x188>)
 8009872:	2003      	movs	r0, #3
 8009874:	f7fc fd24 	bl	80062c0 <mg_log_prefix>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d025      	beq.n	80098ca <tx_tcp+0x15e>
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	f103 050c 	add.w	r5, r3, #12
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fa37 	bl	8007cfe <mg_ntohs>
 8009890:	4603      	mov	r3, r0
 8009892:	461e      	mov	r6, r3
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	f103 0410 	add.w	r4, r3, #16
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe fa2c 	bl	8007cfe <mg_ntohs>
 80098a6:	4603      	mov	r3, r0
 80098a8:	461a      	mov	r2, r3
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	7b5b      	ldrb	r3, [r3, #13]
 80098ae:	4619      	mov	r1, r3
 80098b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	9103      	str	r1, [sp, #12]
 80098b6:	9202      	str	r2, [sp, #8]
 80098b8:	9401      	str	r4, [sp, #4]
 80098ba:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <tx_tcp+0x18c>)
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	4633      	mov	r3, r6
 80098c0:	462a      	mov	r2, r5
 80098c2:	490d      	ldr	r1, [pc, #52]	; (80098f8 <tx_tcp+0x18c>)
 80098c4:	480d      	ldr	r0, [pc, #52]	; (80098fc <tx_tcp+0x190>)
 80098c6:	f7fc fd55 	bl	8006374 <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	f103 0214 	add.w	r2, r3, #20
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098da:	4413      	add	r3, r2
 80098dc:	4619      	mov	r1, r3
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7fe fed1 	bl	8008686 <ether_output>
 80098e4:	4603      	mov	r3, r0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	372c      	adds	r7, #44	; 0x2c
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ee:	bf00      	nop
 80098f0:	080140d0 	.word	0x080140d0
 80098f4:	08012658 	.word	0x08012658
 80098f8:	08006b11 	.word	0x08006b11
 80098fc:	08013cc4 	.word	0x08013cc4

08009900 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 8009900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	b08c      	sub	sp, #48	; 0x30
 8009906:	af06      	add	r7, sp, #24
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	4613      	mov	r3, r2
 8009910:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	7b5b      	ldrb	r3, [r3, #13]
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	2b00      	cmp	r3, #0
 800991e:	bf14      	ite	ne
 8009920:	2301      	movne	r3, #1
 8009922:	2300      	moveq	r3, #0
 8009924:	b2db      	uxtb	r3, r3
 8009926:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	1d9e      	adds	r6, r3, #6
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993a:	885b      	ldrh	r3, [r3, #2]
 800993c:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	4618      	mov	r0, r3
 800994e:	f7fe f9bd 	bl	8007ccc <mg_ntohl>
 8009952:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4413      	add	r3, r2
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe f9b7 	bl	8007ccc <mg_ntohl>
 800995e:	4601      	mov	r1, r0
 8009960:	79fa      	ldrb	r2, [r7, #7]
 8009962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009964:	9305      	str	r3, [sp, #20]
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	9103      	str	r1, [sp, #12]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	9302      	str	r3, [sp, #8]
 8009970:	9501      	str	r5, [sp, #4]
 8009972:	9400      	str	r4, [sp, #0]
 8009974:	4613      	mov	r3, r2
 8009976:	4642      	mov	r2, r8
 8009978:	4631      	mov	r1, r6
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fef6 	bl	800976c <tx_tcp>
 8009980:	4603      	mov	r3, r0
                buf, len);
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800998c <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800998c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009990:	b088      	sub	sp, #32
 8009992:	af02      	add	r7, sp, #8
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a0:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3390      	adds	r3, #144	; 0x90
 80099a6:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d101      	bne.n	80099b2 <settmout+0x26>
 80099ae:	2396      	movs	r3, #150	; 0x96
 80099b0:	e001      	b.n	80099b6 <settmout+0x2a>
 80099b2:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80099b6:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	2000      	movs	r0, #0
 80099c2:	460c      	mov	r4, r1
 80099c4:	4605      	mov	r5, r0
 80099c6:	eb12 0804 	adds.w	r8, r2, r4
 80099ca:	eb43 0905 	adc.w	r9, r3, r5
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <settmout+0x84>)
 80099dc:	f242 0221 	movw	r2, #8225	; 0x2021
 80099e0:	490c      	ldr	r1, [pc, #48]	; (8009a14 <settmout+0x88>)
 80099e2:	2004      	movs	r0, #4
 80099e4:	f7fc fc6c 	bl	80062c0 <mg_log_prefix>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00b      	beq.n	8009a06 <settmout+0x7a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80099f2:	78f8      	ldrb	r0, [r7, #3]
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80099fa:	e9cd 2300 	strd	r2, r3, [sp]
 80099fe:	4602      	mov	r2, r0
 8009a00:	4805      	ldr	r0, [pc, #20]	; (8009a18 <settmout+0x8c>)
 8009a02:	f7fc fcb7 	bl	8006374 <mg_log>
}
 8009a06:	bf00      	nop
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a10:	080140d8 	.word	0x080140d8
 8009a14:	08012658 	.word	0x08012658
 8009a18:	08013ce8 	.word	0x08013ce8

08009a1c <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 8009a1c:	b5b0      	push	{r4, r5, r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fc fdc2 	bl	80065b4 <mg_alloc_conn>
 8009a30:	6178      	str	r0, [r7, #20]
  if (c == NULL) {
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10e      	bne.n	8009a56 <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 8009a38:	4b55      	ldr	r3, [pc, #340]	; (8009b90 <accept_conn+0x174>)
 8009a3a:	f242 0228 	movw	r2, #8232	; 0x2028
 8009a3e:	4955      	ldr	r1, [pc, #340]	; (8009b94 <accept_conn+0x178>)
 8009a40:	2001      	movs	r0, #1
 8009a42:	f7fc fc3d 	bl	80062c0 <mg_log_prefix>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <accept_conn+0x36>
 8009a4c:	4852      	ldr	r0, [pc, #328]	; (8009b98 <accept_conn+0x17c>)
 8009a4e:	f7fc fc91 	bl	8006374 <mg_log>
    return NULL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e098      	b.n	8009b88 <accept_conn+0x16c>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	3390      	adds	r3, #144	; 0x90
 8009a5a:	613b      	str	r3, [r7, #16]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe f932 	bl	8007ccc <mg_ntohl>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe f929 	bl	8007ccc <mg_ntohl>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f103 0010 	add.w	r0, r3, #16
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	3306      	adds	r3, #6
 8009a8c:	2206      	movs	r2, #6
 8009a8e:	4619      	mov	r1, r3
 8009a90:	f007 ff7d 	bl	801198e <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8009a94:	2100      	movs	r1, #0
 8009a96:	6978      	ldr	r0, [r7, #20]
 8009a98:	f7ff ff78 	bl	800998c <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	331c      	adds	r3, #28
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	69d2      	ldr	r2, [r2, #28]
 8009aa4:	320c      	adds	r2, #12
 8009aa6:	6812      	ldr	r2, [r2, #0]
 8009aa8:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8009ab6:	4b36      	ldr	r3, [pc, #216]	; (8009b90 <accept_conn+0x174>)
 8009ab8:	f242 0231 	movw	r2, #8241	; 0x2031
 8009abc:	4935      	ldr	r1, [pc, #212]	; (8009b94 <accept_conn+0x178>)
 8009abe:	2003      	movs	r0, #3
 8009ac0:	f7fc fbfe 	bl	80062c0 <mg_log_prefix>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <accept_conn+0xbe>
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	331c      	adds	r3, #28
 8009ad2:	4a32      	ldr	r2, [pc, #200]	; (8009b9c <accept_conn+0x180>)
 8009ad4:	4832      	ldr	r0, [pc, #200]	; (8009ba0 <accept_conn+0x184>)
 8009ad6:	f7fc fc4d 	bl	8006374 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8009af2:	f043 0304 	orr.w	r3, r3, #4
 8009af6:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009b00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009b04:	b2d9      	uxtb	r1, r3
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009b0c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009b10:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f102 0408 	add.w	r4, r2, #8
 8009b24:	f103 0508 	add.w	r5, r3, #8
 8009b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	6978      	ldr	r0, [r7, #20]
 8009b4e:	f7f7 fe50 	bl	80017f2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8009b52:	2200      	movs	r2, #0
 8009b54:	2105      	movs	r1, #5
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f7f7 fe4b 	bl	80017f2 <mg_call>
  if (lsn->is_tls) mg_tls_init(c, mg_str(""));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00c      	beq.n	8009b86 <accept_conn+0x16a>
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	490c      	ldr	r1, [pc, #48]	; (8009ba4 <accept_conn+0x188>)
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fd fa6c 	bl	8007050 <mg_str_s>
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009b80:	6978      	ldr	r0, [r7, #20]
 8009b82:	f7fd ff27 	bl	80079d4 <mg_tls_init>
  return c;
 8009b86:	697b      	ldr	r3, [r7, #20]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b90:	080140e4 	.word	0x080140e4
 8009b94:	08012658 	.word	0x08012658
 8009b98:	08013378 	.word	0x08013378
 8009b9c:	08006b89 	.word	0x08006b89
 8009ba0:	08013cf8 	.word	0x08013cf8
 8009ba4:	08012ce8 	.word	0x08012ce8

08009ba8 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	b093      	sub	sp, #76	; 0x4c
 8009bac:	af06      	add	r7, sp, #24
 8009bae:	6178      	str	r0, [r7, #20]
 8009bb0:	6139      	str	r1, [r7, #16]
 8009bb2:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	3390      	adds	r3, #144	; 0x90
 8009bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	331c      	adds	r3, #28
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d024      	beq.n	8009c24 <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 8009bda:	232e      	movs	r3, #46	; 0x2e
 8009bdc:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	441a      	add	r2, r3
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d904      	bls.n	8009bf6 <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	f103 0010 	add.w	r0, r3, #16
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	689c      	ldr	r4, [r3, #8]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	8b1d      	ldrh	r5, [r3, #24]
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	9103      	str	r1, [sp, #12]
 8009c0e:	6939      	ldr	r1, [r7, #16]
 8009c10:	9102      	str	r1, [sp, #8]
 8009c12:	9201      	str	r2, [sp, #4]
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	462b      	mov	r3, r5
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c1e:	f7fe fe87 	bl	8008930 <tx_udp>
 8009c22:	e046      	b.n	8009cb2 <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 8009c24:	2362      	movs	r3, #98	; 0x62
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	441a      	add	r2, r3
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d904      	bls.n	8009c40 <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 8009c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	f103 0610 	add.w	r6, r3, #16
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	60bb      	str	r3, [r7, #8]
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	8b1c      	ldrh	r4, [r3, #24]
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe f838 	bl	8007ccc <mg_ntohl>
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe f832 	bl	8007ccc <mg_ntohl>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	9305      	str	r3, [sp, #20]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	9304      	str	r3, [sp, #16]
 8009c72:	9203      	str	r2, [sp, #12]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	9102      	str	r1, [sp, #8]
 8009c78:	9501      	str	r5, [sp, #4]
 8009c7a:	9400      	str	r4, [sp, #0]
 8009c7c:	2318      	movs	r3, #24
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	4631      	mov	r1, r6
 8009c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c84:	f7ff fd72 	bl	800976c <tx_tcp>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	441a      	add	r2, r3
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	7d9b      	ldrb	r3, [r3, #22]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d107      	bne.n	8009cb2 <mg_io_send+0x10a>
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	6978      	ldr	r0, [r7, #20]
 8009ca6:	f7ff fe71 	bl	800998c <settmout>
 8009caa:	e002      	b.n	8009cb2 <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 8009cac:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb0:	e000      	b.n	8009cb4 <mg_io_send+0x10c>
    }
  }
  return (long) len;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3734      	adds	r7, #52	; 0x34
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cbc <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8009cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	b090      	sub	sp, #64	; 0x40
 8009cc2:	af06      	add	r7, sp, #24
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3390      	adds	r3, #144	; 0x90
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <read_conn+0x28>
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	3318      	adds	r3, #24
 8009ce2:	e001      	b.n	8009ce8 <read_conn+0x2c>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3338      	adds	r3, #56	; 0x38
 8009ce8:	623b      	str	r3, [r7, #32]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fd ffeb 	bl	8007ccc <mg_ntohl>
 8009cf6:	61f8      	str	r0, [r7, #28]
  s->raw.align = c->recv.align;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d04:	7b5b      	ldrb	r3, [r3, #13]
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01a      	beq.n	8009d44 <read_conn+0x88>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fd ffd9 	bl	8007ccc <mg_ntohl>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	1c5a      	adds	r2, r3, #1
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	605a      	str	r2, [r3, #4]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fd ffcf 	bl	8007ccc <mg_ntohl>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009d3a:	f043 0320 	orr.w	r3, r3, #32
 8009d3e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8009d42:	e116      	b.n	8009f72 <read_conn+0x2b6>
  } else if (pkt->pay.len == 0) {
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 8112 	beq.w	8009f72 <read_conn+0x2b6>
  } else if (seq != s->ack) {
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	69fa      	ldr	r2, [r7, #28]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d05b      	beq.n	8009e10 <read_conn+0x154>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fd ffb4 	bl	8007ccc <mg_ntohl>
 8009d64:	4602      	mov	r2, r0
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
    if (s->ack == ack) {
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d10e      	bne.n	8009d96 <read_conn+0xda>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8009d78:	4b80      	ldr	r3, [pc, #512]	; (8009f7c <read_conn+0x2c0>)
 8009d7a:	f242 0271 	movw	r2, #8305	; 0x2071
 8009d7e:	4980      	ldr	r1, [pc, #512]	; (8009f80 <read_conn+0x2c4>)
 8009d80:	2004      	movs	r0, #4
 8009d82:	f7fc fa9d 	bl	80062c0 <mg_log_prefix>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 80f2 	beq.w	8009f72 <read_conn+0x2b6>
 8009d8e:	487d      	ldr	r0, [pc, #500]	; (8009f84 <read_conn+0x2c8>)
 8009d90:	f7fc faf0 	bl	8006374 <mg_log>
}
 8009d94:	e0ed      	b.n	8009f72 <read_conn+0x2b6>
      memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	331c      	adds	r3, #28
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	617b      	str	r3, [r7, #20]
      MG_DEBUG(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8009d9e:	4b77      	ldr	r3, [pc, #476]	; (8009f7c <read_conn+0x2c0>)
 8009da0:	f242 0275 	movw	r2, #8309	; 0x2075
 8009da4:	4976      	ldr	r1, [pc, #472]	; (8009f80 <read_conn+0x2c4>)
 8009da6:	2003      	movs	r0, #3
 8009da8:	f7fc fa8a 	bl	80062c0 <mg_log_prefix>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d006      	beq.n	8009dc0 <read_conn+0x104>
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	69f9      	ldr	r1, [r7, #28]
 8009dba:	4873      	ldr	r0, [pc, #460]	; (8009f88 <read_conn+0x2cc>)
 8009dbc:	f7fc fada 	bl	8006374 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	f103 0810 	add.w	r8, r3, #16
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	607b      	str	r3, [r7, #4]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8b1c      	ldrh	r4, [r3, #24]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fd ff75 	bl	8007ccc <mg_ntohl>
 8009de2:	6038      	str	r0, [r7, #0]
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fd ff6f 	bl	8007ccc <mg_ntohl>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2200      	movs	r2, #0
 8009df2:	9205      	str	r2, [sp, #20]
 8009df4:	4a65      	ldr	r2, [pc, #404]	; (8009f8c <read_conn+0x2d0>)
 8009df6:	9204      	str	r2, [sp, #16]
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	9102      	str	r1, [sp, #8]
 8009dfe:	9501      	str	r5, [sp, #4]
 8009e00:	9400      	str	r4, [sp, #0]
 8009e02:	2310      	movs	r3, #16
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	4641      	mov	r1, r8
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff fcaf 	bl	800976c <tx_tcp>
}
 8009e0e:	e0b0      	b.n	8009f72 <read_conn+0x2b6>
  } else if (io->size - io->len < pkt->pay.len &&
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	1ad2      	subs	r2, r2, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d210      	bcs.n	8009e44 <read_conn+0x188>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6a38      	ldr	r0, [r7, #32]
 8009e30:	f7fb fbc4 	bl	80055bc <mg_iobuf_resize>
 8009e34:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <read_conn+0x188>
    mg_error(c, "oom");
 8009e3a:	4955      	ldr	r1, [pc, #340]	; (8009f90 <read_conn+0x2d4>)
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7f7 fcfb 	bl	8001838 <mg_error>
 8009e42:	e096      	b.n	8009f72 <read_conn+0x2b6>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	18d0      	adds	r0, r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6899      	ldr	r1, [r3, #8]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f007 fd99 	bl	801198e <memcpy>
    io->len += pkt->pay.len;
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	689a      	ldr	r2, [r3, #8]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	441a      	add	r2, r3
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8009e6a:	4b44      	ldr	r3, [pc, #272]	; (8009f7c <read_conn+0x2c0>)
 8009e6c:	f242 0286 	movw	r2, #8326	; 0x2086
 8009e70:	4943      	ldr	r1, [pc, #268]	; (8009f80 <read_conn+0x2c4>)
 8009e72:	2003      	movs	r0, #3
 8009e74:	f7fc fa24 	bl	80062c0 <mg_log_prefix>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00e      	beq.n	8009e9c <read_conn+0x1e0>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fd ff1f 	bl	8007ccc <mg_ntohl>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	4621      	mov	r1, r4
 8009e96:	483f      	ldr	r0, [pc, #252]	; (8009f94 <read_conn+0x2d8>)
 8009e98:	f7fc fa6c 	bl	8006374 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fd ff12 	bl	8007ccc <mg_ntohl>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	441a      	add	r2, r3
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	7d9b      	ldrb	r3, [r3, #22]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d003      	beq.n	8009ec4 <read_conn+0x208>
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff fd64 	bl	800998c <settmout>
    if (c->is_tls) {
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d046      	beq.n	8009f62 <read_conn+0x2a6>
      io = &c->recv;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3338      	adds	r3, #56	; 0x38
 8009ed8:	623b      	str	r3, [r7, #32]
      if (io->size - io->len < pkt->pay.len &&
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	1ad2      	subs	r2, r2, r3
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d210      	bcs.n	8009f0e <read_conn+0x252>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6a38      	ldr	r0, [r7, #32]
 8009efa:	f7fb fb5f 	bl	80055bc <mg_iobuf_resize>
 8009efe:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <read_conn+0x252>
        mg_error(c, "oom");
 8009f04:	4922      	ldr	r1, [pc, #136]	; (8009f90 <read_conn+0x2d4>)
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f7f7 fc96 	bl	8001838 <mg_error>
 8009f0c:	e031      	b.n	8009f72 <read_conn+0x2b6>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	18d1      	adds	r1, r2, r3
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	461a      	mov	r2, r3
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7fd fd7b 	bl	8007a20 <mg_tls_recv>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	613b      	str	r3, [r7, #16]
        if (n == MG_IO_ERR) {
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d104      	bne.n	8009f40 <read_conn+0x284>
          mg_error(c, "TLS recv error");
 8009f36:	4918      	ldr	r1, [pc, #96]	; (8009f98 <read_conn+0x2dc>)
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7f7 fc7d 	bl	8001838 <mg_error>
}
 8009f3e:	e018      	b.n	8009f72 <read_conn+0x2b6>
        } else if (n > 0) {
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	dd15      	ble.n	8009f72 <read_conn+0x2b6>
          io->len += (size_t) n;
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	441a      	add	r2, r3
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 8009f52:	f107 0310 	add.w	r3, r7, #16
 8009f56:	461a      	mov	r2, r3
 8009f58:	2107      	movs	r1, #7
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7f7 fc49 	bl	80017f2 <mg_call>
}
 8009f60:	e007      	b.n	8009f72 <read_conn+0x2b6>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	330c      	adds	r3, #12
 8009f66:	461a      	mov	r2, r3
 8009f68:	2107      	movs	r1, #7
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7f7 fc41 	bl	80017f2 <mg_call>
}
 8009f70:	e7ff      	b.n	8009f72 <read_conn+0x2b6>
 8009f72:	bf00      	nop
 8009f74:	3728      	adds	r7, #40	; 0x28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f7c:	080140f0 	.word	0x080140f0
 8009f80:	08012658 	.word	0x08012658
 8009f84:	08013d0c 	.word	0x08013d0c
 8009f88:	08013d24 	.word	0x08013d24
 8009f8c:	08012ce8 	.word	0x08012ce8
 8009f90:	08013cc0 	.word	0x08013cc0
 8009f94:	08013d3c 	.word	0x08013d3c
 8009f98:	08013d50 	.word	0x08013d50

08009f9c <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b089      	sub	sp, #36	; 0x24
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009faa:	2200      	movs	r2, #0
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fe66 	bl	8008c80 <getpeer>
 8009fb4:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <rx_tcp+0x26>
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	3390      	adds	r3, #144	; 0x90
 8009fc0:	e000      	b.n	8009fc4 <rx_tcp+0x28>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d03e      	beq.n	800a04a <rx_tcp+0xae>
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d036      	beq.n	800a04a <rx_tcp+0xae>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe0:	7b5b      	ldrb	r3, [r3, #13]
 8009fe2:	f003 0312 	and.w	r3, r3, #18
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d02f      	beq.n	800a04a <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fd fe6b 	bl	8007ccc <mg_ntohl>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	4618      	mov	r0, r3
 800a004:	f7fd fe62 	bl	8007ccc <mg_ntohl>
 800a008:	4603      	mov	r3, r0
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	9201      	str	r2, [sp, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	9200      	str	r2, [sp, #0]
 800a01e:	2210      	movs	r2, #16
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff fc6c 	bl	8009900 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800a02e:	f36f 1345 	bfc	r3, #5, #1
 800a032:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800a036:	2100      	movs	r1, #0
 800a038:	6978      	ldr	r0, [r7, #20]
 800a03a:	f7ff fca7 	bl	800998c <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800a03e:	2200      	movs	r2, #0
 800a040:	2104      	movs	r1, #4
 800a042:	6978      	ldr	r0, [r7, #20]
 800a044:	f7f7 fbd5 	bl	80017f2 <mg_call>
 800a048:	e0c3      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d014      	beq.n	800a07a <rx_tcp+0xde>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a056:	f003 0320 	and.w	r3, r3, #32
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00c      	beq.n	800a07a <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	2200      	movs	r2, #0
 800a068:	9201      	str	r2, [sp, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	9200      	str	r2, [sp, #0]
 800a06e:	2214      	movs	r2, #20
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff fc44 	bl	8009900 <tx_tcp_pkt>
 800a078:	e0ab      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00b      	beq.n	800a098 <rx_tcp+0xfc>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	7b5b      	ldrb	r3, [r3, #13]
 800a086:	f003 0304 	and.w	r3, r3, #4
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d004      	beq.n	800a098 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a08e:	4953      	ldr	r1, [pc, #332]	; (800a1dc <rx_tcp+0x240>)
 800a090:	6978      	ldr	r0, [r7, #20]
 800a092:	f7f7 fbd1 	bl	8001838 <mg_error>
 800a096:	e09c      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (c != NULL) {
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00f      	beq.n	800a0be <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	7d9b      	ldrb	r3, [r3, #22]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d103      	bne.n	800a0b4 <rx_tcp+0x118>
      settmout(c,
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6978      	ldr	r0, [r7, #20]
 800a0b0:	f7ff fc6c 	bl	800998c <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6978      	ldr	r0, [r7, #20]
 800a0b8:	f7ff fe00 	bl	8009cbc <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800a0bc:	e089      	b.n	800a1d2 <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fdda 	bl	8008c80 <getpeer>
 800a0cc:	6178      	str	r0, [r7, #20]
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10c      	bne.n	800a0ee <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	9201      	str	r2, [sp, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	9200      	str	r2, [sp, #0]
 800a0e2:	2214      	movs	r2, #20
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fc0a 	bl	8009900 <tx_tcp_pkt>
}
 800a0ec:	e071      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f2:	7b5b      	ldrb	r3, [r3, #13]
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00c      	beq.n	800a116 <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a102:	f003 0304 	and.w	r3, r3, #4
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d062      	beq.n	800a1d2 <rx_tcp+0x236>
 800a10c:	4933      	ldr	r1, [pc, #204]	; (800a1dc <rx_tcp+0x240>)
 800a10e:	6978      	ldr	r0, [r7, #20]
 800a110:	f7f7 fb92 	bl	8001838 <mg_error>
}
 800a114:	e05d      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11a:	7b5b      	ldrb	r3, [r3, #13]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b00      	cmp	r3, #0
 800a122:	d016      	beq.n	800a152 <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fd fde6 	bl	8007cfe <mg_ntohs>
 800a132:	4603      	mov	r3, r0
 800a134:	4618      	mov	r0, r3
 800a136:	f7fd fdc9 	bl	8007ccc <mg_ntohl>
 800a13a:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800a13c:	2300      	movs	r3, #0
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	2300      	movs	r3, #0
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2212      	movs	r2, #18
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff fbd8 	bl	8009900 <tx_tcp_pkt>
}
 800a150:	e03f      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	7b5b      	ldrb	r3, [r3, #13]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00c      	beq.n	800a17a <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2200      	movs	r2, #0
 800a168:	9201      	str	r2, [sp, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	9200      	str	r2, [sp, #0]
 800a16e:	2211      	movs	r2, #17
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff fbc4 	bl	8009900 <tx_tcp_pkt>
}
 800a178:	e02b      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	4618      	mov	r0, r3
 800a182:	f7fd fda3 	bl	8007ccc <mg_ntohl>
 800a186:	4604      	mov	r4, r0
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4618      	mov	r0, r3
 800a192:	f7fd fdb4 	bl	8007cfe <mg_ntohs>
 800a196:	4603      	mov	r3, r0
 800a198:	3301      	adds	r3, #1
 800a19a:	429c      	cmp	r4, r3
 800a19c:	d104      	bne.n	800a1a8 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	f7ff fc3b 	bl	8009a1c <accept_conn>
}
 800a1a6:	e014      	b.n	800a1d2 <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10c      	bne.n	800a1d2 <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	9201      	str	r2, [sp, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	9200      	str	r2, [sp, #0]
 800a1c6:	2214      	movs	r2, #20
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fb98 	bl	8009900 <tx_tcp_pkt>
}
 800a1d0:	e7ff      	b.n	800a1d2 <rx_tcp+0x236>
 800a1d2:	bf00      	nop
 800a1d4:	371c      	adds	r7, #28
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd90      	pop	{r4, r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	08013d60 	.word	0x08013d60

0800a1e0 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e2:	b089      	sub	sp, #36	; 0x24
 800a1e4:	af04      	add	r7, sp, #16
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	7a5b      	ldrb	r3, [r3, #9]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d116      	bne.n	800a222 <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	f103 0214 	add.w	r2, r3, #20
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b03      	cmp	r3, #3
 800a206:	f240 8105 	bls.w	800a414 <rx_ip+0x234>
    mkpay(pkt, pkt->icmp + 1);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	3304      	adds	r3, #4
 800a210:	4619      	mov	r1, r3
 800a212:	6838      	ldr	r0, [r7, #0]
 800a214:	f7fe f9be 	bl	8008594 <mkpay>
    rx_icmp(ifp, pkt);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7fe fe88 	bl	8008f30 <rx_icmp>
 800a220:	e0fd      	b.n	800a41e <rx_ip+0x23e>
  } else if (pkt->ip->proto == 17) {
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	7a5b      	ldrb	r3, [r3, #9]
 800a228:	2b11      	cmp	r3, #17
 800a22a:	f040 808a 	bne.w	800a342 <rx_ip+0x162>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	f103 0214 	add.w	r2, r3, #20
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	2b07      	cmp	r3, #7
 800a240:	f240 80ea 	bls.w	800a418 <rx_ip+0x238>
    mkpay(pkt, pkt->udp + 1);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a248:	3308      	adds	r3, #8
 800a24a:	4619      	mov	r1, r3
 800a24c:	6838      	ldr	r0, [r7, #0]
 800a24e:	f7fe f9a1 	bl	8008594 <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a252:	4b74      	ldr	r3, [pc, #464]	; (800a424 <rx_ip+0x244>)
 800a254:	f242 02e8 	movw	r2, #8424	; 0x20e8
 800a258:	4973      	ldr	r1, [pc, #460]	; (800a428 <rx_ip+0x248>)
 800a25a:	2003      	movs	r0, #3
 800a25c:	f7fc f830 	bl	80062c0 <mg_log_prefix>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d026      	beq.n	800a2b4 <rx_ip+0xd4>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	f103 050c 	add.w	r5, r3, #12
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	b29b      	uxth	r3, r3
 800a276:	4618      	mov	r0, r3
 800a278:	f7fd fd41 	bl	8007cfe <mg_ntohs>
 800a27c:	4603      	mov	r3, r0
 800a27e:	461e      	mov	r6, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	f103 0410 	add.w	r4, r3, #16
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28c:	885b      	ldrh	r3, [r3, #2]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	4618      	mov	r0, r3
 800a292:	f7fd fd34 	bl	8007cfe <mg_ntohs>
 800a296:	4603      	mov	r3, r0
 800a298:	461a      	mov	r2, r3
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	9202      	str	r2, [sp, #8]
 800a2a2:	9401      	str	r4, [sp, #4]
 800a2a4:	4b61      	ldr	r3, [pc, #388]	; (800a42c <rx_ip+0x24c>)
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	4633      	mov	r3, r6
 800a2aa:	462a      	mov	r2, r5
 800a2ac:	495f      	ldr	r1, [pc, #380]	; (800a42c <rx_ip+0x24c>)
 800a2ae:	4860      	ldr	r0, [pc, #384]	; (800a430 <rx_ip+0x250>)
 800a2b0:	f7fc f860 	bl	8006374 <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7f1b      	ldrb	r3, [r3, #28]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01c      	beq.n	800a2f6 <rx_ip+0x116>
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c0:	885b      	ldrh	r3, [r3, #2]
 800a2c2:	b29c      	uxth	r4, r3
 800a2c4:	2044      	movs	r0, #68	; 0x44
 800a2c6:	f7fd fd1a 	bl	8007cfe <mg_ntohs>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	d112      	bne.n	800a2f6 <rx_ip+0x116>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	f103 0208 	add.w	r2, r3, #8
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6838      	ldr	r0, [r7, #0]
 800a2e8:	f7fe f954 	bl	8008594 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fe fe7a 	bl	8008fe8 <rx_dhcp_client>
 800a2f4:	e093      	b.n	800a41e <rx_ip+0x23e>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7f5b      	ldrb	r3, [r3, #29]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d01c      	beq.n	800a338 <rx_ip+0x158>
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a302:	885b      	ldrh	r3, [r3, #2]
 800a304:	b29c      	uxth	r4, r3
 800a306:	2043      	movs	r0, #67	; 0x43
 800a308:	f7fd fcf9 	bl	8007cfe <mg_ntohs>
 800a30c:	4603      	mov	r3, r0
 800a30e:	429c      	cmp	r4, r3
 800a310:	d112      	bne.n	800a338 <rx_ip+0x158>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	f103 0208 	add.w	r2, r3, #8
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a322:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a326:	4619      	mov	r1, r3
 800a328:	6838      	ldr	r0, [r7, #0]
 800a32a:	f7fe f933 	bl	8008594 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7fe ffdf 	bl	80092f4 <rx_dhcp_server>
 800a336:	e072      	b.n	800a41e <rx_ip+0x23e>
    } else {
      rx_udp(ifp, pkt);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff f9a4 	bl	8009688 <rx_udp>
 800a340:	e06d      	b.n	800a41e <rx_ip+0x23e>
    }
  } else if (pkt->ip->proto == 6) {
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	7a5b      	ldrb	r3, [r3, #9]
 800a348:	2b06      	cmp	r3, #6
 800a34a:	d168      	bne.n	800a41e <rx_ip+0x23e>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	f103 0214 	add.w	r2, r3, #20
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	2b13      	cmp	r3, #19
 800a35e:	d95d      	bls.n	800a41c <rx_ip+0x23c>
    mkpay(pkt, pkt->tcp + 1);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	3314      	adds	r3, #20
 800a366:	4619      	mov	r1, r3
 800a368:	6838      	ldr	r0, [r7, #0]
 800a36a:	f7fe f913 	bl	8008594 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	885b      	ldrh	r3, [r3, #2]
 800a374:	b29b      	uxth	r3, r3
 800a376:	4618      	mov	r0, r3
 800a378:	f7fd fcc1 	bl	8007cfe <mg_ntohs>
 800a37c:	4603      	mov	r3, r0
 800a37e:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	7b1b      	ldrb	r3, [r3, #12]
 800a386:	091b      	lsrs	r3, r3, #4
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	3305      	adds	r3, #5
 800a38e:	b29b      	uxth	r3, r3
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800a394:	89fa      	ldrh	r2, [r7, #14]
 800a396:	89bb      	ldrh	r3, [r7, #12]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d305      	bcc.n	800a3a8 <rx_ip+0x1c8>
 800a39c:	89fa      	ldrh	r2, [r7, #14]
 800a39e:	89bb      	ldrh	r3, [r7, #12]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a3a8:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <rx_ip+0x244>)
 800a3aa:	f242 02fd 	movw	r2, #8445	; 0x20fd
 800a3ae:	491e      	ldr	r1, [pc, #120]	; (800a428 <rx_ip+0x248>)
 800a3b0:	2003      	movs	r0, #3
 800a3b2:	f7fb ff85 	bl	80062c0 <mg_log_prefix>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d026      	beq.n	800a40a <rx_ip+0x22a>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f103 050c 	add.w	r5, r3, #12
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fd fc96 	bl	8007cfe <mg_ntohs>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	461e      	mov	r6, r3
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	f103 0410 	add.w	r4, r3, #16
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	885b      	ldrh	r3, [r3, #2]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fd fc89 	bl	8007cfe <mg_ntohs>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	9303      	str	r3, [sp, #12]
 800a3f6:	9202      	str	r2, [sp, #8]
 800a3f8:	9401      	str	r4, [sp, #4]
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <rx_ip+0x24c>)
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4633      	mov	r3, r6
 800a400:	462a      	mov	r2, r5
 800a402:	490a      	ldr	r1, [pc, #40]	; (800a42c <rx_ip+0x24c>)
 800a404:	480b      	ldr	r0, [pc, #44]	; (800a434 <rx_ip+0x254>)
 800a406:	f7fb ffb5 	bl	8006374 <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff fdc5 	bl	8009f9c <rx_tcp>
 800a412:	e004      	b.n	800a41e <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a414:	bf00      	nop
 800a416:	e002      	b.n	800a41e <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a418:	bf00      	nop
 800a41a:	e000      	b.n	800a41e <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a41c:	bf00      	nop
  }
}
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a424:	080140fc 	.word	0x080140fc
 800a428:	08012658 	.word	0x08012658
 800a42c:	08006b11 	.word	0x08006b11
 800a430:	08013d6c 	.word	0x08013d6c
 800a434:	08013d88 	.word	0x08013d88

0800a438 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	799b      	ldrb	r3, [r3, #6]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d004      	beq.n	800a456 <rx_ip6+0x1e>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	799b      	ldrb	r3, [r3, #6]
 800a452:	2b3a      	cmp	r3, #58	; 0x3a
 800a454:	d115      	bne.n	800a482 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	2b03      	cmp	r3, #3
 800a468:	d922      	bls.n	800a4b0 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	3304      	adds	r3, #4
 800a470:	4619      	mov	r1, r3
 800a472:	6838      	ldr	r0, [r7, #0]
 800a474:	f7fe f88e 	bl	8008594 <mkpay>
    rx_icmp(ifp, pkt);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7fe fd58 	bl	8008f30 <rx_icmp>
 800a480:	e019      	b.n	800a4b6 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	799b      	ldrb	r3, [r3, #6]
 800a488:	2b11      	cmp	r3, #17
 800a48a:	d114      	bne.n	800a4b6 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	6a1b      	ldr	r3, [r3, #32]
 800a490:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	2b07      	cmp	r3, #7
 800a49e:	d909      	bls.n	800a4b4 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6838      	ldr	r0, [r7, #0]
 800a4aa:	f7fe f873 	bl	8008594 <mkpay>
 800a4ae:	e002      	b.n	800a4b6 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a4b0:	bf00      	nop
 800a4b2:	e000      	b.n	800a4b6 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a4b4:	bf00      	nop
  }
}
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b093      	sub	sp, #76	; 0x4c
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800a4c8:	f107 0314 	add.w	r3, r7, #20
 800a4cc:	2234      	movs	r2, #52	; 0x34
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f007 f992 	bl	80117fa <memset>
  pkt.raw.ptr = (char *) buf;
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	2b0d      	cmp	r3, #13
 800a4e6:	f240 80d1 	bls.w	800a68c <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	7fdb      	ldrb	r3, [r3, #31]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d013      	beq.n	800a51a <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2206      	movs	r2, #6
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	f007 f953 	bl	80117a6 <memcmp>
 800a500:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800a502:	2b00      	cmp	r3, #0
 800a504:	d009      	beq.n	800a51a <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	2206      	movs	r2, #6
 800a50a:	496a      	ldr	r1, [pc, #424]	; (800a6b4 <mg_tcpip_rx+0x1f8>)
 800a50c:	4618      	mov	r0, r3
 800a50e:	f007 f94a 	bl	80117a6 <memcmp>
 800a512:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 80bb 	bne.w	800a690 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7f9b      	ldrb	r3, [r3, #30]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d01a      	beq.n	800a558 <mg_tcpip_rx+0x9c>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b04      	cmp	r3, #4
 800a526:	d917      	bls.n	800a558 <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3b04      	subs	r3, #4
 800a52c:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	2000      	movs	r0, #0
 800a534:	f7fd fbfa 	bl	8007d2c <mg_crc32>
 800a538:	4603      	mov	r3, r0
 800a53a:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f107 0310 	add.w	r3, r7, #16
 800a548:	2204      	movs	r2, #4
 800a54a:	4619      	mov	r1, r3
 800a54c:	f007 f92b 	bl	80117a6 <memcmp>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	f040 809e 	bne.w	800a694 <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	899b      	ldrh	r3, [r3, #12]
 800a55c:	b29c      	uxth	r4, r3
 800a55e:	f640 0006 	movw	r0, #2054	; 0x806
 800a562:	f7fd fbcc 	bl	8007cfe <mg_ntohs>
 800a566:	4603      	mov	r3, r0
 800a568:	429c      	cmp	r4, r3
 800a56a:	d10d      	bne.n	800a588 <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	330e      	adds	r3, #14
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b29      	cmp	r3, #41	; 0x29
 800a576:	f240 808f 	bls.w	800a698 <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800a57a:	f107 0314 	add.w	r3, r7, #20
 800a57e:	4619      	mov	r1, r3
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7fe fbd5 	bl	8008d30 <rx_arp>
 800a586:	e092      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	899b      	ldrh	r3, [r3, #12]
 800a58c:	b29c      	uxth	r4, r3
 800a58e:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800a592:	f7fd fbb4 	bl	8007cfe <mg_ntohs>
 800a596:	4603      	mov	r3, r0
 800a598:	429c      	cmp	r4, r3
 800a59a:	d11b      	bne.n	800a5d4 <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	330e      	adds	r3, #14
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b35      	cmp	r3, #53	; 0x35
 800a5a6:	d979      	bls.n	800a69c <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	091b      	lsrs	r3, r3, #4
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b06      	cmp	r3, #6
 800a5b2:	d175      	bne.n	800a6a0 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800a5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a5ba:	f107 0314 	add.w	r3, r7, #20
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fd ffe7 	bl	8008594 <mkpay>
    rx_ip6(ifp, &pkt);
 800a5c6:	f107 0314 	add.w	r3, r7, #20
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f7ff ff33 	bl	800a438 <rx_ip6>
 800a5d2:	e06c      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	b29c      	uxth	r4, r3
 800a5da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a5de:	f7fd fb8e 	bl	8007cfe <mg_ntohs>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d133      	bne.n	800a650 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	330e      	adds	r3, #14
 800a5ec:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	2b21      	cmp	r3, #33	; 0x21
 800a5f2:	d957      	bls.n	800a6a4 <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	885b      	ldrh	r3, [r3, #2]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fd fb7f 	bl	8007cfe <mg_ntohs>
 800a600:	4603      	mov	r3, r0
 800a602:	f103 020e 	add.w	r2, r3, #14
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d208      	bcs.n	800a61e <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	885b      	ldrh	r3, [r3, #2]
 800a610:	b29b      	uxth	r3, r3
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd fb73 	bl	8007cfe <mg_ntohs>
 800a618:	4603      	mov	r3, r0
 800a61a:	330e      	adds	r3, #14
 800a61c:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	2b21      	cmp	r3, #33	; 0x21
 800a622:	d941      	bls.n	800a6a8 <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	091b      	lsrs	r3, r3, #4
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b04      	cmp	r3, #4
 800a62e:	d13d      	bne.n	800a6ac <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	f103 0214 	add.w	r2, r3, #20
 800a636:	f107 0314 	add.w	r3, r7, #20
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fd ffa9 	bl	8008594 <mkpay>
    rx_ip(ifp, &pkt);
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	4619      	mov	r1, r3
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff fdc9 	bl	800a1e0 <rx_ip>
 800a64e:	e02e      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800a650:	4b19      	ldr	r3, [pc, #100]	; (800a6b8 <mg_tcpip_rx+0x1fc>)
 800a652:	f242 123a 	movw	r2, #8506	; 0x213a
 800a656:	4919      	ldr	r1, [pc, #100]	; (800a6bc <mg_tcpip_rx+0x200>)
 800a658:	2003      	movs	r0, #3
 800a65a:	f7fb fe31 	bl	80062c0 <mg_log_prefix>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <mg_tcpip_rx+0x1be>
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	899b      	ldrh	r3, [r3, #12]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fd fb47 	bl	8007cfe <mg_ntohs>
 800a670:	4603      	mov	r3, r0
 800a672:	4619      	mov	r1, r3
 800a674:	4812      	ldr	r0, [pc, #72]	; (800a6c0 <mg_tcpip_rx+0x204>)
 800a676:	f7fb fe7d 	bl	8006374 <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b10      	cmp	r3, #16
 800a67e:	bf28      	it	cs
 800a680:	2310      	movcs	r3, #16
 800a682:	4619      	mov	r1, r3
 800a684:	68b8      	ldr	r0, [r7, #8]
 800a686:	f7fb feab 	bl	80063e0 <mg_hexdump>
 800a68a:	e010      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a68c:	bf00      	nop
 800a68e:	e00e      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    return;
 800a690:	bf00      	nop
 800a692:	e00c      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a694:	bf00      	nop
 800a696:	e00a      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a698:	bf00      	nop
 800a69a:	e008      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a69c:	bf00      	nop
 800a69e:	e006      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a6a0:	bf00      	nop
 800a6a2:	e004      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a6a4:	bf00      	nop
 800a6a6:	e002      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a6a8:	bf00      	nop
 800a6aa:	e000      	b.n	800a6ae <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a6ac:	bf00      	nop
  }
}
 800a6ae:	374c      	adds	r7, #76	; 0x4c
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd90      	pop	{r4, r7, pc}
 800a6b4:	08013f44 	.word	0x08013f44
 800a6b8:	08014104 	.word	0x08014104
 800a6bc:	08012658 	.word	0x08012658
 800a6c0:	08013da4 	.word	0x08013da4

0800a6c4 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	b095      	sub	sp, #84	; 0x54
 800a6c8:	af06      	add	r7, sp, #24
 800a6ca:	6178      	str	r0, [r7, #20]
 800a6cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 81b9 	beq.w	800aa4a <mg_tcpip_poll+0x386>
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 81b4 	beq.w	800aa4a <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800a6e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6ec:	e9cd 2300 	strd	r2, r3, [sp]
 800a6f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6f4:	f04f 0300 	mov.w	r3, #0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	f7fd f8a0 	bl	800783e <mg_timer_expired>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800a704:	6979      	ldr	r1, [r7, #20]
 800a706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a70a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800a70e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a712:	2b00      	cmp	r3, #0
 800a714:	d03f      	beq.n	800a796 <mg_tcpip_poll+0xd2>
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d03a      	beq.n	800a796 <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	6a1b      	ldr	r3, [r3, #32]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	4798      	blx	r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a736:	2b00      	cmp	r3, #0
 800a738:	bf14      	ite	ne
 800a73a:	2301      	movne	r3, #1
 800a73c:	2300      	moveq	r3, #0
 800a73e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800a742:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a746:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d023      	beq.n	800a796 <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a74e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a752:	f083 0301 	eor.w	r3, r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <mg_tcpip_poll+0x9c>
 800a75c:	2300      	movs	r3, #0
 800a75e:	e006      	b.n	800a76e <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <mg_tcpip_poll+0xa8>
 800a768:	2301      	movs	r3, #1
 800a76a:	e000      	b.n	800a76e <mg_tcpip_poll+0xaa>
 800a76c:	2303      	movs	r3, #3
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800a774:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a778:	f083 0301 	eor.w	r3, r3, #1
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d006      	beq.n	800a790 <mg_tcpip_poll+0xcc>
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	7f1b      	ldrb	r3, [r3, #28]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <mg_tcpip_poll+0xcc>
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2200      	movs	r2, #0
 800a78e:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a790:	6978      	ldr	r0, [r7, #20]
 800a792:	f7fd fff1 	bl	8008778 <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 8156 	beq.w	800aa4e <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d107      	bne.n	800a7bc <mg_tcpip_poll+0xf8>
 800a7ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800a7b4:	6978      	ldr	r0, [r7, #20]
 800a7b6:	f7fe fa29 	bl	8008c0c <tx_dhcp_discover>
 800a7ba:	e04c      	b.n	800a856 <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a7bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d048      	beq.n	800a856 <mg_tcpip_poll+0x192>
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d143      	bne.n	800a856 <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	d03e      	beq.n	800a856 <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a7e4:	4290      	cmp	r0, r2
 800a7e6:	eb71 0303 	sbcs.w	r3, r1, r3
 800a7ea:	d30a      	bcc.n	800a802 <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a7fa:	6978      	ldr	r0, [r7, #20]
 800a7fc:	f7fd ffbc 	bl	8008778 <onstatechange>
 800a800:	e029      	b.n	800a856 <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a808:	4993      	ldr	r1, [pc, #588]	; (800aa58 <mg_tcpip_poll+0x394>)
 800a80a:	1854      	adds	r4, r2, r1
 800a80c:	f143 0500 	adc.w	r5, r3, #0
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a816:	42a2      	cmp	r2, r4
 800a818:	41ab      	sbcs	r3, r5
 800a81a:	d21c      	bcs.n	800a856 <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a826:	f04f 0300 	mov.w	r3, #0
 800a82a:	f7f6 f9d7 	bl	8000bdc <__aeabi_uldivmod>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4610      	mov	r0, r2
 800a834:	4619      	mov	r1, r3
 800a836:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800a83a:	f04f 0300 	mov.w	r3, #0
 800a83e:	f7f6 f9cd 	bl	8000bdc <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a842:	4313      	orrs	r3, r2
 800a844:	d107      	bne.n	800a856 <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	689a      	ldr	r2, [r3, #8]
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295
 800a84e:	4983      	ldr	r1, [pc, #524]	; (800aa5c <mg_tcpip_poll+0x398>)
 800a850:	6978      	ldr	r0, [r7, #20]
 800a852:	f7fe f9ab 	bl	8008bac <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d014      	beq.n	800a88a <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	4798      	blx	r3
 800a872:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01f      	beq.n	800a8ba <mg_tcpip_poll+0x1f6>
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a880:	4619      	mov	r1, r3
 800a882:	6978      	ldr	r0, [r7, #20]
 800a884:	f7ff fe1a 	bl	800a4bc <mg_tcpip_rx>
 800a888:	e017      	b.n	800a8ba <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	332c      	adds	r3, #44	; 0x2c
 800a88e:	f107 0220 	add.w	r2, r7, #32
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f7fc fb25 	bl	8006ee4 <mg_queue_next>
 800a89a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800a89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00b      	beq.n	800a8ba <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6978      	ldr	r0, [r7, #20]
 800a8aa:	f7ff fe07 	bl	800a4bc <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	332c      	adds	r3, #44	; 0x2c
 800a8b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fc fb93 	bl	8006fe0 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c2:	e0bd      	b.n	800aa40 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f040 80af 	bne.w	800aa34 <mg_tcpip_poll+0x370>
 800a8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f040 80a6 	bne.w	800aa34 <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800a8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a8ee:	f003 0320 	and.w	r3, r3, #32
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 809f 	bne.w	800aa38 <mg_tcpip_poll+0x374>
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	f040 8096 	bne.w	800aa38 <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	3390      	adds	r3, #144	; 0x90
 800a910:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a914:	331c      	adds	r3, #28
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a924:	4290      	cmp	r0, r2
 800a926:	eb71 0303 	sbcs.w	r3, r1, r3
 800a92a:	f080 8086 	bcs.w	800aa3a <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	7d9b      	ldrb	r3, [r3, #22]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d137      	bne.n	800a9a6 <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800a936:	4b4a      	ldr	r3, [pc, #296]	; (800aa60 <mg_tcpip_poll+0x39c>)
 800a938:	f242 1278 	movw	r2, #8568	; 0x2178
 800a93c:	4949      	ldr	r1, [pc, #292]	; (800aa64 <mg_tcpip_poll+0x3a0>)
 800a93e:	2003      	movs	r0, #3
 800a940:	f7fb fcbe 	bl	80062c0 <mg_log_prefix>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d008      	beq.n	800a95c <mg_tcpip_poll+0x298>
 800a94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	4844      	ldr	r0, [pc, #272]	; (800aa68 <mg_tcpip_poll+0x3a4>)
 800a958:	f7fb fd0c 	bl	8006374 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	f103 0610 	add.w	r6, r3, #16
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	613b      	str	r3, [r7, #16]
 800a966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a968:	8b1c      	ldrh	r4, [r3, #24]
 800a96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96c:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4618      	mov	r0, r3
 800a974:	f7fd f9aa 	bl	8007ccc <mg_ntohl>
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fd f9a4 	bl	8007ccc <mg_ntohl>
 800a984:	4603      	mov	r3, r0
 800a986:	2200      	movs	r2, #0
 800a988:	9205      	str	r2, [sp, #20]
 800a98a:	4a38      	ldr	r2, [pc, #224]	; (800aa6c <mg_tcpip_poll+0x3a8>)
 800a98c:	9204      	str	r2, [sp, #16]
 800a98e:	9303      	str	r3, [sp, #12]
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	9102      	str	r1, [sp, #8]
 800a994:	9501      	str	r5, [sp, #4]
 800a996:	9400      	str	r4, [sp, #0]
 800a998:	2310      	movs	r3, #16
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	4631      	mov	r1, r6
 800a99e:	6978      	ldr	r0, [r7, #20]
 800a9a0:	f7fe fee4 	bl	800976c <tx_tcp>
 800a9a4:	e041      	b.n	800aa2a <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	7ddb      	ldrb	r3, [r3, #23]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	b2d1      	uxtb	r1, r2
 800a9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b0:	75d1      	strb	r1, [r2, #23]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d904      	bls.n	800a9c0 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800a9b6:	492e      	ldr	r1, [pc, #184]	; (800aa70 <mg_tcpip_poll+0x3ac>)
 800a9b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a9ba:	f7f6 ff3d 	bl	8001838 <mg_error>
 800a9be:	e034      	b.n	800aa2a <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800a9c0:	4b27      	ldr	r3, [pc, #156]	; (800aa60 <mg_tcpip_poll+0x39c>)
 800a9c2:	f242 127f 	movw	r2, #8575	; 0x217f
 800a9c6:	4927      	ldr	r1, [pc, #156]	; (800aa64 <mg_tcpip_poll+0x3a0>)
 800a9c8:	2003      	movs	r0, #3
 800a9ca:	f7fb fc79 	bl	80062c0 <mg_log_prefix>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d005      	beq.n	800a9e0 <mg_tcpip_poll+0x31c>
 800a9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4826      	ldr	r0, [pc, #152]	; (800aa74 <mg_tcpip_poll+0x3b0>)
 800a9dc:	f7fb fcca 	bl	8006374 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	f103 0610 	add.w	r6, r3, #16
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	613b      	str	r3, [r7, #16]
 800a9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ec:	8b1c      	ldrh	r4, [r3, #24]
 800a9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fd f967 	bl	8007ccc <mg_ntohl>
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fd f961 	bl	8007ccc <mg_ntohl>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	9205      	str	r2, [sp, #20]
 800aa10:	4a16      	ldr	r2, [pc, #88]	; (800aa6c <mg_tcpip_poll+0x3a8>)
 800aa12:	9204      	str	r2, [sp, #16]
 800aa14:	9303      	str	r3, [sp, #12]
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	9102      	str	r1, [sp, #8]
 800aa1a:	9501      	str	r5, [sp, #4]
 800aa1c:	9400      	str	r4, [sp, #0]
 800aa1e:	2310      	movs	r3, #16
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	4631      	mov	r1, r6
 800aa24:	6978      	ldr	r0, [r7, #20]
 800aa26:	f7fe fea1 	bl	800976c <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aa2e:	f7fe ffad 	bl	800998c <settmout>
 800aa32:	e002      	b.n	800aa3a <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800aa34:	bf00      	nop
 800aa36:	e000      	b.n	800aa3a <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800aa38:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f47f af3e 	bne.w	800a8c4 <mg_tcpip_poll+0x200>
 800aa48:	e002      	b.n	800aa50 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800aa4a:	bf00      	nop
 800aa4c:	e000      	b.n	800aa50 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800aa4e:	bf00      	nop
    }
  }
}
 800aa50:	373c      	adds	r7, #60	; 0x3c
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa56:	bf00      	nop
 800aa58:	001b7740 	.word	0x001b7740
 800aa5c:	08013f44 	.word	0x08013f44
 800aa60:	08014110 	.word	0x08014110
 800aa64:	08012658 	.word	0x08012658
 800aa68:	08013dbc 	.word	0x08013dbc
 800aa6c:	08012ce8 	.word	0x08012ce8
 800aa70:	08013dcc 	.word	0x08013dcc
 800aa74:	08013dd8 	.word	0x08013dd8

0800aa78 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	332c      	adds	r3, #44	; 0x2c
 800aa88:	f107 0114 	add.w	r1, r7, #20
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fc f9d0 	bl	8006e34 <mg_queue_book>
 800aa94:	4602      	mov	r2, r0
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d811      	bhi.n	800aac0 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	68f9      	ldr	r1, [r7, #12]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f006 ff73 	bl	801198e <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	332c      	adds	r3, #44	; 0x2c
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fc fa5e 	bl	8006f70 <mg_queue_add>
    ifp->nrecv++;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800aabe:	e004      	b.n	800aaca <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aaca:	bf00      	nop
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d12c      	bne.n	800ab40 <mg_tcpip_init+0x6c>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	785b      	ldrb	r3, [r3, #1]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d128      	bne.n	800ab40 <mg_tcpip_init+0x6c>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	789b      	ldrb	r3, [r3, #2]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d124      	bne.n	800ab40 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d120      	bne.n	800ab40 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	791b      	ldrb	r3, [r3, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d11c      	bne.n	800ab40 <mg_tcpip_init+0x6c>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	795b      	ldrb	r3, [r3, #5]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d118      	bne.n	800ab40 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	2202      	movs	r2, #2
 800ab12:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	3301      	adds	r3, #1
 800ab18:	2105      	movs	r1, #5
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7f6 fbea 	bl	80012f4 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800ab20:	4b4d      	ldr	r3, [pc, #308]	; (800ac58 <mg_tcpip_init+0x184>)
 800ab22:	f242 129d 	movw	r2, #8605	; 0x219d
 800ab26:	494d      	ldr	r1, [pc, #308]	; (800ac5c <mg_tcpip_init+0x188>)
 800ab28:	2002      	movs	r0, #2
 800ab2a:	f7fb fbc9 	bl	80062c0 <mg_log_prefix>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d005      	beq.n	800ab40 <mg_tcpip_init+0x6c>
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	4949      	ldr	r1, [pc, #292]	; (800ac60 <mg_tcpip_init+0x18c>)
 800ab3a:	484a      	ldr	r0, [pc, #296]	; (800ac64 <mg_tcpip_init+0x190>)
 800ab3c:	f7fb fc1a 	bl	8006374 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d018      	beq.n	800ab7c <mg_tcpip_init+0xa8>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6838      	ldr	r0, [r7, #0]
 800ab52:	4798      	blx	r3
 800ab54:	4603      	mov	r3, r0
 800ab56:	f083 0301 	eor.w	r3, r3, #1
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00d      	beq.n	800ab7c <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800ab60:	4b3d      	ldr	r3, [pc, #244]	; (800ac58 <mg_tcpip_init+0x184>)
 800ab62:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800ab66:	493d      	ldr	r1, [pc, #244]	; (800ac5c <mg_tcpip_init+0x188>)
 800ab68:	2001      	movs	r0, #1
 800ab6a:	f7fb fba9 	bl	80062c0 <mg_log_prefix>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d06d      	beq.n	800ac50 <mg_tcpip_init+0x17c>
 800ab74:	483c      	ldr	r0, [pc, #240]	; (800ac68 <mg_tcpip_init+0x194>)
 800ab76:	f7fb fbfd 	bl	8006374 <mg_log>
 800ab7a:	e069      	b.n	800ac50 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800ab7c:	f240 6304 	movw	r3, #1540	; 0x604
 800ab80:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	2001      	movs	r0, #1
 800ab86:	f006 fb5b 	bl	8011240 <calloc>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	615a      	str	r2, [r3, #20]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	6a1b      	ldr	r3, [r3, #32]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <mg_tcpip_init+0xda>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	e001      	b.n	800abb2 <mg_tcpip_init+0xde>
 800abae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abba:	4619      	mov	r1, r3
 800abbc:	2001      	movs	r0, #1
 800abbe:	f006 fb3f 	bl	8011240 <calloc>
 800abc2:	4603      	mov	r3, r0
 800abc4:	461a      	mov	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800abca:	f7fd f8e9 	bl	8007da0 <mg_millis>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2228      	movs	r2, #40	; 0x28
 800abe8:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d102      	bne.n	800abf8 <mg_tcpip_init+0x124>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2201      	movs	r2, #1
 800abf6:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	333c      	adds	r3, #60	; 0x3c
 800abfc:	2206      	movs	r2, #6
 800abfe:	21ff      	movs	r1, #255	; 0xff
 800ac00:	4618      	mov	r0, r3
 800ac02:	f006 fdfa 	bl	80117fa <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	3360      	adds	r3, #96	; 0x60
 800ac0a:	2102      	movs	r1, #2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7f6 fb71 	bl	80012f4 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ac18:	4b14      	ldr	r3, [pc, #80]	; (800ac6c <mg_tcpip_init+0x198>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <mg_tcpip_init+0x160>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10d      	bne.n	800ac50 <mg_tcpip_init+0x17c>
 800ac34:	4b08      	ldr	r3, [pc, #32]	; (800ac58 <mg_tcpip_init+0x184>)
 800ac36:	f242 12b1 	movw	r2, #8625	; 0x21b1
 800ac3a:	4908      	ldr	r1, [pc, #32]	; (800ac5c <mg_tcpip_init+0x188>)
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	f7fb fb3f 	bl	80062c0 <mg_log_prefix>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <mg_tcpip_init+0x17c>
 800ac48:	4809      	ldr	r0, [pc, #36]	; (800ac70 <mg_tcpip_init+0x19c>)
 800ac4a:	f7fb fb93 	bl	8006374 <mg_log>
  }
}
 800ac4e:	e7ff      	b.n	800ac50 <mg_tcpip_init+0x17c>
 800ac50:	bf00      	nop
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	08014120 	.word	0x08014120
 800ac5c:	08012658 	.word	0x08012658
 800ac60:	08006bd5 	.word	0x08006bd5
 800ac64:	08013de8 	.word	0x08013de8
 800ac68:	08013e0c 	.word	0x08013e0c
 800ac6c:	ffff8000 	.word	0xffff8000
 800ac70:	08013378 	.word	0x08013378

0800ac74 <mg_open_listener>:
      c->is_connecting = 1;
    }
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800ac7e:	6838      	ldr	r0, [r7, #0]
 800ac80:	f7fc ffc0 	bl	8007c04 <mg_url_port>
 800ac84:	4603      	mov	r3, r0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fd f839 	bl	8007cfe <mg_ntohs>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	461a      	mov	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	831a      	strh	r2, [r3, #24]
  return true;
 800ac94:	2301      	movs	r3, #1
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <write_conn>:

static void write_conn(struct mg_connection *c) {
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800acac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb0:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acbe:	461a      	mov	r2, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fc fec6 	bl	8007a52 <mg_tls_send>
 800acc6:	4603      	mov	r3, r0
 800acc8:	e008      	b.n	800acdc <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd2:	461a      	mov	r2, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7fe ff67 	bl	8009ba8 <mg_io_send>
 800acda:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800acdc:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dd0d      	ble.n	800ad00 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3348      	adds	r3, #72	; 0x48
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	2100      	movs	r1, #0
 800acec:	4618      	mov	r0, r3
 800acee:	f7fa fcef 	bl	80056d0 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800acf2:	f107 030c 	add.w	r3, r7, #12
 800acf6:	461a      	mov	r2, r3
 800acf8:	2108      	movs	r1, #8
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7f6 fd79 	bl	80017f2 <mg_call>
  }
}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	b08f      	sub	sp, #60	; 0x3c
 800ad0c:	af06      	add	r7, sp, #24
 800ad0e:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3390      	adds	r3, #144	; 0x90
 800ad14:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	331c      	adds	r3, #28
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	3318      	adds	r3, #24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fa fd1f 	bl	8005766 <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d12f      	bne.n	800ad98 <close_conn+0x90>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d127      	bne.n	800ad98 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4e:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	f103 0610 	add.w	r6, r3, #16
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	60bb      	str	r3, [r7, #8]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	8b1c      	ldrh	r4, [r3, #24]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fc ffb0 	bl	8007ccc <mg_ntohl>
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fc ffaa 	bl	8007ccc <mg_ntohl>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	9205      	str	r2, [sp, #20]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	9204      	str	r2, [sp, #16]
 800ad82:	9303      	str	r3, [sp, #12]
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	9102      	str	r1, [sp, #8]
 800ad88:	9501      	str	r5, [sp, #4]
 800ad8a:	9400      	str	r4, [sp, #0]
 800ad8c:	2311      	movs	r3, #17
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	4631      	mov	r1, r6
 800ad92:	69b8      	ldr	r0, [r7, #24]
 800ad94:	f7fe fcea 	bl	800976c <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7fb fc35 	bl	8006608 <mg_close_conn>
}
 800ad9e:	bf00      	nop
 800ada0:	3724      	adds	r7, #36	; 0x24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ada6 <can_write>:

static bool can_write(struct mg_connection *c) {
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800adb4:	f003 0320 	and.w	r3, r3, #32
 800adb8:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d11d      	bne.n	800adfa <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800adc4:	f003 0308 	and.w	r3, r3, #8
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d115      	bne.n	800adfa <can_write+0x54>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add2:	2b00      	cmp	r3, #0
 800add4:	d011      	beq.n	800adfa <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800addc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ade0:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <can_write+0x54>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e000      	b.n	800adfc <can_write+0x56>
 800adfa:	2300      	movs	r3, #0
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	b2db      	uxtb	r3, r3
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
	...

0800ae10 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800ae10:	b5b0      	push	{r4, r5, r7, lr}
 800ae12:	b08a      	sub	sp, #40	; 0x28
 800ae14:	af04      	add	r7, sp, #16
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800ae1a:	f7fc ffc1 	bl	8007da0 <mg_millis>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ae2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae2e:	4608      	mov	r0, r1
 800ae30:	f7ff fc48 	bl	800a6c4 <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae3e:	4608      	mov	r0, r1
 800ae40:	f7fc fd61 	bl	8007906 <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	617b      	str	r3, [r7, #20]
 800ae4a:	e089      	b.n	800af60 <mg_mgr_poll+0x150>
    tmp = c->next;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800ae52:	f107 0308 	add.w	r3, r7, #8
 800ae56:	461a      	mov	r2, r3
 800ae58:	2102      	movs	r1, #2
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f7f6 fcc9 	bl	80017f2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800ae60:	4b44      	ldr	r3, [pc, #272]	; (800af74 <mg_mgr_poll+0x164>)
 800ae62:	f242 2218 	movw	r2, #8728	; 0x2218
 800ae66:	4944      	ldr	r1, [pc, #272]	; (800af78 <mg_mgr_poll+0x168>)
 800ae68:	2004      	movs	r0, #4
 800ae6a:	f7fb fa29 	bl	80062c0 <mg_log_prefix>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d041      	beq.n	800aef8 <mg_mgr_poll+0xe8>
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ae7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <mg_mgr_poll+0x7c>
 800ae88:	2454      	movs	r4, #84	; 0x54
 800ae8a:	e000      	b.n	800ae8e <mg_mgr_poll+0x7e>
 800ae8c:	2474      	movs	r4, #116	; 0x74
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ae94:	f003 0320 	and.w	r3, r3, #32
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <mg_mgr_poll+0x92>
 800ae9e:	2543      	movs	r5, #67	; 0x43
 800aea0:	e000      	b.n	800aea4 <mg_mgr_poll+0x94>
 800aea2:	2563      	movs	r5, #99	; 0x63
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aeaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <mg_mgr_poll+0xa8>
 800aeb4:	2348      	movs	r3, #72	; 0x48
 800aeb6:	e000      	b.n	800aeba <mg_mgr_poll+0xaa>
 800aeb8:	2368      	movs	r3, #104	; 0x68
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800aec0:	f002 0208 	and.w	r2, r2, #8
 800aec4:	b2d2      	uxtb	r2, r2
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	d001      	beq.n	800aece <mg_mgr_poll+0xbe>
 800aeca:	2252      	movs	r2, #82	; 0x52
 800aecc:	e000      	b.n	800aed0 <mg_mgr_poll+0xc0>
 800aece:	2272      	movs	r2, #114	; 0x72
 800aed0:	6979      	ldr	r1, [r7, #20]
 800aed2:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800aed6:	f001 0120 	and.w	r1, r1, #32
 800aeda:	b2c9      	uxtb	r1, r1
 800aedc:	2900      	cmp	r1, #0
 800aede:	d001      	beq.n	800aee4 <mg_mgr_poll+0xd4>
 800aee0:	2143      	movs	r1, #67	; 0x43
 800aee2:	e000      	b.n	800aee6 <mg_mgr_poll+0xd6>
 800aee4:	2163      	movs	r1, #99	; 0x63
 800aee6:	9102      	str	r1, [sp, #8]
 800aee8:	9201      	str	r2, [sp, #4]
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	462b      	mov	r3, r5
 800aeee:	4622      	mov	r2, r4
 800aef0:	4601      	mov	r1, r0
 800aef2:	4822      	ldr	r0, [pc, #136]	; (800af7c <mg_mgr_poll+0x16c>)
 800aef4:	f7fb fa3e 	bl	8006374 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aefe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <mg_mgr_poll+0xfe>
 800af08:	6978      	ldr	r0, [r7, #20]
 800af0a:	f7fc fd75 	bl	80079f8 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800af0e:	6978      	ldr	r0, [r7, #20]
 800af10:	f7ff ff49 	bl	800ada6 <can_write>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <mg_mgr_poll+0x110>
 800af1a:	6978      	ldr	r0, [r7, #20]
 800af1c:	f7ff febf 	bl	800ac9e <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800af26:	f003 0310 	and.w	r3, r3, #16
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00a      	beq.n	800af46 <mg_mgr_poll+0x136>
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af34:	2b00      	cmp	r3, #0
 800af36:	d106      	bne.n	800af46 <mg_mgr_poll+0x136>
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800af3e:	f043 0320 	orr.w	r3, r3, #32
 800af42:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800af4c:	f003 0320 	and.w	r3, r3, #32
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <mg_mgr_poll+0x14c>
 800af56:	6978      	ldr	r0, [r7, #20]
 800af58:	f7ff fed6 	bl	800ad08 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f47f af72 	bne.w	800ae4c <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bdb0      	pop	{r4, r5, r7, pc}
 800af72:	bf00      	nop
 800af74:	08014130 	.word	0x08014130
 800af78:	08012658 	.word	0x08012658
 800af7c:	08013e58 	.word	0x08013e58

0800af80 <scmp>:
  {"/web_root/index.html.gz", v1, sizeof(v1), 1710036665},
  {"/web_root/styles.css.gz", v2, sizeof(v2), 1710036662},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800af8a:	e005      	b.n	800af98 <scmp+0x18>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3301      	adds	r3, #1
 800af90:	607b      	str	r3, [r7, #4]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	3301      	adds	r3, #1
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <scmp+0x2c>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	781a      	ldrb	r2, [r3, #0]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d0ef      	beq.n	800af8c <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	461a      	mov	r2, r3
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	1ad3      	subs	r3, r2, r3
}
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <mg_unlist>:
const char *mg_unlist(size_t no) {
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800afcc:	4906      	ldr	r1, [pc, #24]	; (800afe8 <mg_unlist+0x24>)
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	4613      	mov	r3, r2
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	4413      	add	r3, r2
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	440b      	add	r3, r1
 800afda:	681b      	ldr	r3, [r3, #0]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	080144c8 	.word	0x080144c8

0800afec <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800aff8:	4b16      	ldr	r3, [pc, #88]	; (800b054 <mg_unpack+0x68>)
 800affa:	617b      	str	r3, [r7, #20]
 800affc:	e020      	b.n	800b040 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	4618      	mov	r0, r3
 800b006:	f7ff ffbb 	bl	800af80 <scmp>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d113      	bne.n	800b038 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d004      	beq.n	800b020 <mg_unpack+0x34>
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	1e5a      	subs	r2, r3, #1
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d005      	beq.n	800b032 <mg_unpack+0x46>
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	e008      	b.n	800b04a <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800b038:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	3318      	adds	r3, #24
 800b03e:	617b      	str	r3, [r7, #20]
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1da      	bne.n	800affe <mg_unpack+0x12>
  }
  return NULL;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	080144c8 	.word	0x080144c8

0800b058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b05e:	4b11      	ldr	r3, [pc, #68]	; (800b0a4 <HAL_MspInit+0x4c>)
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	4a10      	ldr	r2, [pc, #64]	; (800b0a4 <HAL_MspInit+0x4c>)
 800b064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b068:	6413      	str	r3, [r2, #64]	; 0x40
 800b06a:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <HAL_MspInit+0x4c>)
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b072:	607b      	str	r3, [r7, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b076:	4b0b      	ldr	r3, [pc, #44]	; (800b0a4 <HAL_MspInit+0x4c>)
 800b078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07a:	4a0a      	ldr	r2, [pc, #40]	; (800b0a4 <HAL_MspInit+0x4c>)
 800b07c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b080:	6453      	str	r3, [r2, #68]	; 0x44
 800b082:	4b08      	ldr	r3, [pc, #32]	; (800b0a4 <HAL_MspInit+0x4c>)
 800b084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b08e:	2200      	movs	r2, #0
 800b090:	210f      	movs	r1, #15
 800b092:	f06f 0001 	mvn.w	r0, #1
 800b096:	f000 fbfb 	bl	800b890 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b09a:	bf00      	nop
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	40023800 	.word	0x40023800

0800b0a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08e      	sub	sp, #56	; 0x38
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	605a      	str	r2, [r3, #4]
 800b0ba:	609a      	str	r2, [r3, #8]
 800b0bc:	60da      	str	r2, [r3, #12]
 800b0be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a52      	ldr	r2, [pc, #328]	; (800b210 <HAL_ETH_MspInit+0x168>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	f040 809e 	bne.w	800b208 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b0cc:	4b51      	ldr	r3, [pc, #324]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	4a50      	ldr	r2, [pc, #320]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b0d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b0d6:	6313      	str	r3, [r2, #48]	; 0x30
 800b0d8:	4b4e      	ldr	r3, [pc, #312]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0e0:	623b      	str	r3, [r7, #32]
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	4b4b      	ldr	r3, [pc, #300]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e8:	4a4a      	ldr	r2, [pc, #296]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b0ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b0f0:	4b48      	ldr	r3, [pc, #288]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0f8:	61fb      	str	r3, [r7, #28]
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4b45      	ldr	r3, [pc, #276]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	4a44      	ldr	r2, [pc, #272]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b102:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b106:	6313      	str	r3, [r2, #48]	; 0x30
 800b108:	4b42      	ldr	r3, [pc, #264]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b110:	61bb      	str	r3, [r7, #24]
 800b112:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b114:	4b3f      	ldr	r3, [pc, #252]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b118:	4a3e      	ldr	r2, [pc, #248]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b11a:	f043 0304 	orr.w	r3, r3, #4
 800b11e:	6313      	str	r3, [r2, #48]	; 0x30
 800b120:	4b3c      	ldr	r3, [pc, #240]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b12c:	4b39      	ldr	r3, [pc, #228]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b130:	4a38      	ldr	r2, [pc, #224]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b132:	f043 0301 	orr.w	r3, r3, #1
 800b136:	6313      	str	r3, [r2, #48]	; 0x30
 800b138:	4b36      	ldr	r3, [pc, #216]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13c:	f003 0301 	and.w	r3, r3, #1
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b144:	4b33      	ldr	r3, [pc, #204]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b148:	4a32      	ldr	r2, [pc, #200]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b14a:	f043 0302 	orr.w	r3, r3, #2
 800b14e:	6313      	str	r3, [r2, #48]	; 0x30
 800b150:	4b30      	ldr	r3, [pc, #192]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b15c:	4b2d      	ldr	r3, [pc, #180]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b160:	4a2c      	ldr	r2, [pc, #176]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b166:	6313      	str	r3, [r2, #48]	; 0x30
 800b168:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <HAL_ETH_MspInit+0x16c>)
 800b16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b170:	60bb      	str	r3, [r7, #8]
 800b172:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b174:	2332      	movs	r3, #50	; 0x32
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b178:	2302      	movs	r3, #2
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b17c:	2300      	movs	r3, #0
 800b17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b180:	2303      	movs	r3, #3
 800b182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b184:	230b      	movs	r3, #11
 800b186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b18c:	4619      	mov	r1, r3
 800b18e:	4822      	ldr	r0, [pc, #136]	; (800b218 <HAL_ETH_MspInit+0x170>)
 800b190:	f000 fece 	bl	800bf30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b194:	2386      	movs	r3, #134	; 0x86
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b198:	2302      	movs	r3, #2
 800b19a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1a4:	230b      	movs	r3, #11
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	481b      	ldr	r0, [pc, #108]	; (800b21c <HAL_ETH_MspInit+0x174>)
 800b1b0:	f000 febe 	bl	800bf30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b1b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1c6:	230b      	movs	r3, #11
 800b1c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	4813      	ldr	r0, [pc, #76]	; (800b220 <HAL_ETH_MspInit+0x178>)
 800b1d2:	f000 fead 	bl	800bf30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b1d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1dc:	2302      	movs	r3, #2
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1e8:	230b      	movs	r3, #11
 800b1ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b1ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	480c      	ldr	r0, [pc, #48]	; (800b224 <HAL_ETH_MspInit+0x17c>)
 800b1f4:	f000 fe9c 	bl	800bf30 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2105      	movs	r1, #5
 800b1fc:	203d      	movs	r0, #61	; 0x3d
 800b1fe:	f000 fb47 	bl	800b890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b202:	203d      	movs	r0, #61	; 0x3d
 800b204:	f000 fb60 	bl	800b8c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800b208:	bf00      	nop
 800b20a:	3738      	adds	r7, #56	; 0x38
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	40028000 	.word	0x40028000
 800b214:	40023800 	.word	0x40023800
 800b218:	40020800 	.word	0x40020800
 800b21c:	40020000 	.word	0x40020000
 800b220:	40020400 	.word	0x40020400
 800b224:	40021800 	.word	0x40021800

0800b228 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b0a4      	sub	sp, #144	; 0x90
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b230:	f107 030c 	add.w	r3, r7, #12
 800b234:	2284      	movs	r2, #132	; 0x84
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f006 fade 	bl	80117fa <memset>
  if(hrng->Instance==RNG)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a11      	ldr	r2, [pc, #68]	; (800b288 <HAL_RNG_MspInit+0x60>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d11b      	bne.n	800b280 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b248:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b24c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b24e:	2300      	movs	r3, #0
 800b250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b254:	f107 030c 	add.w	r3, r7, #12
 800b258:	4618      	mov	r0, r3
 800b25a:	f001 fd95 	bl	800cd88 <HAL_RCCEx_PeriphCLKConfig>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800b264:	f7f6 fa84 	bl	8001770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b268:	4b08      	ldr	r3, [pc, #32]	; (800b28c <HAL_RNG_MspInit+0x64>)
 800b26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26c:	4a07      	ldr	r2, [pc, #28]	; (800b28c <HAL_RNG_MspInit+0x64>)
 800b26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b272:	6353      	str	r3, [r2, #52]	; 0x34
 800b274:	4b05      	ldr	r3, [pc, #20]	; (800b28c <HAL_RNG_MspInit+0x64>)
 800b276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27c:	60bb      	str	r3, [r7, #8]
 800b27e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b280:	bf00      	nop
 800b282:	3790      	adds	r7, #144	; 0x90
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	50060800 	.word	0x50060800
 800b28c:	40023800 	.word	0x40023800

0800b290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b0aa      	sub	sp, #168	; 0xa8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b298:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	605a      	str	r2, [r3, #4]
 800b2a2:	609a      	str	r2, [r3, #8]
 800b2a4:	60da      	str	r2, [r3, #12]
 800b2a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b2a8:	f107 0310 	add.w	r3, r7, #16
 800b2ac:	2284      	movs	r2, #132	; 0x84
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f006 faa2 	bl	80117fa <memset>
  if(huart->Instance==USART3)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a22      	ldr	r2, [pc, #136]	; (800b344 <HAL_UART_MspInit+0xb4>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d13c      	bne.n	800b33a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b2c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b2ca:	f107 0310 	add.w	r3, r7, #16
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f001 fd5a 	bl	800cd88 <HAL_RCCEx_PeriphCLKConfig>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b2da:	f7f6 fa49 	bl	8001770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b2de:	4b1a      	ldr	r3, [pc, #104]	; (800b348 <HAL_UART_MspInit+0xb8>)
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e2:	4a19      	ldr	r2, [pc, #100]	; (800b348 <HAL_UART_MspInit+0xb8>)
 800b2e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2e8:	6413      	str	r3, [r2, #64]	; 0x40
 800b2ea:	4b17      	ldr	r3, [pc, #92]	; (800b348 <HAL_UART_MspInit+0xb8>)
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b2f6:	4b14      	ldr	r3, [pc, #80]	; (800b348 <HAL_UART_MspInit+0xb8>)
 800b2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fa:	4a13      	ldr	r2, [pc, #76]	; (800b348 <HAL_UART_MspInit+0xb8>)
 800b2fc:	f043 0308 	orr.w	r3, r3, #8
 800b300:	6313      	str	r3, [r2, #48]	; 0x30
 800b302:	4b11      	ldr	r3, [pc, #68]	; (800b348 <HAL_UART_MspInit+0xb8>)
 800b304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b306:	f003 0308 	and.w	r3, r3, #8
 800b30a:	60bb      	str	r3, [r7, #8]
 800b30c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b30e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b316:	2302      	movs	r3, #2
 800b318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b31c:	2300      	movs	r3, #0
 800b31e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b322:	2303      	movs	r3, #3
 800b324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b328:	2307      	movs	r3, #7
 800b32a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b32e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b332:	4619      	mov	r1, r3
 800b334:	4805      	ldr	r0, [pc, #20]	; (800b34c <HAL_UART_MspInit+0xbc>)
 800b336:	f000 fdfb 	bl	800bf30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b33a:	bf00      	nop
 800b33c:	37a8      	adds	r7, #168	; 0xa8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	40004800 	.word	0x40004800
 800b348:	40023800 	.word	0x40023800
 800b34c:	40020c00 	.word	0x40020c00

0800b350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08e      	sub	sp, #56	; 0x38
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b360:	4b33      	ldr	r3, [pc, #204]	; (800b430 <HAL_InitTick+0xe0>)
 800b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b364:	4a32      	ldr	r2, [pc, #200]	; (800b430 <HAL_InitTick+0xe0>)
 800b366:	f043 0310 	orr.w	r3, r3, #16
 800b36a:	6413      	str	r3, [r2, #64]	; 0x40
 800b36c:	4b30      	ldr	r3, [pc, #192]	; (800b430 <HAL_InitTick+0xe0>)
 800b36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b370:	f003 0310 	and.w	r3, r3, #16
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b378:	f107 0210 	add.w	r2, r7, #16
 800b37c:	f107 0314 	add.w	r3, r7, #20
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f001 fcce 	bl	800cd24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d103      	bne.n	800b39a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b392:	f001 fc9f 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 800b396:	6378      	str	r0, [r7, #52]	; 0x34
 800b398:	e004      	b.n	800b3a4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b39a:	f001 fc9b 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a6:	4a23      	ldr	r2, [pc, #140]	; (800b434 <HAL_InitTick+0xe4>)
 800b3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ac:	0c9b      	lsrs	r3, r3, #18
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b3b2:	4b21      	ldr	r3, [pc, #132]	; (800b438 <HAL_InitTick+0xe8>)
 800b3b4:	4a21      	ldr	r2, [pc, #132]	; (800b43c <HAL_InitTick+0xec>)
 800b3b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b3b8:	4b1f      	ldr	r3, [pc, #124]	; (800b438 <HAL_InitTick+0xe8>)
 800b3ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b3be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b3c0:	4a1d      	ldr	r2, [pc, #116]	; (800b438 <HAL_InitTick+0xe8>)
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b3c6:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <HAL_InitTick+0xe8>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b3cc:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <HAL_InitTick+0xe8>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b3d2:	4b19      	ldr	r3, [pc, #100]	; (800b438 <HAL_InitTick+0xe8>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b3d8:	4817      	ldr	r0, [pc, #92]	; (800b438 <HAL_InitTick+0xe8>)
 800b3da:	f002 f945 	bl	800d668 <HAL_TIM_Base_Init>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800b3e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d11b      	bne.n	800b424 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b3ec:	4812      	ldr	r0, [pc, #72]	; (800b438 <HAL_InitTick+0xe8>)
 800b3ee:	f002 f99d 	bl	800d72c <HAL_TIM_Base_Start_IT>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800b3f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d111      	bne.n	800b424 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b400:	2036      	movs	r0, #54	; 0x36
 800b402:	f000 fa61 	bl	800b8c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b0f      	cmp	r3, #15
 800b40a:	d808      	bhi.n	800b41e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b40c:	2200      	movs	r2, #0
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	2036      	movs	r0, #54	; 0x36
 800b412:	f000 fa3d 	bl	800b890 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b416:	4a0a      	ldr	r2, [pc, #40]	; (800b440 <HAL_InitTick+0xf0>)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	e002      	b.n	800b424 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3738      	adds	r7, #56	; 0x38
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	40023800 	.word	0x40023800
 800b434:	431bde83 	.word	0x431bde83
 800b438:	20003674 	.word	0x20003674
 800b43c:	40001000 	.word	0x40001000
 800b440:	20000254 	.word	0x20000254

0800b444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b444:	b480      	push	{r7}
 800b446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b448:	e7fe      	b.n	800b448 <NMI_Handler+0x4>

0800b44a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b44a:	b480      	push	{r7}
 800b44c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b44e:	e7fe      	b.n	800b44e <HardFault_Handler+0x4>

0800b450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b454:	e7fe      	b.n	800b454 <MemManage_Handler+0x4>

0800b456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b456:	b480      	push	{r7}
 800b458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b45a:	e7fe      	b.n	800b45a <BusFault_Handler+0x4>

0800b45c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b45c:	b480      	push	{r7}
 800b45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b460:	e7fe      	b.n	800b460 <UsageFault_Handler+0x4>

0800b462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b462:	b480      	push	{r7}
 800b464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b466:	bf00      	nop
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b474:	4802      	ldr	r0, [pc, #8]	; (800b480 <TIM6_DAC_IRQHandler+0x10>)
 800b476:	f002 f9d1 	bl	800d81c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b47a:	bf00      	nop
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20003674 	.word	0x20003674

0800b484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0
  return 1;
 800b488:	2301      	movs	r3, #1
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <_kill>:

int _kill(int pid, int sig)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b49e:	f006 fa41 	bl	8011924 <__errno>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2216      	movs	r2, #22
 800b4a6:	601a      	str	r2, [r3, #0]
  return -1;
 800b4a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <_exit>:

void _exit (int status)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b4bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7ff ffe7 	bl	800b494 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b4c6:	e7fe      	b.n	800b4c6 <_exit+0x12>

0800b4c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	617b      	str	r3, [r7, #20]
 800b4d8:	e00a      	b.n	800b4f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b4da:	f3af 8000 	nop.w
 800b4de:	4601      	mov	r1, r0
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	60ba      	str	r2, [r7, #8]
 800b4e6:	b2ca      	uxtb	r2, r1
 800b4e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	dbf0      	blt.n	800b4da <_read+0x12>
  }

  return len;
 800b4f8:	687b      	ldr	r3, [r7, #4]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d107      	bne.n	800b526 <_write+0x22>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	b29a      	uxth	r2, r3
 800b51a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	4803      	ldr	r0, [pc, #12]	; (800b530 <_write+0x2c>)
 800b522:	f002 fbcf 	bl	800dcc4 <HAL_UART_Transmit>
	 return len;
 800b526:	687b      	ldr	r3, [r7, #4]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	20000514 	.word	0x20000514

0800b534 <_close>:
//#endif

int _close(int file)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b53c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b540:	4618      	mov	r0, r3
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b55c:	605a      	str	r2, [r3, #4]
  return 0;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <_isatty>:

int _isatty(int file)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b574:	2301      	movs	r3, #1
}
 800b576:	4618      	mov	r0, r3
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b582:	b480      	push	{r7}
 800b584:	b085      	sub	sp, #20
 800b586:	af00      	add	r7, sp, #0
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b5a4:	4a14      	ldr	r2, [pc, #80]	; (800b5f8 <_sbrk+0x5c>)
 800b5a6:	4b15      	ldr	r3, [pc, #84]	; (800b5fc <_sbrk+0x60>)
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b5b0:	4b13      	ldr	r3, [pc, #76]	; (800b600 <_sbrk+0x64>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b5b8:	4b11      	ldr	r3, [pc, #68]	; (800b600 <_sbrk+0x64>)
 800b5ba:	4a12      	ldr	r2, [pc, #72]	; (800b604 <_sbrk+0x68>)
 800b5bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b5be:	4b10      	ldr	r3, [pc, #64]	; (800b600 <_sbrk+0x64>)
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d207      	bcs.n	800b5dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b5cc:	f006 f9aa 	bl	8011924 <__errno>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	220c      	movs	r2, #12
 800b5d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5da:	e009      	b.n	800b5f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b5dc:	4b08      	ldr	r3, [pc, #32]	; (800b600 <_sbrk+0x64>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b5e2:	4b07      	ldr	r3, [pc, #28]	; (800b600 <_sbrk+0x64>)
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	4a05      	ldr	r2, [pc, #20]	; (800b600 <_sbrk+0x64>)
 800b5ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	20050000 	.word	0x20050000
 800b5fc:	00000400 	.word	0x00000400
 800b600:	200036c0 	.word	0x200036c0
 800b604:	20008160 	.word	0x20008160

0800b608 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b608:	b480      	push	{r7}
 800b60a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b60c:	4b06      	ldr	r3, [pc, #24]	; (800b628 <SystemInit+0x20>)
 800b60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b612:	4a05      	ldr	r2, [pc, #20]	; (800b628 <SystemInit+0x20>)
 800b614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b61c:	bf00      	nop
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	e000ed00 	.word	0xe000ed00

0800b62c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b62c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b630:	480d      	ldr	r0, [pc, #52]	; (800b668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b632:	490e      	ldr	r1, [pc, #56]	; (800b66c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b634:	4a0e      	ldr	r2, [pc, #56]	; (800b670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b638:	e002      	b.n	800b640 <LoopCopyDataInit>

0800b63a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b63a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b63c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b63e:	3304      	adds	r3, #4

0800b640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b644:	d3f9      	bcc.n	800b63a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b646:	4a0b      	ldr	r2, [pc, #44]	; (800b674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b648:	4c0b      	ldr	r4, [pc, #44]	; (800b678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b64a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b64c:	e001      	b.n	800b652 <LoopFillZerobss>

0800b64e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b64e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b650:	3204      	adds	r2, #4

0800b652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b654:	d3fb      	bcc.n	800b64e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b656:	f7ff ffd7 	bl	800b608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b65a:	f006 f969 	bl	8011930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b65e:	f7f5 fc3b 	bl	8000ed8 <main>
  bx  lr    
 800b662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b664:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b66c:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 800b670:	08014718 	.word	0x08014718
  ldr r2, =_sbss
 800b674:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800b678:	2000815c 	.word	0x2000815c

0800b67c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b67c:	e7fe      	b.n	800b67c <ADC_IRQHandler>

0800b67e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b682:	2003      	movs	r0, #3
 800b684:	f000 f8f9 	bl	800b87a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b688:	200f      	movs	r0, #15
 800b68a:	f7ff fe61 	bl	800b350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b68e:	f7ff fce3 	bl	800b058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b698:	b480      	push	{r7}
 800b69a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b69c:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <HAL_IncTick+0x20>)
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <HAL_IncTick+0x24>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	4a04      	ldr	r2, [pc, #16]	; (800b6bc <HAL_IncTick+0x24>)
 800b6aa:	6013      	str	r3, [r2, #0]
}
 800b6ac:	bf00      	nop
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	20000258 	.word	0x20000258
 800b6bc:	200036c4 	.word	0x200036c4

0800b6c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0
  return uwTick;
 800b6c4:	4b03      	ldr	r3, [pc, #12]	; (800b6d4 <HAL_GetTick+0x14>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	200036c4 	.word	0x200036c4

0800b6d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b6e0:	f7ff ffee 	bl	800b6c0 <HAL_GetTick>
 800b6e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f0:	d005      	beq.n	800b6fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b6f2:	4b0a      	ldr	r3, [pc, #40]	; (800b71c <HAL_Delay+0x44>)
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b6fe:	bf00      	nop
 800b700:	f7ff ffde 	bl	800b6c0 <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d8f7      	bhi.n	800b700 <HAL_Delay+0x28>
  {
  }
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	20000258 	.word	0x20000258

0800b720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f003 0307 	and.w	r3, r3, #7
 800b72e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b730:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <__NVIC_SetPriorityGrouping+0x40>)
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b73c:	4013      	ands	r3, r2
 800b73e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b748:	4b06      	ldr	r3, [pc, #24]	; (800b764 <__NVIC_SetPriorityGrouping+0x44>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b74e:	4a04      	ldr	r2, [pc, #16]	; (800b760 <__NVIC_SetPriorityGrouping+0x40>)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	60d3      	str	r3, [r2, #12]
}
 800b754:	bf00      	nop
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	e000ed00 	.word	0xe000ed00
 800b764:	05fa0000 	.word	0x05fa0000

0800b768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b76c:	4b04      	ldr	r3, [pc, #16]	; (800b780 <__NVIC_GetPriorityGrouping+0x18>)
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	0a1b      	lsrs	r3, r3, #8
 800b772:	f003 0307 	and.w	r3, r3, #7
}
 800b776:	4618      	mov	r0, r3
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	e000ed00 	.word	0xe000ed00

0800b784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b78e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b792:	2b00      	cmp	r3, #0
 800b794:	db0b      	blt.n	800b7ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	f003 021f 	and.w	r2, r3, #31
 800b79c:	4907      	ldr	r1, [pc, #28]	; (800b7bc <__NVIC_EnableIRQ+0x38>)
 800b79e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7a2:	095b      	lsrs	r3, r3, #5
 800b7a4:	2001      	movs	r0, #1
 800b7a6:	fa00 f202 	lsl.w	r2, r0, r2
 800b7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	e000e100 	.word	0xe000e100

0800b7c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	db0a      	blt.n	800b7ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	490c      	ldr	r1, [pc, #48]	; (800b80c <__NVIC_SetPriority+0x4c>)
 800b7da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7de:	0112      	lsls	r2, r2, #4
 800b7e0:	b2d2      	uxtb	r2, r2
 800b7e2:	440b      	add	r3, r1
 800b7e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b7e8:	e00a      	b.n	800b800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	4908      	ldr	r1, [pc, #32]	; (800b810 <__NVIC_SetPriority+0x50>)
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	f003 030f 	and.w	r3, r3, #15
 800b7f6:	3b04      	subs	r3, #4
 800b7f8:	0112      	lsls	r2, r2, #4
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	440b      	add	r3, r1
 800b7fe:	761a      	strb	r2, [r3, #24]
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	e000e100 	.word	0xe000e100
 800b810:	e000ed00 	.word	0xe000ed00

0800b814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b814:	b480      	push	{r7}
 800b816:	b089      	sub	sp, #36	; 0x24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f1c3 0307 	rsb	r3, r3, #7
 800b82e:	2b04      	cmp	r3, #4
 800b830:	bf28      	it	cs
 800b832:	2304      	movcs	r3, #4
 800b834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	3304      	adds	r3, #4
 800b83a:	2b06      	cmp	r3, #6
 800b83c:	d902      	bls.n	800b844 <NVIC_EncodePriority+0x30>
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	3b03      	subs	r3, #3
 800b842:	e000      	b.n	800b846 <NVIC_EncodePriority+0x32>
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b848:	f04f 32ff 	mov.w	r2, #4294967295
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	fa02 f303 	lsl.w	r3, r2, r3
 800b852:	43da      	mvns	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	401a      	ands	r2, r3
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b85c:	f04f 31ff 	mov.w	r1, #4294967295
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	fa01 f303 	lsl.w	r3, r1, r3
 800b866:	43d9      	mvns	r1, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b86c:	4313      	orrs	r3, r2
         );
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3724      	adds	r7, #36	; 0x24
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7ff ff4c 	bl	800b720 <__NVIC_SetPriorityGrouping>
}
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b8a2:	f7ff ff61 	bl	800b768 <__NVIC_GetPriorityGrouping>
 800b8a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	68b9      	ldr	r1, [r7, #8]
 800b8ac:	6978      	ldr	r0, [r7, #20]
 800b8ae:	f7ff ffb1 	bl	800b814 <NVIC_EncodePriority>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff ff80 	bl	800b7c0 <__NVIC_SetPriority>
}
 800b8c0:	bf00      	nop
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b8d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff ff54 	bl	800b784 <__NVIC_EnableIRQ>
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e06a      	b.n	800b9cc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2223      	movs	r2, #35	; 0x23
 800b904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7ff fbcd 	bl	800b0a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b90e:	4b31      	ldr	r3, [pc, #196]	; (800b9d4 <HAL_ETH_Init+0xf0>)
 800b910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b912:	4a30      	ldr	r2, [pc, #192]	; (800b9d4 <HAL_ETH_Init+0xf0>)
 800b914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b918:	6453      	str	r3, [r2, #68]	; 0x44
 800b91a:	4b2e      	ldr	r3, [pc, #184]	; (800b9d4 <HAL_ETH_Init+0xf0>)
 800b91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b922:	60bb      	str	r3, [r7, #8]
 800b924:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b926:	4b2c      	ldr	r3, [pc, #176]	; (800b9d8 <HAL_ETH_Init+0xf4>)
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	4a2b      	ldr	r2, [pc, #172]	; (800b9d8 <HAL_ETH_Init+0xf4>)
 800b92c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b930:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b932:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <HAL_ETH_Init+0xf4>)
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	4927      	ldr	r1, [pc, #156]	; (800b9d8 <HAL_ETH_Init+0xf4>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800b940:	4b25      	ldr	r3, [pc, #148]	; (800b9d8 <HAL_ETH_Init+0xf4>)
 800b942:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	6812      	ldr	r2, [r2, #0]
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b95a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b95c:	f7ff feb0 	bl	800b6c0 <HAL_GetTick>
 800b960:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800b962:	e011      	b.n	800b988 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800b964:	f7ff feac 	bl	800b6c0 <HAL_GetTick>
 800b968:	4602      	mov	r2, r0
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b972:	d909      	bls.n	800b988 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2204      	movs	r2, #4
 800b978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	22e0      	movs	r2, #224	; 0xe0
 800b980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e021      	b.n	800b9cc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1e4      	bne.n	800b964 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f958 	bl	800bc50 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 f9ff 	bl	800bda4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fa55 	bl	800be56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f9bd 	bl	800bd34 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2210      	movs	r2, #16
 800b9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	40023800 	.word	0x40023800
 800b9d8:	40013800 	.word	0x40013800

0800b9dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	4b51      	ldr	r3, [pc, #324]	; (800bb38 <ETH_SetMACConfig+0x15c>)
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	7c1b      	ldrb	r3, [r3, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d102      	bne.n	800ba04 <ETH_SetMACConfig+0x28>
 800b9fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ba02:	e000      	b.n	800ba06 <ETH_SetMACConfig+0x2a>
 800ba04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	7c5b      	ldrb	r3, [r3, #17]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d102      	bne.n	800ba14 <ETH_SetMACConfig+0x38>
 800ba0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba12:	e000      	b.n	800ba16 <ETH_SetMACConfig+0x3a>
 800ba14:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800ba16:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800ba1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	7fdb      	ldrb	r3, [r3, #31]
 800ba22:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800ba24:	431a      	orrs	r2, r3
                        macconf->Speed |
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800ba2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	7f92      	ldrb	r2, [r2, #30]
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	d102      	bne.n	800ba3a <ETH_SetMACConfig+0x5e>
 800ba34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ba38:	e000      	b.n	800ba3c <ETH_SetMACConfig+0x60>
 800ba3a:	2200      	movs	r2, #0
                        macconf->Speed |
 800ba3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	7f1b      	ldrb	r3, [r3, #28]
 800ba42:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800ba44:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ba4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	791b      	ldrb	r3, [r3, #4]
 800ba50:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800ba52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	d102      	bne.n	800ba64 <ETH_SetMACConfig+0x88>
 800ba5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba62:	e000      	b.n	800ba66 <ETH_SetMACConfig+0x8a>
 800ba64:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800ba66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	7bdb      	ldrb	r3, [r3, #15]
 800ba6c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800ba6e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800ba74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba7c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba96:	2001      	movs	r0, #1
 800ba98:	f7ff fe1e 	bl	800b6d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	f64f 7341 	movw	r3, #65345	; 0xff41
 800bab2:	4013      	ands	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800bac2:	2a00      	cmp	r2, #0
 800bac4:	d101      	bne.n	800baca <ETH_SetMACConfig+0xee>
 800bac6:	2280      	movs	r2, #128	; 0x80
 800bac8:	e000      	b.n	800bacc <ETH_SetMACConfig+0xf0>
 800baca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bacc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800bad2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800bada:	2a01      	cmp	r2, #1
 800badc:	d101      	bne.n	800bae2 <ETH_SetMACConfig+0x106>
 800bade:	2208      	movs	r2, #8
 800bae0:	e000      	b.n	800bae4 <ETH_SetMACConfig+0x108>
 800bae2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800bae4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800baec:	2a01      	cmp	r2, #1
 800baee:	d101      	bne.n	800baf4 <ETH_SetMACConfig+0x118>
 800baf0:	2204      	movs	r2, #4
 800baf2:	e000      	b.n	800baf6 <ETH_SetMACConfig+0x11a>
 800baf4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800baf6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800bafe:	2a01      	cmp	r2, #1
 800bb00:	d101      	bne.n	800bb06 <ETH_SetMACConfig+0x12a>
 800bb02:	2202      	movs	r2, #2
 800bb04:	e000      	b.n	800bb08 <ETH_SetMACConfig+0x12c>
 800bb06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bb20:	2001      	movs	r0, #1
 800bb22:	f7ff fdd9 	bl	800b6d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	619a      	str	r2, [r3, #24]
}
 800bb2e:	bf00      	nop
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	ff20810f 	.word	0xff20810f

0800bb3c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	4b3d      	ldr	r3, [pc, #244]	; (800bc4c <ETH_SetDMAConfig+0x110>)
 800bb56:	4013      	ands	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	7b1b      	ldrb	r3, [r3, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d102      	bne.n	800bb68 <ETH_SetDMAConfig+0x2c>
 800bb62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bb66:	e000      	b.n	800bb6a <ETH_SetDMAConfig+0x2e>
 800bb68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	7b5b      	ldrb	r3, [r3, #13]
 800bb6e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bb70:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	7f52      	ldrb	r2, [r2, #29]
 800bb76:	2a00      	cmp	r2, #0
 800bb78:	d102      	bne.n	800bb80 <ETH_SetDMAConfig+0x44>
 800bb7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb7e:	e000      	b.n	800bb82 <ETH_SetDMAConfig+0x46>
 800bb80:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bb82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	7b9b      	ldrb	r3, [r3, #14]
 800bb88:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bb8a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bb90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	7f1b      	ldrb	r3, [r3, #28]
 800bb96:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800bb98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	7f9b      	ldrb	r3, [r3, #30]
 800bb9e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bba0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bba6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	f7ff fd80 	bl	800b6d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	791b      	ldrb	r3, [r3, #4]
 800bbea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bbf0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800bbf6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bbfc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc04:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800bc06:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bc0e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bc14:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	6812      	ldr	r2, [r2, #0]
 800bc1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bc22:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc30:	2001      	movs	r0, #1
 800bc32:	f7ff fd51 	bl	800b6d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc3e:	461a      	mov	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6013      	str	r3, [r2, #0]
}
 800bc44:	bf00      	nop
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	f8de3f23 	.word	0xf8de3f23

0800bc50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b0a6      	sub	sp, #152	; 0x98
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800bc64:	2300      	movs	r3, #0
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800bc74:	2300      	movs	r3, #0
 800bc76:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800bcb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bcb6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800bcb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800bcc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7ff fe86 	bl	800b9dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800bcde:	2301      	movs	r3, #1
 800bce0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800bce2:	2300      	movs	r3, #0
 800bce4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800bce6:	2300      	movs	r3, #0
 800bce8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800bcec:	2300      	movs	r3, #0
 800bcee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800bd00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bd04:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800bd06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bd0a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800bd0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd10:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800bd12:	2301      	movs	r3, #1
 800bd14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800bd20:	f107 0308 	add.w	r3, r7, #8
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7ff ff08 	bl	800bb3c <ETH_SetDMAConfig>
}
 800bd2c:	bf00      	nop
 800bd2e:	3798      	adds	r7, #152	; 0x98
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3305      	adds	r3, #5
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	3204      	adds	r2, #4
 800bd4c:	7812      	ldrb	r2, [r2, #0]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <ETH_MACAddressConfig+0x68>)
 800bd56:	4413      	add	r3, r2
 800bd58:	461a      	mov	r2, r3
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	3303      	adds	r3, #3
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	061a      	lsls	r2, r3, #24
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3302      	adds	r3, #2
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	041b      	lsls	r3, r3, #16
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3301      	adds	r3, #1
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	021b      	lsls	r3, r3, #8
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	7812      	ldrb	r2, [r2, #0]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <ETH_MACAddressConfig+0x6c>)
 800bd86:	4413      	add	r3, r2
 800bd88:	461a      	mov	r2, r3
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	6013      	str	r3, [r2, #0]
}
 800bd8e:	bf00      	nop
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	40028040 	.word	0x40028040
 800bda0:	40028044 	.word	0x40028044

0800bda4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	e03e      	b.n	800be30 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68d9      	ldr	r1, [r3, #12]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	440b      	add	r3, r1
 800bdc2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800bddc:	68b9      	ldr	r1, [r7, #8]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	3206      	adds	r2, #6
 800bde4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d80c      	bhi.n	800be14 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	68d9      	ldr	r1, [r3, #12]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	4613      	mov	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4413      	add	r3, r2
 800be08:	00db      	lsls	r3, r3, #3
 800be0a:	440b      	add	r3, r1
 800be0c:	461a      	mov	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	60da      	str	r2, [r3, #12]
 800be12:	e004      	b.n	800be1e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	461a      	mov	r2, r3
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3301      	adds	r3, #1
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b03      	cmp	r3, #3
 800be34:	d9bd      	bls.n	800bdb2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	68da      	ldr	r2, [r3, #12]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be48:	611a      	str	r2, [r3, #16]
}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800be5e:	2300      	movs	r3, #0
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	e046      	b.n	800bef2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6919      	ldr	r1, [r3, #16]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4613      	mov	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	440b      	add	r3, r1
 800be74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2200      	movs	r2, #0
 800be80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2200      	movs	r2, #0
 800be86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2200      	movs	r2, #0
 800be8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2200      	movs	r2, #0
 800be92:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2200      	movs	r2, #0
 800be98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bea0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bea8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800beb6:	68b9      	ldr	r1, [r7, #8]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	3212      	adds	r2, #18
 800bebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d80c      	bhi.n	800bee2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6919      	ldr	r1, [r3, #16]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	00db      	lsls	r3, r3, #3
 800bed8:	440b      	add	r3, r1
 800beda:	461a      	mov	r2, r3
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	60da      	str	r2, [r3, #12]
 800bee0:	e004      	b.n	800beec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	461a      	mov	r2, r3
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3301      	adds	r3, #1
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2b03      	cmp	r3, #3
 800bef6:	d9b5      	bls.n	800be64 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	691a      	ldr	r2, [r3, #16]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf22:	60da      	str	r2, [r3, #12]
}
 800bf24:	bf00      	nop
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b089      	sub	sp, #36	; 0x24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bf42:	2300      	movs	r3, #0
 800bf44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800bf46:	2300      	movs	r3, #0
 800bf48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	61fb      	str	r3, [r7, #28]
 800bf4e:	e175      	b.n	800c23c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bf50:	2201      	movs	r2, #1
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	fa02 f303 	lsl.w	r3, r2, r3
 800bf58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4013      	ands	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bf64:	693a      	ldr	r2, [r7, #16]
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	f040 8164 	bne.w	800c236 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	f003 0303 	and.w	r3, r3, #3
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d005      	beq.n	800bf86 <HAL_GPIO_Init+0x56>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f003 0303 	and.w	r3, r3, #3
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d130      	bne.n	800bfe8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	2203      	movs	r2, #3
 800bf92:	fa02 f303 	lsl.w	r3, r2, r3
 800bf96:	43db      	mvns	r3, r3
 800bf98:	69ba      	ldr	r2, [r7, #24]
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	68da      	ldr	r2, [r3, #12]
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfaa:	69ba      	ldr	r2, [r7, #24]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc4:	43db      	mvns	r3, r3
 800bfc6:	69ba      	ldr	r2, [r7, #24]
 800bfc8:	4013      	ands	r3, r2
 800bfca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	091b      	lsrs	r3, r3, #4
 800bfd2:	f003 0201 	and.w	r2, r3, #1
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfdc:	69ba      	ldr	r2, [r7, #24]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	69ba      	ldr	r2, [r7, #24]
 800bfe6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f003 0303 	and.w	r3, r3, #3
 800bff0:	2b03      	cmp	r3, #3
 800bff2:	d017      	beq.n	800c024 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	2203      	movs	r2, #3
 800c000:	fa02 f303 	lsl.w	r3, r2, r3
 800c004:	43db      	mvns	r3, r3
 800c006:	69ba      	ldr	r2, [r7, #24]
 800c008:	4013      	ands	r3, r2
 800c00a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	689a      	ldr	r2, [r3, #8]
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	fa02 f303 	lsl.w	r3, r2, r3
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	69ba      	ldr	r2, [r7, #24]
 800c022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d123      	bne.n	800c078 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	08da      	lsrs	r2, r3, #3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	3208      	adds	r2, #8
 800c038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	f003 0307 	and.w	r3, r3, #7
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	220f      	movs	r2, #15
 800c048:	fa02 f303 	lsl.w	r3, r2, r3
 800c04c:	43db      	mvns	r3, r3
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	4013      	ands	r3, r2
 800c052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	f003 0307 	and.w	r3, r3, #7
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	fa02 f303 	lsl.w	r3, r2, r3
 800c064:	69ba      	ldr	r2, [r7, #24]
 800c066:	4313      	orrs	r3, r2
 800c068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	08da      	lsrs	r2, r3, #3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3208      	adds	r2, #8
 800c072:	69b9      	ldr	r1, [r7, #24]
 800c074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	2203      	movs	r2, #3
 800c084:	fa02 f303 	lsl.w	r3, r2, r3
 800c088:	43db      	mvns	r3, r3
 800c08a:	69ba      	ldr	r2, [r7, #24]
 800c08c:	4013      	ands	r3, r2
 800c08e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	f003 0203 	and.w	r2, r3, #3
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a0:	69ba      	ldr	r2, [r7, #24]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	69ba      	ldr	r2, [r7, #24]
 800c0aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f000 80be 	beq.w	800c236 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0ba:	4b66      	ldr	r3, [pc, #408]	; (800c254 <HAL_GPIO_Init+0x324>)
 800c0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0be:	4a65      	ldr	r2, [pc, #404]	; (800c254 <HAL_GPIO_Init+0x324>)
 800c0c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0c4:	6453      	str	r3, [r2, #68]	; 0x44
 800c0c6:	4b63      	ldr	r3, [pc, #396]	; (800c254 <HAL_GPIO_Init+0x324>)
 800c0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c0d2:	4a61      	ldr	r2, [pc, #388]	; (800c258 <HAL_GPIO_Init+0x328>)
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	089b      	lsrs	r3, r3, #2
 800c0d8:	3302      	adds	r3, #2
 800c0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	220f      	movs	r2, #15
 800c0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ee:	43db      	mvns	r3, r3
 800c0f0:	69ba      	ldr	r2, [r7, #24]
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a58      	ldr	r2, [pc, #352]	; (800c25c <HAL_GPIO_Init+0x32c>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d037      	beq.n	800c16e <HAL_GPIO_Init+0x23e>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a57      	ldr	r2, [pc, #348]	; (800c260 <HAL_GPIO_Init+0x330>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d031      	beq.n	800c16a <HAL_GPIO_Init+0x23a>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a56      	ldr	r2, [pc, #344]	; (800c264 <HAL_GPIO_Init+0x334>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d02b      	beq.n	800c166 <HAL_GPIO_Init+0x236>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a55      	ldr	r2, [pc, #340]	; (800c268 <HAL_GPIO_Init+0x338>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d025      	beq.n	800c162 <HAL_GPIO_Init+0x232>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a54      	ldr	r2, [pc, #336]	; (800c26c <HAL_GPIO_Init+0x33c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d01f      	beq.n	800c15e <HAL_GPIO_Init+0x22e>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a53      	ldr	r2, [pc, #332]	; (800c270 <HAL_GPIO_Init+0x340>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d019      	beq.n	800c15a <HAL_GPIO_Init+0x22a>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a52      	ldr	r2, [pc, #328]	; (800c274 <HAL_GPIO_Init+0x344>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d013      	beq.n	800c156 <HAL_GPIO_Init+0x226>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a51      	ldr	r2, [pc, #324]	; (800c278 <HAL_GPIO_Init+0x348>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d00d      	beq.n	800c152 <HAL_GPIO_Init+0x222>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a50      	ldr	r2, [pc, #320]	; (800c27c <HAL_GPIO_Init+0x34c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d007      	beq.n	800c14e <HAL_GPIO_Init+0x21e>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a4f      	ldr	r2, [pc, #316]	; (800c280 <HAL_GPIO_Init+0x350>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d101      	bne.n	800c14a <HAL_GPIO_Init+0x21a>
 800c146:	2309      	movs	r3, #9
 800c148:	e012      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c14a:	230a      	movs	r3, #10
 800c14c:	e010      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c14e:	2308      	movs	r3, #8
 800c150:	e00e      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c152:	2307      	movs	r3, #7
 800c154:	e00c      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c156:	2306      	movs	r3, #6
 800c158:	e00a      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c15a:	2305      	movs	r3, #5
 800c15c:	e008      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c15e:	2304      	movs	r3, #4
 800c160:	e006      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c162:	2303      	movs	r3, #3
 800c164:	e004      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c166:	2302      	movs	r3, #2
 800c168:	e002      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e000      	b.n	800c170 <HAL_GPIO_Init+0x240>
 800c16e:	2300      	movs	r3, #0
 800c170:	69fa      	ldr	r2, [r7, #28]
 800c172:	f002 0203 	and.w	r2, r2, #3
 800c176:	0092      	lsls	r2, r2, #2
 800c178:	4093      	lsls	r3, r2
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c180:	4935      	ldr	r1, [pc, #212]	; (800c258 <HAL_GPIO_Init+0x328>)
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	089b      	lsrs	r3, r3, #2
 800c186:	3302      	adds	r3, #2
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c18e:	4b3d      	ldr	r3, [pc, #244]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	43db      	mvns	r3, r3
 800c198:	69ba      	ldr	r2, [r7, #24]
 800c19a:	4013      	ands	r3, r2
 800c19c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c1b2:	4a34      	ldr	r2, [pc, #208]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c1b8:	4b32      	ldr	r3, [pc, #200]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	43db      	mvns	r3, r3
 800c1c2:	69ba      	ldr	r2, [r7, #24]
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c1d4:	69ba      	ldr	r2, [r7, #24]
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c1dc:	4a29      	ldr	r2, [pc, #164]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c1e2:	4b28      	ldr	r3, [pc, #160]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	43db      	mvns	r3, r3
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	4313      	orrs	r3, r2
 800c204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c206:	4a1f      	ldr	r2, [pc, #124]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c20c:	4b1d      	ldr	r3, [pc, #116]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	43db      	mvns	r3, r3
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	4013      	ands	r3, r2
 800c21a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d003      	beq.n	800c230 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c228:	69ba      	ldr	r2, [r7, #24]
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c230:	4a14      	ldr	r2, [pc, #80]	; (800c284 <HAL_GPIO_Init+0x354>)
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	3301      	adds	r3, #1
 800c23a:	61fb      	str	r3, [r7, #28]
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	2b0f      	cmp	r3, #15
 800c240:	f67f ae86 	bls.w	800bf50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop
 800c248:	3724      	adds	r7, #36	; 0x24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	40023800 	.word	0x40023800
 800c258:	40013800 	.word	0x40013800
 800c25c:	40020000 	.word	0x40020000
 800c260:	40020400 	.word	0x40020400
 800c264:	40020800 	.word	0x40020800
 800c268:	40020c00 	.word	0x40020c00
 800c26c:	40021000 	.word	0x40021000
 800c270:	40021400 	.word	0x40021400
 800c274:	40021800 	.word	0x40021800
 800c278:	40021c00 	.word	0x40021c00
 800c27c:	40022000 	.word	0x40022000
 800c280:	40022400 	.word	0x40022400
 800c284:	40013c00 	.word	0x40013c00

0800c288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	807b      	strh	r3, [r7, #2]
 800c294:	4613      	mov	r3, r2
 800c296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c298:	787b      	ldrb	r3, [r7, #1]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c29e:	887a      	ldrh	r2, [r7, #2]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c2a4:	e003      	b.n	800c2ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c2a6:	887b      	ldrh	r3, [r7, #2]
 800c2a8:	041a      	lsls	r2, r3, #16
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	619a      	str	r2, [r3, #24]
}
 800c2ae:	bf00      	nop
 800c2b0:	370c      	adds	r7, #12
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b085      	sub	sp, #20
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c2cc:	887a      	ldrh	r2, [r7, #2]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	041a      	lsls	r2, r3, #16
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	43d9      	mvns	r1, r3
 800c2d8:	887b      	ldrh	r3, [r7, #2]
 800c2da:	400b      	ands	r3, r1
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	619a      	str	r2, [r3, #24]
}
 800c2e2:	bf00      	nop
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c2fa:	4b23      	ldr	r3, [pc, #140]	; (800c388 <HAL_PWREx_EnableOverDrive+0x98>)
 800c2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fe:	4a22      	ldr	r2, [pc, #136]	; (800c388 <HAL_PWREx_EnableOverDrive+0x98>)
 800c300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c304:	6413      	str	r3, [r2, #64]	; 0x40
 800c306:	4b20      	ldr	r3, [pc, #128]	; (800c388 <HAL_PWREx_EnableOverDrive+0x98>)
 800c308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c30e:	603b      	str	r3, [r7, #0]
 800c310:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c312:	4b1e      	ldr	r3, [pc, #120]	; (800c38c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a1d      	ldr	r2, [pc, #116]	; (800c38c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c31c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c31e:	f7ff f9cf 	bl	800b6c0 <HAL_GetTick>
 800c322:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c324:	e009      	b.n	800c33a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c326:	f7ff f9cb 	bl	800b6c0 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c334:	d901      	bls.n	800c33a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e022      	b.n	800c380 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c33a:	4b14      	ldr	r3, [pc, #80]	; (800c38c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c346:	d1ee      	bne.n	800c326 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c348:	4b10      	ldr	r3, [pc, #64]	; (800c38c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a0f      	ldr	r2, [pc, #60]	; (800c38c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c352:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c354:	f7ff f9b4 	bl	800b6c0 <HAL_GetTick>
 800c358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c35a:	e009      	b.n	800c370 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c35c:	f7ff f9b0 	bl	800b6c0 <HAL_GetTick>
 800c360:	4602      	mov	r2, r0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c36a:	d901      	bls.n	800c370 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e007      	b.n	800c380 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c370:	4b06      	ldr	r3, [pc, #24]	; (800c38c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c37c:	d1ee      	bne.n	800c35c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	40023800 	.word	0x40023800
 800c38c:	40007000 	.word	0x40007000

0800c390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c398:	2300      	movs	r3, #0
 800c39a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e291      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 8087 	beq.w	800c4c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c3b4:	4b96      	ldr	r3, [pc, #600]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	f003 030c 	and.w	r3, r3, #12
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d00c      	beq.n	800c3da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c3c0:	4b93      	ldr	r3, [pc, #588]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f003 030c 	and.w	r3, r3, #12
 800c3c8:	2b08      	cmp	r3, #8
 800c3ca:	d112      	bne.n	800c3f2 <HAL_RCC_OscConfig+0x62>
 800c3cc:	4b90      	ldr	r3, [pc, #576]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3d8:	d10b      	bne.n	800c3f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3da:	4b8d      	ldr	r3, [pc, #564]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d06c      	beq.n	800c4c0 <HAL_RCC_OscConfig+0x130>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d168      	bne.n	800c4c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e26b      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fa:	d106      	bne.n	800c40a <HAL_RCC_OscConfig+0x7a>
 800c3fc:	4b84      	ldr	r3, [pc, #528]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a83      	ldr	r2, [pc, #524]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	e02e      	b.n	800c468 <HAL_RCC_OscConfig+0xd8>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10c      	bne.n	800c42c <HAL_RCC_OscConfig+0x9c>
 800c412:	4b7f      	ldr	r3, [pc, #508]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a7e      	ldr	r2, [pc, #504]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	4b7c      	ldr	r3, [pc, #496]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a7b      	ldr	r2, [pc, #492]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	e01d      	b.n	800c468 <HAL_RCC_OscConfig+0xd8>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c434:	d10c      	bne.n	800c450 <HAL_RCC_OscConfig+0xc0>
 800c436:	4b76      	ldr	r3, [pc, #472]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a75      	ldr	r2, [pc, #468]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c43c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c440:	6013      	str	r3, [r2, #0]
 800c442:	4b73      	ldr	r3, [pc, #460]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a72      	ldr	r2, [pc, #456]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	e00b      	b.n	800c468 <HAL_RCC_OscConfig+0xd8>
 800c450:	4b6f      	ldr	r3, [pc, #444]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a6e      	ldr	r2, [pc, #440]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	4b6c      	ldr	r3, [pc, #432]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a6b      	ldr	r2, [pc, #428]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d013      	beq.n	800c498 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c470:	f7ff f926 	bl	800b6c0 <HAL_GetTick>
 800c474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c476:	e008      	b.n	800c48a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c478:	f7ff f922 	bl	800b6c0 <HAL_GetTick>
 800c47c:	4602      	mov	r2, r0
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	2b64      	cmp	r3, #100	; 0x64
 800c484:	d901      	bls.n	800c48a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c486:	2303      	movs	r3, #3
 800c488:	e21f      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c48a:	4b61      	ldr	r3, [pc, #388]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0f0      	beq.n	800c478 <HAL_RCC_OscConfig+0xe8>
 800c496:	e014      	b.n	800c4c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c498:	f7ff f912 	bl	800b6c0 <HAL_GetTick>
 800c49c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c49e:	e008      	b.n	800c4b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4a0:	f7ff f90e 	bl	800b6c0 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	2b64      	cmp	r3, #100	; 0x64
 800c4ac:	d901      	bls.n	800c4b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e20b      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c4b2:	4b57      	ldr	r3, [pc, #348]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1f0      	bne.n	800c4a0 <HAL_RCC_OscConfig+0x110>
 800c4be:	e000      	b.n	800c4c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d069      	beq.n	800c5a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c4ce:	4b50      	ldr	r3, [pc, #320]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	f003 030c 	and.w	r3, r3, #12
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00b      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4da:	4b4d      	ldr	r3, [pc, #308]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	f003 030c 	and.w	r3, r3, #12
 800c4e2:	2b08      	cmp	r3, #8
 800c4e4:	d11c      	bne.n	800c520 <HAL_RCC_OscConfig+0x190>
 800c4e6:	4b4a      	ldr	r3, [pc, #296]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d116      	bne.n	800c520 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4f2:	4b47      	ldr	r3, [pc, #284]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 0302 	and.w	r3, r3, #2
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <HAL_RCC_OscConfig+0x17a>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d001      	beq.n	800c50a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	e1df      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c50a:	4b41      	ldr	r3, [pc, #260]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	493d      	ldr	r1, [pc, #244]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c51e:	e040      	b.n	800c5a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d023      	beq.n	800c570 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c528:	4b39      	ldr	r3, [pc, #228]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a38      	ldr	r2, [pc, #224]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c52e:	f043 0301 	orr.w	r3, r3, #1
 800c532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c534:	f7ff f8c4 	bl	800b6c0 <HAL_GetTick>
 800c538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c53a:	e008      	b.n	800c54e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c53c:	f7ff f8c0 	bl	800b6c0 <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	2b02      	cmp	r3, #2
 800c548:	d901      	bls.n	800c54e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e1bd      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c54e:	4b30      	ldr	r3, [pc, #192]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0f0      	beq.n	800c53c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c55a:	4b2d      	ldr	r3, [pc, #180]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	4929      	ldr	r1, [pc, #164]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	600b      	str	r3, [r1, #0]
 800c56e:	e018      	b.n	800c5a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c570:	4b27      	ldr	r3, [pc, #156]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a26      	ldr	r2, [pc, #152]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c576:	f023 0301 	bic.w	r3, r3, #1
 800c57a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c57c:	f7ff f8a0 	bl	800b6c0 <HAL_GetTick>
 800c580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c582:	e008      	b.n	800c596 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c584:	f7ff f89c 	bl	800b6c0 <HAL_GetTick>
 800c588:	4602      	mov	r2, r0
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d901      	bls.n	800c596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e199      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c596:	4b1e      	ldr	r3, [pc, #120]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 0302 	and.w	r3, r3, #2
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1f0      	bne.n	800c584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 0308 	and.w	r3, r3, #8
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d038      	beq.n	800c620 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d019      	beq.n	800c5ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c5b6:	4b16      	ldr	r3, [pc, #88]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ba:	4a15      	ldr	r2, [pc, #84]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c5bc:	f043 0301 	orr.w	r3, r3, #1
 800c5c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5c2:	f7ff f87d 	bl	800b6c0 <HAL_GetTick>
 800c5c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5c8:	e008      	b.n	800c5dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5ca:	f7ff f879 	bl	800b6c0 <HAL_GetTick>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d901      	bls.n	800c5dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e176      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5dc:	4b0c      	ldr	r3, [pc, #48]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e0:	f003 0302 	and.w	r3, r3, #2
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0f0      	beq.n	800c5ca <HAL_RCC_OscConfig+0x23a>
 800c5e8:	e01a      	b.n	800c620 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5ea:	4b09      	ldr	r3, [pc, #36]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ee:	4a08      	ldr	r2, [pc, #32]	; (800c610 <HAL_RCC_OscConfig+0x280>)
 800c5f0:	f023 0301 	bic.w	r3, r3, #1
 800c5f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5f6:	f7ff f863 	bl	800b6c0 <HAL_GetTick>
 800c5fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5fc:	e00a      	b.n	800c614 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5fe:	f7ff f85f 	bl	800b6c0 <HAL_GetTick>
 800c602:	4602      	mov	r2, r0
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d903      	bls.n	800c614 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e15c      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
 800c610:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c614:	4b91      	ldr	r3, [pc, #580]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c618:	f003 0302 	and.w	r3, r3, #2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1ee      	bne.n	800c5fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 80a4 	beq.w	800c776 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c62e:	4b8b      	ldr	r3, [pc, #556]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10d      	bne.n	800c656 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c63a:	4b88      	ldr	r3, [pc, #544]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63e:	4a87      	ldr	r2, [pc, #540]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c644:	6413      	str	r3, [r2, #64]	; 0x40
 800c646:	4b85      	ldr	r3, [pc, #532]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c64e:	60bb      	str	r3, [r7, #8]
 800c650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c652:	2301      	movs	r3, #1
 800c654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c656:	4b82      	ldr	r3, [pc, #520]	; (800c860 <HAL_RCC_OscConfig+0x4d0>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d118      	bne.n	800c694 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c662:	4b7f      	ldr	r3, [pc, #508]	; (800c860 <HAL_RCC_OscConfig+0x4d0>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a7e      	ldr	r2, [pc, #504]	; (800c860 <HAL_RCC_OscConfig+0x4d0>)
 800c668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c66c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c66e:	f7ff f827 	bl	800b6c0 <HAL_GetTick>
 800c672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c674:	e008      	b.n	800c688 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c676:	f7ff f823 	bl	800b6c0 <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	2b64      	cmp	r3, #100	; 0x64
 800c682:	d901      	bls.n	800c688 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e120      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c688:	4b75      	ldr	r3, [pc, #468]	; (800c860 <HAL_RCC_OscConfig+0x4d0>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0f0      	beq.n	800c676 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d106      	bne.n	800c6aa <HAL_RCC_OscConfig+0x31a>
 800c69c:	4b6f      	ldr	r3, [pc, #444]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a0:	4a6e      	ldr	r2, [pc, #440]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6a2:	f043 0301 	orr.w	r3, r3, #1
 800c6a6:	6713      	str	r3, [r2, #112]	; 0x70
 800c6a8:	e02d      	b.n	800c706 <HAL_RCC_OscConfig+0x376>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10c      	bne.n	800c6cc <HAL_RCC_OscConfig+0x33c>
 800c6b2:	4b6a      	ldr	r3, [pc, #424]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b6:	4a69      	ldr	r2, [pc, #420]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6b8:	f023 0301 	bic.w	r3, r3, #1
 800c6bc:	6713      	str	r3, [r2, #112]	; 0x70
 800c6be:	4b67      	ldr	r3, [pc, #412]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c2:	4a66      	ldr	r2, [pc, #408]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6c4:	f023 0304 	bic.w	r3, r3, #4
 800c6c8:	6713      	str	r3, [r2, #112]	; 0x70
 800c6ca:	e01c      	b.n	800c706 <HAL_RCC_OscConfig+0x376>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	2b05      	cmp	r3, #5
 800c6d2:	d10c      	bne.n	800c6ee <HAL_RCC_OscConfig+0x35e>
 800c6d4:	4b61      	ldr	r3, [pc, #388]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d8:	4a60      	ldr	r2, [pc, #384]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6da:	f043 0304 	orr.w	r3, r3, #4
 800c6de:	6713      	str	r3, [r2, #112]	; 0x70
 800c6e0:	4b5e      	ldr	r3, [pc, #376]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e4:	4a5d      	ldr	r2, [pc, #372]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6e6:	f043 0301 	orr.w	r3, r3, #1
 800c6ea:	6713      	str	r3, [r2, #112]	; 0x70
 800c6ec:	e00b      	b.n	800c706 <HAL_RCC_OscConfig+0x376>
 800c6ee:	4b5b      	ldr	r3, [pc, #364]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f2:	4a5a      	ldr	r2, [pc, #360]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6f4:	f023 0301 	bic.w	r3, r3, #1
 800c6f8:	6713      	str	r3, [r2, #112]	; 0x70
 800c6fa:	4b58      	ldr	r3, [pc, #352]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6fe:	4a57      	ldr	r2, [pc, #348]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c700:	f023 0304 	bic.w	r3, r3, #4
 800c704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d015      	beq.n	800c73a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c70e:	f7fe ffd7 	bl	800b6c0 <HAL_GetTick>
 800c712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c714:	e00a      	b.n	800c72c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c716:	f7fe ffd3 	bl	800b6c0 <HAL_GetTick>
 800c71a:	4602      	mov	r2, r0
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	f241 3288 	movw	r2, #5000	; 0x1388
 800c724:	4293      	cmp	r3, r2
 800c726:	d901      	bls.n	800c72c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c728:	2303      	movs	r3, #3
 800c72a:	e0ce      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c72c:	4b4b      	ldr	r3, [pc, #300]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c730:	f003 0302 	and.w	r3, r3, #2
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0ee      	beq.n	800c716 <HAL_RCC_OscConfig+0x386>
 800c738:	e014      	b.n	800c764 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c73a:	f7fe ffc1 	bl	800b6c0 <HAL_GetTick>
 800c73e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c740:	e00a      	b.n	800c758 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c742:	f7fe ffbd 	bl	800b6c0 <HAL_GetTick>
 800c746:	4602      	mov	r2, r0
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c750:	4293      	cmp	r3, r2
 800c752:	d901      	bls.n	800c758 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e0b8      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c758:	4b40      	ldr	r3, [pc, #256]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c75c:	f003 0302 	and.w	r3, r3, #2
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1ee      	bne.n	800c742 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c764:	7dfb      	ldrb	r3, [r7, #23]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d105      	bne.n	800c776 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c76a:	4b3c      	ldr	r3, [pc, #240]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76e:	4a3b      	ldr	r2, [pc, #236]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c774:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	699b      	ldr	r3, [r3, #24]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 80a4 	beq.w	800c8c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c780:	4b36      	ldr	r3, [pc, #216]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	f003 030c 	and.w	r3, r3, #12
 800c788:	2b08      	cmp	r3, #8
 800c78a:	d06b      	beq.n	800c864 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d149      	bne.n	800c828 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c794:	4b31      	ldr	r3, [pc, #196]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a30      	ldr	r2, [pc, #192]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c79a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c79e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7a0:	f7fe ff8e 	bl	800b6c0 <HAL_GetTick>
 800c7a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7a6:	e008      	b.n	800c7ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7a8:	f7fe ff8a 	bl	800b6c0 <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d901      	bls.n	800c7ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	e087      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7ba:	4b28      	ldr	r3, [pc, #160]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1f0      	bne.n	800c7a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	69da      	ldr	r2, [r3, #28]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	431a      	orrs	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d4:	019b      	lsls	r3, r3, #6
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7dc:	085b      	lsrs	r3, r3, #1
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	041b      	lsls	r3, r3, #16
 800c7e2:	431a      	orrs	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e8:	061b      	lsls	r3, r3, #24
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	4a1b      	ldr	r2, [pc, #108]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c7ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c7f4:	4b19      	ldr	r3, [pc, #100]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a18      	ldr	r2, [pc, #96]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c7fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c800:	f7fe ff5e 	bl	800b6c0 <HAL_GetTick>
 800c804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c806:	e008      	b.n	800c81a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c808:	f7fe ff5a 	bl	800b6c0 <HAL_GetTick>
 800c80c:	4602      	mov	r2, r0
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	2b02      	cmp	r3, #2
 800c814:	d901      	bls.n	800c81a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c816:	2303      	movs	r3, #3
 800c818:	e057      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c81a:	4b10      	ldr	r3, [pc, #64]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0f0      	beq.n	800c808 <HAL_RCC_OscConfig+0x478>
 800c826:	e04f      	b.n	800c8c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c828:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a0b      	ldr	r2, [pc, #44]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c82e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c834:	f7fe ff44 	bl	800b6c0 <HAL_GetTick>
 800c838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c83a:	e008      	b.n	800c84e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c83c:	f7fe ff40 	bl	800b6c0 <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d901      	bls.n	800c84e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e03d      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c84e:	4b03      	ldr	r3, [pc, #12]	; (800c85c <HAL_RCC_OscConfig+0x4cc>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1f0      	bne.n	800c83c <HAL_RCC_OscConfig+0x4ac>
 800c85a:	e035      	b.n	800c8c8 <HAL_RCC_OscConfig+0x538>
 800c85c:	40023800 	.word	0x40023800
 800c860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c864:	4b1b      	ldr	r3, [pc, #108]	; (800c8d4 <HAL_RCC_OscConfig+0x544>)
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d028      	beq.n	800c8c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d121      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d11a      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c894:	4013      	ands	r3, r2
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c89a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d111      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8aa:	085b      	lsrs	r3, r3, #1
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d107      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d001      	beq.n	800c8c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e000      	b.n	800c8ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	40023800 	.word	0x40023800

0800c8d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e0d0      	b.n	800ca92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8f0:	4b6a      	ldr	r3, [pc, #424]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 030f 	and.w	r3, r3, #15
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d910      	bls.n	800c920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8fe:	4b67      	ldr	r3, [pc, #412]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f023 020f 	bic.w	r2, r3, #15
 800c906:	4965      	ldr	r1, [pc, #404]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c90e:	4b63      	ldr	r3, [pc, #396]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 030f 	and.w	r3, r3, #15
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d001      	beq.n	800c920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	e0b8      	b.n	800ca92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f003 0302 	and.w	r3, r3, #2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d020      	beq.n	800c96e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 0304 	and.w	r3, r3, #4
 800c934:	2b00      	cmp	r3, #0
 800c936:	d005      	beq.n	800c944 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c938:	4b59      	ldr	r3, [pc, #356]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	4a58      	ldr	r2, [pc, #352]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c93e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 0308 	and.w	r3, r3, #8
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d005      	beq.n	800c95c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c950:	4b53      	ldr	r3, [pc, #332]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	4a52      	ldr	r2, [pc, #328]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c95a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c95c:	4b50      	ldr	r3, [pc, #320]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	494d      	ldr	r1, [pc, #308]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c96a:	4313      	orrs	r3, r2
 800c96c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d040      	beq.n	800c9fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d107      	bne.n	800c992 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c982:	4b47      	ldr	r3, [pc, #284]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d115      	bne.n	800c9ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e07f      	b.n	800ca92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	2b02      	cmp	r3, #2
 800c998:	d107      	bne.n	800c9aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c99a:	4b41      	ldr	r3, [pc, #260]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d109      	bne.n	800c9ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e073      	b.n	800ca92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c9aa:	4b3d      	ldr	r3, [pc, #244]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 0302 	and.w	r3, r3, #2
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e06b      	b.n	800ca92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c9ba:	4b39      	ldr	r3, [pc, #228]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f023 0203 	bic.w	r2, r3, #3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	4936      	ldr	r1, [pc, #216]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9cc:	f7fe fe78 	bl	800b6c0 <HAL_GetTick>
 800c9d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9d2:	e00a      	b.n	800c9ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9d4:	f7fe fe74 	bl	800b6c0 <HAL_GetTick>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d901      	bls.n	800c9ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	e053      	b.n	800ca92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9ea:	4b2d      	ldr	r3, [pc, #180]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	f003 020c 	and.w	r2, r3, #12
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d1eb      	bne.n	800c9d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c9fc:	4b27      	ldr	r3, [pc, #156]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 030f 	and.w	r3, r3, #15
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d210      	bcs.n	800ca2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca0a:	4b24      	ldr	r3, [pc, #144]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f023 020f 	bic.w	r2, r3, #15
 800ca12:	4922      	ldr	r1, [pc, #136]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca1a:	4b20      	ldr	r3, [pc, #128]	; (800ca9c <HAL_RCC_ClockConfig+0x1c4>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 030f 	and.w	r3, r3, #15
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d001      	beq.n	800ca2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e032      	b.n	800ca92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0304 	and.w	r3, r3, #4
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d008      	beq.n	800ca4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca38:	4b19      	ldr	r3, [pc, #100]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	4916      	ldr	r1, [pc, #88]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800ca46:	4313      	orrs	r3, r2
 800ca48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 0308 	and.w	r3, r3, #8
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d009      	beq.n	800ca6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ca56:	4b12      	ldr	r3, [pc, #72]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	490e      	ldr	r1, [pc, #56]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca6a:	f000 f821 	bl	800cab0 <HAL_RCC_GetSysClockFreq>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	4b0b      	ldr	r3, [pc, #44]	; (800caa0 <HAL_RCC_ClockConfig+0x1c8>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	091b      	lsrs	r3, r3, #4
 800ca76:	f003 030f 	and.w	r3, r3, #15
 800ca7a:	490a      	ldr	r1, [pc, #40]	; (800caa4 <HAL_RCC_ClockConfig+0x1cc>)
 800ca7c:	5ccb      	ldrb	r3, [r1, r3]
 800ca7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca82:	4a09      	ldr	r2, [pc, #36]	; (800caa8 <HAL_RCC_ClockConfig+0x1d0>)
 800ca84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ca86:	4b09      	ldr	r3, [pc, #36]	; (800caac <HAL_RCC_ClockConfig+0x1d4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fc60 	bl	800b350 <HAL_InitTick>

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	40023c00 	.word	0x40023c00
 800caa0:	40023800 	.word	0x40023800
 800caa4:	08014510 	.word	0x08014510
 800caa8:	20000250 	.word	0x20000250
 800caac:	20000254 	.word	0x20000254

0800cab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cab4:	b094      	sub	sp, #80	; 0x50
 800cab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cab8:	2300      	movs	r3, #0
 800caba:	647b      	str	r3, [r7, #68]	; 0x44
 800cabc:	2300      	movs	r3, #0
 800cabe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cac0:	2300      	movs	r3, #0
 800cac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cac8:	4b79      	ldr	r3, [pc, #484]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	f003 030c 	and.w	r3, r3, #12
 800cad0:	2b08      	cmp	r3, #8
 800cad2:	d00d      	beq.n	800caf0 <HAL_RCC_GetSysClockFreq+0x40>
 800cad4:	2b08      	cmp	r3, #8
 800cad6:	f200 80e1 	bhi.w	800cc9c <HAL_RCC_GetSysClockFreq+0x1ec>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <HAL_RCC_GetSysClockFreq+0x34>
 800cade:	2b04      	cmp	r3, #4
 800cae0:	d003      	beq.n	800caea <HAL_RCC_GetSysClockFreq+0x3a>
 800cae2:	e0db      	b.n	800cc9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cae4:	4b73      	ldr	r3, [pc, #460]	; (800ccb4 <HAL_RCC_GetSysClockFreq+0x204>)
 800cae6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cae8:	e0db      	b.n	800cca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800caea:	4b73      	ldr	r3, [pc, #460]	; (800ccb8 <HAL_RCC_GetSysClockFreq+0x208>)
 800caec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800caee:	e0d8      	b.n	800cca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800caf0:	4b6f      	ldr	r3, [pc, #444]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800caf8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cafa:	4b6d      	ldr	r3, [pc, #436]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d063      	beq.n	800cbce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb06:	4b6a      	ldr	r3, [pc, #424]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	099b      	lsrs	r3, r3, #6
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb10:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb18:	633b      	str	r3, [r7, #48]	; 0x30
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cb22:	4622      	mov	r2, r4
 800cb24:	462b      	mov	r3, r5
 800cb26:	f04f 0000 	mov.w	r0, #0
 800cb2a:	f04f 0100 	mov.w	r1, #0
 800cb2e:	0159      	lsls	r1, r3, #5
 800cb30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cb34:	0150      	lsls	r0, r2, #5
 800cb36:	4602      	mov	r2, r0
 800cb38:	460b      	mov	r3, r1
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	1a51      	subs	r1, r2, r1
 800cb3e:	6139      	str	r1, [r7, #16]
 800cb40:	4629      	mov	r1, r5
 800cb42:	eb63 0301 	sbc.w	r3, r3, r1
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	f04f 0200 	mov.w	r2, #0
 800cb4c:	f04f 0300 	mov.w	r3, #0
 800cb50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb54:	4659      	mov	r1, fp
 800cb56:	018b      	lsls	r3, r1, #6
 800cb58:	4651      	mov	r1, sl
 800cb5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cb5e:	4651      	mov	r1, sl
 800cb60:	018a      	lsls	r2, r1, #6
 800cb62:	4651      	mov	r1, sl
 800cb64:	ebb2 0801 	subs.w	r8, r2, r1
 800cb68:	4659      	mov	r1, fp
 800cb6a:	eb63 0901 	sbc.w	r9, r3, r1
 800cb6e:	f04f 0200 	mov.w	r2, #0
 800cb72:	f04f 0300 	mov.w	r3, #0
 800cb76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb82:	4690      	mov	r8, r2
 800cb84:	4699      	mov	r9, r3
 800cb86:	4623      	mov	r3, r4
 800cb88:	eb18 0303 	adds.w	r3, r8, r3
 800cb8c:	60bb      	str	r3, [r7, #8]
 800cb8e:	462b      	mov	r3, r5
 800cb90:	eb49 0303 	adc.w	r3, r9, r3
 800cb94:	60fb      	str	r3, [r7, #12]
 800cb96:	f04f 0200 	mov.w	r2, #0
 800cb9a:	f04f 0300 	mov.w	r3, #0
 800cb9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cba2:	4629      	mov	r1, r5
 800cba4:	024b      	lsls	r3, r1, #9
 800cba6:	4621      	mov	r1, r4
 800cba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cbac:	4621      	mov	r1, r4
 800cbae:	024a      	lsls	r2, r1, #9
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cbbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbc0:	f7f4 f80c 	bl	8000bdc <__aeabi_uldivmod>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4613      	mov	r3, r2
 800cbca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbcc:	e058      	b.n	800cc80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cbce:	4b38      	ldr	r3, [pc, #224]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	099b      	lsrs	r3, r3, #6
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	4611      	mov	r1, r2
 800cbda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cbde:	623b      	str	r3, [r7, #32]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cbe8:	4642      	mov	r2, r8
 800cbea:	464b      	mov	r3, r9
 800cbec:	f04f 0000 	mov.w	r0, #0
 800cbf0:	f04f 0100 	mov.w	r1, #0
 800cbf4:	0159      	lsls	r1, r3, #5
 800cbf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cbfa:	0150      	lsls	r0, r2, #5
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4641      	mov	r1, r8
 800cc02:	ebb2 0a01 	subs.w	sl, r2, r1
 800cc06:	4649      	mov	r1, r9
 800cc08:	eb63 0b01 	sbc.w	fp, r3, r1
 800cc0c:	f04f 0200 	mov.w	r2, #0
 800cc10:	f04f 0300 	mov.w	r3, #0
 800cc14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cc18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cc1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cc20:	ebb2 040a 	subs.w	r4, r2, sl
 800cc24:	eb63 050b 	sbc.w	r5, r3, fp
 800cc28:	f04f 0200 	mov.w	r2, #0
 800cc2c:	f04f 0300 	mov.w	r3, #0
 800cc30:	00eb      	lsls	r3, r5, #3
 800cc32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc36:	00e2      	lsls	r2, r4, #3
 800cc38:	4614      	mov	r4, r2
 800cc3a:	461d      	mov	r5, r3
 800cc3c:	4643      	mov	r3, r8
 800cc3e:	18e3      	adds	r3, r4, r3
 800cc40:	603b      	str	r3, [r7, #0]
 800cc42:	464b      	mov	r3, r9
 800cc44:	eb45 0303 	adc.w	r3, r5, r3
 800cc48:	607b      	str	r3, [r7, #4]
 800cc4a:	f04f 0200 	mov.w	r2, #0
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cc56:	4629      	mov	r1, r5
 800cc58:	028b      	lsls	r3, r1, #10
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cc60:	4621      	mov	r1, r4
 800cc62:	028a      	lsls	r2, r1, #10
 800cc64:	4610      	mov	r0, r2
 800cc66:	4619      	mov	r1, r3
 800cc68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	61bb      	str	r3, [r7, #24]
 800cc6e:	61fa      	str	r2, [r7, #28]
 800cc70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc74:	f7f3 ffb2 	bl	8000bdc <__aeabi_uldivmod>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cc80:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	0c1b      	lsrs	r3, r3, #16
 800cc86:	f003 0303 	and.w	r3, r3, #3
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800cc90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc94:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cc9a:	e002      	b.n	800cca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc9c:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <HAL_RCC_GetSysClockFreq+0x204>)
 800cc9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3750      	adds	r7, #80	; 0x50
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccae:	bf00      	nop
 800ccb0:	40023800 	.word	0x40023800
 800ccb4:	00f42400 	.word	0x00f42400
 800ccb8:	007a1200 	.word	0x007a1200

0800ccbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ccc0:	4b03      	ldr	r3, [pc, #12]	; (800ccd0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	20000250 	.word	0x20000250

0800ccd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ccd8:	f7ff fff0 	bl	800ccbc <HAL_RCC_GetHCLKFreq>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	0a9b      	lsrs	r3, r3, #10
 800cce4:	f003 0307 	and.w	r3, r3, #7
 800cce8:	4903      	ldr	r1, [pc, #12]	; (800ccf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccea:	5ccb      	ldrb	r3, [r1, r3]
 800ccec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	40023800 	.word	0x40023800
 800ccf8:	08014520 	.word	0x08014520

0800ccfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cd00:	f7ff ffdc 	bl	800ccbc <HAL_RCC_GetHCLKFreq>
 800cd04:	4602      	mov	r2, r0
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	0b5b      	lsrs	r3, r3, #13
 800cd0c:	f003 0307 	and.w	r3, r3, #7
 800cd10:	4903      	ldr	r1, [pc, #12]	; (800cd20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cd12:	5ccb      	ldrb	r3, [r1, r3]
 800cd14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	40023800 	.word	0x40023800
 800cd20:	08014520 	.word	0x08014520

0800cd24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	220f      	movs	r2, #15
 800cd32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cd34:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f003 0203 	and.w	r2, r3, #3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cd40:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cd4c:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd58:	4b09      	ldr	r3, [pc, #36]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	08db      	lsrs	r3, r3, #3
 800cd5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd66:	4b07      	ldr	r3, [pc, #28]	; (800cd84 <HAL_RCC_GetClockConfig+0x60>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 020f 	and.w	r2, r3, #15
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	601a      	str	r2, [r3, #0]
}
 800cd72:	bf00      	nop
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	40023800 	.word	0x40023800
 800cd84:	40023c00 	.word	0x40023c00

0800cd88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d012      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cdb0:	4b69      	ldr	r3, [pc, #420]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	4a68      	ldr	r2, [pc, #416]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cdba:	6093      	str	r3, [r2, #8]
 800cdbc:	4b66      	ldr	r3, [pc, #408]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdbe:	689a      	ldr	r2, [r3, #8]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc4:	4964      	ldr	r1, [pc, #400]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d101      	bne.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d017      	beq.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cde2:	4b5d      	ldr	r3, [pc, #372]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cde4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cde8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf0:	4959      	ldr	r1, [pc, #356]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce00:	d101      	bne.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ce02:	2301      	movs	r3, #1
 800ce04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d017      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ce1e:	4b4e      	ldr	r3, [pc, #312]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2c:	494a      	ldr	r1, [pc, #296]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce3c:	d101      	bne.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 0320 	and.w	r3, r3, #32
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 808b 	beq.w	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce6c:	4b3a      	ldr	r3, [pc, #232]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce70:	4a39      	ldr	r2, [pc, #228]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce76:	6413      	str	r3, [r2, #64]	; 0x40
 800ce78:	4b37      	ldr	r3, [pc, #220]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce80:	60bb      	str	r3, [r7, #8]
 800ce82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce84:	4b35      	ldr	r3, [pc, #212]	; (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a34      	ldr	r2, [pc, #208]	; (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce90:	f7fe fc16 	bl	800b6c0 <HAL_GetTick>
 800ce94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce96:	e008      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce98:	f7fe fc12 	bl	800b6c0 <HAL_GetTick>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	2b64      	cmp	r3, #100	; 0x64
 800cea4:	d901      	bls.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e357      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ceaa:	4b2c      	ldr	r3, [pc, #176]	; (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0f0      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ceb6:	4b28      	ldr	r3, [pc, #160]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d035      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d02e      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ced4:	4b20      	ldr	r3, [pc, #128]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ced6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cedc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cede:	4b1e      	ldr	r3, [pc, #120]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee2:	4a1d      	ldr	r2, [pc, #116]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cee8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ceea:	4b1b      	ldr	r3, [pc, #108]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceee:	4a1a      	ldr	r2, [pc, #104]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cef6:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cefc:	4b16      	ldr	r3, [pc, #88]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cefe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf00:	f003 0301 	and.w	r3, r3, #1
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d114      	bne.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf08:	f7fe fbda 	bl	800b6c0 <HAL_GetTick>
 800cf0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf0e:	e00a      	b.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf10:	f7fe fbd6 	bl	800b6c0 <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d901      	bls.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cf22:	2303      	movs	r3, #3
 800cf24:	e319      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf26:	4b0c      	ldr	r3, [pc, #48]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf2a:	f003 0302 	and.w	r3, r3, #2
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0ee      	beq.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf3e:	d111      	bne.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cf4e:	400b      	ands	r3, r1
 800cf50:	4901      	ldr	r1, [pc, #4]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	608b      	str	r3, [r1, #8]
 800cf56:	e00b      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cf58:	40023800 	.word	0x40023800
 800cf5c:	40007000 	.word	0x40007000
 800cf60:	0ffffcff 	.word	0x0ffffcff
 800cf64:	4baa      	ldr	r3, [pc, #680]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	4aa9      	ldr	r2, [pc, #676]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cf6e:	6093      	str	r3, [r2, #8]
 800cf70:	4ba7      	ldr	r3, [pc, #668]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf7c:	49a4      	ldr	r1, [pc, #656]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f003 0310 	and.w	r3, r3, #16
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d010      	beq.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf8e:	4ba0      	ldr	r3, [pc, #640]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf94:	4a9e      	ldr	r2, [pc, #632]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cf9e:	4b9c      	ldr	r3, [pc, #624]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa8:	4999      	ldr	r1, [pc, #612]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00a      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cfbc:	4b94      	ldr	r3, [pc, #592]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfca:	4991      	ldr	r1, [pc, #580]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cfde:	4b8c      	ldr	r3, [pc, #560]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfec:	4988      	ldr	r1, [pc, #544]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfee:	4313      	orrs	r3, r2
 800cff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00a      	beq.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d000:	4b83      	ldr	r3, [pc, #524]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d00e:	4980      	ldr	r1, [pc, #512]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d010:	4313      	orrs	r3, r2
 800d012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00a      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d022:	4b7b      	ldr	r3, [pc, #492]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d030:	4977      	ldr	r1, [pc, #476]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d032:	4313      	orrs	r3, r2
 800d034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00a      	beq.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d044:	4b72      	ldr	r3, [pc, #456]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d04a:	f023 0203 	bic.w	r2, r3, #3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d052:	496f      	ldr	r1, [pc, #444]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d054:	4313      	orrs	r3, r2
 800d056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d066:	4b6a      	ldr	r3, [pc, #424]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d06c:	f023 020c 	bic.w	r2, r3, #12
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d074:	4966      	ldr	r1, [pc, #408]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d076:	4313      	orrs	r3, r2
 800d078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00a      	beq.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d088:	4b61      	ldr	r3, [pc, #388]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d08e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d096:	495e      	ldr	r1, [pc, #376]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d098:	4313      	orrs	r3, r2
 800d09a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d0aa:	4b59      	ldr	r3, [pc, #356]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b8:	4955      	ldr	r1, [pc, #340]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00a      	beq.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d0cc:	4b50      	ldr	r3, [pc, #320]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0da:	494d      	ldr	r1, [pc, #308]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00a      	beq.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d0ee:	4b48      	ldr	r3, [pc, #288]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0fc:	4944      	ldr	r1, [pc, #272]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0fe:	4313      	orrs	r3, r2
 800d100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00a      	beq.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d110:	4b3f      	ldr	r3, [pc, #252]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d11e:	493c      	ldr	r1, [pc, #240]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d120:	4313      	orrs	r3, r2
 800d122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00a      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d132:	4b37      	ldr	r3, [pc, #220]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d140:	4933      	ldr	r1, [pc, #204]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d142:	4313      	orrs	r3, r2
 800d144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00a      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d154:	4b2e      	ldr	r3, [pc, #184]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d15a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d162:	492b      	ldr	r1, [pc, #172]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d164:	4313      	orrs	r3, r2
 800d166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d011      	beq.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d176:	4b26      	ldr	r3, [pc, #152]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d17c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d184:	4922      	ldr	r1, [pc, #136]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d186:	4313      	orrs	r3, r2
 800d188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d194:	d101      	bne.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d196:	2301      	movs	r3, #1
 800d198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 0308 	and.w	r3, r3, #8
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00a      	beq.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d1b6:	4b16      	ldr	r3, [pc, #88]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1c4:	4912      	ldr	r1, [pc, #72]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00b      	beq.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d1d8:	4b0d      	ldr	r3, [pc, #52]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1e8:	4909      	ldr	r1, [pc, #36]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d006      	beq.n	800d204 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 80d9 	beq.w	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d204:	4b02      	ldr	r3, [pc, #8]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a01      	ldr	r2, [pc, #4]	; (800d210 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d20a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d20e:	e001      	b.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d210:	40023800 	.word	0x40023800
 800d214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d216:	f7fe fa53 	bl	800b6c0 <HAL_GetTick>
 800d21a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d21c:	e008      	b.n	800d230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d21e:	f7fe fa4f 	bl	800b6c0 <HAL_GetTick>
 800d222:	4602      	mov	r2, r0
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	1ad3      	subs	r3, r2, r3
 800d228:	2b64      	cmp	r3, #100	; 0x64
 800d22a:	d901      	bls.n	800d230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d22c:	2303      	movs	r3, #3
 800d22e:	e194      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d230:	4b6c      	ldr	r3, [pc, #432]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1f0      	bne.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	2b00      	cmp	r3, #0
 800d246:	d021      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d11d      	bne.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d250:	4b64      	ldr	r3, [pc, #400]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d256:	0c1b      	lsrs	r3, r3, #16
 800d258:	f003 0303 	and.w	r3, r3, #3
 800d25c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d25e:	4b61      	ldr	r3, [pc, #388]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d264:	0e1b      	lsrs	r3, r3, #24
 800d266:	f003 030f 	and.w	r3, r3, #15
 800d26a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	019a      	lsls	r2, r3, #6
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	041b      	lsls	r3, r3, #16
 800d276:	431a      	orrs	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	061b      	lsls	r3, r3, #24
 800d27c:	431a      	orrs	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	071b      	lsls	r3, r3, #28
 800d284:	4957      	ldr	r1, [pc, #348]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d286:	4313      	orrs	r3, r2
 800d288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d004      	beq.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d29c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2a0:	d00a      	beq.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d02e      	beq.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2b6:	d129      	bne.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d2b8:	4b4a      	ldr	r3, [pc, #296]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2be:	0c1b      	lsrs	r3, r3, #16
 800d2c0:	f003 0303 	and.w	r3, r3, #3
 800d2c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d2c6:	4b47      	ldr	r3, [pc, #284]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2cc:	0f1b      	lsrs	r3, r3, #28
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	019a      	lsls	r2, r3, #6
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	041b      	lsls	r3, r3, #16
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	061b      	lsls	r3, r3, #24
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	071b      	lsls	r3, r3, #28
 800d2ec:	493d      	ldr	r1, [pc, #244]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d2f4:	4b3b      	ldr	r3, [pc, #236]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2fa:	f023 021f 	bic.w	r2, r3, #31
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d302:	3b01      	subs	r3, #1
 800d304:	4937      	ldr	r1, [pc, #220]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d306:	4313      	orrs	r3, r2
 800d308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01d      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d318:	4b32      	ldr	r3, [pc, #200]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d31a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d31e:	0e1b      	lsrs	r3, r3, #24
 800d320:	f003 030f 	and.w	r3, r3, #15
 800d324:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d326:	4b2f      	ldr	r3, [pc, #188]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d32c:	0f1b      	lsrs	r3, r3, #28
 800d32e:	f003 0307 	and.w	r3, r3, #7
 800d332:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	019a      	lsls	r2, r3, #6
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	041b      	lsls	r3, r3, #16
 800d340:	431a      	orrs	r2, r3
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	061b      	lsls	r3, r3, #24
 800d346:	431a      	orrs	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	071b      	lsls	r3, r3, #28
 800d34c:	4925      	ldr	r1, [pc, #148]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d34e:	4313      	orrs	r3, r2
 800d350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d011      	beq.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	019a      	lsls	r2, r3, #6
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	041b      	lsls	r3, r3, #16
 800d36c:	431a      	orrs	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	061b      	lsls	r3, r3, #24
 800d374:	431a      	orrs	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	071b      	lsls	r3, r3, #28
 800d37c:	4919      	ldr	r1, [pc, #100]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d37e:	4313      	orrs	r3, r2
 800d380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d384:	4b17      	ldr	r3, [pc, #92]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a16      	ldr	r2, [pc, #88]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d38a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d38e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d390:	f7fe f996 	bl	800b6c0 <HAL_GetTick>
 800d394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d396:	e008      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d398:	f7fe f992 	bl	800b6c0 <HAL_GetTick>
 800d39c:	4602      	mov	r2, r0
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	2b64      	cmp	r3, #100	; 0x64
 800d3a4:	d901      	bls.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	e0d7      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d3aa:	4b0e      	ldr	r3, [pc, #56]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d0f0      	beq.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	f040 80cd 	bne.w	800d558 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d3be:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a08      	ldr	r2, [pc, #32]	; (800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d3c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3ca:	f7fe f979 	bl	800b6c0 <HAL_GetTick>
 800d3ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3d0:	e00a      	b.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d3d2:	f7fe f975 	bl	800b6c0 <HAL_GetTick>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	2b64      	cmp	r3, #100	; 0x64
 800d3de:	d903      	bls.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	e0ba      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d3e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3e8:	4b5e      	ldr	r3, [pc, #376]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3f4:	d0ed      	beq.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d009      	beq.n	800d41e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d412:	2b00      	cmp	r3, #0
 800d414:	d02e      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d12a      	bne.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d41e:	4b51      	ldr	r3, [pc, #324]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d424:	0c1b      	lsrs	r3, r3, #16
 800d426:	f003 0303 	and.w	r3, r3, #3
 800d42a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d42c:	4b4d      	ldr	r3, [pc, #308]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d432:	0f1b      	lsrs	r3, r3, #28
 800d434:	f003 0307 	and.w	r3, r3, #7
 800d438:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	019a      	lsls	r2, r3, #6
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	041b      	lsls	r3, r3, #16
 800d444:	431a      	orrs	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	061b      	lsls	r3, r3, #24
 800d44c:	431a      	orrs	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	071b      	lsls	r3, r3, #28
 800d452:	4944      	ldr	r1, [pc, #272]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d454:	4313      	orrs	r3, r2
 800d456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d45a:	4b42      	ldr	r3, [pc, #264]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d45c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d460:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d468:	3b01      	subs	r3, #1
 800d46a:	021b      	lsls	r3, r3, #8
 800d46c:	493d      	ldr	r1, [pc, #244]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d46e:	4313      	orrs	r3, r2
 800d470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d022      	beq.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d488:	d11d      	bne.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d48a:	4b36      	ldr	r3, [pc, #216]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d490:	0e1b      	lsrs	r3, r3, #24
 800d492:	f003 030f 	and.w	r3, r3, #15
 800d496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d498:	4b32      	ldr	r3, [pc, #200]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d49e:	0f1b      	lsrs	r3, r3, #28
 800d4a0:	f003 0307 	and.w	r3, r3, #7
 800d4a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	019a      	lsls	r2, r3, #6
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a1b      	ldr	r3, [r3, #32]
 800d4b0:	041b      	lsls	r3, r3, #16
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	061b      	lsls	r3, r3, #24
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	071b      	lsls	r3, r3, #28
 800d4be:	4929      	ldr	r1, [pc, #164]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f003 0308 	and.w	r3, r3, #8
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d028      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d4d2:	4b24      	ldr	r3, [pc, #144]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4d8:	0e1b      	lsrs	r3, r3, #24
 800d4da:	f003 030f 	and.w	r3, r3, #15
 800d4de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d4e0:	4b20      	ldr	r3, [pc, #128]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4e6:	0c1b      	lsrs	r3, r3, #16
 800d4e8:	f003 0303 	and.w	r3, r3, #3
 800d4ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	019a      	lsls	r2, r3, #6
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	041b      	lsls	r3, r3, #16
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	061b      	lsls	r3, r3, #24
 800d4fe:	431a      	orrs	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	69db      	ldr	r3, [r3, #28]
 800d504:	071b      	lsls	r3, r3, #28
 800d506:	4917      	ldr	r1, [pc, #92]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d508:	4313      	orrs	r3, r2
 800d50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d50e:	4b15      	ldr	r3, [pc, #84]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	4911      	ldr	r1, [pc, #68]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d51e:	4313      	orrs	r3, r2
 800d520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d524:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a0e      	ldr	r2, [pc, #56]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d52a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d52e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d530:	f7fe f8c6 	bl	800b6c0 <HAL_GetTick>
 800d534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d536:	e008      	b.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d538:	f7fe f8c2 	bl	800b6c0 <HAL_GetTick>
 800d53c:	4602      	mov	r2, r0
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	2b64      	cmp	r3, #100	; 0x64
 800d544:	d901      	bls.n	800d54a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e007      	b.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d54a:	4b06      	ldr	r3, [pc, #24]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d556:	d1ef      	bne.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	40023800 	.word	0x40023800

0800d568 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d101      	bne.n	800d57a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d576:	2301      	movs	r3, #1
 800d578:	e01c      	b.n	800d5b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	795b      	ldrb	r3, [r3, #5]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d105      	bne.n	800d590 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7fd fe4c 	bl	800b228 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2202      	movs	r2, #2
 800d594:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f042 0204 	orr.w	r2, r2, #4
 800d5a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d101      	bne.n	800d5d6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	e044      	b.n	800d660 <HAL_RNG_GenerateRandomNumber+0xa4>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	795b      	ldrb	r3, [r3, #5]
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d133      	bne.n	800d64e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d5ec:	f7fe f868 	bl	800b6c0 <HAL_GetTick>
 800d5f0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d5f2:	e018      	b.n	800d626 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d5f4:	f7fe f864 	bl	800b6c0 <HAL_GetTick>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d911      	bls.n	800d626 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d00a      	beq.n	800d626 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2201      	movs	r2, #1
 800d614:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2202      	movs	r2, #2
 800d61a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	e01c      	b.n	800d660 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	f003 0301 	and.w	r3, r3, #1
 800d630:	2b01      	cmp	r3, #1
 800d632:	d1df      	bne.n	800d5f4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689a      	ldr	r2, [r3, #8]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68da      	ldr	r2, [r3, #12]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	715a      	strb	r2, [r3, #5]
 800d64c:	e004      	b.n	800d658 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2204      	movs	r2, #4
 800d652:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	711a      	strb	r2, [r3, #4]

  return status;
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e049      	b.n	800d70e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d680:	b2db      	uxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d106      	bne.n	800d694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 f841 	bl	800d716 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	f000 fa00 	bl	800daac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d71e:	bf00      	nop
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d001      	beq.n	800d744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e054      	b.n	800d7ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2202      	movs	r2, #2
 800d748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68da      	ldr	r2, [r3, #12]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f042 0201 	orr.w	r2, r2, #1
 800d75a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a26      	ldr	r2, [pc, #152]	; (800d7fc <HAL_TIM_Base_Start_IT+0xd0>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d022      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x80>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d76e:	d01d      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x80>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a22      	ldr	r2, [pc, #136]	; (800d800 <HAL_TIM_Base_Start_IT+0xd4>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d018      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x80>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a21      	ldr	r2, [pc, #132]	; (800d804 <HAL_TIM_Base_Start_IT+0xd8>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d013      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x80>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a1f      	ldr	r2, [pc, #124]	; (800d808 <HAL_TIM_Base_Start_IT+0xdc>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d00e      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x80>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a1e      	ldr	r2, [pc, #120]	; (800d80c <HAL_TIM_Base_Start_IT+0xe0>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d009      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x80>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a1c      	ldr	r2, [pc, #112]	; (800d810 <HAL_TIM_Base_Start_IT+0xe4>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d004      	beq.n	800d7ac <HAL_TIM_Base_Start_IT+0x80>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a1b      	ldr	r2, [pc, #108]	; (800d814 <HAL_TIM_Base_Start_IT+0xe8>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d115      	bne.n	800d7d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	689a      	ldr	r2, [r3, #8]
 800d7b2:	4b19      	ldr	r3, [pc, #100]	; (800d818 <HAL_TIM_Base_Start_IT+0xec>)
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b06      	cmp	r3, #6
 800d7bc:	d015      	beq.n	800d7ea <HAL_TIM_Base_Start_IT+0xbe>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7c4:	d011      	beq.n	800d7ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f042 0201 	orr.w	r2, r2, #1
 800d7d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7d6:	e008      	b.n	800d7ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f042 0201 	orr.w	r2, r2, #1
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	e000      	b.n	800d7ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	40010000 	.word	0x40010000
 800d800:	40000400 	.word	0x40000400
 800d804:	40000800 	.word	0x40000800
 800d808:	40000c00 	.word	0x40000c00
 800d80c:	40010400 	.word	0x40010400
 800d810:	40014000 	.word	0x40014000
 800d814:	40001800 	.word	0x40001800
 800d818:	00010007 	.word	0x00010007

0800d81c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	f003 0302 	and.w	r3, r3, #2
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d122      	bne.n	800d878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	f003 0302 	and.w	r3, r3, #2
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d11b      	bne.n	800d878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f06f 0202 	mvn.w	r2, #2
 800d848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	f003 0303 	and.w	r3, r3, #3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d003      	beq.n	800d866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f905 	bl	800da6e <HAL_TIM_IC_CaptureCallback>
 800d864:	e005      	b.n	800d872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 f8f7 	bl	800da5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f908 	bl	800da82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	f003 0304 	and.w	r3, r3, #4
 800d882:	2b04      	cmp	r3, #4
 800d884:	d122      	bne.n	800d8cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	f003 0304 	and.w	r3, r3, #4
 800d890:	2b04      	cmp	r3, #4
 800d892:	d11b      	bne.n	800d8cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f06f 0204 	mvn.w	r2, #4
 800d89c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2202      	movs	r2, #2
 800d8a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f8db 	bl	800da6e <HAL_TIM_IC_CaptureCallback>
 800d8b8:	e005      	b.n	800d8c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f8cd 	bl	800da5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f8de 	bl	800da82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	f003 0308 	and.w	r3, r3, #8
 800d8d6:	2b08      	cmp	r3, #8
 800d8d8:	d122      	bne.n	800d920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	f003 0308 	and.w	r3, r3, #8
 800d8e4:	2b08      	cmp	r3, #8
 800d8e6:	d11b      	bne.n	800d920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f06f 0208 	mvn.w	r2, #8
 800d8f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2204      	movs	r2, #4
 800d8f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	69db      	ldr	r3, [r3, #28]
 800d8fe:	f003 0303 	and.w	r3, r3, #3
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f8b1 	bl	800da6e <HAL_TIM_IC_CaptureCallback>
 800d90c:	e005      	b.n	800d91a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 f8a3 	bl	800da5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f8b4 	bl	800da82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	f003 0310 	and.w	r3, r3, #16
 800d92a:	2b10      	cmp	r3, #16
 800d92c:	d122      	bne.n	800d974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	f003 0310 	and.w	r3, r3, #16
 800d938:	2b10      	cmp	r3, #16
 800d93a:	d11b      	bne.n	800d974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f06f 0210 	mvn.w	r2, #16
 800d944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2208      	movs	r2, #8
 800d94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	69db      	ldr	r3, [r3, #28]
 800d952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 f887 	bl	800da6e <HAL_TIM_IC_CaptureCallback>
 800d960:	e005      	b.n	800d96e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f879 	bl	800da5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f88a 	bl	800da82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	f003 0301 	and.w	r3, r3, #1
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d10e      	bne.n	800d9a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	f003 0301 	and.w	r3, r3, #1
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d107      	bne.n	800d9a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f06f 0201 	mvn.w	r2, #1
 800d998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7f3 fc98 	bl	80012d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9aa:	2b80      	cmp	r3, #128	; 0x80
 800d9ac:	d10e      	bne.n	800d9cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9b8:	2b80      	cmp	r3, #128	; 0x80
 800d9ba:	d107      	bne.n	800d9cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d9c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f91a 	bl	800dc00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9da:	d10e      	bne.n	800d9fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9e6:	2b80      	cmp	r3, #128	; 0x80
 800d9e8:	d107      	bne.n	800d9fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d9f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f90d 	bl	800dc14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da04:	2b40      	cmp	r3, #64	; 0x40
 800da06:	d10e      	bne.n	800da26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da12:	2b40      	cmp	r3, #64	; 0x40
 800da14:	d107      	bne.n	800da26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f838 	bl	800da96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	f003 0320 	and.w	r3, r3, #32
 800da30:	2b20      	cmp	r3, #32
 800da32:	d10e      	bne.n	800da52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	f003 0320 	and.w	r3, r3, #32
 800da3e:	2b20      	cmp	r3, #32
 800da40:	d107      	bne.n	800da52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f06f 0220 	mvn.w	r2, #32
 800da4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f8cd 	bl	800dbec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da5a:	b480      	push	{r7}
 800da5c:	b083      	sub	sp, #12
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da62:	bf00      	nop
 800da64:	370c      	adds	r7, #12
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da6e:	b480      	push	{r7}
 800da70:	b083      	sub	sp, #12
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da76:	bf00      	nop
 800da78:	370c      	adds	r7, #12
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr

0800da82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da82:	b480      	push	{r7}
 800da84:	b083      	sub	sp, #12
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da8a:	bf00      	nop
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da96:	b480      	push	{r7}
 800da98:	b083      	sub	sp, #12
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da9e:	bf00      	nop
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr
	...

0800daac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a40      	ldr	r2, [pc, #256]	; (800dbc0 <TIM_Base_SetConfig+0x114>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d013      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daca:	d00f      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a3d      	ldr	r2, [pc, #244]	; (800dbc4 <TIM_Base_SetConfig+0x118>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d00b      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a3c      	ldr	r2, [pc, #240]	; (800dbc8 <TIM_Base_SetConfig+0x11c>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d007      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a3b      	ldr	r2, [pc, #236]	; (800dbcc <TIM_Base_SetConfig+0x120>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d003      	beq.n	800daec <TIM_Base_SetConfig+0x40>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a3a      	ldr	r2, [pc, #232]	; (800dbd0 <TIM_Base_SetConfig+0x124>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d108      	bne.n	800dafe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a2f      	ldr	r2, [pc, #188]	; (800dbc0 <TIM_Base_SetConfig+0x114>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d02b      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db0c:	d027      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a2c      	ldr	r2, [pc, #176]	; (800dbc4 <TIM_Base_SetConfig+0x118>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d023      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a2b      	ldr	r2, [pc, #172]	; (800dbc8 <TIM_Base_SetConfig+0x11c>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d01f      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a2a      	ldr	r2, [pc, #168]	; (800dbcc <TIM_Base_SetConfig+0x120>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d01b      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a29      	ldr	r2, [pc, #164]	; (800dbd0 <TIM_Base_SetConfig+0x124>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d017      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a28      	ldr	r2, [pc, #160]	; (800dbd4 <TIM_Base_SetConfig+0x128>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d013      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a27      	ldr	r2, [pc, #156]	; (800dbd8 <TIM_Base_SetConfig+0x12c>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d00f      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a26      	ldr	r2, [pc, #152]	; (800dbdc <TIM_Base_SetConfig+0x130>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d00b      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a25      	ldr	r2, [pc, #148]	; (800dbe0 <TIM_Base_SetConfig+0x134>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d007      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4a24      	ldr	r2, [pc, #144]	; (800dbe4 <TIM_Base_SetConfig+0x138>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d003      	beq.n	800db5e <TIM_Base_SetConfig+0xb2>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	4a23      	ldr	r2, [pc, #140]	; (800dbe8 <TIM_Base_SetConfig+0x13c>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d108      	bne.n	800db70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	689a      	ldr	r2, [r3, #8]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a0a      	ldr	r2, [pc, #40]	; (800dbc0 <TIM_Base_SetConfig+0x114>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d003      	beq.n	800dba4 <TIM_Base_SetConfig+0xf8>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a0c      	ldr	r2, [pc, #48]	; (800dbd0 <TIM_Base_SetConfig+0x124>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d103      	bne.n	800dbac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	691a      	ldr	r2, [r3, #16]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	615a      	str	r2, [r3, #20]
}
 800dbb2:	bf00      	nop
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	40010000 	.word	0x40010000
 800dbc4:	40000400 	.word	0x40000400
 800dbc8:	40000800 	.word	0x40000800
 800dbcc:	40000c00 	.word	0x40000c00
 800dbd0:	40010400 	.word	0x40010400
 800dbd4:	40014000 	.word	0x40014000
 800dbd8:	40014400 	.word	0x40014400
 800dbdc:	40014800 	.word	0x40014800
 800dbe0:	40001800 	.word	0x40001800
 800dbe4:	40001c00 	.word	0x40001c00
 800dbe8:	40002000 	.word	0x40002000

0800dbec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dbf4:	bf00      	nop
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d101      	bne.n	800dc3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e040      	b.n	800dcbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d106      	bne.n	800dc50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7fd fb20 	bl	800b290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2224      	movs	r2, #36	; 0x24
 800dc54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f022 0201 	bic.w	r2, r2, #1
 800dc64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f8b0 	bl	800ddcc <UART_SetConfig>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d101      	bne.n	800dc76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e022      	b.n	800dcbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fb08 	bl	800e294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	685a      	ldr	r2, [r3, #4]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f042 0201 	orr.w	r2, r2, #1
 800dcb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fb8f 	bl	800e3d8 <UART_CheckIdleState>
 800dcba:	4603      	mov	r3, r0
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08a      	sub	sp, #40	; 0x28
 800dcc8:	af02      	add	r7, sp, #8
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	603b      	str	r3, [r7, #0]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcd8:	2b20      	cmp	r3, #32
 800dcda:	d171      	bne.n	800ddc0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <HAL_UART_Transmit+0x24>
 800dce2:	88fb      	ldrh	r3, [r7, #6]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d101      	bne.n	800dcec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e06a      	b.n	800ddc2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2221      	movs	r2, #33	; 0x21
 800dcf8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dcfa:	f7fd fce1 	bl	800b6c0 <HAL_GetTick>
 800dcfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	88fa      	ldrh	r2, [r7, #6]
 800dd04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	88fa      	ldrh	r2, [r7, #6]
 800dd0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd18:	d108      	bne.n	800dd2c <HAL_UART_Transmit+0x68>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d104      	bne.n	800dd2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800dd22:	2300      	movs	r3, #0
 800dd24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	61bb      	str	r3, [r7, #24]
 800dd2a:	e003      	b.n	800dd34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dd30:	2300      	movs	r3, #0
 800dd32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dd34:	e02c      	b.n	800dd90 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2180      	movs	r1, #128	; 0x80
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f000 fb80 	bl	800e446 <UART_WaitOnFlagUntilTimeout>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	e038      	b.n	800ddc2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10b      	bne.n	800dd6e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	881b      	ldrh	r3, [r3, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	3302      	adds	r3, #2
 800dd6a:	61bb      	str	r3, [r7, #24]
 800dd6c:	e007      	b.n	800dd7e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	781a      	ldrb	r2, [r3, #0]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	3b01      	subs	r3, #1
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1cc      	bne.n	800dd36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	2200      	movs	r2, #0
 800dda4:	2140      	movs	r1, #64	; 0x40
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 fb4d 	bl	800e446 <UART_WaitOnFlagUntilTimeout>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800ddb2:	2303      	movs	r3, #3
 800ddb4:	e005      	b.n	800ddc2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2220      	movs	r2, #32
 800ddba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e000      	b.n	800ddc2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ddc0:	2302      	movs	r3, #2
  }
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3720      	adds	r7, #32
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
	...

0800ddcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	689a      	ldr	r2, [r3, #8]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	691b      	ldr	r3, [r3, #16]
 800dde0:	431a      	orrs	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	431a      	orrs	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	4ba6      	ldr	r3, [pc, #664]	; (800e090 <UART_SetConfig+0x2c4>)
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	6812      	ldr	r2, [r2, #0]
 800ddfe:	6979      	ldr	r1, [r7, #20]
 800de00:	430b      	orrs	r3, r1
 800de02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	68da      	ldr	r2, [r3, #12]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	430a      	orrs	r2, r1
 800de18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	4313      	orrs	r3, r2
 800de28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	697a      	ldr	r2, [r7, #20]
 800de3a:	430a      	orrs	r2, r1
 800de3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a94      	ldr	r2, [pc, #592]	; (800e094 <UART_SetConfig+0x2c8>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d120      	bne.n	800de8a <UART_SetConfig+0xbe>
 800de48:	4b93      	ldr	r3, [pc, #588]	; (800e098 <UART_SetConfig+0x2cc>)
 800de4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de4e:	f003 0303 	and.w	r3, r3, #3
 800de52:	2b03      	cmp	r3, #3
 800de54:	d816      	bhi.n	800de84 <UART_SetConfig+0xb8>
 800de56:	a201      	add	r2, pc, #4	; (adr r2, 800de5c <UART_SetConfig+0x90>)
 800de58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de5c:	0800de6d 	.word	0x0800de6d
 800de60:	0800de79 	.word	0x0800de79
 800de64:	0800de73 	.word	0x0800de73
 800de68:	0800de7f 	.word	0x0800de7f
 800de6c:	2301      	movs	r3, #1
 800de6e:	77fb      	strb	r3, [r7, #31]
 800de70:	e150      	b.n	800e114 <UART_SetConfig+0x348>
 800de72:	2302      	movs	r3, #2
 800de74:	77fb      	strb	r3, [r7, #31]
 800de76:	e14d      	b.n	800e114 <UART_SetConfig+0x348>
 800de78:	2304      	movs	r3, #4
 800de7a:	77fb      	strb	r3, [r7, #31]
 800de7c:	e14a      	b.n	800e114 <UART_SetConfig+0x348>
 800de7e:	2308      	movs	r3, #8
 800de80:	77fb      	strb	r3, [r7, #31]
 800de82:	e147      	b.n	800e114 <UART_SetConfig+0x348>
 800de84:	2310      	movs	r3, #16
 800de86:	77fb      	strb	r3, [r7, #31]
 800de88:	e144      	b.n	800e114 <UART_SetConfig+0x348>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a83      	ldr	r2, [pc, #524]	; (800e09c <UART_SetConfig+0x2d0>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d132      	bne.n	800defa <UART_SetConfig+0x12e>
 800de94:	4b80      	ldr	r3, [pc, #512]	; (800e098 <UART_SetConfig+0x2cc>)
 800de96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de9a:	f003 030c 	and.w	r3, r3, #12
 800de9e:	2b0c      	cmp	r3, #12
 800dea0:	d828      	bhi.n	800def4 <UART_SetConfig+0x128>
 800dea2:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <UART_SetConfig+0xdc>)
 800dea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea8:	0800dedd 	.word	0x0800dedd
 800deac:	0800def5 	.word	0x0800def5
 800deb0:	0800def5 	.word	0x0800def5
 800deb4:	0800def5 	.word	0x0800def5
 800deb8:	0800dee9 	.word	0x0800dee9
 800debc:	0800def5 	.word	0x0800def5
 800dec0:	0800def5 	.word	0x0800def5
 800dec4:	0800def5 	.word	0x0800def5
 800dec8:	0800dee3 	.word	0x0800dee3
 800decc:	0800def5 	.word	0x0800def5
 800ded0:	0800def5 	.word	0x0800def5
 800ded4:	0800def5 	.word	0x0800def5
 800ded8:	0800deef 	.word	0x0800deef
 800dedc:	2300      	movs	r3, #0
 800dede:	77fb      	strb	r3, [r7, #31]
 800dee0:	e118      	b.n	800e114 <UART_SetConfig+0x348>
 800dee2:	2302      	movs	r3, #2
 800dee4:	77fb      	strb	r3, [r7, #31]
 800dee6:	e115      	b.n	800e114 <UART_SetConfig+0x348>
 800dee8:	2304      	movs	r3, #4
 800deea:	77fb      	strb	r3, [r7, #31]
 800deec:	e112      	b.n	800e114 <UART_SetConfig+0x348>
 800deee:	2308      	movs	r3, #8
 800def0:	77fb      	strb	r3, [r7, #31]
 800def2:	e10f      	b.n	800e114 <UART_SetConfig+0x348>
 800def4:	2310      	movs	r3, #16
 800def6:	77fb      	strb	r3, [r7, #31]
 800def8:	e10c      	b.n	800e114 <UART_SetConfig+0x348>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a68      	ldr	r2, [pc, #416]	; (800e0a0 <UART_SetConfig+0x2d4>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d120      	bne.n	800df46 <UART_SetConfig+0x17a>
 800df04:	4b64      	ldr	r3, [pc, #400]	; (800e098 <UART_SetConfig+0x2cc>)
 800df06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800df0e:	2b30      	cmp	r3, #48	; 0x30
 800df10:	d013      	beq.n	800df3a <UART_SetConfig+0x16e>
 800df12:	2b30      	cmp	r3, #48	; 0x30
 800df14:	d814      	bhi.n	800df40 <UART_SetConfig+0x174>
 800df16:	2b20      	cmp	r3, #32
 800df18:	d009      	beq.n	800df2e <UART_SetConfig+0x162>
 800df1a:	2b20      	cmp	r3, #32
 800df1c:	d810      	bhi.n	800df40 <UART_SetConfig+0x174>
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d002      	beq.n	800df28 <UART_SetConfig+0x15c>
 800df22:	2b10      	cmp	r3, #16
 800df24:	d006      	beq.n	800df34 <UART_SetConfig+0x168>
 800df26:	e00b      	b.n	800df40 <UART_SetConfig+0x174>
 800df28:	2300      	movs	r3, #0
 800df2a:	77fb      	strb	r3, [r7, #31]
 800df2c:	e0f2      	b.n	800e114 <UART_SetConfig+0x348>
 800df2e:	2302      	movs	r3, #2
 800df30:	77fb      	strb	r3, [r7, #31]
 800df32:	e0ef      	b.n	800e114 <UART_SetConfig+0x348>
 800df34:	2304      	movs	r3, #4
 800df36:	77fb      	strb	r3, [r7, #31]
 800df38:	e0ec      	b.n	800e114 <UART_SetConfig+0x348>
 800df3a:	2308      	movs	r3, #8
 800df3c:	77fb      	strb	r3, [r7, #31]
 800df3e:	e0e9      	b.n	800e114 <UART_SetConfig+0x348>
 800df40:	2310      	movs	r3, #16
 800df42:	77fb      	strb	r3, [r7, #31]
 800df44:	e0e6      	b.n	800e114 <UART_SetConfig+0x348>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a56      	ldr	r2, [pc, #344]	; (800e0a4 <UART_SetConfig+0x2d8>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d120      	bne.n	800df92 <UART_SetConfig+0x1c6>
 800df50:	4b51      	ldr	r3, [pc, #324]	; (800e098 <UART_SetConfig+0x2cc>)
 800df52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df5a:	2bc0      	cmp	r3, #192	; 0xc0
 800df5c:	d013      	beq.n	800df86 <UART_SetConfig+0x1ba>
 800df5e:	2bc0      	cmp	r3, #192	; 0xc0
 800df60:	d814      	bhi.n	800df8c <UART_SetConfig+0x1c0>
 800df62:	2b80      	cmp	r3, #128	; 0x80
 800df64:	d009      	beq.n	800df7a <UART_SetConfig+0x1ae>
 800df66:	2b80      	cmp	r3, #128	; 0x80
 800df68:	d810      	bhi.n	800df8c <UART_SetConfig+0x1c0>
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d002      	beq.n	800df74 <UART_SetConfig+0x1a8>
 800df6e:	2b40      	cmp	r3, #64	; 0x40
 800df70:	d006      	beq.n	800df80 <UART_SetConfig+0x1b4>
 800df72:	e00b      	b.n	800df8c <UART_SetConfig+0x1c0>
 800df74:	2300      	movs	r3, #0
 800df76:	77fb      	strb	r3, [r7, #31]
 800df78:	e0cc      	b.n	800e114 <UART_SetConfig+0x348>
 800df7a:	2302      	movs	r3, #2
 800df7c:	77fb      	strb	r3, [r7, #31]
 800df7e:	e0c9      	b.n	800e114 <UART_SetConfig+0x348>
 800df80:	2304      	movs	r3, #4
 800df82:	77fb      	strb	r3, [r7, #31]
 800df84:	e0c6      	b.n	800e114 <UART_SetConfig+0x348>
 800df86:	2308      	movs	r3, #8
 800df88:	77fb      	strb	r3, [r7, #31]
 800df8a:	e0c3      	b.n	800e114 <UART_SetConfig+0x348>
 800df8c:	2310      	movs	r3, #16
 800df8e:	77fb      	strb	r3, [r7, #31]
 800df90:	e0c0      	b.n	800e114 <UART_SetConfig+0x348>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a44      	ldr	r2, [pc, #272]	; (800e0a8 <UART_SetConfig+0x2dc>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d125      	bne.n	800dfe8 <UART_SetConfig+0x21c>
 800df9c:	4b3e      	ldr	r3, [pc, #248]	; (800e098 <UART_SetConfig+0x2cc>)
 800df9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfaa:	d017      	beq.n	800dfdc <UART_SetConfig+0x210>
 800dfac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfb0:	d817      	bhi.n	800dfe2 <UART_SetConfig+0x216>
 800dfb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfb6:	d00b      	beq.n	800dfd0 <UART_SetConfig+0x204>
 800dfb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfbc:	d811      	bhi.n	800dfe2 <UART_SetConfig+0x216>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d003      	beq.n	800dfca <UART_SetConfig+0x1fe>
 800dfc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfc6:	d006      	beq.n	800dfd6 <UART_SetConfig+0x20a>
 800dfc8:	e00b      	b.n	800dfe2 <UART_SetConfig+0x216>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	77fb      	strb	r3, [r7, #31]
 800dfce:	e0a1      	b.n	800e114 <UART_SetConfig+0x348>
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	77fb      	strb	r3, [r7, #31]
 800dfd4:	e09e      	b.n	800e114 <UART_SetConfig+0x348>
 800dfd6:	2304      	movs	r3, #4
 800dfd8:	77fb      	strb	r3, [r7, #31]
 800dfda:	e09b      	b.n	800e114 <UART_SetConfig+0x348>
 800dfdc:	2308      	movs	r3, #8
 800dfde:	77fb      	strb	r3, [r7, #31]
 800dfe0:	e098      	b.n	800e114 <UART_SetConfig+0x348>
 800dfe2:	2310      	movs	r3, #16
 800dfe4:	77fb      	strb	r3, [r7, #31]
 800dfe6:	e095      	b.n	800e114 <UART_SetConfig+0x348>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a2f      	ldr	r2, [pc, #188]	; (800e0ac <UART_SetConfig+0x2e0>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d125      	bne.n	800e03e <UART_SetConfig+0x272>
 800dff2:	4b29      	ldr	r3, [pc, #164]	; (800e098 <UART_SetConfig+0x2cc>)
 800dff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dff8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e000:	d017      	beq.n	800e032 <UART_SetConfig+0x266>
 800e002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e006:	d817      	bhi.n	800e038 <UART_SetConfig+0x26c>
 800e008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e00c:	d00b      	beq.n	800e026 <UART_SetConfig+0x25a>
 800e00e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e012:	d811      	bhi.n	800e038 <UART_SetConfig+0x26c>
 800e014:	2b00      	cmp	r3, #0
 800e016:	d003      	beq.n	800e020 <UART_SetConfig+0x254>
 800e018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e01c:	d006      	beq.n	800e02c <UART_SetConfig+0x260>
 800e01e:	e00b      	b.n	800e038 <UART_SetConfig+0x26c>
 800e020:	2301      	movs	r3, #1
 800e022:	77fb      	strb	r3, [r7, #31]
 800e024:	e076      	b.n	800e114 <UART_SetConfig+0x348>
 800e026:	2302      	movs	r3, #2
 800e028:	77fb      	strb	r3, [r7, #31]
 800e02a:	e073      	b.n	800e114 <UART_SetConfig+0x348>
 800e02c:	2304      	movs	r3, #4
 800e02e:	77fb      	strb	r3, [r7, #31]
 800e030:	e070      	b.n	800e114 <UART_SetConfig+0x348>
 800e032:	2308      	movs	r3, #8
 800e034:	77fb      	strb	r3, [r7, #31]
 800e036:	e06d      	b.n	800e114 <UART_SetConfig+0x348>
 800e038:	2310      	movs	r3, #16
 800e03a:	77fb      	strb	r3, [r7, #31]
 800e03c:	e06a      	b.n	800e114 <UART_SetConfig+0x348>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a1b      	ldr	r2, [pc, #108]	; (800e0b0 <UART_SetConfig+0x2e4>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d138      	bne.n	800e0ba <UART_SetConfig+0x2ee>
 800e048:	4b13      	ldr	r3, [pc, #76]	; (800e098 <UART_SetConfig+0x2cc>)
 800e04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e04e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e052:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e056:	d017      	beq.n	800e088 <UART_SetConfig+0x2bc>
 800e058:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e05c:	d82a      	bhi.n	800e0b4 <UART_SetConfig+0x2e8>
 800e05e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e062:	d00b      	beq.n	800e07c <UART_SetConfig+0x2b0>
 800e064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e068:	d824      	bhi.n	800e0b4 <UART_SetConfig+0x2e8>
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d003      	beq.n	800e076 <UART_SetConfig+0x2aa>
 800e06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e072:	d006      	beq.n	800e082 <UART_SetConfig+0x2b6>
 800e074:	e01e      	b.n	800e0b4 <UART_SetConfig+0x2e8>
 800e076:	2300      	movs	r3, #0
 800e078:	77fb      	strb	r3, [r7, #31]
 800e07a:	e04b      	b.n	800e114 <UART_SetConfig+0x348>
 800e07c:	2302      	movs	r3, #2
 800e07e:	77fb      	strb	r3, [r7, #31]
 800e080:	e048      	b.n	800e114 <UART_SetConfig+0x348>
 800e082:	2304      	movs	r3, #4
 800e084:	77fb      	strb	r3, [r7, #31]
 800e086:	e045      	b.n	800e114 <UART_SetConfig+0x348>
 800e088:	2308      	movs	r3, #8
 800e08a:	77fb      	strb	r3, [r7, #31]
 800e08c:	e042      	b.n	800e114 <UART_SetConfig+0x348>
 800e08e:	bf00      	nop
 800e090:	efff69f3 	.word	0xefff69f3
 800e094:	40011000 	.word	0x40011000
 800e098:	40023800 	.word	0x40023800
 800e09c:	40004400 	.word	0x40004400
 800e0a0:	40004800 	.word	0x40004800
 800e0a4:	40004c00 	.word	0x40004c00
 800e0a8:	40005000 	.word	0x40005000
 800e0ac:	40011400 	.word	0x40011400
 800e0b0:	40007800 	.word	0x40007800
 800e0b4:	2310      	movs	r3, #16
 800e0b6:	77fb      	strb	r3, [r7, #31]
 800e0b8:	e02c      	b.n	800e114 <UART_SetConfig+0x348>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a72      	ldr	r2, [pc, #456]	; (800e288 <UART_SetConfig+0x4bc>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d125      	bne.n	800e110 <UART_SetConfig+0x344>
 800e0c4:	4b71      	ldr	r3, [pc, #452]	; (800e28c <UART_SetConfig+0x4c0>)
 800e0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e0ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e0d2:	d017      	beq.n	800e104 <UART_SetConfig+0x338>
 800e0d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e0d8:	d817      	bhi.n	800e10a <UART_SetConfig+0x33e>
 800e0da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0de:	d00b      	beq.n	800e0f8 <UART_SetConfig+0x32c>
 800e0e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0e4:	d811      	bhi.n	800e10a <UART_SetConfig+0x33e>
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <UART_SetConfig+0x326>
 800e0ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0ee:	d006      	beq.n	800e0fe <UART_SetConfig+0x332>
 800e0f0:	e00b      	b.n	800e10a <UART_SetConfig+0x33e>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	77fb      	strb	r3, [r7, #31]
 800e0f6:	e00d      	b.n	800e114 <UART_SetConfig+0x348>
 800e0f8:	2302      	movs	r3, #2
 800e0fa:	77fb      	strb	r3, [r7, #31]
 800e0fc:	e00a      	b.n	800e114 <UART_SetConfig+0x348>
 800e0fe:	2304      	movs	r3, #4
 800e100:	77fb      	strb	r3, [r7, #31]
 800e102:	e007      	b.n	800e114 <UART_SetConfig+0x348>
 800e104:	2308      	movs	r3, #8
 800e106:	77fb      	strb	r3, [r7, #31]
 800e108:	e004      	b.n	800e114 <UART_SetConfig+0x348>
 800e10a:	2310      	movs	r3, #16
 800e10c:	77fb      	strb	r3, [r7, #31]
 800e10e:	e001      	b.n	800e114 <UART_SetConfig+0x348>
 800e110:	2310      	movs	r3, #16
 800e112:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e11c:	d15b      	bne.n	800e1d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e11e:	7ffb      	ldrb	r3, [r7, #31]
 800e120:	2b08      	cmp	r3, #8
 800e122:	d828      	bhi.n	800e176 <UART_SetConfig+0x3aa>
 800e124:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <UART_SetConfig+0x360>)
 800e126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12a:	bf00      	nop
 800e12c:	0800e151 	.word	0x0800e151
 800e130:	0800e159 	.word	0x0800e159
 800e134:	0800e161 	.word	0x0800e161
 800e138:	0800e177 	.word	0x0800e177
 800e13c:	0800e167 	.word	0x0800e167
 800e140:	0800e177 	.word	0x0800e177
 800e144:	0800e177 	.word	0x0800e177
 800e148:	0800e177 	.word	0x0800e177
 800e14c:	0800e16f 	.word	0x0800e16f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e150:	f7fe fdc0 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 800e154:	61b8      	str	r0, [r7, #24]
        break;
 800e156:	e013      	b.n	800e180 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e158:	f7fe fdd0 	bl	800ccfc <HAL_RCC_GetPCLK2Freq>
 800e15c:	61b8      	str	r0, [r7, #24]
        break;
 800e15e:	e00f      	b.n	800e180 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e160:	4b4b      	ldr	r3, [pc, #300]	; (800e290 <UART_SetConfig+0x4c4>)
 800e162:	61bb      	str	r3, [r7, #24]
        break;
 800e164:	e00c      	b.n	800e180 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e166:	f7fe fca3 	bl	800cab0 <HAL_RCC_GetSysClockFreq>
 800e16a:	61b8      	str	r0, [r7, #24]
        break;
 800e16c:	e008      	b.n	800e180 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e16e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e172:	61bb      	str	r3, [r7, #24]
        break;
 800e174:	e004      	b.n	800e180 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e176:	2300      	movs	r3, #0
 800e178:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	77bb      	strb	r3, [r7, #30]
        break;
 800e17e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d074      	beq.n	800e270 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	005a      	lsls	r2, r3, #1
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	085b      	lsrs	r3, r3, #1
 800e190:	441a      	add	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	2b0f      	cmp	r3, #15
 800e1a0:	d916      	bls.n	800e1d0 <UART_SetConfig+0x404>
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1a8:	d212      	bcs.n	800e1d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	f023 030f 	bic.w	r3, r3, #15
 800e1b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	085b      	lsrs	r3, r3, #1
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	f003 0307 	and.w	r3, r3, #7
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	89fb      	ldrh	r3, [r7, #14]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	89fa      	ldrh	r2, [r7, #14]
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	e04f      	b.n	800e270 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	77bb      	strb	r3, [r7, #30]
 800e1d4:	e04c      	b.n	800e270 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1d6:	7ffb      	ldrb	r3, [r7, #31]
 800e1d8:	2b08      	cmp	r3, #8
 800e1da:	d828      	bhi.n	800e22e <UART_SetConfig+0x462>
 800e1dc:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <UART_SetConfig+0x418>)
 800e1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e2:	bf00      	nop
 800e1e4:	0800e209 	.word	0x0800e209
 800e1e8:	0800e211 	.word	0x0800e211
 800e1ec:	0800e219 	.word	0x0800e219
 800e1f0:	0800e22f 	.word	0x0800e22f
 800e1f4:	0800e21f 	.word	0x0800e21f
 800e1f8:	0800e22f 	.word	0x0800e22f
 800e1fc:	0800e22f 	.word	0x0800e22f
 800e200:	0800e22f 	.word	0x0800e22f
 800e204:	0800e227 	.word	0x0800e227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e208:	f7fe fd64 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 800e20c:	61b8      	str	r0, [r7, #24]
        break;
 800e20e:	e013      	b.n	800e238 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e210:	f7fe fd74 	bl	800ccfc <HAL_RCC_GetPCLK2Freq>
 800e214:	61b8      	str	r0, [r7, #24]
        break;
 800e216:	e00f      	b.n	800e238 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e218:	4b1d      	ldr	r3, [pc, #116]	; (800e290 <UART_SetConfig+0x4c4>)
 800e21a:	61bb      	str	r3, [r7, #24]
        break;
 800e21c:	e00c      	b.n	800e238 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e21e:	f7fe fc47 	bl	800cab0 <HAL_RCC_GetSysClockFreq>
 800e222:	61b8      	str	r0, [r7, #24]
        break;
 800e224:	e008      	b.n	800e238 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e22a:	61bb      	str	r3, [r7, #24]
        break;
 800e22c:	e004      	b.n	800e238 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e22e:	2300      	movs	r3, #0
 800e230:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	77bb      	strb	r3, [r7, #30]
        break;
 800e236:	bf00      	nop
    }

    if (pclk != 0U)
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d018      	beq.n	800e270 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	085a      	lsrs	r2, r3, #1
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	441a      	add	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e250:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	2b0f      	cmp	r3, #15
 800e256:	d909      	bls.n	800e26c <UART_SetConfig+0x4a0>
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e25e:	d205      	bcs.n	800e26c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	60da      	str	r2, [r3, #12]
 800e26a:	e001      	b.n	800e270 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e27c:	7fbb      	ldrb	r3, [r7, #30]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3720      	adds	r7, #32
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	40007c00 	.word	0x40007c00
 800e28c:	40023800 	.word	0x40023800
 800e290:	00f42400 	.word	0x00f42400

0800e294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00a      	beq.n	800e2be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	430a      	orrs	r2, r1
 800e2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c2:	f003 0302 	and.w	r3, r3, #2
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d00a      	beq.n	800e2e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	430a      	orrs	r2, r1
 800e2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e4:	f003 0304 	and.w	r3, r3, #4
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d00a      	beq.n	800e302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	430a      	orrs	r2, r1
 800e300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e306:	f003 0308 	and.w	r3, r3, #8
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00a      	beq.n	800e324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	430a      	orrs	r2, r1
 800e322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e328:	f003 0310 	and.w	r3, r3, #16
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00a      	beq.n	800e346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	430a      	orrs	r2, r1
 800e344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34a:	f003 0320 	and.w	r3, r3, #32
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00a      	beq.n	800e368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	430a      	orrs	r2, r1
 800e366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e370:	2b00      	cmp	r3, #0
 800e372:	d01a      	beq.n	800e3aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	430a      	orrs	r2, r1
 800e388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e392:	d10a      	bne.n	800e3aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	430a      	orrs	r2, r1
 800e3a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	605a      	str	r2, [r3, #4]
  }
}
 800e3cc:	bf00      	nop
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af02      	add	r7, sp, #8
 800e3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3e8:	f7fd f96a 	bl	800b6c0 <HAL_GetTick>
 800e3ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0308 	and.w	r3, r3, #8
 800e3f8:	2b08      	cmp	r3, #8
 800e3fa:	d10e      	bne.n	800e41a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f81b 	bl	800e446 <UART_WaitOnFlagUntilTimeout>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e416:	2303      	movs	r3, #3
 800e418:	e011      	b.n	800e43e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2220      	movs	r2, #32
 800e41e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2220      	movs	r2, #32
 800e424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b09c      	sub	sp, #112	; 0x70
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	60f8      	str	r0, [r7, #12]
 800e44e:	60b9      	str	r1, [r7, #8]
 800e450:	603b      	str	r3, [r7, #0]
 800e452:	4613      	mov	r3, r2
 800e454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e456:	e0a7      	b.n	800e5a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e45e:	f000 80a3 	beq.w	800e5a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e462:	f7fd f92d 	bl	800b6c0 <HAL_GetTick>
 800e466:	4602      	mov	r2, r0
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e46e:	429a      	cmp	r2, r3
 800e470:	d302      	bcc.n	800e478 <UART_WaitOnFlagUntilTimeout+0x32>
 800e472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e474:	2b00      	cmp	r3, #0
 800e476:	d13f      	bne.n	800e4f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e480:	e853 3f00 	ldrex	r3, [r3]
 800e484:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e488:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e48c:	667b      	str	r3, [r7, #100]	; 0x64
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	461a      	mov	r2, r3
 800e494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e496:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e498:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e49c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e49e:	e841 2300 	strex	r3, r2, [r1]
 800e4a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1e6      	bne.n	800e478 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b4:	e853 3f00 	ldrex	r3, [r3]
 800e4b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4bc:	f023 0301 	bic.w	r3, r3, #1
 800e4c0:	663b      	str	r3, [r7, #96]	; 0x60
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	3308      	adds	r3, #8
 800e4c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800e4cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4d2:	e841 2300 	strex	r3, r2, [r1]
 800e4d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1e5      	bne.n	800e4aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2220      	movs	r2, #32
 800e4e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2220      	movs	r2, #32
 800e4e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e4f4:	2303      	movs	r3, #3
 800e4f6:	e068      	b.n	800e5ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 0304 	and.w	r3, r3, #4
 800e502:	2b00      	cmp	r3, #0
 800e504:	d050      	beq.n	800e5a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e514:	d148      	bne.n	800e5a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e51e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	e853 3f00 	ldrex	r3, [r3]
 800e52c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e534:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e53e:	637b      	str	r3, [r7, #52]	; 0x34
 800e540:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e546:	e841 2300 	strex	r3, r2, [r1]
 800e54a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1e6      	bne.n	800e520 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3308      	adds	r3, #8
 800e558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	e853 3f00 	ldrex	r3, [r3]
 800e560:	613b      	str	r3, [r7, #16]
   return(result);
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	f023 0301 	bic.w	r3, r3, #1
 800e568:	66bb      	str	r3, [r7, #104]	; 0x68
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	3308      	adds	r3, #8
 800e570:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e572:	623a      	str	r2, [r7, #32]
 800e574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e576:	69f9      	ldr	r1, [r7, #28]
 800e578:	6a3a      	ldr	r2, [r7, #32]
 800e57a:	e841 2300 	strex	r3, r2, [r1]
 800e57e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1e5      	bne.n	800e552 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2220      	movs	r2, #32
 800e58a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2220      	movs	r2, #32
 800e590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2220      	movs	r2, #32
 800e598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e5a4:	2303      	movs	r3, #3
 800e5a6:	e010      	b.n	800e5ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	69da      	ldr	r2, [r3, #28]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	bf0c      	ite	eq
 800e5b8:	2301      	moveq	r3, #1
 800e5ba:	2300      	movne	r3, #0
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	461a      	mov	r2, r3
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	f43f af48 	beq.w	800e458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3770      	adds	r7, #112	; 0x70
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e5d2:	b480      	push	{r7}
 800e5d4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e5d6:	bf00      	nop
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5e6:	f3ef 8305 	mrs	r3, IPSR
 800e5ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800e5ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10f      	bne.n	800e612 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5f2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5f6:	607b      	str	r3, [r7, #4]
  return(result);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d105      	bne.n	800e60a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e5fe:	f3ef 8311 	mrs	r3, BASEPRI
 800e602:	603b      	str	r3, [r7, #0]
  return(result);
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d007      	beq.n	800e61a <osKernelInitialize+0x3a>
 800e60a:	4b0e      	ldr	r3, [pc, #56]	; (800e644 <osKernelInitialize+0x64>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d103      	bne.n	800e61a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e612:	f06f 0305 	mvn.w	r3, #5
 800e616:	60fb      	str	r3, [r7, #12]
 800e618:	e00c      	b.n	800e634 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e61a:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <osKernelInitialize+0x64>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d105      	bne.n	800e62e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e622:	4b08      	ldr	r3, [pc, #32]	; (800e644 <osKernelInitialize+0x64>)
 800e624:	2201      	movs	r2, #1
 800e626:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e628:	2300      	movs	r3, #0
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	e002      	b.n	800e634 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e62e:	f04f 33ff 	mov.w	r3, #4294967295
 800e632:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e634:	68fb      	ldr	r3, [r7, #12]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3714      	adds	r7, #20
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop
 800e644:	200036c8 	.word	0x200036c8

0800e648 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e64e:	f3ef 8305 	mrs	r3, IPSR
 800e652:	60bb      	str	r3, [r7, #8]
  return(result);
 800e654:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e656:	2b00      	cmp	r3, #0
 800e658:	d10f      	bne.n	800e67a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e65a:	f3ef 8310 	mrs	r3, PRIMASK
 800e65e:	607b      	str	r3, [r7, #4]
  return(result);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d105      	bne.n	800e672 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e666:	f3ef 8311 	mrs	r3, BASEPRI
 800e66a:	603b      	str	r3, [r7, #0]
  return(result);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d007      	beq.n	800e682 <osKernelStart+0x3a>
 800e672:	4b0f      	ldr	r3, [pc, #60]	; (800e6b0 <osKernelStart+0x68>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b02      	cmp	r3, #2
 800e678:	d103      	bne.n	800e682 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e67a:	f06f 0305 	mvn.w	r3, #5
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	e010      	b.n	800e6a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e682:	4b0b      	ldr	r3, [pc, #44]	; (800e6b0 <osKernelStart+0x68>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d109      	bne.n	800e69e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e68a:	f7ff ffa2 	bl	800e5d2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e68e:	4b08      	ldr	r3, [pc, #32]	; (800e6b0 <osKernelStart+0x68>)
 800e690:	2202      	movs	r2, #2
 800e692:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e694:	f001 f8e6 	bl	800f864 <vTaskStartScheduler>
      stat = osOK;
 800e698:	2300      	movs	r3, #0
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	e002      	b.n	800e6a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e69e:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	200036c8 	.word	0x200036c8

0800e6b4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6ba:	f3ef 8305 	mrs	r3, IPSR
 800e6be:	60bb      	str	r3, [r7, #8]
  return(result);
 800e6c0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d10f      	bne.n	800e6e6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ca:	607b      	str	r3, [r7, #4]
  return(result);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d105      	bne.n	800e6de <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6d2:	f3ef 8311 	mrs	r3, BASEPRI
 800e6d6:	603b      	str	r3, [r7, #0]
  return(result);
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <osKernelGetTickCount+0x3a>
 800e6de:	4b08      	ldr	r3, [pc, #32]	; (800e700 <osKernelGetTickCount+0x4c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	d103      	bne.n	800e6ee <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e6e6:	f001 f9e5 	bl	800fab4 <xTaskGetTickCountFromISR>
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	e002      	b.n	800e6f4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e6ee:	f001 f9d1 	bl	800fa94 <xTaskGetTickCount>
 800e6f2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	200036c8 	.word	0x200036c8

0800e704 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800e704:	b480      	push	{r7}
 800e706:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800e708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
	...

0800e718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b090      	sub	sp, #64	; 0x40
 800e71c:	af04      	add	r7, sp, #16
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e724:	2300      	movs	r3, #0
 800e726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e728:	f3ef 8305 	mrs	r3, IPSR
 800e72c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e72e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e730:	2b00      	cmp	r3, #0
 800e732:	f040 808f 	bne.w	800e854 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e736:	f3ef 8310 	mrs	r3, PRIMASK
 800e73a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d105      	bne.n	800e74e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e742:	f3ef 8311 	mrs	r3, BASEPRI
 800e746:	617b      	str	r3, [r7, #20]
  return(result);
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d003      	beq.n	800e756 <osThreadNew+0x3e>
 800e74e:	4b44      	ldr	r3, [pc, #272]	; (800e860 <osThreadNew+0x148>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b02      	cmp	r3, #2
 800e754:	d07e      	beq.n	800e854 <osThreadNew+0x13c>
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d07b      	beq.n	800e854 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e75c:	2380      	movs	r3, #128	; 0x80
 800e75e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e760:	2318      	movs	r3, #24
 800e762:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e764:	2300      	movs	r3, #0
 800e766:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e768:	f04f 33ff 	mov.w	r3, #4294967295
 800e76c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d045      	beq.n	800e800 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <osThreadNew+0x6a>
        name = attr->name;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	699b      	ldr	r3, [r3, #24]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d002      	beq.n	800e790 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	2b00      	cmp	r3, #0
 800e794:	d008      	beq.n	800e7a8 <osThreadNew+0x90>
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	2b38      	cmp	r3, #56	; 0x38
 800e79a:	d805      	bhi.n	800e7a8 <osThreadNew+0x90>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f003 0301 	and.w	r3, r3, #1
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <osThreadNew+0x94>
        return (NULL);
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e054      	b.n	800e856 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d003      	beq.n	800e7bc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	089b      	lsrs	r3, r3, #2
 800e7ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00e      	beq.n	800e7e2 <osThreadNew+0xca>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	2b5b      	cmp	r3, #91	; 0x5b
 800e7ca:	d90a      	bls.n	800e7e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d006      	beq.n	800e7e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	695b      	ldr	r3, [r3, #20]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <osThreadNew+0xca>
        mem = 1;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	623b      	str	r3, [r7, #32]
 800e7e0:	e010      	b.n	800e804 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10c      	bne.n	800e804 <osThreadNew+0xec>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d108      	bne.n	800e804 <osThreadNew+0xec>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d104      	bne.n	800e804 <osThreadNew+0xec>
          mem = 0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	623b      	str	r3, [r7, #32]
 800e7fe:	e001      	b.n	800e804 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e800:	2300      	movs	r3, #0
 800e802:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e804:	6a3b      	ldr	r3, [r7, #32]
 800e806:	2b01      	cmp	r3, #1
 800e808:	d110      	bne.n	800e82c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e812:	9202      	str	r2, [sp, #8]
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e81e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 fe3f 	bl	800f4a4 <xTaskCreateStatic>
 800e826:	4603      	mov	r3, r0
 800e828:	613b      	str	r3, [r7, #16]
 800e82a:	e013      	b.n	800e854 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e82c:	6a3b      	ldr	r3, [r7, #32]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d110      	bne.n	800e854 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e834:	b29a      	uxth	r2, r3
 800e836:	f107 0310 	add.w	r3, r7, #16
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f000 fe90 	bl	800f56a <xTaskCreate>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d001      	beq.n	800e854 <osThreadNew+0x13c>
          hTask = NULL;
 800e850:	2300      	movs	r3, #0
 800e852:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e854:	693b      	ldr	r3, [r7, #16]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3730      	adds	r7, #48	; 0x30
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	200036c8 	.word	0x200036c8

0800e864 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e86c:	f3ef 8305 	mrs	r3, IPSR
 800e870:	613b      	str	r3, [r7, #16]
  return(result);
 800e872:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10f      	bne.n	800e898 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e878:	f3ef 8310 	mrs	r3, PRIMASK
 800e87c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d105      	bne.n	800e890 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e884:	f3ef 8311 	mrs	r3, BASEPRI
 800e888:	60bb      	str	r3, [r7, #8]
  return(result);
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d007      	beq.n	800e8a0 <osDelay+0x3c>
 800e890:	4b0a      	ldr	r3, [pc, #40]	; (800e8bc <osDelay+0x58>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b02      	cmp	r3, #2
 800e896:	d103      	bne.n	800e8a0 <osDelay+0x3c>
    stat = osErrorISR;
 800e898:	f06f 0305 	mvn.w	r3, #5
 800e89c:	617b      	str	r3, [r7, #20]
 800e89e:	e007      	b.n	800e8b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d002      	beq.n	800e8b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 ffa4 	bl	800f7f8 <vTaskDelay>
    }
  }

  return (stat);
 800e8b0:	697b      	ldr	r3, [r7, #20]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3718      	adds	r7, #24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	200036c8 	.word	0x200036c8

0800e8c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e8c0:	b480      	push	{r7}
 800e8c2:	b085      	sub	sp, #20
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4a07      	ldr	r2, [pc, #28]	; (800e8ec <vApplicationGetIdleTaskMemory+0x2c>)
 800e8d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	4a06      	ldr	r2, [pc, #24]	; (800e8f0 <vApplicationGetIdleTaskMemory+0x30>)
 800e8d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2280      	movs	r2, #128	; 0x80
 800e8dc:	601a      	str	r2, [r3, #0]
}
 800e8de:	bf00      	nop
 800e8e0:	3714      	adds	r7, #20
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	200036cc 	.word	0x200036cc
 800e8f0:	20003728 	.word	0x20003728

0800e8f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4a07      	ldr	r2, [pc, #28]	; (800e920 <vApplicationGetTimerTaskMemory+0x2c>)
 800e904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	4a06      	ldr	r2, [pc, #24]	; (800e924 <vApplicationGetTimerTaskMemory+0x30>)
 800e90a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e912:	601a      	str	r2, [r3, #0]
}
 800e914:	bf00      	nop
 800e916:	3714      	adds	r7, #20
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr
 800e920:	20003928 	.word	0x20003928
 800e924:	20003984 	.word	0x20003984

0800e928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f103 0208 	add.w	r2, r3, #8
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f04f 32ff 	mov.w	r2, #4294967295
 800e940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f103 0208 	add.w	r2, r3, #8
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f103 0208 	add.w	r2, r3, #8
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e976:	bf00      	nop
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr

0800e982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e982:	b480      	push	{r7}
 800e984:	b085      	sub	sp, #20
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
 800e98a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	689a      	ldr	r2, [r3, #8]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	683a      	ldr	r2, [r7, #0]
 800e9ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	1c5a      	adds	r2, r3, #1
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	601a      	str	r2, [r3, #0]
}
 800e9be:	bf00      	nop
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	b085      	sub	sp, #20
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
 800e9d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e0:	d103      	bne.n	800e9ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	e00c      	b.n	800ea04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	e002      	b.n	800e9f8 <vListInsert+0x2e>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68ba      	ldr	r2, [r7, #8]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d2f6      	bcs.n	800e9f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	685a      	ldr	r2, [r3, #4]
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	1c5a      	adds	r2, r3, #1
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	601a      	str	r2, [r3, #0]
}
 800ea30:	bf00      	nop
 800ea32:	3714      	adds	r7, #20
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	6892      	ldr	r2, [r2, #8]
 800ea52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	6852      	ldr	r2, [r2, #4]
 800ea5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d103      	bne.n	800ea70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	689a      	ldr	r2, [r3, #8]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	1e5a      	subs	r2, r3, #1
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3714      	adds	r7, #20
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10c      	bne.n	800eabe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	b672      	cpsid	i
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
 800eab6:	b662      	cpsie	i
 800eab8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eaba:	bf00      	nop
 800eabc:	e7fe      	b.n	800eabc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800eabe:	f002 f88d 	bl	8010bdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaca:	68f9      	ldr	r1, [r7, #12]
 800eacc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eace:	fb01 f303 	mul.w	r3, r1, r3
 800ead2:	441a      	add	r2, r3
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	68f9      	ldr	r1, [r7, #12]
 800eaf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eaf4:	fb01 f303 	mul.w	r3, r1, r3
 800eaf8:	441a      	add	r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	22ff      	movs	r2, #255	; 0xff
 800eb02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	22ff      	movs	r2, #255	; 0xff
 800eb0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d114      	bne.n	800eb3e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	691b      	ldr	r3, [r3, #16]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d01a      	beq.n	800eb52 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	3310      	adds	r3, #16
 800eb20:	4618      	mov	r0, r3
 800eb22:	f001 f949 	bl	800fdb8 <xTaskRemoveFromEventList>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d012      	beq.n	800eb52 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb2c:	4b0c      	ldr	r3, [pc, #48]	; (800eb60 <xQueueGenericReset+0xd0>)
 800eb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	e009      	b.n	800eb52 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	3310      	adds	r3, #16
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fef0 	bl	800e928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3324      	adds	r3, #36	; 0x24
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7ff feeb 	bl	800e928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb52:	f002 f877 	bl	8010c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb56:	2301      	movs	r3, #1
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	e000ed04 	.word	0xe000ed04

0800eb64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b08e      	sub	sp, #56	; 0x38
 800eb68:	af02      	add	r7, sp, #8
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
 800eb70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d10c      	bne.n	800eb92 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	b672      	cpsid	i
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	b662      	cpsie	i
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb8e:	bf00      	nop
 800eb90:	e7fe      	b.n	800eb90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10c      	bne.n	800ebb2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	b672      	cpsid	i
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	b662      	cpsie	i
 800ebac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebae:	bf00      	nop
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <xQueueGenericCreateStatic+0x5a>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <xQueueGenericCreateStatic+0x5e>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e000      	b.n	800ebc4 <xQueueGenericCreateStatic+0x60>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10c      	bne.n	800ebe2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebcc:	b672      	cpsid	i
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	b662      	cpsie	i
 800ebdc:	623b      	str	r3, [r7, #32]
}
 800ebde:	bf00      	nop
 800ebe0:	e7fe      	b.n	800ebe0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d102      	bne.n	800ebee <xQueueGenericCreateStatic+0x8a>
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <xQueueGenericCreateStatic+0x8e>
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e000      	b.n	800ebf4 <xQueueGenericCreateStatic+0x90>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10c      	bne.n	800ec12 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	b672      	cpsid	i
 800ebfe:	f383 8811 	msr	BASEPRI, r3
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	b662      	cpsie	i
 800ec0c:	61fb      	str	r3, [r7, #28]
}
 800ec0e:	bf00      	nop
 800ec10:	e7fe      	b.n	800ec10 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ec12:	2350      	movs	r3, #80	; 0x50
 800ec14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	2b50      	cmp	r3, #80	; 0x50
 800ec1a:	d00c      	beq.n	800ec36 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ec1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec20:	b672      	cpsid	i
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	b662      	cpsie	i
 800ec30:	61bb      	str	r3, [r7, #24]
}
 800ec32:	bf00      	nop
 800ec34:	e7fe      	b.n	800ec34 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00d      	beq.n	800ec5e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec44:	2201      	movs	r2, #1
 800ec46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	4613      	mov	r3, r2
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	68b9      	ldr	r1, [r7, #8]
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	f000 f805 	bl	800ec68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3730      	adds	r7, #48	; 0x30
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
 800ec74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d103      	bne.n	800ec84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	69ba      	ldr	r2, [r7, #24]
 800ec80:	601a      	str	r2, [r3, #0]
 800ec82:	e002      	b.n	800ec8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec96:	2101      	movs	r1, #1
 800ec98:	69b8      	ldr	r0, [r7, #24]
 800ec9a:	f7ff fef9 	bl	800ea90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	78fa      	ldrb	r2, [r7, #3]
 800eca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eca6:	bf00      	nop
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
	...

0800ecb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b08e      	sub	sp, #56	; 0x38
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
 800ecbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10c      	bne.n	800ece6 <xQueueGenericSend+0x36>
	__asm volatile
 800eccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd0:	b672      	cpsid	i
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	b662      	cpsie	i
 800ece0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ece2:	bf00      	nop
 800ece4:	e7fe      	b.n	800ece4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d103      	bne.n	800ecf4 <xQueueGenericSend+0x44>
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <xQueueGenericSend+0x48>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e000      	b.n	800ecfa <xQueueGenericSend+0x4a>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d10c      	bne.n	800ed18 <xQueueGenericSend+0x68>
	__asm volatile
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	b672      	cpsid	i
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	b662      	cpsie	i
 800ed12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed14:	bf00      	nop
 800ed16:	e7fe      	b.n	800ed16 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d103      	bne.n	800ed26 <xQueueGenericSend+0x76>
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d101      	bne.n	800ed2a <xQueueGenericSend+0x7a>
 800ed26:	2301      	movs	r3, #1
 800ed28:	e000      	b.n	800ed2c <xQueueGenericSend+0x7c>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10c      	bne.n	800ed4a <xQueueGenericSend+0x9a>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	b672      	cpsid	i
 800ed36:	f383 8811 	msr	BASEPRI, r3
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	b662      	cpsie	i
 800ed44:	623b      	str	r3, [r7, #32]
}
 800ed46:	bf00      	nop
 800ed48:	e7fe      	b.n	800ed48 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed4a:	f001 f9fb 	bl	8010144 <xTaskGetSchedulerState>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d102      	bne.n	800ed5a <xQueueGenericSend+0xaa>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <xQueueGenericSend+0xae>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e000      	b.n	800ed60 <xQueueGenericSend+0xb0>
 800ed5e:	2300      	movs	r3, #0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10c      	bne.n	800ed7e <xQueueGenericSend+0xce>
	__asm volatile
 800ed64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed68:	b672      	cpsid	i
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	b662      	cpsie	i
 800ed78:	61fb      	str	r3, [r7, #28]
}
 800ed7a:	bf00      	nop
 800ed7c:	e7fe      	b.n	800ed7c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed7e:	f001 ff2d 	bl	8010bdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d302      	bcc.n	800ed94 <xQueueGenericSend+0xe4>
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d129      	bne.n	800ede8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	68b9      	ldr	r1, [r7, #8]
 800ed98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed9a:	f000 fa15 	bl	800f1c8 <prvCopyDataToQueue>
 800ed9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d010      	beq.n	800edca <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edaa:	3324      	adds	r3, #36	; 0x24
 800edac:	4618      	mov	r0, r3
 800edae:	f001 f803 	bl	800fdb8 <xTaskRemoveFromEventList>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d013      	beq.n	800ede0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800edb8:	4b3f      	ldr	r3, [pc, #252]	; (800eeb8 <xQueueGenericSend+0x208>)
 800edba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edbe:	601a      	str	r2, [r3, #0]
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	e00a      	b.n	800ede0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d007      	beq.n	800ede0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800edd0:	4b39      	ldr	r3, [pc, #228]	; (800eeb8 <xQueueGenericSend+0x208>)
 800edd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	f3bf 8f4f 	dsb	sy
 800eddc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ede0:	f001 ff30 	bl	8010c44 <vPortExitCritical>
				return pdPASS;
 800ede4:	2301      	movs	r3, #1
 800ede6:	e063      	b.n	800eeb0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d103      	bne.n	800edf6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800edee:	f001 ff29 	bl	8010c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800edf2:	2300      	movs	r3, #0
 800edf4:	e05c      	b.n	800eeb0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800edf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d106      	bne.n	800ee0a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edfc:	f107 0314 	add.w	r3, r7, #20
 800ee00:	4618      	mov	r0, r3
 800ee02:	f001 f83f 	bl	800fe84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee06:	2301      	movs	r3, #1
 800ee08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee0a:	f001 ff1b 	bl	8010c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee0e:	f000 fd93 	bl	800f938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee12:	f001 fee3 	bl	8010bdc <vPortEnterCritical>
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee1c:	b25b      	sxtb	r3, r3
 800ee1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee22:	d103      	bne.n	800ee2c <xQueueGenericSend+0x17c>
 800ee24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee32:	b25b      	sxtb	r3, r3
 800ee34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee38:	d103      	bne.n	800ee42 <xQueueGenericSend+0x192>
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee42:	f001 feff 	bl	8010c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee46:	1d3a      	adds	r2, r7, #4
 800ee48:	f107 0314 	add.w	r3, r7, #20
 800ee4c:	4611      	mov	r1, r2
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f001 f82e 	bl	800feb0 <xTaskCheckForTimeOut>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d124      	bne.n	800eea4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee5c:	f000 faac 	bl	800f3b8 <prvIsQueueFull>
 800ee60:	4603      	mov	r3, r0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d018      	beq.n	800ee98 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	3310      	adds	r3, #16
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f000 ff4e 	bl	800fd10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ee74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee76:	f000 fa37 	bl	800f2e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ee7a:	f000 fd6b 	bl	800f954 <xTaskResumeAll>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f47f af7c 	bne.w	800ed7e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ee86:	4b0c      	ldr	r3, [pc, #48]	; (800eeb8 <xQueueGenericSend+0x208>)
 800ee88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee8c:	601a      	str	r2, [r3, #0]
 800ee8e:	f3bf 8f4f 	dsb	sy
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	e772      	b.n	800ed7e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ee98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee9a:	f000 fa25 	bl	800f2e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee9e:	f000 fd59 	bl	800f954 <xTaskResumeAll>
 800eea2:	e76c      	b.n	800ed7e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eea6:	f000 fa1f 	bl	800f2e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eeaa:	f000 fd53 	bl	800f954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eeae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3738      	adds	r7, #56	; 0x38
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	e000ed04 	.word	0xe000ed04

0800eebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b08e      	sub	sp, #56	; 0x38
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
 800eec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10c      	bne.n	800eeee <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800eed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed8:	b672      	cpsid	i
 800eeda:	f383 8811 	msr	BASEPRI, r3
 800eede:	f3bf 8f6f 	isb	sy
 800eee2:	f3bf 8f4f 	dsb	sy
 800eee6:	b662      	cpsie	i
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eeea:	bf00      	nop
 800eeec:	e7fe      	b.n	800eeec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d103      	bne.n	800eefc <xQueueGenericSendFromISR+0x40>
 800eef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d101      	bne.n	800ef00 <xQueueGenericSendFromISR+0x44>
 800eefc:	2301      	movs	r3, #1
 800eefe:	e000      	b.n	800ef02 <xQueueGenericSendFromISR+0x46>
 800ef00:	2300      	movs	r3, #0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10c      	bne.n	800ef20 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	b672      	cpsid	i
 800ef0c:	f383 8811 	msr	BASEPRI, r3
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	b662      	cpsie	i
 800ef1a:	623b      	str	r3, [r7, #32]
}
 800ef1c:	bf00      	nop
 800ef1e:	e7fe      	b.n	800ef1e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d103      	bne.n	800ef2e <xQueueGenericSendFromISR+0x72>
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d101      	bne.n	800ef32 <xQueueGenericSendFromISR+0x76>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e000      	b.n	800ef34 <xQueueGenericSendFromISR+0x78>
 800ef32:	2300      	movs	r3, #0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10c      	bne.n	800ef52 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ef38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3c:	b672      	cpsid	i
 800ef3e:	f383 8811 	msr	BASEPRI, r3
 800ef42:	f3bf 8f6f 	isb	sy
 800ef46:	f3bf 8f4f 	dsb	sy
 800ef4a:	b662      	cpsie	i
 800ef4c:	61fb      	str	r3, [r7, #28]
}
 800ef4e:	bf00      	nop
 800ef50:	e7fe      	b.n	800ef50 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef52:	f001 ff2b 	bl	8010dac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef56:	f3ef 8211 	mrs	r2, BASEPRI
 800ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5e:	b672      	cpsid	i
 800ef60:	f383 8811 	msr	BASEPRI, r3
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	b662      	cpsie	i
 800ef6e:	61ba      	str	r2, [r7, #24]
 800ef70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ef72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d302      	bcc.n	800ef88 <xQueueGenericSendFromISR+0xcc>
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d12c      	bne.n	800efe2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	68b9      	ldr	r1, [r7, #8]
 800ef96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef98:	f000 f916 	bl	800f1c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ef9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800efa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa4:	d112      	bne.n	800efcc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d016      	beq.n	800efdc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	3324      	adds	r3, #36	; 0x24
 800efb2:	4618      	mov	r0, r3
 800efb4:	f000 ff00 	bl	800fdb8 <xTaskRemoveFromEventList>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00e      	beq.n	800efdc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00b      	beq.n	800efdc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	601a      	str	r2, [r3, #0]
 800efca:	e007      	b.n	800efdc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800efcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efd0:	3301      	adds	r3, #1
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	b25a      	sxtb	r2, r3
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800efdc:	2301      	movs	r3, #1
 800efde:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800efe0:	e001      	b.n	800efe6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	637b      	str	r3, [r7, #52]	; 0x34
 800efe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eff0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3738      	adds	r7, #56	; 0x38
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b08c      	sub	sp, #48	; 0x30
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f008:	2300      	movs	r3, #0
 800f00a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10c      	bne.n	800f030 <xQueueReceive+0x34>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01a:	b672      	cpsid	i
 800f01c:	f383 8811 	msr	BASEPRI, r3
 800f020:	f3bf 8f6f 	isb	sy
 800f024:	f3bf 8f4f 	dsb	sy
 800f028:	b662      	cpsie	i
 800f02a:	623b      	str	r3, [r7, #32]
}
 800f02c:	bf00      	nop
 800f02e:	e7fe      	b.n	800f02e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d103      	bne.n	800f03e <xQueueReceive+0x42>
 800f036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <xQueueReceive+0x46>
 800f03e:	2301      	movs	r3, #1
 800f040:	e000      	b.n	800f044 <xQueueReceive+0x48>
 800f042:	2300      	movs	r3, #0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10c      	bne.n	800f062 <xQueueReceive+0x66>
	__asm volatile
 800f048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04c:	b672      	cpsid	i
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	b662      	cpsie	i
 800f05c:	61fb      	str	r3, [r7, #28]
}
 800f05e:	bf00      	nop
 800f060:	e7fe      	b.n	800f060 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f062:	f001 f86f 	bl	8010144 <xTaskGetSchedulerState>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d102      	bne.n	800f072 <xQueueReceive+0x76>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <xQueueReceive+0x7a>
 800f072:	2301      	movs	r3, #1
 800f074:	e000      	b.n	800f078 <xQueueReceive+0x7c>
 800f076:	2300      	movs	r3, #0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10c      	bne.n	800f096 <xQueueReceive+0x9a>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f080:	b672      	cpsid	i
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	b662      	cpsie	i
 800f090:	61bb      	str	r3, [r7, #24]
}
 800f092:	bf00      	nop
 800f094:	e7fe      	b.n	800f094 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f096:	f001 fda1 	bl	8010bdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d01f      	beq.n	800f0e6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0a6:	68b9      	ldr	r1, [r7, #8]
 800f0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0aa:	f000 f8f7 	bl	800f29c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b0:	1e5a      	subs	r2, r3, #1
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b8:	691b      	ldr	r3, [r3, #16]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00f      	beq.n	800f0de <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	3310      	adds	r3, #16
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 fe78 	bl	800fdb8 <xTaskRemoveFromEventList>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d007      	beq.n	800f0de <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0ce:	4b3d      	ldr	r3, [pc, #244]	; (800f1c4 <xQueueReceive+0x1c8>)
 800f0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0de:	f001 fdb1 	bl	8010c44 <vPortExitCritical>
				return pdPASS;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e069      	b.n	800f1ba <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d103      	bne.n	800f0f4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f0ec:	f001 fdaa 	bl	8010c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	e062      	b.n	800f1ba <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d106      	bne.n	800f108 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0fa:	f107 0310 	add.w	r3, r7, #16
 800f0fe:	4618      	mov	r0, r3
 800f100:	f000 fec0 	bl	800fe84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f104:	2301      	movs	r3, #1
 800f106:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f108:	f001 fd9c 	bl	8010c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f10c:	f000 fc14 	bl	800f938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f110:	f001 fd64 	bl	8010bdc <vPortEnterCritical>
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f11a:	b25b      	sxtb	r3, r3
 800f11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f120:	d103      	bne.n	800f12a <xQueueReceive+0x12e>
 800f122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f130:	b25b      	sxtb	r3, r3
 800f132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f136:	d103      	bne.n	800f140 <xQueueReceive+0x144>
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	2200      	movs	r2, #0
 800f13c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f140:	f001 fd80 	bl	8010c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f144:	1d3a      	adds	r2, r7, #4
 800f146:	f107 0310 	add.w	r3, r7, #16
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f000 feaf 	bl	800feb0 <xTaskCheckForTimeOut>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d123      	bne.n	800f1a0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f15a:	f000 f917 	bl	800f38c <prvIsQueueEmpty>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d017      	beq.n	800f194 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f166:	3324      	adds	r3, #36	; 0x24
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	4611      	mov	r1, r2
 800f16c:	4618      	mov	r0, r3
 800f16e:	f000 fdcf 	bl	800fd10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f174:	f000 f8b8 	bl	800f2e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f178:	f000 fbec 	bl	800f954 <xTaskResumeAll>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d189      	bne.n	800f096 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f182:	4b10      	ldr	r3, [pc, #64]	; (800f1c4 <xQueueReceive+0x1c8>)
 800f184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	f3bf 8f4f 	dsb	sy
 800f18e:	f3bf 8f6f 	isb	sy
 800f192:	e780      	b.n	800f096 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f196:	f000 f8a7 	bl	800f2e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f19a:	f000 fbdb 	bl	800f954 <xTaskResumeAll>
 800f19e:	e77a      	b.n	800f096 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1a2:	f000 f8a1 	bl	800f2e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1a6:	f000 fbd5 	bl	800f954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1ac:	f000 f8ee 	bl	800f38c <prvIsQueueEmpty>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f43f af6f 	beq.w	800f096 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3730      	adds	r7, #48	; 0x30
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	e000ed04 	.word	0xe000ed04

0800f1c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10d      	bne.n	800f202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d14d      	bne.n	800f28a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 ffc4 	bl	8010180 <xTaskPriorityDisinherit>
 800f1f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	609a      	str	r2, [r3, #8]
 800f200:	e043      	b.n	800f28a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d119      	bne.n	800f23c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6858      	ldr	r0, [r3, #4]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f210:	461a      	mov	r2, r3
 800f212:	68b9      	ldr	r1, [r7, #8]
 800f214:	f002 fbbb 	bl	801198e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	685a      	ldr	r2, [r3, #4]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f220:	441a      	add	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d32b      	bcc.n	800f28a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	605a      	str	r2, [r3, #4]
 800f23a:	e026      	b.n	800f28a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	68d8      	ldr	r0, [r3, #12]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f244:	461a      	mov	r2, r3
 800f246:	68b9      	ldr	r1, [r7, #8]
 800f248:	f002 fba1 	bl	801198e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	68da      	ldr	r2, [r3, #12]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f254:	425b      	negs	r3, r3
 800f256:	441a      	add	r2, r3
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	68da      	ldr	r2, [r3, #12]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	429a      	cmp	r2, r3
 800f266:	d207      	bcs.n	800f278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	689a      	ldr	r2, [r3, #8]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f270:	425b      	negs	r3, r3
 800f272:	441a      	add	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b02      	cmp	r3, #2
 800f27c:	d105      	bne.n	800f28a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	3b01      	subs	r3, #1
 800f288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	1c5a      	adds	r2, r3, #1
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f292:	697b      	ldr	r3, [r7, #20]
}
 800f294:	4618      	mov	r0, r3
 800f296:	3718      	adds	r7, #24
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d018      	beq.n	800f2e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68da      	ldr	r2, [r3, #12]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2b6:	441a      	add	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68da      	ldr	r2, [r3, #12]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d303      	bcc.n	800f2d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	68d9      	ldr	r1, [r3, #12]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d8:	461a      	mov	r2, r3
 800f2da:	6838      	ldr	r0, [r7, #0]
 800f2dc:	f002 fb57 	bl	801198e <memcpy>
	}
}
 800f2e0:	bf00      	nop
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f2f0:	f001 fc74 	bl	8010bdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2fc:	e011      	b.n	800f322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f302:	2b00      	cmp	r3, #0
 800f304:	d012      	beq.n	800f32c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	3324      	adds	r3, #36	; 0x24
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 fd54 	bl	800fdb8 <xTaskRemoveFromEventList>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f316:	f000 fe31 	bl	800ff7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f326:	2b00      	cmp	r3, #0
 800f328:	dce9      	bgt.n	800f2fe <prvUnlockQueue+0x16>
 800f32a:	e000      	b.n	800f32e <prvUnlockQueue+0x46>
					break;
 800f32c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	22ff      	movs	r2, #255	; 0xff
 800f332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f336:	f001 fc85 	bl	8010c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f33a:	f001 fc4f 	bl	8010bdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f346:	e011      	b.n	800f36c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d012      	beq.n	800f376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	3310      	adds	r3, #16
 800f354:	4618      	mov	r0, r3
 800f356:	f000 fd2f 	bl	800fdb8 <xTaskRemoveFromEventList>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d001      	beq.n	800f364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f360:	f000 fe0c 	bl	800ff7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	3b01      	subs	r3, #1
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f36c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f370:	2b00      	cmp	r3, #0
 800f372:	dce9      	bgt.n	800f348 <prvUnlockQueue+0x60>
 800f374:	e000      	b.n	800f378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	22ff      	movs	r2, #255	; 0xff
 800f37c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f380:	f001 fc60 	bl	8010c44 <vPortExitCritical>
}
 800f384:	bf00      	nop
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f394:	f001 fc22 	bl	8010bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d102      	bne.n	800f3a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e001      	b.n	800f3aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3aa:	f001 fc4b 	bl	8010c44 <vPortExitCritical>

	return xReturn;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f3c0:	f001 fc0c 	bl	8010bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d102      	bne.n	800f3d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	e001      	b.n	800f3da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3da:	f001 fc33 	bl	8010c44 <vPortExitCritical>

	return xReturn;
 800f3de:	68fb      	ldr	r3, [r7, #12]
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	60fb      	str	r3, [r7, #12]
 800f3f6:	e014      	b.n	800f422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f3f8:	4a0f      	ldr	r2, [pc, #60]	; (800f438 <vQueueAddToRegistry+0x50>)
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10b      	bne.n	800f41c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f404:	490c      	ldr	r1, [pc, #48]	; (800f438 <vQueueAddToRegistry+0x50>)
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	683a      	ldr	r2, [r7, #0]
 800f40a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f40e:	4a0a      	ldr	r2, [pc, #40]	; (800f438 <vQueueAddToRegistry+0x50>)
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	00db      	lsls	r3, r3, #3
 800f414:	4413      	add	r3, r2
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f41a:	e006      	b.n	800f42a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3301      	adds	r3, #1
 800f420:	60fb      	str	r3, [r7, #12]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2b07      	cmp	r3, #7
 800f426:	d9e7      	bls.n	800f3f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f428:	bf00      	nop
 800f42a:	bf00      	nop
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	20003d84 	.word	0x20003d84

0800f43c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f44c:	f001 fbc6 	bl	8010bdc <vPortEnterCritical>
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f456:	b25b      	sxtb	r3, r3
 800f458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f45c:	d103      	bne.n	800f466 <vQueueWaitForMessageRestricted+0x2a>
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	2200      	movs	r2, #0
 800f462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f46c:	b25b      	sxtb	r3, r3
 800f46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f472:	d103      	bne.n	800f47c <vQueueWaitForMessageRestricted+0x40>
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f47c:	f001 fbe2 	bl	8010c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f484:	2b00      	cmp	r3, #0
 800f486:	d106      	bne.n	800f496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	3324      	adds	r3, #36	; 0x24
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	68b9      	ldr	r1, [r7, #8]
 800f490:	4618      	mov	r0, r3
 800f492:	f000 fc63 	bl	800fd5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f496:	6978      	ldr	r0, [r7, #20]
 800f498:	f7ff ff26 	bl	800f2e8 <prvUnlockQueue>
	}
 800f49c:	bf00      	nop
 800f49e:	3718      	adds	r7, #24
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b08e      	sub	sp, #56	; 0x38
 800f4a8:	af04      	add	r7, sp, #16
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
 800f4b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10c      	bne.n	800f4d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800f4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4bc:	b672      	cpsid	i
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	b662      	cpsie	i
 800f4cc:	623b      	str	r3, [r7, #32]
}
 800f4ce:	bf00      	nop
 800f4d0:	e7fe      	b.n	800f4d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d10c      	bne.n	800f4f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800f4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4dc:	b672      	cpsid	i
 800f4de:	f383 8811 	msr	BASEPRI, r3
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	b662      	cpsie	i
 800f4ec:	61fb      	str	r3, [r7, #28]
}
 800f4ee:	bf00      	nop
 800f4f0:	e7fe      	b.n	800f4f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f4f2:	235c      	movs	r3, #92	; 0x5c
 800f4f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2b5c      	cmp	r3, #92	; 0x5c
 800f4fa:	d00c      	beq.n	800f516 <xTaskCreateStatic+0x72>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f500:	b672      	cpsid	i
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	b662      	cpsie	i
 800f510:	61bb      	str	r3, [r7, #24]
}
 800f512:	bf00      	nop
 800f514:	e7fe      	b.n	800f514 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d01e      	beq.n	800f55c <xTaskCreateStatic+0xb8>
 800f51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f520:	2b00      	cmp	r3, #0
 800f522:	d01b      	beq.n	800f55c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f52c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	2202      	movs	r2, #2
 800f532:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f536:	2300      	movs	r3, #0
 800f538:	9303      	str	r3, [sp, #12]
 800f53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53c:	9302      	str	r3, [sp, #8]
 800f53e:	f107 0314 	add.w	r3, r7, #20
 800f542:	9301      	str	r3, [sp, #4]
 800f544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f546:	9300      	str	r3, [sp, #0]
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	68b9      	ldr	r1, [r7, #8]
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f000 f850 	bl	800f5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f556:	f000 f8df 	bl	800f718 <prvAddNewTaskToReadyList>
 800f55a:	e001      	b.n	800f560 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f560:	697b      	ldr	r3, [r7, #20]
	}
 800f562:	4618      	mov	r0, r3
 800f564:	3728      	adds	r7, #40	; 0x28
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b08c      	sub	sp, #48	; 0x30
 800f56e:	af04      	add	r7, sp, #16
 800f570:	60f8      	str	r0, [r7, #12]
 800f572:	60b9      	str	r1, [r7, #8]
 800f574:	603b      	str	r3, [r7, #0]
 800f576:	4613      	mov	r3, r2
 800f578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f57a:	88fb      	ldrh	r3, [r7, #6]
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	4618      	mov	r0, r3
 800f580:	f001 fc58 	bl	8010e34 <pvPortMalloc>
 800f584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00e      	beq.n	800f5aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f58c:	205c      	movs	r0, #92	; 0x5c
 800f58e:	f001 fc51 	bl	8010e34 <pvPortMalloc>
 800f592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d003      	beq.n	800f5a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	697a      	ldr	r2, [r7, #20]
 800f59e:	631a      	str	r2, [r3, #48]	; 0x30
 800f5a0:	e005      	b.n	800f5ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f5a2:	6978      	ldr	r0, [r7, #20]
 800f5a4:	f001 fd10 	bl	8010fc8 <vPortFree>
 800f5a8:	e001      	b.n	800f5ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d017      	beq.n	800f5e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f5bc:	88fa      	ldrh	r2, [r7, #6]
 800f5be:	2300      	movs	r3, #0
 800f5c0:	9303      	str	r3, [sp, #12]
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	9302      	str	r3, [sp, #8]
 800f5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c8:	9301      	str	r3, [sp, #4]
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	9300      	str	r3, [sp, #0]
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	68b9      	ldr	r1, [r7, #8]
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f000 f80e 	bl	800f5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5d8:	69f8      	ldr	r0, [r7, #28]
 800f5da:	f000 f89d 	bl	800f718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	61bb      	str	r3, [r7, #24]
 800f5e2:	e002      	b.n	800f5ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f5ea:	69bb      	ldr	r3, [r7, #24]
	}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3720      	adds	r7, #32
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b088      	sub	sp, #32
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	607a      	str	r2, [r7, #4]
 800f600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	461a      	mov	r2, r3
 800f60c:	21a5      	movs	r1, #165	; 0xa5
 800f60e:	f002 f8f4 	bl	80117fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f616:	6879      	ldr	r1, [r7, #4]
 800f618:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f61c:	440b      	add	r3, r1
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	4413      	add	r3, r2
 800f622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	f023 0307 	bic.w	r3, r3, #7
 800f62a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	f003 0307 	and.w	r3, r3, #7
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00c      	beq.n	800f650 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63a:	b672      	cpsid	i
 800f63c:	f383 8811 	msr	BASEPRI, r3
 800f640:	f3bf 8f6f 	isb	sy
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	b662      	cpsie	i
 800f64a:	617b      	str	r3, [r7, #20]
}
 800f64c:	bf00      	nop
 800f64e:	e7fe      	b.n	800f64e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d01f      	beq.n	800f696 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f656:	2300      	movs	r3, #0
 800f658:	61fb      	str	r3, [r7, #28]
 800f65a:	e012      	b.n	800f682 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	4413      	add	r3, r2
 800f662:	7819      	ldrb	r1, [r3, #0]
 800f664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	4413      	add	r3, r2
 800f66a:	3334      	adds	r3, #52	; 0x34
 800f66c:	460a      	mov	r2, r1
 800f66e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	4413      	add	r3, r2
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d006      	beq.n	800f68a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	3301      	adds	r3, #1
 800f680:	61fb      	str	r3, [r7, #28]
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	2b0f      	cmp	r3, #15
 800f686:	d9e9      	bls.n	800f65c <prvInitialiseNewTask+0x68>
 800f688:	e000      	b.n	800f68c <prvInitialiseNewTask+0x98>
			{
				break;
 800f68a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68e:	2200      	movs	r2, #0
 800f690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f694:	e003      	b.n	800f69e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f698:	2200      	movs	r2, #0
 800f69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a0:	2b37      	cmp	r3, #55	; 0x37
 800f6a2:	d901      	bls.n	800f6a8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f6a4:	2337      	movs	r3, #55	; 0x37
 800f6a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	3304      	adds	r3, #4
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff f952 	bl	800e968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c6:	3318      	adds	r3, #24
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7ff f94d 	bl	800e968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	68f9      	ldr	r1, [r7, #12]
 800f6f6:	69b8      	ldr	r0, [r7, #24]
 800f6f8:	f001 f964 	bl	80109c4 <pxPortInitialiseStack>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f704:	2b00      	cmp	r3, #0
 800f706:	d002      	beq.n	800f70e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f70c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f70e:	bf00      	nop
 800f710:	3720      	adds	r7, #32
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
	...

0800f718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f720:	f001 fa5c 	bl	8010bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f724:	4b2d      	ldr	r3, [pc, #180]	; (800f7dc <prvAddNewTaskToReadyList+0xc4>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	3301      	adds	r3, #1
 800f72a:	4a2c      	ldr	r2, [pc, #176]	; (800f7dc <prvAddNewTaskToReadyList+0xc4>)
 800f72c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f72e:	4b2c      	ldr	r3, [pc, #176]	; (800f7e0 <prvAddNewTaskToReadyList+0xc8>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d109      	bne.n	800f74a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f736:	4a2a      	ldr	r2, [pc, #168]	; (800f7e0 <prvAddNewTaskToReadyList+0xc8>)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f73c:	4b27      	ldr	r3, [pc, #156]	; (800f7dc <prvAddNewTaskToReadyList+0xc4>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d110      	bne.n	800f766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f744:	f000 fc3e 	bl	800ffc4 <prvInitialiseTaskLists>
 800f748:	e00d      	b.n	800f766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f74a:	4b26      	ldr	r3, [pc, #152]	; (800f7e4 <prvAddNewTaskToReadyList+0xcc>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d109      	bne.n	800f766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f752:	4b23      	ldr	r3, [pc, #140]	; (800f7e0 <prvAddNewTaskToReadyList+0xc8>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d802      	bhi.n	800f766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f760:	4a1f      	ldr	r2, [pc, #124]	; (800f7e0 <prvAddNewTaskToReadyList+0xc8>)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f766:	4b20      	ldr	r3, [pc, #128]	; (800f7e8 <prvAddNewTaskToReadyList+0xd0>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3301      	adds	r3, #1
 800f76c:	4a1e      	ldr	r2, [pc, #120]	; (800f7e8 <prvAddNewTaskToReadyList+0xd0>)
 800f76e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f770:	4b1d      	ldr	r3, [pc, #116]	; (800f7e8 <prvAddNewTaskToReadyList+0xd0>)
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f77c:	4b1b      	ldr	r3, [pc, #108]	; (800f7ec <prvAddNewTaskToReadyList+0xd4>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	429a      	cmp	r2, r3
 800f782:	d903      	bls.n	800f78c <prvAddNewTaskToReadyList+0x74>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f788:	4a18      	ldr	r2, [pc, #96]	; (800f7ec <prvAddNewTaskToReadyList+0xd4>)
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4a15      	ldr	r2, [pc, #84]	; (800f7f0 <prvAddNewTaskToReadyList+0xd8>)
 800f79a:	441a      	add	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	f7ff f8ed 	bl	800e982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f7a8:	f001 fa4c 	bl	8010c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f7ac:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <prvAddNewTaskToReadyList+0xcc>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00e      	beq.n	800f7d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f7b4:	4b0a      	ldr	r3, [pc, #40]	; (800f7e0 <prvAddNewTaskToReadyList+0xc8>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d207      	bcs.n	800f7d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f7c2:	4b0c      	ldr	r3, [pc, #48]	; (800f7f4 <prvAddNewTaskToReadyList+0xdc>)
 800f7c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7c8:	601a      	str	r2, [r3, #0]
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7d2:	bf00      	nop
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	20004298 	.word	0x20004298
 800f7e0:	20003dc4 	.word	0x20003dc4
 800f7e4:	200042a4 	.word	0x200042a4
 800f7e8:	200042b4 	.word	0x200042b4
 800f7ec:	200042a0 	.word	0x200042a0
 800f7f0:	20003dc8 	.word	0x20003dc8
 800f7f4:	e000ed04 	.word	0xe000ed04

0800f7f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f800:	2300      	movs	r3, #0
 800f802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d019      	beq.n	800f83e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f80a:	4b14      	ldr	r3, [pc, #80]	; (800f85c <vTaskDelay+0x64>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00c      	beq.n	800f82c <vTaskDelay+0x34>
	__asm volatile
 800f812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f816:	b672      	cpsid	i
 800f818:	f383 8811 	msr	BASEPRI, r3
 800f81c:	f3bf 8f6f 	isb	sy
 800f820:	f3bf 8f4f 	dsb	sy
 800f824:	b662      	cpsie	i
 800f826:	60bb      	str	r3, [r7, #8]
}
 800f828:	bf00      	nop
 800f82a:	e7fe      	b.n	800f82a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f82c:	f000 f884 	bl	800f938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f830:	2100      	movs	r1, #0
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 fd16 	bl	8010264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f838:	f000 f88c 	bl	800f954 <xTaskResumeAll>
 800f83c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d107      	bne.n	800f854 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f844:	4b06      	ldr	r3, [pc, #24]	; (800f860 <vTaskDelay+0x68>)
 800f846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f84a:	601a      	str	r2, [r3, #0]
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f854:	bf00      	nop
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	200042c0 	.word	0x200042c0
 800f860:	e000ed04 	.word	0xe000ed04

0800f864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08a      	sub	sp, #40	; 0x28
 800f868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f86e:	2300      	movs	r3, #0
 800f870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f872:	463a      	mov	r2, r7
 800f874:	1d39      	adds	r1, r7, #4
 800f876:	f107 0308 	add.w	r3, r7, #8
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7ff f820 	bl	800e8c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	9202      	str	r2, [sp, #8]
 800f888:	9301      	str	r3, [sp, #4]
 800f88a:	2300      	movs	r3, #0
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	2300      	movs	r3, #0
 800f890:	460a      	mov	r2, r1
 800f892:	4923      	ldr	r1, [pc, #140]	; (800f920 <vTaskStartScheduler+0xbc>)
 800f894:	4823      	ldr	r0, [pc, #140]	; (800f924 <vTaskStartScheduler+0xc0>)
 800f896:	f7ff fe05 	bl	800f4a4 <xTaskCreateStatic>
 800f89a:	4603      	mov	r3, r0
 800f89c:	4a22      	ldr	r2, [pc, #136]	; (800f928 <vTaskStartScheduler+0xc4>)
 800f89e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f8a0:	4b21      	ldr	r3, [pc, #132]	; (800f928 <vTaskStartScheduler+0xc4>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	617b      	str	r3, [r7, #20]
 800f8ac:	e001      	b.n	800f8b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d102      	bne.n	800f8be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f8b8:	f000 fd28 	bl	801030c <xTimerCreateTimerTask>
 800f8bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d118      	bne.n	800f8f6 <vTaskStartScheduler+0x92>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	b672      	cpsid	i
 800f8ca:	f383 8811 	msr	BASEPRI, r3
 800f8ce:	f3bf 8f6f 	isb	sy
 800f8d2:	f3bf 8f4f 	dsb	sy
 800f8d6:	b662      	cpsie	i
 800f8d8:	613b      	str	r3, [r7, #16]
}
 800f8da:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f8dc:	4b13      	ldr	r3, [pc, #76]	; (800f92c <vTaskStartScheduler+0xc8>)
 800f8de:	f04f 32ff 	mov.w	r2, #4294967295
 800f8e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f8e4:	4b12      	ldr	r3, [pc, #72]	; (800f930 <vTaskStartScheduler+0xcc>)
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f8ea:	4b12      	ldr	r3, [pc, #72]	; (800f934 <vTaskStartScheduler+0xd0>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f8f0:	f001 f8f6 	bl	8010ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f8f4:	e010      	b.n	800f918 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fc:	d10c      	bne.n	800f918 <vTaskStartScheduler+0xb4>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f902:	b672      	cpsid	i
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	b662      	cpsie	i
 800f912:	60fb      	str	r3, [r7, #12]
}
 800f914:	bf00      	nop
 800f916:	e7fe      	b.n	800f916 <vTaskStartScheduler+0xb2>
}
 800f918:	bf00      	nop
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	08013ea8 	.word	0x08013ea8
 800f924:	0800ff95 	.word	0x0800ff95
 800f928:	200042bc 	.word	0x200042bc
 800f92c:	200042b8 	.word	0x200042b8
 800f930:	200042a4 	.word	0x200042a4
 800f934:	2000429c 	.word	0x2000429c

0800f938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f938:	b480      	push	{r7}
 800f93a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f93c:	4b04      	ldr	r3, [pc, #16]	; (800f950 <vTaskSuspendAll+0x18>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3301      	adds	r3, #1
 800f942:	4a03      	ldr	r2, [pc, #12]	; (800f950 <vTaskSuspendAll+0x18>)
 800f944:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f946:	bf00      	nop
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr
 800f950:	200042c0 	.word	0x200042c0

0800f954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f95e:	2300      	movs	r3, #0
 800f960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f962:	4b43      	ldr	r3, [pc, #268]	; (800fa70 <xTaskResumeAll+0x11c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d10c      	bne.n	800f984 <xTaskResumeAll+0x30>
	__asm volatile
 800f96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96e:	b672      	cpsid	i
 800f970:	f383 8811 	msr	BASEPRI, r3
 800f974:	f3bf 8f6f 	isb	sy
 800f978:	f3bf 8f4f 	dsb	sy
 800f97c:	b662      	cpsie	i
 800f97e:	603b      	str	r3, [r7, #0]
}
 800f980:	bf00      	nop
 800f982:	e7fe      	b.n	800f982 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f984:	f001 f92a 	bl	8010bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f988:	4b39      	ldr	r3, [pc, #228]	; (800fa70 <xTaskResumeAll+0x11c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	3b01      	subs	r3, #1
 800f98e:	4a38      	ldr	r2, [pc, #224]	; (800fa70 <xTaskResumeAll+0x11c>)
 800f990:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f992:	4b37      	ldr	r3, [pc, #220]	; (800fa70 <xTaskResumeAll+0x11c>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d162      	bne.n	800fa60 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f99a:	4b36      	ldr	r3, [pc, #216]	; (800fa74 <xTaskResumeAll+0x120>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d05e      	beq.n	800fa60 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9a2:	e02f      	b.n	800fa04 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9a4:	4b34      	ldr	r3, [pc, #208]	; (800fa78 <xTaskResumeAll+0x124>)
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	3318      	adds	r3, #24
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7ff f843 	bl	800ea3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	3304      	adds	r3, #4
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7ff f83e 	bl	800ea3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c4:	4b2d      	ldr	r3, [pc, #180]	; (800fa7c <xTaskResumeAll+0x128>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d903      	bls.n	800f9d4 <xTaskResumeAll+0x80>
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d0:	4a2a      	ldr	r2, [pc, #168]	; (800fa7c <xTaskResumeAll+0x128>)
 800f9d2:	6013      	str	r3, [r2, #0]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d8:	4613      	mov	r3, r2
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	4413      	add	r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	4a27      	ldr	r2, [pc, #156]	; (800fa80 <xTaskResumeAll+0x12c>)
 800f9e2:	441a      	add	r2, r3
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	4610      	mov	r0, r2
 800f9ec:	f7fe ffc9 	bl	800e982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f4:	4b23      	ldr	r3, [pc, #140]	; (800fa84 <xTaskResumeAll+0x130>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d302      	bcc.n	800fa04 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f9fe:	4b22      	ldr	r3, [pc, #136]	; (800fa88 <xTaskResumeAll+0x134>)
 800fa00:	2201      	movs	r2, #1
 800fa02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa04:	4b1c      	ldr	r3, [pc, #112]	; (800fa78 <xTaskResumeAll+0x124>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1cb      	bne.n	800f9a4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa12:	f000 fb77 	bl	8010104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fa16:	4b1d      	ldr	r3, [pc, #116]	; (800fa8c <xTaskResumeAll+0x138>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d010      	beq.n	800fa44 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa22:	f000 f859 	bl	800fad8 <xTaskIncrementTick>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d002      	beq.n	800fa32 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800fa2c:	4b16      	ldr	r3, [pc, #88]	; (800fa88 <xTaskResumeAll+0x134>)
 800fa2e:	2201      	movs	r2, #1
 800fa30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1f1      	bne.n	800fa22 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800fa3e:	4b13      	ldr	r3, [pc, #76]	; (800fa8c <xTaskResumeAll+0x138>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa44:	4b10      	ldr	r3, [pc, #64]	; (800fa88 <xTaskResumeAll+0x134>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d009      	beq.n	800fa60 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa50:	4b0f      	ldr	r3, [pc, #60]	; (800fa90 <xTaskResumeAll+0x13c>)
 800fa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa56:	601a      	str	r2, [r3, #0]
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa60:	f001 f8f0 	bl	8010c44 <vPortExitCritical>

	return xAlreadyYielded;
 800fa64:	68bb      	ldr	r3, [r7, #8]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	200042c0 	.word	0x200042c0
 800fa74:	20004298 	.word	0x20004298
 800fa78:	20004258 	.word	0x20004258
 800fa7c:	200042a0 	.word	0x200042a0
 800fa80:	20003dc8 	.word	0x20003dc8
 800fa84:	20003dc4 	.word	0x20003dc4
 800fa88:	200042ac 	.word	0x200042ac
 800fa8c:	200042a8 	.word	0x200042a8
 800fa90:	e000ed04 	.word	0xe000ed04

0800fa94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fa9a:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <xTaskGetTickCount+0x1c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800faa0:	687b      	ldr	r3, [r7, #4]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	370c      	adds	r7, #12
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	2000429c 	.word	0x2000429c

0800fab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800faba:	f001 f977 	bl	8010dac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fabe:	2300      	movs	r3, #0
 800fac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fac2:	4b04      	ldr	r3, [pc, #16]	; (800fad4 <xTaskGetTickCountFromISR+0x20>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fac8:	683b      	ldr	r3, [r7, #0]
}
 800faca:	4618      	mov	r0, r3
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	2000429c 	.word	0x2000429c

0800fad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fade:	2300      	movs	r3, #0
 800fae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fae2:	4b50      	ldr	r3, [pc, #320]	; (800fc24 <xTaskIncrementTick+0x14c>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f040 808b 	bne.w	800fc02 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800faec:	4b4e      	ldr	r3, [pc, #312]	; (800fc28 <xTaskIncrementTick+0x150>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3301      	adds	r3, #1
 800faf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800faf4:	4a4c      	ldr	r2, [pc, #304]	; (800fc28 <xTaskIncrementTick+0x150>)
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d122      	bne.n	800fb46 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb00:	4b4a      	ldr	r3, [pc, #296]	; (800fc2c <xTaskIncrementTick+0x154>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00c      	beq.n	800fb24 <xTaskIncrementTick+0x4c>
	__asm volatile
 800fb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0e:	b672      	cpsid	i
 800fb10:	f383 8811 	msr	BASEPRI, r3
 800fb14:	f3bf 8f6f 	isb	sy
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	b662      	cpsie	i
 800fb1e:	603b      	str	r3, [r7, #0]
}
 800fb20:	bf00      	nop
 800fb22:	e7fe      	b.n	800fb22 <xTaskIncrementTick+0x4a>
 800fb24:	4b41      	ldr	r3, [pc, #260]	; (800fc2c <xTaskIncrementTick+0x154>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	60fb      	str	r3, [r7, #12]
 800fb2a:	4b41      	ldr	r3, [pc, #260]	; (800fc30 <xTaskIncrementTick+0x158>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a3f      	ldr	r2, [pc, #252]	; (800fc2c <xTaskIncrementTick+0x154>)
 800fb30:	6013      	str	r3, [r2, #0]
 800fb32:	4a3f      	ldr	r2, [pc, #252]	; (800fc30 <xTaskIncrementTick+0x158>)
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6013      	str	r3, [r2, #0]
 800fb38:	4b3e      	ldr	r3, [pc, #248]	; (800fc34 <xTaskIncrementTick+0x15c>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	4a3d      	ldr	r2, [pc, #244]	; (800fc34 <xTaskIncrementTick+0x15c>)
 800fb40:	6013      	str	r3, [r2, #0]
 800fb42:	f000 fadf 	bl	8010104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb46:	4b3c      	ldr	r3, [pc, #240]	; (800fc38 <xTaskIncrementTick+0x160>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	693a      	ldr	r2, [r7, #16]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d349      	bcc.n	800fbe4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb50:	4b36      	ldr	r3, [pc, #216]	; (800fc2c <xTaskIncrementTick+0x154>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d104      	bne.n	800fb64 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb5a:	4b37      	ldr	r3, [pc, #220]	; (800fc38 <xTaskIncrementTick+0x160>)
 800fb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb60:	601a      	str	r2, [r3, #0]
					break;
 800fb62:	e03f      	b.n	800fbe4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb64:	4b31      	ldr	r3, [pc, #196]	; (800fc2c <xTaskIncrementTick+0x154>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb74:	693a      	ldr	r2, [r7, #16]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d203      	bcs.n	800fb84 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb7c:	4a2e      	ldr	r2, [pc, #184]	; (800fc38 <xTaskIncrementTick+0x160>)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb82:	e02f      	b.n	800fbe4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	3304      	adds	r3, #4
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fe ff57 	bl	800ea3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d004      	beq.n	800fba0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	3318      	adds	r3, #24
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fe ff4e 	bl	800ea3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba4:	4b25      	ldr	r3, [pc, #148]	; (800fc3c <xTaskIncrementTick+0x164>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d903      	bls.n	800fbb4 <xTaskIncrementTick+0xdc>
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb0:	4a22      	ldr	r2, [pc, #136]	; (800fc3c <xTaskIncrementTick+0x164>)
 800fbb2:	6013      	str	r3, [r2, #0]
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb8:	4613      	mov	r3, r2
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	4413      	add	r3, r2
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	4a1f      	ldr	r2, [pc, #124]	; (800fc40 <xTaskIncrementTick+0x168>)
 800fbc2:	441a      	add	r2, r3
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	3304      	adds	r3, #4
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4610      	mov	r0, r2
 800fbcc:	f7fe fed9 	bl	800e982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd4:	4b1b      	ldr	r3, [pc, #108]	; (800fc44 <xTaskIncrementTick+0x16c>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d3b8      	bcc.n	800fb50 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800fbde:	2301      	movs	r3, #1
 800fbe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbe2:	e7b5      	b.n	800fb50 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fbe4:	4b17      	ldr	r3, [pc, #92]	; (800fc44 <xTaskIncrementTick+0x16c>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbea:	4915      	ldr	r1, [pc, #84]	; (800fc40 <xTaskIncrementTick+0x168>)
 800fbec:	4613      	mov	r3, r2
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	4413      	add	r3, r2
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	440b      	add	r3, r1
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d907      	bls.n	800fc0c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	617b      	str	r3, [r7, #20]
 800fc00:	e004      	b.n	800fc0c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fc02:	4b11      	ldr	r3, [pc, #68]	; (800fc48 <xTaskIncrementTick+0x170>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3301      	adds	r3, #1
 800fc08:	4a0f      	ldr	r2, [pc, #60]	; (800fc48 <xTaskIncrementTick+0x170>)
 800fc0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fc0c:	4b0f      	ldr	r3, [pc, #60]	; (800fc4c <xTaskIncrementTick+0x174>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d001      	beq.n	800fc18 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800fc14:	2301      	movs	r3, #1
 800fc16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fc18:	697b      	ldr	r3, [r7, #20]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3718      	adds	r7, #24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	200042c0 	.word	0x200042c0
 800fc28:	2000429c 	.word	0x2000429c
 800fc2c:	20004250 	.word	0x20004250
 800fc30:	20004254 	.word	0x20004254
 800fc34:	200042b0 	.word	0x200042b0
 800fc38:	200042b8 	.word	0x200042b8
 800fc3c:	200042a0 	.word	0x200042a0
 800fc40:	20003dc8 	.word	0x20003dc8
 800fc44:	20003dc4 	.word	0x20003dc4
 800fc48:	200042a8 	.word	0x200042a8
 800fc4c:	200042ac 	.word	0x200042ac

0800fc50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc50:	b480      	push	{r7}
 800fc52:	b085      	sub	sp, #20
 800fc54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc56:	4b29      	ldr	r3, [pc, #164]	; (800fcfc <vTaskSwitchContext+0xac>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d003      	beq.n	800fc66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc5e:	4b28      	ldr	r3, [pc, #160]	; (800fd00 <vTaskSwitchContext+0xb0>)
 800fc60:	2201      	movs	r2, #1
 800fc62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc64:	e043      	b.n	800fcee <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800fc66:	4b26      	ldr	r3, [pc, #152]	; (800fd00 <vTaskSwitchContext+0xb0>)
 800fc68:	2200      	movs	r2, #0
 800fc6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc6c:	4b25      	ldr	r3, [pc, #148]	; (800fd04 <vTaskSwitchContext+0xb4>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	60fb      	str	r3, [r7, #12]
 800fc72:	e012      	b.n	800fc9a <vTaskSwitchContext+0x4a>
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d10c      	bne.n	800fc94 <vTaskSwitchContext+0x44>
	__asm volatile
 800fc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7e:	b672      	cpsid	i
 800fc80:	f383 8811 	msr	BASEPRI, r3
 800fc84:	f3bf 8f6f 	isb	sy
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	b662      	cpsie	i
 800fc8e:	607b      	str	r3, [r7, #4]
}
 800fc90:	bf00      	nop
 800fc92:	e7fe      	b.n	800fc92 <vTaskSwitchContext+0x42>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	3b01      	subs	r3, #1
 800fc98:	60fb      	str	r3, [r7, #12]
 800fc9a:	491b      	ldr	r1, [pc, #108]	; (800fd08 <vTaskSwitchContext+0xb8>)
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	4413      	add	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	440b      	add	r3, r1
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d0e2      	beq.n	800fc74 <vTaskSwitchContext+0x24>
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	4413      	add	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4a13      	ldr	r2, [pc, #76]	; (800fd08 <vTaskSwitchContext+0xb8>)
 800fcba:	4413      	add	r3, r2
 800fcbc:	60bb      	str	r3, [r7, #8]
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	685a      	ldr	r2, [r3, #4]
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	605a      	str	r2, [r3, #4]
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	685a      	ldr	r2, [r3, #4]
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	3308      	adds	r3, #8
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d104      	bne.n	800fcde <vTaskSwitchContext+0x8e>
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	685a      	ldr	r2, [r3, #4]
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	605a      	str	r2, [r3, #4]
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	4a09      	ldr	r2, [pc, #36]	; (800fd0c <vTaskSwitchContext+0xbc>)
 800fce6:	6013      	str	r3, [r2, #0]
 800fce8:	4a06      	ldr	r2, [pc, #24]	; (800fd04 <vTaskSwitchContext+0xb4>)
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6013      	str	r3, [r2, #0]
}
 800fcee:	bf00      	nop
 800fcf0:	3714      	adds	r7, #20
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	200042c0 	.word	0x200042c0
 800fd00:	200042ac 	.word	0x200042ac
 800fd04:	200042a0 	.word	0x200042a0
 800fd08:	20003dc8 	.word	0x20003dc8
 800fd0c:	20003dc4 	.word	0x20003dc4

0800fd10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d10c      	bne.n	800fd3a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd24:	b672      	cpsid	i
 800fd26:	f383 8811 	msr	BASEPRI, r3
 800fd2a:	f3bf 8f6f 	isb	sy
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	b662      	cpsie	i
 800fd34:	60fb      	str	r3, [r7, #12]
}
 800fd36:	bf00      	nop
 800fd38:	e7fe      	b.n	800fd38 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd3a:	4b07      	ldr	r3, [pc, #28]	; (800fd58 <vTaskPlaceOnEventList+0x48>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	3318      	adds	r3, #24
 800fd40:	4619      	mov	r1, r3
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7fe fe41 	bl	800e9ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd48:	2101      	movs	r1, #1
 800fd4a:	6838      	ldr	r0, [r7, #0]
 800fd4c:	f000 fa8a 	bl	8010264 <prvAddCurrentTaskToDelayedList>
}
 800fd50:	bf00      	nop
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	20003dc4 	.word	0x20003dc4

0800fd5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b086      	sub	sp, #24
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d10c      	bne.n	800fd88 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800fd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd72:	b672      	cpsid	i
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	b662      	cpsie	i
 800fd82:	617b      	str	r3, [r7, #20]
}
 800fd84:	bf00      	nop
 800fd86:	e7fe      	b.n	800fd86 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd88:	4b0a      	ldr	r3, [pc, #40]	; (800fdb4 <vTaskPlaceOnEventListRestricted+0x58>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	3318      	adds	r3, #24
 800fd8e:	4619      	mov	r1, r3
 800fd90:	68f8      	ldr	r0, [r7, #12]
 800fd92:	f7fe fdf6 	bl	800e982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d002      	beq.n	800fda2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800fd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800fda0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fda2:	6879      	ldr	r1, [r7, #4]
 800fda4:	68b8      	ldr	r0, [r7, #8]
 800fda6:	f000 fa5d 	bl	8010264 <prvAddCurrentTaskToDelayedList>
	}
 800fdaa:	bf00      	nop
 800fdac:	3718      	adds	r7, #24
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20003dc4 	.word	0x20003dc4

0800fdb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d10c      	bne.n	800fde8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800fdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd2:	b672      	cpsid	i
 800fdd4:	f383 8811 	msr	BASEPRI, r3
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	b662      	cpsie	i
 800fde2:	60fb      	str	r3, [r7, #12]
}
 800fde4:	bf00      	nop
 800fde6:	e7fe      	b.n	800fde6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	3318      	adds	r3, #24
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fe fe25 	bl	800ea3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdf2:	4b1e      	ldr	r3, [pc, #120]	; (800fe6c <xTaskRemoveFromEventList+0xb4>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d11d      	bne.n	800fe36 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7fe fe1c 	bl	800ea3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe08:	4b19      	ldr	r3, [pc, #100]	; (800fe70 <xTaskRemoveFromEventList+0xb8>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d903      	bls.n	800fe18 <xTaskRemoveFromEventList+0x60>
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe14:	4a16      	ldr	r2, [pc, #88]	; (800fe70 <xTaskRemoveFromEventList+0xb8>)
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	4413      	add	r3, r2
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	4a13      	ldr	r2, [pc, #76]	; (800fe74 <xTaskRemoveFromEventList+0xbc>)
 800fe26:	441a      	add	r2, r3
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	4610      	mov	r0, r2
 800fe30:	f7fe fda7 	bl	800e982 <vListInsertEnd>
 800fe34:	e005      	b.n	800fe42 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	3318      	adds	r3, #24
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	480e      	ldr	r0, [pc, #56]	; (800fe78 <xTaskRemoveFromEventList+0xc0>)
 800fe3e:	f7fe fda0 	bl	800e982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe46:	4b0d      	ldr	r3, [pc, #52]	; (800fe7c <xTaskRemoveFromEventList+0xc4>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d905      	bls.n	800fe5c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe50:	2301      	movs	r3, #1
 800fe52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe54:	4b0a      	ldr	r3, [pc, #40]	; (800fe80 <xTaskRemoveFromEventList+0xc8>)
 800fe56:	2201      	movs	r2, #1
 800fe58:	601a      	str	r2, [r3, #0]
 800fe5a:	e001      	b.n	800fe60 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe60:	697b      	ldr	r3, [r7, #20]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3718      	adds	r7, #24
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	200042c0 	.word	0x200042c0
 800fe70:	200042a0 	.word	0x200042a0
 800fe74:	20003dc8 	.word	0x20003dc8
 800fe78:	20004258 	.word	0x20004258
 800fe7c:	20003dc4 	.word	0x20003dc4
 800fe80:	200042ac 	.word	0x200042ac

0800fe84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe8c:	4b06      	ldr	r3, [pc, #24]	; (800fea8 <vTaskInternalSetTimeOutState+0x24>)
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe94:	4b05      	ldr	r3, [pc, #20]	; (800feac <vTaskInternalSetTimeOutState+0x28>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	605a      	str	r2, [r3, #4]
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr
 800fea8:	200042b0 	.word	0x200042b0
 800feac:	2000429c 	.word	0x2000429c

0800feb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d10c      	bne.n	800feda <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec4:	b672      	cpsid	i
 800fec6:	f383 8811 	msr	BASEPRI, r3
 800feca:	f3bf 8f6f 	isb	sy
 800fece:	f3bf 8f4f 	dsb	sy
 800fed2:	b662      	cpsie	i
 800fed4:	613b      	str	r3, [r7, #16]
}
 800fed6:	bf00      	nop
 800fed8:	e7fe      	b.n	800fed8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d10c      	bne.n	800fefa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee4:	b672      	cpsid	i
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	b662      	cpsie	i
 800fef4:	60fb      	str	r3, [r7, #12]
}
 800fef6:	bf00      	nop
 800fef8:	e7fe      	b.n	800fef8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fefa:	f000 fe6f 	bl	8010bdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fefe:	4b1d      	ldr	r3, [pc, #116]	; (800ff74 <xTaskCheckForTimeOut+0xc4>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	69ba      	ldr	r2, [r7, #24]
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff16:	d102      	bne.n	800ff1e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	61fb      	str	r3, [r7, #28]
 800ff1c:	e023      	b.n	800ff66 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	4b15      	ldr	r3, [pc, #84]	; (800ff78 <xTaskCheckForTimeOut+0xc8>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d007      	beq.n	800ff3a <xTaskCheckForTimeOut+0x8a>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	69ba      	ldr	r2, [r7, #24]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d302      	bcc.n	800ff3a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff34:	2301      	movs	r3, #1
 800ff36:	61fb      	str	r3, [r7, #28]
 800ff38:	e015      	b.n	800ff66 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	697a      	ldr	r2, [r7, #20]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d20b      	bcs.n	800ff5c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	1ad2      	subs	r2, r2, r3
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff ff97 	bl	800fe84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff56:	2300      	movs	r3, #0
 800ff58:	61fb      	str	r3, [r7, #28]
 800ff5a:	e004      	b.n	800ff66 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff62:	2301      	movs	r3, #1
 800ff64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff66:	f000 fe6d 	bl	8010c44 <vPortExitCritical>

	return xReturn;
 800ff6a:	69fb      	ldr	r3, [r7, #28]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3720      	adds	r7, #32
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	2000429c 	.word	0x2000429c
 800ff78:	200042b0 	.word	0x200042b0

0800ff7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff80:	4b03      	ldr	r3, [pc, #12]	; (800ff90 <vTaskMissedYield+0x14>)
 800ff82:	2201      	movs	r2, #1
 800ff84:	601a      	str	r2, [r3, #0]
}
 800ff86:	bf00      	nop
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	200042ac 	.word	0x200042ac

0800ff94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff9c:	f000 f852 	bl	8010044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ffa0:	4b06      	ldr	r3, [pc, #24]	; (800ffbc <prvIdleTask+0x28>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d9f9      	bls.n	800ff9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ffa8:	4b05      	ldr	r3, [pc, #20]	; (800ffc0 <prvIdleTask+0x2c>)
 800ffaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffae:	601a      	str	r2, [r3, #0]
 800ffb0:	f3bf 8f4f 	dsb	sy
 800ffb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ffb8:	e7f0      	b.n	800ff9c <prvIdleTask+0x8>
 800ffba:	bf00      	nop
 800ffbc:	20003dc8 	.word	0x20003dc8
 800ffc0:	e000ed04 	.word	0xe000ed04

0800ffc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffca:	2300      	movs	r3, #0
 800ffcc:	607b      	str	r3, [r7, #4]
 800ffce:	e00c      	b.n	800ffea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	4413      	add	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4a12      	ldr	r2, [pc, #72]	; (8010024 <prvInitialiseTaskLists+0x60>)
 800ffdc:	4413      	add	r3, r2
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fe fca2 	bl	800e928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	607b      	str	r3, [r7, #4]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b37      	cmp	r3, #55	; 0x37
 800ffee:	d9ef      	bls.n	800ffd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fff0:	480d      	ldr	r0, [pc, #52]	; (8010028 <prvInitialiseTaskLists+0x64>)
 800fff2:	f7fe fc99 	bl	800e928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fff6:	480d      	ldr	r0, [pc, #52]	; (801002c <prvInitialiseTaskLists+0x68>)
 800fff8:	f7fe fc96 	bl	800e928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fffc:	480c      	ldr	r0, [pc, #48]	; (8010030 <prvInitialiseTaskLists+0x6c>)
 800fffe:	f7fe fc93 	bl	800e928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010002:	480c      	ldr	r0, [pc, #48]	; (8010034 <prvInitialiseTaskLists+0x70>)
 8010004:	f7fe fc90 	bl	800e928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010008:	480b      	ldr	r0, [pc, #44]	; (8010038 <prvInitialiseTaskLists+0x74>)
 801000a:	f7fe fc8d 	bl	800e928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801000e:	4b0b      	ldr	r3, [pc, #44]	; (801003c <prvInitialiseTaskLists+0x78>)
 8010010:	4a05      	ldr	r2, [pc, #20]	; (8010028 <prvInitialiseTaskLists+0x64>)
 8010012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010014:	4b0a      	ldr	r3, [pc, #40]	; (8010040 <prvInitialiseTaskLists+0x7c>)
 8010016:	4a05      	ldr	r2, [pc, #20]	; (801002c <prvInitialiseTaskLists+0x68>)
 8010018:	601a      	str	r2, [r3, #0]
}
 801001a:	bf00      	nop
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	20003dc8 	.word	0x20003dc8
 8010028:	20004228 	.word	0x20004228
 801002c:	2000423c 	.word	0x2000423c
 8010030:	20004258 	.word	0x20004258
 8010034:	2000426c 	.word	0x2000426c
 8010038:	20004284 	.word	0x20004284
 801003c:	20004250 	.word	0x20004250
 8010040:	20004254 	.word	0x20004254

08010044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801004a:	e019      	b.n	8010080 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801004c:	f000 fdc6 	bl	8010bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010050:	4b10      	ldr	r3, [pc, #64]	; (8010094 <prvCheckTasksWaitingTermination+0x50>)
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	3304      	adds	r3, #4
 801005c:	4618      	mov	r0, r3
 801005e:	f7fe fced 	bl	800ea3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010062:	4b0d      	ldr	r3, [pc, #52]	; (8010098 <prvCheckTasksWaitingTermination+0x54>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	3b01      	subs	r3, #1
 8010068:	4a0b      	ldr	r2, [pc, #44]	; (8010098 <prvCheckTasksWaitingTermination+0x54>)
 801006a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801006c:	4b0b      	ldr	r3, [pc, #44]	; (801009c <prvCheckTasksWaitingTermination+0x58>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	3b01      	subs	r3, #1
 8010072:	4a0a      	ldr	r2, [pc, #40]	; (801009c <prvCheckTasksWaitingTermination+0x58>)
 8010074:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010076:	f000 fde5 	bl	8010c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f810 	bl	80100a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010080:	4b06      	ldr	r3, [pc, #24]	; (801009c <prvCheckTasksWaitingTermination+0x58>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1e1      	bne.n	801004c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010088:	bf00      	nop
 801008a:	bf00      	nop
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	2000426c 	.word	0x2000426c
 8010098:	20004298 	.word	0x20004298
 801009c:	20004280 	.word	0x20004280

080100a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d108      	bne.n	80100c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100b6:	4618      	mov	r0, r3
 80100b8:	f000 ff86 	bl	8010fc8 <vPortFree>
				vPortFree( pxTCB );
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 ff83 	bl	8010fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80100c2:	e01a      	b.n	80100fa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d103      	bne.n	80100d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 ff7a 	bl	8010fc8 <vPortFree>
	}
 80100d4:	e011      	b.n	80100fa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d00c      	beq.n	80100fa <prvDeleteTCB+0x5a>
	__asm volatile
 80100e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e4:	b672      	cpsid	i
 80100e6:	f383 8811 	msr	BASEPRI, r3
 80100ea:	f3bf 8f6f 	isb	sy
 80100ee:	f3bf 8f4f 	dsb	sy
 80100f2:	b662      	cpsie	i
 80100f4:	60fb      	str	r3, [r7, #12]
}
 80100f6:	bf00      	nop
 80100f8:	e7fe      	b.n	80100f8 <prvDeleteTCB+0x58>
	}
 80100fa:	bf00      	nop
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
	...

08010104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801010a:	4b0c      	ldr	r3, [pc, #48]	; (801013c <prvResetNextTaskUnblockTime+0x38>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d104      	bne.n	801011e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010114:	4b0a      	ldr	r3, [pc, #40]	; (8010140 <prvResetNextTaskUnblockTime+0x3c>)
 8010116:	f04f 32ff 	mov.w	r2, #4294967295
 801011a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801011c:	e008      	b.n	8010130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801011e:	4b07      	ldr	r3, [pc, #28]	; (801013c <prvResetNextTaskUnblockTime+0x38>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	68db      	ldr	r3, [r3, #12]
 8010126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	4a04      	ldr	r2, [pc, #16]	; (8010140 <prvResetNextTaskUnblockTime+0x3c>)
 801012e:	6013      	str	r3, [r2, #0]
}
 8010130:	bf00      	nop
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	20004250 	.word	0x20004250
 8010140:	200042b8 	.word	0x200042b8

08010144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801014a:	4b0b      	ldr	r3, [pc, #44]	; (8010178 <xTaskGetSchedulerState+0x34>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d102      	bne.n	8010158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010152:	2301      	movs	r3, #1
 8010154:	607b      	str	r3, [r7, #4]
 8010156:	e008      	b.n	801016a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010158:	4b08      	ldr	r3, [pc, #32]	; (801017c <xTaskGetSchedulerState+0x38>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d102      	bne.n	8010166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010160:	2302      	movs	r3, #2
 8010162:	607b      	str	r3, [r7, #4]
 8010164:	e001      	b.n	801016a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010166:	2300      	movs	r3, #0
 8010168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801016a:	687b      	ldr	r3, [r7, #4]
	}
 801016c:	4618      	mov	r0, r3
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr
 8010178:	200042a4 	.word	0x200042a4
 801017c:	200042c0 	.word	0x200042c0

08010180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010180:	b580      	push	{r7, lr}
 8010182:	b086      	sub	sp, #24
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801018c:	2300      	movs	r3, #0
 801018e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d05a      	beq.n	801024c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010196:	4b30      	ldr	r3, [pc, #192]	; (8010258 <xTaskPriorityDisinherit+0xd8>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	429a      	cmp	r2, r3
 801019e:	d00c      	beq.n	80101ba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	b672      	cpsid	i
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	b662      	cpsie	i
 80101b4:	60fb      	str	r3, [r7, #12]
}
 80101b6:	bf00      	nop
 80101b8:	e7fe      	b.n	80101b8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10c      	bne.n	80101dc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c6:	b672      	cpsid	i
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	b662      	cpsie	i
 80101d6:	60bb      	str	r3, [r7, #8]
}
 80101d8:	bf00      	nop
 80101da:	e7fe      	b.n	80101da <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101e0:	1e5a      	subs	r2, r3, #1
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d02c      	beq.n	801024c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d128      	bne.n	801024c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	3304      	adds	r3, #4
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe fc1c 	bl	800ea3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801021c:	4b0f      	ldr	r3, [pc, #60]	; (801025c <xTaskPriorityDisinherit+0xdc>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	429a      	cmp	r2, r3
 8010222:	d903      	bls.n	801022c <xTaskPriorityDisinherit+0xac>
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010228:	4a0c      	ldr	r2, [pc, #48]	; (801025c <xTaskPriorityDisinherit+0xdc>)
 801022a:	6013      	str	r3, [r2, #0]
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010230:	4613      	mov	r3, r2
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4413      	add	r3, r2
 8010236:	009b      	lsls	r3, r3, #2
 8010238:	4a09      	ldr	r2, [pc, #36]	; (8010260 <xTaskPriorityDisinherit+0xe0>)
 801023a:	441a      	add	r2, r3
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	3304      	adds	r3, #4
 8010240:	4619      	mov	r1, r3
 8010242:	4610      	mov	r0, r2
 8010244:	f7fe fb9d 	bl	800e982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010248:	2301      	movs	r3, #1
 801024a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801024c:	697b      	ldr	r3, [r7, #20]
	}
 801024e:	4618      	mov	r0, r3
 8010250:	3718      	adds	r7, #24
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	20003dc4 	.word	0x20003dc4
 801025c:	200042a0 	.word	0x200042a0
 8010260:	20003dc8 	.word	0x20003dc8

08010264 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801026e:	4b21      	ldr	r3, [pc, #132]	; (80102f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010274:	4b20      	ldr	r3, [pc, #128]	; (80102f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3304      	adds	r3, #4
 801027a:	4618      	mov	r0, r3
 801027c:	f7fe fbde 	bl	800ea3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010286:	d10a      	bne.n	801029e <prvAddCurrentTaskToDelayedList+0x3a>
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d007      	beq.n	801029e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801028e:	4b1a      	ldr	r3, [pc, #104]	; (80102f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3304      	adds	r3, #4
 8010294:	4619      	mov	r1, r3
 8010296:	4819      	ldr	r0, [pc, #100]	; (80102fc <prvAddCurrentTaskToDelayedList+0x98>)
 8010298:	f7fe fb73 	bl	800e982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801029c:	e026      	b.n	80102ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4413      	add	r3, r2
 80102a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102a6:	4b14      	ldr	r3, [pc, #80]	; (80102f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d209      	bcs.n	80102ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102b6:	4b12      	ldr	r3, [pc, #72]	; (8010300 <prvAddCurrentTaskToDelayedList+0x9c>)
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	4b0f      	ldr	r3, [pc, #60]	; (80102f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	3304      	adds	r3, #4
 80102c0:	4619      	mov	r1, r3
 80102c2:	4610      	mov	r0, r2
 80102c4:	f7fe fb81 	bl	800e9ca <vListInsert>
}
 80102c8:	e010      	b.n	80102ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102ca:	4b0e      	ldr	r3, [pc, #56]	; (8010304 <prvAddCurrentTaskToDelayedList+0xa0>)
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	4b0a      	ldr	r3, [pc, #40]	; (80102f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3304      	adds	r3, #4
 80102d4:	4619      	mov	r1, r3
 80102d6:	4610      	mov	r0, r2
 80102d8:	f7fe fb77 	bl	800e9ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102dc:	4b0a      	ldr	r3, [pc, #40]	; (8010308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	68ba      	ldr	r2, [r7, #8]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d202      	bcs.n	80102ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80102e6:	4a08      	ldr	r2, [pc, #32]	; (8010308 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	6013      	str	r3, [r2, #0]
}
 80102ec:	bf00      	nop
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	2000429c 	.word	0x2000429c
 80102f8:	20003dc4 	.word	0x20003dc4
 80102fc:	20004284 	.word	0x20004284
 8010300:	20004254 	.word	0x20004254
 8010304:	20004250 	.word	0x20004250
 8010308:	200042b8 	.word	0x200042b8

0801030c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b08a      	sub	sp, #40	; 0x28
 8010310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010312:	2300      	movs	r3, #0
 8010314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010316:	f000 fb15 	bl	8010944 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801031a:	4b1d      	ldr	r3, [pc, #116]	; (8010390 <xTimerCreateTimerTask+0x84>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d021      	beq.n	8010366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010322:	2300      	movs	r3, #0
 8010324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010326:	2300      	movs	r3, #0
 8010328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801032a:	1d3a      	adds	r2, r7, #4
 801032c:	f107 0108 	add.w	r1, r7, #8
 8010330:	f107 030c 	add.w	r3, r7, #12
 8010334:	4618      	mov	r0, r3
 8010336:	f7fe fadd 	bl	800e8f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	68fa      	ldr	r2, [r7, #12]
 8010340:	9202      	str	r2, [sp, #8]
 8010342:	9301      	str	r3, [sp, #4]
 8010344:	2302      	movs	r3, #2
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	2300      	movs	r3, #0
 801034a:	460a      	mov	r2, r1
 801034c:	4911      	ldr	r1, [pc, #68]	; (8010394 <xTimerCreateTimerTask+0x88>)
 801034e:	4812      	ldr	r0, [pc, #72]	; (8010398 <xTimerCreateTimerTask+0x8c>)
 8010350:	f7ff f8a8 	bl	800f4a4 <xTaskCreateStatic>
 8010354:	4603      	mov	r3, r0
 8010356:	4a11      	ldr	r2, [pc, #68]	; (801039c <xTimerCreateTimerTask+0x90>)
 8010358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801035a:	4b10      	ldr	r3, [pc, #64]	; (801039c <xTimerCreateTimerTask+0x90>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d001      	beq.n	8010366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010362:	2301      	movs	r3, #1
 8010364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d10c      	bne.n	8010386 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 801036c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010370:	b672      	cpsid	i
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	b662      	cpsie	i
 8010380:	613b      	str	r3, [r7, #16]
}
 8010382:	bf00      	nop
 8010384:	e7fe      	b.n	8010384 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010386:	697b      	ldr	r3, [r7, #20]
}
 8010388:	4618      	mov	r0, r3
 801038a:	3718      	adds	r7, #24
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	200042f4 	.word	0x200042f4
 8010394:	08013eb0 	.word	0x08013eb0
 8010398:	080104dd 	.word	0x080104dd
 801039c:	200042f8 	.word	0x200042f8

080103a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b08a      	sub	sp, #40	; 0x28
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d10c      	bne.n	80103d2 <xTimerGenericCommand+0x32>
	__asm volatile
 80103b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103bc:	b672      	cpsid	i
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f3bf 8f6f 	isb	sy
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	b662      	cpsie	i
 80103cc:	623b      	str	r3, [r7, #32]
}
 80103ce:	bf00      	nop
 80103d0:	e7fe      	b.n	80103d0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80103d2:	4b1a      	ldr	r3, [pc, #104]	; (801043c <xTimerGenericCommand+0x9c>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d02a      	beq.n	8010430 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	2b05      	cmp	r3, #5
 80103ea:	dc18      	bgt.n	801041e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103ec:	f7ff feaa 	bl	8010144 <xTaskGetSchedulerState>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	d109      	bne.n	801040a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103f6:	4b11      	ldr	r3, [pc, #68]	; (801043c <xTimerGenericCommand+0x9c>)
 80103f8:	6818      	ldr	r0, [r3, #0]
 80103fa:	f107 0110 	add.w	r1, r7, #16
 80103fe:	2300      	movs	r3, #0
 8010400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010402:	f7fe fc55 	bl	800ecb0 <xQueueGenericSend>
 8010406:	6278      	str	r0, [r7, #36]	; 0x24
 8010408:	e012      	b.n	8010430 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801040a:	4b0c      	ldr	r3, [pc, #48]	; (801043c <xTimerGenericCommand+0x9c>)
 801040c:	6818      	ldr	r0, [r3, #0]
 801040e:	f107 0110 	add.w	r1, r7, #16
 8010412:	2300      	movs	r3, #0
 8010414:	2200      	movs	r2, #0
 8010416:	f7fe fc4b 	bl	800ecb0 <xQueueGenericSend>
 801041a:	6278      	str	r0, [r7, #36]	; 0x24
 801041c:	e008      	b.n	8010430 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801041e:	4b07      	ldr	r3, [pc, #28]	; (801043c <xTimerGenericCommand+0x9c>)
 8010420:	6818      	ldr	r0, [r3, #0]
 8010422:	f107 0110 	add.w	r1, r7, #16
 8010426:	2300      	movs	r3, #0
 8010428:	683a      	ldr	r2, [r7, #0]
 801042a:	f7fe fd47 	bl	800eebc <xQueueGenericSendFromISR>
 801042e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010432:	4618      	mov	r0, r3
 8010434:	3728      	adds	r7, #40	; 0x28
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	200042f4 	.word	0x200042f4

08010440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b088      	sub	sp, #32
 8010444:	af02      	add	r7, sp, #8
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801044a:	4b23      	ldr	r3, [pc, #140]	; (80104d8 <prvProcessExpiredTimer+0x98>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	3304      	adds	r3, #4
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe faef 	bl	800ea3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010464:	f003 0304 	and.w	r3, r3, #4
 8010468:	2b00      	cmp	r3, #0
 801046a:	d024      	beq.n	80104b6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	699a      	ldr	r2, [r3, #24]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	18d1      	adds	r1, r2, r3
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	683a      	ldr	r2, [r7, #0]
 8010478:	6978      	ldr	r0, [r7, #20]
 801047a:	f000 f8d3 	bl	8010624 <prvInsertTimerInActiveList>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d021      	beq.n	80104c8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010484:	2300      	movs	r3, #0
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	2300      	movs	r3, #0
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	2100      	movs	r1, #0
 801048e:	6978      	ldr	r0, [r7, #20]
 8010490:	f7ff ff86 	bl	80103a0 <xTimerGenericCommand>
 8010494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d115      	bne.n	80104c8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 801049c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a0:	b672      	cpsid	i
 80104a2:	f383 8811 	msr	BASEPRI, r3
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	f3bf 8f4f 	dsb	sy
 80104ae:	b662      	cpsie	i
 80104b0:	60fb      	str	r3, [r7, #12]
}
 80104b2:	bf00      	nop
 80104b4:	e7fe      	b.n	80104b4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104bc:	f023 0301 	bic.w	r3, r3, #1
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	6a1b      	ldr	r3, [r3, #32]
 80104cc:	6978      	ldr	r0, [r7, #20]
 80104ce:	4798      	blx	r3
}
 80104d0:	bf00      	nop
 80104d2:	3718      	adds	r7, #24
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	200042ec 	.word	0x200042ec

080104dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104e4:	f107 0308 	add.w	r3, r7, #8
 80104e8:	4618      	mov	r0, r3
 80104ea:	f000 f857 	bl	801059c <prvGetNextExpireTime>
 80104ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	4619      	mov	r1, r3
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f000 f803 	bl	8010500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80104fa:	f000 f8d5 	bl	80106a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104fe:	e7f1      	b.n	80104e4 <prvTimerTask+0x8>

08010500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801050a:	f7ff fa15 	bl	800f938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801050e:	f107 0308 	add.w	r3, r7, #8
 8010512:	4618      	mov	r0, r3
 8010514:	f000 f866 	bl	80105e4 <prvSampleTimeNow>
 8010518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d130      	bne.n	8010582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d10a      	bne.n	801053c <prvProcessTimerOrBlockTask+0x3c>
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	429a      	cmp	r2, r3
 801052c:	d806      	bhi.n	801053c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801052e:	f7ff fa11 	bl	800f954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010532:	68f9      	ldr	r1, [r7, #12]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff ff83 	bl	8010440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801053a:	e024      	b.n	8010586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d008      	beq.n	8010554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010542:	4b13      	ldr	r3, [pc, #76]	; (8010590 <prvProcessTimerOrBlockTask+0x90>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d101      	bne.n	8010550 <prvProcessTimerOrBlockTask+0x50>
 801054c:	2301      	movs	r3, #1
 801054e:	e000      	b.n	8010552 <prvProcessTimerOrBlockTask+0x52>
 8010550:	2300      	movs	r3, #0
 8010552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010554:	4b0f      	ldr	r3, [pc, #60]	; (8010594 <prvProcessTimerOrBlockTask+0x94>)
 8010556:	6818      	ldr	r0, [r3, #0]
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	683a      	ldr	r2, [r7, #0]
 8010560:	4619      	mov	r1, r3
 8010562:	f7fe ff6b 	bl	800f43c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010566:	f7ff f9f5 	bl	800f954 <xTaskResumeAll>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d10a      	bne.n	8010586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010570:	4b09      	ldr	r3, [pc, #36]	; (8010598 <prvProcessTimerOrBlockTask+0x98>)
 8010572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010576:	601a      	str	r2, [r3, #0]
 8010578:	f3bf 8f4f 	dsb	sy
 801057c:	f3bf 8f6f 	isb	sy
}
 8010580:	e001      	b.n	8010586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010582:	f7ff f9e7 	bl	800f954 <xTaskResumeAll>
}
 8010586:	bf00      	nop
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	200042f0 	.word	0x200042f0
 8010594:	200042f4 	.word	0x200042f4
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80105a4:	4b0e      	ldr	r3, [pc, #56]	; (80105e0 <prvGetNextExpireTime+0x44>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d101      	bne.n	80105b2 <prvGetNextExpireTime+0x16>
 80105ae:	2201      	movs	r2, #1
 80105b0:	e000      	b.n	80105b4 <prvGetNextExpireTime+0x18>
 80105b2:	2200      	movs	r2, #0
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d105      	bne.n	80105cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105c0:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <prvGetNextExpireTime+0x44>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	60fb      	str	r3, [r7, #12]
 80105ca:	e001      	b.n	80105d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80105cc:	2300      	movs	r3, #0
 80105ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80105d0:	68fb      	ldr	r3, [r7, #12]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3714      	adds	r7, #20
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr
 80105de:	bf00      	nop
 80105e0:	200042ec 	.word	0x200042ec

080105e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80105ec:	f7ff fa52 	bl	800fa94 <xTaskGetTickCount>
 80105f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80105f2:	4b0b      	ldr	r3, [pc, #44]	; (8010620 <prvSampleTimeNow+0x3c>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	68fa      	ldr	r2, [r7, #12]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d205      	bcs.n	8010608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80105fc:	f000 f93c 	bl	8010878 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2201      	movs	r2, #1
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	e002      	b.n	801060e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801060e:	4a04      	ldr	r2, [pc, #16]	; (8010620 <prvSampleTimeNow+0x3c>)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010614:	68fb      	ldr	r3, [r7, #12]
}
 8010616:	4618      	mov	r0, r3
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	200042fc 	.word	0x200042fc

08010624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010632:	2300      	movs	r3, #0
 8010634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	68ba      	ldr	r2, [r7, #8]
 801063a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	68fa      	ldr	r2, [r7, #12]
 8010640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010642:	68ba      	ldr	r2, [r7, #8]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	429a      	cmp	r2, r3
 8010648:	d812      	bhi.n	8010670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	1ad2      	subs	r2, r2, r3
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	699b      	ldr	r3, [r3, #24]
 8010654:	429a      	cmp	r2, r3
 8010656:	d302      	bcc.n	801065e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010658:	2301      	movs	r3, #1
 801065a:	617b      	str	r3, [r7, #20]
 801065c:	e01b      	b.n	8010696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801065e:	4b10      	ldr	r3, [pc, #64]	; (80106a0 <prvInsertTimerInActiveList+0x7c>)
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	3304      	adds	r3, #4
 8010666:	4619      	mov	r1, r3
 8010668:	4610      	mov	r0, r2
 801066a:	f7fe f9ae 	bl	800e9ca <vListInsert>
 801066e:	e012      	b.n	8010696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	429a      	cmp	r2, r3
 8010676:	d206      	bcs.n	8010686 <prvInsertTimerInActiveList+0x62>
 8010678:	68ba      	ldr	r2, [r7, #8]
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	429a      	cmp	r2, r3
 801067e:	d302      	bcc.n	8010686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010680:	2301      	movs	r3, #1
 8010682:	617b      	str	r3, [r7, #20]
 8010684:	e007      	b.n	8010696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010686:	4b07      	ldr	r3, [pc, #28]	; (80106a4 <prvInsertTimerInActiveList+0x80>)
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	3304      	adds	r3, #4
 801068e:	4619      	mov	r1, r3
 8010690:	4610      	mov	r0, r2
 8010692:	f7fe f99a 	bl	800e9ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010696:	697b      	ldr	r3, [r7, #20]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3718      	adds	r7, #24
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	200042f0 	.word	0x200042f0
 80106a4:	200042ec 	.word	0x200042ec

080106a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b08e      	sub	sp, #56	; 0x38
 80106ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106ae:	e0d0      	b.n	8010852 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	da1a      	bge.n	80106ec <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80106b6:	1d3b      	adds	r3, r7, #4
 80106b8:	3304      	adds	r3, #4
 80106ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80106bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10c      	bne.n	80106dc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	b672      	cpsid	i
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	b662      	cpsie	i
 80106d6:	61fb      	str	r3, [r7, #28]
}
 80106d8:	bf00      	nop
 80106da:	e7fe      	b.n	80106da <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80106dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106e2:	6850      	ldr	r0, [r2, #4]
 80106e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106e6:	6892      	ldr	r2, [r2, #8]
 80106e8:	4611      	mov	r1, r2
 80106ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f2c0 80af 	blt.w	8010852 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	695b      	ldr	r3, [r3, #20]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d004      	beq.n	801070a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010702:	3304      	adds	r3, #4
 8010704:	4618      	mov	r0, r3
 8010706:	f7fe f999 	bl	800ea3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801070a:	463b      	mov	r3, r7
 801070c:	4618      	mov	r0, r3
 801070e:	f7ff ff69 	bl	80105e4 <prvSampleTimeNow>
 8010712:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2b09      	cmp	r3, #9
 8010718:	f200 809a 	bhi.w	8010850 <prvProcessReceivedCommands+0x1a8>
 801071c:	a201      	add	r2, pc, #4	; (adr r2, 8010724 <prvProcessReceivedCommands+0x7c>)
 801071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010722:	bf00      	nop
 8010724:	0801074d 	.word	0x0801074d
 8010728:	0801074d 	.word	0x0801074d
 801072c:	0801074d 	.word	0x0801074d
 8010730:	080107c5 	.word	0x080107c5
 8010734:	080107d9 	.word	0x080107d9
 8010738:	08010827 	.word	0x08010827
 801073c:	0801074d 	.word	0x0801074d
 8010740:	0801074d 	.word	0x0801074d
 8010744:	080107c5 	.word	0x080107c5
 8010748:	080107d9 	.word	0x080107d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010752:	f043 0301 	orr.w	r3, r3, #1
 8010756:	b2da      	uxtb	r2, r3
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010762:	699b      	ldr	r3, [r3, #24]
 8010764:	18d1      	adds	r1, r2, r3
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801076a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801076c:	f7ff ff5a 	bl	8010624 <prvInsertTimerInActiveList>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d06d      	beq.n	8010852 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010778:	6a1b      	ldr	r3, [r3, #32]
 801077a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801077c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801077e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010784:	f003 0304 	and.w	r3, r3, #4
 8010788:	2b00      	cmp	r3, #0
 801078a:	d062      	beq.n	8010852 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801078c:	68ba      	ldr	r2, [r7, #8]
 801078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010790:	699b      	ldr	r3, [r3, #24]
 8010792:	441a      	add	r2, r3
 8010794:	2300      	movs	r3, #0
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	2300      	movs	r3, #0
 801079a:	2100      	movs	r1, #0
 801079c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801079e:	f7ff fdff 	bl	80103a0 <xTimerGenericCommand>
 80107a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d153      	bne.n	8010852 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80107aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ae:	b672      	cpsid	i
 80107b0:	f383 8811 	msr	BASEPRI, r3
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	f3bf 8f4f 	dsb	sy
 80107bc:	b662      	cpsie	i
 80107be:	61bb      	str	r3, [r7, #24]
}
 80107c0:	bf00      	nop
 80107c2:	e7fe      	b.n	80107c2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107ca:	f023 0301 	bic.w	r3, r3, #1
 80107ce:	b2da      	uxtb	r2, r3
 80107d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80107d6:	e03c      	b.n	8010852 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107de:	f043 0301 	orr.w	r3, r3, #1
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80107ea:	68ba      	ldr	r2, [r7, #8]
 80107ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80107f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f2:	699b      	ldr	r3, [r3, #24]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d10c      	bne.n	8010812 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80107f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fc:	b672      	cpsid	i
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	b662      	cpsie	i
 801080c:	617b      	str	r3, [r7, #20]
}
 801080e:	bf00      	nop
 8010810:	e7fe      	b.n	8010810 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010814:	699a      	ldr	r2, [r3, #24]
 8010816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010818:	18d1      	adds	r1, r2, r3
 801081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801081e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010820:	f7ff ff00 	bl	8010624 <prvInsertTimerInActiveList>
					break;
 8010824:	e015      	b.n	8010852 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801082c:	f003 0302 	and.w	r3, r3, #2
 8010830:	2b00      	cmp	r3, #0
 8010832:	d103      	bne.n	801083c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010836:	f000 fbc7 	bl	8010fc8 <vPortFree>
 801083a:	e00a      	b.n	8010852 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010842:	f023 0301 	bic.w	r3, r3, #1
 8010846:	b2da      	uxtb	r2, r3
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801084e:	e000      	b.n	8010852 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8010850:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010852:	4b08      	ldr	r3, [pc, #32]	; (8010874 <prvProcessReceivedCommands+0x1cc>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	1d39      	adds	r1, r7, #4
 8010858:	2200      	movs	r2, #0
 801085a:	4618      	mov	r0, r3
 801085c:	f7fe fbce 	bl	800effc <xQueueReceive>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	f47f af24 	bne.w	80106b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010868:	bf00      	nop
 801086a:	bf00      	nop
 801086c:	3730      	adds	r7, #48	; 0x30
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	200042f4 	.word	0x200042f4

08010878 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b088      	sub	sp, #32
 801087c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801087e:	e04a      	b.n	8010916 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010880:	4b2e      	ldr	r3, [pc, #184]	; (801093c <prvSwitchTimerLists+0xc4>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	68db      	ldr	r3, [r3, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801088a:	4b2c      	ldr	r3, [pc, #176]	; (801093c <prvSwitchTimerLists+0xc4>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	3304      	adds	r3, #4
 8010898:	4618      	mov	r0, r3
 801089a:	f7fe f8cf 	bl	800ea3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6a1b      	ldr	r3, [r3, #32]
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108ac:	f003 0304 	and.w	r3, r3, #4
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d030      	beq.n	8010916 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	699b      	ldr	r3, [r3, #24]
 80108b8:	693a      	ldr	r2, [r7, #16]
 80108ba:	4413      	add	r3, r2
 80108bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d90e      	bls.n	80108e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80108d2:	4b1a      	ldr	r3, [pc, #104]	; (801093c <prvSwitchTimerLists+0xc4>)
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	3304      	adds	r3, #4
 80108da:	4619      	mov	r1, r3
 80108dc:	4610      	mov	r0, r2
 80108de:	f7fe f874 	bl	800e9ca <vListInsert>
 80108e2:	e018      	b.n	8010916 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80108e4:	2300      	movs	r3, #0
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	2300      	movs	r3, #0
 80108ea:	693a      	ldr	r2, [r7, #16]
 80108ec:	2100      	movs	r1, #0
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f7ff fd56 	bl	80103a0 <xTimerGenericCommand>
 80108f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10c      	bne.n	8010916 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	b672      	cpsid	i
 8010902:	f383 8811 	msr	BASEPRI, r3
 8010906:	f3bf 8f6f 	isb	sy
 801090a:	f3bf 8f4f 	dsb	sy
 801090e:	b662      	cpsie	i
 8010910:	603b      	str	r3, [r7, #0]
}
 8010912:	bf00      	nop
 8010914:	e7fe      	b.n	8010914 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010916:	4b09      	ldr	r3, [pc, #36]	; (801093c <prvSwitchTimerLists+0xc4>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1af      	bne.n	8010880 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010920:	4b06      	ldr	r3, [pc, #24]	; (801093c <prvSwitchTimerLists+0xc4>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010926:	4b06      	ldr	r3, [pc, #24]	; (8010940 <prvSwitchTimerLists+0xc8>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4a04      	ldr	r2, [pc, #16]	; (801093c <prvSwitchTimerLists+0xc4>)
 801092c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801092e:	4a04      	ldr	r2, [pc, #16]	; (8010940 <prvSwitchTimerLists+0xc8>)
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	6013      	str	r3, [r2, #0]
}
 8010934:	bf00      	nop
 8010936:	3718      	adds	r7, #24
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	200042ec 	.word	0x200042ec
 8010940:	200042f0 	.word	0x200042f0

08010944 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801094a:	f000 f947 	bl	8010bdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801094e:	4b15      	ldr	r3, [pc, #84]	; (80109a4 <prvCheckForValidListAndQueue+0x60>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d120      	bne.n	8010998 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010956:	4814      	ldr	r0, [pc, #80]	; (80109a8 <prvCheckForValidListAndQueue+0x64>)
 8010958:	f7fd ffe6 	bl	800e928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801095c:	4813      	ldr	r0, [pc, #76]	; (80109ac <prvCheckForValidListAndQueue+0x68>)
 801095e:	f7fd ffe3 	bl	800e928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010962:	4b13      	ldr	r3, [pc, #76]	; (80109b0 <prvCheckForValidListAndQueue+0x6c>)
 8010964:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <prvCheckForValidListAndQueue+0x64>)
 8010966:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010968:	4b12      	ldr	r3, [pc, #72]	; (80109b4 <prvCheckForValidListAndQueue+0x70>)
 801096a:	4a10      	ldr	r2, [pc, #64]	; (80109ac <prvCheckForValidListAndQueue+0x68>)
 801096c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801096e:	2300      	movs	r3, #0
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	4b11      	ldr	r3, [pc, #68]	; (80109b8 <prvCheckForValidListAndQueue+0x74>)
 8010974:	4a11      	ldr	r2, [pc, #68]	; (80109bc <prvCheckForValidListAndQueue+0x78>)
 8010976:	2110      	movs	r1, #16
 8010978:	200a      	movs	r0, #10
 801097a:	f7fe f8f3 	bl	800eb64 <xQueueGenericCreateStatic>
 801097e:	4603      	mov	r3, r0
 8010980:	4a08      	ldr	r2, [pc, #32]	; (80109a4 <prvCheckForValidListAndQueue+0x60>)
 8010982:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010984:	4b07      	ldr	r3, [pc, #28]	; (80109a4 <prvCheckForValidListAndQueue+0x60>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d005      	beq.n	8010998 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801098c:	4b05      	ldr	r3, [pc, #20]	; (80109a4 <prvCheckForValidListAndQueue+0x60>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	490b      	ldr	r1, [pc, #44]	; (80109c0 <prvCheckForValidListAndQueue+0x7c>)
 8010992:	4618      	mov	r0, r3
 8010994:	f7fe fd28 	bl	800f3e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010998:	f000 f954 	bl	8010c44 <vPortExitCritical>
}
 801099c:	bf00      	nop
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	200042f4 	.word	0x200042f4
 80109a8:	200042c4 	.word	0x200042c4
 80109ac:	200042d8 	.word	0x200042d8
 80109b0:	200042ec 	.word	0x200042ec
 80109b4:	200042f0 	.word	0x200042f0
 80109b8:	200043a0 	.word	0x200043a0
 80109bc:	20004300 	.word	0x20004300
 80109c0:	08013eb8 	.word	0x08013eb8

080109c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80109c4:	b480      	push	{r7}
 80109c6:	b085      	sub	sp, #20
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	3b04      	subs	r3, #4
 80109d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80109dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	3b04      	subs	r3, #4
 80109e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f023 0201 	bic.w	r2, r3, #1
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	3b04      	subs	r3, #4
 80109f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80109f4:	4a0c      	ldr	r2, [pc, #48]	; (8010a28 <pxPortInitialiseStack+0x64>)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	3b14      	subs	r3, #20
 80109fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	3b04      	subs	r3, #4
 8010a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f06f 0202 	mvn.w	r2, #2
 8010a12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	3b20      	subs	r3, #32
 8010a18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3714      	adds	r7, #20
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	08010a2d 	.word	0x08010a2d

08010a2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010a36:	4b14      	ldr	r3, [pc, #80]	; (8010a88 <prvTaskExitError+0x5c>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a3e:	d00c      	beq.n	8010a5a <prvTaskExitError+0x2e>
	__asm volatile
 8010a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a44:	b672      	cpsid	i
 8010a46:	f383 8811 	msr	BASEPRI, r3
 8010a4a:	f3bf 8f6f 	isb	sy
 8010a4e:	f3bf 8f4f 	dsb	sy
 8010a52:	b662      	cpsie	i
 8010a54:	60fb      	str	r3, [r7, #12]
}
 8010a56:	bf00      	nop
 8010a58:	e7fe      	b.n	8010a58 <prvTaskExitError+0x2c>
	__asm volatile
 8010a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5e:	b672      	cpsid	i
 8010a60:	f383 8811 	msr	BASEPRI, r3
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	b662      	cpsie	i
 8010a6e:	60bb      	str	r3, [r7, #8]
}
 8010a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a72:	bf00      	nop
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d0fc      	beq.n	8010a74 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a7a:	bf00      	nop
 8010a7c:	bf00      	nop
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr
 8010a88:	2000025c 	.word	0x2000025c
 8010a8c:	00000000 	.word	0x00000000

08010a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a90:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <pxCurrentTCBConst2>)
 8010a92:	6819      	ldr	r1, [r3, #0]
 8010a94:	6808      	ldr	r0, [r1, #0]
 8010a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9a:	f380 8809 	msr	PSP, r0
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f04f 0000 	mov.w	r0, #0
 8010aa6:	f380 8811 	msr	BASEPRI, r0
 8010aaa:	4770      	bx	lr
 8010aac:	f3af 8000 	nop.w

08010ab0 <pxCurrentTCBConst2>:
 8010ab0:	20003dc4 	.word	0x20003dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010ab4:	bf00      	nop
 8010ab6:	bf00      	nop

08010ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010ab8:	4808      	ldr	r0, [pc, #32]	; (8010adc <prvPortStartFirstTask+0x24>)
 8010aba:	6800      	ldr	r0, [r0, #0]
 8010abc:	6800      	ldr	r0, [r0, #0]
 8010abe:	f380 8808 	msr	MSP, r0
 8010ac2:	f04f 0000 	mov.w	r0, #0
 8010ac6:	f380 8814 	msr	CONTROL, r0
 8010aca:	b662      	cpsie	i
 8010acc:	b661      	cpsie	f
 8010ace:	f3bf 8f4f 	dsb	sy
 8010ad2:	f3bf 8f6f 	isb	sy
 8010ad6:	df00      	svc	0
 8010ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010ada:	bf00      	nop
 8010adc:	e000ed08 	.word	0xe000ed08

08010ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b084      	sub	sp, #16
 8010ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ae6:	4b37      	ldr	r3, [pc, #220]	; (8010bc4 <xPortStartScheduler+0xe4>)
 8010ae8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	22ff      	movs	r2, #255	; 0xff
 8010af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	4b2f      	ldr	r3, [pc, #188]	; (8010bc8 <xPortStartScheduler+0xe8>)
 8010b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010b0e:	4b2f      	ldr	r3, [pc, #188]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b10:	2207      	movs	r2, #7
 8010b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b14:	e009      	b.n	8010b2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010b16:	4b2d      	ldr	r3, [pc, #180]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	4a2b      	ldr	r2, [pc, #172]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010b20:	78fb      	ldrb	r3, [r7, #3]
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b2a:	78fb      	ldrb	r3, [r7, #3]
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b32:	2b80      	cmp	r3, #128	; 0x80
 8010b34:	d0ef      	beq.n	8010b16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010b36:	4b25      	ldr	r3, [pc, #148]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f1c3 0307 	rsb	r3, r3, #7
 8010b3e:	2b04      	cmp	r3, #4
 8010b40:	d00c      	beq.n	8010b5c <xPortStartScheduler+0x7c>
	__asm volatile
 8010b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b46:	b672      	cpsid	i
 8010b48:	f383 8811 	msr	BASEPRI, r3
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	f3bf 8f4f 	dsb	sy
 8010b54:	b662      	cpsie	i
 8010b56:	60bb      	str	r3, [r7, #8]
}
 8010b58:	bf00      	nop
 8010b5a:	e7fe      	b.n	8010b5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b5c:	4b1b      	ldr	r3, [pc, #108]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	021b      	lsls	r3, r3, #8
 8010b62:	4a1a      	ldr	r2, [pc, #104]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b66:	4b19      	ldr	r3, [pc, #100]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b6e:	4a17      	ldr	r2, [pc, #92]	; (8010bcc <xPortStartScheduler+0xec>)
 8010b70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b7a:	4b15      	ldr	r3, [pc, #84]	; (8010bd0 <xPortStartScheduler+0xf0>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a14      	ldr	r2, [pc, #80]	; (8010bd0 <xPortStartScheduler+0xf0>)
 8010b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b86:	4b12      	ldr	r3, [pc, #72]	; (8010bd0 <xPortStartScheduler+0xf0>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4a11      	ldr	r2, [pc, #68]	; (8010bd0 <xPortStartScheduler+0xf0>)
 8010b8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b92:	f000 f8dd 	bl	8010d50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b96:	4b0f      	ldr	r3, [pc, #60]	; (8010bd4 <xPortStartScheduler+0xf4>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b9c:	f000 f8fc 	bl	8010d98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ba0:	4b0d      	ldr	r3, [pc, #52]	; (8010bd8 <xPortStartScheduler+0xf8>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4a0c      	ldr	r2, [pc, #48]	; (8010bd8 <xPortStartScheduler+0xf8>)
 8010ba6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010baa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010bac:	f7ff ff84 	bl	8010ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010bb0:	f7ff f84e 	bl	800fc50 <vTaskSwitchContext>
	prvTaskExitError();
 8010bb4:	f7ff ff3a 	bl	8010a2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	e000e400 	.word	0xe000e400
 8010bc8:	200043f0 	.word	0x200043f0
 8010bcc:	200043f4 	.word	0x200043f4
 8010bd0:	e000ed20 	.word	0xe000ed20
 8010bd4:	2000025c 	.word	0x2000025c
 8010bd8:	e000ef34 	.word	0xe000ef34

08010bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
	__asm volatile
 8010be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be6:	b672      	cpsid	i
 8010be8:	f383 8811 	msr	BASEPRI, r3
 8010bec:	f3bf 8f6f 	isb	sy
 8010bf0:	f3bf 8f4f 	dsb	sy
 8010bf4:	b662      	cpsie	i
 8010bf6:	607b      	str	r3, [r7, #4]
}
 8010bf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bfa:	4b10      	ldr	r3, [pc, #64]	; (8010c3c <vPortEnterCritical+0x60>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	4a0e      	ldr	r2, [pc, #56]	; (8010c3c <vPortEnterCritical+0x60>)
 8010c02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010c04:	4b0d      	ldr	r3, [pc, #52]	; (8010c3c <vPortEnterCritical+0x60>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d111      	bne.n	8010c30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010c0c:	4b0c      	ldr	r3, [pc, #48]	; (8010c40 <vPortEnterCritical+0x64>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00c      	beq.n	8010c30 <vPortEnterCritical+0x54>
	__asm volatile
 8010c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c1a:	b672      	cpsid	i
 8010c1c:	f383 8811 	msr	BASEPRI, r3
 8010c20:	f3bf 8f6f 	isb	sy
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	b662      	cpsie	i
 8010c2a:	603b      	str	r3, [r7, #0]
}
 8010c2c:	bf00      	nop
 8010c2e:	e7fe      	b.n	8010c2e <vPortEnterCritical+0x52>
	}
}
 8010c30:	bf00      	nop
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	2000025c 	.word	0x2000025c
 8010c40:	e000ed04 	.word	0xe000ed04

08010c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c44:	b480      	push	{r7}
 8010c46:	b083      	sub	sp, #12
 8010c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c4a:	4b13      	ldr	r3, [pc, #76]	; (8010c98 <vPortExitCritical+0x54>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10c      	bne.n	8010c6c <vPortExitCritical+0x28>
	__asm volatile
 8010c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c56:	b672      	cpsid	i
 8010c58:	f383 8811 	msr	BASEPRI, r3
 8010c5c:	f3bf 8f6f 	isb	sy
 8010c60:	f3bf 8f4f 	dsb	sy
 8010c64:	b662      	cpsie	i
 8010c66:	607b      	str	r3, [r7, #4]
}
 8010c68:	bf00      	nop
 8010c6a:	e7fe      	b.n	8010c6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010c6c:	4b0a      	ldr	r3, [pc, #40]	; (8010c98 <vPortExitCritical+0x54>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	4a09      	ldr	r2, [pc, #36]	; (8010c98 <vPortExitCritical+0x54>)
 8010c74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c76:	4b08      	ldr	r3, [pc, #32]	; (8010c98 <vPortExitCritical+0x54>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d105      	bne.n	8010c8a <vPortExitCritical+0x46>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	f383 8811 	msr	BASEPRI, r3
}
 8010c88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c8a:	bf00      	nop
 8010c8c:	370c      	adds	r7, #12
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop
 8010c98:	2000025c 	.word	0x2000025c
 8010c9c:	00000000 	.word	0x00000000

08010ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ca0:	f3ef 8009 	mrs	r0, PSP
 8010ca4:	f3bf 8f6f 	isb	sy
 8010ca8:	4b15      	ldr	r3, [pc, #84]	; (8010d00 <pxCurrentTCBConst>)
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	f01e 0f10 	tst.w	lr, #16
 8010cb0:	bf08      	it	eq
 8010cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cba:	6010      	str	r0, [r2, #0]
 8010cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010cc4:	b672      	cpsid	i
 8010cc6:	f380 8811 	msr	BASEPRI, r0
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	f3bf 8f6f 	isb	sy
 8010cd2:	b662      	cpsie	i
 8010cd4:	f7fe ffbc 	bl	800fc50 <vTaskSwitchContext>
 8010cd8:	f04f 0000 	mov.w	r0, #0
 8010cdc:	f380 8811 	msr	BASEPRI, r0
 8010ce0:	bc09      	pop	{r0, r3}
 8010ce2:	6819      	ldr	r1, [r3, #0]
 8010ce4:	6808      	ldr	r0, [r1, #0]
 8010ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cea:	f01e 0f10 	tst.w	lr, #16
 8010cee:	bf08      	it	eq
 8010cf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010cf4:	f380 8809 	msr	PSP, r0
 8010cf8:	f3bf 8f6f 	isb	sy
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop

08010d00 <pxCurrentTCBConst>:
 8010d00:	20003dc4 	.word	0x20003dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010d04:	bf00      	nop
 8010d06:	bf00      	nop

08010d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8010d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d12:	b672      	cpsid	i
 8010d14:	f383 8811 	msr	BASEPRI, r3
 8010d18:	f3bf 8f6f 	isb	sy
 8010d1c:	f3bf 8f4f 	dsb	sy
 8010d20:	b662      	cpsie	i
 8010d22:	607b      	str	r3, [r7, #4]
}
 8010d24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010d26:	f7fe fed7 	bl	800fad8 <xTaskIncrementTick>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d003      	beq.n	8010d38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d30:	4b06      	ldr	r3, [pc, #24]	; (8010d4c <SysTick_Handler+0x44>)
 8010d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d36:	601a      	str	r2, [r3, #0]
 8010d38:	2300      	movs	r3, #0
 8010d3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	f383 8811 	msr	BASEPRI, r3
}
 8010d42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d44:	bf00      	nop
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	e000ed04 	.word	0xe000ed04

08010d50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d50:	b480      	push	{r7}
 8010d52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d54:	4b0b      	ldr	r3, [pc, #44]	; (8010d84 <vPortSetupTimerInterrupt+0x34>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d5a:	4b0b      	ldr	r3, [pc, #44]	; (8010d88 <vPortSetupTimerInterrupt+0x38>)
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d60:	4b0a      	ldr	r3, [pc, #40]	; (8010d8c <vPortSetupTimerInterrupt+0x3c>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a0a      	ldr	r2, [pc, #40]	; (8010d90 <vPortSetupTimerInterrupt+0x40>)
 8010d66:	fba2 2303 	umull	r2, r3, r2, r3
 8010d6a:	099b      	lsrs	r3, r3, #6
 8010d6c:	4a09      	ldr	r2, [pc, #36]	; (8010d94 <vPortSetupTimerInterrupt+0x44>)
 8010d6e:	3b01      	subs	r3, #1
 8010d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d72:	4b04      	ldr	r3, [pc, #16]	; (8010d84 <vPortSetupTimerInterrupt+0x34>)
 8010d74:	2207      	movs	r2, #7
 8010d76:	601a      	str	r2, [r3, #0]
}
 8010d78:	bf00      	nop
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	e000e010 	.word	0xe000e010
 8010d88:	e000e018 	.word	0xe000e018
 8010d8c:	20000250 	.word	0x20000250
 8010d90:	10624dd3 	.word	0x10624dd3
 8010d94:	e000e014 	.word	0xe000e014

08010d98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010da8 <vPortEnableVFP+0x10>
 8010d9c:	6801      	ldr	r1, [r0, #0]
 8010d9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010da2:	6001      	str	r1, [r0, #0]
 8010da4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010da6:	bf00      	nop
 8010da8:	e000ed88 	.word	0xe000ed88

08010dac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010dac:	b480      	push	{r7}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010db2:	f3ef 8305 	mrs	r3, IPSR
 8010db6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2b0f      	cmp	r3, #15
 8010dbc:	d916      	bls.n	8010dec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010dbe:	4a19      	ldr	r2, [pc, #100]	; (8010e24 <vPortValidateInterruptPriority+0x78>)
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010dc8:	4b17      	ldr	r3, [pc, #92]	; (8010e28 <vPortValidateInterruptPriority+0x7c>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	7afa      	ldrb	r2, [r7, #11]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d20c      	bcs.n	8010dec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd6:	b672      	cpsid	i
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	b662      	cpsie	i
 8010de6:	607b      	str	r3, [r7, #4]
}
 8010de8:	bf00      	nop
 8010dea:	e7fe      	b.n	8010dea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010dec:	4b0f      	ldr	r3, [pc, #60]	; (8010e2c <vPortValidateInterruptPriority+0x80>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010df4:	4b0e      	ldr	r3, [pc, #56]	; (8010e30 <vPortValidateInterruptPriority+0x84>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d90c      	bls.n	8010e16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e00:	b672      	cpsid	i
 8010e02:	f383 8811 	msr	BASEPRI, r3
 8010e06:	f3bf 8f6f 	isb	sy
 8010e0a:	f3bf 8f4f 	dsb	sy
 8010e0e:	b662      	cpsie	i
 8010e10:	603b      	str	r3, [r7, #0]
}
 8010e12:	bf00      	nop
 8010e14:	e7fe      	b.n	8010e14 <vPortValidateInterruptPriority+0x68>
	}
 8010e16:	bf00      	nop
 8010e18:	3714      	adds	r7, #20
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	e000e3f0 	.word	0xe000e3f0
 8010e28:	200043f0 	.word	0x200043f0
 8010e2c:	e000ed0c 	.word	0xe000ed0c
 8010e30:	200043f4 	.word	0x200043f4

08010e34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b08a      	sub	sp, #40	; 0x28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e40:	f7fe fd7a 	bl	800f938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e44:	4b5b      	ldr	r3, [pc, #364]	; (8010fb4 <pvPortMalloc+0x180>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d101      	bne.n	8010e50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e4c:	f000 f91a 	bl	8011084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e50:	4b59      	ldr	r3, [pc, #356]	; (8010fb8 <pvPortMalloc+0x184>)
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	4013      	ands	r3, r2
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	f040 8092 	bne.w	8010f82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d01f      	beq.n	8010ea4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010e64:	2208      	movs	r2, #8
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4413      	add	r3, r2
 8010e6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f003 0307 	and.w	r3, r3, #7
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d016      	beq.n	8010ea4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f023 0307 	bic.w	r3, r3, #7
 8010e7c:	3308      	adds	r3, #8
 8010e7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f003 0307 	and.w	r3, r3, #7
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00c      	beq.n	8010ea4 <pvPortMalloc+0x70>
	__asm volatile
 8010e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e8e:	b672      	cpsid	i
 8010e90:	f383 8811 	msr	BASEPRI, r3
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	f3bf 8f4f 	dsb	sy
 8010e9c:	b662      	cpsie	i
 8010e9e:	617b      	str	r3, [r7, #20]
}
 8010ea0:	bf00      	nop
 8010ea2:	e7fe      	b.n	8010ea2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d06b      	beq.n	8010f82 <pvPortMalloc+0x14e>
 8010eaa:	4b44      	ldr	r3, [pc, #272]	; (8010fbc <pvPortMalloc+0x188>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d866      	bhi.n	8010f82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010eb4:	4b42      	ldr	r3, [pc, #264]	; (8010fc0 <pvPortMalloc+0x18c>)
 8010eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010eb8:	4b41      	ldr	r3, [pc, #260]	; (8010fc0 <pvPortMalloc+0x18c>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ebe:	e004      	b.n	8010eca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d903      	bls.n	8010edc <pvPortMalloc+0xa8>
 8010ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d1f1      	bne.n	8010ec0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010edc:	4b35      	ldr	r3, [pc, #212]	; (8010fb4 <pvPortMalloc+0x180>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d04d      	beq.n	8010f82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010ee6:	6a3b      	ldr	r3, [r7, #32]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2208      	movs	r2, #8
 8010eec:	4413      	add	r3, r2
 8010eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	6a3b      	ldr	r3, [r7, #32]
 8010ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efa:	685a      	ldr	r2, [r3, #4]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	1ad2      	subs	r2, r2, r3
 8010f00:	2308      	movs	r3, #8
 8010f02:	005b      	lsls	r3, r3, #1
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d921      	bls.n	8010f4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4413      	add	r3, r2
 8010f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	f003 0307 	and.w	r3, r3, #7
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00c      	beq.n	8010f34 <pvPortMalloc+0x100>
	__asm volatile
 8010f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f1e:	b672      	cpsid	i
 8010f20:	f383 8811 	msr	BASEPRI, r3
 8010f24:	f3bf 8f6f 	isb	sy
 8010f28:	f3bf 8f4f 	dsb	sy
 8010f2c:	b662      	cpsie	i
 8010f2e:	613b      	str	r3, [r7, #16]
}
 8010f30:	bf00      	nop
 8010f32:	e7fe      	b.n	8010f32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f36:	685a      	ldr	r2, [r3, #4]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	1ad2      	subs	r2, r2, r3
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f46:	69b8      	ldr	r0, [r7, #24]
 8010f48:	f000 f8fe 	bl	8011148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f4c:	4b1b      	ldr	r3, [pc, #108]	; (8010fbc <pvPortMalloc+0x188>)
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	4a19      	ldr	r2, [pc, #100]	; (8010fbc <pvPortMalloc+0x188>)
 8010f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f5a:	4b18      	ldr	r3, [pc, #96]	; (8010fbc <pvPortMalloc+0x188>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	4b19      	ldr	r3, [pc, #100]	; (8010fc4 <pvPortMalloc+0x190>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d203      	bcs.n	8010f6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f66:	4b15      	ldr	r3, [pc, #84]	; (8010fbc <pvPortMalloc+0x188>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a16      	ldr	r2, [pc, #88]	; (8010fc4 <pvPortMalloc+0x190>)
 8010f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f70:	685a      	ldr	r2, [r3, #4]
 8010f72:	4b11      	ldr	r3, [pc, #68]	; (8010fb8 <pvPortMalloc+0x184>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	431a      	orrs	r2, r3
 8010f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7e:	2200      	movs	r2, #0
 8010f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f82:	f7fe fce7 	bl	800f954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	f003 0307 	and.w	r3, r3, #7
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00c      	beq.n	8010faa <pvPortMalloc+0x176>
	__asm volatile
 8010f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f94:	b672      	cpsid	i
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	b662      	cpsie	i
 8010fa4:	60fb      	str	r3, [r7, #12]
}
 8010fa6:	bf00      	nop
 8010fa8:	e7fe      	b.n	8010fa8 <pvPortMalloc+0x174>
	return pvReturn;
 8010faa:	69fb      	ldr	r3, [r7, #28]
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3728      	adds	r7, #40	; 0x28
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	20008000 	.word	0x20008000
 8010fb8:	2000800c 	.word	0x2000800c
 8010fbc:	20008004 	.word	0x20008004
 8010fc0:	20007ff8 	.word	0x20007ff8
 8010fc4:	20008008 	.word	0x20008008

08010fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b086      	sub	sp, #24
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d04c      	beq.n	8011074 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010fda:	2308      	movs	r3, #8
 8010fdc:	425b      	negs	r3, r3
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	685a      	ldr	r2, [r3, #4]
 8010fec:	4b23      	ldr	r3, [pc, #140]	; (801107c <vPortFree+0xb4>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4013      	ands	r3, r2
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d10c      	bne.n	8011010 <vPortFree+0x48>
	__asm volatile
 8010ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffa:	b672      	cpsid	i
 8010ffc:	f383 8811 	msr	BASEPRI, r3
 8011000:	f3bf 8f6f 	isb	sy
 8011004:	f3bf 8f4f 	dsb	sy
 8011008:	b662      	cpsie	i
 801100a:	60fb      	str	r3, [r7, #12]
}
 801100c:	bf00      	nop
 801100e:	e7fe      	b.n	801100e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00c      	beq.n	8011032 <vPortFree+0x6a>
	__asm volatile
 8011018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101c:	b672      	cpsid	i
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	b662      	cpsie	i
 801102c:	60bb      	str	r3, [r7, #8]
}
 801102e:	bf00      	nop
 8011030:	e7fe      	b.n	8011030 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	685a      	ldr	r2, [r3, #4]
 8011036:	4b11      	ldr	r3, [pc, #68]	; (801107c <vPortFree+0xb4>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4013      	ands	r3, r2
 801103c:	2b00      	cmp	r3, #0
 801103e:	d019      	beq.n	8011074 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d115      	bne.n	8011074 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	685a      	ldr	r2, [r3, #4]
 801104c:	4b0b      	ldr	r3, [pc, #44]	; (801107c <vPortFree+0xb4>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	43db      	mvns	r3, r3
 8011052:	401a      	ands	r2, r3
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011058:	f7fe fc6e 	bl	800f938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	685a      	ldr	r2, [r3, #4]
 8011060:	4b07      	ldr	r3, [pc, #28]	; (8011080 <vPortFree+0xb8>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4413      	add	r3, r2
 8011066:	4a06      	ldr	r2, [pc, #24]	; (8011080 <vPortFree+0xb8>)
 8011068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801106a:	6938      	ldr	r0, [r7, #16]
 801106c:	f000 f86c 	bl	8011148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011070:	f7fe fc70 	bl	800f954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011074:	bf00      	nop
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	2000800c 	.word	0x2000800c
 8011080:	20008004 	.word	0x20008004

08011084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011084:	b480      	push	{r7}
 8011086:	b085      	sub	sp, #20
 8011088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801108a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801108e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011090:	4b27      	ldr	r3, [pc, #156]	; (8011130 <prvHeapInit+0xac>)
 8011092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f003 0307 	and.w	r3, r3, #7
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00c      	beq.n	80110b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	3307      	adds	r3, #7
 80110a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f023 0307 	bic.w	r3, r3, #7
 80110aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	1ad3      	subs	r3, r2, r3
 80110b2:	4a1f      	ldr	r2, [pc, #124]	; (8011130 <prvHeapInit+0xac>)
 80110b4:	4413      	add	r3, r2
 80110b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80110bc:	4a1d      	ldr	r2, [pc, #116]	; (8011134 <prvHeapInit+0xb0>)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80110c2:	4b1c      	ldr	r3, [pc, #112]	; (8011134 <prvHeapInit+0xb0>)
 80110c4:	2200      	movs	r2, #0
 80110c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	4413      	add	r3, r2
 80110ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110d0:	2208      	movs	r2, #8
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	1a9b      	subs	r3, r3, r2
 80110d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f023 0307 	bic.w	r3, r3, #7
 80110de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	4a15      	ldr	r2, [pc, #84]	; (8011138 <prvHeapInit+0xb4>)
 80110e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110e6:	4b14      	ldr	r3, [pc, #80]	; (8011138 <prvHeapInit+0xb4>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2200      	movs	r2, #0
 80110ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110ee:	4b12      	ldr	r3, [pc, #72]	; (8011138 <prvHeapInit+0xb4>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	2200      	movs	r2, #0
 80110f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	1ad2      	subs	r2, r2, r3
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011104:	4b0c      	ldr	r3, [pc, #48]	; (8011138 <prvHeapInit+0xb4>)
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	4a0a      	ldr	r2, [pc, #40]	; (801113c <prvHeapInit+0xb8>)
 8011112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	4a09      	ldr	r2, [pc, #36]	; (8011140 <prvHeapInit+0xbc>)
 801111a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801111c:	4b09      	ldr	r3, [pc, #36]	; (8011144 <prvHeapInit+0xc0>)
 801111e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011122:	601a      	str	r2, [r3, #0]
}
 8011124:	bf00      	nop
 8011126:	3714      	adds	r7, #20
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr
 8011130:	200043f8 	.word	0x200043f8
 8011134:	20007ff8 	.word	0x20007ff8
 8011138:	20008000 	.word	0x20008000
 801113c:	20008008 	.word	0x20008008
 8011140:	20008004 	.word	0x20008004
 8011144:	2000800c 	.word	0x2000800c

08011148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011148:	b480      	push	{r7}
 801114a:	b085      	sub	sp, #20
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011150:	4b28      	ldr	r3, [pc, #160]	; (80111f4 <prvInsertBlockIntoFreeList+0xac>)
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	e002      	b.n	801115c <prvInsertBlockIntoFreeList+0x14>
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	429a      	cmp	r2, r3
 8011164:	d8f7      	bhi.n	8011156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	68ba      	ldr	r2, [r7, #8]
 8011170:	4413      	add	r3, r2
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	429a      	cmp	r2, r3
 8011176:	d108      	bne.n	801118a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	685a      	ldr	r2, [r3, #4]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	441a      	add	r2, r3
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	68ba      	ldr	r2, [r7, #8]
 8011194:	441a      	add	r2, r3
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	429a      	cmp	r2, r3
 801119c:	d118      	bne.n	80111d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	4b15      	ldr	r3, [pc, #84]	; (80111f8 <prvInsertBlockIntoFreeList+0xb0>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d00d      	beq.n	80111c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	685a      	ldr	r2, [r3, #4]
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	441a      	add	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	601a      	str	r2, [r3, #0]
 80111c4:	e008      	b.n	80111d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80111c6:	4b0c      	ldr	r3, [pc, #48]	; (80111f8 <prvInsertBlockIntoFreeList+0xb0>)
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	601a      	str	r2, [r3, #0]
 80111ce:	e003      	b.n	80111d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d002      	beq.n	80111e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111e6:	bf00      	nop
 80111e8:	3714      	adds	r7, #20
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	20007ff8 	.word	0x20007ff8
 80111f8:	20008000 	.word	0x20008000

080111fc <__assert_func>:
 80111fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111fe:	4614      	mov	r4, r2
 8011200:	461a      	mov	r2, r3
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <__assert_func+0x2c>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4605      	mov	r5, r0
 8011208:	68d8      	ldr	r0, [r3, #12]
 801120a:	b14c      	cbz	r4, 8011220 <__assert_func+0x24>
 801120c:	4b07      	ldr	r3, [pc, #28]	; (801122c <__assert_func+0x30>)
 801120e:	9100      	str	r1, [sp, #0]
 8011210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011214:	4906      	ldr	r1, [pc, #24]	; (8011230 <__assert_func+0x34>)
 8011216:	462b      	mov	r3, r5
 8011218:	f000 fa4a 	bl	80116b0 <fiprintf>
 801121c:	f000 fbc5 	bl	80119aa <abort>
 8011220:	4b04      	ldr	r3, [pc, #16]	; (8011234 <__assert_func+0x38>)
 8011222:	461c      	mov	r4, r3
 8011224:	e7f3      	b.n	801120e <__assert_func+0x12>
 8011226:	bf00      	nop
 8011228:	200002b8 	.word	0x200002b8
 801122c:	08014528 	.word	0x08014528
 8011230:	08014535 	.word	0x08014535
 8011234:	08014563 	.word	0x08014563

08011238 <atoi>:
 8011238:	220a      	movs	r2, #10
 801123a:	2100      	movs	r1, #0
 801123c:	f000 b98a 	b.w	8011554 <strtol>

08011240 <calloc>:
 8011240:	4b02      	ldr	r3, [pc, #8]	; (801124c <calloc+0xc>)
 8011242:	460a      	mov	r2, r1
 8011244:	4601      	mov	r1, r0
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f000 b802 	b.w	8011250 <_calloc_r>
 801124c:	200002b8 	.word	0x200002b8

08011250 <_calloc_r>:
 8011250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011252:	fba1 2402 	umull	r2, r4, r1, r2
 8011256:	b94c      	cbnz	r4, 801126c <_calloc_r+0x1c>
 8011258:	4611      	mov	r1, r2
 801125a:	9201      	str	r2, [sp, #4]
 801125c:	f000 f83e 	bl	80112dc <_malloc_r>
 8011260:	9a01      	ldr	r2, [sp, #4]
 8011262:	4605      	mov	r5, r0
 8011264:	b930      	cbnz	r0, 8011274 <_calloc_r+0x24>
 8011266:	4628      	mov	r0, r5
 8011268:	b003      	add	sp, #12
 801126a:	bd30      	pop	{r4, r5, pc}
 801126c:	220c      	movs	r2, #12
 801126e:	6002      	str	r2, [r0, #0]
 8011270:	2500      	movs	r5, #0
 8011272:	e7f8      	b.n	8011266 <_calloc_r+0x16>
 8011274:	4621      	mov	r1, r4
 8011276:	f000 fac0 	bl	80117fa <memset>
 801127a:	e7f4      	b.n	8011266 <_calloc_r+0x16>

0801127c <malloc>:
 801127c:	4b02      	ldr	r3, [pc, #8]	; (8011288 <malloc+0xc>)
 801127e:	4601      	mov	r1, r0
 8011280:	6818      	ldr	r0, [r3, #0]
 8011282:	f000 b82b 	b.w	80112dc <_malloc_r>
 8011286:	bf00      	nop
 8011288:	200002b8 	.word	0x200002b8

0801128c <free>:
 801128c:	4b02      	ldr	r3, [pc, #8]	; (8011298 <free+0xc>)
 801128e:	4601      	mov	r1, r0
 8011290:	6818      	ldr	r0, [r3, #0]
 8011292:	f000 bb91 	b.w	80119b8 <_free_r>
 8011296:	bf00      	nop
 8011298:	200002b8 	.word	0x200002b8

0801129c <sbrk_aligned>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	4e0e      	ldr	r6, [pc, #56]	; (80112d8 <sbrk_aligned+0x3c>)
 80112a0:	460c      	mov	r4, r1
 80112a2:	6831      	ldr	r1, [r6, #0]
 80112a4:	4605      	mov	r5, r0
 80112a6:	b911      	cbnz	r1, 80112ae <sbrk_aligned+0x12>
 80112a8:	f000 fb1a 	bl	80118e0 <_sbrk_r>
 80112ac:	6030      	str	r0, [r6, #0]
 80112ae:	4621      	mov	r1, r4
 80112b0:	4628      	mov	r0, r5
 80112b2:	f000 fb15 	bl	80118e0 <_sbrk_r>
 80112b6:	1c43      	adds	r3, r0, #1
 80112b8:	d00a      	beq.n	80112d0 <sbrk_aligned+0x34>
 80112ba:	1cc4      	adds	r4, r0, #3
 80112bc:	f024 0403 	bic.w	r4, r4, #3
 80112c0:	42a0      	cmp	r0, r4
 80112c2:	d007      	beq.n	80112d4 <sbrk_aligned+0x38>
 80112c4:	1a21      	subs	r1, r4, r0
 80112c6:	4628      	mov	r0, r5
 80112c8:	f000 fb0a 	bl	80118e0 <_sbrk_r>
 80112cc:	3001      	adds	r0, #1
 80112ce:	d101      	bne.n	80112d4 <sbrk_aligned+0x38>
 80112d0:	f04f 34ff 	mov.w	r4, #4294967295
 80112d4:	4620      	mov	r0, r4
 80112d6:	bd70      	pop	{r4, r5, r6, pc}
 80112d8:	20008014 	.word	0x20008014

080112dc <_malloc_r>:
 80112dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112e0:	1ccd      	adds	r5, r1, #3
 80112e2:	f025 0503 	bic.w	r5, r5, #3
 80112e6:	3508      	adds	r5, #8
 80112e8:	2d0c      	cmp	r5, #12
 80112ea:	bf38      	it	cc
 80112ec:	250c      	movcc	r5, #12
 80112ee:	2d00      	cmp	r5, #0
 80112f0:	4607      	mov	r7, r0
 80112f2:	db01      	blt.n	80112f8 <_malloc_r+0x1c>
 80112f4:	42a9      	cmp	r1, r5
 80112f6:	d905      	bls.n	8011304 <_malloc_r+0x28>
 80112f8:	230c      	movs	r3, #12
 80112fa:	603b      	str	r3, [r7, #0]
 80112fc:	2600      	movs	r6, #0
 80112fe:	4630      	mov	r0, r6
 8011300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011304:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80113d8 <_malloc_r+0xfc>
 8011308:	f000 f868 	bl	80113dc <__malloc_lock>
 801130c:	f8d8 3000 	ldr.w	r3, [r8]
 8011310:	461c      	mov	r4, r3
 8011312:	bb5c      	cbnz	r4, 801136c <_malloc_r+0x90>
 8011314:	4629      	mov	r1, r5
 8011316:	4638      	mov	r0, r7
 8011318:	f7ff ffc0 	bl	801129c <sbrk_aligned>
 801131c:	1c43      	adds	r3, r0, #1
 801131e:	4604      	mov	r4, r0
 8011320:	d155      	bne.n	80113ce <_malloc_r+0xf2>
 8011322:	f8d8 4000 	ldr.w	r4, [r8]
 8011326:	4626      	mov	r6, r4
 8011328:	2e00      	cmp	r6, #0
 801132a:	d145      	bne.n	80113b8 <_malloc_r+0xdc>
 801132c:	2c00      	cmp	r4, #0
 801132e:	d048      	beq.n	80113c2 <_malloc_r+0xe6>
 8011330:	6823      	ldr	r3, [r4, #0]
 8011332:	4631      	mov	r1, r6
 8011334:	4638      	mov	r0, r7
 8011336:	eb04 0903 	add.w	r9, r4, r3
 801133a:	f000 fad1 	bl	80118e0 <_sbrk_r>
 801133e:	4581      	cmp	r9, r0
 8011340:	d13f      	bne.n	80113c2 <_malloc_r+0xe6>
 8011342:	6821      	ldr	r1, [r4, #0]
 8011344:	1a6d      	subs	r5, r5, r1
 8011346:	4629      	mov	r1, r5
 8011348:	4638      	mov	r0, r7
 801134a:	f7ff ffa7 	bl	801129c <sbrk_aligned>
 801134e:	3001      	adds	r0, #1
 8011350:	d037      	beq.n	80113c2 <_malloc_r+0xe6>
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	442b      	add	r3, r5
 8011356:	6023      	str	r3, [r4, #0]
 8011358:	f8d8 3000 	ldr.w	r3, [r8]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d038      	beq.n	80113d2 <_malloc_r+0xf6>
 8011360:	685a      	ldr	r2, [r3, #4]
 8011362:	42a2      	cmp	r2, r4
 8011364:	d12b      	bne.n	80113be <_malloc_r+0xe2>
 8011366:	2200      	movs	r2, #0
 8011368:	605a      	str	r2, [r3, #4]
 801136a:	e00f      	b.n	801138c <_malloc_r+0xb0>
 801136c:	6822      	ldr	r2, [r4, #0]
 801136e:	1b52      	subs	r2, r2, r5
 8011370:	d41f      	bmi.n	80113b2 <_malloc_r+0xd6>
 8011372:	2a0b      	cmp	r2, #11
 8011374:	d917      	bls.n	80113a6 <_malloc_r+0xca>
 8011376:	1961      	adds	r1, r4, r5
 8011378:	42a3      	cmp	r3, r4
 801137a:	6025      	str	r5, [r4, #0]
 801137c:	bf18      	it	ne
 801137e:	6059      	strne	r1, [r3, #4]
 8011380:	6863      	ldr	r3, [r4, #4]
 8011382:	bf08      	it	eq
 8011384:	f8c8 1000 	streq.w	r1, [r8]
 8011388:	5162      	str	r2, [r4, r5]
 801138a:	604b      	str	r3, [r1, #4]
 801138c:	4638      	mov	r0, r7
 801138e:	f104 060b 	add.w	r6, r4, #11
 8011392:	f000 f829 	bl	80113e8 <__malloc_unlock>
 8011396:	f026 0607 	bic.w	r6, r6, #7
 801139a:	1d23      	adds	r3, r4, #4
 801139c:	1af2      	subs	r2, r6, r3
 801139e:	d0ae      	beq.n	80112fe <_malloc_r+0x22>
 80113a0:	1b9b      	subs	r3, r3, r6
 80113a2:	50a3      	str	r3, [r4, r2]
 80113a4:	e7ab      	b.n	80112fe <_malloc_r+0x22>
 80113a6:	42a3      	cmp	r3, r4
 80113a8:	6862      	ldr	r2, [r4, #4]
 80113aa:	d1dd      	bne.n	8011368 <_malloc_r+0x8c>
 80113ac:	f8c8 2000 	str.w	r2, [r8]
 80113b0:	e7ec      	b.n	801138c <_malloc_r+0xb0>
 80113b2:	4623      	mov	r3, r4
 80113b4:	6864      	ldr	r4, [r4, #4]
 80113b6:	e7ac      	b.n	8011312 <_malloc_r+0x36>
 80113b8:	4634      	mov	r4, r6
 80113ba:	6876      	ldr	r6, [r6, #4]
 80113bc:	e7b4      	b.n	8011328 <_malloc_r+0x4c>
 80113be:	4613      	mov	r3, r2
 80113c0:	e7cc      	b.n	801135c <_malloc_r+0x80>
 80113c2:	230c      	movs	r3, #12
 80113c4:	603b      	str	r3, [r7, #0]
 80113c6:	4638      	mov	r0, r7
 80113c8:	f000 f80e 	bl	80113e8 <__malloc_unlock>
 80113cc:	e797      	b.n	80112fe <_malloc_r+0x22>
 80113ce:	6025      	str	r5, [r4, #0]
 80113d0:	e7dc      	b.n	801138c <_malloc_r+0xb0>
 80113d2:	605b      	str	r3, [r3, #4]
 80113d4:	deff      	udf	#255	; 0xff
 80113d6:	bf00      	nop
 80113d8:	20008010 	.word	0x20008010

080113dc <__malloc_lock>:
 80113dc:	4801      	ldr	r0, [pc, #4]	; (80113e4 <__malloc_lock+0x8>)
 80113de:	f000 bacc 	b.w	801197a <__retarget_lock_acquire_recursive>
 80113e2:	bf00      	nop
 80113e4:	20008158 	.word	0x20008158

080113e8 <__malloc_unlock>:
 80113e8:	4801      	ldr	r0, [pc, #4]	; (80113f0 <__malloc_unlock+0x8>)
 80113ea:	f000 bac7 	b.w	801197c <__retarget_lock_release_recursive>
 80113ee:	bf00      	nop
 80113f0:	20008158 	.word	0x20008158

080113f4 <srand>:
 80113f4:	b538      	push	{r3, r4, r5, lr}
 80113f6:	4b10      	ldr	r3, [pc, #64]	; (8011438 <srand+0x44>)
 80113f8:	681d      	ldr	r5, [r3, #0]
 80113fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80113fc:	4604      	mov	r4, r0
 80113fe:	b9b3      	cbnz	r3, 801142e <srand+0x3a>
 8011400:	2018      	movs	r0, #24
 8011402:	f7ff ff3b 	bl	801127c <malloc>
 8011406:	4602      	mov	r2, r0
 8011408:	6328      	str	r0, [r5, #48]	; 0x30
 801140a:	b920      	cbnz	r0, 8011416 <srand+0x22>
 801140c:	4b0b      	ldr	r3, [pc, #44]	; (801143c <srand+0x48>)
 801140e:	480c      	ldr	r0, [pc, #48]	; (8011440 <srand+0x4c>)
 8011410:	2146      	movs	r1, #70	; 0x46
 8011412:	f7ff fef3 	bl	80111fc <__assert_func>
 8011416:	490b      	ldr	r1, [pc, #44]	; (8011444 <srand+0x50>)
 8011418:	4b0b      	ldr	r3, [pc, #44]	; (8011448 <srand+0x54>)
 801141a:	e9c0 1300 	strd	r1, r3, [r0]
 801141e:	4b0b      	ldr	r3, [pc, #44]	; (801144c <srand+0x58>)
 8011420:	6083      	str	r3, [r0, #8]
 8011422:	230b      	movs	r3, #11
 8011424:	8183      	strh	r3, [r0, #12]
 8011426:	2100      	movs	r1, #0
 8011428:	2001      	movs	r0, #1
 801142a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801142e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011430:	2200      	movs	r2, #0
 8011432:	611c      	str	r4, [r3, #16]
 8011434:	615a      	str	r2, [r3, #20]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	200002b8 	.word	0x200002b8
 801143c:	08014564 	.word	0x08014564
 8011440:	0801457b 	.word	0x0801457b
 8011444:	abcd330e 	.word	0xabcd330e
 8011448:	e66d1234 	.word	0xe66d1234
 801144c:	0005deec 	.word	0x0005deec

08011450 <_strtol_l.constprop.0>:
 8011450:	2b01      	cmp	r3, #1
 8011452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011456:	d001      	beq.n	801145c <_strtol_l.constprop.0+0xc>
 8011458:	2b24      	cmp	r3, #36	; 0x24
 801145a:	d906      	bls.n	801146a <_strtol_l.constprop.0+0x1a>
 801145c:	f000 fa62 	bl	8011924 <__errno>
 8011460:	2316      	movs	r3, #22
 8011462:	6003      	str	r3, [r0, #0]
 8011464:	2000      	movs	r0, #0
 8011466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801146a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011550 <_strtol_l.constprop.0+0x100>
 801146e:	460d      	mov	r5, r1
 8011470:	462e      	mov	r6, r5
 8011472:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011476:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801147a:	f017 0708 	ands.w	r7, r7, #8
 801147e:	d1f7      	bne.n	8011470 <_strtol_l.constprop.0+0x20>
 8011480:	2c2d      	cmp	r4, #45	; 0x2d
 8011482:	d132      	bne.n	80114ea <_strtol_l.constprop.0+0x9a>
 8011484:	782c      	ldrb	r4, [r5, #0]
 8011486:	2701      	movs	r7, #1
 8011488:	1cb5      	adds	r5, r6, #2
 801148a:	2b00      	cmp	r3, #0
 801148c:	d05b      	beq.n	8011546 <_strtol_l.constprop.0+0xf6>
 801148e:	2b10      	cmp	r3, #16
 8011490:	d109      	bne.n	80114a6 <_strtol_l.constprop.0+0x56>
 8011492:	2c30      	cmp	r4, #48	; 0x30
 8011494:	d107      	bne.n	80114a6 <_strtol_l.constprop.0+0x56>
 8011496:	782c      	ldrb	r4, [r5, #0]
 8011498:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801149c:	2c58      	cmp	r4, #88	; 0x58
 801149e:	d14d      	bne.n	801153c <_strtol_l.constprop.0+0xec>
 80114a0:	786c      	ldrb	r4, [r5, #1]
 80114a2:	2310      	movs	r3, #16
 80114a4:	3502      	adds	r5, #2
 80114a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80114aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80114ae:	f04f 0e00 	mov.w	lr, #0
 80114b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80114b6:	4676      	mov	r6, lr
 80114b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80114bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80114c0:	f1bc 0f09 	cmp.w	ip, #9
 80114c4:	d816      	bhi.n	80114f4 <_strtol_l.constprop.0+0xa4>
 80114c6:	4664      	mov	r4, ip
 80114c8:	42a3      	cmp	r3, r4
 80114ca:	dd24      	ble.n	8011516 <_strtol_l.constprop.0+0xc6>
 80114cc:	f1be 3fff 	cmp.w	lr, #4294967295
 80114d0:	d008      	beq.n	80114e4 <_strtol_l.constprop.0+0x94>
 80114d2:	45b1      	cmp	r9, r6
 80114d4:	d31c      	bcc.n	8011510 <_strtol_l.constprop.0+0xc0>
 80114d6:	d101      	bne.n	80114dc <_strtol_l.constprop.0+0x8c>
 80114d8:	45a2      	cmp	sl, r4
 80114da:	db19      	blt.n	8011510 <_strtol_l.constprop.0+0xc0>
 80114dc:	fb06 4603 	mla	r6, r6, r3, r4
 80114e0:	f04f 0e01 	mov.w	lr, #1
 80114e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114e8:	e7e8      	b.n	80114bc <_strtol_l.constprop.0+0x6c>
 80114ea:	2c2b      	cmp	r4, #43	; 0x2b
 80114ec:	bf04      	itt	eq
 80114ee:	782c      	ldrbeq	r4, [r5, #0]
 80114f0:	1cb5      	addeq	r5, r6, #2
 80114f2:	e7ca      	b.n	801148a <_strtol_l.constprop.0+0x3a>
 80114f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80114f8:	f1bc 0f19 	cmp.w	ip, #25
 80114fc:	d801      	bhi.n	8011502 <_strtol_l.constprop.0+0xb2>
 80114fe:	3c37      	subs	r4, #55	; 0x37
 8011500:	e7e2      	b.n	80114c8 <_strtol_l.constprop.0+0x78>
 8011502:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011506:	f1bc 0f19 	cmp.w	ip, #25
 801150a:	d804      	bhi.n	8011516 <_strtol_l.constprop.0+0xc6>
 801150c:	3c57      	subs	r4, #87	; 0x57
 801150e:	e7db      	b.n	80114c8 <_strtol_l.constprop.0+0x78>
 8011510:	f04f 3eff 	mov.w	lr, #4294967295
 8011514:	e7e6      	b.n	80114e4 <_strtol_l.constprop.0+0x94>
 8011516:	f1be 3fff 	cmp.w	lr, #4294967295
 801151a:	d105      	bne.n	8011528 <_strtol_l.constprop.0+0xd8>
 801151c:	2322      	movs	r3, #34	; 0x22
 801151e:	6003      	str	r3, [r0, #0]
 8011520:	4646      	mov	r6, r8
 8011522:	b942      	cbnz	r2, 8011536 <_strtol_l.constprop.0+0xe6>
 8011524:	4630      	mov	r0, r6
 8011526:	e79e      	b.n	8011466 <_strtol_l.constprop.0+0x16>
 8011528:	b107      	cbz	r7, 801152c <_strtol_l.constprop.0+0xdc>
 801152a:	4276      	negs	r6, r6
 801152c:	2a00      	cmp	r2, #0
 801152e:	d0f9      	beq.n	8011524 <_strtol_l.constprop.0+0xd4>
 8011530:	f1be 0f00 	cmp.w	lr, #0
 8011534:	d000      	beq.n	8011538 <_strtol_l.constprop.0+0xe8>
 8011536:	1e69      	subs	r1, r5, #1
 8011538:	6011      	str	r1, [r2, #0]
 801153a:	e7f3      	b.n	8011524 <_strtol_l.constprop.0+0xd4>
 801153c:	2430      	movs	r4, #48	; 0x30
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1b1      	bne.n	80114a6 <_strtol_l.constprop.0+0x56>
 8011542:	2308      	movs	r3, #8
 8011544:	e7af      	b.n	80114a6 <_strtol_l.constprop.0+0x56>
 8011546:	2c30      	cmp	r4, #48	; 0x30
 8011548:	d0a5      	beq.n	8011496 <_strtol_l.constprop.0+0x46>
 801154a:	230a      	movs	r3, #10
 801154c:	e7ab      	b.n	80114a6 <_strtol_l.constprop.0+0x56>
 801154e:	bf00      	nop
 8011550:	080145d4 	.word	0x080145d4

08011554 <strtol>:
 8011554:	4613      	mov	r3, r2
 8011556:	460a      	mov	r2, r1
 8011558:	4601      	mov	r1, r0
 801155a:	4802      	ldr	r0, [pc, #8]	; (8011564 <strtol+0x10>)
 801155c:	6800      	ldr	r0, [r0, #0]
 801155e:	f7ff bf77 	b.w	8011450 <_strtol_l.constprop.0>
 8011562:	bf00      	nop
 8011564:	200002b8 	.word	0x200002b8

08011568 <std>:
 8011568:	2300      	movs	r3, #0
 801156a:	b510      	push	{r4, lr}
 801156c:	4604      	mov	r4, r0
 801156e:	e9c0 3300 	strd	r3, r3, [r0]
 8011572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011576:	6083      	str	r3, [r0, #8]
 8011578:	8181      	strh	r1, [r0, #12]
 801157a:	6643      	str	r3, [r0, #100]	; 0x64
 801157c:	81c2      	strh	r2, [r0, #14]
 801157e:	6183      	str	r3, [r0, #24]
 8011580:	4619      	mov	r1, r3
 8011582:	2208      	movs	r2, #8
 8011584:	305c      	adds	r0, #92	; 0x5c
 8011586:	f000 f938 	bl	80117fa <memset>
 801158a:	4b0d      	ldr	r3, [pc, #52]	; (80115c0 <std+0x58>)
 801158c:	6263      	str	r3, [r4, #36]	; 0x24
 801158e:	4b0d      	ldr	r3, [pc, #52]	; (80115c4 <std+0x5c>)
 8011590:	62a3      	str	r3, [r4, #40]	; 0x28
 8011592:	4b0d      	ldr	r3, [pc, #52]	; (80115c8 <std+0x60>)
 8011594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011596:	4b0d      	ldr	r3, [pc, #52]	; (80115cc <std+0x64>)
 8011598:	6323      	str	r3, [r4, #48]	; 0x30
 801159a:	4b0d      	ldr	r3, [pc, #52]	; (80115d0 <std+0x68>)
 801159c:	6224      	str	r4, [r4, #32]
 801159e:	429c      	cmp	r4, r3
 80115a0:	d006      	beq.n	80115b0 <std+0x48>
 80115a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80115a6:	4294      	cmp	r4, r2
 80115a8:	d002      	beq.n	80115b0 <std+0x48>
 80115aa:	33d0      	adds	r3, #208	; 0xd0
 80115ac:	429c      	cmp	r4, r3
 80115ae:	d105      	bne.n	80115bc <std+0x54>
 80115b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115b8:	f000 b9de 	b.w	8011978 <__retarget_lock_init_recursive>
 80115bc:	bd10      	pop	{r4, pc}
 80115be:	bf00      	nop
 80115c0:	08011721 	.word	0x08011721
 80115c4:	08011743 	.word	0x08011743
 80115c8:	0801177b 	.word	0x0801177b
 80115cc:	0801179f 	.word	0x0801179f
 80115d0:	20008018 	.word	0x20008018

080115d4 <stdio_exit_handler>:
 80115d4:	4a02      	ldr	r2, [pc, #8]	; (80115e0 <stdio_exit_handler+0xc>)
 80115d6:	4903      	ldr	r1, [pc, #12]	; (80115e4 <stdio_exit_handler+0x10>)
 80115d8:	4803      	ldr	r0, [pc, #12]	; (80115e8 <stdio_exit_handler+0x14>)
 80115da:	f000 b87b 	b.w	80116d4 <_fwalk_sglue>
 80115de:	bf00      	nop
 80115e0:	20000260 	.word	0x20000260
 80115e4:	08012105 	.word	0x08012105
 80115e8:	2000026c 	.word	0x2000026c

080115ec <cleanup_stdio>:
 80115ec:	6841      	ldr	r1, [r0, #4]
 80115ee:	4b0c      	ldr	r3, [pc, #48]	; (8011620 <cleanup_stdio+0x34>)
 80115f0:	4299      	cmp	r1, r3
 80115f2:	b510      	push	{r4, lr}
 80115f4:	4604      	mov	r4, r0
 80115f6:	d001      	beq.n	80115fc <cleanup_stdio+0x10>
 80115f8:	f000 fd84 	bl	8012104 <_fflush_r>
 80115fc:	68a1      	ldr	r1, [r4, #8]
 80115fe:	4b09      	ldr	r3, [pc, #36]	; (8011624 <cleanup_stdio+0x38>)
 8011600:	4299      	cmp	r1, r3
 8011602:	d002      	beq.n	801160a <cleanup_stdio+0x1e>
 8011604:	4620      	mov	r0, r4
 8011606:	f000 fd7d 	bl	8012104 <_fflush_r>
 801160a:	68e1      	ldr	r1, [r4, #12]
 801160c:	4b06      	ldr	r3, [pc, #24]	; (8011628 <cleanup_stdio+0x3c>)
 801160e:	4299      	cmp	r1, r3
 8011610:	d004      	beq.n	801161c <cleanup_stdio+0x30>
 8011612:	4620      	mov	r0, r4
 8011614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011618:	f000 bd74 	b.w	8012104 <_fflush_r>
 801161c:	bd10      	pop	{r4, pc}
 801161e:	bf00      	nop
 8011620:	20008018 	.word	0x20008018
 8011624:	20008080 	.word	0x20008080
 8011628:	200080e8 	.word	0x200080e8

0801162c <global_stdio_init.part.0>:
 801162c:	b510      	push	{r4, lr}
 801162e:	4b0b      	ldr	r3, [pc, #44]	; (801165c <global_stdio_init.part.0+0x30>)
 8011630:	4c0b      	ldr	r4, [pc, #44]	; (8011660 <global_stdio_init.part.0+0x34>)
 8011632:	4a0c      	ldr	r2, [pc, #48]	; (8011664 <global_stdio_init.part.0+0x38>)
 8011634:	601a      	str	r2, [r3, #0]
 8011636:	4620      	mov	r0, r4
 8011638:	2200      	movs	r2, #0
 801163a:	2104      	movs	r1, #4
 801163c:	f7ff ff94 	bl	8011568 <std>
 8011640:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011644:	2201      	movs	r2, #1
 8011646:	2109      	movs	r1, #9
 8011648:	f7ff ff8e 	bl	8011568 <std>
 801164c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011650:	2202      	movs	r2, #2
 8011652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011656:	2112      	movs	r1, #18
 8011658:	f7ff bf86 	b.w	8011568 <std>
 801165c:	20008150 	.word	0x20008150
 8011660:	20008018 	.word	0x20008018
 8011664:	080115d5 	.word	0x080115d5

08011668 <__sfp_lock_acquire>:
 8011668:	4801      	ldr	r0, [pc, #4]	; (8011670 <__sfp_lock_acquire+0x8>)
 801166a:	f000 b986 	b.w	801197a <__retarget_lock_acquire_recursive>
 801166e:	bf00      	nop
 8011670:	20008159 	.word	0x20008159

08011674 <__sfp_lock_release>:
 8011674:	4801      	ldr	r0, [pc, #4]	; (801167c <__sfp_lock_release+0x8>)
 8011676:	f000 b981 	b.w	801197c <__retarget_lock_release_recursive>
 801167a:	bf00      	nop
 801167c:	20008159 	.word	0x20008159

08011680 <__sinit>:
 8011680:	b510      	push	{r4, lr}
 8011682:	4604      	mov	r4, r0
 8011684:	f7ff fff0 	bl	8011668 <__sfp_lock_acquire>
 8011688:	6a23      	ldr	r3, [r4, #32]
 801168a:	b11b      	cbz	r3, 8011694 <__sinit+0x14>
 801168c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011690:	f7ff bff0 	b.w	8011674 <__sfp_lock_release>
 8011694:	4b04      	ldr	r3, [pc, #16]	; (80116a8 <__sinit+0x28>)
 8011696:	6223      	str	r3, [r4, #32]
 8011698:	4b04      	ldr	r3, [pc, #16]	; (80116ac <__sinit+0x2c>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d1f5      	bne.n	801168c <__sinit+0xc>
 80116a0:	f7ff ffc4 	bl	801162c <global_stdio_init.part.0>
 80116a4:	e7f2      	b.n	801168c <__sinit+0xc>
 80116a6:	bf00      	nop
 80116a8:	080115ed 	.word	0x080115ed
 80116ac:	20008150 	.word	0x20008150

080116b0 <fiprintf>:
 80116b0:	b40e      	push	{r1, r2, r3}
 80116b2:	b503      	push	{r0, r1, lr}
 80116b4:	4601      	mov	r1, r0
 80116b6:	ab03      	add	r3, sp, #12
 80116b8:	4805      	ldr	r0, [pc, #20]	; (80116d0 <fiprintf+0x20>)
 80116ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80116be:	6800      	ldr	r0, [r0, #0]
 80116c0:	9301      	str	r3, [sp, #4]
 80116c2:	f000 f9ef 	bl	8011aa4 <_vfiprintf_r>
 80116c6:	b002      	add	sp, #8
 80116c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116cc:	b003      	add	sp, #12
 80116ce:	4770      	bx	lr
 80116d0:	200002b8 	.word	0x200002b8

080116d4 <_fwalk_sglue>:
 80116d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116d8:	4607      	mov	r7, r0
 80116da:	4688      	mov	r8, r1
 80116dc:	4614      	mov	r4, r2
 80116de:	2600      	movs	r6, #0
 80116e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116e4:	f1b9 0901 	subs.w	r9, r9, #1
 80116e8:	d505      	bpl.n	80116f6 <_fwalk_sglue+0x22>
 80116ea:	6824      	ldr	r4, [r4, #0]
 80116ec:	2c00      	cmp	r4, #0
 80116ee:	d1f7      	bne.n	80116e0 <_fwalk_sglue+0xc>
 80116f0:	4630      	mov	r0, r6
 80116f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116f6:	89ab      	ldrh	r3, [r5, #12]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d907      	bls.n	801170c <_fwalk_sglue+0x38>
 80116fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011700:	3301      	adds	r3, #1
 8011702:	d003      	beq.n	801170c <_fwalk_sglue+0x38>
 8011704:	4629      	mov	r1, r5
 8011706:	4638      	mov	r0, r7
 8011708:	47c0      	blx	r8
 801170a:	4306      	orrs	r6, r0
 801170c:	3568      	adds	r5, #104	; 0x68
 801170e:	e7e9      	b.n	80116e4 <_fwalk_sglue+0x10>

08011710 <putchar>:
 8011710:	4b02      	ldr	r3, [pc, #8]	; (801171c <putchar+0xc>)
 8011712:	4601      	mov	r1, r0
 8011714:	6818      	ldr	r0, [r3, #0]
 8011716:	6882      	ldr	r2, [r0, #8]
 8011718:	f000 bd1c 	b.w	8012154 <_putc_r>
 801171c:	200002b8 	.word	0x200002b8

08011720 <__sread>:
 8011720:	b510      	push	{r4, lr}
 8011722:	460c      	mov	r4, r1
 8011724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011728:	f000 f8c8 	bl	80118bc <_read_r>
 801172c:	2800      	cmp	r0, #0
 801172e:	bfab      	itete	ge
 8011730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011732:	89a3      	ldrhlt	r3, [r4, #12]
 8011734:	181b      	addge	r3, r3, r0
 8011736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801173a:	bfac      	ite	ge
 801173c:	6563      	strge	r3, [r4, #84]	; 0x54
 801173e:	81a3      	strhlt	r3, [r4, #12]
 8011740:	bd10      	pop	{r4, pc}

08011742 <__swrite>:
 8011742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011746:	461f      	mov	r7, r3
 8011748:	898b      	ldrh	r3, [r1, #12]
 801174a:	05db      	lsls	r3, r3, #23
 801174c:	4605      	mov	r5, r0
 801174e:	460c      	mov	r4, r1
 8011750:	4616      	mov	r6, r2
 8011752:	d505      	bpl.n	8011760 <__swrite+0x1e>
 8011754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011758:	2302      	movs	r3, #2
 801175a:	2200      	movs	r2, #0
 801175c:	f000 f89c 	bl	8011898 <_lseek_r>
 8011760:	89a3      	ldrh	r3, [r4, #12]
 8011762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801176a:	81a3      	strh	r3, [r4, #12]
 801176c:	4632      	mov	r2, r6
 801176e:	463b      	mov	r3, r7
 8011770:	4628      	mov	r0, r5
 8011772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011776:	f000 b8c3 	b.w	8011900 <_write_r>

0801177a <__sseek>:
 801177a:	b510      	push	{r4, lr}
 801177c:	460c      	mov	r4, r1
 801177e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011782:	f000 f889 	bl	8011898 <_lseek_r>
 8011786:	1c43      	adds	r3, r0, #1
 8011788:	89a3      	ldrh	r3, [r4, #12]
 801178a:	bf15      	itete	ne
 801178c:	6560      	strne	r0, [r4, #84]	; 0x54
 801178e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011796:	81a3      	strheq	r3, [r4, #12]
 8011798:	bf18      	it	ne
 801179a:	81a3      	strhne	r3, [r4, #12]
 801179c:	bd10      	pop	{r4, pc}

0801179e <__sclose>:
 801179e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a2:	f000 b869 	b.w	8011878 <_close_r>

080117a6 <memcmp>:
 80117a6:	b510      	push	{r4, lr}
 80117a8:	3901      	subs	r1, #1
 80117aa:	4402      	add	r2, r0
 80117ac:	4290      	cmp	r0, r2
 80117ae:	d101      	bne.n	80117b4 <memcmp+0xe>
 80117b0:	2000      	movs	r0, #0
 80117b2:	e005      	b.n	80117c0 <memcmp+0x1a>
 80117b4:	7803      	ldrb	r3, [r0, #0]
 80117b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80117ba:	42a3      	cmp	r3, r4
 80117bc:	d001      	beq.n	80117c2 <memcmp+0x1c>
 80117be:	1b18      	subs	r0, r3, r4
 80117c0:	bd10      	pop	{r4, pc}
 80117c2:	3001      	adds	r0, #1
 80117c4:	e7f2      	b.n	80117ac <memcmp+0x6>

080117c6 <memmove>:
 80117c6:	4288      	cmp	r0, r1
 80117c8:	b510      	push	{r4, lr}
 80117ca:	eb01 0402 	add.w	r4, r1, r2
 80117ce:	d902      	bls.n	80117d6 <memmove+0x10>
 80117d0:	4284      	cmp	r4, r0
 80117d2:	4623      	mov	r3, r4
 80117d4:	d807      	bhi.n	80117e6 <memmove+0x20>
 80117d6:	1e43      	subs	r3, r0, #1
 80117d8:	42a1      	cmp	r1, r4
 80117da:	d008      	beq.n	80117ee <memmove+0x28>
 80117dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117e4:	e7f8      	b.n	80117d8 <memmove+0x12>
 80117e6:	4402      	add	r2, r0
 80117e8:	4601      	mov	r1, r0
 80117ea:	428a      	cmp	r2, r1
 80117ec:	d100      	bne.n	80117f0 <memmove+0x2a>
 80117ee:	bd10      	pop	{r4, pc}
 80117f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117f8:	e7f7      	b.n	80117ea <memmove+0x24>

080117fa <memset>:
 80117fa:	4402      	add	r2, r0
 80117fc:	4603      	mov	r3, r0
 80117fe:	4293      	cmp	r3, r2
 8011800:	d100      	bne.n	8011804 <memset+0xa>
 8011802:	4770      	bx	lr
 8011804:	f803 1b01 	strb.w	r1, [r3], #1
 8011808:	e7f9      	b.n	80117fe <memset+0x4>

0801180a <strchr>:
 801180a:	b2c9      	uxtb	r1, r1
 801180c:	4603      	mov	r3, r0
 801180e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011812:	b11a      	cbz	r2, 801181c <strchr+0x12>
 8011814:	428a      	cmp	r2, r1
 8011816:	d1f9      	bne.n	801180c <strchr+0x2>
 8011818:	4618      	mov	r0, r3
 801181a:	4770      	bx	lr
 801181c:	2900      	cmp	r1, #0
 801181e:	bf18      	it	ne
 8011820:	2300      	movne	r3, #0
 8011822:	e7f9      	b.n	8011818 <strchr+0xe>

08011824 <strncmp>:
 8011824:	b510      	push	{r4, lr}
 8011826:	b16a      	cbz	r2, 8011844 <strncmp+0x20>
 8011828:	3901      	subs	r1, #1
 801182a:	1884      	adds	r4, r0, r2
 801182c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011830:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011834:	429a      	cmp	r2, r3
 8011836:	d103      	bne.n	8011840 <strncmp+0x1c>
 8011838:	42a0      	cmp	r0, r4
 801183a:	d001      	beq.n	8011840 <strncmp+0x1c>
 801183c:	2a00      	cmp	r2, #0
 801183e:	d1f5      	bne.n	801182c <strncmp+0x8>
 8011840:	1ad0      	subs	r0, r2, r3
 8011842:	bd10      	pop	{r4, pc}
 8011844:	4610      	mov	r0, r2
 8011846:	e7fc      	b.n	8011842 <strncmp+0x1e>

08011848 <strrchr>:
 8011848:	b513      	push	{r0, r1, r4, lr}
 801184a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801184e:	4603      	mov	r3, r0
 8011850:	d110      	bne.n	8011874 <strrchr+0x2c>
 8011852:	b002      	add	sp, #8
 8011854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011858:	f7ff bfd7 	b.w	801180a <strchr>
 801185c:	1c43      	adds	r3, r0, #1
 801185e:	4604      	mov	r4, r0
 8011860:	4618      	mov	r0, r3
 8011862:	9101      	str	r1, [sp, #4]
 8011864:	f7ff ffd1 	bl	801180a <strchr>
 8011868:	9901      	ldr	r1, [sp, #4]
 801186a:	2800      	cmp	r0, #0
 801186c:	d1f6      	bne.n	801185c <strrchr+0x14>
 801186e:	4620      	mov	r0, r4
 8011870:	b002      	add	sp, #8
 8011872:	bd10      	pop	{r4, pc}
 8011874:	2400      	movs	r4, #0
 8011876:	e7f3      	b.n	8011860 <strrchr+0x18>

08011878 <_close_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	4d06      	ldr	r5, [pc, #24]	; (8011894 <_close_r+0x1c>)
 801187c:	2300      	movs	r3, #0
 801187e:	4604      	mov	r4, r0
 8011880:	4608      	mov	r0, r1
 8011882:	602b      	str	r3, [r5, #0]
 8011884:	f7f9 fe56 	bl	800b534 <_close>
 8011888:	1c43      	adds	r3, r0, #1
 801188a:	d102      	bne.n	8011892 <_close_r+0x1a>
 801188c:	682b      	ldr	r3, [r5, #0]
 801188e:	b103      	cbz	r3, 8011892 <_close_r+0x1a>
 8011890:	6023      	str	r3, [r4, #0]
 8011892:	bd38      	pop	{r3, r4, r5, pc}
 8011894:	20008154 	.word	0x20008154

08011898 <_lseek_r>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4d07      	ldr	r5, [pc, #28]	; (80118b8 <_lseek_r+0x20>)
 801189c:	4604      	mov	r4, r0
 801189e:	4608      	mov	r0, r1
 80118a0:	4611      	mov	r1, r2
 80118a2:	2200      	movs	r2, #0
 80118a4:	602a      	str	r2, [r5, #0]
 80118a6:	461a      	mov	r2, r3
 80118a8:	f7f9 fe6b 	bl	800b582 <_lseek>
 80118ac:	1c43      	adds	r3, r0, #1
 80118ae:	d102      	bne.n	80118b6 <_lseek_r+0x1e>
 80118b0:	682b      	ldr	r3, [r5, #0]
 80118b2:	b103      	cbz	r3, 80118b6 <_lseek_r+0x1e>
 80118b4:	6023      	str	r3, [r4, #0]
 80118b6:	bd38      	pop	{r3, r4, r5, pc}
 80118b8:	20008154 	.word	0x20008154

080118bc <_read_r>:
 80118bc:	b538      	push	{r3, r4, r5, lr}
 80118be:	4d07      	ldr	r5, [pc, #28]	; (80118dc <_read_r+0x20>)
 80118c0:	4604      	mov	r4, r0
 80118c2:	4608      	mov	r0, r1
 80118c4:	4611      	mov	r1, r2
 80118c6:	2200      	movs	r2, #0
 80118c8:	602a      	str	r2, [r5, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	f7f9 fdfc 	bl	800b4c8 <_read>
 80118d0:	1c43      	adds	r3, r0, #1
 80118d2:	d102      	bne.n	80118da <_read_r+0x1e>
 80118d4:	682b      	ldr	r3, [r5, #0]
 80118d6:	b103      	cbz	r3, 80118da <_read_r+0x1e>
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	bd38      	pop	{r3, r4, r5, pc}
 80118dc:	20008154 	.word	0x20008154

080118e0 <_sbrk_r>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	4d06      	ldr	r5, [pc, #24]	; (80118fc <_sbrk_r+0x1c>)
 80118e4:	2300      	movs	r3, #0
 80118e6:	4604      	mov	r4, r0
 80118e8:	4608      	mov	r0, r1
 80118ea:	602b      	str	r3, [r5, #0]
 80118ec:	f7f9 fe56 	bl	800b59c <_sbrk>
 80118f0:	1c43      	adds	r3, r0, #1
 80118f2:	d102      	bne.n	80118fa <_sbrk_r+0x1a>
 80118f4:	682b      	ldr	r3, [r5, #0]
 80118f6:	b103      	cbz	r3, 80118fa <_sbrk_r+0x1a>
 80118f8:	6023      	str	r3, [r4, #0]
 80118fa:	bd38      	pop	{r3, r4, r5, pc}
 80118fc:	20008154 	.word	0x20008154

08011900 <_write_r>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	4d07      	ldr	r5, [pc, #28]	; (8011920 <_write_r+0x20>)
 8011904:	4604      	mov	r4, r0
 8011906:	4608      	mov	r0, r1
 8011908:	4611      	mov	r1, r2
 801190a:	2200      	movs	r2, #0
 801190c:	602a      	str	r2, [r5, #0]
 801190e:	461a      	mov	r2, r3
 8011910:	f7f9 fdf8 	bl	800b504 <_write>
 8011914:	1c43      	adds	r3, r0, #1
 8011916:	d102      	bne.n	801191e <_write_r+0x1e>
 8011918:	682b      	ldr	r3, [r5, #0]
 801191a:	b103      	cbz	r3, 801191e <_write_r+0x1e>
 801191c:	6023      	str	r3, [r4, #0]
 801191e:	bd38      	pop	{r3, r4, r5, pc}
 8011920:	20008154 	.word	0x20008154

08011924 <__errno>:
 8011924:	4b01      	ldr	r3, [pc, #4]	; (801192c <__errno+0x8>)
 8011926:	6818      	ldr	r0, [r3, #0]
 8011928:	4770      	bx	lr
 801192a:	bf00      	nop
 801192c:	200002b8 	.word	0x200002b8

08011930 <__libc_init_array>:
 8011930:	b570      	push	{r4, r5, r6, lr}
 8011932:	4d0d      	ldr	r5, [pc, #52]	; (8011968 <__libc_init_array+0x38>)
 8011934:	4c0d      	ldr	r4, [pc, #52]	; (801196c <__libc_init_array+0x3c>)
 8011936:	1b64      	subs	r4, r4, r5
 8011938:	10a4      	asrs	r4, r4, #2
 801193a:	2600      	movs	r6, #0
 801193c:	42a6      	cmp	r6, r4
 801193e:	d109      	bne.n	8011954 <__libc_init_array+0x24>
 8011940:	4d0b      	ldr	r5, [pc, #44]	; (8011970 <__libc_init_array+0x40>)
 8011942:	4c0c      	ldr	r4, [pc, #48]	; (8011974 <__libc_init_array+0x44>)
 8011944:	f000 fd98 	bl	8012478 <_init>
 8011948:	1b64      	subs	r4, r4, r5
 801194a:	10a4      	asrs	r4, r4, #2
 801194c:	2600      	movs	r6, #0
 801194e:	42a6      	cmp	r6, r4
 8011950:	d105      	bne.n	801195e <__libc_init_array+0x2e>
 8011952:	bd70      	pop	{r4, r5, r6, pc}
 8011954:	f855 3b04 	ldr.w	r3, [r5], #4
 8011958:	4798      	blx	r3
 801195a:	3601      	adds	r6, #1
 801195c:	e7ee      	b.n	801193c <__libc_init_array+0xc>
 801195e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011962:	4798      	blx	r3
 8011964:	3601      	adds	r6, #1
 8011966:	e7f2      	b.n	801194e <__libc_init_array+0x1e>
 8011968:	08014710 	.word	0x08014710
 801196c:	08014710 	.word	0x08014710
 8011970:	08014710 	.word	0x08014710
 8011974:	08014714 	.word	0x08014714

08011978 <__retarget_lock_init_recursive>:
 8011978:	4770      	bx	lr

0801197a <__retarget_lock_acquire_recursive>:
 801197a:	4770      	bx	lr

0801197c <__retarget_lock_release_recursive>:
 801197c:	4770      	bx	lr

0801197e <strcpy>:
 801197e:	4603      	mov	r3, r0
 8011980:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011984:	f803 2b01 	strb.w	r2, [r3], #1
 8011988:	2a00      	cmp	r2, #0
 801198a:	d1f9      	bne.n	8011980 <strcpy+0x2>
 801198c:	4770      	bx	lr

0801198e <memcpy>:
 801198e:	440a      	add	r2, r1
 8011990:	4291      	cmp	r1, r2
 8011992:	f100 33ff 	add.w	r3, r0, #4294967295
 8011996:	d100      	bne.n	801199a <memcpy+0xc>
 8011998:	4770      	bx	lr
 801199a:	b510      	push	{r4, lr}
 801199c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119a4:	4291      	cmp	r1, r2
 80119a6:	d1f9      	bne.n	801199c <memcpy+0xe>
 80119a8:	bd10      	pop	{r4, pc}

080119aa <abort>:
 80119aa:	b508      	push	{r3, lr}
 80119ac:	2006      	movs	r0, #6
 80119ae:	f000 fcc3 	bl	8012338 <raise>
 80119b2:	2001      	movs	r0, #1
 80119b4:	f7f9 fd7e 	bl	800b4b4 <_exit>

080119b8 <_free_r>:
 80119b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119ba:	2900      	cmp	r1, #0
 80119bc:	d044      	beq.n	8011a48 <_free_r+0x90>
 80119be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119c2:	9001      	str	r0, [sp, #4]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f1a1 0404 	sub.w	r4, r1, #4
 80119ca:	bfb8      	it	lt
 80119cc:	18e4      	addlt	r4, r4, r3
 80119ce:	f7ff fd05 	bl	80113dc <__malloc_lock>
 80119d2:	4a1e      	ldr	r2, [pc, #120]	; (8011a4c <_free_r+0x94>)
 80119d4:	9801      	ldr	r0, [sp, #4]
 80119d6:	6813      	ldr	r3, [r2, #0]
 80119d8:	b933      	cbnz	r3, 80119e8 <_free_r+0x30>
 80119da:	6063      	str	r3, [r4, #4]
 80119dc:	6014      	str	r4, [r2, #0]
 80119de:	b003      	add	sp, #12
 80119e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119e4:	f7ff bd00 	b.w	80113e8 <__malloc_unlock>
 80119e8:	42a3      	cmp	r3, r4
 80119ea:	d908      	bls.n	80119fe <_free_r+0x46>
 80119ec:	6825      	ldr	r5, [r4, #0]
 80119ee:	1961      	adds	r1, r4, r5
 80119f0:	428b      	cmp	r3, r1
 80119f2:	bf01      	itttt	eq
 80119f4:	6819      	ldreq	r1, [r3, #0]
 80119f6:	685b      	ldreq	r3, [r3, #4]
 80119f8:	1949      	addeq	r1, r1, r5
 80119fa:	6021      	streq	r1, [r4, #0]
 80119fc:	e7ed      	b.n	80119da <_free_r+0x22>
 80119fe:	461a      	mov	r2, r3
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	b10b      	cbz	r3, 8011a08 <_free_r+0x50>
 8011a04:	42a3      	cmp	r3, r4
 8011a06:	d9fa      	bls.n	80119fe <_free_r+0x46>
 8011a08:	6811      	ldr	r1, [r2, #0]
 8011a0a:	1855      	adds	r5, r2, r1
 8011a0c:	42a5      	cmp	r5, r4
 8011a0e:	d10b      	bne.n	8011a28 <_free_r+0x70>
 8011a10:	6824      	ldr	r4, [r4, #0]
 8011a12:	4421      	add	r1, r4
 8011a14:	1854      	adds	r4, r2, r1
 8011a16:	42a3      	cmp	r3, r4
 8011a18:	6011      	str	r1, [r2, #0]
 8011a1a:	d1e0      	bne.n	80119de <_free_r+0x26>
 8011a1c:	681c      	ldr	r4, [r3, #0]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	6053      	str	r3, [r2, #4]
 8011a22:	440c      	add	r4, r1
 8011a24:	6014      	str	r4, [r2, #0]
 8011a26:	e7da      	b.n	80119de <_free_r+0x26>
 8011a28:	d902      	bls.n	8011a30 <_free_r+0x78>
 8011a2a:	230c      	movs	r3, #12
 8011a2c:	6003      	str	r3, [r0, #0]
 8011a2e:	e7d6      	b.n	80119de <_free_r+0x26>
 8011a30:	6825      	ldr	r5, [r4, #0]
 8011a32:	1961      	adds	r1, r4, r5
 8011a34:	428b      	cmp	r3, r1
 8011a36:	bf04      	itt	eq
 8011a38:	6819      	ldreq	r1, [r3, #0]
 8011a3a:	685b      	ldreq	r3, [r3, #4]
 8011a3c:	6063      	str	r3, [r4, #4]
 8011a3e:	bf04      	itt	eq
 8011a40:	1949      	addeq	r1, r1, r5
 8011a42:	6021      	streq	r1, [r4, #0]
 8011a44:	6054      	str	r4, [r2, #4]
 8011a46:	e7ca      	b.n	80119de <_free_r+0x26>
 8011a48:	b003      	add	sp, #12
 8011a4a:	bd30      	pop	{r4, r5, pc}
 8011a4c:	20008010 	.word	0x20008010

08011a50 <__sfputc_r>:
 8011a50:	6893      	ldr	r3, [r2, #8]
 8011a52:	3b01      	subs	r3, #1
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	b410      	push	{r4}
 8011a58:	6093      	str	r3, [r2, #8]
 8011a5a:	da08      	bge.n	8011a6e <__sfputc_r+0x1e>
 8011a5c:	6994      	ldr	r4, [r2, #24]
 8011a5e:	42a3      	cmp	r3, r4
 8011a60:	db01      	blt.n	8011a66 <__sfputc_r+0x16>
 8011a62:	290a      	cmp	r1, #10
 8011a64:	d103      	bne.n	8011a6e <__sfputc_r+0x1e>
 8011a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a6a:	f000 bba7 	b.w	80121bc <__swbuf_r>
 8011a6e:	6813      	ldr	r3, [r2, #0]
 8011a70:	1c58      	adds	r0, r3, #1
 8011a72:	6010      	str	r0, [r2, #0]
 8011a74:	7019      	strb	r1, [r3, #0]
 8011a76:	4608      	mov	r0, r1
 8011a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a7c:	4770      	bx	lr

08011a7e <__sfputs_r>:
 8011a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a80:	4606      	mov	r6, r0
 8011a82:	460f      	mov	r7, r1
 8011a84:	4614      	mov	r4, r2
 8011a86:	18d5      	adds	r5, r2, r3
 8011a88:	42ac      	cmp	r4, r5
 8011a8a:	d101      	bne.n	8011a90 <__sfputs_r+0x12>
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	e007      	b.n	8011aa0 <__sfputs_r+0x22>
 8011a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a94:	463a      	mov	r2, r7
 8011a96:	4630      	mov	r0, r6
 8011a98:	f7ff ffda 	bl	8011a50 <__sfputc_r>
 8011a9c:	1c43      	adds	r3, r0, #1
 8011a9e:	d1f3      	bne.n	8011a88 <__sfputs_r+0xa>
 8011aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011aa4 <_vfiprintf_r>:
 8011aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa8:	460d      	mov	r5, r1
 8011aaa:	b09d      	sub	sp, #116	; 0x74
 8011aac:	4614      	mov	r4, r2
 8011aae:	4698      	mov	r8, r3
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	b118      	cbz	r0, 8011abc <_vfiprintf_r+0x18>
 8011ab4:	6a03      	ldr	r3, [r0, #32]
 8011ab6:	b90b      	cbnz	r3, 8011abc <_vfiprintf_r+0x18>
 8011ab8:	f7ff fde2 	bl	8011680 <__sinit>
 8011abc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011abe:	07d9      	lsls	r1, r3, #31
 8011ac0:	d405      	bmi.n	8011ace <_vfiprintf_r+0x2a>
 8011ac2:	89ab      	ldrh	r3, [r5, #12]
 8011ac4:	059a      	lsls	r2, r3, #22
 8011ac6:	d402      	bmi.n	8011ace <_vfiprintf_r+0x2a>
 8011ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011aca:	f7ff ff56 	bl	801197a <__retarget_lock_acquire_recursive>
 8011ace:	89ab      	ldrh	r3, [r5, #12]
 8011ad0:	071b      	lsls	r3, r3, #28
 8011ad2:	d501      	bpl.n	8011ad8 <_vfiprintf_r+0x34>
 8011ad4:	692b      	ldr	r3, [r5, #16]
 8011ad6:	b99b      	cbnz	r3, 8011b00 <_vfiprintf_r+0x5c>
 8011ad8:	4629      	mov	r1, r5
 8011ada:	4630      	mov	r0, r6
 8011adc:	f000 fbac 	bl	8012238 <__swsetup_r>
 8011ae0:	b170      	cbz	r0, 8011b00 <_vfiprintf_r+0x5c>
 8011ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ae4:	07dc      	lsls	r4, r3, #31
 8011ae6:	d504      	bpl.n	8011af2 <_vfiprintf_r+0x4e>
 8011ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8011aec:	b01d      	add	sp, #116	; 0x74
 8011aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af2:	89ab      	ldrh	r3, [r5, #12]
 8011af4:	0598      	lsls	r0, r3, #22
 8011af6:	d4f7      	bmi.n	8011ae8 <_vfiprintf_r+0x44>
 8011af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011afa:	f7ff ff3f 	bl	801197c <__retarget_lock_release_recursive>
 8011afe:	e7f3      	b.n	8011ae8 <_vfiprintf_r+0x44>
 8011b00:	2300      	movs	r3, #0
 8011b02:	9309      	str	r3, [sp, #36]	; 0x24
 8011b04:	2320      	movs	r3, #32
 8011b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b0e:	2330      	movs	r3, #48	; 0x30
 8011b10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011cc4 <_vfiprintf_r+0x220>
 8011b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b18:	f04f 0901 	mov.w	r9, #1
 8011b1c:	4623      	mov	r3, r4
 8011b1e:	469a      	mov	sl, r3
 8011b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b24:	b10a      	cbz	r2, 8011b2a <_vfiprintf_r+0x86>
 8011b26:	2a25      	cmp	r2, #37	; 0x25
 8011b28:	d1f9      	bne.n	8011b1e <_vfiprintf_r+0x7a>
 8011b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8011b2e:	d00b      	beq.n	8011b48 <_vfiprintf_r+0xa4>
 8011b30:	465b      	mov	r3, fp
 8011b32:	4622      	mov	r2, r4
 8011b34:	4629      	mov	r1, r5
 8011b36:	4630      	mov	r0, r6
 8011b38:	f7ff ffa1 	bl	8011a7e <__sfputs_r>
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	f000 80a9 	beq.w	8011c94 <_vfiprintf_r+0x1f0>
 8011b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b44:	445a      	add	r2, fp
 8011b46:	9209      	str	r2, [sp, #36]	; 0x24
 8011b48:	f89a 3000 	ldrb.w	r3, [sl]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	f000 80a1 	beq.w	8011c94 <_vfiprintf_r+0x1f0>
 8011b52:	2300      	movs	r3, #0
 8011b54:	f04f 32ff 	mov.w	r2, #4294967295
 8011b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b5c:	f10a 0a01 	add.w	sl, sl, #1
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	9307      	str	r3, [sp, #28]
 8011b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b68:	931a      	str	r3, [sp, #104]	; 0x68
 8011b6a:	4654      	mov	r4, sl
 8011b6c:	2205      	movs	r2, #5
 8011b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b72:	4854      	ldr	r0, [pc, #336]	; (8011cc4 <_vfiprintf_r+0x220>)
 8011b74:	f7ee fb5c 	bl	8000230 <memchr>
 8011b78:	9a04      	ldr	r2, [sp, #16]
 8011b7a:	b9d8      	cbnz	r0, 8011bb4 <_vfiprintf_r+0x110>
 8011b7c:	06d1      	lsls	r1, r2, #27
 8011b7e:	bf44      	itt	mi
 8011b80:	2320      	movmi	r3, #32
 8011b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b86:	0713      	lsls	r3, r2, #28
 8011b88:	bf44      	itt	mi
 8011b8a:	232b      	movmi	r3, #43	; 0x2b
 8011b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b90:	f89a 3000 	ldrb.w	r3, [sl]
 8011b94:	2b2a      	cmp	r3, #42	; 0x2a
 8011b96:	d015      	beq.n	8011bc4 <_vfiprintf_r+0x120>
 8011b98:	9a07      	ldr	r2, [sp, #28]
 8011b9a:	4654      	mov	r4, sl
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	f04f 0c0a 	mov.w	ip, #10
 8011ba2:	4621      	mov	r1, r4
 8011ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ba8:	3b30      	subs	r3, #48	; 0x30
 8011baa:	2b09      	cmp	r3, #9
 8011bac:	d94d      	bls.n	8011c4a <_vfiprintf_r+0x1a6>
 8011bae:	b1b0      	cbz	r0, 8011bde <_vfiprintf_r+0x13a>
 8011bb0:	9207      	str	r2, [sp, #28]
 8011bb2:	e014      	b.n	8011bde <_vfiprintf_r+0x13a>
 8011bb4:	eba0 0308 	sub.w	r3, r0, r8
 8011bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	9304      	str	r3, [sp, #16]
 8011bc0:	46a2      	mov	sl, r4
 8011bc2:	e7d2      	b.n	8011b6a <_vfiprintf_r+0xc6>
 8011bc4:	9b03      	ldr	r3, [sp, #12]
 8011bc6:	1d19      	adds	r1, r3, #4
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	9103      	str	r1, [sp, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	bfbb      	ittet	lt
 8011bd0:	425b      	neglt	r3, r3
 8011bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8011bd6:	9307      	strge	r3, [sp, #28]
 8011bd8:	9307      	strlt	r3, [sp, #28]
 8011bda:	bfb8      	it	lt
 8011bdc:	9204      	strlt	r2, [sp, #16]
 8011bde:	7823      	ldrb	r3, [r4, #0]
 8011be0:	2b2e      	cmp	r3, #46	; 0x2e
 8011be2:	d10c      	bne.n	8011bfe <_vfiprintf_r+0x15a>
 8011be4:	7863      	ldrb	r3, [r4, #1]
 8011be6:	2b2a      	cmp	r3, #42	; 0x2a
 8011be8:	d134      	bne.n	8011c54 <_vfiprintf_r+0x1b0>
 8011bea:	9b03      	ldr	r3, [sp, #12]
 8011bec:	1d1a      	adds	r2, r3, #4
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	9203      	str	r2, [sp, #12]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	bfb8      	it	lt
 8011bf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bfa:	3402      	adds	r4, #2
 8011bfc:	9305      	str	r3, [sp, #20]
 8011bfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011cd4 <_vfiprintf_r+0x230>
 8011c02:	7821      	ldrb	r1, [r4, #0]
 8011c04:	2203      	movs	r2, #3
 8011c06:	4650      	mov	r0, sl
 8011c08:	f7ee fb12 	bl	8000230 <memchr>
 8011c0c:	b138      	cbz	r0, 8011c1e <_vfiprintf_r+0x17a>
 8011c0e:	9b04      	ldr	r3, [sp, #16]
 8011c10:	eba0 000a 	sub.w	r0, r0, sl
 8011c14:	2240      	movs	r2, #64	; 0x40
 8011c16:	4082      	lsls	r2, r0
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	3401      	adds	r4, #1
 8011c1c:	9304      	str	r3, [sp, #16]
 8011c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c22:	4829      	ldr	r0, [pc, #164]	; (8011cc8 <_vfiprintf_r+0x224>)
 8011c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c28:	2206      	movs	r2, #6
 8011c2a:	f7ee fb01 	bl	8000230 <memchr>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d03f      	beq.n	8011cb2 <_vfiprintf_r+0x20e>
 8011c32:	4b26      	ldr	r3, [pc, #152]	; (8011ccc <_vfiprintf_r+0x228>)
 8011c34:	bb1b      	cbnz	r3, 8011c7e <_vfiprintf_r+0x1da>
 8011c36:	9b03      	ldr	r3, [sp, #12]
 8011c38:	3307      	adds	r3, #7
 8011c3a:	f023 0307 	bic.w	r3, r3, #7
 8011c3e:	3308      	adds	r3, #8
 8011c40:	9303      	str	r3, [sp, #12]
 8011c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c44:	443b      	add	r3, r7
 8011c46:	9309      	str	r3, [sp, #36]	; 0x24
 8011c48:	e768      	b.n	8011b1c <_vfiprintf_r+0x78>
 8011c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c4e:	460c      	mov	r4, r1
 8011c50:	2001      	movs	r0, #1
 8011c52:	e7a6      	b.n	8011ba2 <_vfiprintf_r+0xfe>
 8011c54:	2300      	movs	r3, #0
 8011c56:	3401      	adds	r4, #1
 8011c58:	9305      	str	r3, [sp, #20]
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	f04f 0c0a 	mov.w	ip, #10
 8011c60:	4620      	mov	r0, r4
 8011c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c66:	3a30      	subs	r2, #48	; 0x30
 8011c68:	2a09      	cmp	r2, #9
 8011c6a:	d903      	bls.n	8011c74 <_vfiprintf_r+0x1d0>
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d0c6      	beq.n	8011bfe <_vfiprintf_r+0x15a>
 8011c70:	9105      	str	r1, [sp, #20]
 8011c72:	e7c4      	b.n	8011bfe <_vfiprintf_r+0x15a>
 8011c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c78:	4604      	mov	r4, r0
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	e7f0      	b.n	8011c60 <_vfiprintf_r+0x1bc>
 8011c7e:	ab03      	add	r3, sp, #12
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	462a      	mov	r2, r5
 8011c84:	4b12      	ldr	r3, [pc, #72]	; (8011cd0 <_vfiprintf_r+0x22c>)
 8011c86:	a904      	add	r1, sp, #16
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f3af 8000 	nop.w
 8011c8e:	4607      	mov	r7, r0
 8011c90:	1c78      	adds	r0, r7, #1
 8011c92:	d1d6      	bne.n	8011c42 <_vfiprintf_r+0x19e>
 8011c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c96:	07d9      	lsls	r1, r3, #31
 8011c98:	d405      	bmi.n	8011ca6 <_vfiprintf_r+0x202>
 8011c9a:	89ab      	ldrh	r3, [r5, #12]
 8011c9c:	059a      	lsls	r2, r3, #22
 8011c9e:	d402      	bmi.n	8011ca6 <_vfiprintf_r+0x202>
 8011ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ca2:	f7ff fe6b 	bl	801197c <__retarget_lock_release_recursive>
 8011ca6:	89ab      	ldrh	r3, [r5, #12]
 8011ca8:	065b      	lsls	r3, r3, #25
 8011caa:	f53f af1d 	bmi.w	8011ae8 <_vfiprintf_r+0x44>
 8011cae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cb0:	e71c      	b.n	8011aec <_vfiprintf_r+0x48>
 8011cb2:	ab03      	add	r3, sp, #12
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	462a      	mov	r2, r5
 8011cb8:	4b05      	ldr	r3, [pc, #20]	; (8011cd0 <_vfiprintf_r+0x22c>)
 8011cba:	a904      	add	r1, sp, #16
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f000 f879 	bl	8011db4 <_printf_i>
 8011cc2:	e7e4      	b.n	8011c8e <_vfiprintf_r+0x1ea>
 8011cc4:	080146d4 	.word	0x080146d4
 8011cc8:	080146de 	.word	0x080146de
 8011ccc:	00000000 	.word	0x00000000
 8011cd0:	08011a7f 	.word	0x08011a7f
 8011cd4:	080146da 	.word	0x080146da

08011cd8 <_printf_common>:
 8011cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cdc:	4616      	mov	r6, r2
 8011cde:	4699      	mov	r9, r3
 8011ce0:	688a      	ldr	r2, [r1, #8]
 8011ce2:	690b      	ldr	r3, [r1, #16]
 8011ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	bfb8      	it	lt
 8011cec:	4613      	movlt	r3, r2
 8011cee:	6033      	str	r3, [r6, #0]
 8011cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011cf4:	4607      	mov	r7, r0
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	b10a      	cbz	r2, 8011cfe <_printf_common+0x26>
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	6033      	str	r3, [r6, #0]
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	0699      	lsls	r1, r3, #26
 8011d02:	bf42      	ittt	mi
 8011d04:	6833      	ldrmi	r3, [r6, #0]
 8011d06:	3302      	addmi	r3, #2
 8011d08:	6033      	strmi	r3, [r6, #0]
 8011d0a:	6825      	ldr	r5, [r4, #0]
 8011d0c:	f015 0506 	ands.w	r5, r5, #6
 8011d10:	d106      	bne.n	8011d20 <_printf_common+0x48>
 8011d12:	f104 0a19 	add.w	sl, r4, #25
 8011d16:	68e3      	ldr	r3, [r4, #12]
 8011d18:	6832      	ldr	r2, [r6, #0]
 8011d1a:	1a9b      	subs	r3, r3, r2
 8011d1c:	42ab      	cmp	r3, r5
 8011d1e:	dc26      	bgt.n	8011d6e <_printf_common+0x96>
 8011d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d24:	1e13      	subs	r3, r2, #0
 8011d26:	6822      	ldr	r2, [r4, #0]
 8011d28:	bf18      	it	ne
 8011d2a:	2301      	movne	r3, #1
 8011d2c:	0692      	lsls	r2, r2, #26
 8011d2e:	d42b      	bmi.n	8011d88 <_printf_common+0xb0>
 8011d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d34:	4649      	mov	r1, r9
 8011d36:	4638      	mov	r0, r7
 8011d38:	47c0      	blx	r8
 8011d3a:	3001      	adds	r0, #1
 8011d3c:	d01e      	beq.n	8011d7c <_printf_common+0xa4>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	6922      	ldr	r2, [r4, #16]
 8011d42:	f003 0306 	and.w	r3, r3, #6
 8011d46:	2b04      	cmp	r3, #4
 8011d48:	bf02      	ittt	eq
 8011d4a:	68e5      	ldreq	r5, [r4, #12]
 8011d4c:	6833      	ldreq	r3, [r6, #0]
 8011d4e:	1aed      	subeq	r5, r5, r3
 8011d50:	68a3      	ldr	r3, [r4, #8]
 8011d52:	bf0c      	ite	eq
 8011d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d58:	2500      	movne	r5, #0
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	bfc4      	itt	gt
 8011d5e:	1a9b      	subgt	r3, r3, r2
 8011d60:	18ed      	addgt	r5, r5, r3
 8011d62:	2600      	movs	r6, #0
 8011d64:	341a      	adds	r4, #26
 8011d66:	42b5      	cmp	r5, r6
 8011d68:	d11a      	bne.n	8011da0 <_printf_common+0xc8>
 8011d6a:	2000      	movs	r0, #0
 8011d6c:	e008      	b.n	8011d80 <_printf_common+0xa8>
 8011d6e:	2301      	movs	r3, #1
 8011d70:	4652      	mov	r2, sl
 8011d72:	4649      	mov	r1, r9
 8011d74:	4638      	mov	r0, r7
 8011d76:	47c0      	blx	r8
 8011d78:	3001      	adds	r0, #1
 8011d7a:	d103      	bne.n	8011d84 <_printf_common+0xac>
 8011d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d84:	3501      	adds	r5, #1
 8011d86:	e7c6      	b.n	8011d16 <_printf_common+0x3e>
 8011d88:	18e1      	adds	r1, r4, r3
 8011d8a:	1c5a      	adds	r2, r3, #1
 8011d8c:	2030      	movs	r0, #48	; 0x30
 8011d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d92:	4422      	add	r2, r4
 8011d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d9c:	3302      	adds	r3, #2
 8011d9e:	e7c7      	b.n	8011d30 <_printf_common+0x58>
 8011da0:	2301      	movs	r3, #1
 8011da2:	4622      	mov	r2, r4
 8011da4:	4649      	mov	r1, r9
 8011da6:	4638      	mov	r0, r7
 8011da8:	47c0      	blx	r8
 8011daa:	3001      	adds	r0, #1
 8011dac:	d0e6      	beq.n	8011d7c <_printf_common+0xa4>
 8011dae:	3601      	adds	r6, #1
 8011db0:	e7d9      	b.n	8011d66 <_printf_common+0x8e>
	...

08011db4 <_printf_i>:
 8011db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011db8:	7e0f      	ldrb	r7, [r1, #24]
 8011dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011dbc:	2f78      	cmp	r7, #120	; 0x78
 8011dbe:	4691      	mov	r9, r2
 8011dc0:	4680      	mov	r8, r0
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	469a      	mov	sl, r3
 8011dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011dca:	d807      	bhi.n	8011ddc <_printf_i+0x28>
 8011dcc:	2f62      	cmp	r7, #98	; 0x62
 8011dce:	d80a      	bhi.n	8011de6 <_printf_i+0x32>
 8011dd0:	2f00      	cmp	r7, #0
 8011dd2:	f000 80d4 	beq.w	8011f7e <_printf_i+0x1ca>
 8011dd6:	2f58      	cmp	r7, #88	; 0x58
 8011dd8:	f000 80c0 	beq.w	8011f5c <_printf_i+0x1a8>
 8011ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011de4:	e03a      	b.n	8011e5c <_printf_i+0xa8>
 8011de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011dea:	2b15      	cmp	r3, #21
 8011dec:	d8f6      	bhi.n	8011ddc <_printf_i+0x28>
 8011dee:	a101      	add	r1, pc, #4	; (adr r1, 8011df4 <_printf_i+0x40>)
 8011df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011df4:	08011e4d 	.word	0x08011e4d
 8011df8:	08011e61 	.word	0x08011e61
 8011dfc:	08011ddd 	.word	0x08011ddd
 8011e00:	08011ddd 	.word	0x08011ddd
 8011e04:	08011ddd 	.word	0x08011ddd
 8011e08:	08011ddd 	.word	0x08011ddd
 8011e0c:	08011e61 	.word	0x08011e61
 8011e10:	08011ddd 	.word	0x08011ddd
 8011e14:	08011ddd 	.word	0x08011ddd
 8011e18:	08011ddd 	.word	0x08011ddd
 8011e1c:	08011ddd 	.word	0x08011ddd
 8011e20:	08011f65 	.word	0x08011f65
 8011e24:	08011e8d 	.word	0x08011e8d
 8011e28:	08011f1f 	.word	0x08011f1f
 8011e2c:	08011ddd 	.word	0x08011ddd
 8011e30:	08011ddd 	.word	0x08011ddd
 8011e34:	08011f87 	.word	0x08011f87
 8011e38:	08011ddd 	.word	0x08011ddd
 8011e3c:	08011e8d 	.word	0x08011e8d
 8011e40:	08011ddd 	.word	0x08011ddd
 8011e44:	08011ddd 	.word	0x08011ddd
 8011e48:	08011f27 	.word	0x08011f27
 8011e4c:	682b      	ldr	r3, [r5, #0]
 8011e4e:	1d1a      	adds	r2, r3, #4
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	602a      	str	r2, [r5, #0]
 8011e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e09f      	b.n	8011fa0 <_printf_i+0x1ec>
 8011e60:	6820      	ldr	r0, [r4, #0]
 8011e62:	682b      	ldr	r3, [r5, #0]
 8011e64:	0607      	lsls	r7, r0, #24
 8011e66:	f103 0104 	add.w	r1, r3, #4
 8011e6a:	6029      	str	r1, [r5, #0]
 8011e6c:	d501      	bpl.n	8011e72 <_printf_i+0xbe>
 8011e6e:	681e      	ldr	r6, [r3, #0]
 8011e70:	e003      	b.n	8011e7a <_printf_i+0xc6>
 8011e72:	0646      	lsls	r6, r0, #25
 8011e74:	d5fb      	bpl.n	8011e6e <_printf_i+0xba>
 8011e76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011e7a:	2e00      	cmp	r6, #0
 8011e7c:	da03      	bge.n	8011e86 <_printf_i+0xd2>
 8011e7e:	232d      	movs	r3, #45	; 0x2d
 8011e80:	4276      	negs	r6, r6
 8011e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e86:	485a      	ldr	r0, [pc, #360]	; (8011ff0 <_printf_i+0x23c>)
 8011e88:	230a      	movs	r3, #10
 8011e8a:	e012      	b.n	8011eb2 <_printf_i+0xfe>
 8011e8c:	682b      	ldr	r3, [r5, #0]
 8011e8e:	6820      	ldr	r0, [r4, #0]
 8011e90:	1d19      	adds	r1, r3, #4
 8011e92:	6029      	str	r1, [r5, #0]
 8011e94:	0605      	lsls	r5, r0, #24
 8011e96:	d501      	bpl.n	8011e9c <_printf_i+0xe8>
 8011e98:	681e      	ldr	r6, [r3, #0]
 8011e9a:	e002      	b.n	8011ea2 <_printf_i+0xee>
 8011e9c:	0641      	lsls	r1, r0, #25
 8011e9e:	d5fb      	bpl.n	8011e98 <_printf_i+0xe4>
 8011ea0:	881e      	ldrh	r6, [r3, #0]
 8011ea2:	4853      	ldr	r0, [pc, #332]	; (8011ff0 <_printf_i+0x23c>)
 8011ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8011ea6:	bf0c      	ite	eq
 8011ea8:	2308      	moveq	r3, #8
 8011eaa:	230a      	movne	r3, #10
 8011eac:	2100      	movs	r1, #0
 8011eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011eb2:	6865      	ldr	r5, [r4, #4]
 8011eb4:	60a5      	str	r5, [r4, #8]
 8011eb6:	2d00      	cmp	r5, #0
 8011eb8:	bfa2      	ittt	ge
 8011eba:	6821      	ldrge	r1, [r4, #0]
 8011ebc:	f021 0104 	bicge.w	r1, r1, #4
 8011ec0:	6021      	strge	r1, [r4, #0]
 8011ec2:	b90e      	cbnz	r6, 8011ec8 <_printf_i+0x114>
 8011ec4:	2d00      	cmp	r5, #0
 8011ec6:	d04b      	beq.n	8011f60 <_printf_i+0x1ac>
 8011ec8:	4615      	mov	r5, r2
 8011eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8011ece:	fb03 6711 	mls	r7, r3, r1, r6
 8011ed2:	5dc7      	ldrb	r7, [r0, r7]
 8011ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ed8:	4637      	mov	r7, r6
 8011eda:	42bb      	cmp	r3, r7
 8011edc:	460e      	mov	r6, r1
 8011ede:	d9f4      	bls.n	8011eca <_printf_i+0x116>
 8011ee0:	2b08      	cmp	r3, #8
 8011ee2:	d10b      	bne.n	8011efc <_printf_i+0x148>
 8011ee4:	6823      	ldr	r3, [r4, #0]
 8011ee6:	07de      	lsls	r6, r3, #31
 8011ee8:	d508      	bpl.n	8011efc <_printf_i+0x148>
 8011eea:	6923      	ldr	r3, [r4, #16]
 8011eec:	6861      	ldr	r1, [r4, #4]
 8011eee:	4299      	cmp	r1, r3
 8011ef0:	bfde      	ittt	le
 8011ef2:	2330      	movle	r3, #48	; 0x30
 8011ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011efc:	1b52      	subs	r2, r2, r5
 8011efe:	6122      	str	r2, [r4, #16]
 8011f00:	f8cd a000 	str.w	sl, [sp]
 8011f04:	464b      	mov	r3, r9
 8011f06:	aa03      	add	r2, sp, #12
 8011f08:	4621      	mov	r1, r4
 8011f0a:	4640      	mov	r0, r8
 8011f0c:	f7ff fee4 	bl	8011cd8 <_printf_common>
 8011f10:	3001      	adds	r0, #1
 8011f12:	d14a      	bne.n	8011faa <_printf_i+0x1f6>
 8011f14:	f04f 30ff 	mov.w	r0, #4294967295
 8011f18:	b004      	add	sp, #16
 8011f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f1e:	6823      	ldr	r3, [r4, #0]
 8011f20:	f043 0320 	orr.w	r3, r3, #32
 8011f24:	6023      	str	r3, [r4, #0]
 8011f26:	4833      	ldr	r0, [pc, #204]	; (8011ff4 <_printf_i+0x240>)
 8011f28:	2778      	movs	r7, #120	; 0x78
 8011f2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	6829      	ldr	r1, [r5, #0]
 8011f32:	061f      	lsls	r7, r3, #24
 8011f34:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f38:	d402      	bmi.n	8011f40 <_printf_i+0x18c>
 8011f3a:	065f      	lsls	r7, r3, #25
 8011f3c:	bf48      	it	mi
 8011f3e:	b2b6      	uxthmi	r6, r6
 8011f40:	07df      	lsls	r7, r3, #31
 8011f42:	bf48      	it	mi
 8011f44:	f043 0320 	orrmi.w	r3, r3, #32
 8011f48:	6029      	str	r1, [r5, #0]
 8011f4a:	bf48      	it	mi
 8011f4c:	6023      	strmi	r3, [r4, #0]
 8011f4e:	b91e      	cbnz	r6, 8011f58 <_printf_i+0x1a4>
 8011f50:	6823      	ldr	r3, [r4, #0]
 8011f52:	f023 0320 	bic.w	r3, r3, #32
 8011f56:	6023      	str	r3, [r4, #0]
 8011f58:	2310      	movs	r3, #16
 8011f5a:	e7a7      	b.n	8011eac <_printf_i+0xf8>
 8011f5c:	4824      	ldr	r0, [pc, #144]	; (8011ff0 <_printf_i+0x23c>)
 8011f5e:	e7e4      	b.n	8011f2a <_printf_i+0x176>
 8011f60:	4615      	mov	r5, r2
 8011f62:	e7bd      	b.n	8011ee0 <_printf_i+0x12c>
 8011f64:	682b      	ldr	r3, [r5, #0]
 8011f66:	6826      	ldr	r6, [r4, #0]
 8011f68:	6961      	ldr	r1, [r4, #20]
 8011f6a:	1d18      	adds	r0, r3, #4
 8011f6c:	6028      	str	r0, [r5, #0]
 8011f6e:	0635      	lsls	r5, r6, #24
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	d501      	bpl.n	8011f78 <_printf_i+0x1c4>
 8011f74:	6019      	str	r1, [r3, #0]
 8011f76:	e002      	b.n	8011f7e <_printf_i+0x1ca>
 8011f78:	0670      	lsls	r0, r6, #25
 8011f7a:	d5fb      	bpl.n	8011f74 <_printf_i+0x1c0>
 8011f7c:	8019      	strh	r1, [r3, #0]
 8011f7e:	2300      	movs	r3, #0
 8011f80:	6123      	str	r3, [r4, #16]
 8011f82:	4615      	mov	r5, r2
 8011f84:	e7bc      	b.n	8011f00 <_printf_i+0x14c>
 8011f86:	682b      	ldr	r3, [r5, #0]
 8011f88:	1d1a      	adds	r2, r3, #4
 8011f8a:	602a      	str	r2, [r5, #0]
 8011f8c:	681d      	ldr	r5, [r3, #0]
 8011f8e:	6862      	ldr	r2, [r4, #4]
 8011f90:	2100      	movs	r1, #0
 8011f92:	4628      	mov	r0, r5
 8011f94:	f7ee f94c 	bl	8000230 <memchr>
 8011f98:	b108      	cbz	r0, 8011f9e <_printf_i+0x1ea>
 8011f9a:	1b40      	subs	r0, r0, r5
 8011f9c:	6060      	str	r0, [r4, #4]
 8011f9e:	6863      	ldr	r3, [r4, #4]
 8011fa0:	6123      	str	r3, [r4, #16]
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fa8:	e7aa      	b.n	8011f00 <_printf_i+0x14c>
 8011faa:	6923      	ldr	r3, [r4, #16]
 8011fac:	462a      	mov	r2, r5
 8011fae:	4649      	mov	r1, r9
 8011fb0:	4640      	mov	r0, r8
 8011fb2:	47d0      	blx	sl
 8011fb4:	3001      	adds	r0, #1
 8011fb6:	d0ad      	beq.n	8011f14 <_printf_i+0x160>
 8011fb8:	6823      	ldr	r3, [r4, #0]
 8011fba:	079b      	lsls	r3, r3, #30
 8011fbc:	d413      	bmi.n	8011fe6 <_printf_i+0x232>
 8011fbe:	68e0      	ldr	r0, [r4, #12]
 8011fc0:	9b03      	ldr	r3, [sp, #12]
 8011fc2:	4298      	cmp	r0, r3
 8011fc4:	bfb8      	it	lt
 8011fc6:	4618      	movlt	r0, r3
 8011fc8:	e7a6      	b.n	8011f18 <_printf_i+0x164>
 8011fca:	2301      	movs	r3, #1
 8011fcc:	4632      	mov	r2, r6
 8011fce:	4649      	mov	r1, r9
 8011fd0:	4640      	mov	r0, r8
 8011fd2:	47d0      	blx	sl
 8011fd4:	3001      	adds	r0, #1
 8011fd6:	d09d      	beq.n	8011f14 <_printf_i+0x160>
 8011fd8:	3501      	adds	r5, #1
 8011fda:	68e3      	ldr	r3, [r4, #12]
 8011fdc:	9903      	ldr	r1, [sp, #12]
 8011fde:	1a5b      	subs	r3, r3, r1
 8011fe0:	42ab      	cmp	r3, r5
 8011fe2:	dcf2      	bgt.n	8011fca <_printf_i+0x216>
 8011fe4:	e7eb      	b.n	8011fbe <_printf_i+0x20a>
 8011fe6:	2500      	movs	r5, #0
 8011fe8:	f104 0619 	add.w	r6, r4, #25
 8011fec:	e7f5      	b.n	8011fda <_printf_i+0x226>
 8011fee:	bf00      	nop
 8011ff0:	080146e5 	.word	0x080146e5
 8011ff4:	080146f6 	.word	0x080146f6

08011ff8 <__sflush_r>:
 8011ff8:	898a      	ldrh	r2, [r1, #12]
 8011ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffe:	4605      	mov	r5, r0
 8012000:	0710      	lsls	r0, r2, #28
 8012002:	460c      	mov	r4, r1
 8012004:	d458      	bmi.n	80120b8 <__sflush_r+0xc0>
 8012006:	684b      	ldr	r3, [r1, #4]
 8012008:	2b00      	cmp	r3, #0
 801200a:	dc05      	bgt.n	8012018 <__sflush_r+0x20>
 801200c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801200e:	2b00      	cmp	r3, #0
 8012010:	dc02      	bgt.n	8012018 <__sflush_r+0x20>
 8012012:	2000      	movs	r0, #0
 8012014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801201a:	2e00      	cmp	r6, #0
 801201c:	d0f9      	beq.n	8012012 <__sflush_r+0x1a>
 801201e:	2300      	movs	r3, #0
 8012020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012024:	682f      	ldr	r7, [r5, #0]
 8012026:	6a21      	ldr	r1, [r4, #32]
 8012028:	602b      	str	r3, [r5, #0]
 801202a:	d032      	beq.n	8012092 <__sflush_r+0x9a>
 801202c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801202e:	89a3      	ldrh	r3, [r4, #12]
 8012030:	075a      	lsls	r2, r3, #29
 8012032:	d505      	bpl.n	8012040 <__sflush_r+0x48>
 8012034:	6863      	ldr	r3, [r4, #4]
 8012036:	1ac0      	subs	r0, r0, r3
 8012038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801203a:	b10b      	cbz	r3, 8012040 <__sflush_r+0x48>
 801203c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801203e:	1ac0      	subs	r0, r0, r3
 8012040:	2300      	movs	r3, #0
 8012042:	4602      	mov	r2, r0
 8012044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012046:	6a21      	ldr	r1, [r4, #32]
 8012048:	4628      	mov	r0, r5
 801204a:	47b0      	blx	r6
 801204c:	1c43      	adds	r3, r0, #1
 801204e:	89a3      	ldrh	r3, [r4, #12]
 8012050:	d106      	bne.n	8012060 <__sflush_r+0x68>
 8012052:	6829      	ldr	r1, [r5, #0]
 8012054:	291d      	cmp	r1, #29
 8012056:	d82b      	bhi.n	80120b0 <__sflush_r+0xb8>
 8012058:	4a29      	ldr	r2, [pc, #164]	; (8012100 <__sflush_r+0x108>)
 801205a:	410a      	asrs	r2, r1
 801205c:	07d6      	lsls	r6, r2, #31
 801205e:	d427      	bmi.n	80120b0 <__sflush_r+0xb8>
 8012060:	2200      	movs	r2, #0
 8012062:	6062      	str	r2, [r4, #4]
 8012064:	04d9      	lsls	r1, r3, #19
 8012066:	6922      	ldr	r2, [r4, #16]
 8012068:	6022      	str	r2, [r4, #0]
 801206a:	d504      	bpl.n	8012076 <__sflush_r+0x7e>
 801206c:	1c42      	adds	r2, r0, #1
 801206e:	d101      	bne.n	8012074 <__sflush_r+0x7c>
 8012070:	682b      	ldr	r3, [r5, #0]
 8012072:	b903      	cbnz	r3, 8012076 <__sflush_r+0x7e>
 8012074:	6560      	str	r0, [r4, #84]	; 0x54
 8012076:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012078:	602f      	str	r7, [r5, #0]
 801207a:	2900      	cmp	r1, #0
 801207c:	d0c9      	beq.n	8012012 <__sflush_r+0x1a>
 801207e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012082:	4299      	cmp	r1, r3
 8012084:	d002      	beq.n	801208c <__sflush_r+0x94>
 8012086:	4628      	mov	r0, r5
 8012088:	f7ff fc96 	bl	80119b8 <_free_r>
 801208c:	2000      	movs	r0, #0
 801208e:	6360      	str	r0, [r4, #52]	; 0x34
 8012090:	e7c0      	b.n	8012014 <__sflush_r+0x1c>
 8012092:	2301      	movs	r3, #1
 8012094:	4628      	mov	r0, r5
 8012096:	47b0      	blx	r6
 8012098:	1c41      	adds	r1, r0, #1
 801209a:	d1c8      	bne.n	801202e <__sflush_r+0x36>
 801209c:	682b      	ldr	r3, [r5, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d0c5      	beq.n	801202e <__sflush_r+0x36>
 80120a2:	2b1d      	cmp	r3, #29
 80120a4:	d001      	beq.n	80120aa <__sflush_r+0xb2>
 80120a6:	2b16      	cmp	r3, #22
 80120a8:	d101      	bne.n	80120ae <__sflush_r+0xb6>
 80120aa:	602f      	str	r7, [r5, #0]
 80120ac:	e7b1      	b.n	8012012 <__sflush_r+0x1a>
 80120ae:	89a3      	ldrh	r3, [r4, #12]
 80120b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120b4:	81a3      	strh	r3, [r4, #12]
 80120b6:	e7ad      	b.n	8012014 <__sflush_r+0x1c>
 80120b8:	690f      	ldr	r7, [r1, #16]
 80120ba:	2f00      	cmp	r7, #0
 80120bc:	d0a9      	beq.n	8012012 <__sflush_r+0x1a>
 80120be:	0793      	lsls	r3, r2, #30
 80120c0:	680e      	ldr	r6, [r1, #0]
 80120c2:	bf08      	it	eq
 80120c4:	694b      	ldreq	r3, [r1, #20]
 80120c6:	600f      	str	r7, [r1, #0]
 80120c8:	bf18      	it	ne
 80120ca:	2300      	movne	r3, #0
 80120cc:	eba6 0807 	sub.w	r8, r6, r7
 80120d0:	608b      	str	r3, [r1, #8]
 80120d2:	f1b8 0f00 	cmp.w	r8, #0
 80120d6:	dd9c      	ble.n	8012012 <__sflush_r+0x1a>
 80120d8:	6a21      	ldr	r1, [r4, #32]
 80120da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120dc:	4643      	mov	r3, r8
 80120de:	463a      	mov	r2, r7
 80120e0:	4628      	mov	r0, r5
 80120e2:	47b0      	blx	r6
 80120e4:	2800      	cmp	r0, #0
 80120e6:	dc06      	bgt.n	80120f6 <__sflush_r+0xfe>
 80120e8:	89a3      	ldrh	r3, [r4, #12]
 80120ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120ee:	81a3      	strh	r3, [r4, #12]
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295
 80120f4:	e78e      	b.n	8012014 <__sflush_r+0x1c>
 80120f6:	4407      	add	r7, r0
 80120f8:	eba8 0800 	sub.w	r8, r8, r0
 80120fc:	e7e9      	b.n	80120d2 <__sflush_r+0xda>
 80120fe:	bf00      	nop
 8012100:	dfbffffe 	.word	0xdfbffffe

08012104 <_fflush_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	690b      	ldr	r3, [r1, #16]
 8012108:	4605      	mov	r5, r0
 801210a:	460c      	mov	r4, r1
 801210c:	b913      	cbnz	r3, 8012114 <_fflush_r+0x10>
 801210e:	2500      	movs	r5, #0
 8012110:	4628      	mov	r0, r5
 8012112:	bd38      	pop	{r3, r4, r5, pc}
 8012114:	b118      	cbz	r0, 801211e <_fflush_r+0x1a>
 8012116:	6a03      	ldr	r3, [r0, #32]
 8012118:	b90b      	cbnz	r3, 801211e <_fflush_r+0x1a>
 801211a:	f7ff fab1 	bl	8011680 <__sinit>
 801211e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d0f3      	beq.n	801210e <_fflush_r+0xa>
 8012126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012128:	07d0      	lsls	r0, r2, #31
 801212a:	d404      	bmi.n	8012136 <_fflush_r+0x32>
 801212c:	0599      	lsls	r1, r3, #22
 801212e:	d402      	bmi.n	8012136 <_fflush_r+0x32>
 8012130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012132:	f7ff fc22 	bl	801197a <__retarget_lock_acquire_recursive>
 8012136:	4628      	mov	r0, r5
 8012138:	4621      	mov	r1, r4
 801213a:	f7ff ff5d 	bl	8011ff8 <__sflush_r>
 801213e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012140:	07da      	lsls	r2, r3, #31
 8012142:	4605      	mov	r5, r0
 8012144:	d4e4      	bmi.n	8012110 <_fflush_r+0xc>
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	059b      	lsls	r3, r3, #22
 801214a:	d4e1      	bmi.n	8012110 <_fflush_r+0xc>
 801214c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801214e:	f7ff fc15 	bl	801197c <__retarget_lock_release_recursive>
 8012152:	e7dd      	b.n	8012110 <_fflush_r+0xc>

08012154 <_putc_r>:
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	460d      	mov	r5, r1
 8012158:	4614      	mov	r4, r2
 801215a:	4606      	mov	r6, r0
 801215c:	b118      	cbz	r0, 8012166 <_putc_r+0x12>
 801215e:	6a03      	ldr	r3, [r0, #32]
 8012160:	b90b      	cbnz	r3, 8012166 <_putc_r+0x12>
 8012162:	f7ff fa8d 	bl	8011680 <__sinit>
 8012166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012168:	07d8      	lsls	r0, r3, #31
 801216a:	d405      	bmi.n	8012178 <_putc_r+0x24>
 801216c:	89a3      	ldrh	r3, [r4, #12]
 801216e:	0599      	lsls	r1, r3, #22
 8012170:	d402      	bmi.n	8012178 <_putc_r+0x24>
 8012172:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012174:	f7ff fc01 	bl	801197a <__retarget_lock_acquire_recursive>
 8012178:	68a3      	ldr	r3, [r4, #8]
 801217a:	3b01      	subs	r3, #1
 801217c:	2b00      	cmp	r3, #0
 801217e:	60a3      	str	r3, [r4, #8]
 8012180:	da05      	bge.n	801218e <_putc_r+0x3a>
 8012182:	69a2      	ldr	r2, [r4, #24]
 8012184:	4293      	cmp	r3, r2
 8012186:	db12      	blt.n	80121ae <_putc_r+0x5a>
 8012188:	b2eb      	uxtb	r3, r5
 801218a:	2b0a      	cmp	r3, #10
 801218c:	d00f      	beq.n	80121ae <_putc_r+0x5a>
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	1c5a      	adds	r2, r3, #1
 8012192:	6022      	str	r2, [r4, #0]
 8012194:	701d      	strb	r5, [r3, #0]
 8012196:	b2ed      	uxtb	r5, r5
 8012198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801219a:	07da      	lsls	r2, r3, #31
 801219c:	d405      	bmi.n	80121aa <_putc_r+0x56>
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	059b      	lsls	r3, r3, #22
 80121a2:	d402      	bmi.n	80121aa <_putc_r+0x56>
 80121a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121a6:	f7ff fbe9 	bl	801197c <__retarget_lock_release_recursive>
 80121aa:	4628      	mov	r0, r5
 80121ac:	bd70      	pop	{r4, r5, r6, pc}
 80121ae:	4629      	mov	r1, r5
 80121b0:	4622      	mov	r2, r4
 80121b2:	4630      	mov	r0, r6
 80121b4:	f000 f802 	bl	80121bc <__swbuf_r>
 80121b8:	4605      	mov	r5, r0
 80121ba:	e7ed      	b.n	8012198 <_putc_r+0x44>

080121bc <__swbuf_r>:
 80121bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121be:	460e      	mov	r6, r1
 80121c0:	4614      	mov	r4, r2
 80121c2:	4605      	mov	r5, r0
 80121c4:	b118      	cbz	r0, 80121ce <__swbuf_r+0x12>
 80121c6:	6a03      	ldr	r3, [r0, #32]
 80121c8:	b90b      	cbnz	r3, 80121ce <__swbuf_r+0x12>
 80121ca:	f7ff fa59 	bl	8011680 <__sinit>
 80121ce:	69a3      	ldr	r3, [r4, #24]
 80121d0:	60a3      	str	r3, [r4, #8]
 80121d2:	89a3      	ldrh	r3, [r4, #12]
 80121d4:	071a      	lsls	r2, r3, #28
 80121d6:	d525      	bpl.n	8012224 <__swbuf_r+0x68>
 80121d8:	6923      	ldr	r3, [r4, #16]
 80121da:	b31b      	cbz	r3, 8012224 <__swbuf_r+0x68>
 80121dc:	6823      	ldr	r3, [r4, #0]
 80121de:	6922      	ldr	r2, [r4, #16]
 80121e0:	1a98      	subs	r0, r3, r2
 80121e2:	6963      	ldr	r3, [r4, #20]
 80121e4:	b2f6      	uxtb	r6, r6
 80121e6:	4283      	cmp	r3, r0
 80121e8:	4637      	mov	r7, r6
 80121ea:	dc04      	bgt.n	80121f6 <__swbuf_r+0x3a>
 80121ec:	4621      	mov	r1, r4
 80121ee:	4628      	mov	r0, r5
 80121f0:	f7ff ff88 	bl	8012104 <_fflush_r>
 80121f4:	b9e0      	cbnz	r0, 8012230 <__swbuf_r+0x74>
 80121f6:	68a3      	ldr	r3, [r4, #8]
 80121f8:	3b01      	subs	r3, #1
 80121fa:	60a3      	str	r3, [r4, #8]
 80121fc:	6823      	ldr	r3, [r4, #0]
 80121fe:	1c5a      	adds	r2, r3, #1
 8012200:	6022      	str	r2, [r4, #0]
 8012202:	701e      	strb	r6, [r3, #0]
 8012204:	6962      	ldr	r2, [r4, #20]
 8012206:	1c43      	adds	r3, r0, #1
 8012208:	429a      	cmp	r2, r3
 801220a:	d004      	beq.n	8012216 <__swbuf_r+0x5a>
 801220c:	89a3      	ldrh	r3, [r4, #12]
 801220e:	07db      	lsls	r3, r3, #31
 8012210:	d506      	bpl.n	8012220 <__swbuf_r+0x64>
 8012212:	2e0a      	cmp	r6, #10
 8012214:	d104      	bne.n	8012220 <__swbuf_r+0x64>
 8012216:	4621      	mov	r1, r4
 8012218:	4628      	mov	r0, r5
 801221a:	f7ff ff73 	bl	8012104 <_fflush_r>
 801221e:	b938      	cbnz	r0, 8012230 <__swbuf_r+0x74>
 8012220:	4638      	mov	r0, r7
 8012222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012224:	4621      	mov	r1, r4
 8012226:	4628      	mov	r0, r5
 8012228:	f000 f806 	bl	8012238 <__swsetup_r>
 801222c:	2800      	cmp	r0, #0
 801222e:	d0d5      	beq.n	80121dc <__swbuf_r+0x20>
 8012230:	f04f 37ff 	mov.w	r7, #4294967295
 8012234:	e7f4      	b.n	8012220 <__swbuf_r+0x64>
	...

08012238 <__swsetup_r>:
 8012238:	b538      	push	{r3, r4, r5, lr}
 801223a:	4b2a      	ldr	r3, [pc, #168]	; (80122e4 <__swsetup_r+0xac>)
 801223c:	4605      	mov	r5, r0
 801223e:	6818      	ldr	r0, [r3, #0]
 8012240:	460c      	mov	r4, r1
 8012242:	b118      	cbz	r0, 801224c <__swsetup_r+0x14>
 8012244:	6a03      	ldr	r3, [r0, #32]
 8012246:	b90b      	cbnz	r3, 801224c <__swsetup_r+0x14>
 8012248:	f7ff fa1a 	bl	8011680 <__sinit>
 801224c:	89a3      	ldrh	r3, [r4, #12]
 801224e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012252:	0718      	lsls	r0, r3, #28
 8012254:	d422      	bmi.n	801229c <__swsetup_r+0x64>
 8012256:	06d9      	lsls	r1, r3, #27
 8012258:	d407      	bmi.n	801226a <__swsetup_r+0x32>
 801225a:	2309      	movs	r3, #9
 801225c:	602b      	str	r3, [r5, #0]
 801225e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012262:	81a3      	strh	r3, [r4, #12]
 8012264:	f04f 30ff 	mov.w	r0, #4294967295
 8012268:	e034      	b.n	80122d4 <__swsetup_r+0x9c>
 801226a:	0758      	lsls	r0, r3, #29
 801226c:	d512      	bpl.n	8012294 <__swsetup_r+0x5c>
 801226e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012270:	b141      	cbz	r1, 8012284 <__swsetup_r+0x4c>
 8012272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012276:	4299      	cmp	r1, r3
 8012278:	d002      	beq.n	8012280 <__swsetup_r+0x48>
 801227a:	4628      	mov	r0, r5
 801227c:	f7ff fb9c 	bl	80119b8 <_free_r>
 8012280:	2300      	movs	r3, #0
 8012282:	6363      	str	r3, [r4, #52]	; 0x34
 8012284:	89a3      	ldrh	r3, [r4, #12]
 8012286:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801228a:	81a3      	strh	r3, [r4, #12]
 801228c:	2300      	movs	r3, #0
 801228e:	6063      	str	r3, [r4, #4]
 8012290:	6923      	ldr	r3, [r4, #16]
 8012292:	6023      	str	r3, [r4, #0]
 8012294:	89a3      	ldrh	r3, [r4, #12]
 8012296:	f043 0308 	orr.w	r3, r3, #8
 801229a:	81a3      	strh	r3, [r4, #12]
 801229c:	6923      	ldr	r3, [r4, #16]
 801229e:	b94b      	cbnz	r3, 80122b4 <__swsetup_r+0x7c>
 80122a0:	89a3      	ldrh	r3, [r4, #12]
 80122a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122aa:	d003      	beq.n	80122b4 <__swsetup_r+0x7c>
 80122ac:	4621      	mov	r1, r4
 80122ae:	4628      	mov	r0, r5
 80122b0:	f000 f884 	bl	80123bc <__smakebuf_r>
 80122b4:	89a0      	ldrh	r0, [r4, #12]
 80122b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122ba:	f010 0301 	ands.w	r3, r0, #1
 80122be:	d00a      	beq.n	80122d6 <__swsetup_r+0x9e>
 80122c0:	2300      	movs	r3, #0
 80122c2:	60a3      	str	r3, [r4, #8]
 80122c4:	6963      	ldr	r3, [r4, #20]
 80122c6:	425b      	negs	r3, r3
 80122c8:	61a3      	str	r3, [r4, #24]
 80122ca:	6923      	ldr	r3, [r4, #16]
 80122cc:	b943      	cbnz	r3, 80122e0 <__swsetup_r+0xa8>
 80122ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80122d2:	d1c4      	bne.n	801225e <__swsetup_r+0x26>
 80122d4:	bd38      	pop	{r3, r4, r5, pc}
 80122d6:	0781      	lsls	r1, r0, #30
 80122d8:	bf58      	it	pl
 80122da:	6963      	ldrpl	r3, [r4, #20]
 80122dc:	60a3      	str	r3, [r4, #8]
 80122de:	e7f4      	b.n	80122ca <__swsetup_r+0x92>
 80122e0:	2000      	movs	r0, #0
 80122e2:	e7f7      	b.n	80122d4 <__swsetup_r+0x9c>
 80122e4:	200002b8 	.word	0x200002b8

080122e8 <_raise_r>:
 80122e8:	291f      	cmp	r1, #31
 80122ea:	b538      	push	{r3, r4, r5, lr}
 80122ec:	4604      	mov	r4, r0
 80122ee:	460d      	mov	r5, r1
 80122f0:	d904      	bls.n	80122fc <_raise_r+0x14>
 80122f2:	2316      	movs	r3, #22
 80122f4:	6003      	str	r3, [r0, #0]
 80122f6:	f04f 30ff 	mov.w	r0, #4294967295
 80122fa:	bd38      	pop	{r3, r4, r5, pc}
 80122fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80122fe:	b112      	cbz	r2, 8012306 <_raise_r+0x1e>
 8012300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012304:	b94b      	cbnz	r3, 801231a <_raise_r+0x32>
 8012306:	4620      	mov	r0, r4
 8012308:	f000 f830 	bl	801236c <_getpid_r>
 801230c:	462a      	mov	r2, r5
 801230e:	4601      	mov	r1, r0
 8012310:	4620      	mov	r0, r4
 8012312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012316:	f000 b817 	b.w	8012348 <_kill_r>
 801231a:	2b01      	cmp	r3, #1
 801231c:	d00a      	beq.n	8012334 <_raise_r+0x4c>
 801231e:	1c59      	adds	r1, r3, #1
 8012320:	d103      	bne.n	801232a <_raise_r+0x42>
 8012322:	2316      	movs	r3, #22
 8012324:	6003      	str	r3, [r0, #0]
 8012326:	2001      	movs	r0, #1
 8012328:	e7e7      	b.n	80122fa <_raise_r+0x12>
 801232a:	2400      	movs	r4, #0
 801232c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012330:	4628      	mov	r0, r5
 8012332:	4798      	blx	r3
 8012334:	2000      	movs	r0, #0
 8012336:	e7e0      	b.n	80122fa <_raise_r+0x12>

08012338 <raise>:
 8012338:	4b02      	ldr	r3, [pc, #8]	; (8012344 <raise+0xc>)
 801233a:	4601      	mov	r1, r0
 801233c:	6818      	ldr	r0, [r3, #0]
 801233e:	f7ff bfd3 	b.w	80122e8 <_raise_r>
 8012342:	bf00      	nop
 8012344:	200002b8 	.word	0x200002b8

08012348 <_kill_r>:
 8012348:	b538      	push	{r3, r4, r5, lr}
 801234a:	4d07      	ldr	r5, [pc, #28]	; (8012368 <_kill_r+0x20>)
 801234c:	2300      	movs	r3, #0
 801234e:	4604      	mov	r4, r0
 8012350:	4608      	mov	r0, r1
 8012352:	4611      	mov	r1, r2
 8012354:	602b      	str	r3, [r5, #0]
 8012356:	f7f9 f89d 	bl	800b494 <_kill>
 801235a:	1c43      	adds	r3, r0, #1
 801235c:	d102      	bne.n	8012364 <_kill_r+0x1c>
 801235e:	682b      	ldr	r3, [r5, #0]
 8012360:	b103      	cbz	r3, 8012364 <_kill_r+0x1c>
 8012362:	6023      	str	r3, [r4, #0]
 8012364:	bd38      	pop	{r3, r4, r5, pc}
 8012366:	bf00      	nop
 8012368:	20008154 	.word	0x20008154

0801236c <_getpid_r>:
 801236c:	f7f9 b88a 	b.w	800b484 <_getpid>

08012370 <__swhatbuf_r>:
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	460c      	mov	r4, r1
 8012374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012378:	2900      	cmp	r1, #0
 801237a:	b096      	sub	sp, #88	; 0x58
 801237c:	4615      	mov	r5, r2
 801237e:	461e      	mov	r6, r3
 8012380:	da0d      	bge.n	801239e <__swhatbuf_r+0x2e>
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012388:	f04f 0100 	mov.w	r1, #0
 801238c:	bf0c      	ite	eq
 801238e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012392:	2340      	movne	r3, #64	; 0x40
 8012394:	2000      	movs	r0, #0
 8012396:	6031      	str	r1, [r6, #0]
 8012398:	602b      	str	r3, [r5, #0]
 801239a:	b016      	add	sp, #88	; 0x58
 801239c:	bd70      	pop	{r4, r5, r6, pc}
 801239e:	466a      	mov	r2, sp
 80123a0:	f000 f848 	bl	8012434 <_fstat_r>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	dbec      	blt.n	8012382 <__swhatbuf_r+0x12>
 80123a8:	9901      	ldr	r1, [sp, #4]
 80123aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80123ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80123b2:	4259      	negs	r1, r3
 80123b4:	4159      	adcs	r1, r3
 80123b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123ba:	e7eb      	b.n	8012394 <__swhatbuf_r+0x24>

080123bc <__smakebuf_r>:
 80123bc:	898b      	ldrh	r3, [r1, #12]
 80123be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123c0:	079d      	lsls	r5, r3, #30
 80123c2:	4606      	mov	r6, r0
 80123c4:	460c      	mov	r4, r1
 80123c6:	d507      	bpl.n	80123d8 <__smakebuf_r+0x1c>
 80123c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	6123      	str	r3, [r4, #16]
 80123d0:	2301      	movs	r3, #1
 80123d2:	6163      	str	r3, [r4, #20]
 80123d4:	b002      	add	sp, #8
 80123d6:	bd70      	pop	{r4, r5, r6, pc}
 80123d8:	ab01      	add	r3, sp, #4
 80123da:	466a      	mov	r2, sp
 80123dc:	f7ff ffc8 	bl	8012370 <__swhatbuf_r>
 80123e0:	9900      	ldr	r1, [sp, #0]
 80123e2:	4605      	mov	r5, r0
 80123e4:	4630      	mov	r0, r6
 80123e6:	f7fe ff79 	bl	80112dc <_malloc_r>
 80123ea:	b948      	cbnz	r0, 8012400 <__smakebuf_r+0x44>
 80123ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123f0:	059a      	lsls	r2, r3, #22
 80123f2:	d4ef      	bmi.n	80123d4 <__smakebuf_r+0x18>
 80123f4:	f023 0303 	bic.w	r3, r3, #3
 80123f8:	f043 0302 	orr.w	r3, r3, #2
 80123fc:	81a3      	strh	r3, [r4, #12]
 80123fe:	e7e3      	b.n	80123c8 <__smakebuf_r+0xc>
 8012400:	89a3      	ldrh	r3, [r4, #12]
 8012402:	6020      	str	r0, [r4, #0]
 8012404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012408:	81a3      	strh	r3, [r4, #12]
 801240a:	9b00      	ldr	r3, [sp, #0]
 801240c:	6163      	str	r3, [r4, #20]
 801240e:	9b01      	ldr	r3, [sp, #4]
 8012410:	6120      	str	r0, [r4, #16]
 8012412:	b15b      	cbz	r3, 801242c <__smakebuf_r+0x70>
 8012414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012418:	4630      	mov	r0, r6
 801241a:	f000 f81d 	bl	8012458 <_isatty_r>
 801241e:	b128      	cbz	r0, 801242c <__smakebuf_r+0x70>
 8012420:	89a3      	ldrh	r3, [r4, #12]
 8012422:	f023 0303 	bic.w	r3, r3, #3
 8012426:	f043 0301 	orr.w	r3, r3, #1
 801242a:	81a3      	strh	r3, [r4, #12]
 801242c:	89a3      	ldrh	r3, [r4, #12]
 801242e:	431d      	orrs	r5, r3
 8012430:	81a5      	strh	r5, [r4, #12]
 8012432:	e7cf      	b.n	80123d4 <__smakebuf_r+0x18>

08012434 <_fstat_r>:
 8012434:	b538      	push	{r3, r4, r5, lr}
 8012436:	4d07      	ldr	r5, [pc, #28]	; (8012454 <_fstat_r+0x20>)
 8012438:	2300      	movs	r3, #0
 801243a:	4604      	mov	r4, r0
 801243c:	4608      	mov	r0, r1
 801243e:	4611      	mov	r1, r2
 8012440:	602b      	str	r3, [r5, #0]
 8012442:	f7f9 f883 	bl	800b54c <_fstat>
 8012446:	1c43      	adds	r3, r0, #1
 8012448:	d102      	bne.n	8012450 <_fstat_r+0x1c>
 801244a:	682b      	ldr	r3, [r5, #0]
 801244c:	b103      	cbz	r3, 8012450 <_fstat_r+0x1c>
 801244e:	6023      	str	r3, [r4, #0]
 8012450:	bd38      	pop	{r3, r4, r5, pc}
 8012452:	bf00      	nop
 8012454:	20008154 	.word	0x20008154

08012458 <_isatty_r>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	4d06      	ldr	r5, [pc, #24]	; (8012474 <_isatty_r+0x1c>)
 801245c:	2300      	movs	r3, #0
 801245e:	4604      	mov	r4, r0
 8012460:	4608      	mov	r0, r1
 8012462:	602b      	str	r3, [r5, #0]
 8012464:	f7f9 f882 	bl	800b56c <_isatty>
 8012468:	1c43      	adds	r3, r0, #1
 801246a:	d102      	bne.n	8012472 <_isatty_r+0x1a>
 801246c:	682b      	ldr	r3, [r5, #0]
 801246e:	b103      	cbz	r3, 8012472 <_isatty_r+0x1a>
 8012470:	6023      	str	r3, [r4, #0]
 8012472:	bd38      	pop	{r3, r4, r5, pc}
 8012474:	20008154 	.word	0x20008154

08012478 <_init>:
 8012478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801247a:	bf00      	nop
 801247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801247e:	bc08      	pop	{r3}
 8012480:	469e      	mov	lr, r3
 8012482:	4770      	bx	lr

08012484 <_fini>:
 8012484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012486:	bf00      	nop
 8012488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801248a:	bc08      	pop	{r3}
 801248c:	469e      	mov	lr, r3
 801248e:	4770      	bx	lr
