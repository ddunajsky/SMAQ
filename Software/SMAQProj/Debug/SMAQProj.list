
SMAQProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012290  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002248  08012460  08012460  00022460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146a8  080146a8  000303fc  2**0
                  CONTENTS
  4 .ARM          00000008  080146a8  080146a8  000246a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080146b0  080146b0  000303fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146b0  080146b0  000246b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080146b4  080146b4  000246b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  080146b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002bc  08014974  000302bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000035c  08014a14  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d5c  20000400  08014ab4  00030400  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000815c  08014ab4  0003815c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000303fc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00028c94  00000000  00000000  0003046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000430a  00000000  00000000  00059103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002290  00000000  00000000  0005d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001bf8  00000000  00000000  0005f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000060aa  00000000  00000000  00061298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026af4  00000000  00000000  00067342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00108ee4  00000000  00000000  0008de36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a670  00000000  00000000  00196d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001a138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000400 	.word	0x20000400
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012448 	.word	0x08012448

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000404 	.word	0x20000404
 800020c:	08012448 	.word	0x08012448

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
static uint32_t Hum;  // Humidity readings from SCD-40-2
static uint32_t Carb; // C02 readings from SCD-40-2
static uint32_t Pm;  // PM 2.5 readings from SNJGAC5
static double aqi = 0;
//static char *str;
int main(void){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000edc:	f00a fbb7 	bl	800b64e <HAL_Init>

  /* Configure the system clock */
    SystemClock_Config();
 8000ee0:	f000 f82a 	bl	8000f38 <SystemClock_Config>

  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000ee4:	f000 f924 	bl	8001130 <MX_GPIO_Init>
    MX_ETH_Init();
 8000ee8:	f000 f892 	bl	8001010 <MX_ETH_Init>
    MX_RNG_Init();
 8000eec:	f000 f8dc 	bl	80010a8 <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000ef0:	f000 f8ee 	bl	80010d0 <MX_USART3_UART_Init>

    osKernelInitialize();
 8000ef4:	f00d fb5c 	bl	800e5b0 <osKernelInitialize>

    ServerHandle = osThreadNew(server, NULL, &Server_attributes);
 8000ef8:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <main+0x48>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <main+0x4c>)
 8000efe:	f00d fbf3 	bl	800e6e8 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <main+0x50>)
 8000f06:	6013      	str	r3, [r2, #0]
    BlinkerHandle = osThreadNew(blinker, NULL, &Blinker_attributes);
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <main+0x54>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <main+0x58>)
 8000f0e:	f00d fbeb 	bl	800e6e8 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <main+0x5c>)
 8000f16:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8000f18:	f00d fb7e 	bl	800e618 <osKernelStart>

    while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0x44>
 8000f1e:	bf00      	nop
 8000f20:	08013ea8 	.word	0x08013ea8
 8000f24:	0800157d 	.word	0x0800157d
 8000f28:	200005a0 	.word	0x200005a0
 8000f2c:	08013e84 	.word	0x08013e84
 8000f30:	080013b9 	.word	0x080013b9
 8000f34:	2000059c 	.word	0x2000059c

08000f38 <SystemClock_Config>:
    }

}

void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f010 fc3f 	bl	80117ca <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <SystemClock_Config+0xd0>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <SystemClock_Config+0xd0>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <SystemClock_Config+0xd0>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a24      	ldr	r2, [pc, #144]	; (800100c <SystemClock_Config+0xd4>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <SystemClock_Config+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fa4:	23d8      	movs	r3, #216	; 0xd8
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fac:	2309      	movs	r3, #9
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00b f9d3 	bl	800c360 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x8c>
	  {
	    Error_Handler();
 8000fc0:	f000 fbbe 	bl	8001740 <Error_Handler>
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc4:	f00b f97c 	bl	800c2c0 <HAL_PWREx_EnableOverDrive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8000fce:	f000 fbb7 	bl	8001740 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe2:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2107      	movs	r1, #7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00b fc59 	bl	800c8a8 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xc8>
	  {
	    Error_Handler();
 8000ffc:	f000 fba0 	bl	8001740 <Error_Handler>
	  }
	}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	; 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  heth.Instance = ETH;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_ETH_Init+0x80>)
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_ETH_Init+0x84>)
 8001018:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_ETH_Init+0x88>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ETH_Init+0x88>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_ETH_Init+0x88>)
 8001028:	22e1      	movs	r2, #225	; 0xe1
 800102a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_ETH_Init+0x88>)
 800102e:	2200      	movs	r2, #0
 8001030:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ETH_Init+0x88>)
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ETH_Init+0x88>)
 800103a:	2200      	movs	r2, #0
 800103c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ETH_Init+0x80>)
 8001040:	4a15      	ldr	r2, [pc, #84]	; (8001098 <MX_ETH_Init+0x88>)
 8001042:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ETH_Init+0x80>)
 8001046:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800104a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_ETH_Init+0x80>)
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <MX_ETH_Init+0x8c>)
 8001050:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ETH_Init+0x80>)
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_ETH_Init+0x90>)
 8001056:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 0;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MX_ETH_Init+0x80>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_ETH_Init+0x80>)
 8001060:	f00a fc28 	bl	800b8b4 <HAL_ETH_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800106a:	f000 fb69 	bl	8001740 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800106e:	2238      	movs	r2, #56	; 0x38
 8001070:	2100      	movs	r1, #0
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_ETH_Init+0x94>)
 8001074:	f010 fba9 	bl	80117ca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_ETH_Init+0x94>)
 800107a:	2221      	movs	r2, #33	; 0x21
 800107c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_ETH_Init+0x94>)
 8001080:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001084:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_ETH_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000454 	.word	0x20000454
 8001094:	40028000 	.word	0x40028000
 8001098:	200005c0 	.word	0x200005c0
 800109c:	2000035c 	.word	0x2000035c
 80010a0:	200002bc 	.word	0x200002bc
 80010a4:	2000041c 	.word	0x2000041c

080010a8 <MX_RNG_Init>:


static void MX_RNG_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_RNG_Init+0x20>)
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <MX_RNG_Init+0x24>)
 80010b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_RNG_Init+0x20>)
 80010b4:	f00c fa40 	bl	800d538 <HAL_RNG_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80010be:	f000 fb3f 	bl	8001740 <Error_Handler>
  }


}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000504 	.word	0x20000504
 80010cc:	50060800 	.word	0x50060800

080010d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0


  huart3.Instance = USART3;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_USART3_UART_Init+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART3_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART3_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART3_UART_Init+0x58>)
 8001114:	f00c fd70 	bl	800dbf8 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800111e:	f000 fb0f 	bl	8001740 <Error_Handler>
  }

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000514 	.word	0x20000514
 800112c:	40004800 	.word	0x40004800

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a55      	ldr	r2, [pc, #340]	; (80012a0 <MX_GPIO_Init+0x170>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <MX_GPIO_Init+0x170>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <MX_GPIO_Init+0x170>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a43      	ldr	r2, [pc, #268]	; (80012a0 <MX_GPIO_Init+0x170>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <MX_GPIO_Init+0x170>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a3d      	ldr	r2, [pc, #244]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a37      	ldr	r2, [pc, #220]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MX_GPIO_Init+0x170>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80011dc:	4831      	ldr	r0, [pc, #196]	; (80012a4 <MX_GPIO_Init+0x174>)
 80011de:	f00b f83b 	bl	800c258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	4830      	ldr	r0, [pc, #192]	; (80012a8 <MX_GPIO_Init+0x178>)
 80011e8:	f00b f836 	bl	800c258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	482a      	ldr	r0, [pc, #168]	; (80012ac <MX_GPIO_Init+0x17c>)
 8001204:	f00a fe7c 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001208:	f244 0381 	movw	r3, #16513	; 0x4081
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4820      	ldr	r0, [pc, #128]	; (80012a4 <MX_GPIO_Init+0x174>)
 8001222:	f00a fe6d 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001226:	2340      	movs	r3, #64	; 0x40
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <MX_GPIO_Init+0x178>)
 800123e:	f00a fe5f 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <MX_GPIO_Init+0x178>)
 8001256:	f00a fe53 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
   GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800125a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800125e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
   GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800126c:	230a      	movs	r3, #10
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001278:	f00a fe42 	bl	800bf00 <HAL_GPIO_Init>

   /*Configure GPIO pin : USB_VBUS_Pin */
     GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800127c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001280:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_GPIO_Init+0x180>)
 8001292:	f00a fe35 	bl	800bf00 <HAL_GPIO_Init>

}
 8001296:	bf00      	nop
 8001298:	3730      	adds	r7, #48	; 0x30
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012c6:	f00a f9cf 	bl	800b668 <HAL_IncTick>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40001000 	.word	0x40001000

080012d8 <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e01a      	b.n	800131e <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	4810      	ldr	r0, [pc, #64]	; (8001330 <mg_random+0x58>)
 80012f0:	f00c f94c 	bl	800d58c <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	18d0      	adds	r0, r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d203      	bcs.n	800130c <mg_random+0x34>
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	e000      	b.n	800130e <mg_random+0x36>
 800130c:	2304      	movs	r3, #4
 800130e:	f107 0108 	add.w	r1, r7, #8
 8001312:	461a      	mov	r2, r3
 8001314:	f010 fb23 	bl	801195e <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3304      	adds	r3, #4
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3e0      	bcc.n	80012e8 <mg_random+0x10>
  }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000504 	.word	0x20000504

08001334 <timer_fn>:

static void timer_fn(void *arg) {
 8001334:	b5b0      	push	{r4, r5, r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af04      	add	r7, sp, #16
 800133a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = arg;                  // And show
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	61fb      	str	r3, [r7, #28]
  const char *names[] = {"down", "up", "req", "ready"};  // network stats
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <timer_fn+0x70>)
 8001342:	f107 040c 	add.w	r4, r7, #12
 8001346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <timer_fn+0x74>)
 800134e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8001352:	4916      	ldr	r1, [pc, #88]	; (80013ac <timer_fn+0x78>)
 8001354:	2002      	movs	r0, #2
 8001356:	f004 ff9b 	bl	8006290 <mg_log_prefix>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01c      	beq.n	800139a <timer_fn+0x66>
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	3320      	adds	r3, #32
 800136a:	443b      	add	r3, r7
 800136c:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f103 0508 	add.w	r5, r3, #8
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800137e:	69f9      	ldr	r1, [r7, #28]
 8001380:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8001382:	69f8      	ldr	r0, [r7, #28]
 8001384:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8001386:	9003      	str	r0, [sp, #12]
 8001388:	9102      	str	r1, [sp, #8]
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	462b      	mov	r3, r5
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <timer_fn+0x7c>)
 8001392:	4621      	mov	r1, r4
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <timer_fn+0x80>)
 8001396:	f004 ffd5 	bl	8006344 <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdb0      	pop	{r4, r5, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	080124d0 	.word	0x080124d0
 80013a8:	08013ecc 	.word	0x08013ecc
 80013ac:	08012470 	.word	0x08012470
 80013b0:	08006ae1 	.word	0x08006ae1
 80013b4:	08012484 	.word	0x08012484

080013b8 <blinker>:

void blinker(void *argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	for (;;) {
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <blinker+0x30>)
 80013c4:	f00a ff61 	bl	800c28a <HAL_GPIO_TogglePin>
	    osDelay((osKernelGetTickFreq() * BLINK_PERIOD_MS) / 1000U);
 80013c8:	f00d f984 	bl	800e6d4 <osKernelGetTickFreq>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <blinker+0x34>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	4618      	mov	r0, r3
 80013e0:	f00d fa28 	bl	800e834 <osDelay>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Blink On-board blue LED
 80013e4:	e7ec      	b.n	80013c0 <blinker+0x8>
 80013e6:	bf00      	nop
 80013e8:	40020400 	.word	0x40020400
 80013ec:	10624dd3 	.word	0x10624dd3

080013f0 <fn>:
 * 	accepts the HTTP requests and feeds sensor *
 * 	values back in JSON format for the client  *
 * 	to receive then the javascript code takes  *
 *  over and displays the values on our UI.    *
 ***********************************************/
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09e      	sub	sp, #120	; 0x78
 80013f4:	af10      	add	r7, sp, #64	; 0x40
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]


	if (ev == MG_EV_HTTP_MSG) {
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	f040 8089 	bne.w	8001518 <fn+0x128>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
		if (mg_http_match_uri(hm, "/api/dispAQI")){
 800140a:	4945      	ldr	r1, [pc, #276]	; (8001520 <fn+0x130>)
 800140c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800140e:	f003 fd4d 	bl	8004eac <mg_http_match_uri>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d010      	beq.n	800143a <fn+0x4a>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 8001418:	4b42      	ldr	r3, [pc, #264]	; (8001524 <fn+0x134>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <fn+0x138>)
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2300      	movs	r3, #0
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	4b40      	ldr	r3, [pc, #256]	; (800152c <fn+0x13c>)
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <fn+0x140>)
 8001430:	4a40      	ldr	r2, [pc, #256]	; (8001534 <fn+0x144>)
 8001432:	21c8      	movs	r1, #200	; 0xc8
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f002 fe33 	bl	80040a0 <mg_http_reply>
					"{%m:%f}\n", MG_ESC("aqi"), aqi);
		}
		if(mg_http_match_uri(hm, "/api/AQI")){
 800143a:	493f      	ldr	r1, [pc, #252]	; (8001538 <fn+0x148>)
 800143c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800143e:	f003 fd35 	bl	8004eac <mg_http_match_uri>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d015      	beq.n	8001474 <fn+0x84>
			struct mg_str json = hm -> body;
 8001448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001452:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001456:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_json_get_num(json, "$.aqi", &aqi);
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <fn+0x134>)
 800145c:	4a37      	ldr	r2, [pc, #220]	; (800153c <fn+0x14c>)
 800145e:	f107 0114 	add.w	r1, r7, #20
 8001462:	c903      	ldmia	r1, {r0, r1}
 8001464:	f004 fe7a 	bl	800615c <mg_json_get_num>
//			str = mg_json_get_str(json, "&.health_level");
			mg_http_reply(c, 200, NULL, NULL);
 8001468:	2300      	movs	r3, #0
 800146a:	2200      	movs	r2, #0
 800146c:	21c8      	movs	r1, #200	; 0xc8
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f002 fe16 	bl	80040a0 <mg_http_reply>
		}
		if(mg_http_match_uri(hm, "/api/sensors")){
 8001474:	4932      	ldr	r1, [pc, #200]	; (8001540 <fn+0x150>)
 8001476:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001478:	f003 fd18 	bl	8004eac <mg_http_match_uri>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d029      	beq.n	80014d6 <fn+0xe6>
			mg_http_reply(c, 200, "Content-Type: application/json\r\n",
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <fn+0x154>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <fn+0x158>)
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4930      	ldr	r1, [pc, #192]	; (800154c <fn+0x15c>)
 800148c:	6809      	ldr	r1, [r1, #0]
 800148e:	4830      	ldr	r0, [pc, #192]	; (8001550 <fn+0x160>)
 8001490:	6800      	ldr	r0, [r0, #0]
 8001492:	900f      	str	r0, [sp, #60]	; 0x3c
 8001494:	482f      	ldr	r0, [pc, #188]	; (8001554 <fn+0x164>)
 8001496:	900e      	str	r0, [sp, #56]	; 0x38
 8001498:	2000      	movs	r0, #0
 800149a:	900d      	str	r0, [sp, #52]	; 0x34
 800149c:	4823      	ldr	r0, [pc, #140]	; (800152c <fn+0x13c>)
 800149e:	900c      	str	r0, [sp, #48]	; 0x30
 80014a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80014a2:	492d      	ldr	r1, [pc, #180]	; (8001558 <fn+0x168>)
 80014a4:	910a      	str	r1, [sp, #40]	; 0x28
 80014a6:	2100      	movs	r1, #0
 80014a8:	9109      	str	r1, [sp, #36]	; 0x24
 80014aa:	4920      	ldr	r1, [pc, #128]	; (800152c <fn+0x13c>)
 80014ac:	9108      	str	r1, [sp, #32]
 80014ae:	9207      	str	r2, [sp, #28]
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <fn+0x16c>)
 80014b2:	9206      	str	r2, [sp, #24]
 80014b4:	2200      	movs	r2, #0
 80014b6:	9205      	str	r2, [sp, #20]
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <fn+0x13c>)
 80014ba:	9204      	str	r2, [sp, #16]
 80014bc:	9303      	str	r3, [sp, #12]
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <fn+0x170>)
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <fn+0x13c>)
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <fn+0x174>)
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <fn+0x144>)
 80014ce:	21c8      	movs	r1, #200	; 0xc8
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f002 fde5 	bl	80040a0 <mg_http_reply>
					"{%m:%u,%m:%u,%m:%u,%m:%u}\n", MG_ESC("temperature"), Temp,
												   MG_ESC("humidity"), Hum,
												   MG_ESC("pm25"), Pm,
												   MG_ESC("co2"), Carb);
		}
		MG_INFO(("connection established"));
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <fn+0x178>)
 80014d8:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80014dc:	4923      	ldr	r1, [pc, #140]	; (800156c <fn+0x17c>)
 80014de:	2002      	movs	r0, #2
 80014e0:	f004 fed6 	bl	8006290 <mg_log_prefix>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <fn+0x100>
 80014ea:	4821      	ldr	r0, [pc, #132]	; (8001570 <fn+0x180>)
 80014ec:	f004 ff2a 	bl	8006344 <mg_log>
	    struct mg_http_serve_opts opts = {
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <fn+0x184>)
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <fn+0x188>)
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
	        .root_dir = "/web_root",
	        .fs = &mg_fs_packed
	      };
	    mg_http_serve_dir(c, ev_data, &opts);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	461a      	mov	r2, r3
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f003 fc6e 	bl	8004df4 <mg_http_serve_dir>
	  }
	  (void) fn_data;
}
 8001518:	bf00      	nop
 800151a:	3738      	adds	r7, #56	; 0x38
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	080124e0 	.word	0x080124e0
 8001524:	200005b8 	.word	0x200005b8
 8001528:	08012520 	.word	0x08012520
 800152c:	08006d2d 	.word	0x08006d2d
 8001530:	080124f0 	.word	0x080124f0
 8001534:	080124fc 	.word	0x080124fc
 8001538:	08012524 	.word	0x08012524
 800153c:	08012530 	.word	0x08012530
 8001540:	08012538 	.word	0x08012538
 8001544:	200005a4 	.word	0x200005a4
 8001548:	200005a8 	.word	0x200005a8
 800154c:	200005b0 	.word	0x200005b0
 8001550:	200005ac 	.word	0x200005ac
 8001554:	08012564 	.word	0x08012564
 8001558:	08012568 	.word	0x08012568
 800155c:	08012570 	.word	0x08012570
 8001560:	0801257c 	.word	0x0801257c
 8001564:	08012548 	.word	0x08012548
 8001568:	08013ed8 	.word	0x08013ed8
 800156c:	08012470 	.word	0x08012470
 8001570:	08012588 	.word	0x08012588
 8001574:	080125a0 	.word	0x080125a0
 8001578:	20000000 	.word	0x20000000

0800157c <server>:

void server(void *argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0b6      	sub	sp, #216	; 0xd8
 8001580:	af04      	add	r7, sp, #16
 8001582:	6078      	str	r0, [r7, #4]
	Temp = 20;
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <server+0x15c>)
 8001586:	2214      	movs	r2, #20
 8001588:	601a      	str	r2, [r3, #0]
	Hum = 30;
 800158a:	4b54      	ldr	r3, [pc, #336]	; (80016dc <server+0x160>)
 800158c:	221e      	movs	r2, #30
 800158e:	601a      	str	r2, [r3, #0]
	Carb = 800;
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <server+0x164>)
 8001592:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001596:	601a      	str	r2, [r3, #0]
	Pm = 12;
 8001598:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <server+0x168>)
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]

	struct mg_mgr mgr;        // Initialise Mongoose event manager
	mg_mgr_init(&mgr);        // and attach it to the interface
 800159e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 f942 	bl	800682c <mg_mgr_init>
	mg_log_set(MG_LL_DEBUG);  // Set log level
 80015a8:	2003      	movs	r0, #3
 80015aa:	f004 fe4f 	bl	800624c <mg_log_set>

		// Initialise Mongoose network stack
	  struct mg_tcpip_driver_stm32_data driver_data = {.mdc_cr = 4};
 80015ae:	2304      	movs	r3, #4
 80015b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2278      	movs	r2, #120	; 0x78
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f010 f904 	bl	80117ca <memset>
 80015c2:	2302      	movs	r3, #2
 80015c4:	723b      	strb	r3, [r7, #8]
 80015c6:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <server+0x16c>)
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <server+0x170>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4053      	eors	r3, r2
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	727b      	strb	r3, [r7, #9]
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <server+0x174>)
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <server+0x178>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4053      	eors	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	72bb      	strb	r3, [r7, #10]
 80015e2:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <server+0x17c>)
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <server+0x180>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4053      	eors	r3, r2
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	72fb      	strb	r3, [r7, #11]
 80015f0:	4b43      	ldr	r3, [pc, #268]	; (8001700 <server+0x184>)
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <server+0x188>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4053      	eors	r3, r2
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <server+0x18c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4053      	eors	r3, r2
 8001602:	b2db      	uxtb	r3, r3
 8001604:	733b      	strb	r3, [r7, #12]
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <server+0x190>)
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <server+0x194>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4053      	eors	r3, r2
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <server+0x198>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4053      	eors	r3, r2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	737b      	strb	r3, [r7, #13]
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <server+0x19c>)
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001620:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
		                          .driver = &mg_tcpip_driver_stm32,
		                          .driver_data = &driver_data};
		mg_tcpip_init(&mgr, &mif);
 8001626:	f107 0208 	add.w	r2, r7, #8
 800162a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f009 fa37 	bl	800aaa4 <mg_tcpip_init>
		mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 8001636:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	4b36      	ldr	r3, [pc, #216]	; (800171c <server+0x1a0>)
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2301      	movs	r3, #1
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	4608      	mov	r0, r1
 8001652:	f005 f8c1 	bl	80067d8 <mg_timer_add>
		MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <server+0x1a4>)
 8001658:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800165c:	4931      	ldr	r1, [pc, #196]	; (8001724 <server+0x1a8>)
 800165e:	2002      	movs	r0, #2
 8001660:	f004 fe16 	bl	8006290 <mg_log_prefix>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00d      	beq.n	8001686 <server+0x10a>
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	461a      	mov	r2, r3
 8001670:	492d      	ldr	r1, [pc, #180]	; (8001728 <server+0x1ac>)
 8001672:	482e      	ldr	r0, [pc, #184]	; (800172c <server+0x1b0>)
 8001674:	f004 fe66 	bl	8006344 <mg_log>
		while (mif.state != MG_TCPIP_STATE_READY) {
 8001678:	e005      	b.n	8001686 <server+0x10a>
		    mg_mgr_poll(&mgr, 0);
 800167a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f009 fbad 	bl	800ade0 <mg_mgr_poll>
		while (mif.state != MG_TCPIP_STATE_READY) {
 8001686:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800168a:	2b03      	cmp	r3, #3
 800168c:	d1f5      	bne.n	800167a <server+0xfe>
		}

		MG_INFO(("Initialising application..."));
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <server+0x1a4>)
 8001690:	f240 12af 	movw	r2, #431	; 0x1af
 8001694:	4923      	ldr	r1, [pc, #140]	; (8001724 <server+0x1a8>)
 8001696:	2002      	movs	r0, #2
 8001698:	f004 fdfa 	bl	8006290 <mg_log_prefix>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <server+0x12c>
 80016a2:	4823      	ldr	r0, [pc, #140]	; (8001730 <server+0x1b4>)
 80016a4:	f004 fe4e 	bl	8006344 <mg_log>
		mg_http_listen(&mgr, HTTP_URL, fn, &mgr);
 80016a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016ac:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <server+0x1b8>)
 80016b2:	4921      	ldr	r1, [pc, #132]	; (8001738 <server+0x1bc>)
 80016b4:	f003 ff1a 	bl	80054ec <mg_http_listen>
		mg_http_listen(&mgr, HTTPS_URL, fn, &mgr);
 80016b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016bc:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016c0:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <server+0x1b8>)
 80016c2:	491e      	ldr	r1, [pc, #120]	; (800173c <server+0x1c0>)
 80016c4:	f003 ff12 	bl	80054ec <mg_http_listen>
		for (;;) {
			mg_mgr_poll(&mgr, 1);
 80016c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f009 fb86 	bl	800ade0 <mg_mgr_poll>
 80016d4:	e7f8      	b.n	80016c8 <server+0x14c>
 80016d6:	bf00      	nop
 80016d8:	200005a4 	.word	0x200005a4
 80016dc:	200005a8 	.word	0x200005a8
 80016e0:	200005ac 	.word	0x200005ac
 80016e4:	200005b0 	.word	0x200005b0
 80016e8:	1ff0f420 	.word	0x1ff0f420
 80016ec:	1ff0f421 	.word	0x1ff0f421
 80016f0:	1ff0f422 	.word	0x1ff0f422
 80016f4:	1ff0f423 	.word	0x1ff0f423
 80016f8:	1ff0f424 	.word	0x1ff0f424
 80016fc:	1ff0f425 	.word	0x1ff0f425
 8001700:	1ff0f426 	.word	0x1ff0f426
 8001704:	1ff0f427 	.word	0x1ff0f427
 8001708:	1ff0f428 	.word	0x1ff0f428
 800170c:	1ff0f429 	.word	0x1ff0f429
 8001710:	1ff0f42a 	.word	0x1ff0f42a
 8001714:	1ff0f42b 	.word	0x1ff0f42b
 8001718:	20000240 	.word	0x20000240
 800171c:	08001335 	.word	0x08001335
 8001720:	08013edc 	.word	0x08013edc
 8001724:	08012470 	.word	0x08012470
 8001728:	08006ba5 	.word	0x08006ba5
 800172c:	080125ac 	.word	0x080125ac
 8001730:	080125c8 	.word	0x080125c8
 8001734:	080013f1 	.word	0x080013f1
 8001738:	080125e4 	.word	0x080125e4
 800173c:	080125f8 	.word	0x080125f8

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>

0800174a <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	3330      	adds	r3, #48	; 0x30
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e002      	b.n	8001764 <mg_dns_free+0x1a>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d1f7      	bne.n	800175e <mg_dns_free+0x14>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f00f fd70 	bl	801125c <free>
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 8001794:	e00d      	b.n	80017b2 <mg_resolve_cancel+0x2e>
    tmp = d->next;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d103      	bne.n	80017ae <mg_resolve_cancel+0x2a>
 80017a6:	68f9      	ldr	r1, [r7, #12]
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffce 	bl	800174a <mg_dns_free>
  for (; d != NULL; d = tmp) {
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ee      	bne.n	8001796 <mg_resolve_cancel+0x12>
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80017c2:	b590      	push	{r4, r7, lr}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <mg_call+0x24>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <mg_call+0x3c>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	47a0      	blx	r4
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
	...

08001808 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8001808:	b40e      	push	{r1, r2, r3}
 800180a:	b580      	push	{r7, lr}
 800180c:	b095      	sub	sp, #84	; 0x54
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8001812:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001816:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	f107 0010 	add.w	r0, r7, #16
 8001820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001822:	2140      	movs	r1, #64	; 0x40
 8001824:	f005 f88a 	bl	800693c <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <mg_error+0x70>)
 800182a:	f240 1293 	movw	r2, #403	; 0x193
 800182e:	4913      	ldr	r1, [pc, #76]	; (800187c <mg_error+0x74>)
 8001830:	2001      	movs	r0, #1
 8001832:	f004 fd2d 	bl	8006290 <mg_log_prefix>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <mg_error+0x46>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <mg_error+0x78>)
 800184a:	f004 fd7b 	bl	8006344 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8001854:	f043 0320 	orr.w	r3, r3, #32
 8001858:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	461a      	mov	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffac 	bl	80017c2 <mg_call>
}
 800186a:	bf00      	nop
 800186c:	3754      	adds	r7, #84	; 0x54
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001874:	b003      	add	sp, #12
 8001876:	4770      	bx	lr
 8001878:	08013eec 	.word	0x08013eec
 800187c:	0801261c 	.word	0x0801261c
 8001880:	08012728 	.word	0x08012728

08001884 <is_digit>:
#endif




static bool is_digit(int c) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b2f      	cmp	r3, #47	; 0x2f
 8001890:	dd04      	ble.n	800189c <is_digit+0x18>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b39      	cmp	r3, #57	; 0x39
 8001896:	dc01      	bgt.n	800189c <is_digit+0x18>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <is_digit+0x1a>
 800189c:	2300      	movs	r3, #0
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <addexp>:

static int addexp(char *buf, int e, int sign) {
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  int n = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	617a      	str	r2, [r7, #20]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	2265      	movs	r2, #101	; 0x65
 80018ce:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	617a      	str	r2, [r7, #20]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80018e8:	dd01      	ble.n	80018ee <addexp+0x3e>
 80018ea:	2300      	movs	r3, #0
 80018ec:	e057      	b.n	800199e <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b09      	cmp	r3, #9
 80018f2:	dc07      	bgt.n	8001904 <addexp+0x54>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	617a      	str	r2, [r7, #20]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	2230      	movs	r2, #48	; 0x30
 8001902:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b63      	cmp	r3, #99	; 0x63
 8001908:	dd1c      	ble.n	8001944 <addexp+0x94>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <addexp+0xfc>)
 800190e:	fb82 1203 	smull	r1, r2, r2, r3
 8001912:	1152      	asrs	r2, r2, #5
 8001914:	17db      	asrs	r3, r3, #31
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b2da      	uxtb	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	1c59      	adds	r1, r3, #1
 800191e:	6179      	str	r1, [r7, #20]
 8001920:	4619      	mov	r1, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	440b      	add	r3, r1
 8001926:	3230      	adds	r2, #48	; 0x30
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <addexp+0xfc>)
 8001930:	fb82 1203 	smull	r1, r2, r2, r3
 8001934:	1151      	asrs	r1, r2, #5
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	1a8a      	subs	r2, r1, r2
 800193a:	2164      	movs	r1, #100	; 0x64
 800193c:	fb01 f202 	mul.w	r2, r1, r2
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b09      	cmp	r3, #9
 8001948:	dd1d      	ble.n	8001986 <addexp+0xd6>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <addexp+0x100>)
 800194e:	fb82 1203 	smull	r1, r2, r2, r3
 8001952:	1092      	asrs	r2, r2, #2
 8001954:	17db      	asrs	r3, r3, #31
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b2da      	uxtb	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	6179      	str	r1, [r7, #20]
 8001960:	4619      	mov	r1, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	440b      	add	r3, r1
 8001966:	3230      	adds	r2, #48	; 0x30
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <addexp+0x100>)
 8001970:	fb83 1302 	smull	r1, r3, r3, r2
 8001974:	1099      	asrs	r1, r3, #2
 8001976:	17d3      	asrs	r3, r2, #31
 8001978:	1ac9      	subs	r1, r1, r3
 800197a:	460b      	mov	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	1c59      	adds	r1, r3, #1
 800198e:	6179      	str	r1, [r7, #20]
 8001990:	4619      	mov	r1, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	440b      	add	r3, r1
 8001996:	3230      	adds	r2, #48	; 0x30
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
  return n;
 800199c:	697b      	ldr	r3, [r7, #20]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	51eb851f 	.word	0x51eb851f
 80019b0:	66666667 	.word	0x66666667

080019b4 <xisinf>:

static int xisinf(double x) {
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80019be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80019c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	000a      	movs	r2, r1
 80019d4:	2300      	movs	r3, #0
 80019d6:	4613      	mov	r3, r2
 80019d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <xisinf+0x4c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d106      	bne.n	80019f0 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 80019e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019e6:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <xisinf+0x3c>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <xisinf+0x3e>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	7ff00000 	.word	0x7ff00000

08001a04 <xisnan>:

static int xisnan(double x) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8001a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a12:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001a16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	000a      	movs	r2, r1
 8001a24:	2300      	movs	r3, #0
 8001a26:	4613      	mov	r3, r2
 8001a28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8001a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a30:	4613      	mov	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8001a3c:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <xisnan+0x54>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf8c      	ite	hi
 8001a44:	2301      	movhi	r3, #1
 8001a46:	2300      	movls	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	7ff00000 	.word	0x7ff00000
 8001a5c:	00000000 	.word	0x00000000

08001a60 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b09e      	sub	sp, #120	; 0x78
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6178      	str	r0, [r7, #20]
 8001a68:	6139      	str	r1, [r7, #16]
 8001a6a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a76:	2300      	movs	r3, #0
 8001a78:	667b      	str	r3, [r7, #100]	; 0x64
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a8a:	f7ff f84d 	bl	8000b28 <__aeabi_dcmpeq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <mg_dtoa+0x44>
 8001a94:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <mg_dtoa+0x234>)
 8001a96:	4a80      	ldr	r2, [pc, #512]	; (8001c98 <mg_dtoa+0x238>)
 8001a98:	6939      	ldr	r1, [r7, #16]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f004 ff76 	bl	800698c <mg_snprintf>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	e2c9      	b.n	8002038 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8001aa4:	ed97 0b02 	vldr	d0, [r7, #8]
 8001aa8:	f7ff ff84 	bl	80019b4 <xisinf>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d014      	beq.n	8001adc <mg_dtoa+0x7c>
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001abe:	f7ff f85b 	bl	8000b78 <__aeabi_dcmpgt>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <mg_dtoa+0x6c>
 8001ac8:	4b74      	ldr	r3, [pc, #464]	; (8001c9c <mg_dtoa+0x23c>)
 8001aca:	e000      	b.n	8001ace <mg_dtoa+0x6e>
 8001acc:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <mg_dtoa+0x240>)
 8001ace:	4a72      	ldr	r2, [pc, #456]	; (8001c98 <mg_dtoa+0x238>)
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f004 ff5a 	bl	800698c <mg_snprintf>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	e2ad      	b.n	8002038 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8001adc:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ae0:	f7ff ff90 	bl	8001a04 <xisnan>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <mg_dtoa+0x9a>
 8001aea:	4b6e      	ldr	r3, [pc, #440]	; (8001ca4 <mg_dtoa+0x244>)
 8001aec:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <mg_dtoa+0x238>)
 8001aee:	6939      	ldr	r1, [r7, #16]
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f004 ff4b 	bl	800698c <mg_snprintf>
 8001af6:	4603      	mov	r3, r0
 8001af8:	e29e      	b.n	8002038 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b06:	f7ff f819 	bl	8000b3c <__aeabi_dcmplt>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00d      	beq.n	8001b2c <mg_dtoa+0xcc>
 8001b10:	68bc      	ldr	r4, [r7, #8]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b18:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8001b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	66ba      	str	r2, [r7, #104]	; 0x68
 8001b22:	3370      	adds	r3, #112	; 0x70
 8001b24:	443b      	add	r3, r7
 8001b26:	222d      	movs	r2, #45	; 0x2d
 8001b28:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8001b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b30:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b5b      	ldr	r3, [pc, #364]	; (8001ca8 <mg_dtoa+0x248>)
 8001b3a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8001b3e:	e00a      	b.n	8001b56 <mg_dtoa+0xf6>
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <mg_dtoa+0x24c>)
 8001b46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b4a:	f7fe fd85 	bl	8000658 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <mg_dtoa+0x24c>)
 8001b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b60:	f7ff f800 	bl	8000b64 <__aeabi_dcmpge>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d011      	beq.n	8001b8e <mg_dtoa+0x12e>
 8001b6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b72:	f7fe fe9b 	bl	80008ac <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <mg_dtoa+0x24c>)
 8001b84:	f7fe ffee 	bl	8000b64 <__aeabi_dcmpge>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1d8      	bne.n	8001b40 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8001b8e:	e00a      	b.n	8001ba6 <mg_dtoa+0x146>
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <mg_dtoa+0x24c>)
 8001b96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b9a:	f7fe fe87 	bl	80008ac <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <mg_dtoa+0x248>)
 8001bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb0:	f7fe ffce 	bl	8000b50 <__aeabi_dcmple>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d011      	beq.n	8001bde <mg_dtoa+0x17e>
 8001bba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc2:	f7fe fe73 	bl	80008ac <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <mg_dtoa+0x248>)
 8001bd4:	f7fe ffbc 	bl	8000b50 <__aeabi_dcmple>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1d8      	bne.n	8001b90 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <mg_dtoa+0x250>)
 8001be8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001bec:	f7fe fd34 	bl	8000658 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001bf8:	e00d      	b.n	8001c16 <mg_dtoa+0x1b6>
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <mg_dtoa+0x24c>)
 8001c00:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c04:	f7fe fe52 	bl	80008ac <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c12:	3301      	adds	r3, #1
 8001c14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbed      	blt.n	8001bfa <mg_dtoa+0x19a>
  d += t;
 8001c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c26:	f7fe fb61 	bl	80002ec <__adddf3>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <mg_dtoa+0x248>)
 8001c38:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8001c3c:	e00d      	b.n	8001c5a <mg_dtoa+0x1fa>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <mg_dtoa+0x24c>)
 8001c44:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c48:	f7fe fd06 	bl	8000658 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c56:	3301      	adds	r3, #1
 8001c58:	663b      	str	r3, [r7, #96]	; 0x60
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <mg_dtoa+0x24c>)
 8001c60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c64:	f7fe ff7e 	bl	8000b64 <__aeabi_dcmpge>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d011      	beq.n	8001c92 <mg_dtoa+0x232>
 8001c6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c76:	f7fe fe19 	bl	80008ac <__aeabi_ddiv>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <mg_dtoa+0x24c>)
 8001c88:	f7fe ff6c 	bl	8000b64 <__aeabi_dcmpge>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1d5      	bne.n	8001c3e <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8001c92:	e01d      	b.n	8001cd0 <mg_dtoa+0x270>
 8001c94:	08012734 	.word	0x08012734
 8001c98:	08012738 	.word	0x08012738
 8001c9c:	0801273c 	.word	0x0801273c
 8001ca0:	08012740 	.word	0x08012740
 8001ca4:	08012748 	.word	0x08012748
 8001ca8:	3ff00000 	.word	0x3ff00000
 8001cac:	40240000 	.word	0x40240000
 8001cb0:	40140000 	.word	0x40140000
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b9d      	ldr	r3, [pc, #628]	; (8001f30 <mg_dtoa+0x4d0>)
 8001cba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001cbe:	f7fe fdf5 	bl	80008ac <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <mg_dtoa+0x4d4>)
 8001cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cda:	f7fe ff2f 	bl	8000b3c <__aeabi_dcmplt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d011      	beq.n	8001d08 <mg_dtoa+0x2a8>
 8001ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ce8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cec:	f7fe fdde 	bl	80008ac <__aeabi_ddiv>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b8d      	ldr	r3, [pc, #564]	; (8001f34 <mg_dtoa+0x4d4>)
 8001cfe:	f7fe ff1d 	bl	8000b3c <__aeabi_dcmplt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1d5      	bne.n	8001cb4 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8001d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	db33      	blt.n	8001d78 <mg_dtoa+0x318>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	dd30      	ble.n	8001d78 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001d16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d1e:	f7fe fdc5 	bl	80008ac <__aeabi_ddiv>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b17 	vmov	d7, r2, r3
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f107 0018 	add.w	r0, r7, #24
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	eeb0 0a47 	vmov.f32	s0, s14
 8001d36:	eef0 0a67 	vmov.f32	s1, s15
 8001d3a:	2128      	movs	r1, #40	; 0x28
 8001d3c:	f7ff fe90 	bl	8001a60 <mg_dtoa>
 8001d40:	4603      	mov	r3, r0
 8001d42:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8001d44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d48:	4413      	add	r3, r2
 8001d4a:	f107 0218 	add.w	r2, r7, #24
 8001d4e:	4413      	add	r3, r2
 8001d50:	222b      	movs	r2, #43	; 0x2b
 8001d52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fdab 	bl	80018b0 <addexp>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d5e:	4413      	add	r3, r2
 8001d60:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d6a:	4a73      	ldr	r2, [pc, #460]	; (8001f38 <mg_dtoa+0x4d8>)
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f004 fe0c 	bl	800698c <mg_snprintf>
 8001d74:	4603      	mov	r3, r0
 8001d76:	e15f      	b.n	8002038 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	425b      	negs	r3, r3
 8001d7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dc34      	bgt.n	8001dec <mg_dtoa+0x38c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	dd31      	ble.n	8001dec <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8001d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d8c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d90:	f7fe fd8c 	bl	80008ac <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	ec43 2b17 	vmov	d7, r2, r3
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	f107 0018 	add.w	r0, r7, #24
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	eeb0 0a47 	vmov.f32	s0, s14
 8001da8:	eef0 0a67 	vmov.f32	s1, s15
 8001dac:	2128      	movs	r1, #40	; 0x28
 8001dae:	f7ff fe57 	bl	8001a60 <mg_dtoa>
 8001db2:	4603      	mov	r3, r0
 8001db4:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8001db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dba:	4413      	add	r3, r2
 8001dbc:	f107 0218 	add.w	r2, r7, #24
 8001dc0:	18d0      	adds	r0, r2, r3
 8001dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	222d      	movs	r2, #45	; 0x2d
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7ff fd71 	bl	80018b0 <addexp>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dd2:	4413      	add	r3, r2
 8001dd4:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8001dd6:	f107 0318 	add.w	r3, r7, #24
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dde:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <mg_dtoa+0x4d8>)
 8001de0:	6939      	ldr	r1, [r7, #16]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f004 fdd2 	bl	800698c <mg_snprintf>
 8001de8:	4603      	mov	r3, r0
 8001dea:	e125      	b.n	8002038 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001dec:	2300      	movs	r3, #0
 8001dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001df4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001df8:	e03f      	b.n	8001e7a <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8001dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e02:	f7fe fd53 	bl	80008ac <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe febd 	bl	8000b8c <__aeabi_d2iz>
 8001e12:	4603      	mov	r3, r0
 8001e14:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8001e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	dc02      	bgt.n	8001e22 <mg_dtoa+0x3c2>
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	dd0c      	ble.n	8001e3c <mg_dtoa+0x3dc>
 8001e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e28:	1c59      	adds	r1, r3, #1
 8001e2a:	6679      	str	r1, [r7, #100]	; 0x64
 8001e2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e2e:	440b      	add	r3, r1
 8001e30:	3230      	adds	r2, #48	; 0x30
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	3370      	adds	r3, #112	; 0x70
 8001e36:	443b      	add	r3, r7
 8001e38:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001e3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e3e:	f7fe fba1 	bl	8000584 <__aeabi_i2d>
 8001e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e46:	f7fe fc07 	bl	8000658 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e52:	f7fe fa49 	bl	80002e8 <__aeabi_dsub>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <mg_dtoa+0x4d0>)
 8001e64:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e68:	f7fe fd20 	bl	80008ac <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8001e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e76:	3301      	adds	r3, #1
 8001e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <mg_dtoa+0x4d4>)
 8001e80:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e84:	f7fe fe6e 	bl	8000b64 <__aeabi_dcmpge>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <mg_dtoa+0x438>
 8001e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e92:	4413      	add	r3, r2
 8001e94:	2b27      	cmp	r3, #39	; 0x27
 8001e96:	ddb0      	ble.n	8001dfa <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8001e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11b      	bne.n	8001ed6 <mg_dtoa+0x476>
 8001e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	66ba      	str	r2, [r7, #104]	; 0x68
 8001ea4:	3370      	adds	r3, #112	; 0x70
 8001ea6:	443b      	add	r3, r7
 8001ea8:	2230      	movs	r2, #48	; 0x30
 8001eaa:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8001eae:	e012      	b.n	8001ed6 <mg_dtoa+0x476>
 8001eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	667a      	str	r2, [r7, #100]	; 0x64
 8001eb6:	3370      	adds	r3, #112	; 0x70
 8001eb8:	443b      	add	r3, r7
 8001eba:	2230      	movs	r2, #48	; 0x30
 8001ebc:	f803 2c58 	strb.w	r2, [r3, #-88]
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <mg_dtoa+0x4d0>)
 8001ec6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001eca:	f7fe fcef 	bl	80008ac <__aeabi_ddiv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <mg_dtoa+0x4d4>)
 8001edc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ee0:	f7fe fe40 	bl	8000b64 <__aeabi_dcmpge>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <mg_dtoa+0x494>
 8001eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eee:	4413      	add	r3, r2
 8001ef0:	2b27      	cmp	r3, #39	; 0x27
 8001ef2:	dddd      	ble.n	8001eb0 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8001ef4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ef8:	4413      	add	r3, r2
 8001efa:	2b27      	cmp	r3, #39	; 0x27
 8001efc:	dc09      	bgt.n	8001f12 <mg_dtoa+0x4b2>
 8001efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	66ba      	str	r2, [r7, #104]	; 0x68
 8001f04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f06:	4413      	add	r3, r2
 8001f08:	3370      	adds	r3, #112	; 0x70
 8001f0a:	443b      	add	r3, r7
 8001f0c:	222e      	movs	r2, #46	; 0x2e
 8001f0e:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001f12:	2300      	movs	r3, #0
 8001f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f16:	a304      	add	r3, pc, #16	; (adr r3, 8001f28 <mg_dtoa+0x4c8>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f20:	e046      	b.n	8001fb0 <mg_dtoa+0x550>
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	9999999a 	.word	0x9999999a
 8001f2c:	3fb99999 	.word	0x3fb99999
 8001f30:	40240000 	.word	0x40240000
 8001f34:	3ff00000 	.word	0x3ff00000
 8001f38:	0801274c 	.word	0x0801274c
      int ch = (int) (d / t);
 8001f3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f44:	f7fe fcb2 	bl	80008ac <__aeabi_ddiv>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fe1c 	bl	8000b8c <__aeabi_d2iz>
 8001f54:	4603      	mov	r3, r0
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 8001f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	6679      	str	r1, [r7, #100]	; 0x64
 8001f62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f64:	440b      	add	r3, r1
 8001f66:	3230      	adds	r2, #48	; 0x30
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	3370      	adds	r3, #112	; 0x70
 8001f6c:	443b      	add	r3, r7
 8001f6e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8001f72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001f74:	f7fe fb06 	bl	8000584 <__aeabi_i2d>
 8001f78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f7c:	f7fe fb6c 	bl	8000658 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f88:	f7fe f9ae 	bl	80002e8 <__aeabi_dsub>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <mg_dtoa+0x5e0>)
 8001f9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f9e:	f7fe fc85 	bl	80008ac <__aeabi_ddiv>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8001faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fac:	3301      	adds	r3, #1
 8001fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2b27      	cmp	r3, #39	; 0x27
 8001fb8:	dc07      	bgt.n	8001fca <mg_dtoa+0x56a>
 8001fba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbbc      	blt.n	8001f3c <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8001fc2:	e002      	b.n	8001fca <mg_dtoa+0x56a>
 8001fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	667b      	str	r3, [r7, #100]	; 0x64
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00c      	beq.n	8001fea <mg_dtoa+0x58a>
 8001fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	dd09      	ble.n	8001fea <mg_dtoa+0x58a>
 8001fd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	3370      	adds	r3, #112	; 0x70
 8001fe0:	443b      	add	r3, r7
 8001fe2:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8001fe6:	2b30      	cmp	r3, #48	; 0x30
 8001fe8:	d0ec      	beq.n	8001fc4 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8001fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dd0c      	ble.n	800200a <mg_dtoa+0x5aa>
 8001ff0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	3370      	adds	r3, #112	; 0x70
 8001ffa:	443b      	add	r3, r7
 8001ffc:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002000:	2b2e      	cmp	r3, #46	; 0x2e
 8002002:	d102      	bne.n	800200a <mg_dtoa+0x5aa>
 8002004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002006:	3b01      	subs	r3, #1
 8002008:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 800200a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800200c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200e:	4413      	add	r3, r2
 8002010:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8002012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002014:	2b27      	cmp	r3, #39	; 0x27
 8002016:	dd01      	ble.n	800201c <mg_dtoa+0x5bc>
 8002018:	2327      	movs	r3, #39	; 0x27
 800201a:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 800201c:	f107 0218 	add.w	r2, r7, #24
 8002020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002022:	4413      	add	r3, r2
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <mg_dtoa+0x5e4>)
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	6978      	ldr	r0, [r7, #20]
 8002032:	f004 fcab 	bl	800698c <mg_snprintf>
 8002036:	4603      	mov	r3, r0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3770      	adds	r7, #112	; 0x70
 800203c:	46bd      	mov	sp, r7
 800203e:	bdb0      	pop	{r4, r5, r7, pc}
 8002040:	40240000 	.word	0x40240000
 8002044:	08012738 	.word	0x08012738

08002048 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <mg_lld+0x15c>)
 8002056:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800205c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002064:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d012      	beq.n	8002092 <mg_lld+0x4a>
 800206c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da0e      	bge.n	8002092 <mg_lld+0x4a>
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	627a      	str	r2, [r7, #36]	; 0x24
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	222d      	movs	r2, #45	; 0x2d
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002086:	2100      	movs	r1, #0
 8002088:	4254      	negs	r4, r2
 800208a:	eb61 0503 	sbc.w	r5, r1, r3
 800208e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002092:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002096:	2b00      	cmp	r3, #0
 8002098:	d021      	beq.n	80020de <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
 800209e:	e019      	b.n	80020d4 <mg_lld+0x8c>
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	441a      	add	r2, r3
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	1c59      	adds	r1, r3, #1
 80020ae:	6239      	str	r1, [r7, #32]
 80020b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b2:	440b      	add	r3, r1
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	440b      	add	r3, r1
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	0902      	lsrs	r2, r0, #4
 80020ca:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80020ce:	090b      	lsrs	r3, r1, #4
 80020d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80020d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020d8:	4313      	orrs	r3, r2
 80020da:	d1e1      	bne.n	80020a0 <mg_lld+0x58>
 80020dc:	e025      	b.n	800212a <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	e01e      	b.n	8002122 <mg_lld+0xda>
 80020e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020e8:	f04f 020a 	mov.w	r2, #10
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f7fe fd74 	bl	8000bdc <__aeabi_uldivmod>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	441a      	add	r2, r3
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	6239      	str	r1, [r7, #32]
 80020fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002100:	440b      	add	r3, r1
 8002102:	68f9      	ldr	r1, [r7, #12]
 8002104:	440b      	add	r3, r1
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800210e:	f04f 020a 	mov.w	r2, #10
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	f7fe fd61 	bl	8000bdc <__aeabi_uldivmod>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002126:	4313      	orrs	r3, r2
 8002128:	d1dc      	bne.n	80020e4 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e022      	b.n	8002176 <mg_lld+0x12e>
    char t = buf[s + i];
 8002130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	441a      	add	r2, r3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	441a      	add	r2, r3
 800214e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	440b      	add	r3, r1
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	440b      	add	r3, r1
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	441a      	add	r2, r3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	7dfa      	ldrb	r2, [r7, #23]
 800216e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3301      	adds	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	429a      	cmp	r2, r3
 800217e:	d3d7      	bcc.n	8002130 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002184:	4313      	orrs	r3, r2
 8002186:	d106      	bne.n	8002196 <mg_lld+0x14e>
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	623a      	str	r2, [r7, #32]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	2230      	movs	r2, #48	; 0x30
 8002194:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002196:	6a3a      	ldr	r2, [r7, #32]
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	4413      	add	r3, r2
}
 800219c:	4618      	mov	r0, r3
 800219e:	3730      	adds	r7, #48	; 0x30
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bdb0      	pop	{r4, r5, r7, pc}
 80021a4:	08012754 	.word	0x08012754

080021a8 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80021ba:	e009      	b.n	80021d0 <scpy+0x28>
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	617a      	str	r2, [r7, #20]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	4610      	mov	r0, r2
 80021ce:	4798      	blx	r3
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d205      	bcs.n	80021e4 <scpy+0x3c>
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1eb      	bne.n	80021bc <scpy+0x14>
  return i;
 80021e4:	697b      	ldr	r3, [r7, #20]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80021ee:	b40c      	push	{r2, r3}
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f809 	bl	8002224 <mg_vxprintf>
 8002212:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8002214:	68fb      	ldr	r3, [r7, #12]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002220:	b002      	add	sp, #8
 8002222:	4770      	bx	lr

08002224 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8002224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002228:	b0a6      	sub	sp, #152	; 0x98
 800222a:	af02      	add	r7, sp, #8
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8002240:	e383      	b.n	800294a <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b25      	cmp	r3, #37	; 0x25
 800224e:	f040 8369 	bne.w	8002924 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8002252:	2300      	movs	r3, #0
 8002254:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002256:	2300      	movs	r3, #0
 8002258:	67bb      	str	r3, [r7, #120]	; 0x78
 800225a:	2300      	movs	r3, #0
 800225c:	677b      	str	r3, [r7, #116]	; 0x74
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002264:	2320      	movs	r3, #32
 8002266:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800226a:	2300      	movs	r3, #0
 800226c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002274:	3301      	adds	r3, #1
 8002276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 8002288:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800228c:	2b23      	cmp	r3, #35	; 0x23
 800228e:	d10e      	bne.n	80022ae <mg_vxprintf+0x8a>
 8002290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002292:	3301      	adds	r3, #1
 8002294:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800229a:	3301      	adds	r3, #1
 800229c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80022ae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022b2:	2b2d      	cmp	r3, #45	; 0x2d
 80022b4:	d110      	bne.n	80022d8 <mg_vxprintf+0xb4>
 80022b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022ba:	3301      	adds	r3, #1
 80022bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80022c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c4:	3301      	adds	r3, #1
 80022c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d0:	4413      	add	r3, r2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80022d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80022dc:	2b30      	cmp	r3, #48	; 0x30
 80022de:	d127      	bne.n	8002330 <mg_vxprintf+0x10c>
 80022e0:	2330      	movs	r3, #48	; 0x30
 80022e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ea:	3301      	adds	r3, #1
 80022ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80022fe:	e017      	b.n	8002330 <mg_vxprintf+0x10c>
 8002300:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	677b      	str	r3, [r7, #116]	; 0x74
 800230c:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002312:	4413      	add	r3, r2
 8002314:	3b30      	subs	r3, #48	; 0x30
 8002316:	677b      	str	r3, [r7, #116]	; 0x74
 8002318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800231c:	3301      	adds	r3, #1
 800231e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002330:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff faa5 	bl	8001884 <is_digit>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1df      	bne.n	8002300 <mg_vxprintf+0xdc>
      if (c == '.') {
 8002340:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002344:	2b2e      	cmp	r3, #46	; 0x2e
 8002346:	d153      	bne.n	80023f0 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800234c:	3301      	adds	r3, #1
 800234e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8002360:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002364:	2b2a      	cmp	r3, #42	; 0x2a
 8002366:	d113      	bne.n	8002390 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1d19      	adds	r1, r3, #4
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	6011      	str	r1, [r2, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8002376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800237a:	3301      	adds	r3, #1
 800237c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800238e:	e02f      	b.n	80023f0 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002394:	e017      	b.n	80023c6 <mg_vxprintf+0x1a2>
 8002396:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	673b      	str	r3, [r7, #112]	; 0x70
 80023a2:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80023a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023a8:	4413      	add	r3, r2
 80023aa:	3b30      	subs	r3, #48	; 0x30
 80023ac:	673b      	str	r3, [r7, #112]	; 0x70
 80023ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b2:	3301      	adds	r3, #1
 80023b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023c6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fa5a 	bl	8001884 <is_digit>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1df      	bne.n	8002396 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80023d6:	e00b      	b.n	80023f0 <mg_vxprintf+0x1cc>
 80023d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023dc:	3301      	adds	r3, #1
 80023de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80023f0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023f4:	2b68      	cmp	r3, #104	; 0x68
 80023f6:	d0ef      	beq.n	80023d8 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80023f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80023fc:	2b6c      	cmp	r3, #108	; 0x6c
 80023fe:	d121      	bne.n	8002444 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8002400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002402:	3301      	adds	r3, #1
 8002404:	67bb      	str	r3, [r7, #120]	; 0x78
 8002406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240a:	3301      	adds	r3, #1
 800240c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002416:	4413      	add	r3, r2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 800241e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002422:	2b6c      	cmp	r3, #108	; 0x6c
 8002424:	d10e      	bne.n	8002444 <mg_vxprintf+0x220>
 8002426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002428:	3301      	adds	r3, #1
 800242a:	67bb      	str	r3, [r7, #120]	; 0x78
 800242c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002430:	3301      	adds	r3, #1
 8002432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243c:	4413      	add	r3, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002444:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002448:	2b70      	cmp	r3, #112	; 0x70
 800244a:	d103      	bne.n	8002454 <mg_vxprintf+0x230>
 800244c:	2301      	movs	r3, #1
 800244e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002450:	2301      	movs	r3, #1
 8002452:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002454:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d018      	beq.n	800248e <mg_vxprintf+0x26a>
 800245c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002460:	2b75      	cmp	r3, #117	; 0x75
 8002462:	d014      	beq.n	800248e <mg_vxprintf+0x26a>
 8002464:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002468:	2b78      	cmp	r3, #120	; 0x78
 800246a:	d010      	beq.n	800248e <mg_vxprintf+0x26a>
 800246c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002470:	2b58      	cmp	r3, #88	; 0x58
 8002472:	d00c      	beq.n	800248e <mg_vxprintf+0x26a>
 8002474:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d008      	beq.n	800248e <mg_vxprintf+0x26a>
 800247c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002480:	2b67      	cmp	r3, #103	; 0x67
 8002482:	d004      	beq.n	800248e <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002484:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002488:	2b66      	cmp	r3, #102	; 0x66
 800248a:	f040 816c 	bne.w	8002766 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 800248e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800249e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024a2:	2b78      	cmp	r3, #120	; 0x78
 80024a4:	d007      	beq.n	80024b6 <mg_vxprintf+0x292>
 80024a6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024aa:	2b58      	cmp	r3, #88	; 0x58
 80024ac:	d003      	beq.n	80024b6 <mg_vxprintf+0x292>
 80024ae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024b2:	2b70      	cmp	r3, #112	; 0x70
 80024b4:	d101      	bne.n	80024ba <mg_vxprintf+0x296>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <mg_vxprintf+0x298>
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80024c0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 80024cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <mg_vxprintf+0x2b2>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e000      	b.n	80024d8 <mg_vxprintf+0x2b4>
 80024d6:	2300      	movs	r3, #0
 80024d8:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 80024da:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024de:	2b67      	cmp	r3, #103	; 0x67
 80024e0:	d003      	beq.n	80024ea <mg_vxprintf+0x2c6>
 80024e2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80024e6:	2b66      	cmp	r3, #102	; 0x66
 80024e8:	d124      	bne.n	8002534 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3307      	adds	r3, #7
 80024f0:	f023 0307 	bic.w	r3, r3, #7
 80024f4:	f103 0108 	add.w	r1, r3, #8
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	6011      	str	r1, [r2, #0]
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 8002504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d101      	bne.n	8002510 <mg_vxprintf+0x2ec>
 800250c:	2306      	movs	r3, #6
 800250e:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002510:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002512:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002516:	2b67      	cmp	r3, #103	; 0x67
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f107 0014 	add.w	r0, r7, #20
 8002524:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002528:	2128      	movs	r1, #40	; 0x28
 800252a:	f7ff fa99 	bl	8001a60 <mg_dtoa>
 800252e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 8002532:	e069      	b.n	8002608 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11c      	bne.n	8002574 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3307      	adds	r3, #7
 8002540:	f023 0307 	bic.w	r3, r3, #7
 8002544:	f103 0108 	add.w	r1, r3, #8
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	6011      	str	r1, [r2, #0]
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 8002554:	f107 0114 	add.w	r1, r7, #20
 8002558:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002568:	4608      	mov	r0, r1
 800256a:	f7ff fd6d 	bl	8002048 <mg_lld>
 800256e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002572:	e049      	b.n	8002608 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002576:	2b01      	cmp	r3, #1
 8002578:	d123      	bne.n	80025c2 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1d19      	adds	r1, r3, #4
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	6011      	str	r1, [r2, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <mg_vxprintf+0x376>
 8002590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002592:	17da      	asrs	r2, r3, #31
 8002594:	461c      	mov	r4, r3
 8002596:	4615      	mov	r5, r2
 8002598:	e003      	b.n	80025a2 <mg_vxprintf+0x37e>
 800259a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259c:	2200      	movs	r2, #0
 800259e:	461c      	mov	r4, r3
 80025a0:	4615      	mov	r5, r2
 80025a2:	f107 0114 	add.w	r1, r7, #20
 80025a6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4622      	mov	r2, r4
 80025b4:	462b      	mov	r3, r5
 80025b6:	4608      	mov	r0, r1
 80025b8:	f7ff fd46 	bl	8002048 <mg_lld>
 80025bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 80025c0:	e022      	b.n	8002608 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1d19      	adds	r1, r3, #4
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	6011      	str	r1, [r2, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80025d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <mg_vxprintf+0x3be>
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	17da      	asrs	r2, r3, #31
 80025dc:	4698      	mov	r8, r3
 80025de:	4691      	mov	r9, r2
 80025e0:	e003      	b.n	80025ea <mg_vxprintf+0x3c6>
 80025e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e4:	2200      	movs	r2, #0
 80025e6:	4698      	mov	r8, r3
 80025e8:	4691      	mov	r9, r2
 80025ea:	f107 0114 	add.w	r1, r7, #20
 80025ee:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	4642      	mov	r2, r8
 80025fc:	464b      	mov	r3, r9
 80025fe:	4608      	mov	r0, r1
 8002600:	f7ff fd22 	bl	8002048 <mg_lld>
 8002604:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800260e:	e007      	b.n	8002620 <mg_vxprintf+0x3fc>
 8002610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002612:	3b01      	subs	r3, #1
 8002614:	677b      	str	r3, [r7, #116]	; 0x74
 8002616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261a:	3301      	adds	r3, #1
 800261c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002620:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002626:	429a      	cmp	r2, r3
 8002628:	d202      	bcs.n	8002630 <mg_vxprintf+0x40c>
 800262a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ef      	bne.n	8002610 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002636:	e011      	b.n	800265c <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002638:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800263c:	2301      	movs	r3, #1
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fdb1 	bl	80021a8 <scpy>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800264c:	4413      	add	r3, r2
 800264e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002656:	3301      	adds	r3, #1
 8002658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800265c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002660:	2b20      	cmp	r3, #32
 8002662:	d110      	bne.n	8002686 <mg_vxprintf+0x462>
 8002664:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10c      	bne.n	8002686 <mg_vxprintf+0x462>
 800266c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002672:	429a      	cmp	r2, r3
 8002674:	d207      	bcs.n	8002686 <mg_vxprintf+0x462>
 8002676:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800267a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800267e:	4413      	add	r3, r2
 8002680:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002682:	429a      	cmp	r2, r3
 8002684:	d8d8      	bhi.n	8002638 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8002686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002688:	4ab7      	ldr	r2, [pc, #732]	; (8002968 <mg_vxprintf+0x744>)
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fd8b 	bl	80021a8 <scpy>
 8002692:	4602      	mov	r2, r0
 8002694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002698:	4413      	add	r3, r2
 800269a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026a4:	e011      	b.n	80026ca <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 80026a6:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80026aa:	2301      	movs	r3, #1
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f7ff fd7a 	bl	80021a8 <scpy>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026ba:	4413      	add	r3, r2
 80026bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80026c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c4:	3301      	adds	r3, #1
 80026c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80026ce:	2b30      	cmp	r3, #48	; 0x30
 80026d0:	d10c      	bne.n	80026ec <mg_vxprintf+0x4c8>
 80026d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d8:	429a      	cmp	r2, r3
 80026da:	d207      	bcs.n	80026ec <mg_vxprintf+0x4c8>
 80026dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e4:	4413      	add	r3, r2
 80026e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d8dc      	bhi.n	80026a6 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 80026ec:	f107 0214 	add.w	r2, r7, #20
 80026f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff fd56 	bl	80021a8 <scpy>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002702:	4413      	add	r3, r2
 8002704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800270e:	e011      	b.n	8002734 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002710:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002714:	2301      	movs	r3, #1
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff fd45 	bl	80021a8 <scpy>
 800271e:	4602      	mov	r2, r0
 8002720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002724:	4413      	add	r3, r2
 8002726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800272a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800272e:	3301      	adds	r3, #1
 8002730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002734:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002738:	2b20      	cmp	r3, #32
 800273a:	f040 80ea 	bne.w	8002912 <mg_vxprintf+0x6ee>
 800273e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80e5 	beq.w	8002912 <mg_vxprintf+0x6ee>
 8002748:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800274c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274e:	429a      	cmp	r2, r3
 8002750:	f080 80df 	bcs.w	8002912 <mg_vxprintf+0x6ee>
 8002754:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275c:	4413      	add	r3, r2
 800275e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002760:	429a      	cmp	r2, r3
 8002762:	d8d5      	bhi.n	8002710 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002764:	e0d5      	b.n	8002912 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8002766:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800276a:	2b6d      	cmp	r3, #109	; 0x6d
 800276c:	d003      	beq.n	8002776 <mg_vxprintf+0x552>
 800276e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002772:	2b4d      	cmp	r3, #77	; 0x4d
 8002774:	d128      	bne.n	80027c8 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1d19      	adds	r1, r3, #4
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6011      	str	r1, [r2, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 8002784:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002788:	2b6d      	cmp	r3, #109	; 0x6d
 800278a:	d103      	bne.n	8002794 <mg_vxprintf+0x570>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	2022      	movs	r0, #34	; 0x22
 8002792:	4798      	blx	r3
        n += f(out, param, ap);
 8002794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	4798      	blx	r3
 800279e:	4602      	mov	r2, r0
 80027a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a4:	4413      	add	r3, r2
 80027a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 80027aa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027ae:	2b6d      	cmp	r3, #109	; 0x6d
 80027b0:	f040 80b1 	bne.w	8002916 <mg_vxprintf+0x6f2>
 80027b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027b8:	3302      	adds	r3, #2
 80027ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	2022      	movs	r0, #34	; 0x22
 80027c4:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 80027c6:	e0a6      	b.n	8002916 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 80027c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027cc:	2b63      	cmp	r3, #99	; 0x63
 80027ce:	d112      	bne.n	80027f6 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	1d19      	adds	r1, r3, #4
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	6011      	str	r1, [r2, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 80027de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	4610      	mov	r0, r2
 80027e8:	4798      	blx	r3
        n++;
 80027ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ee:	3301      	adds	r3, #1
 80027f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027f4:	e090      	b.n	8002918 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80027f6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027fa:	2b73      	cmp	r3, #115	; 0x73
 80027fc:	d16b      	bne.n	80028d6 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1d19      	adds	r1, r3, #4
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	6011      	str	r1, [r2, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 800280c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d109      	bne.n	8002828 <mg_vxprintf+0x604>
 8002814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <mg_vxprintf+0x600>
 800281a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800281c:	f7fd fd58 	bl	80002d0 <strlen>
 8002820:	4603      	mov	r3, r0
 8002822:	e000      	b.n	8002826 <mg_vxprintf+0x602>
 8002824:	2300      	movs	r3, #0
 8002826:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800282e:	e011      	b.n	8002854 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002830:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002834:	2301      	movs	r3, #1
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fcb5 	bl	80021a8 <scpy>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002844:	4413      	add	r3, r2
 8002846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800284a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284e:	3301      	adds	r3, #1
 8002850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002854:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <mg_vxprintf+0x64e>
 800285c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800285e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002860:	429a      	cmp	r2, r3
 8002862:	d206      	bcs.n	8002872 <mg_vxprintf+0x64e>
 8002864:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800286a:	4413      	add	r3, r2
 800286c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800286e:	429a      	cmp	r2, r3
 8002870:	d8de      	bhi.n	8002830 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8002872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002874:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f7ff fc95 	bl	80021a8 <scpy>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002884:	4413      	add	r3, r2
 8002886:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002890:	e011      	b.n	80028b6 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8002892:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002896:	2301      	movs	r3, #1
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff fc84 	bl	80021a8 <scpy>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028a6:	4413      	add	r3, r2
 80028a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80028ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b0:	3301      	adds	r3, #1
 80028b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <mg_vxprintf+0x6f4>
 80028be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d228      	bcs.n	8002918 <mg_vxprintf+0x6f4>
 80028c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80028ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028cc:	4413      	add	r3, r2
 80028ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8de      	bhi.n	8002892 <mg_vxprintf+0x66e>
 80028d4:	e020      	b.n	8002918 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 80028d6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028da:	2b25      	cmp	r3, #37	; 0x25
 80028dc:	d109      	bne.n	80028f2 <mg_vxprintf+0x6ce>
        out('%', param);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	2025      	movs	r0, #37	; 0x25
 80028e4:	4798      	blx	r3
        n++;
 80028e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ea:	3301      	adds	r3, #1
 80028ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028f0:	e012      	b.n	8002918 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	2025      	movs	r0, #37	; 0x25
 80028f8:	4798      	blx	r3
        out(c, param);
 80028fa:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	4610      	mov	r0, r2
 8002904:	4798      	blx	r3
        n += 2;
 8002906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800290a:	3302      	adds	r3, #2
 800290c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002910:	e002      	b.n	8002918 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8002916:	bf00      	nop
      }
      i++;
 8002918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002922:	e012      	b.n	800294a <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800292a:	4413      	add	r3, r2
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4610      	mov	r0, r2
 8002934:	4798      	blx	r3
 8002936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800293a:	3301      	adds	r3, #1
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002944:	3301      	adds	r3, #1
 8002946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002950:	4413      	add	r3, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f ac74 	bne.w	8002242 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800295a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800295e:	4618      	mov	r0, r3
 8002960:	3790      	adds	r7, #144	; 0x90
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002968:	08012768 	.word	0x08012768

0800296c <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8002978:	2108      	movs	r1, #8
 800297a:	2001      	movs	r0, #1
 800297c:	f00e fc48 	bl	8011210 <calloc>
 8002980:	4603      	mov	r3, r0
 8002982:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d013      	beq.n	80029b2 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	68b8      	ldr	r0, [r7, #8]
 8002992:	4798      	blx	r3
 8002994:	4602      	mov	r2, r0
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <mg_fs_open+0x46>
      free(fd);
 80029a8:	6978      	ldr	r0, [r7, #20]
 80029aa:	f00e fc57 	bl	801125c <free>
      fd = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 80029b2:	697b      	ldr	r3, [r7, #20]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3
    free(fd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f00e fc3f 	bl	801125c <free>
  }
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fd fc6c 	bl	80002d0 <strlen>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d219      	bcs.n	8002a34 <is_dir_prefix+0x4e>
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f00e fef5 	bl	80117f4 <strncmp>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <is_dir_prefix+0x4e>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b2f      	cmp	r3, #47	; 0x2f
 8002a20:	d006      	beq.n	8002a30 <is_dir_prefix+0x4a>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a2e:	d101      	bne.n	8002a34 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <is_dir_prefix+0x50>
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b088      	sub	sp, #32
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7fd fc40 	bl	80002d0 <strlen>
 8002a50:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f008 fab0 	bl	800afbc <mg_unpack>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <packed_stat+0x28>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e017      	b.n	8002a96 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e00c      	b.n	8002a86 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff ffb8 	bl	80029e6 <is_dir_prefix>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <packed_stat+0x42>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	e00a      	b.n	8002a96 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	3301      	adds	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	69f8      	ldr	r0, [r7, #28]
 8002a88:	f008 fa84 	bl	800af94 <mg_unlist>
 8002a8c:	6178      	str	r0, [r7, #20]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1eb      	bne.n	8002a6c <packed_stat+0x2e>
  }
  return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0cc      	sub	sp, #304	; 0x130
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002aaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002aae:	6018      	str	r0, [r3, #0]
 8002ab0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ab4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ab8:	6019      	str	r1, [r3, #0]
 8002aba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002abe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ac2:	601a      	str	r2, [r3, #0]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8002ac4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ac8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	f7fd fbff 	bl	80002d0 <strlen>
 8002ad2:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  tmp[0] = '\0';  // Previously listed entry
 8002ad6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ada:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ae8:	e065      	b.n	8002bb6 <packed_list+0x116>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002aea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002aee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002af2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002af6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	f7ff ff73 	bl	80029e6 <is_dir_prefix>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04f      	beq.n	8002ba6 <packed_list+0x106>
    begin = &path[n + 1];
 8002b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b10:	4413      	add	r3, r2
 8002b12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    end = strchr(begin, '/');
 8002b16:	212f      	movs	r1, #47	; 0x2f
 8002b18:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002b1c:	f00e fe5d 	bl	80117da <strchr>
 8002b20:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (end == NULL) end = begin + strlen(begin);
 8002b24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <packed_list+0xa0>
 8002b2c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002b30:	f7fd fbce 	bl	80002d0 <strlen>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8002b40:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b48:	1ad2      	subs	r2, r2, r3
 8002b4a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <packed_list+0x138>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	f003 ff17 	bl	800698c <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8002b64:	f107 0214 	add.w	r2, r7, #20
 8002b68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fb4e 	bl	8000210 <strcmp>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <packed_list+0x10a>
    fn(buf, userdata);  // Not yet listed, call user function
 8002b7a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b7e:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8002b82:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002b86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002b8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6811      	ldr	r1, [r2, #0]
 8002b92:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8002b94:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f00e fed5 	bl	801194e <strcpy>
 8002ba4:	e002      	b.n	8002bac <packed_list+0x10c>
    if (!is_dir_prefix(dir, n, path)) continue;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <packed_list+0x10c>
    if (strcmp(buf, tmp) == 0) continue;
 8002baa:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8002bac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bb6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002bba:	f008 f9eb 	bl	800af94 <mg_unlist>
 8002bbe:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8002bc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d18f      	bne.n	8002aea <packed_list+0x4a>
  }
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	0801274c 	.word	0x0801274c

08002bdc <packed_open>:

static void *packed_open(const char *path, int flags) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f008 f9e2 	bl	800afbc <mg_unpack>
 8002bf8:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <packed_open+0x2c>
 8002c04:	2300      	movs	r3, #0
 8002c06:	e016      	b.n	8002c36 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <packed_open+0x3a>
 8002c12:	2300      	movs	r3, #0
 8002c14:	e00f      	b.n	8002c36 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8002c16:	210c      	movs	r1, #12
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f00e faf9 	bl	8011210 <calloc>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <packed_open+0x58>
    fp->size = size;
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8002c34:	693b      	ldr	r3, [r7, #16]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <packed_close>:

static void packed_close(void *fp) {
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <packed_close+0x14>
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f00e fb05 	bl	801125c <free>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	441a      	add	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d905      	bls.n	8002c86 <packed_read+0x2c>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	4413      	add	r3, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4619      	mov	r1, r3
 8002c94:	68b8      	ldr	r0, [r7, #8]
 8002c96:	f00e fe62 	bl	801195e <memcpy>
  fp->pos += len;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	609a      	str	r2, [r3, #8]
  return len;
 8002ca6:	687b      	ldr	r3, [r7, #4]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d903      	bls.n	8002cf2 <packed_seek+0x28>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <packed_remove>:

static bool packed_remove(const char *path) {
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <p_open>:
static void *p_open(const char *path, int flags) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <p_close>:
static void p_close(void *fp) {
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <p_remove>:
static bool p_remove(const char *path) {
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8002e38:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e3c:	b08f      	sub	sp, #60	; 0x3c
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	f107 0318 	add.w	r3, r7, #24
 8002e44:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e48:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002e56:	a340      	add	r3, pc, #256	; (adr r3, 8002f58 <mg_to_size_t+0x120>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 8002e64:	e002      	b.n	8002e6c <mg_to_size_t+0x34>
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	3301      	adds	r3, #1
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d20b      	bcs.n	8002e8c <mg_to_size_t+0x54>
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	4413      	add	r3, r2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d0f2      	beq.n	8002e66 <mg_to_size_t+0x2e>
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d0ec      	beq.n	8002e66 <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d244      	bcs.n	8002f1e <mg_to_size_t+0xe6>
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	4413      	add	r3, r2
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b2d      	cmp	r3, #45	; 0x2d
 8002e9e:	d13e      	bne.n	8002f1e <mg_to_size_t+0xe6>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e050      	b.n	8002f46 <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 8002ea4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ea8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eac:	4290      	cmp	r0, r2
 8002eae:	eb71 0303 	sbcs.w	r3, r1, r3
 8002eb2:	d201      	bcs.n	8002eb8 <mg_to_size_t+0x80>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e046      	b.n	8002f46 <mg_to_size_t+0x10e>
    result *= 10;
 8002eb8:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	f04f 0000 	mov.w	r0, #0
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	0099      	lsls	r1, r3, #2
 8002eca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ece:	0090      	lsls	r0, r2, #2
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	eb12 0408 	adds.w	r4, r2, r8
 8002ed8:	eb43 0509 	adc.w	r5, r3, r9
 8002edc:	1923      	adds	r3, r4, r4
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	eb45 0305 	adc.w	r3, r5, r5
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eea:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	4413      	add	r3, r2
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	3b30      	subs	r3, #48	; 0x30
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2300      	movs	r3, #0
 8002efc:	4692      	mov	sl, r2
 8002efe:	469b      	mov	fp, r3
 8002f00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f04:	eb12 010a 	adds.w	r1, r2, sl
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	eb43 030b 	adc.w	r3, r3, fp
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20b      	bcs.n	8002f3e <mg_to_size_t+0x106>
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b2f      	cmp	r3, #47	; 0x2f
 8002f30:	d905      	bls.n	8002f3e <mg_to_size_t+0x106>
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b39      	cmp	r3, #57	; 0x39
 8002f3c:	d9b2      	bls.n	8002ea4 <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 8002f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	601a      	str	r2, [r3, #0]
  return true;
 8002f44:	2301      	movs	r3, #1
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	373c      	adds	r7, #60	; 0x3c
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	f3af 8000 	nop.w
 8002f58:	99999998 	.word	0x99999998
 8002f5c:	19999999 	.word	0x19999999

08002f60 <isx>:
    }
  }
  return len;
}

static bool isx(int c) {
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b2f      	cmp	r3, #47	; 0x2f
 8002f6c:	dd02      	ble.n	8002f74 <isx+0x14>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b39      	cmp	r3, #57	; 0x39
 8002f72:	dd0b      	ble.n	8002f8c <isx+0x2c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b60      	cmp	r3, #96	; 0x60
 8002f78:	dd02      	ble.n	8002f80 <isx+0x20>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b66      	cmp	r3, #102	; 0x66
 8002f7e:	dd05      	ble.n	8002f8c <isx+0x2c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	dd04      	ble.n	8002f90 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b46      	cmp	r3, #70	; 0x46
 8002f8a:	dc01      	bgt.n	8002f90 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <isx+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e04f      	b.n	800305c <mg_url_decode+0xb8>
    if (src[i] == '%') {
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b25      	cmp	r3, #37	; 0x25
 8002fc6:	d12c      	bne.n	8003022 <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3302      	adds	r3, #2
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d924      	bls.n	800301c <mg_url_decode+0x78>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ffbf 	bl	8002f60 <isx>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d019      	beq.n	800301c <mg_url_decode+0x78>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3302      	adds	r3, #2
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffb4 	bl	8002f60 <isx>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00e      	beq.n	800301c <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	18d0      	adds	r0, r2, r3
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	461a      	mov	r2, r3
 800300e:	2102      	movs	r1, #2
 8003010:	f004 fb81 	bl	8007716 <mg_unhex>
        i += 2;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3302      	adds	r3, #2
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e019      	b.n	8003050 <mg_url_decode+0xac>
      } else {
        return -1;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	e03a      	b.n	8003098 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00b      	beq.n	8003040 <mg_url_decode+0x9c>
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	4413      	add	r3, r2
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b2b      	cmp	r3, #43	; 0x2b
 8003032:	d105      	bne.n	8003040 <mg_url_decode+0x9c>
      dst[j] = ' ';
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	2220      	movs	r2, #32
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e007      	b.n	8003050 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	441a      	add	r2, r3
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	440b      	add	r3, r1
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3301      	adds	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3301      	adds	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d204      	bcs.n	800306e <mg_url_decode+0xca>
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	3301      	adds	r3, #1
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d8a6      	bhi.n	8002fbc <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d204      	bcs.n	8003080 <mg_url_decode+0xdc>
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	d305      	bcc.n	8003094 <mg_url_decode+0xf0>
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d201      	bcs.n	8003094 <mg_url_decode+0xf0>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	e001      	b.n	8003098 <mg_url_decode+0xf4>
 8003094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <isok>:

static bool isok(uint8_t c) {
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b0a      	cmp	r3, #10
 80030ae:	d005      	beq.n	80030bc <isok+0x1c>
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b0d      	cmp	r3, #13
 80030b4:	d002      	beq.n	80030bc <isok+0x1c>
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b1f      	cmp	r3, #31
 80030ba:	d901      	bls.n	80030c0 <isok+0x20>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <isok+0x22>
 80030c0:	2300      	movs	r3, #0
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e03c      	b.n	800315e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ffd7 	bl	80030a0 <isok>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <mg_http_get_request_len+0x30>
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e031      	b.n	8003168 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <mg_http_get_request_len+0x50>
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b0a      	cmp	r3, #10
 8003114:	d106      	bne.n	8003124 <mg_http_get_request_len+0x50>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b01      	subs	r3, #1
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b0a      	cmp	r3, #10
 8003122:	d016      	beq.n	8003152 <mg_http_get_request_len+0x7e>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d916      	bls.n	8003158 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b0a      	cmp	r3, #10
 8003134:	d110      	bne.n	8003158 <mg_http_get_request_len+0x84>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b0d      	cmp	r3, #13
 8003142:	d109      	bne.n	8003158 <mg_http_get_request_len+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3b02      	subs	r3, #2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b0a      	cmp	r3, #10
 8003150:	d102      	bne.n	8003158 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3301      	adds	r3, #1
 8003156:	e007      	b.n	8003168 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3301      	adds	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3be      	bcc.n	80030e4 <mg_http_get_request_len+0x10>
  }
  return 0;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	f7fd f8a8 	bl	80002d0 <strlen>
 8003180:	61b8      	str	r0, [r7, #24]
 8003182:	231e      	movs	r3, #30
 8003184:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e01f      	b.n	80031cc <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3302      	adds	r3, #2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	3328      	adds	r3, #40	; 0x28
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10b      	bne.n	80031c6 <mg_http_get_header+0x56>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 ff7e 	bl	80070b8 <mg_ncasecmp>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <mg_http_get_header+0x56>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	e010      	b.n	80031e8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d208      	bcs.n	80031e6 <mg_http_get_header+0x76>
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3302      	adds	r3, #2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	4413      	add	r3, r2
 80031de:	3304      	adds	r3, #4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1d2      	bne.n	800318c <mg_http_get_header+0x1c>
  }
  return NULL;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3720      	adds	r7, #32
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <clen>:

// Get character length. Used to parse method, URI, headers
static size_t clen(const char *s) {
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint8_t c = *(uint8_t *) s;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	73fb      	strb	r3, [r7, #15]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b20      	cmp	r3, #32
 8003202:	d904      	bls.n	800320e <clen+0x1e>
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b7d      	cmp	r3, #125	; 0x7d
 8003208:	d801      	bhi.n	800320e <clen+0x1e>
 800320a:	2301      	movs	r3, #1
 800320c:	e015      	b.n	800323a <clen+0x4a>
  if ((c & 0xe0) == 0xc0) return 2;  // 2-byte UTF8
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003214:	2bc0      	cmp	r3, #192	; 0xc0
 8003216:	d101      	bne.n	800321c <clen+0x2c>
 8003218:	2302      	movs	r3, #2
 800321a:	e00e      	b.n	800323a <clen+0x4a>
  if ((c & 0xf0) == 0xe0) return 3;  // 3-byte UTF8
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003222:	2be0      	cmp	r3, #224	; 0xe0
 8003224:	d101      	bne.n	800322a <clen+0x3a>
 8003226:	2303      	movs	r3, #3
 8003228:	e007      	b.n	800323a <clen+0x4a>
  if ((c & 0xf8) == 0xf0) return 4;  // 4-byte UTF8
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003230:	2bf0      	cmp	r3, #240	; 0xf0
 8003232:	d101      	bne.n	8003238 <clen+0x48>
 8003234:	2304      	movs	r3, #4
 8003236:	e000      	b.n	800323a <clen+0x4a>
  return 0;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  v->ptr = s;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8003258:	e007      	b.n	800326a <skiptorn+0x24>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d207      	bcs.n	8003282 <skiptorn+0x3c>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b0a      	cmp	r3, #10
 8003278:	d003      	beq.n	8003282 <skiptorn+0x3c>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b0d      	cmp	r3, #13
 8003280:	d1eb      	bne.n	800325a <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	d208      	bcs.n	800329c <skiptorn+0x56>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b0d      	cmp	r3, #13
 8003290:	d106      	bne.n	80032a0 <skiptorn+0x5a>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3301      	adds	r3, #1
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b0a      	cmp	r3, #10
 800329a:	d001      	beq.n	80032a0 <skiptorn+0x5a>
 800329c:	2300      	movs	r3, #0
 800329e:	e017      	b.n	80032d0 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d206      	bcs.n	80032b6 <skiptorn+0x70>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b0d      	cmp	r3, #13
 80032ae:	d102      	bne.n	80032b6 <skiptorn+0x70>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d205      	bcs.n	80032ca <skiptorn+0x84>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	60fa      	str	r2, [r7, #12]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b0a      	cmp	r3, #10
 80032c8:	d001      	beq.n	80032ce <skiptorn+0x88>
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <skiptorn+0x8a>
  return s;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	e083      	b.n	80033f8 <mg_http_parse_headers+0x11c>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	d301      	bcc.n	800330c <mg_http_parse_headers+0x30>
 8003308:	2300      	movs	r3, #0
 800330a:	e07b      	b.n	8003404 <mg_http_parse_headers+0x128>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b0a      	cmp	r3, #10
 8003312:	d076      	beq.n	8003402 <mg_http_parse_headers+0x126>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b0d      	cmp	r3, #13
 800331a:	d104      	bne.n	8003326 <mg_http_parse_headers+0x4a>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b0a      	cmp	r3, #10
 8003324:	d06d      	beq.n	8003402 <mg_http_parse_headers+0x126>
    k.ptr = s;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s)) > 0) s += n, k.len += n;
 800332a:	e007      	b.n	800333c <mg_http_parse_headers+0x60>
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	4413      	add	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	4413      	add	r3, r2
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	d20a      	bcs.n	800335a <mg_http_parse_headers+0x7e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b3a      	cmp	r3, #58	; 0x3a
 800334a:	d006      	beq.n	800335a <mg_http_parse_headers+0x7e>
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff ff4f 	bl	80031f0 <clen>
 8003352:	6238      	str	r0, [r7, #32]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e8      	bne.n	800332c <mg_http_parse_headers+0x50>
    if (k.len == 0) return false;               // Empty name
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <mg_http_parse_headers+0x88>
 8003360:	2300      	movs	r3, #0
 8003362:	e04f      	b.n	8003404 <mg_http_parse_headers+0x128>
    if (s >= end || *s++ != ':') return false;  // Invalid, not followed by :
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d205      	bcs.n	8003378 <mg_http_parse_headers+0x9c>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	60fa      	str	r2, [r7, #12]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b3a      	cmp	r3, #58	; 0x3a
 8003376:	d004      	beq.n	8003382 <mg_http_parse_headers+0xa6>
 8003378:	2300      	movs	r3, #0
 800337a:	e043      	b.n	8003404 <mg_http_parse_headers+0x128>
    while (s < end && s[0] == ' ') s++;         // Skip spaces
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3301      	adds	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	d203      	bcs.n	8003392 <mg_http_parse_headers+0xb6>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b20      	cmp	r3, #32
 8003390:	d0f4      	beq.n	800337c <mg_http_parse_headers+0xa0>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8003392:	f107 0310 	add.w	r3, r7, #16
 8003396:	461a      	mov	r2, r3
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff ff53 	bl	8003246 <skiptorn>
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <mg_http_parse_headers+0xd6>
 80033a8:	2300      	movs	r3, #0
 80033aa:	e02b      	b.n	8003404 <mg_http_parse_headers+0x128>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d006      	beq.n	80033c6 <mg_http_parse_headers+0xea>
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3b01      	subs	r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d0f2      	beq.n	80033ac <mg_http_parse_headers+0xd0>
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	461a      	mov	r2, r3
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	3308      	adds	r3, #8
 80033e6:	f107 0210 	add.w	r2, r7, #16
 80033ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ee:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	3301      	adds	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f4ff af77 	bcc.w	80032f0 <mg_http_parse_headers+0x14>
  }
  return true;
 8003402:	2301      	movs	r3, #1
}
 8003404:	4618      	mov	r0, r3
 8003406:	3728      	adds	r7, #40	; 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fe5a 	bl	80030d4 <mg_http_get_request_len>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <mg_http_parse+0x24>
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	e000      	b.n	8003432 <mg_http_parse+0x26>
 8003430:	2300      	movs	r3, #0
 8003432:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8003434:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003438:	2100      	movs	r1, #0
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f00e f9c5 	bl	80117ca <memset>
  if (req_len <= 0) return req_len;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	dc01      	bgt.n	800344a <mg_http_parse+0x3e>
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	e120      	b.n	800368c <mg_http_parse+0x280>

  hm->message.ptr = hm->head.ptr = s;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  hm->method.ptr = s;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s)) > 0) s += n, hm->method.len += n;
 8003492:	e009      	b.n	80034a8 <mg_http_parse+0x9c>
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d20a      	bcs.n	80034c6 <mg_http_parse+0xba>
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff fe9d 	bl	80031f0 <clen>
 80034b6:	61f8      	str	r0, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ea      	bne.n	8003494 <mg_http_parse+0x88>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80034be:	e002      	b.n	80034c6 <mg_http_parse+0xba>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d203      	bcs.n	80034d6 <mg_http_parse+0xca>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d0f4      	beq.n	80034c0 <mg_http_parse+0xb4>
  hm->uri.ptr = s;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s)) > 0) s += n, hm->uri.len += n;
 80034dc:	e009      	b.n	80034f2 <mg_http_parse+0xe6>
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	441a      	add	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20a      	bcs.n	8003510 <mg_http_parse+0x104>
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff fe78 	bl	80031f0 <clen>
 8003500:	61f8      	str	r0, [r7, #28]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ea      	bne.n	80034de <mg_http_parse+0xd2>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8003508:	e002      	b.n	8003510 <mg_http_parse+0x104>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3301      	adds	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	429a      	cmp	r2, r3
 8003516:	d203      	bcs.n	8003520 <mg_http_parse+0x114>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b20      	cmp	r3, #32
 800351e:	d0f4      	beq.n	800350a <mg_http_parse+0xfe>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3318      	adds	r3, #24
 8003524:	461a      	mov	r2, r3
 8003526:	6a39      	ldr	r1, [r7, #32]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff fe8c 	bl	8003246 <skiptorn>
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <mg_http_parse+0x12e>
 8003536:	2300      	movs	r3, #0
 8003538:	e0a8      	b.n	800368c <mg_http_parse+0x280>

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <mg_http_parse+0x13e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <mg_http_parse+0x144>
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	e09d      	b.n	800368c <mg_http_parse+0x280>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6898      	ldr	r0, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	461a      	mov	r2, r3
 800355a:	213f      	movs	r1, #63	; 0x3f
 800355c:	f7fc fe68 	bl	8000230 <memchr>
 8003560:	61b8      	str	r0, [r7, #24]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d015      	beq.n	8003594 <mg_http_parse+0x188>
    hm->query.ptr = qs + 1;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	441a      	add	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	3301      	adds	r3, #1
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f103 0220 	add.w	r2, r3, #32
 800359a:	231e      	movs	r3, #30
 800359c:	6a39      	ldr	r1, [r7, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff fe9c 	bl	80032dc <mg_http_parse_headers>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f083 0301 	eor.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <mg_http_parse+0x1aa>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80035b0:	f04f 33ff 	mov.w	r3, #4294967295
 80035b4:	e06a      	b.n	800368c <mg_http_parse+0x280>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80035b6:	4937      	ldr	r1, [pc, #220]	; (8003694 <mg_http_parse+0x288>)
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fdd9 	bl	8003170 <mg_http_get_header>
 80035be:	6178      	str	r0, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <mg_http_parse+0x1ec>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f503 7201 	add.w	r2, r3, #516	; 0x204
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035d2:	f7ff fc31 	bl	8002e38 <mg_to_size_t>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f083 0301 	eor.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <mg_http_parse+0x1dc>
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	e051      	b.n	800368c <mg_http_parse+0x280>
    hm->message.len = (size_t) req_len + hm->body.len;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2205      	movs	r2, #5
 80035fe:	4926      	ldr	r1, [pc, #152]	; (8003698 <mg_http_parse+0x28c>)
 8003600:	4618      	mov	r0, r3
 8003602:	f003 fd59 	bl	80070b8 <mg_ncasecmp>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	613b      	str	r3, [r7, #16]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d11a      	bne.n	8003656 <mg_http_parse+0x24a>
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d117      	bne.n	8003656 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	491c      	ldr	r1, [pc, #112]	; (800369c <mg_http_parse+0x290>)
 800362a:	4618      	mov	r0, r3
 800362c:	f003 fd96 	bl	800715c <mg_vcasecmp>
 8003630:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00f      	beq.n	8003656 <mg_http_parse+0x24a>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4919      	ldr	r1, [pc, #100]	; (80036a0 <mg_http_parse+0x294>)
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fd8e 	bl	800715c <mg_vcasecmp>
 8003640:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <mg_http_parse+0x24a>
    hm->body.len = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d113      	bne.n	800368a <mg_http_parse+0x27e>
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <mg_http_parse+0x27e>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3308      	adds	r3, #8
 800366c:	490d      	ldr	r1, [pc, #52]	; (80036a4 <mg_http_parse+0x298>)
 800366e:	4618      	mov	r0, r3
 8003670:	f003 fd74 	bl	800715c <mg_vcasecmp>
 8003674:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <mg_http_parse+0x27e>
    hm->body.len = 0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	080127c8 	.word	0x080127c8
 8003698:	080127d8 	.word	0x080127d8
 800369c:	080127e0 	.word	0x080127e0
 80036a0:	080127e4 	.word	0x080127e4
 80036a4:	080127ec 	.word	0x080127ec

080036a8 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b64      	subs	r3, #100	; 0x64
 80036b4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80036b8:	4293      	cmp	r3, r2
 80036ba:	f200 8469 	bhi.w	8003f90 <mg_http_status_code_str+0x8e8>
 80036be:	a101      	add	r1, pc, #4	; (adr r1, 80036c4 <mg_http_status_code_str+0x1c>)
 80036c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036c4:	08003e95 	.word	0x08003e95
 80036c8:	08003e99 	.word	0x08003e99
 80036cc:	08003e9d 	.word	0x08003e9d
 80036d0:	08003f91 	.word	0x08003f91
 80036d4:	08003f91 	.word	0x08003f91
 80036d8:	08003f91 	.word	0x08003f91
 80036dc:	08003f91 	.word	0x08003f91
 80036e0:	08003f91 	.word	0x08003f91
 80036e4:	08003f91 	.word	0x08003f91
 80036e8:	08003f91 	.word	0x08003f91
 80036ec:	08003f91 	.word	0x08003f91
 80036f0:	08003f91 	.word	0x08003f91
 80036f4:	08003f91 	.word	0x08003f91
 80036f8:	08003f91 	.word	0x08003f91
 80036fc:	08003f91 	.word	0x08003f91
 8003700:	08003f91 	.word	0x08003f91
 8003704:	08003f91 	.word	0x08003f91
 8003708:	08003f91 	.word	0x08003f91
 800370c:	08003f91 	.word	0x08003f91
 8003710:	08003f91 	.word	0x08003f91
 8003714:	08003f91 	.word	0x08003f91
 8003718:	08003f91 	.word	0x08003f91
 800371c:	08003f91 	.word	0x08003f91
 8003720:	08003f91 	.word	0x08003f91
 8003724:	08003f91 	.word	0x08003f91
 8003728:	08003f91 	.word	0x08003f91
 800372c:	08003f91 	.word	0x08003f91
 8003730:	08003f91 	.word	0x08003f91
 8003734:	08003f91 	.word	0x08003f91
 8003738:	08003f91 	.word	0x08003f91
 800373c:	08003f91 	.word	0x08003f91
 8003740:	08003f91 	.word	0x08003f91
 8003744:	08003f91 	.word	0x08003f91
 8003748:	08003f91 	.word	0x08003f91
 800374c:	08003f91 	.word	0x08003f91
 8003750:	08003f91 	.word	0x08003f91
 8003754:	08003f91 	.word	0x08003f91
 8003758:	08003f91 	.word	0x08003f91
 800375c:	08003f91 	.word	0x08003f91
 8003760:	08003f91 	.word	0x08003f91
 8003764:	08003f91 	.word	0x08003f91
 8003768:	08003f91 	.word	0x08003f91
 800376c:	08003f91 	.word	0x08003f91
 8003770:	08003f91 	.word	0x08003f91
 8003774:	08003f91 	.word	0x08003f91
 8003778:	08003f91 	.word	0x08003f91
 800377c:	08003f91 	.word	0x08003f91
 8003780:	08003f91 	.word	0x08003f91
 8003784:	08003f91 	.word	0x08003f91
 8003788:	08003f91 	.word	0x08003f91
 800378c:	08003f91 	.word	0x08003f91
 8003790:	08003f91 	.word	0x08003f91
 8003794:	08003f91 	.word	0x08003f91
 8003798:	08003f91 	.word	0x08003f91
 800379c:	08003f91 	.word	0x08003f91
 80037a0:	08003f91 	.word	0x08003f91
 80037a4:	08003f91 	.word	0x08003f91
 80037a8:	08003f91 	.word	0x08003f91
 80037ac:	08003f91 	.word	0x08003f91
 80037b0:	08003f91 	.word	0x08003f91
 80037b4:	08003f91 	.word	0x08003f91
 80037b8:	08003f91 	.word	0x08003f91
 80037bc:	08003f91 	.word	0x08003f91
 80037c0:	08003f91 	.word	0x08003f91
 80037c4:	08003f91 	.word	0x08003f91
 80037c8:	08003f91 	.word	0x08003f91
 80037cc:	08003f91 	.word	0x08003f91
 80037d0:	08003f91 	.word	0x08003f91
 80037d4:	08003f91 	.word	0x08003f91
 80037d8:	08003f91 	.word	0x08003f91
 80037dc:	08003f91 	.word	0x08003f91
 80037e0:	08003f91 	.word	0x08003f91
 80037e4:	08003f91 	.word	0x08003f91
 80037e8:	08003f91 	.word	0x08003f91
 80037ec:	08003f91 	.word	0x08003f91
 80037f0:	08003f91 	.word	0x08003f91
 80037f4:	08003f91 	.word	0x08003f91
 80037f8:	08003f91 	.word	0x08003f91
 80037fc:	08003f91 	.word	0x08003f91
 8003800:	08003f91 	.word	0x08003f91
 8003804:	08003f91 	.word	0x08003f91
 8003808:	08003f91 	.word	0x08003f91
 800380c:	08003f91 	.word	0x08003f91
 8003810:	08003f91 	.word	0x08003f91
 8003814:	08003f91 	.word	0x08003f91
 8003818:	08003f91 	.word	0x08003f91
 800381c:	08003f91 	.word	0x08003f91
 8003820:	08003f91 	.word	0x08003f91
 8003824:	08003f91 	.word	0x08003f91
 8003828:	08003f91 	.word	0x08003f91
 800382c:	08003f91 	.word	0x08003f91
 8003830:	08003f91 	.word	0x08003f91
 8003834:	08003f91 	.word	0x08003f91
 8003838:	08003f91 	.word	0x08003f91
 800383c:	08003f91 	.word	0x08003f91
 8003840:	08003f91 	.word	0x08003f91
 8003844:	08003f91 	.word	0x08003f91
 8003848:	08003f91 	.word	0x08003f91
 800384c:	08003f91 	.word	0x08003f91
 8003850:	08003f91 	.word	0x08003f91
 8003854:	08003ea1 	.word	0x08003ea1
 8003858:	08003ea5 	.word	0x08003ea5
 800385c:	08003ea9 	.word	0x08003ea9
 8003860:	08003ead 	.word	0x08003ead
 8003864:	08003eb1 	.word	0x08003eb1
 8003868:	08003eb5 	.word	0x08003eb5
 800386c:	08003eb9 	.word	0x08003eb9
 8003870:	08003ebd 	.word	0x08003ebd
 8003874:	08003ec1 	.word	0x08003ec1
 8003878:	08003f91 	.word	0x08003f91
 800387c:	08003f91 	.word	0x08003f91
 8003880:	08003f91 	.word	0x08003f91
 8003884:	08003f91 	.word	0x08003f91
 8003888:	08003f91 	.word	0x08003f91
 800388c:	08003f91 	.word	0x08003f91
 8003890:	08003f91 	.word	0x08003f91
 8003894:	08003f91 	.word	0x08003f91
 8003898:	08003f91 	.word	0x08003f91
 800389c:	08003f91 	.word	0x08003f91
 80038a0:	08003f91 	.word	0x08003f91
 80038a4:	08003f91 	.word	0x08003f91
 80038a8:	08003f91 	.word	0x08003f91
 80038ac:	08003f91 	.word	0x08003f91
 80038b0:	08003f91 	.word	0x08003f91
 80038b4:	08003f91 	.word	0x08003f91
 80038b8:	08003f91 	.word	0x08003f91
 80038bc:	08003ec5 	.word	0x08003ec5
 80038c0:	08003f91 	.word	0x08003f91
 80038c4:	08003f91 	.word	0x08003f91
 80038c8:	08003f91 	.word	0x08003f91
 80038cc:	08003f91 	.word	0x08003f91
 80038d0:	08003f91 	.word	0x08003f91
 80038d4:	08003f91 	.word	0x08003f91
 80038d8:	08003f91 	.word	0x08003f91
 80038dc:	08003f91 	.word	0x08003f91
 80038e0:	08003f91 	.word	0x08003f91
 80038e4:	08003f91 	.word	0x08003f91
 80038e8:	08003f91 	.word	0x08003f91
 80038ec:	08003f91 	.word	0x08003f91
 80038f0:	08003f91 	.word	0x08003f91
 80038f4:	08003f91 	.word	0x08003f91
 80038f8:	08003f91 	.word	0x08003f91
 80038fc:	08003f91 	.word	0x08003f91
 8003900:	08003f91 	.word	0x08003f91
 8003904:	08003f91 	.word	0x08003f91
 8003908:	08003f91 	.word	0x08003f91
 800390c:	08003f91 	.word	0x08003f91
 8003910:	08003f91 	.word	0x08003f91
 8003914:	08003f91 	.word	0x08003f91
 8003918:	08003f91 	.word	0x08003f91
 800391c:	08003f91 	.word	0x08003f91
 8003920:	08003f91 	.word	0x08003f91
 8003924:	08003f91 	.word	0x08003f91
 8003928:	08003f91 	.word	0x08003f91
 800392c:	08003f91 	.word	0x08003f91
 8003930:	08003f91 	.word	0x08003f91
 8003934:	08003f91 	.word	0x08003f91
 8003938:	08003f91 	.word	0x08003f91
 800393c:	08003f91 	.word	0x08003f91
 8003940:	08003f91 	.word	0x08003f91
 8003944:	08003f91 	.word	0x08003f91
 8003948:	08003f91 	.word	0x08003f91
 800394c:	08003f91 	.word	0x08003f91
 8003950:	08003f91 	.word	0x08003f91
 8003954:	08003f91 	.word	0x08003f91
 8003958:	08003f91 	.word	0x08003f91
 800395c:	08003f91 	.word	0x08003f91
 8003960:	08003f91 	.word	0x08003f91
 8003964:	08003f91 	.word	0x08003f91
 8003968:	08003f91 	.word	0x08003f91
 800396c:	08003f91 	.word	0x08003f91
 8003970:	08003f91 	.word	0x08003f91
 8003974:	08003f91 	.word	0x08003f91
 8003978:	08003f91 	.word	0x08003f91
 800397c:	08003f91 	.word	0x08003f91
 8003980:	08003f91 	.word	0x08003f91
 8003984:	08003f91 	.word	0x08003f91
 8003988:	08003f91 	.word	0x08003f91
 800398c:	08003f91 	.word	0x08003f91
 8003990:	08003f91 	.word	0x08003f91
 8003994:	08003f91 	.word	0x08003f91
 8003998:	08003f91 	.word	0x08003f91
 800399c:	08003f91 	.word	0x08003f91
 80039a0:	08003f91 	.word	0x08003f91
 80039a4:	08003f91 	.word	0x08003f91
 80039a8:	08003f91 	.word	0x08003f91
 80039ac:	08003f91 	.word	0x08003f91
 80039b0:	08003f91 	.word	0x08003f91
 80039b4:	08003f91 	.word	0x08003f91
 80039b8:	08003f91 	.word	0x08003f91
 80039bc:	08003f91 	.word	0x08003f91
 80039c0:	08003f91 	.word	0x08003f91
 80039c4:	08003f91 	.word	0x08003f91
 80039c8:	08003f91 	.word	0x08003f91
 80039cc:	08003f91 	.word	0x08003f91
 80039d0:	08003f91 	.word	0x08003f91
 80039d4:	08003f91 	.word	0x08003f91
 80039d8:	08003f91 	.word	0x08003f91
 80039dc:	08003f91 	.word	0x08003f91
 80039e0:	08003f91 	.word	0x08003f91
 80039e4:	08003ec9 	.word	0x08003ec9
 80039e8:	08003ecd 	.word	0x08003ecd
 80039ec:	08003ed1 	.word	0x08003ed1
 80039f0:	08003ed5 	.word	0x08003ed5
 80039f4:	08003ed9 	.word	0x08003ed9
 80039f8:	08003edd 	.word	0x08003edd
 80039fc:	08003f91 	.word	0x08003f91
 8003a00:	08003ee1 	.word	0x08003ee1
 8003a04:	08003ee5 	.word	0x08003ee5
 8003a08:	08003f91 	.word	0x08003f91
 8003a0c:	08003f91 	.word	0x08003f91
 8003a10:	08003f91 	.word	0x08003f91
 8003a14:	08003f91 	.word	0x08003f91
 8003a18:	08003f91 	.word	0x08003f91
 8003a1c:	08003f91 	.word	0x08003f91
 8003a20:	08003f91 	.word	0x08003f91
 8003a24:	08003f91 	.word	0x08003f91
 8003a28:	08003f91 	.word	0x08003f91
 8003a2c:	08003f91 	.word	0x08003f91
 8003a30:	08003f91 	.word	0x08003f91
 8003a34:	08003f91 	.word	0x08003f91
 8003a38:	08003f91 	.word	0x08003f91
 8003a3c:	08003f91 	.word	0x08003f91
 8003a40:	08003f91 	.word	0x08003f91
 8003a44:	08003f91 	.word	0x08003f91
 8003a48:	08003f91 	.word	0x08003f91
 8003a4c:	08003f91 	.word	0x08003f91
 8003a50:	08003f91 	.word	0x08003f91
 8003a54:	08003f91 	.word	0x08003f91
 8003a58:	08003f91 	.word	0x08003f91
 8003a5c:	08003f91 	.word	0x08003f91
 8003a60:	08003f91 	.word	0x08003f91
 8003a64:	08003f91 	.word	0x08003f91
 8003a68:	08003f91 	.word	0x08003f91
 8003a6c:	08003f91 	.word	0x08003f91
 8003a70:	08003f91 	.word	0x08003f91
 8003a74:	08003f91 	.word	0x08003f91
 8003a78:	08003f91 	.word	0x08003f91
 8003a7c:	08003f91 	.word	0x08003f91
 8003a80:	08003f91 	.word	0x08003f91
 8003a84:	08003f91 	.word	0x08003f91
 8003a88:	08003f91 	.word	0x08003f91
 8003a8c:	08003f91 	.word	0x08003f91
 8003a90:	08003f91 	.word	0x08003f91
 8003a94:	08003f91 	.word	0x08003f91
 8003a98:	08003f91 	.word	0x08003f91
 8003a9c:	08003f91 	.word	0x08003f91
 8003aa0:	08003f91 	.word	0x08003f91
 8003aa4:	08003f91 	.word	0x08003f91
 8003aa8:	08003f91 	.word	0x08003f91
 8003aac:	08003f91 	.word	0x08003f91
 8003ab0:	08003f91 	.word	0x08003f91
 8003ab4:	08003f91 	.word	0x08003f91
 8003ab8:	08003f91 	.word	0x08003f91
 8003abc:	08003f91 	.word	0x08003f91
 8003ac0:	08003f91 	.word	0x08003f91
 8003ac4:	08003f91 	.word	0x08003f91
 8003ac8:	08003f91 	.word	0x08003f91
 8003acc:	08003f91 	.word	0x08003f91
 8003ad0:	08003f91 	.word	0x08003f91
 8003ad4:	08003f91 	.word	0x08003f91
 8003ad8:	08003f91 	.word	0x08003f91
 8003adc:	08003f91 	.word	0x08003f91
 8003ae0:	08003f91 	.word	0x08003f91
 8003ae4:	08003f91 	.word	0x08003f91
 8003ae8:	08003f91 	.word	0x08003f91
 8003aec:	08003f91 	.word	0x08003f91
 8003af0:	08003f91 	.word	0x08003f91
 8003af4:	08003f91 	.word	0x08003f91
 8003af8:	08003f91 	.word	0x08003f91
 8003afc:	08003f91 	.word	0x08003f91
 8003b00:	08003f91 	.word	0x08003f91
 8003b04:	08003f91 	.word	0x08003f91
 8003b08:	08003f91 	.word	0x08003f91
 8003b0c:	08003f91 	.word	0x08003f91
 8003b10:	08003f91 	.word	0x08003f91
 8003b14:	08003f91 	.word	0x08003f91
 8003b18:	08003f91 	.word	0x08003f91
 8003b1c:	08003f91 	.word	0x08003f91
 8003b20:	08003f91 	.word	0x08003f91
 8003b24:	08003f91 	.word	0x08003f91
 8003b28:	08003f91 	.word	0x08003f91
 8003b2c:	08003f91 	.word	0x08003f91
 8003b30:	08003f91 	.word	0x08003f91
 8003b34:	08003f91 	.word	0x08003f91
 8003b38:	08003f91 	.word	0x08003f91
 8003b3c:	08003f91 	.word	0x08003f91
 8003b40:	08003f91 	.word	0x08003f91
 8003b44:	08003f91 	.word	0x08003f91
 8003b48:	08003f91 	.word	0x08003f91
 8003b4c:	08003f91 	.word	0x08003f91
 8003b50:	08003f91 	.word	0x08003f91
 8003b54:	08003f91 	.word	0x08003f91
 8003b58:	08003f91 	.word	0x08003f91
 8003b5c:	08003f91 	.word	0x08003f91
 8003b60:	08003f91 	.word	0x08003f91
 8003b64:	08003f91 	.word	0x08003f91
 8003b68:	08003f91 	.word	0x08003f91
 8003b6c:	08003f91 	.word	0x08003f91
 8003b70:	08003f91 	.word	0x08003f91
 8003b74:	08003ee9 	.word	0x08003ee9
 8003b78:	08003eed 	.word	0x08003eed
 8003b7c:	08003ef1 	.word	0x08003ef1
 8003b80:	08003ef5 	.word	0x08003ef5
 8003b84:	08003ef9 	.word	0x08003ef9
 8003b88:	08003efd 	.word	0x08003efd
 8003b8c:	08003f01 	.word	0x08003f01
 8003b90:	08003f05 	.word	0x08003f05
 8003b94:	08003f09 	.word	0x08003f09
 8003b98:	08003f0d 	.word	0x08003f0d
 8003b9c:	08003f11 	.word	0x08003f11
 8003ba0:	08003f15 	.word	0x08003f15
 8003ba4:	08003f19 	.word	0x08003f19
 8003ba8:	08003f1d 	.word	0x08003f1d
 8003bac:	08003f21 	.word	0x08003f21
 8003bb0:	08003f25 	.word	0x08003f25
 8003bb4:	08003f29 	.word	0x08003f29
 8003bb8:	08003f2d 	.word	0x08003f2d
 8003bbc:	08003f31 	.word	0x08003f31
 8003bc0:	08003f91 	.word	0x08003f91
 8003bc4:	08003f91 	.word	0x08003f91
 8003bc8:	08003f35 	.word	0x08003f35
 8003bcc:	08003f39 	.word	0x08003f39
 8003bd0:	08003f3d 	.word	0x08003f3d
 8003bd4:	08003f41 	.word	0x08003f41
 8003bd8:	08003f91 	.word	0x08003f91
 8003bdc:	08003f45 	.word	0x08003f45
 8003be0:	08003f91 	.word	0x08003f91
 8003be4:	08003f49 	.word	0x08003f49
 8003be8:	08003f4d 	.word	0x08003f4d
 8003bec:	08003f91 	.word	0x08003f91
 8003bf0:	08003f51 	.word	0x08003f51
 8003bf4:	08003f91 	.word	0x08003f91
 8003bf8:	08003f91 	.word	0x08003f91
 8003bfc:	08003f91 	.word	0x08003f91
 8003c00:	08003f91 	.word	0x08003f91
 8003c04:	08003f91 	.word	0x08003f91
 8003c08:	08003f91 	.word	0x08003f91
 8003c0c:	08003f91 	.word	0x08003f91
 8003c10:	08003f91 	.word	0x08003f91
 8003c14:	08003f91 	.word	0x08003f91
 8003c18:	08003f91 	.word	0x08003f91
 8003c1c:	08003f91 	.word	0x08003f91
 8003c20:	08003f91 	.word	0x08003f91
 8003c24:	08003f55 	.word	0x08003f55
 8003c28:	08003f91 	.word	0x08003f91
 8003c2c:	08003f91 	.word	0x08003f91
 8003c30:	08003f91 	.word	0x08003f91
 8003c34:	08003f91 	.word	0x08003f91
 8003c38:	08003f91 	.word	0x08003f91
 8003c3c:	08003f91 	.word	0x08003f91
 8003c40:	08003f59 	.word	0x08003f59
 8003c44:	08003f91 	.word	0x08003f91
 8003c48:	08003f91 	.word	0x08003f91
 8003c4c:	08003f91 	.word	0x08003f91
 8003c50:	08003f91 	.word	0x08003f91
 8003c54:	08003f91 	.word	0x08003f91
 8003c58:	08003f91 	.word	0x08003f91
 8003c5c:	08003f91 	.word	0x08003f91
 8003c60:	08003f91 	.word	0x08003f91
 8003c64:	08003f91 	.word	0x08003f91
 8003c68:	08003f91 	.word	0x08003f91
 8003c6c:	08003f91 	.word	0x08003f91
 8003c70:	08003f91 	.word	0x08003f91
 8003c74:	08003f91 	.word	0x08003f91
 8003c78:	08003f91 	.word	0x08003f91
 8003c7c:	08003f91 	.word	0x08003f91
 8003c80:	08003f91 	.word	0x08003f91
 8003c84:	08003f91 	.word	0x08003f91
 8003c88:	08003f91 	.word	0x08003f91
 8003c8c:	08003f91 	.word	0x08003f91
 8003c90:	08003f91 	.word	0x08003f91
 8003c94:	08003f91 	.word	0x08003f91
 8003c98:	08003f91 	.word	0x08003f91
 8003c9c:	08003f91 	.word	0x08003f91
 8003ca0:	08003f91 	.word	0x08003f91
 8003ca4:	08003f91 	.word	0x08003f91
 8003ca8:	08003f91 	.word	0x08003f91
 8003cac:	08003f91 	.word	0x08003f91
 8003cb0:	08003f91 	.word	0x08003f91
 8003cb4:	08003f91 	.word	0x08003f91
 8003cb8:	08003f91 	.word	0x08003f91
 8003cbc:	08003f91 	.word	0x08003f91
 8003cc0:	08003f91 	.word	0x08003f91
 8003cc4:	08003f91 	.word	0x08003f91
 8003cc8:	08003f91 	.word	0x08003f91
 8003ccc:	08003f91 	.word	0x08003f91
 8003cd0:	08003f91 	.word	0x08003f91
 8003cd4:	08003f91 	.word	0x08003f91
 8003cd8:	08003f91 	.word	0x08003f91
 8003cdc:	08003f91 	.word	0x08003f91
 8003ce0:	08003f91 	.word	0x08003f91
 8003ce4:	08003f91 	.word	0x08003f91
 8003ce8:	08003f91 	.word	0x08003f91
 8003cec:	08003f91 	.word	0x08003f91
 8003cf0:	08003f91 	.word	0x08003f91
 8003cf4:	08003f91 	.word	0x08003f91
 8003cf8:	08003f91 	.word	0x08003f91
 8003cfc:	08003f91 	.word	0x08003f91
 8003d00:	08003f5d 	.word	0x08003f5d
 8003d04:	08003f61 	.word	0x08003f61
 8003d08:	08003f65 	.word	0x08003f65
 8003d0c:	08003f69 	.word	0x08003f69
 8003d10:	08003f6d 	.word	0x08003f6d
 8003d14:	08003f71 	.word	0x08003f71
 8003d18:	08003f75 	.word	0x08003f75
 8003d1c:	08003f79 	.word	0x08003f79
 8003d20:	08003f7d 	.word	0x08003f7d
 8003d24:	08003f81 	.word	0x08003f81
 8003d28:	08003f91 	.word	0x08003f91
 8003d2c:	08003f85 	.word	0x08003f85
 8003d30:	08003f89 	.word	0x08003f89
 8003d34:	08003f91 	.word	0x08003f91
 8003d38:	08003f91 	.word	0x08003f91
 8003d3c:	08003f91 	.word	0x08003f91
 8003d40:	08003f91 	.word	0x08003f91
 8003d44:	08003f91 	.word	0x08003f91
 8003d48:	08003f91 	.word	0x08003f91
 8003d4c:	08003f91 	.word	0x08003f91
 8003d50:	08003f91 	.word	0x08003f91
 8003d54:	08003f91 	.word	0x08003f91
 8003d58:	08003f91 	.word	0x08003f91
 8003d5c:	08003f91 	.word	0x08003f91
 8003d60:	08003f91 	.word	0x08003f91
 8003d64:	08003f91 	.word	0x08003f91
 8003d68:	08003f91 	.word	0x08003f91
 8003d6c:	08003f91 	.word	0x08003f91
 8003d70:	08003f91 	.word	0x08003f91
 8003d74:	08003f91 	.word	0x08003f91
 8003d78:	08003f91 	.word	0x08003f91
 8003d7c:	08003f91 	.word	0x08003f91
 8003d80:	08003f91 	.word	0x08003f91
 8003d84:	08003f91 	.word	0x08003f91
 8003d88:	08003f91 	.word	0x08003f91
 8003d8c:	08003f91 	.word	0x08003f91
 8003d90:	08003f91 	.word	0x08003f91
 8003d94:	08003f91 	.word	0x08003f91
 8003d98:	08003f91 	.word	0x08003f91
 8003d9c:	08003f91 	.word	0x08003f91
 8003da0:	08003f91 	.word	0x08003f91
 8003da4:	08003f91 	.word	0x08003f91
 8003da8:	08003f91 	.word	0x08003f91
 8003dac:	08003f91 	.word	0x08003f91
 8003db0:	08003f91 	.word	0x08003f91
 8003db4:	08003f91 	.word	0x08003f91
 8003db8:	08003f91 	.word	0x08003f91
 8003dbc:	08003f91 	.word	0x08003f91
 8003dc0:	08003f91 	.word	0x08003f91
 8003dc4:	08003f91 	.word	0x08003f91
 8003dc8:	08003f91 	.word	0x08003f91
 8003dcc:	08003f91 	.word	0x08003f91
 8003dd0:	08003f91 	.word	0x08003f91
 8003dd4:	08003f91 	.word	0x08003f91
 8003dd8:	08003f91 	.word	0x08003f91
 8003ddc:	08003f91 	.word	0x08003f91
 8003de0:	08003f91 	.word	0x08003f91
 8003de4:	08003f91 	.word	0x08003f91
 8003de8:	08003f91 	.word	0x08003f91
 8003dec:	08003f91 	.word	0x08003f91
 8003df0:	08003f91 	.word	0x08003f91
 8003df4:	08003f91 	.word	0x08003f91
 8003df8:	08003f91 	.word	0x08003f91
 8003dfc:	08003f91 	.word	0x08003f91
 8003e00:	08003f91 	.word	0x08003f91
 8003e04:	08003f91 	.word	0x08003f91
 8003e08:	08003f91 	.word	0x08003f91
 8003e0c:	08003f91 	.word	0x08003f91
 8003e10:	08003f91 	.word	0x08003f91
 8003e14:	08003f91 	.word	0x08003f91
 8003e18:	08003f91 	.word	0x08003f91
 8003e1c:	08003f91 	.word	0x08003f91
 8003e20:	08003f91 	.word	0x08003f91
 8003e24:	08003f91 	.word	0x08003f91
 8003e28:	08003f91 	.word	0x08003f91
 8003e2c:	08003f91 	.word	0x08003f91
 8003e30:	08003f91 	.word	0x08003f91
 8003e34:	08003f91 	.word	0x08003f91
 8003e38:	08003f91 	.word	0x08003f91
 8003e3c:	08003f91 	.word	0x08003f91
 8003e40:	08003f91 	.word	0x08003f91
 8003e44:	08003f91 	.word	0x08003f91
 8003e48:	08003f91 	.word	0x08003f91
 8003e4c:	08003f91 	.word	0x08003f91
 8003e50:	08003f91 	.word	0x08003f91
 8003e54:	08003f91 	.word	0x08003f91
 8003e58:	08003f91 	.word	0x08003f91
 8003e5c:	08003f91 	.word	0x08003f91
 8003e60:	08003f91 	.word	0x08003f91
 8003e64:	08003f91 	.word	0x08003f91
 8003e68:	08003f91 	.word	0x08003f91
 8003e6c:	08003f91 	.word	0x08003f91
 8003e70:	08003f91 	.word	0x08003f91
 8003e74:	08003f91 	.word	0x08003f91
 8003e78:	08003f91 	.word	0x08003f91
 8003e7c:	08003f91 	.word	0x08003f91
 8003e80:	08003f91 	.word	0x08003f91
 8003e84:	08003f91 	.word	0x08003f91
 8003e88:	08003f91 	.word	0x08003f91
 8003e8c:	08003f91 	.word	0x08003f91
 8003e90:	08003f8d 	.word	0x08003f8d
    case 100: return "Continue";
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <mg_http_status_code_str+0x8f8>)
 8003e96:	e07c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8003e98:	4b42      	ldr	r3, [pc, #264]	; (8003fa4 <mg_http_status_code_str+0x8fc>)
 8003e9a:	e07a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8003e9c:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <mg_http_status_code_str+0x900>)
 8003e9e:	e078      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8003ea0:	4b42      	ldr	r3, [pc, #264]	; (8003fac <mg_http_status_code_str+0x904>)
 8003ea2:	e076      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8003ea4:	4b42      	ldr	r3, [pc, #264]	; (8003fb0 <mg_http_status_code_str+0x908>)
 8003ea6:	e074      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8003ea8:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <mg_http_status_code_str+0x90c>)
 8003eaa:	e072      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <mg_http_status_code_str+0x910>)
 8003eae:	e070      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <mg_http_status_code_str+0x914>)
 8003eb2:	e06e      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8003eb4:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <mg_http_status_code_str+0x918>)
 8003eb6:	e06c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <mg_http_status_code_str+0x91c>)
 8003eba:	e06a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8003ebc:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <mg_http_status_code_str+0x920>)
 8003ebe:	e068      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <mg_http_status_code_str+0x924>)
 8003ec2:	e066      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8003ec4:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <mg_http_status_code_str+0x928>)
 8003ec6:	e064      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <mg_http_status_code_str+0x92c>)
 8003eca:	e062      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8003ecc:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <mg_http_status_code_str+0x930>)
 8003ece:	e060      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <mg_http_status_code_str+0x934>)
 8003ed2:	e05e      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <mg_http_status_code_str+0x938>)
 8003ed6:	e05c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <mg_http_status_code_str+0x93c>)
 8003eda:	e05a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8003edc:	4b42      	ldr	r3, [pc, #264]	; (8003fe8 <mg_http_status_code_str+0x940>)
 8003ede:	e058      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8003ee0:	4b42      	ldr	r3, [pc, #264]	; (8003fec <mg_http_status_code_str+0x944>)
 8003ee2:	e056      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <mg_http_status_code_str+0x948>)
 8003ee6:	e054      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <mg_http_status_code_str+0x94c>)
 8003eea:	e052      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8003eec:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <mg_http_status_code_str+0x950>)
 8003eee:	e050      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8003ef0:	4b42      	ldr	r3, [pc, #264]	; (8003ffc <mg_http_status_code_str+0x954>)
 8003ef2:	e04e      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <mg_http_status_code_str+0x958>)
 8003ef6:	e04c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8003ef8:	4b42      	ldr	r3, [pc, #264]	; (8004004 <mg_http_status_code_str+0x95c>)
 8003efa:	e04a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8003efc:	4b42      	ldr	r3, [pc, #264]	; (8004008 <mg_http_status_code_str+0x960>)
 8003efe:	e048      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8003f00:	4b42      	ldr	r3, [pc, #264]	; (800400c <mg_http_status_code_str+0x964>)
 8003f02:	e046      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8003f04:	4b42      	ldr	r3, [pc, #264]	; (8004010 <mg_http_status_code_str+0x968>)
 8003f06:	e044      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8003f08:	4b42      	ldr	r3, [pc, #264]	; (8004014 <mg_http_status_code_str+0x96c>)
 8003f0a:	e042      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8003f0c:	4b42      	ldr	r3, [pc, #264]	; (8004018 <mg_http_status_code_str+0x970>)
 8003f0e:	e040      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8003f10:	4b42      	ldr	r3, [pc, #264]	; (800401c <mg_http_status_code_str+0x974>)
 8003f12:	e03e      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8003f14:	4b42      	ldr	r3, [pc, #264]	; (8004020 <mg_http_status_code_str+0x978>)
 8003f16:	e03c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <mg_http_status_code_str+0x97c>)
 8003f1a:	e03a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8003f1c:	4b42      	ldr	r3, [pc, #264]	; (8004028 <mg_http_status_code_str+0x980>)
 8003f1e:	e038      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8003f20:	4b42      	ldr	r3, [pc, #264]	; (800402c <mg_http_status_code_str+0x984>)
 8003f22:	e036      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <mg_http_status_code_str+0x988>)
 8003f26:	e034      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <mg_http_status_code_str+0x98c>)
 8003f2a:	e032      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8003f2c:	4b42      	ldr	r3, [pc, #264]	; (8004038 <mg_http_status_code_str+0x990>)
 8003f2e:	e030      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8003f30:	4b42      	ldr	r3, [pc, #264]	; (800403c <mg_http_status_code_str+0x994>)
 8003f32:	e02e      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8003f34:	4b42      	ldr	r3, [pc, #264]	; (8004040 <mg_http_status_code_str+0x998>)
 8003f36:	e02c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8003f38:	4b42      	ldr	r3, [pc, #264]	; (8004044 <mg_http_status_code_str+0x99c>)
 8003f3a:	e02a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8003f3c:	4b42      	ldr	r3, [pc, #264]	; (8004048 <mg_http_status_code_str+0x9a0>)
 8003f3e:	e028      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <mg_http_status_code_str+0x9a4>)
 8003f42:	e026      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <mg_http_status_code_str+0x9a8>)
 8003f46:	e024      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8003f48:	4b42      	ldr	r3, [pc, #264]	; (8004054 <mg_http_status_code_str+0x9ac>)
 8003f4a:	e022      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8003f4c:	4b42      	ldr	r3, [pc, #264]	; (8004058 <mg_http_status_code_str+0x9b0>)
 8003f4e:	e020      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <mg_http_status_code_str+0x9b4>)
 8003f52:	e01e      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8003f54:	4b42      	ldr	r3, [pc, #264]	; (8004060 <mg_http_status_code_str+0x9b8>)
 8003f56:	e01c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <mg_http_status_code_str+0x9bc>)
 8003f5a:	e01a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <mg_http_status_code_str+0x9c0>)
 8003f5e:	e018      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <mg_http_status_code_str+0x9c4>)
 8003f62:	e016      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8003f64:	4b42      	ldr	r3, [pc, #264]	; (8004070 <mg_http_status_code_str+0x9c8>)
 8003f66:	e014      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <mg_http_status_code_str+0x9cc>)
 8003f6a:	e012      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <mg_http_status_code_str+0x9d0>)
 8003f6e:	e010      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <mg_http_status_code_str+0x9d4>)
 8003f72:	e00e      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8003f74:	4b42      	ldr	r3, [pc, #264]	; (8004080 <mg_http_status_code_str+0x9d8>)
 8003f76:	e00c      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8003f78:	4b42      	ldr	r3, [pc, #264]	; (8004084 <mg_http_status_code_str+0x9dc>)
 8003f7a:	e00a      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8003f7c:	4b42      	ldr	r3, [pc, #264]	; (8004088 <mg_http_status_code_str+0x9e0>)
 8003f7e:	e008      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 8003f80:	4b42      	ldr	r3, [pc, #264]	; (800408c <mg_http_status_code_str+0x9e4>)
 8003f82:	e006      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <mg_http_status_code_str+0x9e8>)
 8003f86:	e004      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <mg_http_status_code_str+0x9ec>)
 8003f8a:	e002      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8003f8c:	4b42      	ldr	r3, [pc, #264]	; (8004098 <mg_http_status_code_str+0x9f0>)
 8003f8e:	e000      	b.n	8003f92 <mg_http_status_code_str+0x8ea>
    default: return "";
 8003f90:	4b42      	ldr	r3, [pc, #264]	; (800409c <mg_http_status_code_str+0x9f4>)
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	0801280c 	.word	0x0801280c
 8003fa4:	08012818 	.word	0x08012818
 8003fa8:	0801282c 	.word	0x0801282c
 8003fac:	08012838 	.word	0x08012838
 8003fb0:	0801283c 	.word	0x0801283c
 8003fb4:	08012844 	.word	0x08012844
 8003fb8:	08012850 	.word	0x08012850
 8003fbc:	08012870 	.word	0x08012870
 8003fc0:	0801287c 	.word	0x0801287c
 8003fc4:	0801288c 	.word	0x0801288c
 8003fc8:	0801289c 	.word	0x0801289c
 8003fcc:	080128ac 	.word	0x080128ac
 8003fd0:	080128c0 	.word	0x080128c0
 8003fd4:	080128c8 	.word	0x080128c8
 8003fd8:	080128dc 	.word	0x080128dc
 8003fdc:	080128f0 	.word	0x080128f0
 8003fe0:	080128f8 	.word	0x080128f8
 8003fe4:	08012904 	.word	0x08012904
 8003fe8:	08012914 	.word	0x08012914
 8003fec:	08012920 	.word	0x08012920
 8003ff0:	08012934 	.word	0x08012934
 8003ff4:	08012948 	.word	0x08012948
 8003ff8:	08012954 	.word	0x08012954
 8003ffc:	08012964 	.word	0x08012964
 8004000:	08012978 	.word	0x08012978
 8004004:	08012984 	.word	0x08012984
 8004008:	08012990 	.word	0x08012990
 800400c:	080129a4 	.word	0x080129a4
 8004010:	080129b4 	.word	0x080129b4
 8004014:	080129d4 	.word	0x080129d4
 8004018:	080129e4 	.word	0x080129e4
 800401c:	080129f0 	.word	0x080129f0
 8004020:	080129f8 	.word	0x080129f8
 8004024:	08012a08 	.word	0x08012a08
 8004028:	08012a1c 	.word	0x08012a1c
 800402c:	08012a30 	.word	0x08012a30
 8004030:	08012a48 	.word	0x08012a48
 8004034:	08012a60 	.word	0x08012a60
 8004038:	08012a80 	.word	0x08012a80
 800403c:	08012a94 	.word	0x08012a94
 8004040:	08012aa4 	.word	0x08012aa4
 8004044:	08012ab8 	.word	0x08012ab8
 8004048:	08012ad0 	.word	0x08012ad0
 800404c:	08012ad8 	.word	0x08012ad8
 8004050:	08012aec 	.word	0x08012aec
 8004054:	08012b00 	.word	0x08012b00
 8004058:	08012b18 	.word	0x08012b18
 800405c:	08012b2c 	.word	0x08012b2c
 8004060:	08012b4c 	.word	0x08012b4c
 8004064:	08012b70 	.word	0x08012b70
 8004068:	08012b90 	.word	0x08012b90
 800406c:	08012ba8 	.word	0x08012ba8
 8004070:	08012bc0 	.word	0x08012bc0
 8004074:	08012bd0 	.word	0x08012bd0
 8004078:	08012bdc 	.word	0x08012bdc
 800407c:	08012bf0 	.word	0x08012bf0
 8004080:	08012c00 	.word	0x08012c00
 8004084:	08012c1c 	.word	0x08012c1c
 8004088:	08012c34 	.word	0x08012c34
 800408c:	08012c4c 	.word	0x08012c4c
 8004090:	08012c5c 	.word	0x08012c5c
 8004094:	08012c6c 	.word	0x08012c6c
 8004098:	08012c8c 	.word	0x08012c8c
 800409c:	08012cac 	.word	0x08012cac

080040a0 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80040a0:	b408      	push	{r3}
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b08b      	sub	sp, #44	; 0x2c
 80040a6:	af02      	add	r7, sp, #8
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80040ae:	68b8      	ldr	r0, [r7, #8]
 80040b0:	f7ff fafa 	bl	80036a8 <mg_http_status_code_str>
 80040b4:	4602      	mov	r2, r0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <mg_http_reply+0x20>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	e000      	b.n	80040c2 <mg_http_reply+0x22>
 80040c0:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <mg_http_reply+0xa0>)
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	4613      	mov	r3, r2
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	491e      	ldr	r1, [pc, #120]	; (8004144 <mg_http_reply+0xa4>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f002 fa40 	bl	8006550 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d4:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 80040d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040da:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e8:	4817      	ldr	r0, [pc, #92]	; (8004148 <mg_http_reply+0xa8>)
 80040ea:	f7fe f89b 	bl	8002224 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d916      	bls.n	8004124 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3b0f      	subs	r3, #15
 80040fe:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004108:	4a10      	ldr	r2, [pc, #64]	; (800414c <mg_http_reply+0xac>)
 800410a:	210b      	movs	r1, #11
 800410c:	f002 fc3e 	bl	800698c <mg_snprintf>
 8004110:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	440b      	add	r3, r1
 800411c:	3b0f      	subs	r3, #15
 800411e:	4413      	add	r3, r2
 8004120:	2220      	movs	r2, #32
 8004122:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800412a:	f36f 13c7 	bfc	r3, #7, #1
 800412e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 8004132:	bf00      	nop
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800413c:	b001      	add	sp, #4
 800413e:	4770      	bx	lr
 8004140:	08012cac 	.word	0x08012cac
 8004144:	08012cb0 	.word	0x08012cb0
 8004148:	0800691d 	.word	0x0800691d
 800414c:	08012ce4 	.word	0x08012ce4

08004150 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fc2d 	bl	80029bc <mg_fs_close>
  c->pfn_data = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a06      	ldr	r2, [pc, #24]	; (8004184 <restore_http_cb+0x34>)
 800416c:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004174:	f36f 13c7 	bfc	r3, #7, #1
 8004178:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	080052a9 	.word	0x080052a9

08004188 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8004188:	b5b0      	push	{r4, r5, r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af04      	add	r7, sp, #16
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	461c      	mov	r4, r3
 800419a:	4615      	mov	r5, r2
 800419c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a4:	e9cd 2300 	strd	r2, r3, [sp]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <mg_http_etag+0x34>)
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f002 fbed 	bl	800698c <mg_snprintf>
  return buf;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}
 80041bc:	08012cec 	.word	0x08012cec

080041c0 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d002      	beq.n	80041da <static_cb+0x1a>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d146      	bne.n	8004268 <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 80041de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041e2:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3384      	adds	r3, #132	; 0x84
 80041e8:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d905      	bls.n	8004200 <static_cb+0x40>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3348      	adds	r3, #72	; 0x48
 80041f8:	69f9      	ldr	r1, [r7, #28]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f9c6 	bl	800558c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004208:	429a      	cmp	r2, r3
 800420a:	d234      	bcs.n	8004276 <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	429a      	cmp	r2, r3
 8004220:	d902      	bls.n	8004228 <static_cb+0x68>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	6810      	ldr	r0, [r2, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800423a:	4411      	add	r1, r2
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	4798      	blx	r3
 8004240:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	441a      	add	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	1ad2      	subs	r2, r2, r3
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10c      	bne.n	800427a <static_cb+0xba>
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ff75 	bl	8004150 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004266:	e008      	b.n	800427a <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b09      	cmp	r3, #9
 800426c:	d106      	bne.n	800427c <static_cb+0xbc>
    restore_http_cb(c);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff ff6e 	bl	8004150 <restore_http_cb>
 8004274:	e002      	b.n	800427c <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800427a:	bf00      	nop
  }
  (void) ev_data;
}
 800427c:	3728      	adds	r7, #40	; 0x28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b08d      	sub	sp, #52	; 0x34
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	1d38      	adds	r0, r7, #4
 800428e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004292:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f002 fec0 	bl	8007020 <mg_str_s>
  size_t i = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 80042a4:	e002      	b.n	80042ac <guess_content_type+0x28>
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	3301      	adds	r3, #1
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d208      	bcs.n	80042c6 <guess_content_type+0x42>
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	1acb      	subs	r3, r1, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b2e      	cmp	r3, #46	; 0x2e
 80042c4:	d1ef      	bne.n	80042a6 <guess_content_type+0x22>
  path.ptr += path.len - i;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	1acb      	subs	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	607b      	str	r3, [r7, #4]
  path.len = i;
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 80042d6:	e012      	b.n	80042fe <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 80042d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042dc:	cb0c      	ldmia	r3, {r2, r3}
 80042de:	1d39      	adds	r1, r7, #4
 80042e0:	c903      	ldmia	r1, {r0, r1}
 80042e2:	f002 ff5f 	bl	80071a4 <mg_strcmp>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d108      	bne.n	80042fe <guess_content_type+0x7a>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f107 031c 	add.w	r3, r7, #28
 80042f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80042fc:	e034      	b.n	8004368 <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 80042fe:	f107 021c 	add.w	r2, r7, #28
 8004302:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4618      	mov	r0, r3
 800430c:	f003 f9a9 	bl	8007662 <mg_commalist>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e0      	bne.n	80042d8 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 8004316:	2300      	movs	r3, #0
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431a:	e01a      	b.n	8004352 <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <guess_content_type+0xec>)
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	cb0c      	ldmia	r3, {r2, r3}
 8004326:	1d39      	adds	r1, r7, #4
 8004328:	c903      	ldmia	r1, {r0, r1}
 800432a:	f002 ff3b 	bl	80071a4 <mg_strcmp>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <guess_content_type+0xc8>
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	3301      	adds	r3, #1
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <guess_content_type+0xec>)
 800433c:	460c      	mov	r4, r1
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004346:	e884 0003 	stmia.w	r4, {r0, r1}
 800434a:	e00d      	b.n	8004368 <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	3302      	adds	r3, #2
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004352:	4a07      	ldr	r2, [pc, #28]	; (8004370 <guess_content_type+0xec>)
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1de      	bne.n	800431c <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4904      	ldr	r1, [pc, #16]	; (8004374 <guess_content_type+0xf0>)
 8004362:	4618      	mov	r0, r3
 8004364:	f002 fe5c 	bl	8007020 <mg_str_s>
}
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	3734      	adds	r7, #52	; 0x34
 800436c:	46bd      	mov	sp, r7
 800436e:	bd90      	pop	{r4, r7, pc}
 8004370:	20000050 	.word	0x20000050
 8004374:	08012dd4 	.word	0x08012dd4

08004378 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e076      	b.n	800447c <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	2206      	movs	r2, #6
 8004398:	493f      	ldr	r1, [pc, #252]	; (8004498 <getrange+0x120>)
 800439a:	4618      	mov	r0, r3
 800439c:	f00d f9eb 	bl	8011776 <memcmp>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d167      	bne.n	8004476 <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3306      	adds	r3, #6
 80043ae:	18d1      	adds	r1, r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	1f9a      	subs	r2, r3, #6
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	4618      	mov	r0, r3
 80043c0:	f002 fe4b 	bl	800705a <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <getrange+0x68>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b2f      	cmp	r3, #47	; 0x2f
 80043d0:	d906      	bls.n	80043e0 <getrange+0x68>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b39      	cmp	r3, #57	; 0x39
 80043d8:	d802      	bhi.n	80043e0 <getrange+0x68>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3301      	adds	r3, #1
 80043de:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	f107 0310 	add.w	r3, r7, #16
 80043e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043ea:	f7fe fd25 	bl	8002e38 <mg_to_size_t>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f083 0301 	eor.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <getrange+0x92>
 80043fa:	2300      	movs	r3, #0
 80043fc:	e047      	b.n	800448e <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3301      	adds	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	3b01      	subs	r3, #1
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <getrange+0xa8>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b2f      	cmp	r3, #47	; 0x2f
 8004416:	d903      	bls.n	8004420 <getrange+0xa8>
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b39      	cmp	r3, #57	; 0x39
 800441e:	d9ee      	bls.n	80043fe <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <getrange+0xc2>
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b2d      	cmp	r3, #45	; 0x2d
 800442c:	d105      	bne.n	800443a <getrange+0xc2>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3b01      	subs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	f107 0310 	add.w	r3, r7, #16
 8004440:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004444:	f7fe fcf8 	bl	8002e38 <mg_to_size_t>
 8004448:	4603      	mov	r3, r0
 800444a:	f083 0301 	eor.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <getrange+0xe0>
 8004454:	2300      	movs	r3, #0
 8004456:	e01a      	b.n	800448e <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d015      	beq.n	800448a <getrange+0x112>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b2f      	cmp	r3, #47	; 0x2f
 8004464:	d911      	bls.n	800448a <getrange+0x112>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b39      	cmp	r3, #57	; 0x39
 800446c:	d80d      	bhi.n	800448a <getrange+0x112>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3301      	adds	r3, #1
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	e00a      	b.n	800448c <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3301      	adds	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	1d9a      	adds	r2, r3, #6
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d382      	bcc.n	800438e <getrange+0x16>
 8004488:	e000      	b.n	800448c <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 800448a:	bf00      	nop
    }
  }
  return (int) numparsed;
 800448c:	69bb      	ldr	r3, [r7, #24]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	08012f58 	.word	0x08012f58

0800449c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	b0f7      	sub	sp, #476	; 0x1dc
 80044a2:	af0a      	add	r7, sp, #40	; 0x28
 80044a4:	f507 74d8 	add.w	r4, r7, #432	; 0x1b0
 80044a8:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
 80044ac:	6020      	str	r0, [r4, #0]
 80044ae:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 80044b2:	f5a0 70c8 	sub.w	r0, r0, #400	; 0x190
 80044b6:	6001      	str	r1, [r0, #0]
 80044b8:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 80044bc:	f5a1 71ca 	sub.w	r1, r1, #404	; 0x194
 80044c0:	600a      	str	r2, [r1, #0]
 80044c2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80044c6:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80044ca:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80044cc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80044d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <mg_http_serve_file+0x4e>
 80044dc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80044e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	e000      	b.n	80044ec <mg_http_serve_file+0x50>
 80044ea:	4b9d      	ldr	r3, [pc, #628]	; (8004760 <mg_http_serve_file+0x2c4>)
 80044ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  struct mg_fd *fd = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  size_t size = 0;
 80044f6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80044fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8004514:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004518:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800451c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	4610      	mov	r0, r2
 8004524:	f002 fd7c 	bl	8007020 <mg_str_s>
 8004528:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800452c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004538:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 800453c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8004540:	ca06      	ldmia	r2, {r1, r2}
 8004542:	f7ff fe9f 	bl	8004284 <guess_content_type>
  bool gzip = false;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

  if (path != NULL) {
 800454c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004550:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d051      	beq.n	80045fe <mg_http_serve_file+0x162>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800455a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800455e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004562:	4980      	ldr	r1, [pc, #512]	; (8004764 <mg_http_serve_file+0x2c8>)
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f7fe fe03 	bl	8003170 <mg_http_get_header>
 800456a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 800456e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004572:	2b00      	cmp	r3, #0
 8004574:	d033      	beq.n	80045de <mg_http_serve_file+0x142>
 8004576:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800457a:	497b      	ldr	r1, [pc, #492]	; (8004768 <mg_http_serve_file+0x2cc>)
 800457c:	4618      	mov	r0, r3
 800457e:	f002 fd4f 	bl	8007020 <mg_str_s>
 8004582:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8004586:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800458a:	cb0c      	ldmia	r3, {r2, r3}
 800458c:	c903      	ldmia	r1, {r0, r1}
 800458e:	f002 fe4b 	bl	8007228 <mg_strstr>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d022      	beq.n	80045de <mg_http_serve_file+0x142>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8004598:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800459c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045a0:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a71      	ldr	r2, [pc, #452]	; (800476c <mg_http_serve_file+0x2d0>)
 80045a8:	2180      	movs	r1, #128	; 0x80
 80045aa:	f002 f9ef 	bl	800698c <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80045ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045b2:	2201      	movs	r2, #1
 80045b4:	4619      	mov	r1, r3
 80045b6:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80045ba:	f7fe f9d7 	bl	800296c <mg_fs_open>
 80045be:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
      if (fd != NULL) gzip = true, path = tmp;
 80045c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <mg_http_serve_file+0x142>
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80045d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045d4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045d8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80045dc:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 80045de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <mg_http_serve_file+0x162>
 80045e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80045ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80045ee:	2201      	movs	r2, #1
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80045f6:	f7fe f9b9 	bl	800296c <mg_fs_open>
 80045fa:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 80045fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004602:	2b00      	cmp	r3, #0
 8004604:	d144      	bne.n	8004690 <mg_http_serve_file+0x1f4>
 8004606:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800460a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03c      	beq.n	8004690 <mg_http_serve_file+0x1f4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8004616:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800461a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2201      	movs	r2, #1
 8004624:	4619      	mov	r1, r3
 8004626:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800462a:	f7fe f99f 	bl	800296c <mg_fs_open>
 800462e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8004632:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004636:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800463a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	4610      	mov	r0, r2
 8004642:	f002 fced 	bl	8007020 <mg_str_s>
 8004646:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800464a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004656:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 800465a:	f107 0010 	add.w	r0, r7, #16
 800465e:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8004662:	ca06      	ldmia	r2, {r1, r2}
 8004664:	f7ff fe0e 	bl	8004284 <guess_content_type>
 8004668:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800466c:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8004670:	4623      	mov	r3, r4
 8004672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004676:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 800467a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800467e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004682:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8004686:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	6912      	ldr	r2, [r2, #16]
 800468e:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8004690:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <mg_http_serve_file+0x21c>
 8004698:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800469c:	681c      	ldr	r4, [r3, #0]
 800469e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80046a2:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80046a6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	47a0      	blx	r4
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d114      	bne.n	80046e2 <mg_http_serve_file+0x246>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 80046b8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046c8:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <mg_http_serve_file+0x2d4>)
 80046ce:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80046d2:	6800      	ldr	r0, [r0, #0]
 80046d4:	f7ff fce4 	bl	80040a0 <mg_http_reply>
    mg_fs_close(fd);
 80046d8:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80046dc:	f7fe f96e 	bl	80029bc <mg_fs_close>
 80046e0:	e193      	b.n	8004a0a <mg_http_serve_file+0x56e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80046e2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80046e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80046f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046f4:	e9cd 2300 	strd	r2, r3, [sp]
 80046f8:	460a      	mov	r2, r1
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	f7ff fd44 	bl	8004188 <mg_http_etag>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d03a      	beq.n	800477c <mg_http_serve_file+0x2e0>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004706:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800470a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800470e:	4919      	ldr	r1, [pc, #100]	; (8004774 <mg_http_serve_file+0x2d8>)
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f7fe fd2d 	bl	8003170 <mg_http_get_header>
 8004716:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800471a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02c      	beq.n	800477c <mg_http_serve_file+0x2e0>
             mg_vcasecmp(inm, etag) == 0) {
 8004722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004726:	4619      	mov	r1, r3
 8004728:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 800472c:	f002 fd16 	bl	800715c <mg_vcasecmp>
 8004730:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004732:	2b00      	cmp	r3, #0
 8004734:	d122      	bne.n	800477c <mg_http_serve_file+0x2e0>
    mg_fs_close(fd);
 8004736:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800473a:	f7fe f93f 	bl	80029bc <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800473e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004742:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800474e:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <mg_http_serve_file+0x2dc>)
 8004754:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	f7ff fca1 	bl	80040a0 <mg_http_reply>
 800475e:	e154      	b.n	8004a0a <mg_http_serve_file+0x56e>
 8004760:	20000028 	.word	0x20000028
 8004764:	08012f60 	.word	0x08012f60
 8004768:	08012f70 	.word	0x08012f70
 800476c:	08012f78 	.word	0x08012f78
 8004770:	08012f80 	.word	0x08012f80
 8004774:	08012f8c 	.word	0x08012f8c
 8004778:	08012cac 	.word	0x08012cac
  } else {
    int n, status = 200;
 800477c:	23c8      	movs	r3, #200	; 0xc8
 800477e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8004782:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004786:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004792:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800479e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80047a8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047b0:	4999      	ldr	r1, [pc, #612]	; (8004a18 <mg_http_serve_file+0x57c>)
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	f7fe fcdc 	bl	8003170 <mg_http_get_header>
 80047b8:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    range[0] = '\0';
 80047bc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80047c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80047c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8095 	beq.w	80048fc <mg_http_serve_file+0x460>
 80047d2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80047d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80047da:	4619      	mov	r1, r3
 80047dc:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80047e0:	f7ff fdca 	bl	8004378 <getrange>
 80047e4:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 80047e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f340 8085 	ble.w	80048fc <mg_http_serve_file+0x460>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 80047f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d107      	bne.n	800480a <mg_http_serve_file+0x36e>
 80047fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004804:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004808:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800480a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800480e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004818:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d808      	bhi.n	8004834 <mg_http_serve_file+0x398>
 8004822:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004826:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004830:	429a      	cmp	r2, r3
 8004832:	d81a      	bhi.n	800486a <mg_http_serve_file+0x3ce>
        status = 416;
 8004834:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004838:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8004842:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2200      	movs	r2, #0
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	60fa      	str	r2, [r7, #12]
 8004852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004856:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800485a:	e9cd 1200 	strd	r1, r2, [sp]
 800485e:	4a6f      	ldr	r2, [pc, #444]	; (8004a1c <mg_http_serve_file+0x580>)
 8004860:	2164      	movs	r1, #100	; 0x64
 8004862:	4618      	mov	r0, r3
 8004864:	f002 f892 	bl	800698c <mg_snprintf>
 8004868:	e048      	b.n	80048fc <mg_http_serve_file+0x460>
                    (int64_t) size);
      } else {
        status = 206;
 800486a:	23ce      	movs	r3, #206	; 0xce
 800486c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
        cl = r2 - r1 + 1;
 8004870:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004874:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800487e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
        mg_snprintf(range, sizeof(range),
 800488c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004890:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	469a      	mov	sl, r3
 800489a:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800489c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80048aa:	4413      	add	r3, r2
 80048ac:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 80048ae:	2200      	movs	r2, #0
 80048b0:	461d      	mov	r5, r3
 80048b2:	4616      	mov	r6, r2
 80048b4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80048b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80048d0:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80048d4:	e9cd ab00 	strd	sl, fp, [sp]
 80048d8:	4a51      	ldr	r2, [pc, #324]	; (8004a20 <mg_http_serve_file+0x584>)
 80048da:	2164      	movs	r1, #100	; 0x64
 80048dc:	4618      	mov	r0, r3
 80048de:	f002 f855 	bl	800698c <mg_snprintf>
        fs->sk(fd->fd, r1);
 80048e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80048ec:	6810      	ldr	r0, [r2, #0]
 80048ee:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80048f2:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4611      	mov	r1, r2
 80048fa:	4798      	blx	r3
      }
    }
    mg_printf(c,
 80048fc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8004900:	f7fe fed2 	bl	80036a8 <mg_http_status_code_str>
 8004904:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 8004906:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800490a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800490e:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8004910:	461d      	mov	r5, r3
 8004912:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004916:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004920:	2100      	movs	r1, #0
 8004922:	4698      	mov	r8, r3
 8004924:	4689      	mov	r9, r1
 8004926:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <mg_http_serve_file+0x496>
 800492e:	493d      	ldr	r1, [pc, #244]	; (8004a24 <mg_http_serve_file+0x588>)
 8004930:	e000      	b.n	8004934 <mg_http_serve_file+0x498>
 8004932:	493d      	ldr	r1, [pc, #244]	; (8004a28 <mg_http_serve_file+0x58c>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8004934:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004938:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <mg_http_serve_file+0x4b6>
 8004944:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004948:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	e000      	b.n	8004954 <mg_http_serve_file+0x4b8>
 8004952:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <mg_http_serve_file+0x58c>)
 8004954:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8004958:	f5a0 70c6 	sub.w	r0, r0, #396	; 0x18c
 800495c:	9308      	str	r3, [sp, #32]
 800495e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004962:	9307      	str	r3, [sp, #28]
 8004964:	9106      	str	r1, [sp, #24]
 8004966:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800496a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	9201      	str	r2, [sp, #4]
 8004972:	9500      	str	r5, [sp, #0]
 8004974:	4623      	mov	r3, r4
 8004976:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800497a:	492c      	ldr	r1, [pc, #176]	; (8004a2c <mg_http_serve_file+0x590>)
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f001 fde7 	bl	8006550 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8004982:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8004986:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4928      	ldr	r1, [pc, #160]	; (8004a30 <mg_http_serve_file+0x594>)
 800498e:	4618      	mov	r0, r3
 8004990:	f002 fbe4 	bl	800715c <mg_vcasecmp>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11a      	bne.n	80049d0 <mg_http_serve_file+0x534>
      c->is_draining = 1;
 800499a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800499e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80049a8:	f043 0310 	orr.w	r3, r3, #16
 80049ac:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 80049b0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80049be:	f36f 13c7 	bfc	r3, #7, #1
 80049c2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 80049c6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80049ca:	f7fd fff7 	bl	80029bc <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 80049ce:	e01c      	b.n	8004a0a <mg_http_serve_file+0x56e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80049d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3384      	adds	r3, #132	; 0x84
 80049dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      c->pfn = static_cb;
 80049e0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <mg_http_serve_file+0x598>)
 80049ec:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 80049ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80049f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80049fc:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 80049fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a02:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004a06:	601a      	str	r2, [r3, #0]
}
 8004a08:	e7ff      	b.n	8004a0a <mg_http_serve_file+0x56e>
 8004a0a:	bf00      	nop
 8004a0c:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a16:	bf00      	nop
 8004a18:	08012f9c 	.word	0x08012f9c
 8004a1c:	08012fa4 	.word	0x08012fa4
 8004a20:	08012fc4 	.word	0x08012fc4
 8004a24:	08012fec 	.word	0x08012fec
 8004a28:	08012cac 	.word	0x08012cac
 8004a2c:	08013008 	.word	0x08013008
 8004a30:	08013058 	.word	0x08013058
 8004a34:	080041c1 	.word	0x080041c1

08004a38 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8004a38:	b082      	sub	sp, #8
 8004a3a:	b590      	push	{r4, r7, lr}
 8004a3c:	b08b      	sub	sp, #44	; 0x2c
 8004a3e:	af02      	add	r7, sp, #8
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 8004a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	4a97      	ldr	r2, [pc, #604]	; (8004cb0 <uri_to_path2+0x278>)
 8004a54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a58:	f001 ff98 	bl	800698c <mg_snprintf>
 8004a5c:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d909      	bls.n	8004a7a <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8004a66:	4b93      	ldr	r3, [pc, #588]	; (8004cb4 <uri_to_path2+0x27c>)
 8004a68:	4a93      	ldr	r2, [pc, #588]	; (8004cb8 <uri_to_path2+0x280>)
 8004a6a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff fb16 	bl	80040a0 <mg_http_reply>
    return -1;
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
 8004a78:	e113      	b.n	8004ca2 <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a80:	4413      	add	r3, r2
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	3302      	adds	r3, #2
 8004a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d912      	bls.n	8004ab6 <uri_to_path2+0x7e>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a96:	4413      	add	r3, r2
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b2f      	cmp	r3, #47	; 0x2f
 8004a9c:	d00b      	beq.n	8004ab6 <uri_to_path2+0x7e>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	617a      	str	r2, [r7, #20]
 8004aa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa6:	4413      	add	r3, r2
 8004aa8:	222f      	movs	r2, #47	; 0x2f
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	18d0      	adds	r0, r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	1ad1      	subs	r1, r2, r3
 8004ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	18d4      	adds	r4, r2, r3
 8004acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	9200      	str	r2, [sp, #0]
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	f7fe fa64 	bl	8002fa4 <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae2:	4413      	add	r3, r2
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 8004ae8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004aea:	f002 fe37 	bl	800775c <mg_path_is_sane>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f083 0301 	eor.w	r3, r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 8004afa:	4b70      	ldr	r3, [pc, #448]	; (8004cbc <uri_to_path2+0x284>)
 8004afc:	4a6e      	ldr	r2, [pc, #440]	; (8004cb8 <uri_to_path2+0x280>)
 8004afe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff facc 	bl	80040a0 <mg_http_reply>
    return -1;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0c:	e0c9      	b.n	8004ca2 <uri_to_path2+0x26a>
  }
  n = strlen(path);
 8004b0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b10:	f7fb fbde 	bl	80002d0 <strlen>
 8004b14:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8004b16:	e007      	b.n	8004b28 <uri_to_path2+0xf0>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4413      	add	r3, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d906      	bls.n	8004b3c <uri_to_path2+0x104>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b34:	4413      	add	r3, r2
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b2f      	cmp	r3, #47	; 0x2f
 8004b3a:	d0ed      	beq.n	8004b18 <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	495f      	ldr	r1, [pc, #380]	; (8004cc0 <uri_to_path2+0x288>)
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 fae6 	bl	8007114 <mg_vcmp>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <uri_to_path2+0x126>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	2100      	movs	r1, #0
 8004b56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004b58:	4798      	blx	r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	e000      	b.n	8004b60 <uri_to_path2+0x128>
 8004b5e:	2304      	movs	r3, #4
 8004b60:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 8004b62:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <uri_to_path2+0x28c>)
 8004b64:	f240 72cc 	movw	r2, #1996	; 0x7cc
 8004b68:	4957      	ldr	r1, [pc, #348]	; (8004cc8 <uri_to_path2+0x290>)
 8004b6a:	2004      	movs	r0, #4
 8004b6c:	f001 fb90 	bl	8006290 <mg_log_prefix>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00f      	beq.n	8004b96 <uri_to_path2+0x15e>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	4602      	mov	r2, r0
 8004b90:	484e      	ldr	r0, [pc, #312]	; (8004ccc <uri_to_path2+0x294>)
 8004b92:	f001 fbd7 	bl	8006344 <mg_log>
              flags));
  if (flags == 0) {
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8081 	beq.w	8004ca0 <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <uri_to_path2+0x1b2>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01c      	beq.n	8004bea <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8004bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8004bc0:	d013      	beq.n	8004bea <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4940      	ldr	r1, [pc, #256]	; (8004cd0 <uri_to_path2+0x298>)
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f001 fcbe 	bl	8006550 <mg_printf>
    c->is_resp = 0;
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004bda:	f36f 13c7 	bfc	r3, #7, #1
 8004bde:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	e05a      	b.n	8004ca0 <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d055      	beq.n	8004ca0 <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	18d0      	adds	r0, r2, r3
 8004bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	4a34      	ldr	r2, [pc, #208]	; (8004cd4 <uri_to_path2+0x29c>)
 8004c02:	4619      	mov	r1, r3
 8004c04:	f001 fec2 	bl	800698c <mg_snprintf>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2100      	movs	r1, #0
 8004c16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c18:	4798      	blx	r3
 8004c1a:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d116      	bne.n	8004c50 <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	18d0      	adds	r0, r2, r3
 8004c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <uri_to_path2+0x2a0>)
 8004c30:	4619      	mov	r1, r3
 8004c32:	f001 feab 	bl	800698c <mg_snprintf>
 8004c36:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00c      	beq.n	8004c56 <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2100      	movs	r1, #0
 8004c44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c46:	4798      	blx	r3
 8004c48:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <uri_to_path2+0x21e>
      flags = tmp;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e024      	b.n	8004ca0 <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8004c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	18d0      	adds	r0, r2, r3
 8004c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <uri_to_path2+0x2a4>)
 8004c64:	4619      	mov	r1, r3
 8004c66:	f001 fe91 	bl	800698c <mg_snprintf>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2100      	movs	r1, #0
 8004c78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004c7a:	4798      	blx	r3
 8004c7c:	61b8      	str	r0, [r7, #24]
                    0 &&
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	330b      	adds	r3, #11
 8004c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8e:	4413      	add	r3, r2
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e004      	b.n	8004ca0 <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8004c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3724      	adds	r7, #36	; 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004cac:	b002      	add	sp, #8
 8004cae:	4770      	bx	lr
 8004cb0:	0801274c 	.word	0x0801274c
 8004cb4:	08013060 	.word	0x08013060
 8004cb8:	08012cac 	.word	0x08012cac
 8004cbc:	08013074 	.word	0x08013074
 8004cc0:	08013084 	.word	0x08013084
 8004cc4:	08013ef8 	.word	0x08013ef8
 8004cc8:	0801261c 	.word	0x0801261c
 8004ccc:	08013088 	.word	0x08013088
 8004cd0:	0801309c 	.word	0x0801309c
 8004cd4:	080130d8 	.word	0x080130d8
 8004cd8:	080130e4 	.word	0x080130e4
 8004cdc:	080130f4 	.word	0x080130f4

08004ce0 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b09a      	sub	sp, #104	; 0x68
 8004ce4:	af06      	add	r7, sp, #24
 8004ce6:	6178      	str	r0, [r7, #20]
 8004ce8:	6139      	str	r1, [r7, #16]
 8004cea:	60fa      	str	r2, [r7, #12]
 8004cec:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <uri_to_path+0x1c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	e000      	b.n	8004cfe <uri_to_path+0x1e>
 8004cfc:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <uri_to_path+0x10c>)
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 f988 	bl	8007020 <mg_str_s>
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
 8004d14:	2300      	movs	r3, #0
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 8004d20:	e040      	b.n	8004da4 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d113      	bne.n	8004d50 <uri_to_path+0x70>
 8004d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d2c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d34:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d38:	463b      	mov	r3, r7
 8004d3a:	492d      	ldr	r1, [pc, #180]	; (8004df0 <uri_to_path+0x110>)
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f002 f96f 	bl	8007020 <mg_str_s>
 8004d42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d46:	463a      	mov	r2, r7
 8004d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d4c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d200      	bcs.n	8004d5c <uri_to_path+0x7c>
 8004d5a:	e023      	b.n	8004da4 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6899      	ldr	r1, [r3, #8]
 8004d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d66:	4618      	mov	r0, r3
 8004d68:	f002 f977 	bl	800705a <mg_str_n>
 8004d6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d70:	cb0c      	ldmia	r3, {r2, r3}
 8004d72:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004d76:	c903      	ldmia	r1, {r0, r1}
 8004d78:	f002 fa14 	bl	80071a4 <mg_strcmp>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d000      	beq.n	8004d84 <uri_to_path+0xa4>
 8004d82:	e00f      	b.n	8004da4 <uri_to_path+0xc4>
    u = k, p = v;
 8004d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d88:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d90:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d94:	f107 031c 	add.w	r3, r7, #28
 8004d98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004d9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004da0:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 8004da4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004da8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004db0:	4618      	mov	r0, r3
 8004db2:	f002 fc56 	bl	8007662 <mg_commalist>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1b2      	bne.n	8004d22 <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8004dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	aa01      	add	r2, sp, #4
 8004dc6:	f107 031c 	add.w	r3, r7, #28
 8004dca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dce:	e882 0003 	stmia.w	r2, {r0, r1}
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dda:	6939      	ldr	r1, [r7, #16]
 8004ddc:	6978      	ldr	r0, [r7, #20]
 8004dde:	f7ff fe2b 	bl	8004a38 <uri_to_path2>
 8004de2:	4603      	mov	r3, r0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3750      	adds	r7, #80	; 0x50
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000028 	.word	0x20000028
 8004df0:	08013084 	.word	0x08013084

08004df4 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b0a9      	sub	sp, #164	; 0xa4
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8004e08:	f107 0310 	add.w	r3, r7, #16
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	9200      	str	r2, [sp, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ff63 	bl	8004ce0 <uri_to_path>
 8004e1a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  if (flags < 0) {
 8004e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	db3a      	blt.n	8004e9c <mg_http_serve_dir+0xa8>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8004e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 8004e32:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <mg_http_serve_dir+0xb0>)
 8004e34:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <mg_http_serve_dir+0xb4>)
 8004e36:	f240 1193 	movw	r1, #403	; 0x193
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff f930 	bl	80040a0 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8004e40:	e02c      	b.n	8004e9c <mg_http_serve_dir+0xa8>
  } else if (flags && sp != NULL &&
 8004e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d021      	beq.n	8004e8e <mg_http_serve_dir+0x9a>
 8004e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01d      	beq.n	8004e8e <mg_http_serve_dir+0x9a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 8004e52:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004e56:	f7fb fa3b 	bl	80002d0 <strlen>
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fb fa35 	bl	80002d0 <strlen>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f107 0210 	add.w	r2, r7, #16
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8004e72:	f002 faf5 	bl	8007460 <mg_globmatch>
 8004e76:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <mg_http_serve_dir+0x9a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f107 0210 	add.w	r2, r7, #16
 8004e84:	4619      	mov	r1, r3
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f002 f8b6 	bl	8006ff8 <mg_http_serve_ssi>
}
 8004e8c:	e006      	b.n	8004e9c <mg_http_serve_dir+0xa8>
    mg_http_serve_file(c, hm, path, opts);
 8004e8e:	f107 0210 	add.w	r2, r7, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff fb00 	bl	800449c <mg_http_serve_file>
}
 8004e9c:	bf00      	nop
 8004e9e:	379c      	adds	r7, #156	; 0x9c
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd90      	pop	{r4, r7, pc}
 8004ea4:	08013104 	.word	0x08013104
 8004ea8:	08012cac 	.word	0x08012cac

08004eac <mg_http_match_uri>:
    }
  }
  return mg_str_n(NULL, 0);
}

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 f8af 	bl	8007020 <mg_str_s>
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	f107 0308 	add.w	r3, r7, #8
 8004ecc:	cb0c      	ldmia	r3, {r2, r3}
 8004ece:	3108      	adds	r1, #8
 8004ed0:	c903      	ldmia	r1, {r0, r1}
 8004ed2:	f002 f9de 	bl	8007292 <mg_match>
 8004ed6:	4603      	mov	r3, r0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	f107 0408 	add.w	r4, r7, #8
 8004eea:	e884 0003 	stmia.w	r4, {r0, r1}
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 8004ef6:	e002      	b.n	8004efe <getchunk+0x1e>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3301      	adds	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d20b      	bcs.n	8004f1e <getchunk+0x3e>
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b0d      	cmp	r3, #13
 8004f10:	d005      	beq.n	8004f1e <getchunk+0x3e>
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b0a      	cmp	r3, #10
 8004f1c:	d1ec      	bne.n	8004ef8 <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6979      	ldr	r1, [r7, #20]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f002 fbd0 	bl	80076c8 <mg_unhexn>
 8004f28:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	440b      	add	r3, r1
 8004f32:	3304      	adds	r3, #4
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d201      	bcs.n	8004f3c <getchunk+0x5c>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e02a      	b.n	8004f92 <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b0d      	cmp	r3, #13
 8004f46:	d106      	bne.n	8004f56 <getchunk+0x76>
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	4413      	add	r3, r2
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b0a      	cmp	r3, #10
 8004f54:	d001      	beq.n	8004f5a <getchunk+0x7a>
 8004f56:	2300      	movs	r3, #0
 8004f58:	e01b      	b.n	8004f92 <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	440b      	add	r3, r1
 8004f62:	3302      	adds	r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b0d      	cmp	r3, #13
 8004f6a:	d108      	bne.n	8004f7e <getchunk+0x9e>
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	6979      	ldr	r1, [r7, #20]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	440b      	add	r3, r1
 8004f74:	3303      	adds	r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b0a      	cmp	r3, #10
 8004f7c:	d001      	beq.n	8004f82 <getchunk+0xa2>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e007      	b.n	8004f92 <getchunk+0xb2>
  *prefixlen = i + 2;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	1c9a      	adds	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
  *datalen = n;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	601a      	str	r2, [r3, #0]
  return true;
 8004f90:	2301      	movs	r3, #1
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd90      	pop	{r4, r7, pc}
	...

08004f9c <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8004fa4:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <mg_is_chunked+0x40>)
 8004fa6:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8004fa8:	490d      	ldr	r1, [pc, #52]	; (8004fe0 <mg_is_chunked+0x44>)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fe f8e0 	bl	8003170 <mg_http_get_header>
 8004fb0:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <mg_is_chunked+0x2e>
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	68b8      	ldr	r0, [r7, #8]
 8004fbc:	f002 f8ce 	bl	800715c <mg_vcasecmp>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <mg_is_chunked+0x2e>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <mg_is_chunked+0x30>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	080131bc 	.word	0x080131bc
 8004fe0:	080131c4 	.word	0x080131c4

08004fe4 <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b095      	sub	sp, #84	; 0x54
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6178      	str	r0, [r7, #20]
 8004fec:	6139      	str	r1, [r7, #16]
 8004fee:	60fa      	str	r2, [r7, #12]
 8004ff0:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005012:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	643b      	str	r3, [r7, #64]	; 0x40
 8005018:	2300      	movs	r3, #0
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 8005022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	429a      	cmp	r2, r3
 8005028:	d851      	bhi.n	80050ce <deliver_chunked_chunks+0xea>
 800502a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48
 8005032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005036:	4413      	add	r3, r2
 8005038:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 800503a:	e048      	b.n	80050ce <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 8005042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005046:	18d0      	adds	r0, r2, r3
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504c:	4413      	add	r3, r2
 800504e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005050:	4413      	add	r3, r2
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	4619      	mov	r1, r3
 8005056:	f00c fb9e 	bl	8011796 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 800505a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505e:	18d1      	adds	r1, r2, r3
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	68fc      	ldr	r4, [r7, #12]
 8005064:	463b      	mov	r3, r7
 8005066:	4618      	mov	r0, r3
 8005068:	f001 fff7 	bl	800705a <mg_str_n>
 800506c:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005070:	463a      	mov	r2, r7
 8005072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005076:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	210b      	movs	r1, #11
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f7fc fb9f 	bl	80017c2 <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 8005084:	6a3a      	ldr	r2, [r7, #32]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	441a      	add	r2, r3
 800508a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508c:	4413      	add	r3, r2
 800508e:	3302      	adds	r3, #2
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005092:	6a3a      	ldr	r2, [r7, #32]
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	4413      	add	r3, r2
 8005098:	3302      	adds	r3, #2
 800509a:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a0:	4413      	add	r3, r2
 80050a2:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d008      	beq.n	80050c0 <deliver_chunked_chunks+0xdc>
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	425b      	negs	r3, r3
 80050ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050bc:	4413      	add	r3, r2
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf0c      	ite	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	2300      	movne	r3, #0
 80050ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 80050ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80050d2:	f083 0301 	eor.w	r3, r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d016      	beq.n	800510a <deliver_chunked_chunks+0x126>
 80050dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	18d1      	adds	r1, r2, r3
 80050e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 ffb4 	bl	800705a <mg_str_n>
 80050f2:	f107 031c 	add.w	r3, r7, #28
 80050f6:	f107 0220 	add.w	r2, r7, #32
 80050fa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80050fe:	c903      	ldmia	r1, {r0, r1}
 8005100:	f7ff feee 	bl	8004ee0 <getchunk>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d198      	bne.n	800503c <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005114:	4413      	add	r3, r2
 8005116:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005118:	4619      	mov	r1, r3
 800511a:	f000 fac1 	bl	80056a0 <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	4313      	orrs	r3, r2
 800512e:	461a      	mov	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 8005134:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005138:	2b00      	cmp	r3, #0
 800513a:	d019      	beq.n	8005170 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005148:	441a      	add	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2200      	movs	r2, #0
 8005154:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <deliver_chunked_chunks+0x18c>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3338      	adds	r3, #56	; 0x38
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fa9b 	bl	80056a0 <mg_iobuf_del>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 8005170:	bf00      	nop
 8005172:	3754      	adds	r7, #84	; 0x54
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}

08005178 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b08b      	sub	sp, #44	; 0x2c
 800517c:	af00      	add	r7, sp, #0
 800517e:	6178      	str	r0, [r7, #20]
 8005180:	6139      	str	r1, [r7, #16]
 8005182:	60fa      	str	r2, [r7, #12]
 8005184:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005198:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	18d1      	adds	r1, r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad2      	subs	r2, r2, r3
 80051aa:	68fc      	ldr	r4, [r7, #12]
 80051ac:	463b      	mov	r3, r7
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 ff53 	bl	800705a <mg_str_n>
 80051b4:	f504 7304 	add.w	r3, r4, #528	; 0x210
 80051b8:	463a      	mov	r2, r7
 80051ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051be:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d812      	bhi.n	80051f4 <deliver_normal_chunks+0x7c>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10f      	bne.n	80051f4 <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad2      	subs	r2, r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d805      	bhi.n	800520c <deliver_normal_chunks+0x94>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	e000      	b.n	800520e <deliver_normal_chunks+0x96>
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	429a      	cmp	r2, r3
 800521a:	d203      	bcs.n	8005224 <deliver_normal_chunks+0xac>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <deliver_normal_chunks+0xc0>
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	210b      	movs	r1, #11
 8005232:	6978      	ldr	r0, [r7, #20]
 8005234:	f7fc fac5 	bl	80017c2 <mg_call>
  processed += hm->chunk.len;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	4413      	add	r3, r2
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800524c:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005256:	429a      	cmp	r2, r3
 8005258:	d31c      	bcc.n	8005294 <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	210b      	movs	r1, #11
 8005266:	6978      	ldr	r0, [r7, #20]
 8005268:	f7fc faab 	bl	80017c2 <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d013      	beq.n	80052a0 <deliver_normal_chunks+0x128>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <deliver_normal_chunks+0x128>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	3338      	adds	r3, #56	; 0x38
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fa0a 	bl	80056a0 <mg_iobuf_del>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 8005292:	e005      	b.n	80052a0 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 8005294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	4313      	orrs	r3, r2
 800529a:	461a      	mov	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052a0:	bf00      	nop
 80052a2:	372c      	adds	r7, #44	; 0x2c
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd90      	pop	{r4, r7, pc}

080052a8 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	f507 740e 	add.w	r4, r7, #568	; 0x238
 80052b4:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 80052b8:	6020      	str	r0, [r4, #0]
 80052ba:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80052be:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 80052c2:	6001      	str	r1, [r0, #0]
 80052c4:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80052c8:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 80052cc:	600a      	str	r2, [r1, #0]
 80052ce:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80052d2:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 80052d6:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 80052d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052dc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b07      	cmp	r3, #7
 80052e4:	f000 80e9 	beq.w	80054ba <http_cb+0x212>
 80052e8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052ec:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b09      	cmp	r3, #9
 80052f4:	f040 80f2 	bne.w	80054dc <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 80052f8:	e0df      	b.n	80054ba <http_cb+0x212>
      bool next = false;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 8005300:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005304:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800530c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005310:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	f107 0210 	add.w	r2, r7, #16
 800531c:	4619      	mov	r1, r3
 800531e:	f7fe f875 	bl	800340c <mg_http_parse>
 8005322:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 8005326:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800532a:	2b00      	cmp	r3, #0
 800532c:	da17      	bge.n	800535e <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 800532e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005332:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4619      	mov	r1, r3
 800533c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005340:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800534c:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8005350:	460a      	mov	r2, r1
 8005352:	4965      	ldr	r1, [pc, #404]	; (80054e8 <http_cb+0x240>)
 8005354:	6800      	ldr	r0, [r0, #0]
 8005356:	f7fc fa57 	bl	8001808 <mg_error>
        break;
 800535a:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 800535c:	e0be      	b.n	80054dc <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 800535e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005362:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800536c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	f040 809b 	bne.w	80054ae <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 8005378:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8098 	beq.w	80054b2 <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 8005382:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005386:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b09      	cmp	r3, #9
 800538e:	d125      	bne.n	80053dc <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 8005390:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005394:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053a0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80053a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 80053a8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053ac:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80053b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80053b4:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80053b8:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80053bc:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80053c0:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80053c4:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80053c8:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 80053cc:	1a8a      	subs	r2, r1, r2
 80053ce:	1a9a      	subs	r2, r3, r2
 80053d0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80053d4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80053d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fddb 	bl	8004f9c <mg_is_chunked>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00d      	beq.n	8005408 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 80053ec:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 80053f0:	f207 2333 	addw	r3, r7, #563	; 0x233
 80053f4:	f107 0210 	add.w	r2, r7, #16
 80053f8:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80053fc:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005400:	6800      	ldr	r0, [r0, #0]
 8005402:	f7ff fdef 	bl	8004fe4 <deliver_chunked_chunks>
 8005406:	e00c      	b.n	8005422 <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 8005408:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800540c:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005410:	f107 0210 	add.w	r2, r7, #16
 8005414:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005418:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 800541c:	6800      	ldr	r0, [r0, #0]
 800541e:	f7ff feab 	bl	8005178 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 8005422:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8005426:	2b00      	cmp	r3, #0
 8005428:	d000      	beq.n	800542c <http_cb+0x184>
 800542a:	e046      	b.n	80054ba <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 800542c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005430:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005438:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800543c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005440:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005444:	429a      	cmp	r2, r3
 8005446:	d336      	bcc.n	80054b6 <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8005448:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800544c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <http_cb+0x1ce>
 8005460:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005464:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8005476:	f107 0210 	add.w	r2, r7, #16
 800547a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800547e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005482:	210a      	movs	r1, #10
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	f7fc f99c 	bl	80017c2 <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 800548a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800548e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005498:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800549c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80054a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80054a4:	461a      	mov	r2, r3
 80054a6:	2100      	movs	r1, #0
 80054a8:	f000 f8fa 	bl	80056a0 <mg_iobuf_del>
 80054ac:	e005      	b.n	80054ba <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 80054ae:	bf00      	nop
 80054b0:	e014      	b.n	80054dc <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 80054b2:	bf00      	nop
 80054b4:	e012      	b.n	80054dc <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 80054b6:	bf00      	nop
}
 80054b8:	e010      	b.n	80054dc <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 80054ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054be:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <http_cb+0x234>
 80054ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054ce:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f47f af0f 	bne.w	80052fa <http_cb+0x52>
}
 80054dc:	bf00      	nop
 80054de:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	080131d8 	.word	0x080131d8

080054ec <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f001 f8cb 	bl	800669c <mg_listen>
 8005506:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <mg_http_listen+0x28>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4a03      	ldr	r2, [pc, #12]	; (8005520 <mg_http_listen+0x34>)
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	080052a9 	.word	0x080052a9

08005524 <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <zeromem+0x26>
    while (len--) *buf++ = 0;
 8005534:	e004      	b.n	8005540 <zeromem+0x1c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	1e5a      	subs	r2, r3, #1
 8005544:	603a      	str	r2, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f5      	bne.n	8005536 <zeromem+0x12>
  }
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <roundup>:

static size_t roundup(size_t size, size_t align) {
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <roundup+0x26>
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	4413      	add	r3, r2
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	e000      	b.n	800557e <roundup+0x28>
 800557c:	687b      	ldr	r3, [r7, #4]
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800558c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005590:	b088      	sub	sp, #32
 8005592:	af02      	add	r7, sp, #8
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8005598:	2301      	movs	r3, #1
 800559a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4619      	mov	r1, r3
 80055a2:	6838      	ldr	r0, [r7, #0]
 80055a4:	f7ff ffd7 	bl	8005556 <roundup>
 80055a8:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d117      	bne.n	80055e0 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7ff ffb2 	bl	8005524 <zeromem>
    free(io->buf);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f00b fe49 	bl	801125c <free>
    io->buf = NULL;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	609a      	str	r2, [r3, #8]
 80055de:	e052      	b.n	8005686 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d04d      	beq.n	8005686 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	2001      	movs	r0, #1
 80055ee:	f00b fe0f 	bl	8011210 <calloc>
 80055f2:	4603      	mov	r3, r0
 80055f4:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d028      	beq.n	800564e <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	4293      	cmp	r3, r2
 8005604:	bf28      	it	cs
 8005606:	4613      	movcs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <mg_iobuf_resize+0x9a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d006      	beq.n	8005626 <mg_iobuf_resize+0x9a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4619      	mov	r1, r3
 8005620:	6938      	ldr	r0, [r7, #16]
 8005622:	f00c f8b8 	bl	8011796 <memmove>
      zeromem(io->buf, io->size);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f7ff ff77 	bl	8005524 <zeromem>
      free(io->buf);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f00b fe0e 	bl	801125c <free>
      io->buf = (unsigned char *) p;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	e01b      	b.n	8005686 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 8005652:	4b10      	ldr	r3, [pc, #64]	; (8005694 <mg_iobuf_resize+0x108>)
 8005654:	f640 1255 	movw	r2, #2389	; 0x955
 8005658:	490f      	ldr	r1, [pc, #60]	; (8005698 <mg_iobuf_resize+0x10c>)
 800565a:	2001      	movs	r0, #1
 800565c:	f000 fe18 	bl	8006290 <mg_log_prefix>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00f      	beq.n	8005686 <mg_iobuf_resize+0xfa>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	4698      	mov	r8, r3
 800566e:	4691      	mov	r9, r2
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2200      	movs	r2, #0
 8005674:	461c      	mov	r4, r3
 8005676:	4615      	mov	r5, r2
 8005678:	e9cd 4500 	strd	r4, r5, [sp]
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	4806      	ldr	r0, [pc, #24]	; (800569c <mg_iobuf_resize+0x110>)
 8005682:	f000 fe5f 	bl	8006344 <mg_log>
    }
  }
  return ok;
 8005686:	697b      	ldr	r3, [r7, #20]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005692:	bf00      	nop
 8005694:	08013f08 	.word	0x08013f08
 8005698:	0801261c 	.word	0x0801261c
 800569c:	08013224 	.word	0x08013224

080056a0 <mg_iobuf_del>:
  if (ofs > io->len) io->len += ofs - io->len;
  io->len += len;
  return len;
}

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d902      	bls.n	80056bc <mg_iobuf_del+0x1c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	441a      	add	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d904      	bls.n	80056d4 <mg_iobuf_del+0x34>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <mg_iobuf_del+0x62>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	18d0      	adds	r0, r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	440b      	add	r3, r1
 80056ee:	18d1      	adds	r1, r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	f00c f84a 	bl	8011796 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <mg_iobuf_del+0x80>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6899      	ldr	r1, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	1acb      	subs	r3, r1, r3
 8005716:	4413      	add	r3, r2
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ff02 	bl	8005524 <zeromem>
  io->len -= len;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	609a      	str	r2, [r3, #8]
  return len;
 800572c:	687b      	ldr	r3, [r7, #4]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800573e:	2100      	movs	r1, #0
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff23 	bl	800558c <mg_iobuf_resize>
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <escapeseq+0x12>
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <escapeseq+0x20>)
 8005760:	e000      	b.n	8005764 <escapeseq+0x14>
 8005762:	4b04      	ldr	r3, [pc, #16]	; (8005774 <escapeseq+0x24>)
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	08013230 	.word	0x08013230
 8005774:	08013238 	.word	0x08013238

08005778 <json_esc>:

static char json_esc(int c, int esc) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f7ff ffe4 	bl	8005750 <escapeseq>
 8005788:	6138      	str	r0, [r7, #16]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff ffda 	bl	8005750 <escapeseq>
 800579c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e010      	b.n	80057c6 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d107      	bne.n	80057c0 <json_esc+0x48>
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	e007      	b.n	80057d0 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	3301      	adds	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ea      	bne.n	80057a4 <json_esc+0x2c>
  }
  return 0;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e02e      	b.n	8005846 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b5c      	cmp	r3, #92	; 0x5c
 80057f2:	d114      	bne.n	800581e <mg_pass_string+0x46>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	dd0f      	ble.n	800581e <mg_pass_string+0x46>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff ffb4 	bl	8005778 <json_esc>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <mg_pass_string+0x46>
      i++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e010      	b.n	8005840 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800582a:	f06f 0301 	mvn.w	r3, #1
 800582e:	e010      	b.n	8005852 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b22      	cmp	r3, #34	; 0x22
 800583a:	d101      	bne.n	8005840 <mg_pass_string+0x68>
      return i;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e008      	b.n	8005852 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	dbcc      	blt.n	80057e8 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800584e:	f06f 0301 	mvn.w	r3, #1
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	0000      	movs	r0, r0
 800585c:	0000      	movs	r0, r0
	...

08005860 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b090      	sub	sp, #64	; 0x40
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 8005878:	2300      	movs	r3, #0
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
 800587c:	2301      	movs	r3, #1
 800587e:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 8005880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	da0a      	bge.n	800589e <mg_atod+0x3e>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b2d      	cmp	r3, #45	; 0x2d
 800588e:	d106      	bne.n	800589e <mg_atod+0x3e>
    sign = -1, i++;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	3301      	adds	r3, #1
 800589a:	637b      	str	r3, [r7, #52]	; 0x34
 800589c:	e00a      	b.n	80058b4 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800589e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	da27      	bge.n	80058f6 <mg_atod+0x96>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b2b      	cmp	r3, #43	; 0x2b
 80058ac:	d123      	bne.n	80058f6 <mg_atod+0x96>
    i++;
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	3301      	adds	r3, #1
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80058b4:	e01f      	b.n	80058f6 <mg_atod+0x96>
    d *= 10.0;
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	4b9d      	ldr	r3, [pc, #628]	; (8005b30 <mg_atod+0x2d0>)
 80058bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058c0:	f7fa feca 	bl	8000658 <__aeabi_dmul>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    d += p[i] - '0';
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	3b30      	subs	r3, #48	; 0x30
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fa fe54 	bl	8000584 <__aeabi_i2d>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80058e4:	f7fa fd02 	bl	80002ec <__adddf3>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80058f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f2:	3301      	adds	r3, #1
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
 80058f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	da0b      	bge.n	8005916 <mg_atod+0xb6>
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b2f      	cmp	r3, #47	; 0x2f
 8005908:	d905      	bls.n	8005916 <mg_atod+0xb6>
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b39      	cmp	r3, #57	; 0x39
 8005914:	d9cf      	bls.n	80058b6 <mg_atod+0x56>
  }
  d *= sign;
 8005916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005918:	f7fa fe34 	bl	8000584 <__aeabi_i2d>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005924:	f7fa fe98 	bl	8000658 <__aeabi_dmul>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8005930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	da59      	bge.n	80059ec <mg_atod+0x18c>
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b2e      	cmp	r3, #46	; 0x2e
 8005942:	d153      	bne.n	80059ec <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005950:	a375      	add	r3, pc, #468	; (adr r3, 8005b28 <mg_atod+0x2c8>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	3301      	adds	r3, #1
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8005960:	e023      	b.n	80059aa <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	3b30      	subs	r3, #48	; 0x30
 800596c:	4618      	mov	r0, r3
 800596e:	f7fa fe09 	bl	8000584 <__aeabi_i2d>
 8005972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005976:	f7fa fe6f 	bl	8000658 <__aeabi_dmul>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005982:	f7fa fcb3 	bl	80002ec <__adddf3>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      base /= 10.0;
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <mg_atod+0x2d0>)
 8005994:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005998:	f7fa ff88 	bl	80008ac <__aeabi_ddiv>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	3301      	adds	r3, #1
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
 80059aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	da0b      	bge.n	80059ca <mg_atod+0x16a>
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b2f      	cmp	r3, #47	; 0x2f
 80059bc:	d905      	bls.n	80059ca <mg_atod+0x16a>
 80059be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b39      	cmp	r3, #57	; 0x39
 80059c8:	d9cb      	bls.n	8005962 <mg_atod+0x102>
    }
    d += frac * sign;
 80059ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059cc:	f7fa fdda 	bl	8000584 <__aeabi_i2d>
 80059d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059d4:	f7fa fe40 	bl	8000658 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80059e0:	f7fa fc84 	bl	80002ec <__adddf3>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 80059ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	f280 8085 	bge.w	8005b00 <mg_atod+0x2a0>
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b65      	cmp	r3, #101	; 0x65
 8005a00:	d005      	beq.n	8005a0e <mg_atod+0x1ae>
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b45      	cmp	r3, #69	; 0x45
 8005a0c:	d178      	bne.n	8005b00 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
    i++;
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	3301      	adds	r3, #1
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 8005a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	da0a      	bge.n	8005a3a <mg_atod+0x1da>
 8005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b2d      	cmp	r3, #45	; 0x2d
 8005a2e:	d104      	bne.n	8005a3a <mg_atod+0x1da>
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	3301      	adds	r3, #1
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8005a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	da19      	bge.n	8005a76 <mg_atod+0x216>
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b2b      	cmp	r3, #43	; 0x2b
 8005a4c:	d113      	bne.n	8005a76 <mg_atod+0x216>
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	3301      	adds	r3, #1
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005a54:	e00f      	b.n	8005a76 <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4619      	mov	r1, r3
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	637a      	str	r2, [r7, #52]	; 0x34
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	3b30      	subs	r3, #48	; 0x30
 8005a72:	440b      	add	r3, r1
 8005a74:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8005a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	da0f      	bge.n	8005a9e <mg_atod+0x23e>
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b2f      	cmp	r3, #47	; 0x2f
 8005a88:	d909      	bls.n	8005a9e <mg_atod+0x23e>
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b39      	cmp	r3, #57	; 0x39
 8005a94:	d803      	bhi.n	8005a9e <mg_atod+0x23e>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8005a9c:	dbdb      	blt.n	8005a56 <mg_atod+0x1f6>
    if (minus) exp = -exp;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <mg_atod+0x24a>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	425b      	negs	r3, r3
 8005aa8:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e00d      	b.n	8005acc <mg_atod+0x26c>
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	4b1e      	ldr	r3, [pc, #120]	; (8005b30 <mg_atod+0x2d0>)
 8005ab6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005aba:	f7fa fdcd 	bl	8000658 <__aeabi_dmul>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	dbed      	blt.n	8005ab0 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	e00d      	b.n	8005af6 <mg_atod+0x296>
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <mg_atod+0x2d0>)
 8005ae0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005ae4:	f7fa fee2 	bl	80008ac <__aeabi_ddiv>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	425b      	negs	r3, r3
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	dbec      	blt.n	8005ada <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <mg_atod+0x2ac>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b0a:	601a      	str	r2, [r3, #0]
  return d;
 8005b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b10:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b14:	eeb0 0a47 	vmov.f32	s0, s14
 8005b18:	eef0 0a67 	vmov.f32	s1, s15
 8005b1c:	3740      	adds	r7, #64	; 0x40
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	f3af 8000 	nop.w
 8005b28:	9999999a 	.word	0x9999999a
 8005b2c:	3fb99999 	.word	0x3fb99999
 8005b30:	40240000 	.word	0x40240000

08005b34 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b09b      	sub	sp, #108	; 0x6c
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	f107 0408 	add.w	r4, r7, #8
 8005b3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8005b54:	2300      	movs	r3, #0
 8005b56:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 8005b60:	2300      	movs	r3, #0
 8005b62:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 8005b64:	2301      	movs	r3, #1
 8005b66:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <mg_json_get+0x4c>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b24      	cmp	r3, #36	; 0x24
 8005b86:	d002      	beq.n	8005b8e <mg_json_get+0x5a>
 8005b88:	f06f 0301 	mvn.w	r3, #1
 8005b8c:	e2e2      	b.n	8006154 <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 8005b8e:	2300      	movs	r3, #0
 8005b90:	663b      	str	r3, [r7, #96]	; 0x60
 8005b92:	e2d8      	b.n	8006146 <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 8005b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b98:	4413      	add	r3, r2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8005ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	f000 82c8 	beq.w	800613a <mg_json_get+0x606>
 8005baa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	f000 82c3 	beq.w	800613a <mg_json_get+0x606>
 8005bb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bb8:	2b0a      	cmp	r3, #10
 8005bba:	f000 82be 	beq.w	800613a <mg_json_get+0x606>
 8005bbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bc2:	2b0d      	cmp	r3, #13
 8005bc4:	f000 82b9 	beq.w	800613a <mg_json_get+0x606>
    switch (expecting) {
 8005bc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	f200 82b7 	bhi.w	8006140 <mg_json_get+0x60c>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <mg_json_get+0xa4>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005be9 	.word	0x08005be9
 8005bdc:	08005ed1 	.word	0x08005ed1
 8005be0:	0800605b 	.word	0x0800605b
 8005be4:	08006071 	.word	0x08006071
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8005be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d101      	bne.n	8005bf4 <mg_json_get+0xc0>
 8005bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 8005bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bf8:	2b7b      	cmp	r3, #123	; 0x7b
 8005bfa:	d12b      	bne.n	8005c54 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bfe:	2b1d      	cmp	r3, #29
 8005c00:	dd02      	ble.n	8005c08 <mg_json_get+0xd4>
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	e2a5      	b.n	8006154 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8005c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d114      	bne.n	8005c3a <mg_json_get+0x106>
 8005c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b2e      	cmp	r3, #46	; 0x2e
 8005c1a:	d10e      	bne.n	8005c3a <mg_json_get+0x106>
 8005c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d10a      	bne.n	8005c3a <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8005c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c26:	3301      	adds	r3, #1
 8005c28:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
 8005c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c38:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8005c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c40:	3368      	adds	r3, #104	; 0x68
 8005c42:	443b      	add	r3, r7
 8005c44:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005c48:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8005c52:	e275      	b.n	8006140 <mg_json_get+0x60c>
        } else if (c == '[') {
 8005c54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c58:	2b5b      	cmp	r3, #91	; 0x5b
 8005c5a:	d14e      	bne.n	8005cfa <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8005c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c5e:	2b1d      	cmp	r3, #29
 8005c60:	dd02      	ble.n	8005c68 <mg_json_get+0x134>
 8005c62:	f04f 33ff 	mov.w	r3, #4294967295
 8005c66:	e275      	b.n	8006154 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8005c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d13a      	bne.n	8005ce6 <mg_json_get+0x1b2>
 8005c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b5b      	cmp	r3, #91	; 0x5b
 8005c7a:	d134      	bne.n	8005ce6 <mg_json_get+0x1b2>
 8005c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d130      	bne.n	8005ce6 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8005c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c86:	3301      	adds	r3, #1
 8005c88:	657b      	str	r3, [r7, #84]	; 0x54
 8005c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c90:	2300      	movs	r3, #0
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005c94:	2300      	movs	r3, #0
 8005c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c98:	e010      	b.n	8005cbc <mg_json_get+0x188>
              ei *= 10;
 8005c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 8005ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	3b30      	subs	r3, #48	; 0x30
 8005cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cb2:	4413      	add	r3, r2
 8005cb4:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8005cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb8:	3301      	adds	r3, #1
 8005cba:	653b      	str	r3, [r7, #80]	; 0x50
 8005cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b5d      	cmp	r3, #93	; 0x5d
 8005cc6:	d005      	beq.n	8005cd4 <mg_json_get+0x1a0>
 8005cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e2      	bne.n	8005c9a <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <mg_json_get+0x1b2>
 8005ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 8005ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cec:	3368      	adds	r3, #104	; 0x68
 8005cee:	443b      	add	r3, r7
 8005cf0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005cf4:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8005cf8:	e222      	b.n	8006140 <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 8005cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cfe:	2b5d      	cmp	r3, #93	; 0x5d
 8005d00:	d13a      	bne.n	8005d78 <mg_json_get+0x244>
 8005d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	dd37      	ble.n	8005d78 <mg_json_get+0x244>
          MG_EOO(']');
 8005d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d106      	bne.n	8005d1e <mg_json_get+0x1ea>
 8005d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d002      	beq.n	8005d1e <mg_json_get+0x1ea>
 8005d18:	f06f 0302 	mvn.w	r3, #2
 8005d1c:	e21a      	b.n	8006154 <mg_json_get+0x620>
 8005d1e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d24:	3b01      	subs	r3, #1
 8005d26:	3368      	adds	r3, #104	; 0x68
 8005d28:	443b      	add	r3, r7
 8005d2a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005d2e:	3302      	adds	r3, #2
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d002      	beq.n	8005d3a <mg_json_get+0x206>
 8005d34:	f06f 0301 	mvn.w	r3, #1
 8005d38:	e20c      	b.n	8006154 <mg_json_get+0x620>
 8005d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	429a      	cmp	r2, r3
 8005d46:	f040 809c 	bne.w	8005e82 <mg_json_get+0x34e>
 8005d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4413      	add	r3, r2
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 8095 	bne.w	8005e82 <mg_json_get+0x34e>
 8005d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f040 8090 	bne.w	8005e82 <mg_json_get+0x34e>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <mg_json_get+0x240>
 8005d68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d76:	e1ed      	b.n	8006154 <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8005d78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d7c:	2b74      	cmp	r3, #116	; 0x74
 8005d7e:	d113      	bne.n	8005da8 <mg_json_get+0x274>
 8005d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d82:	3303      	adds	r3, #3
 8005d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d86:	429a      	cmp	r2, r3
 8005d88:	dd0e      	ble.n	8005da8 <mg_json_get+0x274>
 8005d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d8e:	4413      	add	r3, r2
 8005d90:	2204      	movs	r2, #4
 8005d92:	4998      	ldr	r1, [pc, #608]	; (8005ff4 <mg_json_get+0x4c0>)
 8005d94:	4618      	mov	r0, r3
 8005d96:	f00b fcee 	bl	8011776 <memcmp>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <mg_json_get+0x274>
          i += 3;
 8005da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da2:	3303      	adds	r3, #3
 8005da4:	663b      	str	r3, [r7, #96]	; 0x60
 8005da6:	e06c      	b.n	8005e82 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8005da8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dac:	2b6e      	cmp	r3, #110	; 0x6e
 8005dae:	d113      	bne.n	8005dd8 <mg_json_get+0x2a4>
 8005db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db2:	3303      	adds	r3, #3
 8005db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005db6:	429a      	cmp	r2, r3
 8005db8:	dd0e      	ble.n	8005dd8 <mg_json_get+0x2a4>
 8005dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dbe:	4413      	add	r3, r2
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	498d      	ldr	r1, [pc, #564]	; (8005ff8 <mg_json_get+0x4c4>)
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f00b fcd6 	bl	8011776 <memcmp>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <mg_json_get+0x2a4>
          i += 3;
 8005dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd2:	3303      	adds	r3, #3
 8005dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd6:	e054      	b.n	8005e82 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8005dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ddc:	2b66      	cmp	r3, #102	; 0x66
 8005dde:	d113      	bne.n	8005e08 <mg_json_get+0x2d4>
 8005de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de2:	3304      	adds	r3, #4
 8005de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de6:	429a      	cmp	r2, r3
 8005de8:	dd0e      	ble.n	8005e08 <mg_json_get+0x2d4>
 8005dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dee:	4413      	add	r3, r2
 8005df0:	2205      	movs	r2, #5
 8005df2:	4982      	ldr	r1, [pc, #520]	; (8005ffc <mg_json_get+0x4c8>)
 8005df4:	4618      	mov	r0, r3
 8005df6:	f00b fcbe 	bl	8011776 <memcmp>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <mg_json_get+0x2d4>
          i += 4;
 8005e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e02:	3304      	adds	r3, #4
 8005e04:	663b      	str	r3, [r7, #96]	; 0x60
 8005e06:	e03c      	b.n	8005e82 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005e08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8005e0e:	d007      	beq.n	8005e20 <mg_json_get+0x2ec>
 8005e10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e14:	2b2f      	cmp	r3, #47	; 0x2f
 8005e16:	d916      	bls.n	8005e46 <mg_json_get+0x312>
 8005e18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e1c:	2b39      	cmp	r3, #57	; 0x39
 8005e1e:	d812      	bhi.n	8005e46 <mg_json_get+0x312>
          int numlen = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8005e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e28:	18d0      	adds	r0, r2, r3
 8005e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f107 0210 	add.w	r2, r7, #16
 8005e34:	4619      	mov	r1, r3
 8005e36:	f7ff fd13 	bl	8005860 <mg_atod>
          i += numlen - 1;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e40:	4413      	add	r3, r2
 8005e42:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8005e44:	e01d      	b.n	8005e82 <mg_json_get+0x34e>
        } else if (c == '"') {
 8005e46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e4a:	2b22      	cmp	r3, #34	; 0x22
 8005e4c:	d116      	bne.n	8005e7c <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8005e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e50:	3301      	adds	r3, #1
 8005e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e54:	18d0      	adds	r0, r2, r3
 8005e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f7ff fcba 	bl	80057d8 <mg_pass_string>
 8005e64:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	da01      	bge.n	8005e70 <mg_json_get+0x33c>
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	e171      	b.n	8006154 <mg_json_get+0x620>
          i += n + 1;
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	3301      	adds	r3, #1
 8005e74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e76:	4413      	add	r3, r2
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
 8005e7a:	e002      	b.n	8005e82 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8005e7c:	f06f 0301 	mvn.w	r3, #1
 8005e80:	e168      	b.n	8006154 <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 8005e82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d114      	bne.n	8005eb4 <mg_json_get+0x380>
 8005e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4413      	add	r3, r2
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10e      	bne.n	8005eb4 <mg_json_get+0x380>
 8005e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d10a      	bne.n	8005eb4 <mg_json_get+0x380>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <mg_json_get+0x37c>
 8005ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb2:	e14f      	b.n	8006154 <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 8005eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d105      	bne.n	8005ec8 <mg_json_get+0x394>
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	db02      	blt.n	8005ec8 <mg_json_get+0x394>
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 8005ece:	e137      	b.n	8006140 <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 8005ed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ed4:	2b22      	cmp	r3, #34	; 0x22
 8005ed6:	d170      	bne.n	8005fba <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eda:	3301      	adds	r3, #1
 8005edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ede:	18d0      	adds	r0, r2, r3
 8005ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	4619      	mov	r1, r3
 8005eea:	f7ff fc75 	bl	80057d8 <mg_pass_string>
 8005eee:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da01      	bge.n	8005efa <mg_json_get+0x3c6>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	e12c      	b.n	8006154 <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8005efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	4413      	add	r3, r2
 8005f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f04:	429a      	cmp	r2, r3
 8005f06:	dc02      	bgt.n	8005f0e <mg_json_get+0x3da>
 8005f08:	f06f 0302 	mvn.w	r3, #2
 8005f0c:	e122      	b.n	8006154 <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8005f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f12:	429a      	cmp	r2, r3
 8005f14:	da02      	bge.n	8005f1c <mg_json_get+0x3e8>
 8005f16:	f06f 0302 	mvn.w	r3, #2
 8005f1a:	e11b      	b.n	8006154 <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8005f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d109      	bne.n	8005f38 <mg_json_get+0x404>
 8005f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f26:	3b01      	subs	r3, #1
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f30:	d002      	beq.n	8005f38 <mg_json_get+0x404>
 8005f32:	f06f 0302 	mvn.w	r3, #2
 8005f36:	e10d      	b.n	8006154 <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8005f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d133      	bne.n	8005fa8 <mg_json_get+0x474>
 8005f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f42:	3b01      	subs	r3, #1
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	4413      	add	r3, r2
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f4c:	d12c      	bne.n	8005fa8 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8005f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f50:	3301      	adds	r3, #1
 8005f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f54:	18d0      	adds	r0, r2, r3
 8005f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f00b fc48 	bl	80117f4 <strncmp>
 8005f64:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11e      	bne.n	8005fa8 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005f6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	4413      	add	r3, r2
 8005f70:	461a      	mov	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4413      	add	r3, r2
 8005f76:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d011      	beq.n	8005fa0 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005f7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	4413      	add	r3, r2
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4413      	add	r3, r2
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8c:	d008      	beq.n	8005fa0 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8005f8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	4413      	add	r3, r2
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8005f9c:	2b5b      	cmp	r3, #91	; 0x5b
 8005f9e:	d103      	bne.n	8005fa8 <mg_json_get+0x474>
            pos += n;
 8005fa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	4413      	add	r3, r2
 8005fa6:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	3301      	adds	r3, #1
 8005fac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fae:	4413      	add	r3, r2
 8005fb0:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8005fb8:	e0c1      	b.n	800613e <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 8005fba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fbe:	2b7d      	cmp	r3, #125	; 0x7d
 8005fc0:	d148      	bne.n	8006054 <mg_json_get+0x520>
          MG_EOO('}');
 8005fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d106      	bne.n	8005fd8 <mg_json_get+0x4a4>
 8005fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d002      	beq.n	8005fd8 <mg_json_get+0x4a4>
 8005fd2:	f06f 0302 	mvn.w	r3, #2
 8005fd6:	e0bd      	b.n	8006154 <mg_json_get+0x620>
 8005fd8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	3368      	adds	r3, #104	; 0x68
 8005fe2:	443b      	add	r3, r7
 8005fe4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8005fe8:	3302      	adds	r3, #2
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d008      	beq.n	8006000 <mg_json_get+0x4cc>
 8005fee:	f06f 0301 	mvn.w	r3, #1
 8005ff2:	e0af      	b.n	8006154 <mg_json_get+0x620>
 8005ff4:	08013240 	.word	0x08013240
 8005ff8:	08013248 	.word	0x08013248
 8005ffc:	08013250 	.word	0x08013250
 8006000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006002:	3b01      	subs	r3, #1
 8006004:	65bb      	str	r3, [r7, #88]	; 0x58
 8006006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600a:	429a      	cmp	r2, r3
 800600c:	d114      	bne.n	8006038 <mg_json_get+0x504>
 800600e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10e      	bne.n	8006038 <mg_json_get+0x504>
 800601a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800601c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601e:	429a      	cmp	r2, r3
 8006020:	d10a      	bne.n	8006038 <mg_json_get+0x504>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <mg_json_get+0x500>
 8006028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800602a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006036:	e08d      	b.n	8006154 <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 8006038:	2303      	movs	r3, #3
 800603a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 800603e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006042:	429a      	cmp	r2, r3
 8006044:	d17b      	bne.n	800613e <mg_json_get+0x60a>
 8006046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006048:	2b00      	cmp	r3, #0
 800604a:	db78      	blt.n	800613e <mg_json_get+0x60a>
 800604c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604e:	3301      	adds	r3, #1
 8006050:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8006052:	e074      	b.n	800613e <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 8006054:	f06f 0301 	mvn.w	r3, #1
 8006058:	e07c      	b.n	8006154 <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 800605a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800605e:	2b3a      	cmp	r3, #58	; 0x3a
 8006060:	d103      	bne.n	800606a <mg_json_get+0x536>
          expecting = S_VALUE;
 8006062:	2300      	movs	r3, #0
 8006064:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006068:	e06a      	b.n	8006140 <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 800606a:	f06f 0301 	mvn.w	r3, #1
 800606e:	e071      	b.n	8006154 <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8006070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006072:	2b00      	cmp	r3, #0
 8006074:	dc02      	bgt.n	800607c <mg_json_get+0x548>
          return MG_JSON_INVALID;
 8006076:	f06f 0301 	mvn.w	r3, #1
 800607a:	e06b      	b.n	8006154 <mg_json_get+0x620>
        } else if (c == ',') {
 800607c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006080:	2b2c      	cmp	r3, #44	; 0x2c
 8006082:	d10d      	bne.n	80060a0 <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8006084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006086:	3b01      	subs	r3, #1
 8006088:	3368      	adds	r3, #104	; 0x68
 800608a:	443b      	add	r3, r7
 800608c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006090:	2b7b      	cmp	r3, #123	; 0x7b
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800609e:	e04f      	b.n	8006140 <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 80060a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060a4:	2b5d      	cmp	r3, #93	; 0x5d
 80060a6:	d003      	beq.n	80060b0 <mg_json_get+0x57c>
 80060a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060ac:	2b7d      	cmp	r3, #125	; 0x7d
 80060ae:	d13f      	bne.n	8006130 <mg_json_get+0x5fc>
          MG_EOO('O');
 80060b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d106      	bne.n	80060c6 <mg_json_get+0x592>
 80060b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060bc:	429a      	cmp	r2, r3
 80060be:	d002      	beq.n	80060c6 <mg_json_get+0x592>
 80060c0:	f06f 0302 	mvn.w	r3, #2
 80060c4:	e046      	b.n	8006154 <mg_json_get+0x620>
 80060c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80060ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060cc:	3b01      	subs	r3, #1
 80060ce:	3368      	adds	r3, #104	; 0x68
 80060d0:	443b      	add	r3, r7
 80060d2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80060d6:	3302      	adds	r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d002      	beq.n	80060e2 <mg_json_get+0x5ae>
 80060dc:	f06f 0301 	mvn.w	r3, #1
 80060e0:	e038      	b.n	8006154 <mg_json_get+0x620>
 80060e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060e4:	3b01      	subs	r3, #1
 80060e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d114      	bne.n	800611a <mg_json_get+0x5e6>
 80060f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4413      	add	r3, r2
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10e      	bne.n	800611a <mg_json_get+0x5e6>
 80060fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006100:	429a      	cmp	r2, r3
 8006102:	d10a      	bne.n	800611a <mg_json_get+0x5e6>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <mg_json_get+0x5e2>
 800610a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800610c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006118:	e01c      	b.n	8006154 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 800611a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800611c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611e:	429a      	cmp	r2, r3
 8006120:	d109      	bne.n	8006136 <mg_json_get+0x602>
 8006122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006124:	2b00      	cmp	r3, #0
 8006126:	db06      	blt.n	8006136 <mg_json_get+0x602>
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	3301      	adds	r3, #1
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800612e:	e002      	b.n	8006136 <mg_json_get+0x602>
          return MG_JSON_INVALID;
 8006130:	f06f 0301 	mvn.w	r3, #1
 8006134:	e00e      	b.n	8006154 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006136:	bf00      	nop
        break;
 8006138:	e002      	b.n	8006140 <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <mg_json_get+0x60c>
        break;
 800613e:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006142:	3301      	adds	r3, #1
 8006144:	663b      	str	r3, [r7, #96]	; 0x60
 8006146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614a:	429a      	cmp	r2, r3
 800614c:	f6ff ad22 	blt.w	8005b94 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006150:	f06f 0302 	mvn.w	r3, #2
}
 8006154:	4618      	mov	r0, r3
 8006156:	376c      	adds	r7, #108	; 0x6c
 8006158:	46bd      	mov	sp, r7
 800615a:	bd90      	pop	{r4, r7, pc}

0800615c <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b089      	sub	sp, #36	; 0x24
 8006160:	af00      	add	r7, sp, #0
 8006162:	f107 0408 	add.w	r4, r7, #8
 8006166:	e884 0003 	stmia.w	r4, {r0, r1}
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006172:	f107 0314 	add.w	r3, r7, #20
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	f107 0108 	add.w	r1, r7, #8
 800617c:	c903      	ldmia	r1, {r0, r1}
 800617e:	f7ff fcd9 	bl	8005b34 <mg_json_get>
 8006182:	61b8      	str	r0, [r7, #24]
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b00      	cmp	r3, #0
 8006188:	db25      	blt.n	80061d6 <mg_json_get_num+0x7a>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	4413      	add	r3, r2
 8006190:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006192:	2b2d      	cmp	r3, #45	; 0x2d
 8006194:	d00b      	beq.n	80061ae <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	4413      	add	r3, r2
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b2f      	cmp	r3, #47	; 0x2f
 80061a0:	d919      	bls.n	80061d6 <mg_json_get_num+0x7a>
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	4413      	add	r3, r2
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b39      	cmp	r3, #57	; 0x39
 80061ac:	d813      	bhi.n	80061d6 <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <mg_json_get_num+0x76>
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	2200      	movs	r2, #0
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fb4e 	bl	8005860 <mg_atod>
 80061c4:	eeb0 7a40 	vmov.f32	s14, s0
 80061c8:	eef0 7a60 	vmov.f32	s15, s1
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61fb      	str	r3, [r7, #28]
  }
  return found;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3724      	adds	r7, #36	; 0x24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd90      	pop	{r4, r7, pc}
	...

080061ec <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <logc+0x20>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a05      	ldr	r2, [pc, #20]	; (8006210 <logc+0x24>)
 80061fc:	6811      	ldr	r1, [r2, #0]
 80061fe:	79fa      	ldrb	r2, [r7, #7]
 8006200:	4610      	mov	r0, r2
 8006202:	4798      	blx	r3
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	2000023c 	.word	0x2000023c
 8006210:	200005c8 	.word	0x200005c8

08006214 <logs>:

static void logs(const char *buf, size_t len) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e009      	b.n	8006238 <logs+0x24>
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ffdd 	bl	80061ec <logc>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d3f1      	bcc.n	8006224 <logs+0x10>
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <mg_log_set>:

void mg_log_set(int log_level) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <mg_log_set+0x34>)
 8006256:	f640 22c8 	movw	r2, #2760	; 0xac8
 800625a:	490a      	ldr	r1, [pc, #40]	; (8006284 <mg_log_set+0x38>)
 800625c:	2003      	movs	r0, #3
 800625e:	f000 f817 	bl	8006290 <mg_log_prefix>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <mg_log_set+0x24>
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4807      	ldr	r0, [pc, #28]	; (8006288 <mg_log_set+0x3c>)
 800626c:	f000 f86a 	bl	8006344 <mg_log>
  s_level = log_level;
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <mg_log_set+0x40>)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6013      	str	r3, [r2, #0]
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	08013f18 	.word	0x08013f18
 8006284:	0801261c 	.word	0x0801261c
 8006288:	08013258 	.word	0x08013258
 800628c:	20000238 	.word	0x20000238

08006290 <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b099      	sub	sp, #100	; 0x64
 8006294:	af06      	add	r7, sp, #24
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 800629e:	4b27      	ldr	r3, [pc, #156]	; (800633c <mg_log_prefix+0xac>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	dc43      	bgt.n	8006330 <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 80062a8:	212f      	movs	r1, #47	; 0x2f
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f00b fab4 	bl	8011818 <strrchr>
 80062b0:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 80062b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <mg_log_prefix+0x32>
 80062b8:	215c      	movs	r1, #92	; 0x5c
 80062ba:	68b8      	ldr	r0, [r7, #8]
 80062bc:	f00b faac 	bl	8011818 <strrchr>
 80062c0:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 80062c2:	f001 fd55 	bl	8007d70 <mg_millis>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062cc:	2900      	cmp	r1, #0
 80062ce:	d002      	beq.n	80062d6 <mg_log_prefix+0x46>
 80062d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062d2:	3101      	adds	r1, #1
 80062d4:	e000      	b.n	80062d8 <mg_log_prefix+0x48>
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	f107 0414 	add.w	r4, r7, #20
 80062dc:	6838      	ldr	r0, [r7, #0]
 80062de:	9005      	str	r0, [sp, #20]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	9004      	str	r0, [sp, #16]
 80062e4:	9103      	str	r1, [sp, #12]
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	9102      	str	r1, [sp, #8]
 80062ea:	e9cd 2300 	strd	r2, r3, [sp]
 80062ee:	4a14      	ldr	r2, [pc, #80]	; (8006340 <mg_log_prefix+0xb0>)
 80062f0:	2129      	movs	r1, #41	; 0x29
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 fb4a 	bl	800698c <mg_snprintf>
 80062f8:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	2b27      	cmp	r3, #39	; 0x27
 80062fe:	d90a      	bls.n	8006316 <mg_log_prefix+0x86>
 8006300:	2327      	movs	r3, #39	; 0x27
 8006302:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 8006304:	e007      	b.n	8006316 <mg_log_prefix+0x86>
 8006306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	643a      	str	r2, [r7, #64]	; 0x40
 800630c:	3348      	adds	r3, #72	; 0x48
 800630e:	443b      	add	r3, r7
 8006310:	2220      	movs	r2, #32
 8006312:	f803 2c34 	strb.w	r2, [r3, #-52]
 8006316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006318:	2b28      	cmp	r3, #40	; 0x28
 800631a:	d9f4      	bls.n	8006306 <mg_log_prefix+0x76>
    logs(buf, n - 1);
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	1e5a      	subs	r2, r3, #1
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff ff74 	bl	8006214 <logs>
    return true;
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <mg_log_prefix+0xa2>
  } else {
    return false;
 8006330:	2300      	movs	r3, #0
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	374c      	adds	r7, #76	; 0x4c
 8006336:	46bd      	mov	sp, r7
 8006338:	bd90      	pop	{r4, r7, pc}
 800633a:	bf00      	nop
 800633c:	20000238 	.word	0x20000238
 8006340:	08013270 	.word	0x08013270

08006344 <mg_log>:

void mg_log(const char *fmt, ...) {
 8006344:	b40f      	push	{r0, r1, r2, r3}
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800634c:	f107 0314 	add.w	r3, r7, #20
 8006350:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <mg_log+0x34>)
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <mg_log+0x38>)
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	1d3b      	adds	r3, r7, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	f7fb ff61 	bl	8002224 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 8006362:	2102      	movs	r1, #2
 8006364:	4806      	ldr	r0, [pc, #24]	; (8006380 <mg_log+0x3c>)
 8006366:	f7ff ff55 	bl	8006214 <logs>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006374:	b004      	add	sp, #16
 8006376:	4770      	bx	lr
 8006378:	2000023c 	.word	0x2000023c
 800637c:	200005c8 	.word	0x200005c8
 8006380:	080127b4 	.word	0x080127b4

08006384 <nibble>:

static unsigned char nibble(unsigned c) {
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b09      	cmp	r3, #9
 8006390:	d804      	bhi.n	800639c <nibble+0x18>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3330      	adds	r3, #48	; 0x30
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e003      	b.n	80063a4 <nibble+0x20>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	3357      	adds	r3, #87	; 0x57
 80063a2:	b2db      	uxtb	r3, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08a      	sub	sp, #40	; 0x28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 80063c4:	2300      	movs	r3, #0
 80063c6:	623b      	str	r3, [r7, #32]
 80063c8:	e07a      	b.n	80064c0 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d13a      	bne.n	800644a <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <mg_hexdump+0x4a>
 80063da:	2102      	movs	r1, #2
 80063dc:	484c      	ldr	r0, [pc, #304]	; (8006510 <mg_hexdump+0x160>)
 80063de:	f7ff ff19 	bl	8006214 <logs>
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	2110      	movs	r1, #16
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff ff13 	bl	8006214 <logs>
 80063ee:	200a      	movs	r0, #10
 80063f0:	f7ff fefc 	bl	80061ec <logc>
 80063f4:	2300      	movs	r3, #0
 80063f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	0b1b      	lsrs	r3, r3, #12
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ffbe 	bl	8006384 <nibble>
 8006408:	4603      	mov	r3, r0
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff feee 	bl	80061ec <logc>
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff ffb3 	bl	8006384 <nibble>
 800641e:	4603      	mov	r3, r0
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fee3 	bl	80061ec <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	091b      	lsrs	r3, r3, #4
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff ffa8 	bl	8006384 <nibble>
 8006434:	4603      	mov	r3, r0
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fed8 	bl	80061ec <logc>
 800643c:	2030      	movs	r0, #48	; 0x30
 800643e:	f7ff fed5 	bl	80061ec <logc>
 8006442:	2103      	movs	r1, #3
 8006444:	4833      	ldr	r0, [pc, #204]	; (8006514 <mg_hexdump+0x164>)
 8006446:	f7ff fee5 	bl	8006214 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	4413      	add	r3, r2
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	091b      	lsrs	r3, r3, #4
 8006454:	b2db      	uxtb	r3, r3
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff ff94 	bl	8006384 <nibble>
 800645c:	4603      	mov	r3, r0
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fec4 	bl	80061ec <logc>
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	4413      	add	r3, r2
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff ff87 	bl	8006384 <nibble>
 8006476:	4603      	mov	r3, r0
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff feb7 	bl	80061ec <logc>
    logc(' ');                                         // Space after hex number
 800647e:	2020      	movs	r0, #32
 8006480:	f7ff feb4 	bl	80061ec <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	4413      	add	r3, r2
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b1f      	cmp	r3, #31
 800648e:	d90a      	bls.n	80064a6 <mg_hexdump+0xf6>
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	4413      	add	r3, r2
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b7e      	cmp	r3, #126	; 0x7e
 800649a:	d804      	bhi.n	80064a6 <mg_hexdump+0xf6>
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	4413      	add	r3, r2
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	e000      	b.n	80064a8 <mg_hexdump+0xf8>
 80064a6:	222e      	movs	r2, #46	; 0x2e
 80064a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064ac:	1c59      	adds	r1, r3, #1
 80064ae:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80064b2:	3328      	adds	r3, #40	; 0x28
 80064b4:	443b      	add	r3, r7
 80064b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	3301      	adds	r3, #1
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	6a3a      	ldr	r2, [r7, #32]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d380      	bcc.n	80063ca <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80064c8:	e00d      	b.n	80064e6 <mg_hexdump+0x136>
 80064ca:	2103      	movs	r1, #3
 80064cc:	4811      	ldr	r0, [pc, #68]	; (8006514 <mg_hexdump+0x164>)
 80064ce:	f7ff fea1 	bl	8006214 <logs>
 80064d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80064dc:	3328      	adds	r3, #40	; 0x28
 80064de:	443b      	add	r3, r7
 80064e0:	2220      	movs	r2, #32
 80064e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80064e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064ea:	2b0f      	cmp	r3, #15
 80064ec:	d9ed      	bls.n	80064ca <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80064ee:	2102      	movs	r1, #2
 80064f0:	4807      	ldr	r0, [pc, #28]	; (8006510 <mg_hexdump+0x160>)
 80064f2:	f7ff fe8f 	bl	8006214 <logs>
 80064f6:	f107 030c 	add.w	r3, r7, #12
 80064fa:	2110      	movs	r1, #16
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff fe89 	bl	8006214 <logs>
 8006502:	200a      	movs	r0, #10
 8006504:	f7ff fe72 	bl	80061ec <logc>
}
 8006508:	bf00      	nop
 800650a:	3728      	adds	r7, #40	; 0x28
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	08013284 	.word	0x08013284
 8006514:	08013288 	.word	0x08013288

08006518 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4805      	ldr	r0, [pc, #20]	; (800654c <mg_vprintf+0x34>)
 8006536:	f7fb fe75 	bl	8002224 <mg_vxprintf>
  return c->send.len - old;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	1ad3      	subs	r3, r2, r3
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	0800691d 	.word	0x0800691d

08006550 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8006550:	b40e      	push	{r1, r2, r3}
 8006552:	b580      	push	{r7, lr}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800655e:	f107 0320 	add.w	r3, r7, #32
 8006562:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8006564:	f107 0308 	add.w	r3, r7, #8
 8006568:	461a      	mov	r2, r3
 800656a:	69f9      	ldr	r1, [r7, #28]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff ffd3 	bl	8006518 <mg_vprintf>
 8006572:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8006574:	68fb      	ldr	r3, [r7, #12]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006580:	b003      	add	sp, #12
 8006582:	4770      	bx	lr

08006584 <mg_alloc_conn>:
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
         mg_aton6(str, addr);
}

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	3390      	adds	r3, #144	; 0x90
 8006592:	4619      	mov	r1, r3
 8006594:	2001      	movs	r0, #1
 8006596:	f00a fe3b 	bl	8011210 <calloc>
 800659a:	4603      	mov	r3, r0
 800659c:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d013      	beq.n	80065cc <mg_alloc_conn+0x48>
    c->mgr = mgr;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	61da      	str	r2, [r3, #28]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb f8cf 	bl	8001784 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e002      	b.n	80065f4 <mg_close_conn+0x1c>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d1f7      	bne.n	80065ee <mg_close_conn+0x16>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	429a      	cmp	r2, r3
 8006610:	d103      	bne.n	800661a <mg_close_conn+0x42>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d103      	bne.n	800662e <mg_close_conn+0x56>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800662e:	2200      	movs	r2, #0
 8006630:	2109      	movs	r1, #9
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fb f8c5 	bl	80017c2 <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <mg_close_conn+0xb8>)
 800663a:	f640 626c 	movw	r2, #3692	; 0xe6c
 800663e:	4915      	ldr	r1, [pc, #84]	; (8006694 <mg_close_conn+0xbc>)
 8006640:	2003      	movs	r0, #3
 8006642:	f7ff fe25 	bl	8006290 <mg_log_prefix>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <mg_close_conn+0x84>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	461a      	mov	r2, r3
 8006656:	4810      	ldr	r0, [pc, #64]	; (8006698 <mg_close_conn+0xc0>)
 8006658:	f7ff fe74 	bl	8006344 <mg_log>

  mg_tls_free(c);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 f9bd 	bl	80079dc <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3338      	adds	r3, #56	; 0x38
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f865 	bl	8005736 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3348      	adds	r3, #72	; 0x48
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff f860 	bl	8005736 <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 8006676:	2290      	movs	r2, #144	; 0x90
 8006678:	2100      	movs	r1, #0
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f00b f8a5 	bl	80117ca <memset>
  free(c);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f00a fdeb 	bl	801125c <free>
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	08013f24 	.word	0x08013f24
 8006694:	0801261c 	.word	0x0801261c
 8006698:	08013320 	.word	0x08013320

0800669c <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff ff68 	bl	8006584 <mg_alloc_conn>
 80066b4:	6178      	str	r0, [r7, #20]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10e      	bne.n	80066da <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 80066bc:	4b40      	ldr	r3, [pc, #256]	; (80067c0 <mg_listen+0x124>)
 80066be:	f640 6292 	movw	r2, #3730	; 0xe92
 80066c2:	4940      	ldr	r1, [pc, #256]	; (80067c4 <mg_listen+0x128>)
 80066c4:	2001      	movs	r0, #1
 80066c6:	f7ff fde3 	bl	8006290 <mg_log_prefix>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d071      	beq.n	80067b4 <mg_listen+0x118>
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	483d      	ldr	r0, [pc, #244]	; (80067c8 <mg_listen+0x12c>)
 80066d4:	f7ff fe36 	bl	8006344 <mg_log>
 80066d8:	e06c      	b.n	80067b4 <mg_listen+0x118>
  } else if (!mg_open_listener(c, url)) {
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	6978      	ldr	r0, [r7, #20]
 80066de:	f004 fab1 	bl	800ac44 <mg_open_listener>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f083 0301 	eor.w	r3, r3, #1
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d018      	beq.n	8006720 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 80066ee:	4b34      	ldr	r3, [pc, #208]	; (80067c0 <mg_listen+0x124>)
 80066f0:	f640 6294 	movw	r2, #3732	; 0xe94
 80066f4:	4933      	ldr	r1, [pc, #204]	; (80067c4 <mg_listen+0x128>)
 80066f6:	2001      	movs	r0, #1
 80066f8:	f7ff fdca 	bl	8006290 <mg_log_prefix>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <mg_listen+0x78>
 8006702:	f00b f8f7 	bl	80118f4 <__errno>
 8006706:	4603      	mov	r3, r0
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	482f      	ldr	r0, [pc, #188]	; (80067cc <mg_listen+0x130>)
 8006710:	f7ff fe18 	bl	8006344 <mg_log>
    free(c);
 8006714:	6978      	ldr	r0, [r7, #20]
 8006716:	f00a fda1 	bl	801125c <free>
    c = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	e049      	b.n	80067b4 <mg_listen+0x118>
  } else {
    c->is_listening = 1;
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800672e:	2204      	movs	r2, #4
 8006730:	4927      	ldr	r1, [pc, #156]	; (80067d0 <mg_listen+0x134>)
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f00b f85e 	bl	80117f4 <strncmp>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2d9      	uxtb	r1, r3
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800674a:	f361 0300 	bfi	r3, r1, #0, #1
 800674e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 800676c:	2200      	movs	r2, #0
 800676e:	2101      	movs	r1, #1
 8006770:	6978      	ldr	r0, [r7, #20]
 8006772:	f7fb f826 	bl	80017c2 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1; // Accepted connection must
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f001 f96c 	bl	8007a54 <mg_url_is_ssl>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d006      	beq.n	8006790 <mg_listen+0xf4>
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8006788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800678c:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <mg_listen+0x124>)
 8006792:	f640 629f 	movw	r2, #3743	; 0xe9f
 8006796:	490b      	ldr	r1, [pc, #44]	; (80067c4 <mg_listen+0x128>)
 8006798:	2003      	movs	r0, #3
 800679a:	f7ff fd79 	bl	8006290 <mg_log_prefix>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d007      	beq.n	80067b4 <mg_listen+0x118>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4809      	ldr	r0, [pc, #36]	; (80067d4 <mg_listen+0x138>)
 80067b0:	f7ff fdc8 	bl	8006344 <mg_log>
  }
  return c;
 80067b4:	697b      	ldr	r3, [r7, #20]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	08013f34 	.word	0x08013f34
 80067c4:	0801261c 	.word	0x0801261c
 80067c8:	08013348 	.word	0x08013348
 80067cc:	08013350 	.word	0x08013350
 80067d0:	08013340 	.word	0x08013340
 80067d4:	08012728 	.word	0x08012728

080067d8 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af04      	add	r7, sp, #16
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 80067e4:	2128      	movs	r1, #40	; 0x28
 80067e6:	2001      	movs	r0, #1
 80067e8:	f00a fd12 	bl	8011210 <calloc>
 80067ec:	4603      	mov	r3, r0
 80067ee:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d014      	beq.n	8006820 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	f000 ffd2 	bl	80077b6 <mg_timer_init>
    t->id = mgr->timerid++;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	1c59      	adds	r1, r3, #1
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	6211      	str	r1, [r2, #32]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	6013      	str	r3, [r2, #0]
  }
  return t;
 8006820:	697b      	ldr	r3, [r7, #20]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8006834:	2244      	movs	r2, #68	; 0x44
 8006836:	2100      	movs	r1, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f00a ffc6 	bl	80117ca <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f04f 32ff 	mov.w	r2, #4294967295
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800684c:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a04      	ldr	r2, [pc, #16]	; (8006864 <mg_mgr_init+0x38>)
 8006852:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a04      	ldr	r2, [pc, #16]	; (8006868 <mg_mgr_init+0x3c>)
 8006858:	60da      	str	r2, [r3, #12]
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	08013380 	.word	0x08013380
 8006868:	08013394 	.word	0x08013394

0800686c <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	6039      	str	r1, [r7, #0]
 8006876:	71fb      	strb	r3, [r7, #7]
 8006878:	4613      	mov	r3, r2
 800687a:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8006880:	79bb      	ldrb	r3, [r7, #6]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <mg_pfn_iobuf_private+0x36>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d906      	bls.n	80068a2 <mg_pfn_iobuf_private+0x36>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	3302      	adds	r3, #2
 800689a:	4619      	mov	r1, r3
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7fe fe75 	bl	800558c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d811      	bhi.n	80068d4 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	1c58      	adds	r0, r3, #1
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6088      	str	r0, [r1, #8]
 80068be:	4413      	add	r3, r2
 80068c0:	79fa      	ldrb	r2, [r7, #7]
 80068c2:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	4413      	add	r3, r2
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 80068d2:	e00f      	b.n	80068f4 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d209      	bcs.n	80068f4 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	1c58      	adds	r0, r3, #1
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	6088      	str	r0, [r1, #8]
 80068ee:	4413      	add	r3, r2
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	6039      	str	r1, [r7, #0]
 8006906:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	2200      	movs	r2, #0
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ffac 	bl	800686c <mg_pfn_iobuf_private>
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	2201      	movs	r2, #1
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff ff9c 	bl	800686c <mg_pfn_iobuf_private>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	2300      	movs	r3, #0
 8006958:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800695a:	f107 0114 	add.w	r1, r7, #20
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4809      	ldr	r0, [pc, #36]	; (8006988 <mg_vsnprintf+0x4c>)
 8006964:	f7fb fc5e 	bl	8002224 <mg_vxprintf>
 8006968:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 800696a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d204      	bcs.n	800697c <mg_vsnprintf+0x40>
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	4413      	add	r3, r2
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
  return n;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800697e:	4618      	mov	r0, r3
 8006980:	3728      	adds	r7, #40	; 0x28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	080068fd 	.word	0x080068fd

0800698c <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 800698c:	b40c      	push	{r2, r3}
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8006998:	f107 031c 	add.w	r3, r7, #28
 800699c:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 800699e:	f107 0308 	add.w	r3, r7, #8
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff ffc8 	bl	800693c <mg_vsnprintf>
 80069ac:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 80069ae:	68fb      	ldr	r3, [r7, #12]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ba:	b002      	add	sp, #8
 80069bc:	4770      	bx	lr

080069be <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	4603      	mov	r3, r0
 80069c6:	6039      	str	r1, [r7, #0]
 80069c8:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f00a fe87 	bl	80116e0 <putchar>
  (void) param;
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af04      	add	r7, sp, #16
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3301      	adds	r3, #1
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3302      	adds	r3, #2
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3303      	adds	r3, #3
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	9302      	str	r3, [sp, #8]
 8006a06:	9101      	str	r1, [sp, #4]
 8006a08:	9200      	str	r2, [sp, #0]
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <print_ip4+0x44>)
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7fb fbec 	bl	80021ee <mg_xprintf>
 8006a16:	4603      	mov	r3, r0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	080133b4 	.word	0x080133b4

08006a24 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	b08e      	sub	sp, #56	; 0x38
 8006a2a:	af08      	add	r7, sp, #32
 8006a2c:	6178      	str	r0, [r7, #20]
 8006a2e:	6139      	str	r1, [r7, #16]
 8006a30:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 f949 	bl	8007cce <mg_ntohs>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3302      	adds	r3, #2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 f941 	bl	8007cce <mg_ntohs>
 8006a4c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a4e:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3304      	adds	r3, #4
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f939 	bl	8007cce <mg_ntohs>
 8006a5c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a5e:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3306      	adds	r3, #6
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f931 	bl	8007cce <mg_ntohs>
 8006a6c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a6e:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3308      	adds	r3, #8
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f929 	bl	8007cce <mg_ntohs>
 8006a7c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a7e:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	330a      	adds	r3, #10
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f921 	bl	8007cce <mg_ntohs>
 8006a8c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a8e:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	330c      	adds	r3, #12
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f919 	bl	8007cce <mg_ntohs>
 8006a9c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006a9e:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	330e      	adds	r3, #14
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f911 	bl	8007cce <mg_ntohs>
 8006aac:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8006aae:	9306      	str	r3, [sp, #24]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	9205      	str	r2, [sp, #20]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	9204      	str	r2, [sp, #16]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	9303      	str	r3, [sp, #12]
 8006abc:	9602      	str	r6, [sp, #8]
 8006abe:	9501      	str	r5, [sp, #4]
 8006ac0:	9400      	str	r4, [sp, #0]
 8006ac2:	4643      	mov	r3, r8
 8006ac4:	4a05      	ldr	r2, [pc, #20]	; (8006adc <print_ip6+0xb8>)
 8006ac6:	6939      	ldr	r1, [r7, #16]
 8006ac8:	6978      	ldr	r0, [r7, #20]
 8006aca:	f7fb fb90 	bl	80021ee <mg_xprintf>
 8006ace:	4603      	mov	r3, r0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ada:	bf00      	nop
 8006adc:	080133c0 	.word	0x080133c0

08006ae0 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	1d19      	adds	r1, r3, #4
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff ff6c 	bl	80069dc <print_ip4>
 8006b04:	4603      	mov	r3, r0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	1d19      	adds	r1, r3, #4
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6011      	str	r1, [r2, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	7c9b      	ldrb	r3, [r3, #18]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <mg_print_ip+0x32>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff ff74 	bl	8006a24 <print_ip6>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	e006      	b.n	8006b4e <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	461a      	mov	r2, r3
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff ff48 	bl	80069dc <print_ip4>
 8006b4c:	4603      	mov	r3, r0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1d19      	adds	r1, r3, #4
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	8a1b      	ldrh	r3, [r3, #16]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f8a9 	bl	8007cce <mg_ntohs>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <mg_print_ip_port+0x44>)
 8006b86:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <mg_print_ip_port+0x48>)
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7fb fb2f 	bl	80021ee <mg_xprintf>
 8006b90:	4603      	mov	r3, r0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08006b0f 	.word	0x08006b0f
 8006ba0:	080133dc 	.word	0x080133dc

08006ba4 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8006ba4:	b5b0      	push	{r4, r5, r7, lr}
 8006ba6:	b08c      	sub	sp, #48	; 0x30
 8006ba8:	af06      	add	r7, sp, #24
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	1d19      	adds	r1, r3, #4
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6011      	str	r1, [r2, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	461d      	mov	r5, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3303      	adds	r3, #3
 8006bd8:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006bda:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3304      	adds	r3, #4
 8006be0:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006be2:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	3305      	adds	r3, #5
 8006be8:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	9403      	str	r4, [sp, #12]
 8006bee:	9002      	str	r0, [sp, #8]
 8006bf0:	9101      	str	r1, [sp, #4]
 8006bf2:	9200      	str	r2, [sp, #0]
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	4a05      	ldr	r2, [pc, #20]	; (8006c0c <mg_print_mac+0x68>)
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7fb faf7 	bl	80021ee <mg_xprintf>
 8006c00:	4603      	mov	r3, r0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bdb0      	pop	{r4, r5, r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	080133e4 	.word	0x080133e4

08006c10 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8006c1c:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <mg_esc+0x74>)
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <mg_esc+0x78>)
 8006c22:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <mg_esc+0x1e>
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	e000      	b.n	8006c30 <mg_esc+0x20>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e01b      	b.n	8006c6c <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d112      	bne.n	8006c66 <mg_esc+0x56>
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <mg_esc+0x46>
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4413      	add	r3, r2
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	e00f      	b.n	8006c76 <mg_esc+0x66>
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	e007      	b.n	8006c76 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1df      	bne.n	8006c34 <mg_esc+0x24>
  }
  return 0;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	08013230 	.word	0x08013230
 8006c88:	08013238 	.word	0x08013238

08006c8c <mg_escape>:

static char mg_escape(int c) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8006c94:	2101      	movs	r1, #1
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff ffba 	bl	8006c10 <mg_esc>
 8006c9c:	4603      	mov	r3, r0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b088      	sub	sp, #32
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	e023      	b.n	8006d0a <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff ffde 	bl	8006c8c <mg_escape>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	205c      	movs	r0, #92	; 0x5c
 8006ce0:	4798      	blx	r3
 8006ce2:	7dfa      	ldrb	r2, [r7, #23]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e007      	b.n	8006d04 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	3301      	adds	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d205      	bcs.n	8006d1e <qcpy+0x78>
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1d1      	bne.n	8006cc2 <qcpy+0x1c>
    }
  }
  return i + extra;
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4413      	add	r3, r2
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	1d19      	adds	r1, r3, #4
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6011      	str	r1, [r2, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	1d19      	adds	r1, r3, #4
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6011      	str	r1, [r2, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <mg_print_esc+0x42>
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <mg_print_esc+0x3e>
 8006d60:	6938      	ldr	r0, [r7, #16]
 8006d62:	f7f9 fab5 	bl	80002d0 <strlen>
 8006d66:	4603      	mov	r3, r0
 8006d68:	e000      	b.n	8006d6c <mg_print_esc+0x40>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff ff96 	bl	8006ca6 <qcpy>
 8006d7a:	4603      	mov	r3, r0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8006d90:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	1d1a      	adds	r2, r3, #4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d906      	bls.n	8006dc2 <mg_queue_read_len+0x3e>
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <mg_queue_read_len+0x48>)
 8006db6:	4a06      	ldr	r2, [pc, #24]	; (8006dd0 <mg_queue_read_len+0x4c>)
 8006db8:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8006dbc:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <mg_queue_read_len+0x50>)
 8006dbe:	f00a fa05 	bl	80111cc <__assert_func>
  return n;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	08013448 	.word	0x08013448
 8006dd0:	08013f40 	.word	0x08013f40
 8006dd4:	0801261c 	.word	0x0801261c

08006dd8 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8006df4:	f3bf 8f5b 	dmb	ish
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	2308      	movs	r3, #8
 8006e16:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d312      	bcc.n	8006e4a <mg_queue_book+0x46>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	441a      	add	r2, r3
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	441a      	add	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d808      	bhi.n	8006e4a <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	1ad2      	subs	r2, r2, r3
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e011      	b.n	8006e6e <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d30b      	bcc.n	8006e6e <mg_queue_book+0x6a>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d206      	bcs.n	8006e6e <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8006e60:	2100      	movs	r1, #0
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff ffb8 	bl	8006dd8 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d207      	bcs.n	8006e92 <mg_queue_book+0x8e>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	1ad2      	subs	r2, r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d007      	beq.n	8006ea8 <mg_queue_book+0xa4>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	441a      	add	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	601a      	str	r2, [r3, #0]
  return space;
 8006ea8:	697b      	ldr	r3, [r7, #20]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d013      	beq.n	8006ef6 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff ff58 	bl	8006d84 <mg_queue_read_len>
 8006ed4:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10c      	bne.n	8006ef6 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d903      	bls.n	8006ef6 <mg_queue_next+0x42>
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff ff48 	bl	8006d84 <mg_queue_read_len>
 8006ef4:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <mg_queue_next+0x58>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	3304      	adds	r3, #4
 8006f06:	441a      	add	r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	441a      	add	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d906      	bls.n	8006f2a <mg_queue_next+0x76>
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <mg_queue_next+0x80>)
 8006f1e:	4a06      	ldr	r2, [pc, #24]	; (8006f38 <mg_queue_next+0x84>)
 8006f20:	f640 71e6 	movw	r1, #4070	; 0xfe6
 8006f24:	4805      	ldr	r0, [pc, #20]	; (8006f3c <mg_queue_next+0x88>)
 8006f26:	f00a f951 	bl	80111cc <__assert_func>
  return len;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	0801346c 	.word	0x0801346c
 8006f38:	08013f54 	.word	0x08013f54
 8006f3c:	0801261c 	.word	0x0801261c

08006f40 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <mg_queue_add+0x1e>
 8006f50:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <mg_queue_add+0x60>)
 8006f52:	4a14      	ldr	r2, [pc, #80]	; (8006fa4 <mg_queue_add+0x64>)
 8006f54:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8006f58:	4813      	ldr	r0, [pc, #76]	; (8006fa8 <mg_queue_add+0x68>)
 8006f5a:	f00a f937 	bl	80111cc <__assert_func>
  mg_queue_write_len(q, len);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff ff39 	bl	8006dd8 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f103 0208 	add.w	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d906      	bls.n	8006f88 <mg_queue_add+0x48>
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <mg_queue_add+0x6c>)
 8006f7c:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <mg_queue_add+0x64>)
 8006f7e:	f640 71ed 	movw	r1, #4077	; 0xfed
 8006f82:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <mg_queue_add+0x68>)
 8006f84:	f00a f922 	bl	80111cc <__assert_func>
  q->head += len + sizeof(uint32_t);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	4413      	add	r3, r2
 8006f90:	1d1a      	adds	r2, r3, #4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	08013488 	.word	0x08013488
 8006fa4:	08013f64 	.word	0x08013f64
 8006fa8:	0801261c 	.word	0x0801261c
 8006fac:	08013490 	.word	0x08013490

08006fb0 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	1d1a      	adds	r2, r3, #4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	1d1a      	adds	r2, r3, #4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d906      	bls.n	8006fe4 <mg_queue_del+0x34>
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <mg_queue_del+0x3c>)
 8006fd8:	4a05      	ldr	r2, [pc, #20]	; (8006ff0 <mg_queue_del+0x40>)
 8006fda:	f640 71f3 	movw	r1, #4083	; 0xff3
 8006fde:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <mg_queue_del+0x44>)
 8006fe0:	f00a f8f4 	bl	80111cc <__assert_func>
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	080134c0 	.word	0x080134c0
 8006ff0:	08013f74 	.word	0x08013f74
 8006ff4:	0801261c 	.word	0x0801261c

08006ff8 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <mg_http_serve_ssi+0x24>)
 8007006:	2200      	movs	r2, #0
 8007008:	f240 11f5 	movw	r1, #501	; 0x1f5
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7fd f847 	bl	80040a0 <mg_http_reply>
  (void) root, (void) fullpath;
}
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	08013670 	.word	0x08013670

08007020 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <mg_str_s+0x1e>
 8007034:	6838      	ldr	r0, [r7, #0]
 8007036:	f7f9 f94b 	bl	80002d0 <strlen>
 800703a:	4603      	mov	r3, r0
 800703c:	e000      	b.n	8007040 <mg_str_s+0x20>
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
  return str;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	461a      	mov	r2, r3
 8007046:	f107 0308 	add.w	r3, r7, #8
 800704a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800704e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800705a:	b480      	push	{r7}
 800705c:	b087      	sub	sp, #28
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	617b      	str	r3, [r7, #20]
  return str;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	461a      	mov	r2, r3
 8007072:	f107 0310 	add.w	r3, r7, #16
 8007076:	e893 0003 	ldmia.w	r3, {r0, r1}
 800707a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <mg_lower>:

int mg_lower(const char *s) {
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  int c = *s;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	dd05      	ble.n	80070aa <mg_lower+0x20>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b5a      	cmp	r3, #90	; 0x5a
 80070a2:	dc02      	bgt.n	80070aa <mg_lower+0x20>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3320      	adds	r3, #32
 80070a8:	60fb      	str	r3, [r7, #12]
  return c;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  int diff = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01d      	beq.n	800710a <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	60fa      	str	r2, [r7, #12]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff ffd8 	bl	800708a <mg_lower>
 80070da:	4604      	mov	r4, r0
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	60ba      	str	r2, [r7, #8]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff ffd1 	bl	800708a <mg_lower>
 80070e8:	4603      	mov	r3, r0
 80070ea:	1ae3      	subs	r3, r4, r3
 80070ec:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <mg_ncasecmp+0x52>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <mg_ncasecmp+0x52>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3b01      	subs	r3, #1
 8007102:	607b      	str	r3, [r7, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1e1      	bne.n	80070ce <mg_ncasecmp+0x16>
  return diff;
 800710a:	697b      	ldr	r3, [r7, #20]
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	bd90      	pop	{r4, r7, pc}

08007114 <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f7f9 f8d6 	bl	80002d0 <strlen>
 8007124:	6178      	str	r0, [r7, #20]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4293      	cmp	r3, r2
 8007136:	bf28      	it	cs
 8007138:	4613      	movcs	r3, r2
 800713a:	461a      	mov	r2, r3
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	f00a fb59 	bl	80117f4 <strncmp>
 8007142:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <mg_vcmp+0x3e>
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	e000      	b.n	8007154 <mg_vcmp+0x40>
  return r;
 8007152:	68fb      	ldr	r3, [r7, #12]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 8007166:	6838      	ldr	r0, [r7, #0]
 8007168:	f7f9 f8b2 	bl	80002d0 <strlen>
 800716c:	6178      	str	r0, [r7, #20]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4293      	cmp	r3, r2
 800717e:	bf28      	it	cs
 8007180:	4613      	movcs	r3, r2
 8007182:	461a      	mov	r2, r3
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	f7ff ff97 	bl	80070b8 <mg_ncasecmp>
 800718a:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <mg_vcasecmp+0x3e>
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	e000      	b.n	800719c <mg_vcasecmp+0x40>
  return r;
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80071a4:	b490      	push	{r4, r7}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	f107 0408 	add.w	r4, r7, #8
 80071ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80071b2:	4639      	mov	r1, r7
 80071b4:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80071bc:	e019      	b.n	80071f2 <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	da02      	bge.n	80071e0 <mg_strcmp+0x3c>
 80071da:	f04f 33ff 	mov.w	r3, #4294967295
 80071de:	e01e      	b.n	800721e <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	dd01      	ble.n	80071ec <mg_strcmp+0x48>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e018      	b.n	800721e <mg_strcmp+0x7a>
    i++;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	3301      	adds	r3, #1
 80071f0:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d203      	bcs.n	8007202 <mg_strcmp+0x5e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d3dd      	bcc.n	80071be <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	429a      	cmp	r2, r3
 8007208:	d201      	bcs.n	800720e <mg_strcmp+0x6a>
 800720a:	2301      	movs	r3, #1
 800720c:	e007      	b.n	800721e <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	429a      	cmp	r2, r3
 8007214:	d202      	bcs.n	800721c <mg_strcmp+0x78>
 8007216:	f04f 33ff 	mov.w	r3, #4294967295
 800721a:	e000      	b.n	800721e <mg_strcmp+0x7a>
  return 0;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bc90      	pop	{r4, r7}
 8007226:	4770      	bx	lr

08007228 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 8007228:	b590      	push	{r4, r7, lr}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	f107 0408 	add.w	r4, r7, #8
 8007232:	e884 0003 	stmia.w	r4, {r0, r1}
 8007236:	4639      	mov	r1, r7
 8007238:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	429a      	cmp	r2, r3
 8007242:	d901      	bls.n	8007248 <mg_strstr+0x20>
 8007244:	2300      	movs	r3, #0
 8007246:	e020      	b.n	800728a <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <mg_strstr+0x2a>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	e01b      	b.n	800728a <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	e011      	b.n	800727c <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4618      	mov	r0, r3
 8007264:	f00a fa87 	bl	8011776 <memcmp>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <mg_strstr+0x4e>
      return haystack.ptr + i;
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	e009      	b.n	800728a <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	3301      	adds	r3, #1
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	429a      	cmp	r2, r3
 8007286:	d9e7      	bls.n	8007258 <mg_strstr+0x30>
    }
  }
  return NULL;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd90      	pop	{r4, r7, pc}

08007292 <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8007292:	b490      	push	{r4, r7}
 8007294:	b088      	sub	sp, #32
 8007296:	af00      	add	r7, sp, #0
 8007298:	f107 0408 	add.w	r4, r7, #8
 800729c:	e884 0003 	stmia.w	r4, {r0, r1}
 80072a0:	4639      	mov	r1, r7
 80072a2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	2300      	movs	r3, #0
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	2300      	movs	r3, #0
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 80ad 	beq.w	8007418 <mg_match+0x186>
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 80072ca:	e0a5      	b.n	8007418 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d24f      	bcs.n	8007374 <mg_match+0xe2>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d24b      	bcs.n	8007374 <mg_match+0xe2>
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	4413      	add	r3, r2
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b3f      	cmp	r3, #63	; 0x3f
 80072e6:	d009      	beq.n	80072fc <mg_match+0x6a>
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	4413      	add	r3, r2
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	440b      	add	r3, r1
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d13b      	bne.n	8007374 <mg_match+0xe2>
      if (caps == NULL) {
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d031      	beq.n	8007366 <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b3f      	cmp	r3, #63	; 0x3f
 800730c:	d111      	bne.n	8007332 <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	441a      	add	r2, r3
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	2201      	movs	r2, #1
 800731c:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	3308      	adds	r3, #8
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	2200      	movs	r2, #0
 800732e:	605a      	str	r2, [r3, #4]
 8007330:	e019      	b.n	8007366 <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d015      	beq.n	8007366 <mg_match+0xd4>
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d111      	bne.n	8007366 <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	441a      	add	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	461a      	mov	r2, r3
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	3308      	adds	r3, #8
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	2200      	movs	r2, #0
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	3301      	adds	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	3301      	adds	r3, #1
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e051      	b.n	8007418 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69fa      	ldr	r2, [r7, #28]
 8007378:	429a      	cmp	r2, r3
 800737a:	d222      	bcs.n	80073c2 <mg_match+0x130>
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	2b2a      	cmp	r3, #42	; 0x2a
 8007386:	d005      	beq.n	8007394 <mg_match+0x102>
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b23      	cmp	r3, #35	; 0x23
 8007392:	d116      	bne.n	80073c2 <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <mg_match+0x120>
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d107      	bne.n	80073b2 <mg_match+0x120>
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	441a      	add	r2, r3
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	61fa      	str	r2, [r7, #28]
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	3301      	adds	r3, #1
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	e02a      	b.n	8007418 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d025      	beq.n	8007414 <mg_match+0x182>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d821      	bhi.n	8007414 <mg_match+0x182>
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b23      	cmp	r3, #35	; 0x23
 80073da:	d005      	beq.n	80073e8 <mg_match+0x156>
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	4413      	add	r3, r2
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b2f      	cmp	r3, #47	; 0x2f
 80073e6:	d015      	beq.n	8007414 <mg_match+0x182>
      i = ni, j = nj;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d010      	beq.n	8007418 <mg_match+0x186>
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10c      	bne.n	8007418 <mg_match+0x186>
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d108      	bne.n	8007418 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	3b08      	subs	r3, #8
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	2200      	movs	r2, #0
 8007410:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8007412:	e001      	b.n	8007418 <mg_match+0x186>
      }
    } else {
      return false;
 8007414:	2300      	movs	r3, #0
 8007416:	e01e      	b.n	8007456 <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	429a      	cmp	r2, r3
 800741e:	f4ff af55 	bcc.w	80072cc <mg_match+0x3a>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	429a      	cmp	r2, r3
 8007428:	f4ff af50 	bcc.w	80072cc <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <mg_match+0x1c2>
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00c      	beq.n	8007454 <mg_match+0x1c2>
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d108      	bne.n	8007454 <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	441a      	add	r2, r3
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	461a      	mov	r2, r3
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	605a      	str	r2, [r3, #4]
  }
  return true;
 8007454:	2301      	movs	r3, #1
}
 8007456:	4618      	mov	r0, r3
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bc90      	pop	{r4, r7}
 800745e:	4770      	bx	lr

08007460 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 800746e:	f107 0310 	add.w	r3, r7, #16
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fdef 	bl	800705a <mg_str_n>
 800747c:	f107 0318 	add.w	r3, r7, #24
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fde8 	bl	800705a <mg_str_n>
 800748a:	2300      	movs	r3, #0
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	f107 0318 	add.w	r3, r7, #24
 8007492:	cb0c      	ldmia	r3, {r2, r3}
 8007494:	f107 0110 	add.w	r1, r7, #16
 8007498:	c903      	ldmia	r1, {r0, r1}
 800749a:	f7ff fefa 	bl	8007292 <mg_match>
 800749e:	4603      	mov	r3, r0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	e002      	b.n	80074c2 <mg_nce+0x1a>
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3301      	adds	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	4413      	add	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d909      	bls.n	80074e2 <mg_nce+0x3a>
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80074de:	429a      	cmp	r2, r3
 80074e0:	d1ec      	bne.n	80074bc <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	e002      	b.n	80074ee <mg_nce+0x46>
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3301      	adds	r3, #1
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d207      	bcs.n	8007506 <mg_nce+0x5e>
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b3d      	cmp	r3, #61	; 0x3d
 8007504:	d1f0      	bne.n	80074e8 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <mg_nce+0x6a>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <mg_nce+0x76>
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <mg_nce+0x94>
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	429a      	cmp	r2, r3
 800752a:	d204      	bcs.n	8007536 <mg_nce+0x8e>
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	3301      	adds	r3, #1
 8007534:	e000      	b.n	8007538 <mg_nce+0x90>
 8007536:	2300      	movs	r3, #0
 8007538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753a:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00b      	beq.n	800755a <mg_nce+0xb2>
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	429a      	cmp	r2, r3
 8007548:	d204      	bcs.n	8007554 <mg_nce+0xac>
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	e000      	b.n	8007556 <mg_nce+0xae>
 8007554:	2300      	movs	r3, #0
 8007556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007558:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4413      	add	r3, r2
 8007560:	3301      	adds	r3, #1
 8007562:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4293      	cmp	r3, r2
 800756a:	bf28      	it	cs
 800756c:	4613      	movcs	r3, r2
}
 800756e:	4618      	mov	r0, r3
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 800757a:	b590      	push	{r4, r7, lr}
 800757c:	b091      	sub	sp, #68	; 0x44
 800757e:	af04      	add	r7, sp, #16
 8007580:	6178      	str	r0, [r7, #20]
 8007582:	6139      	str	r1, [r7, #16]
 8007584:	60fa      	str	r2, [r7, #12]
 8007586:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	62bb      	str	r3, [r7, #40]	; 0x28
 800758c:	2300      	movs	r3, #0
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
 8007590:	2300      	movs	r3, #0
 8007592:	623b      	str	r3, [r7, #32]
 8007594:	2300      	movs	r3, #0
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	2300      	movs	r3, #0
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <mg_split+0x32>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <mg_split+0x36>
 80075ac:	2300      	movs	r3, #0
 80075ae:	e054      	b.n	800765a <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	6859      	ldr	r1, [r3, #4]
 80075b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	9303      	str	r3, [sp, #12]
 80075c0:	f107 031c 	add.w	r3, r7, #28
 80075c4:	9302      	str	r3, [sp, #8]
 80075c6:	f107 0320 	add.w	r3, r7, #32
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	2200      	movs	r2, #0
 80075d6:	f7ff ff67 	bl	80074a8 <mg_nce>
 80075da:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00f      	beq.n	8007602 <mg_split+0x88>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	18d1      	adds	r1, r2, r3
 80075ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ec:	693c      	ldr	r4, [r7, #16]
 80075ee:	463b      	mov	r3, r7
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff fd32 	bl	800705a <mg_str_n>
 80075f6:	4622      	mov	r2, r4
 80075f8:	463b      	mov	r3, r7
 80075fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80075fe:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00f      	beq.n	8007628 <mg_split+0xae>
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	18d1      	adds	r1, r2, r3
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	68fc      	ldr	r4, [r7, #12]
 8007614:	463b      	mov	r3, r7
 8007616:	4618      	mov	r0, r3
 8007618:	f7ff fd1f 	bl	800705a <mg_str_n>
 800761c:	4622      	mov	r2, r4
 800761e:	463b      	mov	r3, r7
 8007620:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007624:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	18d1      	adds	r1, r2, r3
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	697c      	ldr	r4, [r7, #20]
 800763a:	463b      	mov	r3, r7
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fd0c 	bl	800705a <mg_str_n>
 8007642:	4622      	mov	r2, r4
 8007644:	463b      	mov	r3, r7
 8007646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800764a:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	2b00      	cmp	r3, #0
 8007652:	bf14      	ite	ne
 8007654:	2301      	movne	r3, #1
 8007656:	2300      	moveq	r3, #0
 8007658:	b2db      	uxtb	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	3734      	adds	r7, #52	; 0x34
 800765e:	46bd      	mov	sp, r7
 8007660:	bd90      	pop	{r4, r7, pc}

08007662 <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 800766e:	232c      	movs	r3, #44	; 0x2c
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ff80 	bl	800757a <mg_split>
 800767a:	4603      	mov	r3, r0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <mg_unhex_nimble>:
  }
  to[i] = '\0';
  return to;
}

static unsigned char mg_unhex_nimble(unsigned char c) {
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	2b2f      	cmp	r3, #47	; 0x2f
 8007692:	d906      	bls.n	80076a2 <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	2b39      	cmp	r3, #57	; 0x39
 8007698:	d803      	bhi.n	80076a2 <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	3b30      	subs	r3, #48	; 0x30
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	e00c      	b.n	80076bc <mg_unhex_nimble+0x38>
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	d906      	bls.n	80076b6 <mg_unhex_nimble+0x32>
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	2b46      	cmp	r3, #70	; 0x46
 80076ac:	d803      	bhi.n	80076b6 <mg_unhex_nimble+0x32>
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	3b37      	subs	r3, #55	; 0x37
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	e002      	b.n	80076bc <mg_unhex_nimble+0x38>
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	3b57      	subs	r3, #87	; 0x57
 80076ba:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e011      	b.n	8007704 <mg_unhexn+0x3c>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	60bb      	str	r3, [r7, #8]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff ffc8 	bl	8007684 <mg_unhex_nimble>
 80076f4:	4603      	mov	r3, r0
 80076f6:	461a      	mov	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60bb      	str	r3, [r7, #8]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d3e9      	bcc.n	80076e0 <mg_unhexn+0x18>
  return v;
 800770c:	68bb      	ldr	r3, [r7, #8]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 8007716:	b580      	push	{r7, lr}
 8007718:	b086      	sub	sp, #24
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	e010      	b.n	800774a <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	2102      	movs	r1, #2
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff ffc9 	bl	80076c8 <mg_unhexn>
 8007736:	4601      	mov	r1, r0
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	b2ca      	uxtb	r2, r1
 8007742:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	3302      	adds	r3, #2
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	429a      	cmp	r2, r3
 8007750:	d3ea      	bcc.n	8007728 <mg_unhex+0x12>
  }
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  const char *s = path;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 8007768:	e01a      	b.n	80077a0 <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	429a      	cmp	r2, r3
 8007770:	d007      	beq.n	8007782 <mg_path_is_sane+0x26>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b2f      	cmp	r3, #47	; 0x2f
 8007778:	d003      	beq.n	8007782 <mg_path_is_sane+0x26>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b5c      	cmp	r3, #92	; 0x5c
 8007780:	d10b      	bne.n	800779a <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b2e      	cmp	r3, #46	; 0x2e
 800778a:	d106      	bne.n	800779a <mg_path_is_sane+0x3e>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3302      	adds	r3, #2
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b2e      	cmp	r3, #46	; 0x2e
 8007794:	d101      	bne.n	800779a <mg_path_is_sane+0x3e>
 8007796:	2300      	movs	r3, #0
 8007798:	e007      	b.n	80077aa <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e0      	bne.n	800776a <mg_path_is_sane+0xe>
    }
  }
  return true;
 80077a8:	2301      	movs	r3, #1
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	619a      	str	r2, [r3, #24]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	61da      	str	r2, [r3, #28]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	621a      	str	r2, [r3, #32]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800780e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6178      	str	r0, [r7, #20]
 8007818:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800781c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007824:	eb10 0a02 	adds.w	sl, r0, r2
 8007828:	eb41 0b03 	adc.w	fp, r1, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	4592      	cmp	sl, r2
 8007834:	eb7b 0303 	sbcs.w	r3, fp, r3
 8007838:	d206      	bcs.n	8007848 <mg_timer_expired+0x3a>
 800783a:	6979      	ldr	r1, [r7, #20]
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	4313      	orrs	r3, r2
 8007850:	d10d      	bne.n	800786e <mg_timer_expired+0x60>
 8007852:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800785a:	1886      	adds	r6, r0, r2
 800785c:	603e      	str	r6, [r7, #0]
 800785e:	eb41 0303 	adc.w	r3, r1, r3
 8007862:	607b      	str	r3, [r7, #4]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	e9d7 1200 	ldrd	r1, r2, [r7]
 800786a:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007878:	4290      	cmp	r0, r2
 800787a:	eb71 0303 	sbcs.w	r3, r1, r3
 800787e:	d201      	bcs.n	8007884 <mg_timer_expired+0x76>
 8007880:	2300      	movs	r3, #0
 8007882:	e022      	b.n	80078ca <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800788e:	ebb0 0802 	subs.w	r8, r0, r2
 8007892:	eb61 0903 	sbc.w	r9, r1, r3
 8007896:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800789a:	4542      	cmp	r2, r8
 800789c:	eb73 0309 	sbcs.w	r3, r3, r9
 80078a0:	d207      	bcs.n	80078b2 <mg_timer_expired+0xa4>
 80078a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80078a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078aa:	1884      	adds	r4, r0, r2
 80078ac:	eb41 0503 	adc.w	r5, r1, r3
 80078b0:	e007      	b.n	80078c2 <mg_timer_expired+0xb4>
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078bc:	1884      	adds	r4, r0, r2
 80078be:	eb41 0503 	adc.w	r5, r1, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80078c8:	2301      	movs	r3, #1
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078d4:	4770      	bx	lr

080078d6 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80078d6:	b590      	push	{r4, r7, lr}
 80078d8:	b08b      	sub	sp, #44	; 0x2c
 80078da:	af02      	add	r7, sp, #8
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	e054      	b.n	8007994 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	d10d      	bne.n	8007910 <mg_timer_poll+0x3a>
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <mg_timer_poll+0x3a>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <mg_timer_poll+0x3c>
 8007910:	2300      	movs	r3, #0
 8007912:	76fb      	strb	r3, [r7, #27]
 8007914:	7efb      	ldrb	r3, [r7, #27]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f103 0410 	add.w	r4, r3, #16
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792c:	e9cd 2300 	strd	r2, r3, [sp]
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4620      	mov	r0, r4
 8007936:	f7ff ff6a 	bl	800780e <mg_timer_expired>
 800793a:	4603      	mov	r3, r0
 800793c:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8007944:	7efb      	ldrb	r3, [r7, #27]
 8007946:	f083 0301 	eor.w	r3, r3, #1
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <mg_timer_poll+0x86>
 8007950:	7ebb      	ldrb	r3, [r7, #26]
 8007952:	f083 0301 	eor.w	r3, r3, #1
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d118      	bne.n	800798e <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d105      	bne.n	8007974 <mg_timer_poll+0x9e>
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	6a12      	ldr	r2, [r2, #32]
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	f043 0204 	orr.w	r2, r3, #4
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	619a      	str	r2, [r3, #24]
 800798c:	e000      	b.n	8007990 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800798e:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1a7      	bne.n	80078ea <mg_timer_poll+0x14>
  }
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	3724      	adds	r7, #36	; 0x24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd90      	pop	{r4, r7, pc}

080079a4 <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, struct mg_str hostname) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	e883 0006 	stmia.w	r3, {r1, r2}
  (void) hostname;
  mg_error(c, "TLS is not enabled");
 80079b2:	4904      	ldr	r1, [pc, #16]	; (80079c4 <mg_tls_init+0x20>)
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7f9 ff27 	bl	8001808 <mg_error>
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	08013680 	.word	0x08013680

080079c8 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <mg_tls_recv+0x1e>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <mg_tls_recv+0x1e>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <mg_tls_recv+0x22>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e001      	b.n	8007a16 <mg_tls_recv+0x26>
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <mg_tls_send+0x1e>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <mg_tls_send+0x1e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <mg_tls_send+0x22>
 8007a40:	2300      	movs	r3, #0
 8007a42:	e001      	b.n	8007a48 <mg_tls_send+0x26>
 8007a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	4917      	ldr	r1, [pc, #92]	; (8007abc <mg_url_is_ssl+0x68>)
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f009 fec7 	bl	80117f4 <strncmp>
 8007a66:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01f      	beq.n	8007aac <mg_url_is_ssl+0x58>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	4914      	ldr	r1, [pc, #80]	; (8007ac0 <mg_url_is_ssl+0x6c>)
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f009 febf 	bl	80117f4 <strncmp>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d017      	beq.n	8007aac <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007a7c:	2206      	movs	r2, #6
 8007a7e:	4911      	ldr	r1, [pc, #68]	; (8007ac4 <mg_url_is_ssl+0x70>)
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f009 feb7 	bl	80117f4 <strncmp>
 8007a86:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00f      	beq.n	8007aac <mg_url_is_ssl+0x58>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	490e      	ldr	r1, [pc, #56]	; (8007ac8 <mg_url_is_ssl+0x74>)
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f009 feaf 	bl	80117f4 <strncmp>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d007      	beq.n	8007aac <mg_url_is_ssl+0x58>
         strncmp(url, "tls:", 4) == 0;
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	490b      	ldr	r1, [pc, #44]	; (8007acc <mg_url_is_ssl+0x78>)
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f009 fea7 	bl	80117f4 <strncmp>
 8007aa6:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <mg_url_is_ssl+0x5c>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <mg_url_is_ssl+0x5e>
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	08013694 	.word	0x08013694
 8007ac0:	0801369c 	.word	0x0801369c
 8007ac4:	080136a4 	.word	0x080136a4
 8007ac8:	080136ac 	.word	0x080136ac
 8007acc:	080136b4 	.word	0x080136b4

08007ad0 <urlparse>:

static struct url urlparse(const char *url) {
 8007ad0:	b5b0      	push	{r4, r5, r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8007ada:	f107 0308 	add.w	r3, r7, #8
 8007ade:	221c      	movs	r2, #28
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f009 fe71 	bl	80117ca <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8007ae8:	2300      	movs	r3, #0
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
 8007aec:	e05b      	b.n	8007ba6 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	4413      	add	r3, r2
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b2f      	cmp	r3, #47	; 0x2f
 8007af8:	d112      	bne.n	8007b20 <urlparse+0x50>
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00f      	beq.n	8007b20 <urlparse+0x50>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10c      	bne.n	8007b20 <urlparse+0x50>
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b2f      	cmp	r3, #47	; 0x2f
 8007b12:	d105      	bne.n	8007b20 <urlparse+0x50>
      u.host = i + 1;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	3301      	adds	r3, #1
 8007b18:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e03f      	b.n	8007ba0 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	4413      	add	r3, r2
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b5d      	cmp	r3, #93	; 0x5d
 8007b2a:	d102      	bne.n	8007b32 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e036      	b.n	8007ba0 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	4413      	add	r3, r2
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b3a      	cmp	r3, #58	; 0x3a
 8007b3c:	d109      	bne.n	8007b52 <urlparse+0x82>
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <urlparse+0x82>
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <urlparse+0x82>
      u.port = i + 1;
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	61bb      	str	r3, [r7, #24]
 8007b50:	e026      	b.n	8007ba0 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	4413      	add	r3, r2
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d112      	bne.n	8007b84 <urlparse+0xb4>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10f      	bne.n	8007b84 <urlparse+0xb4>
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10c      	bne.n	8007b84 <urlparse+0xb4>
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <urlparse+0xb4>
      u.user = u.host;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	e00d      	b.n	8007ba0 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	4413      	add	r3, r2
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b2f      	cmp	r3, #47	; 0x2f
 8007b8e:	d107      	bne.n	8007ba0 <urlparse+0xd0>
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <urlparse+0xd0>
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <urlparse+0xd0>
      u.uri = i;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	4413      	add	r3, r2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d19d      	bne.n	8007aee <urlparse+0x1e>
    }
  }
  u.end = i;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	461d      	mov	r5, r3
 8007bba:	f107 0408 	add.w	r4, r7, #8
 8007bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bc2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007bc6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	3728      	adds	r7, #40	; 0x28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007bd4 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff ff74 	bl	8007ad0 <urlparse>
  unsigned short port = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8007bec:	2205      	movs	r2, #5
 8007bee:	4925      	ldr	r1, [pc, #148]	; (8007c84 <mg_url_port+0xb0>)
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f009 fdff 	bl	80117f4 <strncmp>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d007      	beq.n	8007c0c <mg_url_port+0x38>
 8007bfc:	2203      	movs	r2, #3
 8007bfe:	4922      	ldr	r1, [pc, #136]	; (8007c88 <mg_url_port+0xb4>)
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f009 fdf7 	bl	80117f4 <strncmp>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <mg_url_port+0x3c>
 8007c0c:	2350      	movs	r3, #80	; 0x50
 8007c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8007c10:	2204      	movs	r2, #4
 8007c12:	491e      	ldr	r1, [pc, #120]	; (8007c8c <mg_url_port+0xb8>)
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f009 fded 	bl	80117f4 <strncmp>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d007      	beq.n	8007c30 <mg_url_port+0x5c>
 8007c20:	2206      	movs	r2, #6
 8007c22:	491b      	ldr	r1, [pc, #108]	; (8007c90 <mg_url_port+0xbc>)
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f009 fde5 	bl	80117f4 <strncmp>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <mg_url_port+0x62>
    port = 443;
 8007c30:	f240 13bb 	movw	r3, #443	; 0x1bb
 8007c34:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8007c36:	2205      	movs	r2, #5
 8007c38:	4916      	ldr	r1, [pc, #88]	; (8007c94 <mg_url_port+0xc0>)
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f009 fdda 	bl	80117f4 <strncmp>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <mg_url_port+0x78>
 8007c46:	f240 735b 	movw	r3, #1883	; 0x75b
 8007c4a:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8007c4c:	2206      	movs	r2, #6
 8007c4e:	4912      	ldr	r1, [pc, #72]	; (8007c98 <mg_url_port+0xc4>)
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f009 fdcf 	bl	80117f4 <strncmp>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <mg_url_port+0x8e>
 8007c5c:	f242 23b3 	movw	r3, #8883	; 0x22b3
 8007c60:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d007      	beq.n	8007c78 <mg_url_port+0xa4>
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f009 faca 	bl	8011208 <atoi>
 8007c74:	4603      	mov	r3, r0
 8007c76:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 8007c78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3728      	adds	r7, #40	; 0x28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	080136bc 	.word	0x080136bc
 8007c88:	080136c4 	.word	0x080136c4
 8007c8c:	08013694 	.word	0x08013694
 8007c90:	0801369c 	.word	0x0801369c
 8007c94:	080136c8 	.word	0x080136c8
 8007c98:	080136a4 	.word	0x080136a4

08007c9c <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 8007caa:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007cb6:	7b7b      	ldrb	r3, [r7, #13]
 8007cb8:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8007cba:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8007cbc:	7b3b      	ldrb	r3, [r7, #12]
 8007cbe:	061b      	lsls	r3, r3, #24
 8007cc0:	4313      	orrs	r3, r2
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8007cd8:	2300      	movs	r3, #0
 8007cda:	81bb      	strh	r3, [r7, #12]
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 8007cde:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8007ce0:	7b7b      	ldrb	r3, [r7, #13]
 8007ce2:	b21a      	sxth	r2, r3
 8007ce4:	7b3b      	ldrb	r3, [r7, #12]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	b21b      	sxth	r3, r3
 8007cea:	4313      	orrs	r3, r2
 8007cec:	b21b      	sxth	r3, r3
 8007cee:	b29b      	uxth	r3, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007d0e:	e01f      	b.n	8007d50 <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *) buf++;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	60ba      	str	r2, [r7, #8]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 8007d1a:	7dfa      	ldrb	r2, [r7, #23]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4053      	eors	r3, r2
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	4a11      	ldr	r2, [pc, #68]	; (8007d6c <mg_crc32+0x70>)
 8007d26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	091b      	lsrs	r3, r3, #4
 8007d2e:	4053      	eors	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4053      	eors	r3, r2
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <mg_crc32+0x70>)
 8007d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	091b      	lsrs	r3, r3, #4
 8007d4c:	4053      	eors	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	1e5a      	subs	r2, r3, #1
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1da      	bne.n	8007d10 <mg_crc32+0x14>
  }
  return ~crc;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	43db      	mvns	r3, r3
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	08013f84 	.word	0x08013f84

08007d70 <mg_millis>:
  return allowed == '+';
}

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8007d70:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
 8007d74:	af00      	add	r7, sp, #0
#elif MG_ARCH == MG_ARCH_ZEPHYR
  return (uint64_t) k_uptime_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS1
  return (uint64_t) rt_time_get();
#elif MG_ARCH == MG_ARCH_CMSIS_RTOS2
  return (uint64_t) ((osKernelGetTickCount() * 1000) / osKernelGetTickFreq());
 8007d76:	f006 fc85 	bl	800e684 <osKernelGetTickCount>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d80:	fb02 f403 	mul.w	r4, r2, r3
 8007d84:	f006 fca6 	bl	800e6d4 <osKernelGetTickFreq>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	fbb4 f3f3 	udiv	r3, r4, r3
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4698      	mov	r8, r3
 8007d92:	4691      	mov	r9, r2
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}

08007da0 <eth_read_phy>:
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface
enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1, PHY_CSCR = 31 };

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	460a      	mov	r2, r1
 8007daa:	71fb      	strb	r3, [r7, #7]
 8007dac:	4613      	mov	r3, r2
 8007dae:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <eth_read_phy+0x5c>)
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <eth_read_phy+0x5c>)
 8007db6:	f003 031c 	and.w	r3, r3, #28
 8007dba:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <eth_read_phy+0x5c>)
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	02d9      	lsls	r1, r3, #11
 8007dc4:	79bb      	ldrb	r3, [r7, #6]
 8007dc6:	019b      	lsls	r3, r3, #6
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	490c      	ldr	r1, [pc, #48]	; (8007dfc <eth_read_phy+0x5c>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= BIT(0);
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <eth_read_phy+0x5c>)
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <eth_read_phy+0x5c>)
 8007dd6:	f043 0301 	orr.w	r3, r3, #1
 8007dda:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007ddc:	bf00      	nop
 8007dde:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <eth_read_phy+0x5c>)
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f9      	bne.n	8007dde <eth_read_phy+0x3e>
  return ETH->MACMIIDR;
 8007dea:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <eth_read_phy+0x5c>)
 8007dec:	695b      	ldr	r3, [r3, #20]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40028000 	.word	0x40028000

08007e00 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	603a      	str	r2, [r7, #0]
 8007e0a:	71fb      	strb	r3, [r7, #7]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIDR = val;
 8007e10:	4a14      	ldr	r2, [pc, #80]	; (8007e64 <eth_write_phy+0x64>)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <eth_write_phy+0x64>)
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	4a12      	ldr	r2, [pc, #72]	; (8007e64 <eth_write_phy+0x64>)
 8007e1c:	f003 031c 	and.w	r3, r3, #28
 8007e20:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | BIT(1);
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <eth_write_phy+0x64>)
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	02d9      	lsls	r1, r3, #11
 8007e2a:	79bb      	ldrb	r3, [r7, #6]
 8007e2c:	019b      	lsls	r3, r3, #6
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	4313      	orrs	r3, r2
 8007e32:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <eth_write_phy+0x64>)
 8007e34:	f043 0302 	orr.w	r3, r3, #2
 8007e38:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= BIT(0);
 8007e3a:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <eth_write_phy+0x64>)
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <eth_write_phy+0x64>)
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & BIT(0)) (void) 0;
 8007e46:	bf00      	nop
 8007e48:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <eth_write_phy+0x64>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f9      	bne.n	8007e48 <eth_write_phy+0x48>
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40028000 	.word	0x40028000

08007e68 <get_hclk>:

static uint32_t get_hclk(void) {
 8007e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e6c:	b08d      	sub	sp, #52	; 0x34
 8007e6e:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 8007e70:	4e3c      	ldr	r6, [pc, #240]	; (8007f64 <get_hclk+0xfc>)
 8007e72:	62be      	str	r6, [r7, #40]	; 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 8007e74:	2600      	movs	r6, #0
 8007e76:	62fe      	str	r6, [r7, #44]	; 0x2c
 8007e78:	4e3b      	ldr	r6, [pc, #236]	; (8007f68 <get_hclk+0x100>)
 8007e7a:	627e      	str	r6, [r7, #36]	; 0x24
 8007e7c:	4e3b      	ldr	r6, [pc, #236]	; (8007f6c <get_hclk+0x104>)
 8007e7e:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 8007e80:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007e82:	68b6      	ldr	r6, [r6, #8]
 8007e84:	f006 0604 	and.w	r6, r6, #4
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	d002      	beq.n	8007e92 <get_hclk+0x2a>
    clk = hse;
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e90:	e049      	b.n	8007f26 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 8007e92:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007e94:	68b6      	ldr	r6, [r6, #8]
 8007e96:	f006 0608 	and.w	r6, r6, #8
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	d041      	beq.n	8007f22 <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 8007e9e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ea0:	6876      	ldr	r6, [r6, #4]
 8007ea2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8007ea6:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 8007ea8:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007eaa:	6876      	ldr	r6, [r6, #4]
 8007eac:	09b6      	lsrs	r6, r6, #6
 8007eae:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007eb2:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 8007eb4:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007eb6:	6876      	ldr	r6, [r6, #4]
 8007eb8:	0c36      	lsrs	r6, r6, #16
 8007eba:	f006 0603 	and.w	r6, r6, #3
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	0076      	lsls	r6, r6, #1
 8007ec2:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 8007ec4:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007ec6:	6876      	ldr	r6, [r6, #4]
 8007ec8:	f406 0680 	and.w	r6, r6, #4194304	; 0x400000
 8007ecc:	2e00      	cmp	r6, #0
 8007ece:	d001      	beq.n	8007ed4 <get_hclk+0x6c>
 8007ed0:	6a3e      	ldr	r6, [r7, #32]
 8007ed2:	e000      	b.n	8007ed6 <get_hclk+0x6e>
 8007ed4:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8007ed6:	62fe      	str	r6, [r7, #44]	; 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 8007ed8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8007eda:	f04f 0c00 	mov.w	ip, #0
 8007ede:	4634      	mov	r4, r6
 8007ee0:	4665      	mov	r5, ip
 8007ee2:	69be      	ldr	r6, [r7, #24]
 8007ee4:	f04f 0c00 	mov.w	ip, #0
 8007ee8:	4632      	mov	r2, r6
 8007eea:	4663      	mov	r3, ip
 8007eec:	fb02 fc05 	mul.w	ip, r2, r5
 8007ef0:	fb04 f603 	mul.w	r6, r4, r3
 8007ef4:	4466      	add	r6, ip
 8007ef6:	fba4 0102 	umull	r0, r1, r4, r2
 8007efa:	1873      	adds	r3, r6, r1
 8007efc:	4619      	mov	r1, r3
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	2200      	movs	r2, #0
 8007f02:	4698      	mov	r8, r3
 8007f04:	4691      	mov	r9, r2
 8007f06:	4642      	mov	r2, r8
 8007f08:	464b      	mov	r3, r9
 8007f0a:	f7f8 fe67 	bl	8000bdc <__aeabi_uldivmod>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4613      	mov	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f20:	e001      	b.n	8007f26 <get_hclk+0xbe>
  } else {
    clk = hsi;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	091b      	lsrs	r3, r3, #4
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b07      	cmp	r3, #7
 8007f36:	d801      	bhi.n	8007f3c <get_hclk+0xd4>
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	e00e      	b.n	8007f5a <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 8007f3c:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <get_hclk+0x108>)
 8007f3e:	1d3b      	adds	r3, r7, #4
 8007f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f44:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3b08      	subs	r3, #8
 8007f4c:	3330      	adds	r3, #48	; 0x30
 8007f4e:	443b      	add	r3, r7
 8007f50:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007f54:	461a      	mov	r2, r3
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	40d3      	lsrs	r3, r2
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3734      	adds	r7, #52	; 0x34
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f64:	40023800 	.word	0x40023800
 8007f68:	00f42400 	.word	0x00f42400
 8007f6c:	007a1200 	.word	0x007a1200
 8007f70:	080138c8 	.word	0x080138c8

08007f74 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 8007f7a:	4a33      	ldr	r2, [pc, #204]	; (8008048 <guess_mdc_cr+0xd4>)
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f84:	6018      	str	r0, [r3, #0]
 8007f86:	3304      	adds	r3, #4
 8007f88:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 8007f8a:	4a30      	ldr	r2, [pc, #192]	; (800804c <guess_mdc_cr+0xd8>)
 8007f8c:	1d3b      	adds	r3, r7, #4
 8007f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f92:	6018      	str	r0, [r3, #0]
 8007f94:	3304      	adds	r3, #4
 8007f96:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 8007f98:	f7ff ff66 	bl	8007e68 <get_hclk>
 8007f9c:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 8007f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa2:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	4a2a      	ldr	r2, [pc, #168]	; (8008050 <guess_mdc_cr+0xdc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d80d      	bhi.n	8007fc8 <guess_mdc_cr+0x54>
    MG_ERROR(("HCLK too low"));
 8007fac:	4b29      	ldr	r3, [pc, #164]	; (8008054 <guess_mdc_cr+0xe0>)
 8007fae:	f641 3238 	movw	r2, #6968	; 0x1b38
 8007fb2:	4929      	ldr	r1, [pc, #164]	; (8008058 <guess_mdc_cr+0xe4>)
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	f7fe f96b 	bl	8006290 <mg_log_prefix>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d02e      	beq.n	800801e <guess_mdc_cr+0xaa>
 8007fc0:	4826      	ldr	r0, [pc, #152]	; (800805c <guess_mdc_cr+0xe8>)
 8007fc2:	f7fe f9bf 	bl	8006344 <mg_log>
 8007fc6:	e02a      	b.n	800801e <guess_mdc_cr+0xaa>
  } else {
    for (int i = 0; i < 6; i++) {
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61bb      	str	r3, [r7, #24]
 8007fcc:	e014      	b.n	8007ff8 <guess_mdc_cr+0x84>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 8007fce:	1d3a      	adds	r2, r7, #4
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fde:	4a20      	ldr	r2, [pc, #128]	; (8008060 <guess_mdc_cr+0xec>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d806      	bhi.n	8007ff2 <guess_mdc_cr+0x7e>
        result = crs[i];
 8007fe4:	f107 020c 	add.w	r2, r7, #12
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	4413      	add	r3, r2
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	61fb      	str	r3, [r7, #28]
        break;
 8007ff0:	e005      	b.n	8007ffe <guess_mdc_cr+0x8a>
    for (int i = 0; i < 6; i++) {
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	dde7      	ble.n	8007fce <guess_mdc_cr+0x5a>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da0c      	bge.n	800801e <guess_mdc_cr+0xaa>
 8008004:	4b13      	ldr	r3, [pc, #76]	; (8008054 <guess_mdc_cr+0xe0>)
 8008006:	f44f 52da 	mov.w	r2, #6976	; 0x1b40
 800800a:	4913      	ldr	r1, [pc, #76]	; (8008058 <guess_mdc_cr+0xe4>)
 800800c:	2001      	movs	r0, #1
 800800e:	f7fe f93f 	bl	8006290 <mg_log_prefix>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <guess_mdc_cr+0xaa>
 8008018:	4812      	ldr	r0, [pc, #72]	; (8008064 <guess_mdc_cr+0xf0>)
 800801a:	f7fe f993 	bl	8006344 <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 800801e:	4b0d      	ldr	r3, [pc, #52]	; (8008054 <guess_mdc_cr+0xe0>)
 8008020:	f641 3242 	movw	r2, #6978	; 0x1b42
 8008024:	490c      	ldr	r1, [pc, #48]	; (8008058 <guess_mdc_cr+0xe4>)
 8008026:	2003      	movs	r0, #3
 8008028:	f7fe f932 	bl	8006290 <mg_log_prefix>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <guess_mdc_cr+0xc8>
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	6979      	ldr	r1, [r7, #20]
 8008036:	480c      	ldr	r0, [pc, #48]	; (8008068 <guess_mdc_cr+0xf4>)
 8008038:	f7fe f984 	bl	8006344 <mg_log>
  return result;
 800803c:	69fb      	ldr	r3, [r7, #28]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3720      	adds	r7, #32
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	08013904 	.word	0x08013904
 800804c:	0801390c 	.word	0x0801390c
 8008050:	017d783f 	.word	0x017d783f
 8008054:	08013fc4 	.word	0x08013fc4
 8008058:	0801261c 	.word	0x0801261c
 800805c:	080138d0 	.word	0x080138d0
 8008060:	00243d58 	.word	0x00243d58
 8008064:	080138e0 	.word	0x080138e0
 8008068:	080138f0 	.word	0x080138f0

0800806c <mg_tcpip_driver_stm32_init>:

static bool mg_tcpip_driver_stm32_init(struct mg_tcpip_if *ifp) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32_data *d =
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32_data *) ifp->driver_data;
  s_ifp = ifp;
 800807a:	4a6d      	ldr	r2, [pc, #436]	; (8008230 <mg_tcpip_driver_stm32_init+0x1c4>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e032      	b.n	80080ec <mg_tcpip_driver_stm32_init+0x80>
    s_rxdesc[i][0] = BIT(31);                            // Own
 8008086:	4a6b      	ldr	r2, [pc, #428]	; (8008234 <mg_tcpip_driver_stm32_init+0x1c8>)
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	4413      	add	r3, r2
 800808e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008092:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | BIT(14);       // 2nd address chained
 8008094:	4a67      	ldr	r2, [pc, #412]	; (8008234 <mg_tcpip_driver_stm32_init+0x1c8>)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	4413      	add	r3, r2
 800809c:	3304      	adds	r3, #4
 800809e:	f244 6204 	movw	r2, #17924	; 0x4604
 80080a2:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f240 6204 	movw	r2, #1540	; 0x604
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	4a62      	ldr	r2, [pc, #392]	; (8008238 <mg_tcpip_driver_stm32_init+0x1cc>)
 80080b0:	4413      	add	r3, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	4a5f      	ldr	r2, [pc, #380]	; (8008234 <mg_tcpip_driver_stm32_init+0x1c8>)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	4413      	add	r3, r2
 80080bc:	3308      	adds	r3, #8
 80080be:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3301      	adds	r3, #1
 80080c4:	425a      	negs	r2, r3
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	f002 0203 	and.w	r2, r2, #3
 80080ce:	bf58      	it	pl
 80080d0:	4253      	negpl	r3, r2
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	4a57      	ldr	r2, [pc, #348]	; (8008234 <mg_tcpip_driver_stm32_init+0x1c8>)
 80080d6:	4413      	add	r3, r2
 80080d8:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 80080da:	4a56      	ldr	r2, [pc, #344]	; (8008234 <mg_tcpip_driver_stm32_init+0x1c8>)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	4413      	add	r3, r2
 80080e2:	330c      	adds	r3, #12
 80080e4:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	3301      	adds	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	ddc9      	ble.n	8008086 <mg_tcpip_driver_stm32_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80080f2:	2300      	movs	r3, #0
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	e023      	b.n	8008140 <mg_tcpip_driver_stm32_init+0xd4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f240 6204 	movw	r2, #1540	; 0x604
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
 8008102:	4a4e      	ldr	r2, [pc, #312]	; (800823c <mg_tcpip_driver_stm32_init+0x1d0>)
 8008104:	4413      	add	r3, r2
 8008106:	4619      	mov	r1, r3
 8008108:	4a4d      	ldr	r2, [pc, #308]	; (8008240 <mg_tcpip_driver_stm32_init+0x1d4>)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	4413      	add	r3, r2
 8008110:	3308      	adds	r3, #8
 8008112:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	3301      	adds	r3, #1
 8008118:	425a      	negs	r2, r3
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	f002 0203 	and.w	r2, r2, #3
 8008122:	bf58      	it	pl
 8008124:	4253      	negpl	r3, r2
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	4a45      	ldr	r2, [pc, #276]	; (8008240 <mg_tcpip_driver_stm32_init+0x1d4>)
 800812a:	4413      	add	r3, r2
 800812c:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 800812e:	4a44      	ldr	r2, [pc, #272]	; (8008240 <mg_tcpip_driver_stm32_init+0x1d4>)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	4413      	add	r3, r2
 8008136:	330c      	adds	r3, #12
 8008138:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	3301      	adds	r3, #1
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b03      	cmp	r3, #3
 8008144:	ddd8      	ble.n	80080f8 <mg_tcpip_driver_stm32_init+0x8c>
  }

  ETH->DMABMR |= BIT(0);                         // Software reset
 8008146:	4b3f      	ldr	r3, [pc, #252]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a3d      	ldr	r2, [pc, #244]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008158:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & BIT(0)) != 0) (void) 0;  // Wait until done
 800815a:	bf00      	nop
 800815c:	4b39      	ldr	r3, [pc, #228]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 800815e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f7      	bne.n	800815c <mg_tcpip_driver_stm32_init+0xf0>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <mg_tcpip_driver_stm32_init+0x10e>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	da03      	bge.n	8008182 <mg_tcpip_driver_stm32_init+0x116>
 800817a:	f7ff fefb 	bl	8007f74 <guess_mdc_cr>
 800817e:	4603      	mov	r3, r0
 8008180:	e001      	b.n	8008186 <mg_tcpip_driver_stm32_init+0x11a>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60bb      	str	r3, [r7, #8]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 800818e:	f003 031c 	and.w	r3, r3, #28
 8008192:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = BIT(13) | BIT(16) | BIT(22) | BIT(23) | BIT(25);
  ETH->MACIMR = BIT(3) | BIT(9);  // Mask timestamp & PMT IT
 8008194:	4b2b      	ldr	r3, [pc, #172]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 8008196:	f44f 7202 	mov.w	r2, #520	; 0x208
 800819a:	63da      	str	r2, [r3, #60]	; 0x3c
  ETH->MACFCR = BIT(7);           // Disable zero quarta pause
 800819c:	4b29      	ldr	r3, [pc, #164]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 800819e:	2280      	movs	r2, #128	; 0x80
 80081a0:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = BIT(31);                            // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));           // Reset PHY
 80081a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80081a6:	2100      	movs	r1, #0
 80081a8:	2000      	movs	r0, #0
 80081aa:	f7ff fe29 	bl	8007e00 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));           // Set autonegotiation
 80081ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081b2:	2100      	movs	r1, #0
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7ff fe23 	bl	8007e00 <eth_write_phy>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;     // RX descriptors
 80081ba:	4a22      	ldr	r2, [pc, #136]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081bc:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <mg_tcpip_driver_stm32_init+0x1c8>)
 80081be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081c2:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;     // RX descriptors
 80081c4:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081c6:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <mg_tcpip_driver_stm32_init+0x1d4>)
 80081c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081cc:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = BIT(6) | BIT(16);                      // RIE, NISE
 80081ce:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d4:	461a      	mov	r2, r3
 80081d6:	4b1c      	ldr	r3, [pc, #112]	; (8008248 <mg_tcpip_driver_stm32_init+0x1dc>)
 80081d8:	61d3      	str	r3, [r2, #28]
  ETH->MACCR = BIT(2) | BIT(3) | BIT(11) | BIT(14);    // RE, TE, Duplex, Fast
 80081da:	4b1a      	ldr	r3, [pc, #104]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081dc:	f644 020c 	movw	r2, #18444	; 0x480c
 80081e0:	601a      	str	r2, [r3, #0]
  ETH->DMAOMR = BIT(1) | BIT(13) | BIT(21) | BIT(25);  // SR, ST, TSF, RSF
 80081e2:	4b18      	ldr	r3, [pc, #96]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b18      	ldr	r3, [pc, #96]	; (800824c <mg_tcpip_driver_stm32_init+0x1e0>)
 80081ec:	6193      	str	r3, [r2, #24]

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	795b      	ldrb	r3, [r3, #5]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7912      	ldrb	r2, [r2, #4]
 80081f8:	4611      	mov	r1, r2
 80081fa:	4a12      	ldr	r2, [pc, #72]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6413      	str	r3, [r2, #64]	; 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	061b      	lsls	r3, r3, #24
 8008206:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800820e:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8008216:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	7812      	ldrb	r2, [r2, #0]
 800821c:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <mg_tcpip_driver_stm32_init+0x1d8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8008220:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8008222:	6453      	str	r3, [r2, #68]	; 0x44
  return true;
 8008224:	2301      	movs	r3, #1
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20003670 	.word	0x20003670
 8008234:	200005cc 	.word	0x200005cc
 8008238:	2000064c 	.word	0x2000064c
 800823c:	20001e5c 	.word	0x20001e5c
 8008240:	2000060c 	.word	0x2000060c
 8008244:	40028000 	.word	0x40028000
 8008248:	00010040 	.word	0x00010040
 800824c:	02202002 	.word	0x02202002

08008250 <mg_tcpip_driver_stm32_tx>:

static size_t mg_tcpip_driver_stm32_tx(const void *buf, size_t len,
                                       struct mg_tcpip_if *ifp) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f240 6204 	movw	r2, #1540	; 0x604
 8008262:	4293      	cmp	r3, r2
 8008264:	d911      	bls.n	800828a <mg_tcpip_driver_stm32_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8008266:	4b3d      	ldr	r3, [pc, #244]	; (800835c <mg_tcpip_driver_stm32_tx+0x10c>)
 8008268:	f641 327b 	movw	r2, #7035	; 0x1b7b
 800826c:	493c      	ldr	r1, [pc, #240]	; (8008360 <mg_tcpip_driver_stm32_tx+0x110>)
 800826e:	2001      	movs	r0, #1
 8008270:	f7fe f80e 	bl	8006290 <mg_log_prefix>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d004      	beq.n	8008284 <mg_tcpip_driver_stm32_tx+0x34>
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4619      	mov	r1, r3
 800827e:	4839      	ldr	r0, [pc, #228]	; (8008364 <mg_tcpip_driver_stm32_tx+0x114>)
 8008280:	f7fe f860 	bl	8006344 <mg_log>
    len = 0;  // Frame is too big
 8008284:	2300      	movs	r3, #0
 8008286:	60bb      	str	r3, [r7, #8]
 8008288:	e055      	b.n	8008336 <mg_tcpip_driver_stm32_tx+0xe6>
  } else if ((s_txdesc[s_txno][0] & BIT(31))) {
 800828a:	4b37      	ldr	r3, [pc, #220]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	4a37      	ldr	r2, [pc, #220]	; (800836c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	4413      	add	r3, r2
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	da14      	bge.n	80082c4 <mg_tcpip_driver_stm32_tx+0x74>
    ifp->nerr++;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	671a      	str	r2, [r3, #112]	; 0x70
    MG_ERROR(("No free descriptors"));
 80082a4:	4b2d      	ldr	r3, [pc, #180]	; (800835c <mg_tcpip_driver_stm32_tx+0x10c>)
 80082a6:	f641 327f 	movw	r2, #7039	; 0x1b7f
 80082aa:	492d      	ldr	r1, [pc, #180]	; (8008360 <mg_tcpip_driver_stm32_tx+0x110>)
 80082ac:	2001      	movs	r0, #1
 80082ae:	f7fd ffef 	bl	8006290 <mg_log_prefix>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <mg_tcpip_driver_stm32_tx+0x6e>
 80082b8:	482d      	ldr	r0, [pc, #180]	; (8008370 <mg_tcpip_driver_stm32_tx+0x120>)
 80082ba:	f7fe f843 	bl	8006344 <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 80082be:	2300      	movs	r3, #0
 80082c0:	60bb      	str	r3, [r7, #8]
 80082c2:	e038      	b.n	8008336 <mg_tcpip_driver_stm32_tx+0xe6>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);     // Copy data
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	f240 6304 	movw	r3, #1540	; 0x604
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	4a28      	ldr	r2, [pc, #160]	; (8008374 <mg_tcpip_driver_stm32_tx+0x124>)
 80082d4:	4413      	add	r3, r2
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	68f9      	ldr	r1, [r7, #12]
 80082da:	4618      	mov	r0, r3
 80082dc:	f009 fb3f 	bl	801195e <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;  // Set data len
 80082e0:	4b21      	ldr	r3, [pc, #132]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	4a21      	ldr	r2, [pc, #132]	; (800836c <mg_tcpip_driver_stm32_tx+0x11c>)
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	4413      	add	r3, r2
 80082ea:	3304      	adds	r3, #4
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = BIT(20) | BIT(28) | BIT(29);  // Chain,FS,LS
 80082f0:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	4a1d      	ldr	r2, [pc, #116]	; (800836c <mg_tcpip_driver_stm32_tx+0x11c>)
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	4413      	add	r3, r2
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <mg_tcpip_driver_stm32_tx+0x128>)
 80082fc:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= BIT(31);  // Set OWN bit - let DMA take over
 80082fe:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	4a1a      	ldr	r2, [pc, #104]	; (800836c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008304:	011b      	lsls	r3, r3, #4
 8008306:	4413      	add	r3, r2
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a17      	ldr	r2, [pc, #92]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 800830c:	7812      	ldrb	r2, [r2, #0]
 800830e:	4610      	mov	r0, r2
 8008310:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008314:	4915      	ldr	r1, [pc, #84]	; (800836c <mg_tcpip_driver_stm32_tx+0x11c>)
 8008316:	0103      	lsls	r3, r0, #4
 8008318:	440b      	add	r3, r1
 800831a:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 800831c:	4b12      	ldr	r3, [pc, #72]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	3301      	adds	r3, #1
 8008322:	b2da      	uxtb	r2, r3
 8008324:	4b10      	ldr	r3, [pc, #64]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b03      	cmp	r3, #3
 800832e:	d902      	bls.n	8008336 <mg_tcpip_driver_stm32_tx+0xe6>
 8008330:	4b0d      	ldr	r3, [pc, #52]	; (8008368 <mg_tcpip_driver_stm32_tx+0x118>)
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
  }
  DSB();                         // ensure descriptors have been written
 8008336:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = BIT(2) | BIT(5);  // Clear any prior TBUS/TUS
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <mg_tcpip_driver_stm32_tx+0x12c>)
 800833c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008340:	461a      	mov	r2, r3
 8008342:	2324      	movs	r3, #36	; 0x24
 8008344:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;              // and resume
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <mg_tcpip_driver_stm32_tx+0x12c>)
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	461a      	mov	r2, r3
 800834e:	2300      	movs	r3, #0
 8008350:	6053      	str	r3, [r2, #4]
  return len;
 8008352:	68bb      	ldr	r3, [r7, #8]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	08013fd4 	.word	0x08013fd4
 8008360:	0801261c 	.word	0x0801261c
 8008364:	08013914 	.word	0x08013914
 8008368:	2000366c 	.word	0x2000366c
 800836c:	2000060c 	.word	0x2000060c
 8008370:	08013928 	.word	0x08013928
 8008374:	20001e5c 	.word	0x20001e5c
 8008378:	30100000 	.word	0x30100000
 800837c:	40028000 	.word	0x40028000

08008380 <mg_tcpip_driver_stm32_up>:

static bool mg_tcpip_driver_stm32_up(struct mg_tcpip_if *ifp) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 8008388:	2101      	movs	r1, #1
 800838a:	2000      	movs	r0, #0
 800838c:	f7ff fd08 	bl	8007da0 <eth_read_phy>
 8008390:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	089b      	lsrs	r3, r3, #2
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	bf14      	ite	ne
 800839e:	2301      	movne	r3, #1
 80083a0:	2300      	moveq	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d13f      	bne.n	800842e <mg_tcpip_driver_stm32_up+0xae>
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d03c      	beq.n	800842e <mg_tcpip_driver_stm32_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 80083b4:	211f      	movs	r1, #31
 80083b6:	2000      	movs	r0, #0
 80083b8:	f7ff fcf2 	bl	8007da0 <eth_read_phy>
 80083bc:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(11);  // 100M, Full-duplex
 80083be:	4b1e      	ldr	r3, [pc, #120]	; (8008438 <mg_tcpip_driver_stm32_up+0xb8>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f443 4390 	orr.w	r3, r3, #18432	; 0x4800
 80083c6:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d103      	bne.n	80083da <mg_tcpip_driver_stm32_up+0x5a>
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083d8:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(11);      // Half-duplex
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f003 0310 	and.w	r3, r3, #16
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <mg_tcpip_driver_stm32_up+0x6c>
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083ea:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80083ec:	4a12      	ldr	r2, [pc, #72]	; (8008438 <mg_tcpip_driver_stm32_up+0xb8>)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 80083f2:	4b12      	ldr	r3, [pc, #72]	; (800843c <mg_tcpip_driver_stm32_up+0xbc>)
 80083f4:	f641 3298 	movw	r2, #7064	; 0x1b98
 80083f8:	4911      	ldr	r1, [pc, #68]	; (8008440 <mg_tcpip_driver_stm32_up+0xc0>)
 80083fa:	2003      	movs	r0, #3
 80083fc:	f7fd ff48 	bl	8006290 <mg_log_prefix>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d013      	beq.n	800842e <mg_tcpip_driver_stm32_up+0xae>
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <mg_tcpip_driver_stm32_up+0x94>
 8008410:	2164      	movs	r1, #100	; 0x64
 8008412:	e000      	b.n	8008416 <mg_tcpip_driver_stm32_up+0x96>
 8008414:	210a      	movs	r1, #10
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <mg_tcpip_driver_stm32_up+0xa4>
 8008420:	4b08      	ldr	r3, [pc, #32]	; (8008444 <mg_tcpip_driver_stm32_up+0xc4>)
 8008422:	e000      	b.n	8008426 <mg_tcpip_driver_stm32_up+0xa6>
 8008424:	4b08      	ldr	r3, [pc, #32]	; (8008448 <mg_tcpip_driver_stm32_up+0xc8>)
 8008426:	461a      	mov	r2, r3
 8008428:	4808      	ldr	r0, [pc, #32]	; (800844c <mg_tcpip_driver_stm32_up+0xcc>)
 800842a:	f7fd ff8b 	bl	8006344 <mg_log>
              maccr & BIT(11) ? "full" : "half"));
  }
  return up;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40028000 	.word	0x40028000
 800843c:	08013ff0 	.word	0x08013ff0
 8008440:	0801261c 	.word	0x0801261c
 8008444:	0801393c 	.word	0x0801393c
 8008448:	08013944 	.word	0x08013944
 800844c:	0801394c 	.word	0x0801394c

08008450 <ETH_IRQHandler>:

void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
  if (ETH->DMASR & BIT(6)) {             // Frame received, loop
 8008456:	4b3d      	ldr	r3, [pc, #244]	; (800854c <ETH_IRQHandler+0xfc>)
 8008458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d061      	beq.n	800852a <ETH_IRQHandler+0xda>
    ETH->DMASR = BIT(16) | BIT(6);       // Clear flag
 8008466:	4b39      	ldr	r3, [pc, #228]	; (800854c <ETH_IRQHandler+0xfc>)
 8008468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846c:	461a      	mov	r2, r3
 800846e:	4b38      	ldr	r3, [pc, #224]	; (8008550 <ETH_IRQHandler+0x100>)
 8008470:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8008472:	2300      	movs	r3, #0
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	e053      	b.n	8008520 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8008478:	4b36      	ldr	r3, [pc, #216]	; (8008554 <ETH_IRQHandler+0x104>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4a36      	ldr	r2, [pc, #216]	; (8008558 <ETH_IRQHandler+0x108>)
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	4413      	add	r3, r2
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	db4f      	blt.n	8008528 <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 8008488:	4b32      	ldr	r3, [pc, #200]	; (8008554 <ETH_IRQHandler+0x104>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	4a32      	ldr	r2, [pc, #200]	; (8008558 <ETH_IRQHandler+0x108>)
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	4413      	add	r3, r2
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800849c:	d128      	bne.n	80084f0 <ETH_IRQHandler+0xa0>
          !(s_rxdesc[s_rxno][0] & BIT(15))) {  // skip partial/errored frames
 800849e:	4b2d      	ldr	r3, [pc, #180]	; (8008554 <ETH_IRQHandler+0x104>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	4a2d      	ldr	r2, [pc, #180]	; (8008558 <ETH_IRQHandler+0x108>)
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	4413      	add	r3, r2
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if (((s_rxdesc[s_rxno][0] & (BIT(8) | BIT(9))) == (BIT(8) | BIT(9))) &&
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d11e      	bne.n	80084f0 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (BIT(14) - 1));
 80084b2:	4b28      	ldr	r3, [pc, #160]	; (8008554 <ETH_IRQHandler+0x104>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	4a28      	ldr	r2, [pc, #160]	; (8008558 <ETH_IRQHandler+0x108>)
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	4413      	add	r3, r2
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	0c1b      	lsrs	r3, r3, #16
 80084c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80084c4:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80084c6:	4b23      	ldr	r3, [pc, #140]	; (8008554 <ETH_IRQHandler+0x104>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f240 6304 	movw	r3, #1540	; 0x604
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	4a21      	ldr	r2, [pc, #132]	; (800855c <ETH_IRQHandler+0x10c>)
 80084d6:	1898      	adds	r0, r3, r2
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d902      	bls.n	80084e4 <ETH_IRQHandler+0x94>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	3b04      	subs	r3, #4
 80084e2:	e000      	b.n	80084e6 <ETH_IRQHandler+0x96>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <ETH_IRQHandler+0x110>)
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	4619      	mov	r1, r3
 80084ec:	f002 faac 	bl	800aa48 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = BIT(31);
 80084f0:	4b18      	ldr	r3, [pc, #96]	; (8008554 <ETH_IRQHandler+0x104>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	4a18      	ldr	r2, [pc, #96]	; (8008558 <ETH_IRQHandler+0x108>)
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	4413      	add	r3, r2
 80084fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084fe:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8008500:	4b14      	ldr	r3, [pc, #80]	; (8008554 <ETH_IRQHandler+0x104>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	b2da      	uxtb	r2, r3
 8008508:	4b12      	ldr	r3, [pc, #72]	; (8008554 <ETH_IRQHandler+0x104>)
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	4b11      	ldr	r3, [pc, #68]	; (8008554 <ETH_IRQHandler+0x104>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b03      	cmp	r3, #3
 8008512:	d902      	bls.n	800851a <ETH_IRQHandler+0xca>
 8008514:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <ETH_IRQHandler+0x104>)
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3301      	adds	r3, #1
 800851e:	607b      	str	r3, [r7, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b09      	cmp	r3, #9
 8008524:	d9a8      	bls.n	8008478 <ETH_IRQHandler+0x28>
 8008526:	e000      	b.n	800852a <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & BIT(31)) break;  // exit when done
 8008528:	bf00      	nop
    }
  }
  ETH->DMASR = BIT(7);  // Clear possible RBUS while processing
 800852a:	4b08      	ldr	r3, [pc, #32]	; (800854c <ETH_IRQHandler+0xfc>)
 800852c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008530:	461a      	mov	r2, r3
 8008532:	2380      	movs	r3, #128	; 0x80
 8008534:	6153      	str	r3, [r2, #20]
  ETH->DMARPDR = 0;     // and resume RX
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <ETH_IRQHandler+0xfc>)
 8008538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800853c:	461a      	mov	r2, r3
 800853e:	2300      	movs	r3, #0
 8008540:	6093      	str	r3, [r2, #8]
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40028000 	.word	0x40028000
 8008550:	00010040 	.word	0x00010040
 8008554:	2000366d 	.word	0x2000366d
 8008558:	200005cc 	.word	0x200005cc
 800855c:	2000064c 	.word	0x2000064c
 8008560:	20003670 	.word	0x20003670

08008564 <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	441a      	add	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	461a      	mov	r2, r3
 800857e:	68fc      	ldr	r4, [r7, #12]
 8008580:	463b      	mov	r3, r7
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fd68 	bl	800705a <mg_str_n>
 800858a:	f104 0308 	add.w	r3, r4, #8
 800858e:	463a      	mov	r2, r7
 8008590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008594:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8008598:	bf00      	nop
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bd90      	pop	{r4, r7, pc}

080085a0 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	e016      	b.n	80085e4 <csumup+0x44>
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <csumup+0x2c>
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	4413      	add	r3, r2
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	e005      	b.n	80085d8 <csumup+0x38>
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	4413      	add	r3, r2
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	021b      	lsls	r3, r3, #8
 80085d6:	461a      	mov	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	3301      	adds	r3, #1
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3e4      	bcc.n	80085b6 <csumup+0x16>
  return sum;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8008602:	e005      	b.n	8008610 <csumfin+0x16>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	b29a      	uxth	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	4413      	add	r3, r2
 800860e:	607b      	str	r3, [r7, #4]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	0c1b      	lsrs	r3, r3, #16
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f5      	bne.n	8008604 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	b29b      	uxth	r3, r3
 800861c:	43db      	mvns	r3, r3
 800861e:	b29b      	uxth	r3, r3
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff fb54 	bl	8007cce <mg_ntohs>
 8008626:	4603      	mov	r3, r0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	2000      	movs	r0, #0
 8008640:	f7ff ffae 	bl	80085a0 <csumup>
 8008644:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff ffd7 	bl	80085fa <csumfin>
 800864c:	4603      	mov	r3, r0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6950      	ldr	r0, [r2, #20]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d104      	bne.n	8008684 <ether_output+0x2e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 8008684:	68fb      	ldr	r3, [r7, #12]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	330e      	adds	r3, #14
 80086a2:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2206      	movs	r2, #6
 80086a8:	21ff      	movs	r1, #255	; 0xff
 80086aa:	4618      	mov	r0, r3
 80086ac:	f009 f88d 	bl	80117ca <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3306      	adds	r3, #6
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	2206      	movs	r2, #6
 80086b8:	4618      	mov	r0, r3
 80086ba:	f009 f950 	bl	801195e <memcpy>
  eth->type = mg_htons(0x806);
 80086be:	f640 0006 	movw	r0, #2054	; 0x806
 80086c2:	f7ff fb04 	bl	8007cce <mg_ntohs>
 80086c6:	4603      	mov	r3, r0
 80086c8:	461a      	mov	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 80086ce:	221c      	movs	r2, #28
 80086d0:	2100      	movs	r1, #0
 80086d2:	68b8      	ldr	r0, [r7, #8]
 80086d4:	f009 f879 	bl	80117ca <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 80086d8:	2001      	movs	r0, #1
 80086da:	f7ff faf8 	bl	8007cce <mg_ntohs>
 80086de:	4603      	mov	r3, r0
 80086e0:	461a      	mov	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80086ea:	f7ff faf0 	bl	8007cce <mg_ntohs>
 80086ee:	4603      	mov	r3, r0
 80086f0:	461a      	mov	r2, r3
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	805a      	strh	r2, [r3, #2]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2206      	movs	r2, #6
 80086fa:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2204      	movs	r2, #4
 8008700:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8008702:	2001      	movs	r0, #1
 8008704:	f7ff fae3 	bl	8007cce <mg_ntohs>
 8008708:	4603      	mov	r3, r0
 800870a:	461a      	mov	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	80da      	strh	r2, [r3, #6]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	619a      	str	r2, [r3, #24]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3308      	adds	r3, #8
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	2206      	movs	r2, #6
 8008728:	4618      	mov	r0, r3
 800872a:	f009 f918 	bl	801195e <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f103 021c 	add.w	r2, r3, #28
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff ff8b 	bl	8008656 <ether_output>
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008756:	2b03      	cmp	r3, #3
 8008758:	d138      	bne.n	80087cc <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800875a:	4b35      	ldr	r3, [pc, #212]	; (8008830 <onstatechange+0xe8>)
 800875c:	f641 62dd 	movw	r2, #7901	; 0x1edd
 8008760:	4934      	ldr	r1, [pc, #208]	; (8008834 <onstatechange+0xec>)
 8008762:	2002      	movs	r0, #2
 8008764:	f7fd fd94 	bl	8006290 <mg_log_prefix>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d006      	beq.n	800877c <onstatechange+0x34>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3308      	adds	r3, #8
 8008772:	461a      	mov	r2, r3
 8008774:	4930      	ldr	r1, [pc, #192]	; (8008838 <onstatechange+0xf0>)
 8008776:	4831      	ldr	r0, [pc, #196]	; (800883c <onstatechange+0xf4>)
 8008778:	f7fd fde4 	bl	8006344 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800877c:	4b2c      	ldr	r3, [pc, #176]	; (8008830 <onstatechange+0xe8>)
 800877e:	f641 62de 	movw	r2, #7902	; 0x1ede
 8008782:	492c      	ldr	r1, [pc, #176]	; (8008834 <onstatechange+0xec>)
 8008784:	2002      	movs	r0, #2
 8008786:	f7fd fd83 	bl	8006290 <mg_log_prefix>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d006      	beq.n	800879e <onstatechange+0x56>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3310      	adds	r3, #16
 8008794:	461a      	mov	r2, r3
 8008796:	4928      	ldr	r1, [pc, #160]	; (8008838 <onstatechange+0xf0>)
 8008798:	4829      	ldr	r0, [pc, #164]	; (8008840 <onstatechange+0xf8>)
 800879a:	f7fd fdd3 	bl	8006344 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800879e:	4b24      	ldr	r3, [pc, #144]	; (8008830 <onstatechange+0xe8>)
 80087a0:	f641 62df 	movw	r2, #7903	; 0x1edf
 80087a4:	4923      	ldr	r1, [pc, #140]	; (8008834 <onstatechange+0xec>)
 80087a6:	2002      	movs	r0, #2
 80087a8:	f7fd fd72 	bl	8006290 <mg_log_prefix>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <onstatechange+0x76>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	461a      	mov	r2, r3
 80087b6:	4923      	ldr	r1, [pc, #140]	; (8008844 <onstatechange+0xfc>)
 80087b8:	4823      	ldr	r0, [pc, #140]	; (8008848 <onstatechange+0x100>)
 80087ba:	f7fd fdc3 	bl	8006344 <mg_log>
    arp_ask(ifp, ifp->gw);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff ff62 	bl	800868e <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 80087ca:	e02c      	b.n	8008826 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d115      	bne.n	8008802 <onstatechange+0xba>
    MG_ERROR(("Link up"));
 80087d6:	4b16      	ldr	r3, [pc, #88]	; (8008830 <onstatechange+0xe8>)
 80087d8:	f641 62e2 	movw	r2, #7906	; 0x1ee2
 80087dc:	4915      	ldr	r1, [pc, #84]	; (8008834 <onstatechange+0xec>)
 80087de:	2001      	movs	r0, #1
 80087e0:	f7fd fd56 	bl	8006290 <mg_log_prefix>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <onstatechange+0xa8>
 80087ea:	4818      	ldr	r0, [pc, #96]	; (800884c <onstatechange+0x104>)
 80087ec:	f7fd fdaa 	bl	8006344 <mg_log>
    srand((unsigned int) mg_millis());
 80087f0:	f7ff fabe 	bl	8007d70 <mg_millis>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4613      	mov	r3, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f008 fde2 	bl	80113c4 <srand>
}
 8008800:	e011      	b.n	8008826 <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10c      	bne.n	8008826 <onstatechange+0xde>
    MG_ERROR(("Link down"));
 800880c:	4b08      	ldr	r3, [pc, #32]	; (8008830 <onstatechange+0xe8>)
 800880e:	f641 62e5 	movw	r2, #7909	; 0x1ee5
 8008812:	4908      	ldr	r1, [pc, #32]	; (8008834 <onstatechange+0xec>)
 8008814:	2001      	movs	r0, #1
 8008816:	f7fd fd3b 	bl	8006290 <mg_log_prefix>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <onstatechange+0xde>
 8008820:	480b      	ldr	r0, [pc, #44]	; (8008850 <onstatechange+0x108>)
 8008822:	f7fd fd8f 	bl	8006344 <mg_log>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	0801400c 	.word	0x0801400c
 8008834:	0801261c 	.word	0x0801261c
 8008838:	08006ae1 	.word	0x08006ae1
 800883c:	08013964 	.word	0x08013964
 8008840:	08013974 	.word	0x08013974
 8008844:	08006ba5 	.word	0x08006ba5
 8008848:	08013984 	.word	0x08013984
 800884c:	08013994 	.word	0x08013994
 8008850:	0801399c 	.word	0x0801399c

08008854 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4613      	mov	r3, r2
 8008862:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	330e      	adds	r3, #14
 800886e:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2206      	movs	r2, #6
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	4618      	mov	r0, r3
 8008878:	f009 f871 	bl	801195e <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	3306      	adds	r3, #6
 8008880:	68f9      	ldr	r1, [r7, #12]
 8008882:	2206      	movs	r2, #6
 8008884:	4618      	mov	r0, r3
 8008886:	f009 f86a 	bl	801195e <memcpy>
  eth->type = mg_htons(0x800);
 800888a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800888e:	f7ff fa1e 	bl	8007cce <mg_ntohs>
 8008892:	4603      	mov	r3, r0
 8008894:	461a      	mov	r2, r3
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800889a:	2214      	movs	r2, #20
 800889c:	2100      	movs	r1, #0
 800889e:	6938      	ldr	r0, [r7, #16]
 80088a0:	f008 ff93 	bl	80117ca <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2245      	movs	r2, #69	; 0x45
 80088a8:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088b2:	719a      	strb	r2, [r3, #6]
 80088b4:	2200      	movs	r2, #0
 80088b6:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	3314      	adds	r3, #20
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff fa04 	bl	8007cce <mg_ntohs>
 80088c6:	4603      	mov	r3, r0
 80088c8:	461a      	mov	r2, r3
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2240      	movs	r2, #64	; 0x40
 80088d2:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	79fa      	ldrb	r2, [r7, #7]
 80088d8:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 80088e6:	2114      	movs	r1, #20
 80088e8:	6938      	ldr	r0, [r7, #16]
 80088ea:	f7ff fea1 	bl	8008630 <ipcsum>
 80088ee:	4603      	mov	r3, r0
 80088f0:	461a      	mov	r2, r3
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	815a      	strh	r2, [r3, #10]
  return ip;
 80088f6:	693b      	ldr	r3, [r7, #16]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	3308      	adds	r3, #8
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2211      	movs	r2, #17
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff ff98 	bl	8008854 <tx_ip>
 8008924:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	3314      	adds	r3, #20
 800892a:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	887a      	ldrh	r2, [r7, #2]
 8008930:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008936:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	b29b      	uxth	r3, r3
 800893c:	3308      	adds	r3, #8
 800893e:	b29b      	uxth	r3, r3
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff f9c4 	bl	8007cce <mg_ntohs>
 8008946:	4603      	mov	r3, r0
 8008948:	461a      	mov	r2, r3
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2200      	movs	r2, #0
 8008952:	719a      	strb	r2, [r3, #6]
 8008954:	2200      	movs	r2, #0
 8008956:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8008958:	2208      	movs	r2, #8
 800895a:	69b9      	ldr	r1, [r7, #24]
 800895c:	2000      	movs	r0, #0
 800895e:	f7ff fe1f 	bl	80085a0 <csumup>
 8008962:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8008964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008968:	6978      	ldr	r0, [r7, #20]
 800896a:	f7ff fe19 	bl	80085a0 <csumup>
 800896e:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	330c      	adds	r3, #12
 8008974:	2204      	movs	r2, #4
 8008976:	4619      	mov	r1, r3
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7ff fe11 	bl	80085a0 <csumup>
 800897e:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	3310      	adds	r3, #16
 8008984:	2204      	movs	r2, #4
 8008986:	4619      	mov	r1, r3
 8008988:	6978      	ldr	r0, [r7, #20]
 800898a:	f7ff fe09 	bl	80085a0 <csumup>
 800898e:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	7a5b      	ldrb	r3, [r3, #9]
 8008994:	461a      	mov	r2, r3
 8008996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008998:	441a      	add	r2, r3
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4413      	add	r3, r2
 800899e:	3308      	adds	r3, #8
 80089a0:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 80089a2:	6978      	ldr	r0, [r7, #20]
 80089a4:	f7ff fe29 	bl	80085fa <csumfin>
 80089a8:	4603      	mov	r3, r0
 80089aa:	461a      	mov	r2, r3
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	3308      	adds	r3, #8
 80089b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089b8:	4618      	mov	r0, r3
 80089ba:	f008 feec 	bl	8011796 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	332a      	adds	r3, #42	; 0x2a
 80089c2:	4619      	mov	r1, r3
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff fe46 	bl	8008656 <ether_output>
}
 80089ca:	bf00      	nop
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 80089d4:	b5b0      	push	{r4, r5, r7, lr}
 80089d6:	b0cc      	sub	sp, #304	; 0x130
 80089d8:	af04      	add	r7, sp, #16
 80089da:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80089de:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 80089e2:	6020      	str	r0, [r4, #0]
 80089e4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80089e8:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 80089ec:	6001      	str	r1, [r0, #0]
 80089ee:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80089f2:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80089f6:	600a      	str	r2, [r1, #0]
 80089f8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80089fc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008a00:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8008a02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a0a:	4a38      	ldr	r2, [pc, #224]	; (8008aec <tx_dhcp+0x118>)
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	4611      	mov	r1, r2
 8008a10:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a14:	461a      	mov	r2, r3
 8008a16:	f008 ffa2 	bl	801195e <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8008a1a:	4835      	ldr	r0, [pc, #212]	; (8008af0 <tx_dhcp+0x11c>)
 8008a1c:	f7ff f93e 	bl	8007c9c <mg_ntohl>
 8008a20:	4602      	mov	r2, r0
 8008a22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a2a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8008a2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a36:	6819      	ldr	r1, [r3, #0]
 8008a38:	f107 0310 	add.w	r3, r7, #16
 8008a3c:	331c      	adds	r3, #28
 8008a3e:	2206      	movs	r2, #6
 8008a40:	4618      	mov	r0, r3
 8008a42:	f008 ff8c 	bl	801195e <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8008a46:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3302      	adds	r3, #2
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a5a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a5e:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8008a60:	f107 0310 	add.w	r3, r7, #16
 8008a64:	33f0      	adds	r3, #240	; 0xf0
 8008a66:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008a6a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f008 ff75 	bl	801195e <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8008a74:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <tx_dhcp+0xbc>
 8008a7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008a80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008a84:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008a88:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8008a90:	2044      	movs	r0, #68	; 0x44
 8008a92:	f7ff f91c 	bl	8007cce <mg_ntohs>
 8008a96:	4603      	mov	r3, r0
 8008a98:	461d      	mov	r5, r3
 8008a9a:	2043      	movs	r0, #67	; 0x43
 8008a9c:	f7ff f917 	bl	8007cce <mg_ntohs>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461c      	mov	r4, r3
 8008aa4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008aa8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008aac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ab0:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 8008ab4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ab8:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8008abc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	f107 0310 	add.w	r3, r7, #16
 8008ac6:	9302      	str	r3, [sp, #8]
 8008ac8:	9401      	str	r4, [sp, #4]
 8008aca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ace:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	6812      	ldr	r2, [r2, #0]
 8008ada:	6809      	ldr	r1, [r1, #0]
 8008adc:	6800      	ldr	r0, [r0, #0]
 8008ade:	f7ff ff0f 	bl	8008900 <tx_udp>
         sizeof(dhcp));
}
 8008ae2:	bf00      	nop
 8008ae4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bdb0      	pop	{r4, r5, r7, pc}
 8008aec:	080139a8 	.word	0x080139a8
 8008af0:	63825363 	.word	0x63825363

08008af4 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8008af4:	b5b0      	push	{r4, r5, r7, lr}
 8008af6:	b090      	sub	sp, #64	; 0x40
 8008af8:	af04      	add	r7, sp, #16
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 8008b00:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <tx_dhcp_request_sel+0x74>)
 8008b02:	f107 0414 	add.w	r4, r7, #20
 8008b06:	461d      	mov	r5, r3
 8008b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b10:	c403      	stmia	r4!, {r0, r1}
 8008b12:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 8008b14:	f107 0314 	add.w	r3, r7, #20
 8008b18:	330e      	adds	r3, #14
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 8008b1e:	f107 0314 	add.w	r3, r7, #20
 8008b22:	3314      	adds	r3, #20
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9302      	str	r3, [sp, #8]
 8008b2c:	2319      	movs	r3, #25
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	f107 0314 	add.w	r3, r7, #20
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	490b      	ldr	r1, [pc, #44]	; (8008b6c <tx_dhcp_request_sel+0x78>)
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f7ff ff48 	bl	80089d4 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008b44:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <tx_dhcp_request_sel+0x7c>)
 8008b46:	f641 7231 	movw	r2, #7985	; 0x1f31
 8008b4a:	490a      	ldr	r1, [pc, #40]	; (8008b74 <tx_dhcp_request_sel+0x80>)
 8008b4c:	2003      	movs	r0, #3
 8008b4e:	f7fd fb9f 	bl	8006290 <mg_log_prefix>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <tx_dhcp_request_sel+0x6a>
 8008b58:	4807      	ldr	r0, [pc, #28]	; (8008b78 <tx_dhcp_request_sel+0x84>)
 8008b5a:	f7fd fbf3 	bl	8006344 <mg_log>
}
 8008b5e:	bf00      	nop
 8008b60:	3730      	adds	r7, #48	; 0x30
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bdb0      	pop	{r4, r5, r7, pc}
 8008b66:	bf00      	nop
 8008b68:	08013ac8 	.word	0x08013ac8
 8008b6c:	08013ee4 	.word	0x08013ee4
 8008b70:	0801401c 	.word	0x0801401c
 8008b74:	0801261c 	.word	0x0801261c
 8008b78:	08013ab8 	.word	0x08013ab8

08008b7c <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08a      	sub	sp, #40	; 0x28
 8008b80:	af04      	add	r7, sp, #16
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 8008b8a:	4b10      	ldr	r3, [pc, #64]	; (8008bcc <tx_dhcp_request_re+0x50>)
 8008b8c:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8008b8e:	2301      	movs	r3, #1
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	2304      	movs	r3, #4
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	f107 0314 	add.w	r3, r7, #20
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff ff16 	bl	80089d4 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8008ba8:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <tx_dhcp_request_re+0x54>)
 8008baa:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8008bae:	4909      	ldr	r1, [pc, #36]	; (8008bd4 <tx_dhcp_request_re+0x58>)
 8008bb0:	2003      	movs	r0, #3
 8008bb2:	f7fd fb6d 	bl	8006290 <mg_log_prefix>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <tx_dhcp_request_re+0x46>
 8008bbc:	4806      	ldr	r0, [pc, #24]	; (8008bd8 <tx_dhcp_request_re+0x5c>)
 8008bbe:	f7fd fbc1 	bl	8006344 <mg_log>
}
 8008bc2:	bf00      	nop
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	ff030135 	.word	0xff030135
 8008bd0:	08014030 	.word	0x08014030
 8008bd4:	0801261c 	.word	0x0801261c
 8008bd8:	08013ab8 	.word	0x08013ab8

08008bdc <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af04      	add	r7, sp, #16
 8008be2:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 8008be4:	4a14      	ldr	r2, [pc, #80]	; (8008c38 <tx_dhcp_discover+0x5c>)
 8008be6:	f107 0308 	add.w	r3, r7, #8
 8008bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bee:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	f107 0308 	add.w	r3, r7, #8
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	2200      	movs	r2, #0
 8008c06:	490d      	ldr	r1, [pc, #52]	; (8008c3c <tx_dhcp_discover+0x60>)
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff fee3 	bl	80089d4 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <tx_dhcp_discover+0x64>)
 8008c10:	f641 7246 	movw	r2, #8006	; 0x1f46
 8008c14:	490b      	ldr	r1, [pc, #44]	; (8008c44 <tx_dhcp_discover+0x68>)
 8008c16:	2003      	movs	r0, #3
 8008c18:	f7fd fb3a 	bl	8006290 <mg_log_prefix>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <tx_dhcp_discover+0x52>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	461a      	mov	r2, r3
 8008c26:	4908      	ldr	r1, [pc, #32]	; (8008c48 <tx_dhcp_discover+0x6c>)
 8008c28:	4808      	ldr	r0, [pc, #32]	; (8008c4c <tx_dhcp_discover+0x70>)
 8008c2a:	f7fd fb8b 	bl	8006344 <mg_log>
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	08013b04 	.word	0x08013b04
 8008c3c:	08013ee4 	.word	0x08013ee4
 8008c40:	08014044 	.word	0x08014044
 8008c44:	0801261c 	.word	0x0801261c
 8008c48:	08006ba5 	.word	0x08006ba5
 8008c4c:	08013ae4 	.word	0x08013ae4

08008c50 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e03e      	b.n	8008ce8 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00b      	beq.n	8008c92 <getpeer+0x42>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d007      	beq.n	8008c92 <getpeer+0x42>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	8b1a      	ldrh	r2, [r3, #24]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	885b      	ldrh	r3, [r3, #2]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d02e      	beq.n	8008cf0 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d11f      	bne.n	8008ce2 <getpeer+0x92>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d01b      	beq.n	8008ce2 <getpeer+0x92>
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	8b1a      	ldrh	r2, [r3, #24]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb2:	885b      	ldrh	r3, [r3, #2]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d113      	bne.n	8008ce2 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008cc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cc4:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8008cc6:	79fa      	ldrb	r2, [r7, #7]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d10a      	bne.n	8008ce2 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10f      	bne.n	8008cf2 <getpeer+0xa2>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d007      	beq.n	8008cf2 <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1bd      	bne.n	8008c6a <getpeer+0x1a>
 8008cee:	e000      	b.n	8008cf2 <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8008cf0:	bf00      	nop
      break;
  }
  return c;
 8008cf2:	697b      	ldr	r3, [r7, #20]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008d00:	b5b0      	push	{r4, r5, r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	88db      	ldrh	r3, [r3, #6]
 8008d10:	b29c      	uxth	r4, r3
 8008d12:	2001      	movs	r0, #1
 8008d14:	f7fe ffdb 	bl	8007cce <mg_ntohs>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	429c      	cmp	r4, r3
 8008d1c:	d176      	bne.n	8008e0c <rx_arp+0x10c>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d16f      	bne.n	8008e0c <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	330e      	adds	r3, #14
 8008d36:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 8008d38:	6978      	ldr	r0, [r7, #20]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	3306      	adds	r3, #6
 8008d40:	2206      	movs	r2, #6
 8008d42:	4619      	mov	r1, r3
 8008d44:	f008 fe0b 	bl	801195e <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	3306      	adds	r3, #6
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	2206      	movs	r2, #6
 8008d50:	4618      	mov	r0, r3
 8008d52:	f008 fe04 	bl	801195e <memcpy>
    eth->type = mg_htons(0x806);
 8008d56:	f640 0006 	movw	r0, #2054	; 0x806
 8008d5a:	f7fe ffb8 	bl	8007cce <mg_ntohs>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	461a      	mov	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	699a      	ldr	r2, [r3, #24]
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6814      	ldr	r4, [r2, #0]
 8008d6e:	6850      	ldr	r0, [r2, #4]
 8008d70:	6891      	ldr	r1, [r2, #8]
 8008d72:	68d5      	ldr	r5, [r2, #12]
 8008d74:	601c      	str	r4, [r3, #0]
 8008d76:	6058      	str	r0, [r3, #4]
 8008d78:	6099      	str	r1, [r3, #8]
 8008d7a:	60dd      	str	r5, [r3, #12]
 8008d7c:	6914      	ldr	r4, [r2, #16]
 8008d7e:	6950      	ldr	r0, [r2, #20]
 8008d80:	6991      	ldr	r1, [r2, #24]
 8008d82:	611c      	str	r4, [r3, #16]
 8008d84:	6158      	str	r0, [r3, #20]
 8008d86:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 8008d88:	2002      	movs	r0, #2
 8008d8a:	f7fe ffa0 	bl	8007cce <mg_ntohs>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	461a      	mov	r2, r3
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f103 0012 	add.w	r0, r3, #18
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	3308      	adds	r3, #8
 8008da2:	2206      	movs	r2, #6
 8008da4:	4619      	mov	r1, r3
 8008da6:	f008 fdda 	bl	801195e <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3308      	adds	r3, #8
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	2206      	movs	r2, #6
 8008db2:	4618      	mov	r0, r3
 8008db4:	f008 fdd3 	bl	801195e <memcpy>
    arp->tpa = pkt->arp->spa;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 8008dce:	4b46      	ldr	r3, [pc, #280]	; (8008ee8 <rx_arp+0x1e8>)
 8008dd0:	f641 7265 	movw	r2, #8037	; 0x1f65
 8008dd4:	4945      	ldr	r1, [pc, #276]	; (8008eec <rx_arp+0x1ec>)
 8008dd6:	2003      	movs	r0, #3
 8008dd8:	f7fd fa5a 	bl	8006290 <mg_log_prefix>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <rx_arp+0xf8>
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f103 0218 	add.w	r2, r3, #24
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	3308      	adds	r3, #8
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4b40      	ldr	r3, [pc, #256]	; (8008ef0 <rx_arp+0x1f0>)
 8008df0:	493f      	ldr	r1, [pc, #252]	; (8008ef0 <rx_arp+0x1f0>)
 8008df2:	4840      	ldr	r0, [pc, #256]	; (8008ef4 <rx_arp+0x1f4>)
 8008df4:	f7fd faa6 	bl	8006344 <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f103 021c 	add.w	r2, r3, #28
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff fc26 	bl	8008656 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8008e0a:	e069      	b.n	8008ee0 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	88db      	ldrh	r3, [r3, #6]
 8008e12:	b29c      	uxth	r4, r3
 8008e14:	2002      	movs	r0, #2
 8008e16:	f7fe ff5a 	bl	8007cce <mg_ntohs>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	d15f      	bne.n	8008ee0 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	3312      	adds	r3, #18
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	2206      	movs	r2, #6
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f008 fca3 	bl	8011776 <memcmp>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d153      	bne.n	8008ede <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d10a      	bne.n	8008e5c <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	3308      	adds	r3, #8
 8008e52:	2206      	movs	r2, #6
 8008e54:	4619      	mov	r1, r3
 8008e56:	f008 fd82 	bl	801195e <memcpy>
 8008e5a:	e041      	b.n	8008ee0 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e60:	2200      	movs	r2, #0
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff fef3 	bl	8008c50 <getpeer>
 8008e6a:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d036      	beq.n	8008ee0 <rx_arp+0x1e0>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d02e      	beq.n	8008ee0 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3390      	adds	r3, #144	; 0x90
 8008e86:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f103 0010 	add.w	r0, r3, #16
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	3308      	adds	r3, #8
 8008e94:	2206      	movs	r2, #6
 8008e96:	4619      	mov	r1, r3
 8008e98:	f008 fd61 	bl	801195e <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8008e9c:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <rx_arp+0x1e8>)
 8008e9e:	f641 7272 	movw	r2, #8050	; 0x1f72
 8008ea2:	4912      	ldr	r1, [pc, #72]	; (8008eec <rx_arp+0x1ec>)
 8008ea4:	2003      	movs	r0, #3
 8008ea6:	f7fd f9f3 	bl	8006290 <mg_log_prefix>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <rx_arp+0x1ce>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f103 021c 	add.w	r2, r3, #28
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <rx_arp+0x1f8>)
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	4a0a      	ldr	r2, [pc, #40]	; (8008ef0 <rx_arp+0x1f0>)
 8008ec8:	480c      	ldr	r0, [pc, #48]	; (8008efc <rx_arp+0x1fc>)
 8008eca:	f7fd fa3b 	bl	8006344 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8008ed4:	f36f 1304 	bfc	r3, #4, #1
 8008ed8:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 8008edc:	e000      	b.n	8008ee0 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8008ede:	bf00      	nop
      }
    }
  }
}
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	08014058 	.word	0x08014058
 8008eec:	0801261c 	.word	0x0801261c
 8008ef0:	08006ae1 	.word	0x08006ae1
 8008ef4:	08013b0c 	.word	0x08013b0c
 8008ef8:	08006ba5 	.word	0x08006ba5
 8008efc:	08013b24 	.word	0x08013b24

08008f00 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	; 0x28
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d14d      	bne.n	8008fb0 <rx_icmp+0xb0>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d049      	beq.n	8008fb0 <rx_icmp+0xb0>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	691a      	ldr	r2, [r3, #16]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d142      	bne.n	8008fb0 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 8008f2a:	2326      	movs	r3, #38	; 0x26
 8008f2c:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d901      	bls.n	8008f4a <rx_icmp+0x4a>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	1d99      	adds	r1, r3, #6
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6898      	ldr	r0, [r3, #8]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	3204      	adds	r2, #4
 8008f5e:	9201      	str	r2, [sp, #4]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4603      	mov	r3, r0
 8008f64:	2201      	movs	r2, #1
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff fc74 	bl	8008854 <tx_ip>
 8008f6c:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3314      	adds	r3, #20
 8008f72:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 8008f74:	2204      	movs	r2, #4
 8008f76:	2100      	movs	r1, #0
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f008 fc26 	bl	80117ca <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	1d18      	adds	r0, r3, #4
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f008 fce8 	bl	801195e <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4619      	mov	r1, r3
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff fb4b 	bl	8008630 <ipcsum>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fb53 	bl	8008656 <ether_output>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3720      	adds	r7, #32
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8008fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fbc:	b08e      	sub	sp, #56	; 0x38
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc8:	2300      	movs	r3, #0
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe8:	33f0      	adds	r3, #240	; 0xf0
 8008fea:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009002:	429a      	cmp	r2, r3
 8009004:	f0c0 8151 	bcc.w	80092aa <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	1d18      	adds	r0, r3, #4
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3302      	adds	r3, #2
 8009012:	2204      	movs	r2, #4
 8009014:	4619      	mov	r1, r3
 8009016:	f008 fbae 	bl	8011776 <memcmp>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	f040 8146 	bne.w	80092ae <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 8009022:	e05b      	b.n	80090dc <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d10e      	bne.n	800904a <rx_dhcp_client+0x92>
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	3301      	adds	r3, #1
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b04      	cmp	r3, #4
 8009034:	d109      	bne.n	800904a <rx_dhcp_client+0x92>
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	3306      	adds	r3, #6
 800903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903c:	429a      	cmp	r2, r3
 800903e:	d904      	bls.n	800904a <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	3302      	adds	r3, #2
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	e041      	b.n	80090ce <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d112      	bne.n	8009078 <rx_dhcp_client+0xc0>
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	3301      	adds	r3, #1
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b04      	cmp	r3, #4
 800905a:	d10d      	bne.n	8009078 <rx_dhcp_client+0xc0>
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	3306      	adds	r3, #6
 8009060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009062:	429a      	cmp	r2, r3
 8009064:	d908      	bls.n	8009078 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	3302      	adds	r3, #2
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	637b      	str	r3, [r7, #52]	; 0x34
 8009076:	e02a      	b.n	80090ce <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b33      	cmp	r3, #51	; 0x33
 800907e:	d114      	bne.n	80090aa <rx_dhcp_client+0xf2>
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	3301      	adds	r3, #1
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b04      	cmp	r3, #4
 8009088:	d10f      	bne.n	80090aa <rx_dhcp_client+0xf2>
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	3306      	adds	r3, #6
 800908e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009090:	429a      	cmp	r2, r3
 8009092:	d90a      	bls.n	80090aa <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	3302      	adds	r3, #2
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fdfc 	bl	8007c9c <mg_ntohl>
 80090a4:	4603      	mov	r3, r0
 80090a6:	61bb      	str	r3, [r7, #24]
 80090a8:	e011      	b.n	80090ce <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b35      	cmp	r3, #53	; 0x35
 80090b0:	d10d      	bne.n	80090ce <rx_dhcp_client+0x116>
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	3301      	adds	r3, #1
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d108      	bne.n	80090ce <rx_dhcp_client+0x116>
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090be:	3306      	adds	r3, #6
 80090c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d903      	bls.n	80090ce <rx_dhcp_client+0x116>
      msgtype = p[2];
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	789b      	ldrb	r3, [r3, #2]
 80090ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	3301      	adds	r3, #1
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	3302      	adds	r3, #2
 80090d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d8:	4413      	add	r3, r2
 80090da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	3301      	adds	r3, #1
 80090e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d903      	bls.n	80090ee <rx_dhcp_client+0x136>
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2bff      	cmp	r3, #255	; 0xff
 80090ec:	d19a      	bne.n	8009024 <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 80090ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090f2:	2b06      	cmp	r3, #6
 80090f4:	d10c      	bne.n	8009110 <rx_dhcp_client+0x158>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d107      	bne.n	8009110 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	609a      	str	r2, [r3, #8]
 800910e:	e0c1      	b.n	8009294 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 8009110:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009114:	2b02      	cmp	r3, #2
 8009116:	d11a      	bne.n	800914e <rx_dhcp_client+0x196>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800911e:	2b01      	cmp	r3, #1
 8009120:	d115      	bne.n	800914e <rx_dhcp_client+0x196>
 8009122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009124:	2b00      	cmp	r3, #0
 8009126:	d012      	beq.n	800914e <rx_dhcp_client+0x196>
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00f      	beq.n	800914e <rx_dhcp_client+0x196>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00c      	beq.n	800914e <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	461a      	mov	r2, r3
 800913c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fcd8 	bl	8008af4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800914c:	e0a2      	b.n	8009294 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 800914e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009152:	2b05      	cmp	r3, #5
 8009154:	f040 809e 	bne.w	8009294 <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800915e:	2b02      	cmp	r3, #2
 8009160:	d162      	bne.n	8009228 <rx_dhcp_client+0x270>
 8009162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009164:	2b00      	cmp	r3, #0
 8009166:	d05f      	beq.n	8009228 <rx_dhcp_client+0x270>
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d05c      	beq.n	8009228 <rx_dhcp_client+0x270>
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d059      	beq.n	8009228 <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800917a:	69b9      	ldr	r1, [r7, #24]
 800917c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009180:	fb00 f101 	mul.w	r1, r0, r1
 8009184:	2000      	movs	r0, #0
 8009186:	4688      	mov	r8, r1
 8009188:	4681      	mov	r9, r0
 800918a:	eb12 0108 	adds.w	r1, r2, r8
 800918e:	6039      	str	r1, [r7, #0]
 8009190:	eb43 0309 	adc.w	r3, r3, r9
 8009194:	607b      	str	r3, [r7, #4]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	e9d7 1200 	ldrd	r1, r2, [r7]
 800919c:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80091a0:	4b45      	ldr	r3, [pc, #276]	; (80092b8 <rx_dhcp_client+0x300>)
 80091a2:	f641 72aa 	movw	r2, #8106	; 0x1faa
 80091a6:	4945      	ldr	r1, [pc, #276]	; (80092bc <rx_dhcp_client+0x304>)
 80091a8:	2002      	movs	r0, #2
 80091aa:	f7fd f871 	bl	8006290 <mg_log_prefix>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00f      	beq.n	80091d4 <rx_dhcp_client+0x21c>
 80091b4:	69bc      	ldr	r4, [r7, #24]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80091bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	f7f7 fd0a 	bl	8000bdc <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4621      	mov	r1, r4
 80091ce:	483c      	ldr	r0, [pc, #240]	; (80092c0 <rx_dhcp_client+0x308>)
 80091d0:	f7fd f8b8 	bl	8006344 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	3306      	adds	r3, #6
 80091e0:	2206      	movs	r2, #6
 80091e2:	4619      	mov	r1, r3
 80091e4:	f008 fbbb 	bl	801195e <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ec:	609a      	str	r2, [r3, #8]
 80091ee:	6a3a      	ldr	r2, [r7, #32]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	611a      	str	r2, [r3, #16]
 80091f4:	69fa      	ldr	r2, [r7, #28]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2203      	movs	r2, #3
 80091fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 8009202:	f107 0310 	add.w	r3, r7, #16
 8009206:	2108      	movs	r1, #8
 8009208:	4618      	mov	r0, r3
 800920a:	f7f8 f865 	bl	80012d8 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800920e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009212:	4614      	mov	r4, r2
 8009214:	f7fe fdac 	bl	8007d70 <mg_millis>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4613      	mov	r3, r2
 800921e:	4423      	add	r3, r4
 8009220:	4618      	mov	r0, r3
 8009222:	f008 f8cf 	bl	80113c4 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8009226:	e035      	b.n	8009294 <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800922e:	2b03      	cmp	r3, #3
 8009230:	d130      	bne.n	8009294 <rx_dhcp_client+0x2dc>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009238:	429a      	cmp	r2, r3
 800923a:	d12b      	bne.n	8009294 <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009242:	69b9      	ldr	r1, [r7, #24]
 8009244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009248:	fb00 f101 	mul.w	r1, r0, r1
 800924c:	2000      	movs	r0, #0
 800924e:	460c      	mov	r4, r1
 8009250:	4605      	mov	r5, r0
 8009252:	eb12 0a04 	adds.w	sl, r2, r4
 8009256:	eb43 0b05 	adc.w	fp, r3, r5
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 8009260:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <rx_dhcp_client+0x300>)
 8009262:	f641 72b4 	movw	r2, #8116	; 0x1fb4
 8009266:	4915      	ldr	r1, [pc, #84]	; (80092bc <rx_dhcp_client+0x304>)
 8009268:	2002      	movs	r0, #2
 800926a:	f7fd f811 	bl	8006290 <mg_log_prefix>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00f      	beq.n	8009294 <rx_dhcp_client+0x2dc>
 8009274:	69bc      	ldr	r4, [r7, #24]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800927c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	f7f7 fcaa 	bl	8000bdc <__aeabi_uldivmod>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4621      	mov	r1, r4
 800928e:	480c      	ldr	r0, [pc, #48]	; (80092c0 <rx_dhcp_client+0x308>)
 8009290:	f7fd f858 	bl	8006344 <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800929a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800929e:	429a      	cmp	r2, r3
 80092a0:	d006      	beq.n	80092b0 <rx_dhcp_client+0x2f8>
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff fa50 	bl	8008748 <onstatechange>
 80092a8:	e002      	b.n	80092b0 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 80092aa:	bf00      	nop
 80092ac:	e000      	b.n	80092b0 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 80092ae:	bf00      	nop
}
 80092b0:	3738      	adds	r7, #56	; 0x38
 80092b2:	46bd      	mov	sp, r7
 80092b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092b8:	08014060 	.word	0x08014060
 80092bc:	0801261c 	.word	0x0801261c
 80092c0:	08013b40 	.word	0x08013b40

080092c4 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80092c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c8:	b0d6      	sub	sp, #344	; 0x158
 80092ca:	af04      	add	r7, sp, #16
 80092cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092d0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80092d4:	6018      	str	r0, [r3, #0]
 80092d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80092de:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 80092e0:	2300      	movs	r3, #0
 80092e2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 80092e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092ea:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	33f0      	adds	r3, #240	; 0xf0
 80092f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 80092f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80092fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009308:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	4413      	add	r3, r2
 8009312:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009316:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800931a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009326:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800932a:	429a      	cmp	r2, r3
 800932c:	f0c0 818b 	bcc.w	8009646 <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8009330:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009334:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009338:	4ac6      	ldr	r2, [pc, #792]	; (8009654 <rx_dhcp_server+0x390>)
 800933a:	4618      	mov	r0, r3
 800933c:	4611      	mov	r1, r2
 800933e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009342:	461a      	mov	r2, r3
 8009344:	f008 fb0b 	bl	801195e <memcpy>
  res.yiaddr = ifp->ip;
 8009348:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800934c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009358:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800935c:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800935e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009362:	3310      	adds	r3, #16
 8009364:	3303      	adds	r3, #3
 8009366:	781a      	ldrb	r2, [r3, #0]
 8009368:	3201      	adds	r2, #1
 800936a:	b2d2      	uxtb	r2, r2
 800936c:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800936e:	e020      	b.n	80093b2 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 8009370:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b35      	cmp	r3, #53	; 0x35
 8009378:	d111      	bne.n	800939e <rx_dhcp_server+0xda>
 800937a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800937e:	3301      	adds	r3, #1
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d10b      	bne.n	800939e <rx_dhcp_server+0xda>
 8009386:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800938a:	3302      	adds	r3, #2
 800938c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009390:	429a      	cmp	r2, r3
 8009392:	d904      	bls.n	800939e <rx_dhcp_server+0xda>
      op = p[2];
 8009394:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009398:	789b      	ldrb	r3, [r3, #2]
 800939a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 800939e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093a2:	3301      	adds	r3, #1
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	3302      	adds	r3, #2
 80093a8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80093ac:	4413      	add	r3, r2
 80093ae:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 80093b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093b6:	3301      	adds	r3, #1
 80093b8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80093bc:	429a      	cmp	r2, r3
 80093be:	d904      	bls.n	80093ca <rx_dhcp_server+0x106>
 80093c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2bff      	cmp	r3, #255	; 0xff
 80093c8:	d1d2      	bne.n	8009370 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 80093ca:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d004      	beq.n	80093dc <rx_dhcp_server+0x118>
 80093d2:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	f040 8136 	bne.w	8009648 <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 80093dc:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <rx_dhcp_server+0x124>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e000      	b.n	80093ea <rx_dhcp_server+0x126>
 80093e8:	2305      	movs	r3, #5
 80093ea:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 80093ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80093f6:	2235      	movs	r2, #53	; 0x35
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80093fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009402:	2201      	movs	r2, #1
 8009404:	705a      	strb	r2, [r3, #1]
 8009406:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800940a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800940e:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 8009412:	709a      	strb	r2, [r3, #2]
 8009414:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009418:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800941c:	2201      	movs	r2, #1
 800941e:	70da      	strb	r2, [r3, #3]
 8009420:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009424:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009428:	2204      	movs	r2, #4
 800942a:	711a      	strb	r2, [r3, #4]
 800942c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009430:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009434:	2200      	movs	r2, #0
 8009436:	715a      	strb	r2, [r3, #5]
 8009438:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800943c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009440:	2200      	movs	r2, #0
 8009442:	719a      	strb	r2, [r3, #6]
 8009444:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009448:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800944c:	2200      	movs	r2, #0
 800944e:	71da      	strb	r2, [r3, #7]
 8009450:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009454:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009458:	2200      	movs	r2, #0
 800945a:	721a      	strb	r2, [r3, #8]
 800945c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009460:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009464:	2236      	movs	r2, #54	; 0x36
 8009466:	725a      	strb	r2, [r3, #9]
 8009468:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800946c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009470:	2204      	movs	r2, #4
 8009472:	729a      	strb	r2, [r3, #10]
 8009474:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009478:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800947c:	2200      	movs	r2, #0
 800947e:	72da      	strb	r2, [r3, #11]
 8009480:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009484:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009488:	2200      	movs	r2, #0
 800948a:	731a      	strb	r2, [r3, #12]
 800948c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009490:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009494:	2200      	movs	r2, #0
 8009496:	735a      	strb	r2, [r3, #13]
 8009498:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800949c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094a0:	2200      	movs	r2, #0
 80094a2:	739a      	strb	r2, [r3, #14]
 80094a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094ac:	220c      	movs	r2, #12
 80094ae:	73da      	strb	r2, [r3, #15]
 80094b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094b8:	2203      	movs	r2, #3
 80094ba:	741a      	strb	r2, [r3, #16]
 80094bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094c4:	226d      	movs	r2, #109	; 0x6d
 80094c6:	745a      	strb	r2, [r3, #17]
 80094c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094d0:	2269      	movs	r2, #105	; 0x69
 80094d2:	749a      	strb	r2, [r3, #18]
 80094d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094dc:	2270      	movs	r2, #112	; 0x70
 80094de:	74da      	strb	r2, [r3, #19]
 80094e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094e8:	2233      	movs	r2, #51	; 0x33
 80094ea:	751a      	strb	r2, [r3, #20]
 80094ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80094f4:	2204      	movs	r2, #4
 80094f6:	755a      	strb	r2, [r3, #21]
 80094f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80094fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009500:	22ff      	movs	r2, #255	; 0xff
 8009502:	759a      	strb	r2, [r3, #22]
 8009504:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009508:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800950c:	22ff      	movs	r2, #255	; 0xff
 800950e:	75da      	strb	r2, [r3, #23]
 8009510:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009514:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009518:	22ff      	movs	r2, #255	; 0xff
 800951a:	761a      	strb	r2, [r3, #24]
 800951c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009520:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009524:	22ff      	movs	r2, #255	; 0xff
 8009526:	765a      	strb	r2, [r3, #25]
 8009528:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800952c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009530:	22ff      	movs	r2, #255	; 0xff
 8009532:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 8009534:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009538:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009540:	f103 011c 	add.w	r1, r3, #28
 8009544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009548:	331c      	adds	r3, #28
 800954a:	2206      	movs	r2, #6
 800954c:	4618      	mov	r0, r3
 800954e:	f008 fa06 	bl	801195e <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 8009552:	f107 030c 	add.w	r3, r7, #12
 8009556:	3305      	adds	r3, #5
 8009558:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800955c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	320c      	adds	r2, #12
 8009564:	6812      	ldr	r2, [r2, #0]
 8009566:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 8009568:	f107 030c 	add.w	r3, r7, #12
 800956c:	330b      	adds	r3, #11
 800956e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009572:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	3208      	adds	r2, #8
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800957e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009582:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009586:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800958a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800958e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8009592:	4615      	mov	r5, r2
 8009594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800959c:	c403      	stmia	r4!, {r0, r1}
 800959e:	8022      	strh	r2, [r4, #0]
 80095a0:	3402      	adds	r4, #2
 80095a2:	0c13      	lsrs	r3, r2, #16
 80095a4:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 80095a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095aa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80095b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80095be:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 80095c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095c6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80095d8:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 80095da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095de:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	1d9d      	adds	r5, r3, #6
 80095e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80095ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689e      	ldr	r6, [r3, #8]
 80095f4:	2043      	movs	r0, #67	; 0x43
 80095f6:	f7fe fb6a 	bl	8007cce <mg_ntohs>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4698      	mov	r8, r3
 80095fe:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009602:	2b01      	cmp	r3, #1
 8009604:	d005      	beq.n	8009612 <rx_dhcp_server+0x34e>
 8009606:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800960a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800960e:	691c      	ldr	r4, [r3, #16]
 8009610:	e001      	b.n	8009616 <rx_dhcp_server+0x352>
 8009612:	f04f 34ff 	mov.w	r4, #4294967295
 8009616:	2044      	movs	r0, #68	; 0x44
 8009618:	f7fe fb59 	bl	8007cce <mg_ntohs>
 800961c:	4603      	mov	r3, r0
 800961e:	461a      	mov	r2, r3
 8009620:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009624:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8009628:	f44f 7388 	mov.w	r3, #272	; 0x110
 800962c:	9303      	str	r3, [sp, #12]
 800962e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009632:	9302      	str	r3, [sp, #8]
 8009634:	9201      	str	r2, [sp, #4]
 8009636:	9400      	str	r4, [sp, #0]
 8009638:	4643      	mov	r3, r8
 800963a:	4632      	mov	r2, r6
 800963c:	4629      	mov	r1, r5
 800963e:	6800      	ldr	r0, [r0, #0]
 8009640:	f7ff f95e 	bl	8008900 <tx_udp>
 8009644:	e000      	b.n	8009648 <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8009646:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 8009648:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800964c:	46bd      	mov	sp, r7
 800964e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009652:	bf00      	nop
 8009654:	08013b58 	.word	0x08013b58

08009658 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	2201      	movs	r2, #1
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff faf0 	bl	8008c50 <getpeer>
 8009670:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d059      	beq.n	800972c <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	331c      	adds	r3, #28
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	69d2      	ldr	r2, [r2, #28]
 800968c:	320c      	adds	r2, #12
 800968e:	6812      	ldr	r2, [r2, #0]
 8009690:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3390      	adds	r3, #144	; 0x90
 8009696:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f103 0010 	add.w	r0, r3, #16
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	3306      	adds	r3, #6
 80096a4:	2206      	movs	r2, #6
 80096a6:	4619      	mov	r1, r3
 80096a8:	f008 f959 	bl	801195e <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096b4:	d304      	bcc.n	80096c0 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 80096b6:	491f      	ldr	r1, [pc, #124]	; (8009734 <rx_udp+0xdc>)
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7f8 f8a5 	bl	8001808 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 80096be:	e035      	b.n	800972c <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	1ad2      	subs	r2, r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d212      	bcs.n	80096f8 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	4619      	mov	r1, r3
 80096e4:	f7fb ff52 	bl	800558c <mg_iobuf_resize>
 80096e8:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d104      	bne.n	80096f8 <rx_udp+0xa0>
      mg_error(c, "oom");
 80096ee:	4912      	ldr	r1, [pc, #72]	; (8009738 <rx_udp+0xe0>)
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7f8 f889 	bl	8001808 <mg_error>
}
 80096f6:	e019      	b.n	800972c <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	18d0      	adds	r0, r2, r3
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6899      	ldr	r1, [r3, #8]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	461a      	mov	r2, r3
 800970c:	f008 f927 	bl	801195e <memcpy>
      c->recv.len += pkt->pay.len;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	441a      	add	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	330c      	adds	r3, #12
 8009722:	461a      	mov	r2, r3
 8009724:	2107      	movs	r1, #7
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7f8 f84b 	bl	80017c2 <mg_call>
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	08013c68 	.word	0x08013c68
 8009738:	08013c84 	.word	0x08013c84

0800973c <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800973c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973e:	b091      	sub	sp, #68	; 0x44
 8009740:	af06      	add	r7, sp, #24
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009750:	3314      	adds	r3, #20
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	4613      	mov	r3, r2
 800975a:	2206      	movs	r2, #6
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7ff f878 	bl	8008854 <tx_ip>
 8009764:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	3314      	adds	r3, #20
 800976a:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800976c:	2214      	movs	r2, #20
 800976e:	2100      	movs	r1, #0
 8009770:	6a38      	ldr	r0, [r7, #32]
 8009772:	f008 f82a 	bl	80117ca <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 8009776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009778:	2b00      	cmp	r3, #0
 800977a:	d009      	beq.n	8009790 <tx_tcp+0x54>
 800977c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977e:	2b00      	cmp	r3, #0
 8009780:	d006      	beq.n	8009790 <tx_tcp+0x54>
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	3314      	adds	r3, #20
 8009786:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009788:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800978a:	4618      	mov	r0, r3
 800978c:	f008 f803 	bl	8011796 <memmove>
  tcp->sport = sport;
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009796:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800979e:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a4:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097aa:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 80097b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80097b6:	f7fe fa8a 	bl	8007cce <mg_ntohs>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	2250      	movs	r2, #80	; 0x50
 80097c6:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 80097cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	3314      	adds	r3, #20
 80097d2:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 80097d4:	2300      	movs	r3, #0
 80097d6:	753b      	strb	r3, [r7, #20]
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	7a5b      	ldrb	r3, [r3, #9]
 80097dc:	757b      	strb	r3, [r7, #21]
 80097de:	8b7b      	ldrh	r3, [r7, #26]
 80097e0:	0a1b      	lsrs	r3, r3, #8
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	75bb      	strb	r3, [r7, #22]
 80097e8:	8b7b      	ldrh	r3, [r7, #26]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 80097ee:	8b7b      	ldrh	r3, [r7, #26]
 80097f0:	461a      	mov	r2, r3
 80097f2:	6a39      	ldr	r1, [r7, #32]
 80097f4:	69f8      	ldr	r0, [r7, #28]
 80097f6:	f7fe fed3 	bl	80085a0 <csumup>
 80097fa:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	330c      	adds	r3, #12
 8009800:	2204      	movs	r2, #4
 8009802:	4619      	mov	r1, r3
 8009804:	69f8      	ldr	r0, [r7, #28]
 8009806:	f7fe fecb 	bl	80085a0 <csumup>
 800980a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	3310      	adds	r3, #16
 8009810:	2204      	movs	r2, #4
 8009812:	4619      	mov	r1, r3
 8009814:	69f8      	ldr	r0, [r7, #28]
 8009816:	f7fe fec3 	bl	80085a0 <csumup>
 800981a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800981c:	f107 0314 	add.w	r3, r7, #20
 8009820:	2204      	movs	r2, #4
 8009822:	4619      	mov	r1, r3
 8009824:	69f8      	ldr	r0, [r7, #28]
 8009826:	f7fe febb 	bl	80085a0 <csumup>
 800982a:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800982c:	69f8      	ldr	r0, [r7, #28]
 800982e:	f7fe fee4 	bl	80085fa <csumfin>
 8009832:	4603      	mov	r3, r0
 8009834:	461a      	mov	r2, r3
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800983a:	4b21      	ldr	r3, [pc, #132]	; (80098c0 <tx_tcp+0x184>)
 800983c:	f242 020c 	movw	r2, #8204	; 0x200c
 8009840:	4920      	ldr	r1, [pc, #128]	; (80098c4 <tx_tcp+0x188>)
 8009842:	2003      	movs	r0, #3
 8009844:	f7fc fd24 	bl	8006290 <mg_log_prefix>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d025      	beq.n	800989a <tx_tcp+0x15e>
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	f103 050c 	add.w	r5, r3, #12
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	b29b      	uxth	r3, r3
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fa37 	bl	8007cce <mg_ntohs>
 8009860:	4603      	mov	r3, r0
 8009862:	461e      	mov	r6, r3
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	f103 0410 	add.w	r4, r3, #16
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	885b      	ldrh	r3, [r3, #2]
 800986e:	b29b      	uxth	r3, r3
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe fa2c 	bl	8007cce <mg_ntohs>
 8009876:	4603      	mov	r3, r0
 8009878:	461a      	mov	r2, r3
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	7b5b      	ldrb	r3, [r3, #13]
 800987e:	4619      	mov	r1, r3
 8009880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	9103      	str	r1, [sp, #12]
 8009886:	9202      	str	r2, [sp, #8]
 8009888:	9401      	str	r4, [sp, #4]
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <tx_tcp+0x18c>)
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	4633      	mov	r3, r6
 8009890:	462a      	mov	r2, r5
 8009892:	490d      	ldr	r1, [pc, #52]	; (80098c8 <tx_tcp+0x18c>)
 8009894:	480d      	ldr	r0, [pc, #52]	; (80098cc <tx_tcp+0x190>)
 8009896:	f7fc fd55 	bl	8006344 <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	f103 0214 	add.w	r2, r3, #20
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098aa:	4413      	add	r3, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7fe fed1 	bl	8008656 <ether_output>
 80098b4:	4603      	mov	r3, r0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	372c      	adds	r7, #44	; 0x2c
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098be:	bf00      	nop
 80098c0:	08014070 	.word	0x08014070
 80098c4:	0801261c 	.word	0x0801261c
 80098c8:	08006ae1 	.word	0x08006ae1
 80098cc:	08013c88 	.word	0x08013c88

080098d0 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 80098d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d4:	b08c      	sub	sp, #48	; 0x30
 80098d6:	af06      	add	r7, sp, #24
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	603b      	str	r3, [r7, #0]
 80098de:	4613      	mov	r3, r2
 80098e0:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e6:	7b5b      	ldrb	r3, [r3, #13]
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bf14      	ite	ne
 80098f0:	2301      	movne	r3, #1
 80098f2:	2300      	moveq	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	1d9e      	adds	r6, r3, #6
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990a:	885b      	ldrh	r3, [r3, #2]
 800990c:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	4618      	mov	r0, r3
 800991e:	f7fe f9bd 	bl	8007c9c <mg_ntohl>
 8009922:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	4413      	add	r3, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe f9b7 	bl	8007c9c <mg_ntohl>
 800992e:	4601      	mov	r1, r0
 8009930:	79fa      	ldrb	r2, [r7, #7]
 8009932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009934:	9305      	str	r3, [sp, #20]
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	9304      	str	r3, [sp, #16]
 800993a:	9103      	str	r1, [sp, #12]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	9302      	str	r3, [sp, #8]
 8009940:	9501      	str	r5, [sp, #4]
 8009942:	9400      	str	r4, [sp, #0]
 8009944:	4613      	mov	r3, r2
 8009946:	4642      	mov	r2, r8
 8009948:	4631      	mov	r1, r6
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7ff fef6 	bl	800973c <tx_tcp>
 8009950:	4603      	mov	r3, r0
                buf, len);
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800995c <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800995c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009960:	b088      	sub	sp, #32
 8009962:	af02      	add	r7, sp, #8
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009970:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3390      	adds	r3, #144	; 0x90
 8009976:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d101      	bne.n	8009982 <settmout+0x26>
 800997e:	2396      	movs	r3, #150	; 0x96
 8009980:	e001      	b.n	8009986 <settmout+0x2a>
 8009982:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8009986:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800998e:	68f9      	ldr	r1, [r7, #12]
 8009990:	2000      	movs	r0, #0
 8009992:	460c      	mov	r4, r1
 8009994:	4605      	mov	r5, r0
 8009996:	eb12 0804 	adds.w	r8, r2, r4
 800999a:	eb43 0905 	adc.w	r9, r3, r5
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	78fa      	ldrb	r2, [r7, #3]
 80099a8:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80099aa:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <settmout+0x84>)
 80099ac:	f242 0221 	movw	r2, #8225	; 0x2021
 80099b0:	490c      	ldr	r1, [pc, #48]	; (80099e4 <settmout+0x88>)
 80099b2:	2004      	movs	r0, #4
 80099b4:	f7fc fc6c 	bl	8006290 <mg_log_prefix>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00b      	beq.n	80099d6 <settmout+0x7a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80099c2:	78f8      	ldrb	r0, [r7, #3]
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80099ca:	e9cd 2300 	strd	r2, r3, [sp]
 80099ce:	4602      	mov	r2, r0
 80099d0:	4805      	ldr	r0, [pc, #20]	; (80099e8 <settmout+0x8c>)
 80099d2:	f7fc fcb7 	bl	8006344 <mg_log>
}
 80099d6:	bf00      	nop
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80099e0:	08014078 	.word	0x08014078
 80099e4:	0801261c 	.word	0x0801261c
 80099e8:	08013cac 	.word	0x08013cac

080099ec <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 80099ec:	b5b0      	push	{r4, r5, r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fc fdc2 	bl	8006584 <mg_alloc_conn>
 8009a00:	6178      	str	r0, [r7, #20]
  if (c == NULL) {
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10e      	bne.n	8009a26 <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 8009a08:	4b55      	ldr	r3, [pc, #340]	; (8009b60 <accept_conn+0x174>)
 8009a0a:	f242 0228 	movw	r2, #8232	; 0x2028
 8009a0e:	4955      	ldr	r1, [pc, #340]	; (8009b64 <accept_conn+0x178>)
 8009a10:	2001      	movs	r0, #1
 8009a12:	f7fc fc3d 	bl	8006290 <mg_log_prefix>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <accept_conn+0x36>
 8009a1c:	4852      	ldr	r0, [pc, #328]	; (8009b68 <accept_conn+0x17c>)
 8009a1e:	f7fc fc91 	bl	8006344 <mg_log>
    return NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e098      	b.n	8009b58 <accept_conn+0x16c>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	3390      	adds	r3, #144	; 0x90
 8009a2a:	613b      	str	r3, [r7, #16]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe f932 	bl	8007c9c <mg_ntohl>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe f929 	bl	8007c9c <mg_ntohl>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f103 0010 	add.w	r0, r3, #16
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	3306      	adds	r3, #6
 8009a5c:	2206      	movs	r2, #6
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f007 ff7d 	bl	801195e <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8009a64:	2100      	movs	r1, #0
 8009a66:	6978      	ldr	r0, [r7, #20]
 8009a68:	f7ff ff78 	bl	800995c <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	331c      	adds	r3, #28
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	69d2      	ldr	r2, [r2, #28]
 8009a74:	320c      	adds	r2, #12
 8009a76:	6812      	ldr	r2, [r2, #0]
 8009a78:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8009a86:	4b36      	ldr	r3, [pc, #216]	; (8009b60 <accept_conn+0x174>)
 8009a88:	f242 0231 	movw	r2, #8241	; 0x2031
 8009a8c:	4935      	ldr	r1, [pc, #212]	; (8009b64 <accept_conn+0x178>)
 8009a8e:	2003      	movs	r0, #3
 8009a90:	f7fc fbfe 	bl	8006290 <mg_log_prefix>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d007      	beq.n	8009aaa <accept_conn+0xbe>
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	331c      	adds	r3, #28
 8009aa2:	4a32      	ldr	r2, [pc, #200]	; (8009b6c <accept_conn+0x180>)
 8009aa4:	4832      	ldr	r0, [pc, #200]	; (8009b70 <accept_conn+0x184>)
 8009aa6:	f7fc fc4d 	bl	8006344 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8009ac2:	f043 0304 	orr.w	r3, r3, #4
 8009ac6:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009ad0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009ad4:	b2d9      	uxtb	r1, r3
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009adc:	f361 03c3 	bfi	r3, r1, #3, #1
 8009ae0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f102 0408 	add.w	r4, r2, #8
 8009af4:	f103 0508 	add.w	r5, r3, #8
 8009af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	6978      	ldr	r0, [r7, #20]
 8009b1e:	f7f7 fe50 	bl	80017c2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8009b22:	2200      	movs	r2, #0
 8009b24:	2105      	movs	r1, #5
 8009b26:	6978      	ldr	r0, [r7, #20]
 8009b28:	f7f7 fe4b 	bl	80017c2 <mg_call>
  if (lsn->is_tls) mg_tls_init(c, mg_str(""));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00c      	beq.n	8009b56 <accept_conn+0x16a>
 8009b3c:	f107 0308 	add.w	r3, r7, #8
 8009b40:	490c      	ldr	r1, [pc, #48]	; (8009b74 <accept_conn+0x188>)
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fd fa6c 	bl	8007020 <mg_str_s>
 8009b48:	f107 0308 	add.w	r3, r7, #8
 8009b4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009b50:	6978      	ldr	r0, [r7, #20]
 8009b52:	f7fd ff27 	bl	80079a4 <mg_tls_init>
  return c;
 8009b56:	697b      	ldr	r3, [r7, #20]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b60:	08014084 	.word	0x08014084
 8009b64:	0801261c 	.word	0x0801261c
 8009b68:	0801333c 	.word	0x0801333c
 8009b6c:	08006b59 	.word	0x08006b59
 8009b70:	08013cbc 	.word	0x08013cbc
 8009b74:	08012cac 	.word	0x08012cac

08009b78 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8009b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b7a:	b093      	sub	sp, #76	; 0x4c
 8009b7c:	af06      	add	r7, sp, #24
 8009b7e:	6178      	str	r0, [r7, #20]
 8009b80:	6139      	str	r1, [r7, #16]
 8009b82:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	3390      	adds	r3, #144	; 0x90
 8009b90:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	331c      	adds	r3, #28
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d024      	beq.n	8009bf4 <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 8009baa:	232e      	movs	r3, #46	; 0x2e
 8009bac:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	441a      	add	r2, r3
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d904      	bls.n	8009bc6 <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	699a      	ldr	r2, [r3, #24]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	f103 0010 	add.w	r0, r3, #16
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	689c      	ldr	r4, [r3, #8]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	8b1d      	ldrh	r5, [r3, #24]
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	9103      	str	r1, [sp, #12]
 8009bde:	6939      	ldr	r1, [r7, #16]
 8009be0:	9102      	str	r1, [sp, #8]
 8009be2:	9201      	str	r2, [sp, #4]
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	462b      	mov	r3, r5
 8009be8:	4622      	mov	r2, r4
 8009bea:	4601      	mov	r1, r0
 8009bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bee:	f7fe fe87 	bl	8008900 <tx_udp>
 8009bf2:	e046      	b.n	8009c82 <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 8009bf4:	2362      	movs	r3, #98	; 0x62
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	441a      	add	r2, r3
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d904      	bls.n	8009c10 <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	f103 0610 	add.w	r6, r3, #16
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	60bb      	str	r3, [r7, #8]
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	8b1c      	ldrh	r4, [r3, #24]
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe f838 	bl	8007c9c <mg_ntohl>
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe f832 	bl	8007c9c <mg_ntohl>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	9203      	str	r2, [sp, #12]
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	9102      	str	r1, [sp, #8]
 8009c48:	9501      	str	r5, [sp, #4]
 8009c4a:	9400      	str	r4, [sp, #0]
 8009c4c:	2318      	movs	r3, #24
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	4631      	mov	r1, r6
 8009c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c54:	f7ff fd72 	bl	800973c <tx_tcp>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00e      	beq.n	8009c7c <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	441a      	add	r2, r3
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	7d9b      	ldrb	r3, [r3, #22]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d107      	bne.n	8009c82 <mg_io_send+0x10a>
 8009c72:	2100      	movs	r1, #0
 8009c74:	6978      	ldr	r0, [r7, #20]
 8009c76:	f7ff fe71 	bl	800995c <settmout>
 8009c7a:	e002      	b.n	8009c82 <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 8009c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c80:	e000      	b.n	8009c84 <mg_io_send+0x10c>
    }
  }
  return (long) len;
 8009c82:	68fb      	ldr	r3, [r7, #12]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3734      	adds	r7, #52	; 0x34
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c8c <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8009c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c90:	b090      	sub	sp, #64	; 0x40
 8009c92:	af06      	add	r7, sp, #24
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3390      	adds	r3, #144	; 0x90
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d002      	beq.n	8009cb4 <read_conn+0x28>
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	3318      	adds	r3, #24
 8009cb2:	e001      	b.n	8009cb8 <read_conn+0x2c>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3338      	adds	r3, #56	; 0x38
 8009cb8:	623b      	str	r3, [r7, #32]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fd ffeb 	bl	8007c9c <mg_ntohl>
 8009cc6:	61f8      	str	r0, [r7, #28]
  s->raw.align = c->recv.align;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd4:	7b5b      	ldrb	r3, [r3, #13]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01a      	beq.n	8009d14 <read_conn+0x88>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fd ffd9 	bl	8007c9c <mg_ntohl>
 8009cea:	4603      	mov	r3, r0
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	605a      	str	r2, [r3, #4]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fd ffcf 	bl	8007c9c <mg_ntohl>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8009d0a:	f043 0320 	orr.w	r3, r3, #32
 8009d0e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 8009d12:	e116      	b.n	8009f42 <read_conn+0x2b6>
  } else if (pkt->pay.len == 0) {
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 8112 	beq.w	8009f42 <read_conn+0x2b6>
  } else if (seq != s->ack) {
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	69fa      	ldr	r2, [r7, #28]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d05b      	beq.n	8009de0 <read_conn+0x154>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fd ffb4 	bl	8007c9c <mg_ntohl>
 8009d34:	4602      	mov	r2, r0
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	61bb      	str	r3, [r7, #24]
    if (s->ack == ack) {
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d10e      	bne.n	8009d66 <read_conn+0xda>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8009d48:	4b80      	ldr	r3, [pc, #512]	; (8009f4c <read_conn+0x2c0>)
 8009d4a:	f242 0271 	movw	r2, #8305	; 0x2071
 8009d4e:	4980      	ldr	r1, [pc, #512]	; (8009f50 <read_conn+0x2c4>)
 8009d50:	2004      	movs	r0, #4
 8009d52:	f7fc fa9d 	bl	8006290 <mg_log_prefix>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80f2 	beq.w	8009f42 <read_conn+0x2b6>
 8009d5e:	487d      	ldr	r0, [pc, #500]	; (8009f54 <read_conn+0x2c8>)
 8009d60:	f7fc faf0 	bl	8006344 <mg_log>
}
 8009d64:	e0ed      	b.n	8009f42 <read_conn+0x2b6>
      memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	331c      	adds	r3, #28
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	617b      	str	r3, [r7, #20]
      MG_DEBUG(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8009d6e:	4b77      	ldr	r3, [pc, #476]	; (8009f4c <read_conn+0x2c0>)
 8009d70:	f242 0275 	movw	r2, #8309	; 0x2075
 8009d74:	4976      	ldr	r1, [pc, #472]	; (8009f50 <read_conn+0x2c4>)
 8009d76:	2003      	movs	r0, #3
 8009d78:	f7fc fa8a 	bl	8006290 <mg_log_prefix>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d006      	beq.n	8009d90 <read_conn+0x104>
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	69f9      	ldr	r1, [r7, #28]
 8009d8a:	4873      	ldr	r0, [pc, #460]	; (8009f58 <read_conn+0x2cc>)
 8009d8c:	f7fc fada 	bl	8006344 <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	f103 0810 	add.w	r8, r3, #16
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	607b      	str	r3, [r7, #4]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8b1c      	ldrh	r4, [r3, #24]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fd ff75 	bl	8007c9c <mg_ntohl>
 8009db2:	6038      	str	r0, [r7, #0]
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd ff6f 	bl	8007c9c <mg_ntohl>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	9205      	str	r2, [sp, #20]
 8009dc4:	4a65      	ldr	r2, [pc, #404]	; (8009f5c <read_conn+0x2d0>)
 8009dc6:	9204      	str	r2, [sp, #16]
 8009dc8:	9303      	str	r3, [sp, #12]
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	9102      	str	r1, [sp, #8]
 8009dce:	9501      	str	r5, [sp, #4]
 8009dd0:	9400      	str	r4, [sp, #0]
 8009dd2:	2310      	movs	r3, #16
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	4641      	mov	r1, r8
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff fcaf 	bl	800973c <tx_tcp>
}
 8009dde:	e0b0      	b.n	8009f42 <read_conn+0x2b6>
  } else if (io->size - io->len < pkt->pay.len &&
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	1ad2      	subs	r2, r2, r3
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d210      	bcs.n	8009e14 <read_conn+0x188>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6a38      	ldr	r0, [r7, #32]
 8009e00:	f7fb fbc4 	bl	800558c <mg_iobuf_resize>
 8009e04:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d104      	bne.n	8009e14 <read_conn+0x188>
    mg_error(c, "oom");
 8009e0a:	4955      	ldr	r1, [pc, #340]	; (8009f60 <read_conn+0x2d4>)
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7f7 fcfb 	bl	8001808 <mg_error>
 8009e12:	e096      	b.n	8009f42 <read_conn+0x2b6>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	18d0      	adds	r0, r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6899      	ldr	r1, [r3, #8]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f007 fd99 	bl	801195e <memcpy>
    io->len += pkt->pay.len;
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	441a      	add	r2, r3
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8009e3a:	4b44      	ldr	r3, [pc, #272]	; (8009f4c <read_conn+0x2c0>)
 8009e3c:	f242 0286 	movw	r2, #8326	; 0x2086
 8009e40:	4943      	ldr	r1, [pc, #268]	; (8009f50 <read_conn+0x2c4>)
 8009e42:	2003      	movs	r0, #3
 8009e44:	f7fc fa24 	bl	8006290 <mg_log_prefix>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00e      	beq.n	8009e6c <read_conn+0x1e0>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fd ff1f 	bl	8007c9c <mg_ntohl>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	4621      	mov	r1, r4
 8009e66:	483f      	ldr	r0, [pc, #252]	; (8009f64 <read_conn+0x2d8>)
 8009e68:	f7fc fa6c 	bl	8006344 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fd ff12 	bl	8007c9c <mg_ntohl>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	441a      	add	r2, r3
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	7d9b      	ldrb	r3, [r3, #22]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d003      	beq.n	8009e94 <read_conn+0x208>
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff fd64 	bl	800995c <settmout>
    if (c->is_tls) {
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d046      	beq.n	8009f32 <read_conn+0x2a6>
      io = &c->recv;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3338      	adds	r3, #56	; 0x38
 8009ea8:	623b      	str	r3, [r7, #32]
      if (io->size - io->len < pkt->pay.len &&
 8009eaa:	6a3b      	ldr	r3, [r7, #32]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	1ad2      	subs	r2, r2, r3
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d210      	bcs.n	8009ede <read_conn+0x252>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6a38      	ldr	r0, [r7, #32]
 8009eca:	f7fb fb5f 	bl	800558c <mg_iobuf_resize>
 8009ece:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <read_conn+0x252>
        mg_error(c, "oom");
 8009ed4:	4922      	ldr	r1, [pc, #136]	; (8009f60 <read_conn+0x2d4>)
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7f7 fc96 	bl	8001808 <mg_error>
 8009edc:	e031      	b.n	8009f42 <read_conn+0x2b6>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	18d1      	adds	r1, r2, r3
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7fd fd7b 	bl	80079f0 <mg_tls_recv>
 8009efa:	4603      	mov	r3, r0
 8009efc:	613b      	str	r3, [r7, #16]
        if (n == MG_IO_ERR) {
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d104      	bne.n	8009f10 <read_conn+0x284>
          mg_error(c, "TLS recv error");
 8009f06:	4918      	ldr	r1, [pc, #96]	; (8009f68 <read_conn+0x2dc>)
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f7f7 fc7d 	bl	8001808 <mg_error>
}
 8009f0e:	e018      	b.n	8009f42 <read_conn+0x2b6>
        } else if (n > 0) {
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dd15      	ble.n	8009f42 <read_conn+0x2b6>
          io->len += (size_t) n;
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	441a      	add	r2, r3
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 8009f22:	f107 0310 	add.w	r3, r7, #16
 8009f26:	461a      	mov	r2, r3
 8009f28:	2107      	movs	r1, #7
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7f7 fc49 	bl	80017c2 <mg_call>
}
 8009f30:	e007      	b.n	8009f42 <read_conn+0x2b6>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	330c      	adds	r3, #12
 8009f36:	461a      	mov	r2, r3
 8009f38:	2107      	movs	r1, #7
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f7f7 fc41 	bl	80017c2 <mg_call>
}
 8009f40:	e7ff      	b.n	8009f42 <read_conn+0x2b6>
 8009f42:	bf00      	nop
 8009f44:	3728      	adds	r7, #40	; 0x28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4c:	08014090 	.word	0x08014090
 8009f50:	0801261c 	.word	0x0801261c
 8009f54:	08013cd0 	.word	0x08013cd0
 8009f58:	08013ce8 	.word	0x08013ce8
 8009f5c:	08012cac 	.word	0x08012cac
 8009f60:	08013c84 	.word	0x08013c84
 8009f64:	08013d00 	.word	0x08013d00
 8009f68:	08013d14 	.word	0x08013d14

08009f6c <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8009f6c:	b590      	push	{r4, r7, lr}
 8009f6e:	b089      	sub	sp, #36	; 0x24
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fe66 	bl	8008c50 <getpeer>
 8009f84:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <rx_tcp+0x26>
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	3390      	adds	r3, #144	; 0x90
 8009f90:	e000      	b.n	8009f94 <rx_tcp+0x28>
 8009f92:	2300      	movs	r3, #0
 8009f94:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d03e      	beq.n	800a01a <rx_tcp+0xae>
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009fa2:	f003 0320 	and.w	r3, r3, #32
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d036      	beq.n	800a01a <rx_tcp+0xae>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb0:	7b5b      	ldrb	r3, [r3, #13]
 8009fb2:	f003 0312 	and.w	r3, r3, #18
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d02f      	beq.n	800a01a <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fd fe6b 	bl	8007c9c <mg_ntohl>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fd fe62 	bl	8007c9c <mg_ntohl>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	9201      	str	r2, [sp, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	9200      	str	r2, [sp, #0]
 8009fee:	2210      	movs	r2, #16
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7ff fc6c 	bl	80098d0 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8009ffe:	f36f 1345 	bfc	r3, #5, #1
 800a002:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800a006:	2100      	movs	r1, #0
 800a008:	6978      	ldr	r0, [r7, #20]
 800a00a:	f7ff fca7 	bl	800995c <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800a00e:	2200      	movs	r2, #0
 800a010:	2104      	movs	r1, #4
 800a012:	6978      	ldr	r0, [r7, #20]
 800a014:	f7f7 fbd5 	bl	80017c2 <mg_call>
 800a018:	e0c3      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d014      	beq.n	800a04a <rx_tcp+0xde>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a026:	f003 0320 	and.w	r3, r3, #32
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00c      	beq.n	800a04a <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2200      	movs	r2, #0
 800a038:	9201      	str	r2, [sp, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	9200      	str	r2, [sp, #0]
 800a03e:	2214      	movs	r2, #20
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff fc44 	bl	80098d0 <tx_tcp_pkt>
 800a048:	e0ab      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <rx_tcp+0xfc>
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	7b5b      	ldrb	r3, [r3, #13]
 800a056:	f003 0304 	and.w	r3, r3, #4
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d004      	beq.n	800a068 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a05e:	4953      	ldr	r1, [pc, #332]	; (800a1ac <rx_tcp+0x240>)
 800a060:	6978      	ldr	r0, [r7, #20]
 800a062:	f7f7 fbd1 	bl	8001808 <mg_error>
 800a066:	e09c      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (c != NULL) {
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00f      	beq.n	800a08e <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2200      	movs	r2, #0
 800a072:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	7d9b      	ldrb	r3, [r3, #22]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <rx_tcp+0x118>
      settmout(c,
 800a07c:	2100      	movs	r1, #0
 800a07e:	6978      	ldr	r0, [r7, #20]
 800a080:	f7ff fc6c 	bl	800995c <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6978      	ldr	r0, [r7, #20]
 800a088:	f7ff fe00 	bl	8009c8c <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800a08c:	e089      	b.n	800a1a2 <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a092:	2201      	movs	r2, #1
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fdda 	bl	8008c50 <getpeer>
 800a09c:	6178      	str	r0, [r7, #20]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10c      	bne.n	800a0be <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	9201      	str	r2, [sp, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	9200      	str	r2, [sp, #0]
 800a0b2:	2214      	movs	r2, #20
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff fc0a 	bl	80098d0 <tx_tcp_pkt>
}
 800a0bc:	e071      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	7b5b      	ldrb	r3, [r3, #13]
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00c      	beq.n	800a0e6 <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a0d2:	f003 0304 	and.w	r3, r3, #4
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d062      	beq.n	800a1a2 <rx_tcp+0x236>
 800a0dc:	4933      	ldr	r1, [pc, #204]	; (800a1ac <rx_tcp+0x240>)
 800a0de:	6978      	ldr	r0, [r7, #20]
 800a0e0:	f7f7 fb92 	bl	8001808 <mg_error>
}
 800a0e4:	e05d      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	7b5b      	ldrb	r3, [r3, #13]
 800a0ec:	f003 0302 	and.w	r3, r3, #2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d016      	beq.n	800a122 <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fd fde6 	bl	8007cce <mg_ntohs>
 800a102:	4603      	mov	r3, r0
 800a104:	4618      	mov	r0, r3
 800a106:	f7fd fdc9 	bl	8007c9c <mg_ntohl>
 800a10a:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800a10c:	2300      	movs	r3, #0
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	2300      	movs	r3, #0
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2212      	movs	r2, #18
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fbd8 	bl	80098d0 <tx_tcp_pkt>
}
 800a120:	e03f      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	7b5b      	ldrb	r3, [r3, #13]
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00c      	beq.n	800a14a <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2200      	movs	r2, #0
 800a138:	9201      	str	r2, [sp, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	9200      	str	r2, [sp, #0]
 800a13e:	2211      	movs	r2, #17
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff fbc4 	bl	80098d0 <tx_tcp_pkt>
}
 800a148:	e02b      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	4618      	mov	r0, r3
 800a152:	f7fd fda3 	bl	8007c9c <mg_ntohl>
 800a156:	4604      	mov	r4, r0
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4618      	mov	r0, r3
 800a162:	f7fd fdb4 	bl	8007cce <mg_ntohs>
 800a166:	4603      	mov	r3, r0
 800a168:	3301      	adds	r3, #1
 800a16a:	429c      	cmp	r4, r3
 800a16c:	d104      	bne.n	800a178 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6978      	ldr	r0, [r7, #20]
 800a172:	f7ff fc3b 	bl	80099ec <accept_conn>
}
 800a176:	e014      	b.n	800a1a2 <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a17e:	f003 0304 	and.w	r3, r3, #4
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10c      	bne.n	800a1a2 <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	2200      	movs	r2, #0
 800a190:	9201      	str	r2, [sp, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	9200      	str	r2, [sp, #0]
 800a196:	2214      	movs	r2, #20
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff fb98 	bl	80098d0 <tx_tcp_pkt>
}
 800a1a0:	e7ff      	b.n	800a1a2 <rx_tcp+0x236>
 800a1a2:	bf00      	nop
 800a1a4:	371c      	adds	r7, #28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd90      	pop	{r4, r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	08013d24 	.word	0x08013d24

0800a1b0 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b2:	b089      	sub	sp, #36	; 0x24
 800a1b4:	af04      	add	r7, sp, #16
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	7a5b      	ldrb	r3, [r3, #9]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d116      	bne.n	800a1f2 <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	f103 0214 	add.w	r2, r3, #20
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	f240 8105 	bls.w	800a3e4 <rx_ip+0x234>
    mkpay(pkt, pkt->icmp + 1);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	3304      	adds	r3, #4
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6838      	ldr	r0, [r7, #0]
 800a1e4:	f7fe f9be 	bl	8008564 <mkpay>
    rx_icmp(ifp, pkt);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7fe fe88 	bl	8008f00 <rx_icmp>
 800a1f0:	e0fd      	b.n	800a3ee <rx_ip+0x23e>
  } else if (pkt->ip->proto == 17) {
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	7a5b      	ldrb	r3, [r3, #9]
 800a1f8:	2b11      	cmp	r3, #17
 800a1fa:	f040 808a 	bne.w	800a312 <rx_ip+0x162>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	f103 0214 	add.w	r2, r3, #20
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	2b07      	cmp	r3, #7
 800a210:	f240 80ea 	bls.w	800a3e8 <rx_ip+0x238>
    mkpay(pkt, pkt->udp + 1);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	3308      	adds	r3, #8
 800a21a:	4619      	mov	r1, r3
 800a21c:	6838      	ldr	r0, [r7, #0]
 800a21e:	f7fe f9a1 	bl	8008564 <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a222:	4b74      	ldr	r3, [pc, #464]	; (800a3f4 <rx_ip+0x244>)
 800a224:	f242 02e8 	movw	r2, #8424	; 0x20e8
 800a228:	4973      	ldr	r1, [pc, #460]	; (800a3f8 <rx_ip+0x248>)
 800a22a:	2003      	movs	r0, #3
 800a22c:	f7fc f830 	bl	8006290 <mg_log_prefix>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d026      	beq.n	800a284 <rx_ip+0xd4>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	f103 050c 	add.w	r5, r3, #12
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	b29b      	uxth	r3, r3
 800a246:	4618      	mov	r0, r3
 800a248:	f7fd fd41 	bl	8007cce <mg_ntohs>
 800a24c:	4603      	mov	r3, r0
 800a24e:	461e      	mov	r6, r3
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	f103 0410 	add.w	r4, r3, #16
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25c:	885b      	ldrh	r3, [r3, #2]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4618      	mov	r0, r3
 800a262:	f7fd fd34 	bl	8007cce <mg_ntohs>
 800a266:	4603      	mov	r3, r0
 800a268:	461a      	mov	r2, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	9303      	str	r3, [sp, #12]
 800a270:	9202      	str	r2, [sp, #8]
 800a272:	9401      	str	r4, [sp, #4]
 800a274:	4b61      	ldr	r3, [pc, #388]	; (800a3fc <rx_ip+0x24c>)
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4633      	mov	r3, r6
 800a27a:	462a      	mov	r2, r5
 800a27c:	495f      	ldr	r1, [pc, #380]	; (800a3fc <rx_ip+0x24c>)
 800a27e:	4860      	ldr	r0, [pc, #384]	; (800a400 <rx_ip+0x250>)
 800a280:	f7fc f860 	bl	8006344 <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7f1b      	ldrb	r3, [r3, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01c      	beq.n	800a2c6 <rx_ip+0x116>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	885b      	ldrh	r3, [r3, #2]
 800a292:	b29c      	uxth	r4, r3
 800a294:	2044      	movs	r0, #68	; 0x44
 800a296:	f7fd fd1a 	bl	8007cce <mg_ntohs>
 800a29a:	4603      	mov	r3, r0
 800a29c:	429c      	cmp	r4, r3
 800a29e:	d112      	bne.n	800a2c6 <rx_ip+0x116>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	f103 0208 	add.w	r2, r3, #8
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6838      	ldr	r0, [r7, #0]
 800a2b8:	f7fe f954 	bl	8008564 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7fe fe7a 	bl	8008fb8 <rx_dhcp_client>
 800a2c4:	e093      	b.n	800a3ee <rx_ip+0x23e>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	7f5b      	ldrb	r3, [r3, #29]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01c      	beq.n	800a308 <rx_ip+0x158>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	885b      	ldrh	r3, [r3, #2]
 800a2d4:	b29c      	uxth	r4, r3
 800a2d6:	2043      	movs	r0, #67	; 0x43
 800a2d8:	f7fd fcf9 	bl	8007cce <mg_ntohs>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	429c      	cmp	r4, r3
 800a2e0:	d112      	bne.n	800a308 <rx_ip+0x158>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	f103 0208 	add.w	r2, r3, #8
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6838      	ldr	r0, [r7, #0]
 800a2fa:	f7fe f933 	bl	8008564 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7fe ffdf 	bl	80092c4 <rx_dhcp_server>
 800a306:	e072      	b.n	800a3ee <rx_ip+0x23e>
    } else {
      rx_udp(ifp, pkt);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff f9a4 	bl	8009658 <rx_udp>
 800a310:	e06d      	b.n	800a3ee <rx_ip+0x23e>
    }
  } else if (pkt->ip->proto == 6) {
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	7a5b      	ldrb	r3, [r3, #9]
 800a318:	2b06      	cmp	r3, #6
 800a31a:	d168      	bne.n	800a3ee <rx_ip+0x23e>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	f103 0214 	add.w	r2, r3, #20
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	2b13      	cmp	r3, #19
 800a32e:	d95d      	bls.n	800a3ec <rx_ip+0x23c>
    mkpay(pkt, pkt->tcp + 1);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	3314      	adds	r3, #20
 800a336:	4619      	mov	r1, r3
 800a338:	6838      	ldr	r0, [r7, #0]
 800a33a:	f7fe f913 	bl	8008564 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	885b      	ldrh	r3, [r3, #2]
 800a344:	b29b      	uxth	r3, r3
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd fcc1 	bl	8007cce <mg_ntohs>
 800a34c:	4603      	mov	r3, r0
 800a34e:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	7b1b      	ldrb	r3, [r3, #12]
 800a356:	091b      	lsrs	r3, r3, #4
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	3305      	adds	r3, #5
 800a35e:	b29b      	uxth	r3, r3
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800a364:	89fa      	ldrh	r2, [r7, #14]
 800a366:	89bb      	ldrh	r3, [r7, #12]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d305      	bcc.n	800a378 <rx_ip+0x1c8>
 800a36c:	89fa      	ldrh	r2, [r7, #14]
 800a36e:	89bb      	ldrh	r3, [r7, #12]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	461a      	mov	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800a378:	4b1e      	ldr	r3, [pc, #120]	; (800a3f4 <rx_ip+0x244>)
 800a37a:	f242 02fd 	movw	r2, #8445	; 0x20fd
 800a37e:	491e      	ldr	r1, [pc, #120]	; (800a3f8 <rx_ip+0x248>)
 800a380:	2003      	movs	r0, #3
 800a382:	f7fb ff85 	bl	8006290 <mg_log_prefix>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d026      	beq.n	800a3da <rx_ip+0x22a>
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	f103 050c 	add.w	r5, r3, #12
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fd fc96 	bl	8007cce <mg_ntohs>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461e      	mov	r6, r3
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f103 0410 	add.w	r4, r3, #16
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	885b      	ldrh	r3, [r3, #2]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fd fc89 	bl	8007cce <mg_ntohs>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	461a      	mov	r2, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	9202      	str	r2, [sp, #8]
 800a3c8:	9401      	str	r4, [sp, #4]
 800a3ca:	4b0c      	ldr	r3, [pc, #48]	; (800a3fc <rx_ip+0x24c>)
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	4633      	mov	r3, r6
 800a3d0:	462a      	mov	r2, r5
 800a3d2:	490a      	ldr	r1, [pc, #40]	; (800a3fc <rx_ip+0x24c>)
 800a3d4:	480b      	ldr	r0, [pc, #44]	; (800a404 <rx_ip+0x254>)
 800a3d6:	f7fb ffb5 	bl	8006344 <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fdc5 	bl	8009f6c <rx_tcp>
 800a3e2:	e004      	b.n	800a3ee <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a3e4:	bf00      	nop
 800a3e6:	e002      	b.n	800a3ee <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a3e8:	bf00      	nop
 800a3ea:	e000      	b.n	800a3ee <rx_ip+0x23e>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800a3ec:	bf00      	nop
  }
}
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f4:	0801409c 	.word	0x0801409c
 800a3f8:	0801261c 	.word	0x0801261c
 800a3fc:	08006ae1 	.word	0x08006ae1
 800a400:	08013d30 	.word	0x08013d30
 800a404:	08013d4c 	.word	0x08013d4c

0800a408 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	799b      	ldrb	r3, [r3, #6]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d004      	beq.n	800a426 <rx_ip6+0x1e>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	799b      	ldrb	r3, [r3, #6]
 800a422:	2b3a      	cmp	r3, #58	; 0x3a
 800a424:	d115      	bne.n	800a452 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	2b03      	cmp	r3, #3
 800a438:	d922      	bls.n	800a480 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	3304      	adds	r3, #4
 800a440:	4619      	mov	r1, r3
 800a442:	6838      	ldr	r0, [r7, #0]
 800a444:	f7fe f88e 	bl	8008564 <mkpay>
    rx_icmp(ifp, pkt);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7fe fd58 	bl	8008f00 <rx_icmp>
 800a450:	e019      	b.n	800a486 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	799b      	ldrb	r3, [r3, #6]
 800a458:	2b11      	cmp	r3, #17
 800a45a:	d114      	bne.n	800a486 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	6a1b      	ldr	r3, [r3, #32]
 800a460:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b07      	cmp	r3, #7
 800a46e:	d909      	bls.n	800a484 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a474:	3308      	adds	r3, #8
 800a476:	4619      	mov	r1, r3
 800a478:	6838      	ldr	r0, [r7, #0]
 800a47a:	f7fe f873 	bl	8008564 <mkpay>
 800a47e:	e002      	b.n	800a486 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800a480:	bf00      	nop
 800a482:	e000      	b.n	800a486 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800a484:	bf00      	nop
  }
}
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800a48c:	b590      	push	{r4, r7, lr}
 800a48e:	b093      	sub	sp, #76	; 0x4c
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800a498:	f107 0314 	add.w	r3, r7, #20
 800a49c:	2234      	movs	r2, #52	; 0x34
 800a49e:	2100      	movs	r1, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f007 f992 	bl	80117ca <memset>
  pkt.raw.ptr = (char *) buf;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	2b0d      	cmp	r3, #13
 800a4b6:	f240 80d1 	bls.w	800a65c <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	7fdb      	ldrb	r3, [r3, #31]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d013      	beq.n	800a4ea <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2206      	movs	r2, #6
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f007 f953 	bl	8011776 <memcmp>
 800a4d0:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d009      	beq.n	800a4ea <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	2206      	movs	r2, #6
 800a4da:	496a      	ldr	r1, [pc, #424]	; (800a684 <mg_tcpip_rx+0x1f8>)
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f007 f94a 	bl	8011776 <memcmp>
 800a4e2:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f040 80bb 	bne.w	800a660 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	7f9b      	ldrb	r3, [r3, #30]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01a      	beq.n	800a528 <mg_tcpip_rx+0x9c>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d917      	bls.n	800a528 <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	3b04      	subs	r3, #4
 800a4fc:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	2000      	movs	r0, #0
 800a504:	f7fd fbfa 	bl	8007cfc <mg_crc32>
 800a508:	4603      	mov	r3, r0
 800a50a:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4413      	add	r3, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f107 0310 	add.w	r3, r7, #16
 800a518:	2204      	movs	r2, #4
 800a51a:	4619      	mov	r1, r3
 800a51c:	f007 f92b 	bl	8011776 <memcmp>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	f040 809e 	bne.w	800a664 <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	899b      	ldrh	r3, [r3, #12]
 800a52c:	b29c      	uxth	r4, r3
 800a52e:	f640 0006 	movw	r0, #2054	; 0x806
 800a532:	f7fd fbcc 	bl	8007cce <mg_ntohs>
 800a536:	4603      	mov	r3, r0
 800a538:	429c      	cmp	r4, r3
 800a53a:	d10d      	bne.n	800a558 <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	330e      	adds	r3, #14
 800a540:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	2b29      	cmp	r3, #41	; 0x29
 800a546:	f240 808f 	bls.w	800a668 <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800a54a:	f107 0314 	add.w	r3, r7, #20
 800a54e:	4619      	mov	r1, r3
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7fe fbd5 	bl	8008d00 <rx_arp>
 800a556:	e092      	b.n	800a67e <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	899b      	ldrh	r3, [r3, #12]
 800a55c:	b29c      	uxth	r4, r3
 800a55e:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800a562:	f7fd fbb4 	bl	8007cce <mg_ntohs>
 800a566:	4603      	mov	r3, r0
 800a568:	429c      	cmp	r4, r3
 800a56a:	d11b      	bne.n	800a5a4 <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	330e      	adds	r3, #14
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b35      	cmp	r3, #53	; 0x35
 800a576:	d979      	bls.n	800a66c <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	091b      	lsrs	r3, r3, #4
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b06      	cmp	r3, #6
 800a582:	d175      	bne.n	800a670 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a58a:	f107 0314 	add.w	r3, r7, #20
 800a58e:	4611      	mov	r1, r2
 800a590:	4618      	mov	r0, r3
 800a592:	f7fd ffe7 	bl	8008564 <mkpay>
    rx_ip6(ifp, &pkt);
 800a596:	f107 0314 	add.w	r3, r7, #20
 800a59a:	4619      	mov	r1, r3
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f7ff ff33 	bl	800a408 <rx_ip6>
 800a5a2:	e06c      	b.n	800a67e <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	899b      	ldrh	r3, [r3, #12]
 800a5a8:	b29c      	uxth	r4, r3
 800a5aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a5ae:	f7fd fb8e 	bl	8007cce <mg_ntohs>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	d133      	bne.n	800a620 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	330e      	adds	r3, #14
 800a5bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	2b21      	cmp	r3, #33	; 0x21
 800a5c2:	d957      	bls.n	800a674 <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	885b      	ldrh	r3, [r3, #2]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fd fb7f 	bl	8007cce <mg_ntohs>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f103 020e 	add.w	r2, r3, #14
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d208      	bcs.n	800a5ee <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	885b      	ldrh	r3, [r3, #2]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fd fb73 	bl	8007cce <mg_ntohs>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	330e      	adds	r3, #14
 800a5ec:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	2b21      	cmp	r3, #33	; 0x21
 800a5f2:	d941      	bls.n	800a678 <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	091b      	lsrs	r3, r3, #4
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	d13d      	bne.n	800a67c <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	f103 0214 	add.w	r2, r3, #20
 800a606:	f107 0314 	add.w	r3, r7, #20
 800a60a:	4611      	mov	r1, r2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fd ffa9 	bl	8008564 <mkpay>
    rx_ip(ifp, &pkt);
 800a612:	f107 0314 	add.w	r3, r7, #20
 800a616:	4619      	mov	r1, r3
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff fdc9 	bl	800a1b0 <rx_ip>
 800a61e:	e02e      	b.n	800a67e <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800a620:	4b19      	ldr	r3, [pc, #100]	; (800a688 <mg_tcpip_rx+0x1fc>)
 800a622:	f242 123a 	movw	r2, #8506	; 0x213a
 800a626:	4919      	ldr	r1, [pc, #100]	; (800a68c <mg_tcpip_rx+0x200>)
 800a628:	2003      	movs	r0, #3
 800a62a:	f7fb fe31 	bl	8006290 <mg_log_prefix>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <mg_tcpip_rx+0x1be>
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	899b      	ldrh	r3, [r3, #12]
 800a638:	b29b      	uxth	r3, r3
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fd fb47 	bl	8007cce <mg_ntohs>
 800a640:	4603      	mov	r3, r0
 800a642:	4619      	mov	r1, r3
 800a644:	4812      	ldr	r0, [pc, #72]	; (800a690 <mg_tcpip_rx+0x204>)
 800a646:	f7fb fe7d 	bl	8006344 <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	bf28      	it	cs
 800a650:	2310      	movcs	r3, #16
 800a652:	4619      	mov	r1, r3
 800a654:	68b8      	ldr	r0, [r7, #8]
 800a656:	f7fb feab 	bl	80063b0 <mg_hexdump>
 800a65a:	e010      	b.n	800a67e <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800a65c:	bf00      	nop
 800a65e:	e00e      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    return;
 800a660:	bf00      	nop
 800a662:	e00c      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800a664:	bf00      	nop
 800a666:	e00a      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800a668:	bf00      	nop
 800a66a:	e008      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800a66c:	bf00      	nop
 800a66e:	e006      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800a670:	bf00      	nop
 800a672:	e004      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a674:	bf00      	nop
 800a676:	e002      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800a678:	bf00      	nop
 800a67a:	e000      	b.n	800a67e <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800a67c:	bf00      	nop
  }
}
 800a67e:	374c      	adds	r7, #76	; 0x4c
 800a680:	46bd      	mov	sp, r7
 800a682:	bd90      	pop	{r4, r7, pc}
 800a684:	08013ee4 	.word	0x08013ee4
 800a688:	080140a4 	.word	0x080140a4
 800a68c:	0801261c 	.word	0x0801261c
 800a690:	08013d68 	.word	0x08013d68

0800a694 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800a694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a696:	b095      	sub	sp, #84	; 0x54
 800a698:	af06      	add	r7, sp, #24
 800a69a:	6178      	str	r0, [r7, #20]
 800a69c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 81b9 	beq.w	800aa1a <mg_tcpip_poll+0x386>
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 81b4 	beq.w	800aa1a <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800a6b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6bc:	e9cd 2300 	strd	r2, r3, [sp]
 800a6c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6c4:	f04f 0300 	mov.w	r3, #0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	f7fd f8a0 	bl	800780e <mg_timer_expired>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800a6d4:	6979      	ldr	r1, [r7, #20]
 800a6d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6da:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800a6de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d03f      	beq.n	800a766 <mg_tcpip_poll+0xd2>
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d03a      	beq.n	800a766 <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	6978      	ldr	r0, [r7, #20]
 800a6f8:	4798      	blx	r3
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a706:	2b00      	cmp	r3, #0
 800a708:	bf14      	ite	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	2300      	moveq	r3, #0
 800a70e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800a712:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a716:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d023      	beq.n	800a766 <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a71e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a722:	f083 0301 	eor.w	r3, r3, #1
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <mg_tcpip_poll+0x9c>
 800a72c:	2300      	movs	r3, #0
 800a72e:	e006      	b.n	800a73e <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <mg_tcpip_poll+0xa8>
 800a738:	2301      	movs	r3, #1
 800a73a:	e000      	b.n	800a73e <mg_tcpip_poll+0xaa>
 800a73c:	2303      	movs	r3, #3
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800a744:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a748:	f083 0301 	eor.w	r3, r3, #1
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d006      	beq.n	800a760 <mg_tcpip_poll+0xcc>
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	7f1b      	ldrb	r3, [r3, #28]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <mg_tcpip_poll+0xcc>
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2200      	movs	r2, #0
 800a75e:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	f7fd fff1 	bl	8008748 <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 8156 	beq.w	800aa1e <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d107      	bne.n	800a78c <mg_tcpip_poll+0xf8>
 800a77c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a780:	2b00      	cmp	r3, #0
 800a782:	d003      	beq.n	800a78c <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800a784:	6978      	ldr	r0, [r7, #20]
 800a786:	f7fe fa29 	bl	8008bdc <tx_dhcp_discover>
 800a78a:	e04c      	b.n	800a826 <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a78c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a790:	2b00      	cmp	r3, #0
 800a792:	d048      	beq.n	800a826 <mg_tcpip_poll+0x192>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d143      	bne.n	800a826 <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	d03e      	beq.n	800a826 <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a7b4:	4290      	cmp	r0, r2
 800a7b6:	eb71 0303 	sbcs.w	r3, r1, r3
 800a7ba:	d30a      	bcc.n	800a7d2 <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800a7ca:	6978      	ldr	r0, [r7, #20]
 800a7cc:	f7fd ffbc 	bl	8008748 <onstatechange>
 800a7d0:	e029      	b.n	800a826 <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800a7d8:	4993      	ldr	r1, [pc, #588]	; (800aa28 <mg_tcpip_poll+0x394>)
 800a7da:	1854      	adds	r4, r2, r1
 800a7dc:	f143 0500 	adc.w	r5, r3, #0
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800a7e6:	42a2      	cmp	r2, r4
 800a7e8:	41ab      	sbcs	r3, r5
 800a7ea:	d21c      	bcs.n	800a826 <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800a7f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7f6:	f04f 0300 	mov.w	r3, #0
 800a7fa:	f7f6 f9ef 	bl	8000bdc <__aeabi_uldivmod>
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	4610      	mov	r0, r2
 800a804:	4619      	mov	r1, r3
 800a806:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800a80a:	f04f 0300 	mov.w	r3, #0
 800a80e:	f7f6 f9e5 	bl	8000bdc <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800a812:	4313      	orrs	r3, r2
 800a814:	d107      	bne.n	800a826 <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	689a      	ldr	r2, [r3, #8]
 800a81a:	f04f 33ff 	mov.w	r3, #4294967295
 800a81e:	4983      	ldr	r1, [pc, #524]	; (800aa2c <mg_tcpip_poll+0x398>)
 800a820:	6978      	ldr	r0, [r7, #20]
 800a822:	f7fe f9ab 	bl	8008b7c <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d014      	beq.n	800a85a <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4798      	blx	r3
 800a842:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	2b00      	cmp	r3, #0
 800a848:	d01f      	beq.n	800a88a <mg_tcpip_poll+0x1f6>
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a850:	4619      	mov	r1, r3
 800a852:	6978      	ldr	r0, [r7, #20]
 800a854:	f7ff fe1a 	bl	800a48c <mg_tcpip_rx>
 800a858:	e017      	b.n	800a88a <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	332c      	adds	r3, #44	; 0x2c
 800a85e:	f107 0220 	add.w	r2, r7, #32
 800a862:	4611      	mov	r1, r2
 800a864:	4618      	mov	r0, r3
 800a866:	f7fc fb25 	bl	8006eb4 <mg_queue_next>
 800a86a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00b      	beq.n	800a88a <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a876:	4619      	mov	r1, r3
 800a878:	6978      	ldr	r0, [r7, #20]
 800a87a:	f7ff fe07 	bl	800a48c <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	332c      	adds	r3, #44	; 0x2c
 800a882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a884:	4618      	mov	r0, r3
 800a886:	f7fc fb93 	bl	8006fb0 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
 800a892:	e0bd      	b.n	800aa10 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800a894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a896:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f040 80af 	bne.w	800aa04 <mg_tcpip_poll+0x370>
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 80a6 	bne.w	800aa04 <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a8be:	f003 0320 	and.w	r3, r3, #32
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f040 809f 	bne.w	800aa08 <mg_tcpip_poll+0x374>
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8cc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a8d0:	f003 0308 	and.w	r3, r3, #8
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f040 8096 	bne.w	800aa08 <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8de:	3390      	adds	r3, #144	; 0x90
 800a8e0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800a8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e4:	331c      	adds	r3, #28
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a8f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8f4:	4290      	cmp	r0, r2
 800a8f6:	eb71 0303 	sbcs.w	r3, r1, r3
 800a8fa:	f080 8086 	bcs.w	800aa0a <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	7d9b      	ldrb	r3, [r3, #22]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d137      	bne.n	800a976 <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800a906:	4b4a      	ldr	r3, [pc, #296]	; (800aa30 <mg_tcpip_poll+0x39c>)
 800a908:	f242 1278 	movw	r2, #8568	; 0x2178
 800a90c:	4949      	ldr	r1, [pc, #292]	; (800aa34 <mg_tcpip_poll+0x3a0>)
 800a90e:	2003      	movs	r0, #3
 800a910:	f7fb fcbe 	bl	8006290 <mg_log_prefix>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d008      	beq.n	800a92c <mg_tcpip_poll+0x298>
 800a91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4844      	ldr	r0, [pc, #272]	; (800aa38 <mg_tcpip_poll+0x3a4>)
 800a928:	f7fb fd0c 	bl	8006344 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	f103 0610 	add.w	r6, r3, #16
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a938:	8b1c      	ldrh	r4, [r3, #24]
 800a93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93c:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4618      	mov	r0, r3
 800a944:	f7fd f9aa 	bl	8007c9c <mg_ntohl>
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fd f9a4 	bl	8007c9c <mg_ntohl>
 800a954:	4603      	mov	r3, r0
 800a956:	2200      	movs	r2, #0
 800a958:	9205      	str	r2, [sp, #20]
 800a95a:	4a38      	ldr	r2, [pc, #224]	; (800aa3c <mg_tcpip_poll+0x3a8>)
 800a95c:	9204      	str	r2, [sp, #16]
 800a95e:	9303      	str	r3, [sp, #12]
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	9102      	str	r1, [sp, #8]
 800a964:	9501      	str	r5, [sp, #4]
 800a966:	9400      	str	r4, [sp, #0]
 800a968:	2310      	movs	r3, #16
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4631      	mov	r1, r6
 800a96e:	6978      	ldr	r0, [r7, #20]
 800a970:	f7fe fee4 	bl	800973c <tx_tcp>
 800a974:	e041      	b.n	800a9fa <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	7ddb      	ldrb	r3, [r3, #23]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	b2d1      	uxtb	r1, r2
 800a97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a980:	75d1      	strb	r1, [r2, #23]
 800a982:	2b02      	cmp	r3, #2
 800a984:	d904      	bls.n	800a990 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800a986:	492e      	ldr	r1, [pc, #184]	; (800aa40 <mg_tcpip_poll+0x3ac>)
 800a988:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a98a:	f7f6 ff3d 	bl	8001808 <mg_error>
 800a98e:	e034      	b.n	800a9fa <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800a990:	4b27      	ldr	r3, [pc, #156]	; (800aa30 <mg_tcpip_poll+0x39c>)
 800a992:	f242 127f 	movw	r2, #8575	; 0x217f
 800a996:	4927      	ldr	r1, [pc, #156]	; (800aa34 <mg_tcpip_poll+0x3a0>)
 800a998:	2003      	movs	r0, #3
 800a99a:	f7fb fc79 	bl	8006290 <mg_log_prefix>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <mg_tcpip_poll+0x31c>
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4826      	ldr	r0, [pc, #152]	; (800aa44 <mg_tcpip_poll+0x3b0>)
 800a9ac:	f7fb fcca 	bl	8006344 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	f103 0610 	add.w	r6, r3, #16
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9bc:	8b1c      	ldrh	r4, [r3, #24]
 800a9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fd f967 	bl	8007c9c <mg_ntohl>
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fd f961 	bl	8007c9c <mg_ntohl>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2200      	movs	r2, #0
 800a9de:	9205      	str	r2, [sp, #20]
 800a9e0:	4a16      	ldr	r2, [pc, #88]	; (800aa3c <mg_tcpip_poll+0x3a8>)
 800a9e2:	9204      	str	r2, [sp, #16]
 800a9e4:	9303      	str	r3, [sp, #12]
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	9102      	str	r1, [sp, #8]
 800a9ea:	9501      	str	r5, [sp, #4]
 800a9ec:	9400      	str	r4, [sp, #0]
 800a9ee:	2310      	movs	r3, #16
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	6978      	ldr	r0, [r7, #20]
 800a9f6:	f7fe fea1 	bl	800973c <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a9fe:	f7fe ffad 	bl	800995c <settmout>
 800aa02:	e002      	b.n	800aa0a <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800aa04:	bf00      	nop
 800aa06:	e000      	b.n	800aa0a <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800aa08:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f47f af3e 	bne.w	800a894 <mg_tcpip_poll+0x200>
 800aa18:	e002      	b.n	800aa20 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800aa1a:	bf00      	nop
 800aa1c:	e000      	b.n	800aa20 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800aa1e:	bf00      	nop
    }
  }
}
 800aa20:	373c      	adds	r7, #60	; 0x3c
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa26:	bf00      	nop
 800aa28:	001b7740 	.word	0x001b7740
 800aa2c:	08013ee4 	.word	0x08013ee4
 800aa30:	080140b0 	.word	0x080140b0
 800aa34:	0801261c 	.word	0x0801261c
 800aa38:	08013d80 	.word	0x08013d80
 800aa3c:	08012cac 	.word	0x08012cac
 800aa40:	08013d90 	.word	0x08013d90
 800aa44:	08013d9c 	.word	0x08013d9c

0800aa48 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	332c      	adds	r3, #44	; 0x2c
 800aa58:	f107 0114 	add.w	r1, r7, #20
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fc f9d0 	bl	8006e04 <mg_queue_book>
 800aa64:	4602      	mov	r2, r0
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d811      	bhi.n	800aa90 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	68f9      	ldr	r1, [r7, #12]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f006 ff73 	bl	801195e <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	332c      	adds	r3, #44	; 0x2c
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fc fa5e 	bl	8006f40 <mg_queue_add>
    ifp->nrecv++;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800aa8e:	e004      	b.n	800aa9a <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aa9a:	bf00      	nop
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d12c      	bne.n	800ab10 <mg_tcpip_init+0x6c>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d128      	bne.n	800ab10 <mg_tcpip_init+0x6c>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	789b      	ldrb	r3, [r3, #2]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d124      	bne.n	800ab10 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d120      	bne.n	800ab10 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	791b      	ldrb	r3, [r3, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d11c      	bne.n	800ab10 <mg_tcpip_init+0x6c>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	795b      	ldrb	r3, [r3, #5]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d118      	bne.n	800ab10 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2202      	movs	r2, #2
 800aae2:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	3301      	adds	r3, #1
 800aae8:	2105      	movs	r1, #5
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7f6 fbf4 	bl	80012d8 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800aaf0:	4b4d      	ldr	r3, [pc, #308]	; (800ac28 <mg_tcpip_init+0x184>)
 800aaf2:	f242 129d 	movw	r2, #8605	; 0x219d
 800aaf6:	494d      	ldr	r1, [pc, #308]	; (800ac2c <mg_tcpip_init+0x188>)
 800aaf8:	2002      	movs	r0, #2
 800aafa:	f7fb fbc9 	bl	8006290 <mg_log_prefix>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d005      	beq.n	800ab10 <mg_tcpip_init+0x6c>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	4949      	ldr	r1, [pc, #292]	; (800ac30 <mg_tcpip_init+0x18c>)
 800ab0a:	484a      	ldr	r0, [pc, #296]	; (800ac34 <mg_tcpip_init+0x190>)
 800ab0c:	f7fb fc1a 	bl	8006344 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d018      	beq.n	800ab4c <mg_tcpip_init+0xa8>
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6838      	ldr	r0, [r7, #0]
 800ab22:	4798      	blx	r3
 800ab24:	4603      	mov	r3, r0
 800ab26:	f083 0301 	eor.w	r3, r3, #1
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00d      	beq.n	800ab4c <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800ab30:	4b3d      	ldr	r3, [pc, #244]	; (800ac28 <mg_tcpip_init+0x184>)
 800ab32:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800ab36:	493d      	ldr	r1, [pc, #244]	; (800ac2c <mg_tcpip_init+0x188>)
 800ab38:	2001      	movs	r0, #1
 800ab3a:	f7fb fba9 	bl	8006290 <mg_log_prefix>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d06d      	beq.n	800ac20 <mg_tcpip_init+0x17c>
 800ab44:	483c      	ldr	r0, [pc, #240]	; (800ac38 <mg_tcpip_init+0x194>)
 800ab46:	f7fb fbfd 	bl	8006344 <mg_log>
 800ab4a:	e069      	b.n	800ac20 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800ab4c:	f240 6304 	movw	r3, #1540	; 0x604
 800ab50:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800ab52:	68f9      	ldr	r1, [r7, #12]
 800ab54:	2001      	movs	r0, #1
 800ab56:	f006 fb5b 	bl	8011210 <calloc>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	615a      	str	r2, [r3, #20]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <mg_tcpip_init+0xda>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	e001      	b.n	800ab82 <mg_tcpip_init+0xde>
 800ab7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f006 fb3f 	bl	8011210 <calloc>
 800ab92:	4603      	mov	r3, r0
 800ab94:	461a      	mov	r2, r3
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800ab9a:	f7fd f8e9 	bl	8007d70 <mg_millis>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2228      	movs	r2, #40	; 0x28
 800abb8:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <mg_tcpip_init+0x124>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2201      	movs	r2, #1
 800abc6:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	333c      	adds	r3, #60	; 0x3c
 800abcc:	2206      	movs	r2, #6
 800abce:	21ff      	movs	r1, #255	; 0xff
 800abd0:	4618      	mov	r0, r3
 800abd2:	f006 fdfa 	bl	80117ca <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	3360      	adds	r3, #96	; 0x60
 800abda:	2102      	movs	r1, #2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f6 fb7b 	bl	80012d8 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800abe8:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <mg_tcpip_init+0x198>)
 800abea:	4313      	orrs	r3, r2
 800abec:	b29a      	uxth	r2, r3
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <mg_tcpip_init+0x160>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10d      	bne.n	800ac20 <mg_tcpip_init+0x17c>
 800ac04:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <mg_tcpip_init+0x184>)
 800ac06:	f242 12b1 	movw	r2, #8625	; 0x21b1
 800ac0a:	4908      	ldr	r1, [pc, #32]	; (800ac2c <mg_tcpip_init+0x188>)
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	f7fb fb3f 	bl	8006290 <mg_log_prefix>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <mg_tcpip_init+0x17c>
 800ac18:	4809      	ldr	r0, [pc, #36]	; (800ac40 <mg_tcpip_init+0x19c>)
 800ac1a:	f7fb fb93 	bl	8006344 <mg_log>
  }
}
 800ac1e:	e7ff      	b.n	800ac20 <mg_tcpip_init+0x17c>
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	080140c0 	.word	0x080140c0
 800ac2c:	0801261c 	.word	0x0801261c
 800ac30:	08006ba5 	.word	0x08006ba5
 800ac34:	08013dac 	.word	0x08013dac
 800ac38:	08013dd0 	.word	0x08013dd0
 800ac3c:	ffff8000 	.word	0xffff8000
 800ac40:	0801333c 	.word	0x0801333c

0800ac44 <mg_open_listener>:
      c->is_connecting = 1;
    }
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800ac4e:	6838      	ldr	r0, [r7, #0]
 800ac50:	f7fc ffc0 	bl	8007bd4 <mg_url_port>
 800ac54:	4603      	mov	r3, r0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fd f839 	bl	8007cce <mg_ntohs>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	461a      	mov	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	831a      	strh	r2, [r3, #24]
  return true;
 800ac64:	2301      	movs	r3, #1
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <write_conn>:

static void write_conn(struct mg_connection *c) {
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ac7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac80:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d009      	beq.n	800ac9a <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7fc fec6 	bl	8007a22 <mg_tls_send>
 800ac96:	4603      	mov	r3, r0
 800ac98:	e008      	b.n	800acac <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca2:	461a      	mov	r2, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7fe ff67 	bl	8009b78 <mg_io_send>
 800acaa:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800acac:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	dd0d      	ble.n	800acd0 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3348      	adds	r3, #72	; 0x48
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	2100      	movs	r1, #0
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fa fcef 	bl	80056a0 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	461a      	mov	r2, r3
 800acc8:	2108      	movs	r1, #8
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f6 fd79 	bl	80017c2 <mg_call>
  }
}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800acd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acda:	b08f      	sub	sp, #60	; 0x3c
 800acdc:	af06      	add	r7, sp, #24
 800acde:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3390      	adds	r3, #144	; 0x90
 800ace4:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	331c      	adds	r3, #28
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	3318      	adds	r3, #24
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fa fd1f 	bl	8005736 <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d12f      	bne.n	800ad68 <close_conn+0x90>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d127      	bne.n	800ad68 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800ad1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1e:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	f103 0610 	add.w	r6, r3, #16
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	60bb      	str	r3, [r7, #8]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	8b1c      	ldrh	r4, [r3, #24]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fc ffb0 	bl	8007c9c <mg_ntohl>
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fc ffaa 	bl	8007c9c <mg_ntohl>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	9205      	str	r2, [sp, #20]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	9204      	str	r2, [sp, #16]
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	6879      	ldr	r1, [r7, #4]
 800ad56:	9102      	str	r1, [sp, #8]
 800ad58:	9501      	str	r5, [sp, #4]
 800ad5a:	9400      	str	r4, [sp, #0]
 800ad5c:	2311      	movs	r3, #17
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	4631      	mov	r1, r6
 800ad62:	69b8      	ldr	r0, [r7, #24]
 800ad64:	f7fe fcea 	bl	800973c <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fb fc35 	bl	80065d8 <mg_close_conn>
}
 800ad6e:	bf00      	nop
 800ad70:	3724      	adds	r7, #36	; 0x24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad76 <can_write>:

static bool can_write(struct mg_connection *c) {
 800ad76:	b480      	push	{r7}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ad84:	f003 0320 	and.w	r3, r3, #32
 800ad88:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d11d      	bne.n	800adca <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ad94:	f003 0308 	and.w	r3, r3, #8
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d115      	bne.n	800adca <can_write+0x54>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d011      	beq.n	800adca <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800adac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800adb0:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800adbc:	f003 0310 	and.w	r3, r3, #16
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <can_write+0x54>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <can_write+0x56>
 800adca:	2300      	movs	r3, #0
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	b2db      	uxtb	r3, r3
}
 800add2:	4618      	mov	r0, r3
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800ade0:	b5b0      	push	{r4, r5, r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af04      	add	r7, sp, #16
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800adea:	f7fc ffc1 	bl	8007d70 <mg_millis>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800adfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800adfe:	4608      	mov	r0, r1
 800ae00:	f7ff fc48 	bl	800a694 <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae0e:	4608      	mov	r0, r1
 800ae10:	f7fc fd61 	bl	80078d6 <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	617b      	str	r3, [r7, #20]
 800ae1a:	e089      	b.n	800af30 <mg_mgr_poll+0x150>
    tmp = c->next;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800ae22:	f107 0308 	add.w	r3, r7, #8
 800ae26:	461a      	mov	r2, r3
 800ae28:	2102      	movs	r1, #2
 800ae2a:	6978      	ldr	r0, [r7, #20]
 800ae2c:	f7f6 fcc9 	bl	80017c2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800ae30:	4b44      	ldr	r3, [pc, #272]	; (800af44 <mg_mgr_poll+0x164>)
 800ae32:	f242 2218 	movw	r2, #8728	; 0x2218
 800ae36:	4944      	ldr	r1, [pc, #272]	; (800af48 <mg_mgr_poll+0x168>)
 800ae38:	2004      	movs	r0, #4
 800ae3a:	f7fb fa29 	bl	8006290 <mg_log_prefix>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d041      	beq.n	800aec8 <mg_mgr_poll+0xe8>
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ae4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <mg_mgr_poll+0x7c>
 800ae58:	2454      	movs	r4, #84	; 0x54
 800ae5a:	e000      	b.n	800ae5e <mg_mgr_poll+0x7e>
 800ae5c:	2474      	movs	r4, #116	; 0x74
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <mg_mgr_poll+0x92>
 800ae6e:	2543      	movs	r5, #67	; 0x43
 800ae70:	e000      	b.n	800ae74 <mg_mgr_poll+0x94>
 800ae72:	2563      	movs	r5, #99	; 0x63
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ae7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <mg_mgr_poll+0xa8>
 800ae84:	2348      	movs	r3, #72	; 0x48
 800ae86:	e000      	b.n	800ae8a <mg_mgr_poll+0xaa>
 800ae88:	2368      	movs	r3, #104	; 0x68
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800ae90:	f002 0208 	and.w	r2, r2, #8
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	d001      	beq.n	800ae9e <mg_mgr_poll+0xbe>
 800ae9a:	2252      	movs	r2, #82	; 0x52
 800ae9c:	e000      	b.n	800aea0 <mg_mgr_poll+0xc0>
 800ae9e:	2272      	movs	r2, #114	; 0x72
 800aea0:	6979      	ldr	r1, [r7, #20]
 800aea2:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800aea6:	f001 0120 	and.w	r1, r1, #32
 800aeaa:	b2c9      	uxtb	r1, r1
 800aeac:	2900      	cmp	r1, #0
 800aeae:	d001      	beq.n	800aeb4 <mg_mgr_poll+0xd4>
 800aeb0:	2143      	movs	r1, #67	; 0x43
 800aeb2:	e000      	b.n	800aeb6 <mg_mgr_poll+0xd6>
 800aeb4:	2163      	movs	r1, #99	; 0x63
 800aeb6:	9102      	str	r1, [sp, #8]
 800aeb8:	9201      	str	r2, [sp, #4]
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	462b      	mov	r3, r5
 800aebe:	4622      	mov	r2, r4
 800aec0:	4601      	mov	r1, r0
 800aec2:	4822      	ldr	r0, [pc, #136]	; (800af4c <mg_mgr_poll+0x16c>)
 800aec4:	f7fb fa3e 	bl	8006344 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800aece:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <mg_mgr_poll+0xfe>
 800aed8:	6978      	ldr	r0, [r7, #20]
 800aeda:	f7fc fd75 	bl	80079c8 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800aede:	6978      	ldr	r0, [r7, #20]
 800aee0:	f7ff ff49 	bl	800ad76 <can_write>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <mg_mgr_poll+0x110>
 800aeea:	6978      	ldr	r0, [r7, #20]
 800aeec:	f7ff febf 	bl	800ac6e <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800aef6:	f003 0310 	and.w	r3, r3, #16
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00a      	beq.n	800af16 <mg_mgr_poll+0x136>
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af04:	2b00      	cmp	r3, #0
 800af06:	d106      	bne.n	800af16 <mg_mgr_poll+0x136>
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800af0e:	f043 0320 	orr.w	r3, r3, #32
 800af12:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <mg_mgr_poll+0x14c>
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	f7ff fed6 	bl	800acd8 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f47f af72 	bne.w	800ae1c <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800af38:	bf00      	nop
 800af3a:	bf00      	nop
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bdb0      	pop	{r4, r5, r7, pc}
 800af42:	bf00      	nop
 800af44:	080140d0 	.word	0x080140d0
 800af48:	0801261c 	.word	0x0801261c
 800af4c:	08013e1c 	.word	0x08013e1c

0800af50 <scmp>:
  {"/web_root/index.html.gz", v1, sizeof(v1), 1710036665},
  {"/web_root/styles.css.gz", v2, sizeof(v2), 1710036662},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800af5a:	e005      	b.n	800af68 <scmp+0x18>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3301      	adds	r3, #1
 800af60:	607b      	str	r3, [r7, #4]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	3301      	adds	r3, #1
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d005      	beq.n	800af7c <scmp+0x2c>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	781a      	ldrb	r2, [r3, #0]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d0ef      	beq.n	800af5c <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	1ad3      	subs	r3, r2, r3
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <mg_unlist>:
const char *mg_unlist(size_t no) {
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800af9c:	4906      	ldr	r1, [pc, #24]	; (800afb8 <mg_unlist+0x24>)
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	4613      	mov	r3, r2
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	4413      	add	r3, r2
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	440b      	add	r3, r1
 800afaa:	681b      	ldr	r3, [r3, #0]
}
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	08014468 	.word	0x08014468

0800afbc <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800afc8:	4b16      	ldr	r3, [pc, #88]	; (800b024 <mg_unpack+0x68>)
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	e020      	b.n	800b010 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68f9      	ldr	r1, [r7, #12]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff ffbb 	bl	800af50 <scmp>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d113      	bne.n	800b008 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d004      	beq.n	800aff0 <mg_unpack+0x34>
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	1e5a      	subs	r2, r3, #1
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <mg_unpack+0x46>
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	e008      	b.n	800b01a <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800b008:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	3318      	adds	r3, #24
 800b00e:	617b      	str	r3, [r7, #20]
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1da      	bne.n	800afce <mg_unpack+0x12>
  }
  return NULL;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	08014468 	.word	0x08014468

0800b028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b02e:	4b11      	ldr	r3, [pc, #68]	; (800b074 <HAL_MspInit+0x4c>)
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	4a10      	ldr	r2, [pc, #64]	; (800b074 <HAL_MspInit+0x4c>)
 800b034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b038:	6413      	str	r3, [r2, #64]	; 0x40
 800b03a:	4b0e      	ldr	r3, [pc, #56]	; (800b074 <HAL_MspInit+0x4c>)
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b042:	607b      	str	r3, [r7, #4]
 800b044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <HAL_MspInit+0x4c>)
 800b048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04a:	4a0a      	ldr	r2, [pc, #40]	; (800b074 <HAL_MspInit+0x4c>)
 800b04c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b050:	6453      	str	r3, [r2, #68]	; 0x44
 800b052:	4b08      	ldr	r3, [pc, #32]	; (800b074 <HAL_MspInit+0x4c>)
 800b054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b05e:	2200      	movs	r2, #0
 800b060:	210f      	movs	r1, #15
 800b062:	f06f 0001 	mvn.w	r0, #1
 800b066:	f000 fbfb 	bl	800b860 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b06a:	bf00      	nop
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	40023800 	.word	0x40023800

0800b078 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b08e      	sub	sp, #56	; 0x38
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]
 800b088:	605a      	str	r2, [r3, #4]
 800b08a:	609a      	str	r2, [r3, #8]
 800b08c:	60da      	str	r2, [r3, #12]
 800b08e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a52      	ldr	r2, [pc, #328]	; (800b1e0 <HAL_ETH_MspInit+0x168>)
 800b096:	4293      	cmp	r3, r2
 800b098:	f040 809e 	bne.w	800b1d8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b09c:	4b51      	ldr	r3, [pc, #324]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a0:	4a50      	ldr	r2, [pc, #320]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b0a6:	6313      	str	r3, [r2, #48]	; 0x30
 800b0a8:	4b4e      	ldr	r3, [pc, #312]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0b0:	623b      	str	r3, [r7, #32]
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	4b4b      	ldr	r3, [pc, #300]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b8:	4a4a      	ldr	r2, [pc, #296]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0be:	6313      	str	r3, [r2, #48]	; 0x30
 800b0c0:	4b48      	ldr	r3, [pc, #288]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	4b45      	ldr	r3, [pc, #276]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	4a44      	ldr	r2, [pc, #272]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0d6:	6313      	str	r3, [r2, #48]	; 0x30
 800b0d8:	4b42      	ldr	r3, [pc, #264]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0e0:	61bb      	str	r3, [r7, #24]
 800b0e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0e4:	4b3f      	ldr	r3, [pc, #252]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e8:	4a3e      	ldr	r2, [pc, #248]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0ea:	f043 0304 	orr.w	r3, r3, #4
 800b0ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b0f0:	4b3c      	ldr	r3, [pc, #240]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	f003 0304 	and.w	r3, r3, #4
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0fc:	4b39      	ldr	r3, [pc, #228]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	4a38      	ldr	r2, [pc, #224]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	6313      	str	r3, [r2, #48]	; 0x30
 800b108:	4b36      	ldr	r3, [pc, #216]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b114:	4b33      	ldr	r3, [pc, #204]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b118:	4a32      	ldr	r2, [pc, #200]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b11a:	f043 0302 	orr.w	r3, r3, #2
 800b11e:	6313      	str	r3, [r2, #48]	; 0x30
 800b120:	4b30      	ldr	r3, [pc, #192]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	60fb      	str	r3, [r7, #12]
 800b12a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b12c:	4b2d      	ldr	r3, [pc, #180]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b130:	4a2c      	ldr	r2, [pc, #176]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b136:	6313      	str	r3, [r2, #48]	; 0x30
 800b138:	4b2a      	ldr	r3, [pc, #168]	; (800b1e4 <HAL_ETH_MspInit+0x16c>)
 800b13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b140:	60bb      	str	r3, [r7, #8]
 800b142:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b144:	2332      	movs	r3, #50	; 0x32
 800b146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b148:	2302      	movs	r3, #2
 800b14a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b150:	2303      	movs	r3, #3
 800b152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b154:	230b      	movs	r3, #11
 800b156:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b15c:	4619      	mov	r1, r3
 800b15e:	4822      	ldr	r0, [pc, #136]	; (800b1e8 <HAL_ETH_MspInit+0x170>)
 800b160:	f000 fece 	bl	800bf00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b164:	2386      	movs	r3, #134	; 0x86
 800b166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b168:	2302      	movs	r3, #2
 800b16a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b170:	2303      	movs	r3, #3
 800b172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b174:	230b      	movs	r3, #11
 800b176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b17c:	4619      	mov	r1, r3
 800b17e:	481b      	ldr	r0, [pc, #108]	; (800b1ec <HAL_ETH_MspInit+0x174>)
 800b180:	f000 febe 	bl	800bf00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b18a:	2302      	movs	r3, #2
 800b18c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b192:	2303      	movs	r3, #3
 800b194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b196:	230b      	movs	r3, #11
 800b198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b19a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4813      	ldr	r0, [pc, #76]	; (800b1f0 <HAL_ETH_MspInit+0x178>)
 800b1a2:	f000 fead 	bl	800bf00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b1a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1b8:	230b      	movs	r3, #11
 800b1ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b1bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	480c      	ldr	r0, [pc, #48]	; (800b1f4 <HAL_ETH_MspInit+0x17c>)
 800b1c4:	f000 fe9c 	bl	800bf00 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2105      	movs	r1, #5
 800b1cc:	203d      	movs	r0, #61	; 0x3d
 800b1ce:	f000 fb47 	bl	800b860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b1d2:	203d      	movs	r0, #61	; 0x3d
 800b1d4:	f000 fb60 	bl	800b898 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800b1d8:	bf00      	nop
 800b1da:	3738      	adds	r7, #56	; 0x38
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	40028000 	.word	0x40028000
 800b1e4:	40023800 	.word	0x40023800
 800b1e8:	40020800 	.word	0x40020800
 800b1ec:	40020000 	.word	0x40020000
 800b1f0:	40020400 	.word	0x40020400
 800b1f4:	40021800 	.word	0x40021800

0800b1f8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b0a4      	sub	sp, #144	; 0x90
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b200:	f107 030c 	add.w	r3, r7, #12
 800b204:	2284      	movs	r2, #132	; 0x84
 800b206:	2100      	movs	r1, #0
 800b208:	4618      	mov	r0, r3
 800b20a:	f006 fade 	bl	80117ca <memset>
  if(hrng->Instance==RNG)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a11      	ldr	r2, [pc, #68]	; (800b258 <HAL_RNG_MspInit+0x60>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d11b      	bne.n	800b250 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b218:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b21c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800b21e:	2300      	movs	r3, #0
 800b220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b224:	f107 030c 	add.w	r3, r7, #12
 800b228:	4618      	mov	r0, r3
 800b22a:	f001 fd95 	bl	800cd58 <HAL_RCCEx_PeriphCLKConfig>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800b234:	f7f6 fa84 	bl	8001740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b238:	4b08      	ldr	r3, [pc, #32]	; (800b25c <HAL_RNG_MspInit+0x64>)
 800b23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23c:	4a07      	ldr	r2, [pc, #28]	; (800b25c <HAL_RNG_MspInit+0x64>)
 800b23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b242:	6353      	str	r3, [r2, #52]	; 0x34
 800b244:	4b05      	ldr	r3, [pc, #20]	; (800b25c <HAL_RNG_MspInit+0x64>)
 800b246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24c:	60bb      	str	r3, [r7, #8]
 800b24e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b250:	bf00      	nop
 800b252:	3790      	adds	r7, #144	; 0x90
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	50060800 	.word	0x50060800
 800b25c:	40023800 	.word	0x40023800

0800b260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b0aa      	sub	sp, #168	; 0xa8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b268:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b26c:	2200      	movs	r2, #0
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	605a      	str	r2, [r3, #4]
 800b272:	609a      	str	r2, [r3, #8]
 800b274:	60da      	str	r2, [r3, #12]
 800b276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b278:	f107 0310 	add.w	r3, r7, #16
 800b27c:	2284      	movs	r2, #132	; 0x84
 800b27e:	2100      	movs	r1, #0
 800b280:	4618      	mov	r0, r3
 800b282:	f006 faa2 	bl	80117ca <memset>
  if(huart->Instance==USART3)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a22      	ldr	r2, [pc, #136]	; (800b314 <HAL_UART_MspInit+0xb4>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d13c      	bne.n	800b30a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b290:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b294:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b296:	2300      	movs	r3, #0
 800b298:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b29a:	f107 0310 	add.w	r3, r7, #16
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 fd5a 	bl	800cd58 <HAL_RCCEx_PeriphCLKConfig>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800b2aa:	f7f6 fa49 	bl	8001740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b2ae:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <HAL_UART_MspInit+0xb8>)
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	4a19      	ldr	r2, [pc, #100]	; (800b318 <HAL_UART_MspInit+0xb8>)
 800b2b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b2ba:	4b17      	ldr	r3, [pc, #92]	; (800b318 <HAL_UART_MspInit+0xb8>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b2c6:	4b14      	ldr	r3, [pc, #80]	; (800b318 <HAL_UART_MspInit+0xb8>)
 800b2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ca:	4a13      	ldr	r2, [pc, #76]	; (800b318 <HAL_UART_MspInit+0xb8>)
 800b2cc:	f043 0308 	orr.w	r3, r3, #8
 800b2d0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2d2:	4b11      	ldr	r3, [pc, #68]	; (800b318 <HAL_UART_MspInit+0xb8>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	f003 0308 	and.w	r3, r3, #8
 800b2da:	60bb      	str	r3, [r7, #8]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b2de:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b2e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b2f8:	2307      	movs	r3, #7
 800b2fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b2fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b302:	4619      	mov	r1, r3
 800b304:	4805      	ldr	r0, [pc, #20]	; (800b31c <HAL_UART_MspInit+0xbc>)
 800b306:	f000 fdfb 	bl	800bf00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b30a:	bf00      	nop
 800b30c:	37a8      	adds	r7, #168	; 0xa8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	40004800 	.word	0x40004800
 800b318:	40023800 	.word	0x40023800
 800b31c:	40020c00 	.word	0x40020c00

0800b320 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08e      	sub	sp, #56	; 0x38
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800b32c:	2300      	movs	r3, #0
 800b32e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b330:	4b33      	ldr	r3, [pc, #204]	; (800b400 <HAL_InitTick+0xe0>)
 800b332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b334:	4a32      	ldr	r2, [pc, #200]	; (800b400 <HAL_InitTick+0xe0>)
 800b336:	f043 0310 	orr.w	r3, r3, #16
 800b33a:	6413      	str	r3, [r2, #64]	; 0x40
 800b33c:	4b30      	ldr	r3, [pc, #192]	; (800b400 <HAL_InitTick+0xe0>)
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	f003 0310 	and.w	r3, r3, #16
 800b344:	60fb      	str	r3, [r7, #12]
 800b346:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b348:	f107 0210 	add.w	r2, r7, #16
 800b34c:	f107 0314 	add.w	r3, r7, #20
 800b350:	4611      	mov	r1, r2
 800b352:	4618      	mov	r0, r3
 800b354:	f001 fcce 	bl	800ccf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d103      	bne.n	800b36a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b362:	f001 fc9f 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
 800b366:	6378      	str	r0, [r7, #52]	; 0x34
 800b368:	e004      	b.n	800b374 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b36a:	f001 fc9b 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
 800b36e:	4603      	mov	r3, r0
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b376:	4a23      	ldr	r2, [pc, #140]	; (800b404 <HAL_InitTick+0xe4>)
 800b378:	fba2 2303 	umull	r2, r3, r2, r3
 800b37c:	0c9b      	lsrs	r3, r3, #18
 800b37e:	3b01      	subs	r3, #1
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b382:	4b21      	ldr	r3, [pc, #132]	; (800b408 <HAL_InitTick+0xe8>)
 800b384:	4a21      	ldr	r2, [pc, #132]	; (800b40c <HAL_InitTick+0xec>)
 800b386:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b388:	4b1f      	ldr	r3, [pc, #124]	; (800b408 <HAL_InitTick+0xe8>)
 800b38a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b38e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b390:	4a1d      	ldr	r2, [pc, #116]	; (800b408 <HAL_InitTick+0xe8>)
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b396:	4b1c      	ldr	r3, [pc, #112]	; (800b408 <HAL_InitTick+0xe8>)
 800b398:	2200      	movs	r2, #0
 800b39a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b39c:	4b1a      	ldr	r3, [pc, #104]	; (800b408 <HAL_InitTick+0xe8>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b3a2:	4b19      	ldr	r3, [pc, #100]	; (800b408 <HAL_InitTick+0xe8>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800b3a8:	4817      	ldr	r0, [pc, #92]	; (800b408 <HAL_InitTick+0xe8>)
 800b3aa:	f002 f945 	bl	800d638 <HAL_TIM_Base_Init>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800b3b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d11b      	bne.n	800b3f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b3bc:	4812      	ldr	r0, [pc, #72]	; (800b408 <HAL_InitTick+0xe8>)
 800b3be:	f002 f99d 	bl	800d6fc <HAL_TIM_Base_Start_IT>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800b3c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d111      	bne.n	800b3f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b3d0:	2036      	movs	r0, #54	; 0x36
 800b3d2:	f000 fa61 	bl	800b898 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b0f      	cmp	r3, #15
 800b3da:	d808      	bhi.n	800b3ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800b3dc:	2200      	movs	r2, #0
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	2036      	movs	r0, #54	; 0x36
 800b3e2:	f000 fa3d 	bl	800b860 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b3e6:	4a0a      	ldr	r2, [pc, #40]	; (800b410 <HAL_InitTick+0xf0>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	e002      	b.n	800b3f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800b3f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3738      	adds	r7, #56	; 0x38
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	40023800 	.word	0x40023800
 800b404:	431bde83 	.word	0x431bde83
 800b408:	20003674 	.word	0x20003674
 800b40c:	40001000 	.word	0x40001000
 800b410:	20000254 	.word	0x20000254

0800b414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b418:	e7fe      	b.n	800b418 <NMI_Handler+0x4>

0800b41a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b41a:	b480      	push	{r7}
 800b41c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b41e:	e7fe      	b.n	800b41e <HardFault_Handler+0x4>

0800b420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b424:	e7fe      	b.n	800b424 <MemManage_Handler+0x4>

0800b426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b426:	b480      	push	{r7}
 800b428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b42a:	e7fe      	b.n	800b42a <BusFault_Handler+0x4>

0800b42c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b42c:	b480      	push	{r7}
 800b42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b430:	e7fe      	b.n	800b430 <UsageFault_Handler+0x4>

0800b432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b432:	b480      	push	{r7}
 800b434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b436:	bf00      	nop
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b444:	4802      	ldr	r0, [pc, #8]	; (800b450 <TIM6_DAC_IRQHandler+0x10>)
 800b446:	f002 f9d1 	bl	800d7ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20003674 	.word	0x20003674

0800b454 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b454:	b480      	push	{r7}
 800b456:	af00      	add	r7, sp, #0
  return 1;
 800b458:	2301      	movs	r3, #1
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <_kill>:

int _kill(int pid, int sig)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b46e:	f006 fa41 	bl	80118f4 <__errno>
 800b472:	4603      	mov	r3, r0
 800b474:	2216      	movs	r2, #22
 800b476:	601a      	str	r2, [r3, #0]
  return -1;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <_exit>:

void _exit (int status)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b48c:	f04f 31ff 	mov.w	r1, #4294967295
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ffe7 	bl	800b464 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b496:	e7fe      	b.n	800b496 <_exit+0x12>

0800b498 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	e00a      	b.n	800b4c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b4aa:	f3af 8000 	nop.w
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	60ba      	str	r2, [r7, #8]
 800b4b6:	b2ca      	uxtb	r2, r1
 800b4b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	617b      	str	r3, [r7, #20]
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	dbf0      	blt.n	800b4aa <_read+0x12>
  }

  return len;
 800b4c8:	687b      	ldr	r3, [r7, #4]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
	...

0800b4d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d107      	bne.n	800b4f6 <_write+0x22>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	4803      	ldr	r0, [pc, #12]	; (800b500 <_write+0x2c>)
 800b4f2:	f002 fbcf 	bl	800dc94 <HAL_UART_Transmit>
	 return len;
 800b4f6:	687b      	ldr	r3, [r7, #4]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20000514 	.word	0x20000514

0800b504 <_close>:
//#endif

int _close(int file)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b50c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b52c:	605a      	str	r2, [r3, #4]
  return 0;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <_isatty>:

int _isatty(int file)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b544:	2301      	movs	r3, #1
}
 800b546:	4618      	mov	r0, r3
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b552:	b480      	push	{r7}
 800b554:	b085      	sub	sp, #20
 800b556:	af00      	add	r7, sp, #0
 800b558:	60f8      	str	r0, [r7, #12]
 800b55a:	60b9      	str	r1, [r7, #8]
 800b55c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b574:	4a14      	ldr	r2, [pc, #80]	; (800b5c8 <_sbrk+0x5c>)
 800b576:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <_sbrk+0x60>)
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b580:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <_sbrk+0x64>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d102      	bne.n	800b58e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b588:	4b11      	ldr	r3, [pc, #68]	; (800b5d0 <_sbrk+0x64>)
 800b58a:	4a12      	ldr	r2, [pc, #72]	; (800b5d4 <_sbrk+0x68>)
 800b58c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b58e:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <_sbrk+0x64>)
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4413      	add	r3, r2
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d207      	bcs.n	800b5ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b59c:	f006 f9aa 	bl	80118f4 <__errno>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	220c      	movs	r2, #12
 800b5a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5aa:	e009      	b.n	800b5c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b5ac:	4b08      	ldr	r3, [pc, #32]	; (800b5d0 <_sbrk+0x64>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b5b2:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <_sbrk+0x64>)
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	4a05      	ldr	r2, [pc, #20]	; (800b5d0 <_sbrk+0x64>)
 800b5bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b5be:	68fb      	ldr	r3, [r7, #12]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20050000 	.word	0x20050000
 800b5cc:	00000400 	.word	0x00000400
 800b5d0:	200036c0 	.word	0x200036c0
 800b5d4:	20008160 	.word	0x20008160

0800b5d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <SystemInit+0x20>)
 800b5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e2:	4a05      	ldr	r2, [pc, #20]	; (800b5f8 <SystemInit+0x20>)
 800b5e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b5ec:	bf00      	nop
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	e000ed00 	.word	0xe000ed00

0800b5fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b5fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b600:	480d      	ldr	r0, [pc, #52]	; (800b638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b602:	490e      	ldr	r1, [pc, #56]	; (800b63c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b604:	4a0e      	ldr	r2, [pc, #56]	; (800b640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b608:	e002      	b.n	800b610 <LoopCopyDataInit>

0800b60a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b60a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b60c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b60e:	3304      	adds	r3, #4

0800b610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b614:	d3f9      	bcc.n	800b60a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b616:	4a0b      	ldr	r2, [pc, #44]	; (800b644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b618:	4c0b      	ldr	r4, [pc, #44]	; (800b648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b61a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b61c:	e001      	b.n	800b622 <LoopFillZerobss>

0800b61e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b61e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b620:	3204      	adds	r2, #4

0800b622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b624:	d3fb      	bcc.n	800b61e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b626:	f7ff ffd7 	bl	800b5d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b62a:	f006 f969 	bl	8011900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b62e:	f7f5 fc53 	bl	8000ed8 <main>
  bx  lr    
 800b632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b634:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800b638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b63c:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 800b640:	080146b8 	.word	0x080146b8
  ldr r2, =_sbss
 800b644:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800b648:	2000815c 	.word	0x2000815c

0800b64c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b64c:	e7fe      	b.n	800b64c <ADC_IRQHandler>

0800b64e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b652:	2003      	movs	r0, #3
 800b654:	f000 f8f9 	bl	800b84a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b658:	200f      	movs	r0, #15
 800b65a:	f7ff fe61 	bl	800b320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b65e:	f7ff fce3 	bl	800b028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <HAL_IncTick+0x20>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	461a      	mov	r2, r3
 800b672:	4b06      	ldr	r3, [pc, #24]	; (800b68c <HAL_IncTick+0x24>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4413      	add	r3, r2
 800b678:	4a04      	ldr	r2, [pc, #16]	; (800b68c <HAL_IncTick+0x24>)
 800b67a:	6013      	str	r3, [r2, #0]
}
 800b67c:	bf00      	nop
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	20000258 	.word	0x20000258
 800b68c:	200036c4 	.word	0x200036c4

0800b690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
  return uwTick;
 800b694:	4b03      	ldr	r3, [pc, #12]	; (800b6a4 <HAL_GetTick+0x14>)
 800b696:	681b      	ldr	r3, [r3, #0]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	200036c4 	.word	0x200036c4

0800b6a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b6b0:	f7ff ffee 	bl	800b690 <HAL_GetTick>
 800b6b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d005      	beq.n	800b6ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <HAL_Delay+0x44>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b6ce:	bf00      	nop
 800b6d0:	f7ff ffde 	bl	800b690 <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d8f7      	bhi.n	800b6d0 <HAL_Delay+0x28>
  {
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20000258 	.word	0x20000258

0800b6f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f003 0307 	and.w	r3, r3, #7
 800b6fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b700:	4b0b      	ldr	r3, [pc, #44]	; (800b730 <__NVIC_SetPriorityGrouping+0x40>)
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b70c:	4013      	ands	r3, r2
 800b70e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b718:	4b06      	ldr	r3, [pc, #24]	; (800b734 <__NVIC_SetPriorityGrouping+0x44>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b71e:	4a04      	ldr	r2, [pc, #16]	; (800b730 <__NVIC_SetPriorityGrouping+0x40>)
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	60d3      	str	r3, [r2, #12]
}
 800b724:	bf00      	nop
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	e000ed00 	.word	0xe000ed00
 800b734:	05fa0000 	.word	0x05fa0000

0800b738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b738:	b480      	push	{r7}
 800b73a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b73c:	4b04      	ldr	r3, [pc, #16]	; (800b750 <__NVIC_GetPriorityGrouping+0x18>)
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	0a1b      	lsrs	r3, r3, #8
 800b742:	f003 0307 	and.w	r3, r3, #7
}
 800b746:	4618      	mov	r0, r3
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	e000ed00 	.word	0xe000ed00

0800b754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b762:	2b00      	cmp	r3, #0
 800b764:	db0b      	blt.n	800b77e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b766:	79fb      	ldrb	r3, [r7, #7]
 800b768:	f003 021f 	and.w	r2, r3, #31
 800b76c:	4907      	ldr	r1, [pc, #28]	; (800b78c <__NVIC_EnableIRQ+0x38>)
 800b76e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b772:	095b      	lsrs	r3, r3, #5
 800b774:	2001      	movs	r0, #1
 800b776:	fa00 f202 	lsl.w	r2, r0, r2
 800b77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b77e:	bf00      	nop
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	e000e100 	.word	0xe000e100

0800b790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	4603      	mov	r3, r0
 800b798:	6039      	str	r1, [r7, #0]
 800b79a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b79c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	db0a      	blt.n	800b7ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	490c      	ldr	r1, [pc, #48]	; (800b7dc <__NVIC_SetPriority+0x4c>)
 800b7aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ae:	0112      	lsls	r2, r2, #4
 800b7b0:	b2d2      	uxtb	r2, r2
 800b7b2:	440b      	add	r3, r1
 800b7b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b7b8:	e00a      	b.n	800b7d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	4908      	ldr	r1, [pc, #32]	; (800b7e0 <__NVIC_SetPriority+0x50>)
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	f003 030f 	and.w	r3, r3, #15
 800b7c6:	3b04      	subs	r3, #4
 800b7c8:	0112      	lsls	r2, r2, #4
 800b7ca:	b2d2      	uxtb	r2, r2
 800b7cc:	440b      	add	r3, r1
 800b7ce:	761a      	strb	r2, [r3, #24]
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	e000e100 	.word	0xe000e100
 800b7e0:	e000ed00 	.word	0xe000ed00

0800b7e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b089      	sub	sp, #36	; 0x24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f003 0307 	and.w	r3, r3, #7
 800b7f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	f1c3 0307 	rsb	r3, r3, #7
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	bf28      	it	cs
 800b802:	2304      	movcs	r3, #4
 800b804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	3304      	adds	r3, #4
 800b80a:	2b06      	cmp	r3, #6
 800b80c:	d902      	bls.n	800b814 <NVIC_EncodePriority+0x30>
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	3b03      	subs	r3, #3
 800b812:	e000      	b.n	800b816 <NVIC_EncodePriority+0x32>
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b818:	f04f 32ff 	mov.w	r2, #4294967295
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	fa02 f303 	lsl.w	r3, r2, r3
 800b822:	43da      	mvns	r2, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	401a      	ands	r2, r3
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b82c:	f04f 31ff 	mov.w	r1, #4294967295
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	fa01 f303 	lsl.w	r3, r1, r3
 800b836:	43d9      	mvns	r1, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b83c:	4313      	orrs	r3, r2
         );
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3724      	adds	r7, #36	; 0x24
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b082      	sub	sp, #8
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff ff4c 	bl	800b6f0 <__NVIC_SetPriorityGrouping>
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b872:	f7ff ff61 	bl	800b738 <__NVIC_GetPriorityGrouping>
 800b876:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	68b9      	ldr	r1, [r7, #8]
 800b87c:	6978      	ldr	r0, [r7, #20]
 800b87e:	f7ff ffb1 	bl	800b7e4 <NVIC_EncodePriority>
 800b882:	4602      	mov	r2, r0
 800b884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff ff80 	bl	800b790 <__NVIC_SetPriority>
}
 800b890:	bf00      	nop
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b8a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff ff54 	bl	800b754 <__NVIC_EnableIRQ>
}
 800b8ac:	bf00      	nop
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e06a      	b.n	800b99c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d106      	bne.n	800b8de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2223      	movs	r2, #35	; 0x23
 800b8d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7ff fbcd 	bl	800b078 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8de:	4b31      	ldr	r3, [pc, #196]	; (800b9a4 <HAL_ETH_Init+0xf0>)
 800b8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8e2:	4a30      	ldr	r2, [pc, #192]	; (800b9a4 <HAL_ETH_Init+0xf0>)
 800b8e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8e8:	6453      	str	r3, [r2, #68]	; 0x44
 800b8ea:	4b2e      	ldr	r3, [pc, #184]	; (800b9a4 <HAL_ETH_Init+0xf0>)
 800b8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8f2:	60bb      	str	r3, [r7, #8]
 800b8f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800b8f6:	4b2c      	ldr	r3, [pc, #176]	; (800b9a8 <HAL_ETH_Init+0xf4>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	4a2b      	ldr	r2, [pc, #172]	; (800b9a8 <HAL_ETH_Init+0xf4>)
 800b8fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b900:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800b902:	4b29      	ldr	r3, [pc, #164]	; (800b9a8 <HAL_ETH_Init+0xf4>)
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	4927      	ldr	r1, [pc, #156]	; (800b9a8 <HAL_ETH_Init+0xf4>)
 800b90c:	4313      	orrs	r3, r2
 800b90e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800b910:	4b25      	ldr	r3, [pc, #148]	; (800b9a8 <HAL_ETH_Init+0xf4>)
 800b912:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	6812      	ldr	r2, [r2, #0]
 800b922:	f043 0301 	orr.w	r3, r3, #1
 800b926:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b92a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b92c:	f7ff feb0 	bl	800b690 <HAL_GetTick>
 800b930:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800b932:	e011      	b.n	800b958 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800b934:	f7ff feac 	bl	800b690 <HAL_GetTick>
 800b938:	4602      	mov	r2, r0
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b942:	d909      	bls.n	800b958 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2204      	movs	r2, #4
 800b948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	22e0      	movs	r2, #224	; 0xe0
 800b950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e021      	b.n	800b99c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e4      	bne.n	800b934 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f958 	bl	800bc20 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f9ff 	bl	800bd74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fa55 	bl	800be26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	461a      	mov	r2, r3
 800b982:	2100      	movs	r1, #0
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f9bd 	bl	800bd04 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2210      	movs	r2, #16
 800b996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	40023800 	.word	0x40023800
 800b9a8:	40013800 	.word	0x40013800

0800b9ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	4b51      	ldr	r3, [pc, #324]	; (800bb08 <ETH_SetMACConfig+0x15c>)
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	7c1b      	ldrb	r3, [r3, #16]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d102      	bne.n	800b9d4 <ETH_SetMACConfig+0x28>
 800b9ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b9d2:	e000      	b.n	800b9d6 <ETH_SetMACConfig+0x2a>
 800b9d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	7c5b      	ldrb	r3, [r3, #17]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d102      	bne.n	800b9e4 <ETH_SetMACConfig+0x38>
 800b9de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9e2:	e000      	b.n	800b9e6 <ETH_SetMACConfig+0x3a>
 800b9e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800b9e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800b9ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	7fdb      	ldrb	r3, [r3, #31]
 800b9f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800b9f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800b9fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	7f92      	ldrb	r2, [r2, #30]
 800ba00:	2a00      	cmp	r2, #0
 800ba02:	d102      	bne.n	800ba0a <ETH_SetMACConfig+0x5e>
 800ba04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ba08:	e000      	b.n	800ba0c <ETH_SetMACConfig+0x60>
 800ba0a:	2200      	movs	r2, #0
                        macconf->Speed |
 800ba0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	7f1b      	ldrb	r3, [r3, #28]
 800ba12:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800ba14:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800ba1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	791b      	ldrb	r3, [r3, #4]
 800ba20:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800ba22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ba2a:	2a00      	cmp	r2, #0
 800ba2c:	d102      	bne.n	800ba34 <ETH_SetMACConfig+0x88>
 800ba2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba32:	e000      	b.n	800ba36 <ETH_SetMACConfig+0x8a>
 800ba34:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800ba36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	7bdb      	ldrb	r3, [r3, #15]
 800ba3c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800ba3e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800ba44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba4c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800ba66:	2001      	movs	r0, #1
 800ba68:	f7ff fe1e 	bl	800b6a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	f64f 7341 	movw	r3, #65345	; 0xff41
 800ba82:	4013      	ands	r3, r2
 800ba84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba8a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800ba92:	2a00      	cmp	r2, #0
 800ba94:	d101      	bne.n	800ba9a <ETH_SetMACConfig+0xee>
 800ba96:	2280      	movs	r2, #128	; 0x80
 800ba98:	e000      	b.n	800ba9c <ETH_SetMACConfig+0xf0>
 800ba9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800ba9c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800baa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800baaa:	2a01      	cmp	r2, #1
 800baac:	d101      	bne.n	800bab2 <ETH_SetMACConfig+0x106>
 800baae:	2208      	movs	r2, #8
 800bab0:	e000      	b.n	800bab4 <ETH_SetMACConfig+0x108>
 800bab2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800bab4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800babc:	2a01      	cmp	r2, #1
 800babe:	d101      	bne.n	800bac4 <ETH_SetMACConfig+0x118>
 800bac0:	2204      	movs	r2, #4
 800bac2:	e000      	b.n	800bac6 <ETH_SetMACConfig+0x11a>
 800bac4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800bac6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800bace:	2a01      	cmp	r2, #1
 800bad0:	d101      	bne.n	800bad6 <ETH_SetMACConfig+0x12a>
 800bad2:	2202      	movs	r2, #2
 800bad4:	e000      	b.n	800bad8 <ETH_SetMACConfig+0x12c>
 800bad6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800bad8:	4313      	orrs	r3, r2
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	4313      	orrs	r3, r2
 800bade:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800baf0:	2001      	movs	r0, #1
 800baf2:	f7ff fdd9 	bl	800b6a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	619a      	str	r2, [r3, #24]
}
 800bafe:	bf00      	nop
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	ff20810f 	.word	0xff20810f

0800bb0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	4b3d      	ldr	r3, [pc, #244]	; (800bc1c <ETH_SetDMAConfig+0x110>)
 800bb26:	4013      	ands	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	7b1b      	ldrb	r3, [r3, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <ETH_SetDMAConfig+0x2c>
 800bb32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bb36:	e000      	b.n	800bb3a <ETH_SetDMAConfig+0x2e>
 800bb38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	7b5b      	ldrb	r3, [r3, #13]
 800bb3e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bb40:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	7f52      	ldrb	r2, [r2, #29]
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	d102      	bne.n	800bb50 <ETH_SetDMAConfig+0x44>
 800bb4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb4e:	e000      	b.n	800bb52 <ETH_SetDMAConfig+0x46>
 800bb50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800bb52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	7b9b      	ldrb	r3, [r3, #14]
 800bb58:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800bb5a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800bb60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	7f1b      	ldrb	r3, [r3, #28]
 800bb66:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800bb68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	7f9b      	ldrb	r3, [r3, #30]
 800bb6e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800bb70:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800bb76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb7e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800bb80:	4313      	orrs	r3, r2
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb90:	461a      	mov	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bba2:	2001      	movs	r0, #1
 800bba4:	f7ff fd80 	bl	800b6a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	791b      	ldrb	r3, [r3, #4]
 800bbba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bbc0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800bbc6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800bbcc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bbd4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800bbd6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbdc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800bbde:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800bbe4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	6812      	ldr	r2, [r2, #0]
 800bbea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbf2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800bc00:	2001      	movs	r0, #1
 800bc02:	f7ff fd51 	bl	800b6a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0e:	461a      	mov	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6013      	str	r3, [r2, #0]
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	f8de3f23 	.word	0xf8de3f23

0800bc20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b0a6      	sub	sp, #152	; 0x98
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800bc34:	2300      	movs	r3, #0
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800bc44:	2300      	movs	r3, #0
 800bc46:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800bc50:	2300      	movs	r3, #0
 800bc52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800bc56:	2300      	movs	r3, #0
 800bc58:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800bc60:	2300      	movs	r3, #0
 800bc62:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800bc66:	2300      	movs	r3, #0
 800bc68:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800bc76:	2300      	movs	r3, #0
 800bc78:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800bc82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc86:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800bc88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800bc94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff fe86 	bl	800b9ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800bca0:	2301      	movs	r3, #1
 800bca2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800bca4:	2301      	movs	r3, #1
 800bca6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800bccc:	2301      	movs	r3, #1
 800bcce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800bcd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bcd4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800bcd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bcda:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800bcdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bce0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800bce8:	2300      	movs	r3, #0
 800bcea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800bcec:	2300      	movs	r3, #0
 800bcee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800bcf0:	f107 0308 	add.w	r3, r7, #8
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff ff08 	bl	800bb0c <ETH_SetDMAConfig>
}
 800bcfc:	bf00      	nop
 800bcfe:	3798      	adds	r7, #152	; 0x98
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	3305      	adds	r3, #5
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	021b      	lsls	r3, r3, #8
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	3204      	adds	r2, #4
 800bd1c:	7812      	ldrb	r2, [r2, #0]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	4b11      	ldr	r3, [pc, #68]	; (800bd6c <ETH_MACAddressConfig+0x68>)
 800bd26:	4413      	add	r3, r2
 800bd28:	461a      	mov	r2, r3
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3303      	adds	r3, #3
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	061a      	lsls	r2, r3, #24
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3302      	adds	r3, #2
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	041b      	lsls	r3, r3, #16
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3301      	adds	r3, #1
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	7812      	ldrb	r2, [r2, #0]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	4b06      	ldr	r3, [pc, #24]	; (800bd70 <ETH_MACAddressConfig+0x6c>)
 800bd56:	4413      	add	r3, r2
 800bd58:	461a      	mov	r2, r3
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	6013      	str	r3, [r2, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	40028040 	.word	0x40028040
 800bd70:	40028044 	.word	0x40028044

0800bd74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	e03e      	b.n	800be00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68d9      	ldr	r1, [r3, #12]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	440b      	add	r3, r1
 800bd92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2200      	movs	r2, #0
 800bda4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800bdac:	68b9      	ldr	r1, [r7, #8]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	3206      	adds	r2, #6
 800bdb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d80c      	bhi.n	800bde4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	68d9      	ldr	r1, [r3, #12]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	1c5a      	adds	r2, r3, #1
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	440b      	add	r3, r1
 800bddc:	461a      	mov	r2, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	60da      	str	r2, [r3, #12]
 800bde2:	e004      	b.n	800bdee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	461a      	mov	r2, r3
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	60fb      	str	r3, [r7, #12]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b03      	cmp	r3, #3
 800be04:	d9bd      	bls.n	800bd82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68da      	ldr	r2, [r3, #12]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be18:	611a      	str	r2, [r3, #16]
}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr

0800be26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800be26:	b480      	push	{r7}
 800be28:	b085      	sub	sp, #20
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	e046      	b.n	800bec2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6919      	ldr	r1, [r3, #16]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	4613      	mov	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	00db      	lsls	r3, r3, #3
 800be42:	440b      	add	r3, r1
 800be44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2200      	movs	r2, #0
 800be4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2200      	movs	r2, #0
 800be50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2200      	movs	r2, #0
 800be56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2200      	movs	r2, #0
 800be5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2200      	movs	r2, #0
 800be62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2200      	movs	r2, #0
 800be68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800be78:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800be86:	68b9      	ldr	r1, [r7, #8]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	3212      	adds	r2, #18
 800be8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b02      	cmp	r3, #2
 800be96:	d80c      	bhi.n	800beb2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6919      	ldr	r1, [r3, #16]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	1c5a      	adds	r2, r3, #1
 800bea0:	4613      	mov	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	440b      	add	r3, r1
 800beaa:	461a      	mov	r2, r3
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	60da      	str	r2, [r3, #12]
 800beb0:	e004      	b.n	800bebc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	461a      	mov	r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b03      	cmp	r3, #3
 800bec6:	d9b5      	bls.n	800be34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691a      	ldr	r2, [r3, #16]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef2:	60da      	str	r2, [r3, #12]
}
 800bef4:	bf00      	nop
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b089      	sub	sp, #36	; 0x24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bf12:	2300      	movs	r3, #0
 800bf14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800bf16:	2300      	movs	r3, #0
 800bf18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e175      	b.n	800c20c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bf20:	2201      	movs	r2, #1
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	fa02 f303 	lsl.w	r3, r2, r3
 800bf28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	4013      	ands	r3, r2
 800bf32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	f040 8164 	bne.w	800c206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	f003 0303 	and.w	r3, r3, #3
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d005      	beq.n	800bf56 <HAL_GPIO_Init+0x56>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f003 0303 	and.w	r3, r3, #3
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d130      	bne.n	800bfb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	2203      	movs	r2, #3
 800bf62:	fa02 f303 	lsl.w	r3, r2, r3
 800bf66:	43db      	mvns	r3, r3
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	68da      	ldr	r2, [r3, #12]
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	69ba      	ldr	r2, [r7, #24]
 800bf84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	43db      	mvns	r3, r3
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	091b      	lsrs	r3, r3, #4
 800bfa2:	f003 0201 	and.w	r2, r3, #1
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69ba      	ldr	r2, [r7, #24]
 800bfb6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f003 0303 	and.w	r3, r3, #3
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d017      	beq.n	800bff4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	2203      	movs	r2, #3
 800bfd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd4:	43db      	mvns	r3, r3
 800bfd6:	69ba      	ldr	r2, [r7, #24]
 800bfd8:	4013      	ands	r3, r2
 800bfda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	689a      	ldr	r2, [r3, #8]
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	69ba      	ldr	r2, [r7, #24]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	f003 0303 	and.w	r3, r3, #3
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d123      	bne.n	800c048 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	08da      	lsrs	r2, r3, #3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3208      	adds	r2, #8
 800c008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	f003 0307 	and.w	r3, r3, #7
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	220f      	movs	r2, #15
 800c018:	fa02 f303 	lsl.w	r3, r2, r3
 800c01c:	43db      	mvns	r3, r3
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	4013      	ands	r3, r2
 800c022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	691a      	ldr	r2, [r3, #16]
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	fa02 f303 	lsl.w	r3, r2, r3
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	4313      	orrs	r3, r2
 800c038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	08da      	lsrs	r2, r3, #3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3208      	adds	r2, #8
 800c042:	69b9      	ldr	r1, [r7, #24]
 800c044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	2203      	movs	r2, #3
 800c054:	fa02 f303 	lsl.w	r3, r2, r3
 800c058:	43db      	mvns	r3, r3
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	4013      	ands	r3, r2
 800c05e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	f003 0203 	and.w	r2, r3, #3
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	fa02 f303 	lsl.w	r3, r2, r3
 800c070:	69ba      	ldr	r2, [r7, #24]
 800c072:	4313      	orrs	r3, r2
 800c074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 80be 	beq.w	800c206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c08a:	4b66      	ldr	r3, [pc, #408]	; (800c224 <HAL_GPIO_Init+0x324>)
 800c08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08e:	4a65      	ldr	r2, [pc, #404]	; (800c224 <HAL_GPIO_Init+0x324>)
 800c090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c094:	6453      	str	r3, [r2, #68]	; 0x44
 800c096:	4b63      	ldr	r3, [pc, #396]	; (800c224 <HAL_GPIO_Init+0x324>)
 800c098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c0a2:	4a61      	ldr	r2, [pc, #388]	; (800c228 <HAL_GPIO_Init+0x328>)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	089b      	lsrs	r3, r3, #2
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f003 0303 	and.w	r3, r3, #3
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	220f      	movs	r2, #15
 800c0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c0be:	43db      	mvns	r3, r3
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a58      	ldr	r2, [pc, #352]	; (800c22c <HAL_GPIO_Init+0x32c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d037      	beq.n	800c13e <HAL_GPIO_Init+0x23e>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a57      	ldr	r2, [pc, #348]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d031      	beq.n	800c13a <HAL_GPIO_Init+0x23a>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a56      	ldr	r2, [pc, #344]	; (800c234 <HAL_GPIO_Init+0x334>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d02b      	beq.n	800c136 <HAL_GPIO_Init+0x236>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a55      	ldr	r2, [pc, #340]	; (800c238 <HAL_GPIO_Init+0x338>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d025      	beq.n	800c132 <HAL_GPIO_Init+0x232>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a54      	ldr	r2, [pc, #336]	; (800c23c <HAL_GPIO_Init+0x33c>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d01f      	beq.n	800c12e <HAL_GPIO_Init+0x22e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a53      	ldr	r2, [pc, #332]	; (800c240 <HAL_GPIO_Init+0x340>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d019      	beq.n	800c12a <HAL_GPIO_Init+0x22a>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a52      	ldr	r2, [pc, #328]	; (800c244 <HAL_GPIO_Init+0x344>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d013      	beq.n	800c126 <HAL_GPIO_Init+0x226>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a51      	ldr	r2, [pc, #324]	; (800c248 <HAL_GPIO_Init+0x348>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d00d      	beq.n	800c122 <HAL_GPIO_Init+0x222>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a50      	ldr	r2, [pc, #320]	; (800c24c <HAL_GPIO_Init+0x34c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d007      	beq.n	800c11e <HAL_GPIO_Init+0x21e>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a4f      	ldr	r2, [pc, #316]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d101      	bne.n	800c11a <HAL_GPIO_Init+0x21a>
 800c116:	2309      	movs	r3, #9
 800c118:	e012      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c11a:	230a      	movs	r3, #10
 800c11c:	e010      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c11e:	2308      	movs	r3, #8
 800c120:	e00e      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c122:	2307      	movs	r3, #7
 800c124:	e00c      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c126:	2306      	movs	r3, #6
 800c128:	e00a      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c12a:	2305      	movs	r3, #5
 800c12c:	e008      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c12e:	2304      	movs	r3, #4
 800c130:	e006      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c132:	2303      	movs	r3, #3
 800c134:	e004      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c136:	2302      	movs	r3, #2
 800c138:	e002      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e000      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c13e:	2300      	movs	r3, #0
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	f002 0203 	and.w	r2, r2, #3
 800c146:	0092      	lsls	r2, r2, #2
 800c148:	4093      	lsls	r3, r2
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c150:	4935      	ldr	r1, [pc, #212]	; (800c228 <HAL_GPIO_Init+0x328>)
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	089b      	lsrs	r3, r3, #2
 800c156:	3302      	adds	r3, #2
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c15e:	4b3d      	ldr	r3, [pc, #244]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	43db      	mvns	r3, r3
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	4013      	ands	r3, r2
 800c16c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	4313      	orrs	r3, r2
 800c180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c182:	4a34      	ldr	r2, [pc, #208]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c188:	4b32      	ldr	r3, [pc, #200]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	43db      	mvns	r3, r3
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	4013      	ands	r3, r2
 800c196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c1ac:	4a29      	ldr	r2, [pc, #164]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c1b2:	4b28      	ldr	r3, [pc, #160]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	43db      	mvns	r3, r3
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	4013      	ands	r3, r2
 800c1c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c1d6:	4a1f      	ldr	r2, [pc, #124]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c1dc:	4b1d      	ldr	r3, [pc, #116]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	43db      	mvns	r3, r3
 800c1e6:	69ba      	ldr	r2, [r7, #24]
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c200:	4a14      	ldr	r2, [pc, #80]	; (800c254 <HAL_GPIO_Init+0x354>)
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	3301      	adds	r3, #1
 800c20a:	61fb      	str	r3, [r7, #28]
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	2b0f      	cmp	r3, #15
 800c210:	f67f ae86 	bls.w	800bf20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	3724      	adds	r7, #36	; 0x24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	40023800 	.word	0x40023800
 800c228:	40013800 	.word	0x40013800
 800c22c:	40020000 	.word	0x40020000
 800c230:	40020400 	.word	0x40020400
 800c234:	40020800 	.word	0x40020800
 800c238:	40020c00 	.word	0x40020c00
 800c23c:	40021000 	.word	0x40021000
 800c240:	40021400 	.word	0x40021400
 800c244:	40021800 	.word	0x40021800
 800c248:	40021c00 	.word	0x40021c00
 800c24c:	40022000 	.word	0x40022000
 800c250:	40022400 	.word	0x40022400
 800c254:	40013c00 	.word	0x40013c00

0800c258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	807b      	strh	r3, [r7, #2]
 800c264:	4613      	mov	r3, r2
 800c266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c268:	787b      	ldrb	r3, [r7, #1]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d003      	beq.n	800c276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c26e:	887a      	ldrh	r2, [r7, #2]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c274:	e003      	b.n	800c27e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c276:	887b      	ldrh	r3, [r7, #2]
 800c278:	041a      	lsls	r2, r3, #16
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	619a      	str	r2, [r3, #24]
}
 800c27e:	bf00      	nop
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b085      	sub	sp, #20
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	460b      	mov	r3, r1
 800c294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c29c:	887a      	ldrh	r2, [r7, #2]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	041a      	lsls	r2, r3, #16
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	43d9      	mvns	r1, r3
 800c2a8:	887b      	ldrh	r3, [r7, #2]
 800c2aa:	400b      	ands	r3, r1
 800c2ac:	431a      	orrs	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	619a      	str	r2, [r3, #24]
}
 800c2b2:	bf00      	nop
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
	...

0800c2c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c2ca:	4b23      	ldr	r3, [pc, #140]	; (800c358 <HAL_PWREx_EnableOverDrive+0x98>)
 800c2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ce:	4a22      	ldr	r2, [pc, #136]	; (800c358 <HAL_PWREx_EnableOverDrive+0x98>)
 800c2d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c2d6:	4b20      	ldr	r3, [pc, #128]	; (800c358 <HAL_PWREx_EnableOverDrive+0x98>)
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c2e2:	4b1e      	ldr	r3, [pc, #120]	; (800c35c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a1d      	ldr	r2, [pc, #116]	; (800c35c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c2ee:	f7ff f9cf 	bl	800b690 <HAL_GetTick>
 800c2f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2f4:	e009      	b.n	800c30a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c2f6:	f7ff f9cb 	bl	800b690 <HAL_GetTick>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c304:	d901      	bls.n	800c30a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c306:	2303      	movs	r3, #3
 800c308:	e022      	b.n	800c350 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c30a:	4b14      	ldr	r3, [pc, #80]	; (800c35c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c316:	d1ee      	bne.n	800c2f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c318:	4b10      	ldr	r3, [pc, #64]	; (800c35c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a0f      	ldr	r2, [pc, #60]	; (800c35c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c31e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c322:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c324:	f7ff f9b4 	bl	800b690 <HAL_GetTick>
 800c328:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c32a:	e009      	b.n	800c340 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c32c:	f7ff f9b0 	bl	800b690 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c33a:	d901      	bls.n	800c340 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e007      	b.n	800c350 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <HAL_PWREx_EnableOverDrive+0x9c>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c34c:	d1ee      	bne.n	800c32c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	40023800 	.word	0x40023800
 800c35c:	40007000 	.word	0x40007000

0800c360 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c368:	2300      	movs	r3, #0
 800c36a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	e291      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 8087 	beq.w	800c492 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c384:	4b96      	ldr	r3, [pc, #600]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	f003 030c 	and.w	r3, r3, #12
 800c38c:	2b04      	cmp	r3, #4
 800c38e:	d00c      	beq.n	800c3aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c390:	4b93      	ldr	r3, [pc, #588]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	f003 030c 	and.w	r3, r3, #12
 800c398:	2b08      	cmp	r3, #8
 800c39a:	d112      	bne.n	800c3c2 <HAL_RCC_OscConfig+0x62>
 800c39c:	4b90      	ldr	r3, [pc, #576]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3a8:	d10b      	bne.n	800c3c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3aa:	4b8d      	ldr	r3, [pc, #564]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d06c      	beq.n	800c490 <HAL_RCC_OscConfig+0x130>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d168      	bne.n	800c490 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e26b      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ca:	d106      	bne.n	800c3da <HAL_RCC_OscConfig+0x7a>
 800c3cc:	4b84      	ldr	r3, [pc, #528]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a83      	ldr	r2, [pc, #524]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c3d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3d6:	6013      	str	r3, [r2, #0]
 800c3d8:	e02e      	b.n	800c438 <HAL_RCC_OscConfig+0xd8>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10c      	bne.n	800c3fc <HAL_RCC_OscConfig+0x9c>
 800c3e2:	4b7f      	ldr	r3, [pc, #508]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a7e      	ldr	r2, [pc, #504]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c3e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	4b7c      	ldr	r3, [pc, #496]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a7b      	ldr	r2, [pc, #492]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c3f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	e01d      	b.n	800c438 <HAL_RCC_OscConfig+0xd8>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c404:	d10c      	bne.n	800c420 <HAL_RCC_OscConfig+0xc0>
 800c406:	4b76      	ldr	r3, [pc, #472]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a75      	ldr	r2, [pc, #468]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c40c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	4b73      	ldr	r3, [pc, #460]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a72      	ldr	r2, [pc, #456]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	e00b      	b.n	800c438 <HAL_RCC_OscConfig+0xd8>
 800c420:	4b6f      	ldr	r3, [pc, #444]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a6e      	ldr	r2, [pc, #440]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c42a:	6013      	str	r3, [r2, #0]
 800c42c:	4b6c      	ldr	r3, [pc, #432]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a6b      	ldr	r2, [pc, #428]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d013      	beq.n	800c468 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c440:	f7ff f926 	bl	800b690 <HAL_GetTick>
 800c444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c446:	e008      	b.n	800c45a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c448:	f7ff f922 	bl	800b690 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b64      	cmp	r3, #100	; 0x64
 800c454:	d901      	bls.n	800c45a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e21f      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c45a:	4b61      	ldr	r3, [pc, #388]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0f0      	beq.n	800c448 <HAL_RCC_OscConfig+0xe8>
 800c466:	e014      	b.n	800c492 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c468:	f7ff f912 	bl	800b690 <HAL_GetTick>
 800c46c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c46e:	e008      	b.n	800c482 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c470:	f7ff f90e 	bl	800b690 <HAL_GetTick>
 800c474:	4602      	mov	r2, r0
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	2b64      	cmp	r3, #100	; 0x64
 800c47c:	d901      	bls.n	800c482 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c47e:	2303      	movs	r3, #3
 800c480:	e20b      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c482:	4b57      	ldr	r3, [pc, #348]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1f0      	bne.n	800c470 <HAL_RCC_OscConfig+0x110>
 800c48e:	e000      	b.n	800c492 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 0302 	and.w	r3, r3, #2
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d069      	beq.n	800c572 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c49e:	4b50      	ldr	r3, [pc, #320]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f003 030c 	and.w	r3, r3, #12
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00b      	beq.n	800c4c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4aa:	4b4d      	ldr	r3, [pc, #308]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f003 030c 	and.w	r3, r3, #12
 800c4b2:	2b08      	cmp	r3, #8
 800c4b4:	d11c      	bne.n	800c4f0 <HAL_RCC_OscConfig+0x190>
 800c4b6:	4b4a      	ldr	r3, [pc, #296]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d116      	bne.n	800c4f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4c2:	4b47      	ldr	r3, [pc, #284]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <HAL_RCC_OscConfig+0x17a>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d001      	beq.n	800c4da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e1df      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4da:	4b41      	ldr	r3, [pc, #260]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	493d      	ldr	r1, [pc, #244]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4ee:	e040      	b.n	800c572 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d023      	beq.n	800c540 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4f8:	4b39      	ldr	r3, [pc, #228]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a38      	ldr	r2, [pc, #224]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c4fe:	f043 0301 	orr.w	r3, r3, #1
 800c502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c504:	f7ff f8c4 	bl	800b690 <HAL_GetTick>
 800c508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c50a:	e008      	b.n	800c51e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c50c:	f7ff f8c0 	bl	800b690 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	2b02      	cmp	r3, #2
 800c518:	d901      	bls.n	800c51e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e1bd      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c51e:	4b30      	ldr	r3, [pc, #192]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0f0      	beq.n	800c50c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c52a:	4b2d      	ldr	r3, [pc, #180]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	00db      	lsls	r3, r3, #3
 800c538:	4929      	ldr	r1, [pc, #164]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c53a:	4313      	orrs	r3, r2
 800c53c:	600b      	str	r3, [r1, #0]
 800c53e:	e018      	b.n	800c572 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c540:	4b27      	ldr	r3, [pc, #156]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a26      	ldr	r2, [pc, #152]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c546:	f023 0301 	bic.w	r3, r3, #1
 800c54a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c54c:	f7ff f8a0 	bl	800b690 <HAL_GetTick>
 800c550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c552:	e008      	b.n	800c566 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c554:	f7ff f89c 	bl	800b690 <HAL_GetTick>
 800c558:	4602      	mov	r2, r0
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d901      	bls.n	800c566 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e199      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c566:	4b1e      	ldr	r3, [pc, #120]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1f0      	bne.n	800c554 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 0308 	and.w	r3, r3, #8
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d038      	beq.n	800c5f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d019      	beq.n	800c5ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c586:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c58a:	4a15      	ldr	r2, [pc, #84]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c58c:	f043 0301 	orr.w	r3, r3, #1
 800c590:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c592:	f7ff f87d 	bl	800b690 <HAL_GetTick>
 800c596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c598:	e008      	b.n	800c5ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c59a:	f7ff f879 	bl	800b690 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d901      	bls.n	800c5ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e176      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c5ac:	4b0c      	ldr	r3, [pc, #48]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c5ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5b0:	f003 0302 	and.w	r3, r3, #2
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d0f0      	beq.n	800c59a <HAL_RCC_OscConfig+0x23a>
 800c5b8:	e01a      	b.n	800c5f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5ba:	4b09      	ldr	r3, [pc, #36]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5be:	4a08      	ldr	r2, [pc, #32]	; (800c5e0 <HAL_RCC_OscConfig+0x280>)
 800c5c0:	f023 0301 	bic.w	r3, r3, #1
 800c5c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5c6:	f7ff f863 	bl	800b690 <HAL_GetTick>
 800c5ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5cc:	e00a      	b.n	800c5e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5ce:	f7ff f85f 	bl	800b690 <HAL_GetTick>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d903      	bls.n	800c5e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e15c      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
 800c5e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5e4:	4b91      	ldr	r3, [pc, #580]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e8:	f003 0302 	and.w	r3, r3, #2
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1ee      	bne.n	800c5ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 80a4 	beq.w	800c746 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5fe:	4b8b      	ldr	r3, [pc, #556]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10d      	bne.n	800c626 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c60a:	4b88      	ldr	r3, [pc, #544]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	4a87      	ldr	r2, [pc, #540]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c614:	6413      	str	r3, [r2, #64]	; 0x40
 800c616:	4b85      	ldr	r3, [pc, #532]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c61e:	60bb      	str	r3, [r7, #8]
 800c620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c622:	2301      	movs	r3, #1
 800c624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c626:	4b82      	ldr	r3, [pc, #520]	; (800c830 <HAL_RCC_OscConfig+0x4d0>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d118      	bne.n	800c664 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c632:	4b7f      	ldr	r3, [pc, #508]	; (800c830 <HAL_RCC_OscConfig+0x4d0>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a7e      	ldr	r2, [pc, #504]	; (800c830 <HAL_RCC_OscConfig+0x4d0>)
 800c638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c63c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c63e:	f7ff f827 	bl	800b690 <HAL_GetTick>
 800c642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c644:	e008      	b.n	800c658 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c646:	f7ff f823 	bl	800b690 <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	2b64      	cmp	r3, #100	; 0x64
 800c652:	d901      	bls.n	800c658 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e120      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c658:	4b75      	ldr	r3, [pc, #468]	; (800c830 <HAL_RCC_OscConfig+0x4d0>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c660:	2b00      	cmp	r3, #0
 800c662:	d0f0      	beq.n	800c646 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d106      	bne.n	800c67a <HAL_RCC_OscConfig+0x31a>
 800c66c:	4b6f      	ldr	r3, [pc, #444]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c670:	4a6e      	ldr	r2, [pc, #440]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c672:	f043 0301 	orr.w	r3, r3, #1
 800c676:	6713      	str	r3, [r2, #112]	; 0x70
 800c678:	e02d      	b.n	800c6d6 <HAL_RCC_OscConfig+0x376>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10c      	bne.n	800c69c <HAL_RCC_OscConfig+0x33c>
 800c682:	4b6a      	ldr	r3, [pc, #424]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c686:	4a69      	ldr	r2, [pc, #420]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c688:	f023 0301 	bic.w	r3, r3, #1
 800c68c:	6713      	str	r3, [r2, #112]	; 0x70
 800c68e:	4b67      	ldr	r3, [pc, #412]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c692:	4a66      	ldr	r2, [pc, #408]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c694:	f023 0304 	bic.w	r3, r3, #4
 800c698:	6713      	str	r3, [r2, #112]	; 0x70
 800c69a:	e01c      	b.n	800c6d6 <HAL_RCC_OscConfig+0x376>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	2b05      	cmp	r3, #5
 800c6a2:	d10c      	bne.n	800c6be <HAL_RCC_OscConfig+0x35e>
 800c6a4:	4b61      	ldr	r3, [pc, #388]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a8:	4a60      	ldr	r2, [pc, #384]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6aa:	f043 0304 	orr.w	r3, r3, #4
 800c6ae:	6713      	str	r3, [r2, #112]	; 0x70
 800c6b0:	4b5e      	ldr	r3, [pc, #376]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b4:	4a5d      	ldr	r2, [pc, #372]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6b6:	f043 0301 	orr.w	r3, r3, #1
 800c6ba:	6713      	str	r3, [r2, #112]	; 0x70
 800c6bc:	e00b      	b.n	800c6d6 <HAL_RCC_OscConfig+0x376>
 800c6be:	4b5b      	ldr	r3, [pc, #364]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c2:	4a5a      	ldr	r2, [pc, #360]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6c4:	f023 0301 	bic.w	r3, r3, #1
 800c6c8:	6713      	str	r3, [r2, #112]	; 0x70
 800c6ca:	4b58      	ldr	r3, [pc, #352]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ce:	4a57      	ldr	r2, [pc, #348]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6d0:	f023 0304 	bic.w	r3, r3, #4
 800c6d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d015      	beq.n	800c70a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6de:	f7fe ffd7 	bl	800b690 <HAL_GetTick>
 800c6e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6e4:	e00a      	b.n	800c6fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6e6:	f7fe ffd3 	bl	800b690 <HAL_GetTick>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d901      	bls.n	800c6fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e0ce      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6fc:	4b4b      	ldr	r3, [pc, #300]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c700:	f003 0302 	and.w	r3, r3, #2
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0ee      	beq.n	800c6e6 <HAL_RCC_OscConfig+0x386>
 800c708:	e014      	b.n	800c734 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c70a:	f7fe ffc1 	bl	800b690 <HAL_GetTick>
 800c70e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c710:	e00a      	b.n	800c728 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c712:	f7fe ffbd 	bl	800b690 <HAL_GetTick>
 800c716:	4602      	mov	r2, r0
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c720:	4293      	cmp	r3, r2
 800c722:	d901      	bls.n	800c728 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c724:	2303      	movs	r3, #3
 800c726:	e0b8      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c728:	4b40      	ldr	r3, [pc, #256]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c72c:	f003 0302 	and.w	r3, r3, #2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1ee      	bne.n	800c712 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c734:	7dfb      	ldrb	r3, [r7, #23]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d105      	bne.n	800c746 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c73a:	4b3c      	ldr	r3, [pc, #240]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73e:	4a3b      	ldr	r2, [pc, #236]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c744:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 80a4 	beq.w	800c898 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c750:	4b36      	ldr	r3, [pc, #216]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f003 030c 	and.w	r3, r3, #12
 800c758:	2b08      	cmp	r3, #8
 800c75a:	d06b      	beq.n	800c834 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	2b02      	cmp	r3, #2
 800c762:	d149      	bne.n	800c7f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c764:	4b31      	ldr	r3, [pc, #196]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a30      	ldr	r2, [pc, #192]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c76a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c76e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c770:	f7fe ff8e 	bl	800b690 <HAL_GetTick>
 800c774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c776:	e008      	b.n	800c78a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c778:	f7fe ff8a 	bl	800b690 <HAL_GetTick>
 800c77c:	4602      	mov	r2, r0
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	2b02      	cmp	r3, #2
 800c784:	d901      	bls.n	800c78a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e087      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c78a:	4b28      	ldr	r3, [pc, #160]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1f0      	bne.n	800c778 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69da      	ldr	r2, [r3, #28]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a4:	019b      	lsls	r3, r3, #6
 800c7a6:	431a      	orrs	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ac:	085b      	lsrs	r3, r3, #1
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	041b      	lsls	r3, r3, #16
 800c7b2:	431a      	orrs	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	061b      	lsls	r3, r3, #24
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	4a1b      	ldr	r2, [pc, #108]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c7c4:	4b19      	ldr	r3, [pc, #100]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a18      	ldr	r2, [pc, #96]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7d0:	f7fe ff5e 	bl	800b690 <HAL_GetTick>
 800c7d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7d6:	e008      	b.n	800c7ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7d8:	f7fe ff5a 	bl	800b690 <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d901      	bls.n	800c7ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	e057      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7ea:	4b10      	ldr	r3, [pc, #64]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d0f0      	beq.n	800c7d8 <HAL_RCC_OscConfig+0x478>
 800c7f6:	e04f      	b.n	800c898 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7f8:	4b0c      	ldr	r3, [pc, #48]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a0b      	ldr	r2, [pc, #44]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c7fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c804:	f7fe ff44 	bl	800b690 <HAL_GetTick>
 800c808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c80a:	e008      	b.n	800c81e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c80c:	f7fe ff40 	bl	800b690 <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b02      	cmp	r3, #2
 800c818:	d901      	bls.n	800c81e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e03d      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c81e:	4b03      	ldr	r3, [pc, #12]	; (800c82c <HAL_RCC_OscConfig+0x4cc>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1f0      	bne.n	800c80c <HAL_RCC_OscConfig+0x4ac>
 800c82a:	e035      	b.n	800c898 <HAL_RCC_OscConfig+0x538>
 800c82c:	40023800 	.word	0x40023800
 800c830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c834:	4b1b      	ldr	r3, [pc, #108]	; (800c8a4 <HAL_RCC_OscConfig+0x544>)
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d028      	beq.n	800c894 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d121      	bne.n	800c894 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d11a      	bne.n	800c894 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c864:	4013      	ands	r3, r2
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c86a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d111      	bne.n	800c894 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87a:	085b      	lsrs	r3, r3, #1
 800c87c:	3b01      	subs	r3, #1
 800c87e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c880:	429a      	cmp	r2, r3
 800c882:	d107      	bne.n	800c894 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c890:	429a      	cmp	r2, r3
 800c892:	d001      	beq.n	800c898 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	e000      	b.n	800c89a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	40023800 	.word	0x40023800

0800c8a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e0d0      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8c0:	4b6a      	ldr	r3, [pc, #424]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 030f 	and.w	r3, r3, #15
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d910      	bls.n	800c8f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8ce:	4b67      	ldr	r3, [pc, #412]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f023 020f 	bic.w	r2, r3, #15
 800c8d6:	4965      	ldr	r1, [pc, #404]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8de:	4b63      	ldr	r3, [pc, #396]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 030f 	and.w	r3, r3, #15
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d001      	beq.n	800c8f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e0b8      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0302 	and.w	r3, r3, #2
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d020      	beq.n	800c93e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 0304 	and.w	r3, r3, #4
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c908:	4b59      	ldr	r3, [pc, #356]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	4a58      	ldr	r2, [pc, #352]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c90e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c912:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 0308 	and.w	r3, r3, #8
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d005      	beq.n	800c92c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c920:	4b53      	ldr	r3, [pc, #332]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	4a52      	ldr	r2, [pc, #328]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c92a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c92c:	4b50      	ldr	r3, [pc, #320]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	494d      	ldr	r1, [pc, #308]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	2b00      	cmp	r3, #0
 800c948:	d040      	beq.n	800c9cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d107      	bne.n	800c962 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c952:	4b47      	ldr	r3, [pc, #284]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d115      	bne.n	800c98a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e07f      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d107      	bne.n	800c97a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c96a:	4b41      	ldr	r3, [pc, #260]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c972:	2b00      	cmp	r3, #0
 800c974:	d109      	bne.n	800c98a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e073      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c97a:	4b3d      	ldr	r3, [pc, #244]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0302 	and.w	r3, r3, #2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e06b      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c98a:	4b39      	ldr	r3, [pc, #228]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	f023 0203 	bic.w	r2, r3, #3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	4936      	ldr	r1, [pc, #216]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c998:	4313      	orrs	r3, r2
 800c99a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c99c:	f7fe fe78 	bl	800b690 <HAL_GetTick>
 800c9a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9a2:	e00a      	b.n	800c9ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9a4:	f7fe fe74 	bl	800b690 <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d901      	bls.n	800c9ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e053      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9ba:	4b2d      	ldr	r3, [pc, #180]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f003 020c 	and.w	r2, r3, #12
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d1eb      	bne.n	800c9a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c9cc:	4b27      	ldr	r3, [pc, #156]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 030f 	and.w	r3, r3, #15
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d210      	bcs.n	800c9fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9da:	4b24      	ldr	r3, [pc, #144]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f023 020f 	bic.w	r2, r3, #15
 800c9e2:	4922      	ldr	r1, [pc, #136]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9ea:	4b20      	ldr	r3, [pc, #128]	; (800ca6c <HAL_RCC_ClockConfig+0x1c4>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 030f 	and.w	r3, r3, #15
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d001      	beq.n	800c9fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e032      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 0304 	and.w	r3, r3, #4
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d008      	beq.n	800ca1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca08:	4b19      	ldr	r3, [pc, #100]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	4916      	ldr	r1, [pc, #88]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 0308 	and.w	r3, r3, #8
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ca26:	4b12      	ldr	r3, [pc, #72]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	00db      	lsls	r3, r3, #3
 800ca34:	490e      	ldr	r1, [pc, #56]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca3a:	f000 f821 	bl	800ca80 <HAL_RCC_GetSysClockFreq>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	4b0b      	ldr	r3, [pc, #44]	; (800ca70 <HAL_RCC_ClockConfig+0x1c8>)
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	091b      	lsrs	r3, r3, #4
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	490a      	ldr	r1, [pc, #40]	; (800ca74 <HAL_RCC_ClockConfig+0x1cc>)
 800ca4c:	5ccb      	ldrb	r3, [r1, r3]
 800ca4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca52:	4a09      	ldr	r2, [pc, #36]	; (800ca78 <HAL_RCC_ClockConfig+0x1d0>)
 800ca54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ca56:	4b09      	ldr	r3, [pc, #36]	; (800ca7c <HAL_RCC_ClockConfig+0x1d4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fc60 	bl	800b320 <HAL_InitTick>

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	40023c00 	.word	0x40023c00
 800ca70:	40023800 	.word	0x40023800
 800ca74:	080144b0 	.word	0x080144b0
 800ca78:	20000250 	.word	0x20000250
 800ca7c:	20000254 	.word	0x20000254

0800ca80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca84:	b094      	sub	sp, #80	; 0x50
 800ca86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca90:	2300      	movs	r3, #0
 800ca92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca98:	4b79      	ldr	r3, [pc, #484]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x200>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f003 030c 	and.w	r3, r3, #12
 800caa0:	2b08      	cmp	r3, #8
 800caa2:	d00d      	beq.n	800cac0 <HAL_RCC_GetSysClockFreq+0x40>
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	f200 80e1 	bhi.w	800cc6c <HAL_RCC_GetSysClockFreq+0x1ec>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <HAL_RCC_GetSysClockFreq+0x34>
 800caae:	2b04      	cmp	r3, #4
 800cab0:	d003      	beq.n	800caba <HAL_RCC_GetSysClockFreq+0x3a>
 800cab2:	e0db      	b.n	800cc6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cab4:	4b73      	ldr	r3, [pc, #460]	; (800cc84 <HAL_RCC_GetSysClockFreq+0x204>)
 800cab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cab8:	e0db      	b.n	800cc72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800caba:	4b73      	ldr	r3, [pc, #460]	; (800cc88 <HAL_RCC_GetSysClockFreq+0x208>)
 800cabc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cabe:	e0d8      	b.n	800cc72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cac0:	4b6f      	ldr	r3, [pc, #444]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x200>)
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800caca:	4b6d      	ldr	r3, [pc, #436]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x200>)
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d063      	beq.n	800cb9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cad6:	4b6a      	ldr	r3, [pc, #424]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x200>)
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	099b      	lsrs	r3, r3, #6
 800cadc:	2200      	movs	r2, #0
 800cade:	63bb      	str	r3, [r7, #56]	; 0x38
 800cae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae8:	633b      	str	r3, [r7, #48]	; 0x30
 800caea:	2300      	movs	r3, #0
 800caec:	637b      	str	r3, [r7, #52]	; 0x34
 800caee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800caf2:	4622      	mov	r2, r4
 800caf4:	462b      	mov	r3, r5
 800caf6:	f04f 0000 	mov.w	r0, #0
 800cafa:	f04f 0100 	mov.w	r1, #0
 800cafe:	0159      	lsls	r1, r3, #5
 800cb00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cb04:	0150      	lsls	r0, r2, #5
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	1a51      	subs	r1, r2, r1
 800cb0e:	6139      	str	r1, [r7, #16]
 800cb10:	4629      	mov	r1, r5
 800cb12:	eb63 0301 	sbc.w	r3, r3, r1
 800cb16:	617b      	str	r3, [r7, #20]
 800cb18:	f04f 0200 	mov.w	r2, #0
 800cb1c:	f04f 0300 	mov.w	r3, #0
 800cb20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb24:	4659      	mov	r1, fp
 800cb26:	018b      	lsls	r3, r1, #6
 800cb28:	4651      	mov	r1, sl
 800cb2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cb2e:	4651      	mov	r1, sl
 800cb30:	018a      	lsls	r2, r1, #6
 800cb32:	4651      	mov	r1, sl
 800cb34:	ebb2 0801 	subs.w	r8, r2, r1
 800cb38:	4659      	mov	r1, fp
 800cb3a:	eb63 0901 	sbc.w	r9, r3, r1
 800cb3e:	f04f 0200 	mov.w	r2, #0
 800cb42:	f04f 0300 	mov.w	r3, #0
 800cb46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb52:	4690      	mov	r8, r2
 800cb54:	4699      	mov	r9, r3
 800cb56:	4623      	mov	r3, r4
 800cb58:	eb18 0303 	adds.w	r3, r8, r3
 800cb5c:	60bb      	str	r3, [r7, #8]
 800cb5e:	462b      	mov	r3, r5
 800cb60:	eb49 0303 	adc.w	r3, r9, r3
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	f04f 0300 	mov.w	r3, #0
 800cb6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cb72:	4629      	mov	r1, r5
 800cb74:	024b      	lsls	r3, r1, #9
 800cb76:	4621      	mov	r1, r4
 800cb78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	024a      	lsls	r2, r1, #9
 800cb80:	4610      	mov	r0, r2
 800cb82:	4619      	mov	r1, r3
 800cb84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb86:	2200      	movs	r2, #0
 800cb88:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cb90:	f7f4 f824 	bl	8000bdc <__aeabi_uldivmod>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4613      	mov	r3, r2
 800cb9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb9c:	e058      	b.n	800cc50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb9e:	4b38      	ldr	r3, [pc, #224]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x200>)
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	099b      	lsrs	r3, r3, #6
 800cba4:	2200      	movs	r2, #0
 800cba6:	4618      	mov	r0, r3
 800cba8:	4611      	mov	r1, r2
 800cbaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cbae:	623b      	str	r3, [r7, #32]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cbb8:	4642      	mov	r2, r8
 800cbba:	464b      	mov	r3, r9
 800cbbc:	f04f 0000 	mov.w	r0, #0
 800cbc0:	f04f 0100 	mov.w	r1, #0
 800cbc4:	0159      	lsls	r1, r3, #5
 800cbc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cbca:	0150      	lsls	r0, r2, #5
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4641      	mov	r1, r8
 800cbd2:	ebb2 0a01 	subs.w	sl, r2, r1
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	eb63 0b01 	sbc.w	fp, r3, r1
 800cbdc:	f04f 0200 	mov.w	r2, #0
 800cbe0:	f04f 0300 	mov.w	r3, #0
 800cbe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cbe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cbec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cbf0:	ebb2 040a 	subs.w	r4, r2, sl
 800cbf4:	eb63 050b 	sbc.w	r5, r3, fp
 800cbf8:	f04f 0200 	mov.w	r2, #0
 800cbfc:	f04f 0300 	mov.w	r3, #0
 800cc00:	00eb      	lsls	r3, r5, #3
 800cc02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc06:	00e2      	lsls	r2, r4, #3
 800cc08:	4614      	mov	r4, r2
 800cc0a:	461d      	mov	r5, r3
 800cc0c:	4643      	mov	r3, r8
 800cc0e:	18e3      	adds	r3, r4, r3
 800cc10:	603b      	str	r3, [r7, #0]
 800cc12:	464b      	mov	r3, r9
 800cc14:	eb45 0303 	adc.w	r3, r5, r3
 800cc18:	607b      	str	r3, [r7, #4]
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	f04f 0300 	mov.w	r3, #0
 800cc22:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cc26:	4629      	mov	r1, r5
 800cc28:	028b      	lsls	r3, r1, #10
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cc30:	4621      	mov	r1, r4
 800cc32:	028a      	lsls	r2, r1, #10
 800cc34:	4610      	mov	r0, r2
 800cc36:	4619      	mov	r1, r3
 800cc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	61bb      	str	r3, [r7, #24]
 800cc3e:	61fa      	str	r2, [r7, #28]
 800cc40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc44:	f7f3 ffca 	bl	8000bdc <__aeabi_uldivmod>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cc50:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <HAL_RCC_GetSysClockFreq+0x200>)
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	0c1b      	lsrs	r3, r3, #16
 800cc56:	f003 0303 	and.w	r3, r3, #3
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800cc60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc64:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cc6a:	e002      	b.n	800cc72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc6c:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <HAL_RCC_GetSysClockFreq+0x204>)
 800cc6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cc70:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3750      	adds	r7, #80	; 0x50
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc7e:	bf00      	nop
 800cc80:	40023800 	.word	0x40023800
 800cc84:	00f42400 	.word	0x00f42400
 800cc88:	007a1200 	.word	0x007a1200

0800cc8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc90:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc92:	681b      	ldr	r3, [r3, #0]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	20000250 	.word	0x20000250

0800cca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cca8:	f7ff fff0 	bl	800cc8c <HAL_RCC_GetHCLKFreq>
 800ccac:	4602      	mov	r2, r0
 800ccae:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	0a9b      	lsrs	r3, r3, #10
 800ccb4:	f003 0307 	and.w	r3, r3, #7
 800ccb8:	4903      	ldr	r1, [pc, #12]	; (800ccc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccba:	5ccb      	ldrb	r3, [r1, r3]
 800ccbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	40023800 	.word	0x40023800
 800ccc8:	080144c0 	.word	0x080144c0

0800cccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ccd0:	f7ff ffdc 	bl	800cc8c <HAL_RCC_GetHCLKFreq>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	4b05      	ldr	r3, [pc, #20]	; (800ccec <HAL_RCC_GetPCLK2Freq+0x20>)
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	0b5b      	lsrs	r3, r3, #13
 800ccdc:	f003 0307 	and.w	r3, r3, #7
 800cce0:	4903      	ldr	r1, [pc, #12]	; (800ccf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cce2:	5ccb      	ldrb	r3, [r1, r3]
 800cce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	40023800 	.word	0x40023800
 800ccf0:	080144c0 	.word	0x080144c0

0800ccf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	220f      	movs	r2, #15
 800cd02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cd04:	4b12      	ldr	r3, [pc, #72]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	f003 0203 	and.w	r2, r3, #3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cd10:	4b0f      	ldr	r3, [pc, #60]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cd1c:	4b0c      	ldr	r3, [pc, #48]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd28:	4b09      	ldr	r3, [pc, #36]	; (800cd50 <HAL_RCC_GetClockConfig+0x5c>)
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	08db      	lsrs	r3, r3, #3
 800cd2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd36:	4b07      	ldr	r3, [pc, #28]	; (800cd54 <HAL_RCC_GetClockConfig+0x60>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 020f 	and.w	r2, r3, #15
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	bf00      	nop
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	40023800 	.word	0x40023800
 800cd54:	40023c00 	.word	0x40023c00

0800cd58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b088      	sub	sp, #32
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d012      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cd80:	4b69      	ldr	r3, [pc, #420]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	4a68      	ldr	r2, [pc, #416]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cd8a:	6093      	str	r3, [r2, #8]
 800cd8c:	4b66      	ldr	r3, [pc, #408]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd8e:	689a      	ldr	r2, [r3, #8]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	4964      	ldr	r1, [pc, #400]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cd96:	4313      	orrs	r3, r2
 800cd98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cda2:	2301      	movs	r3, #1
 800cda4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d017      	beq.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cdb2:	4b5d      	ldr	r3, [pc, #372]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc0:	4959      	ldr	r1, [pc, #356]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdd0:	d101      	bne.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d101      	bne.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cdde:	2301      	movs	r3, #1
 800cde0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d017      	beq.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cdee:	4b4e      	ldr	r3, [pc, #312]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfc:	494a      	ldr	r1, [pc, #296]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce0c:	d101      	bne.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 0320 	and.w	r3, r3, #32
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 808b 	beq.w	800cf52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce3c:	4b3a      	ldr	r3, [pc, #232]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce40:	4a39      	ldr	r2, [pc, #228]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce46:	6413      	str	r3, [r2, #64]	; 0x40
 800ce48:	4b37      	ldr	r3, [pc, #220]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce50:	60bb      	str	r3, [r7, #8]
 800ce52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce54:	4b35      	ldr	r3, [pc, #212]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a34      	ldr	r2, [pc, #208]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce60:	f7fe fc16 	bl	800b690 <HAL_GetTick>
 800ce64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce66:	e008      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce68:	f7fe fc12 	bl	800b690 <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	2b64      	cmp	r3, #100	; 0x64
 800ce74:	d901      	bls.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ce76:	2303      	movs	r3, #3
 800ce78:	e357      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce7a:	4b2c      	ldr	r3, [pc, #176]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0f0      	beq.n	800ce68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ce86:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d035      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce9e:	693a      	ldr	r2, [r7, #16]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d02e      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cea4:	4b20      	ldr	r3, [pc, #128]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ceae:	4b1e      	ldr	r3, [pc, #120]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb2:	4a1d      	ldr	r2, [pc, #116]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ceba:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebe:	4a1a      	ldr	r2, [pc, #104]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cec4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cec6:	4a18      	ldr	r2, [pc, #96]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cecc:	4b16      	ldr	r3, [pc, #88]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced0:	f003 0301 	and.w	r3, r3, #1
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d114      	bne.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ced8:	f7fe fbda 	bl	800b690 <HAL_GetTick>
 800cedc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cede:	e00a      	b.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cee0:	f7fe fbd6 	bl	800b690 <HAL_GetTick>
 800cee4:	4602      	mov	r2, r0
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d901      	bls.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cef2:	2303      	movs	r3, #3
 800cef4:	e319      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cef6:	4b0c      	ldr	r3, [pc, #48]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefa:	f003 0302 	and.w	r3, r3, #2
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0ee      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf0e:	d111      	bne.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cf1c:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cf1e:	400b      	ands	r3, r1
 800cf20:	4901      	ldr	r1, [pc, #4]	; (800cf28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf22:	4313      	orrs	r3, r2
 800cf24:	608b      	str	r3, [r1, #8]
 800cf26:	e00b      	b.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cf28:	40023800 	.word	0x40023800
 800cf2c:	40007000 	.word	0x40007000
 800cf30:	0ffffcff 	.word	0x0ffffcff
 800cf34:	4baa      	ldr	r3, [pc, #680]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	4aa9      	ldr	r2, [pc, #676]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cf3e:	6093      	str	r3, [r2, #8]
 800cf40:	4ba7      	ldr	r3, [pc, #668]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf4c:	49a4      	ldr	r1, [pc, #656]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 0310 	and.w	r3, r3, #16
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d010      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf5e:	4ba0      	ldr	r3, [pc, #640]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf64:	4a9e      	ldr	r2, [pc, #632]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cf6e:	4b9c      	ldr	r3, [pc, #624]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf78:	4999      	ldr	r1, [pc, #612]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf8c:	4b94      	ldr	r3, [pc, #592]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf9a:	4991      	ldr	r1, [pc, #580]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00a      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cfae:	4b8c      	ldr	r3, [pc, #560]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfbc:	4988      	ldr	r1, [pc, #544]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00a      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cfd0:	4b83      	ldr	r3, [pc, #524]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfde:	4980      	ldr	r1, [pc, #512]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00a      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cff2:	4b7b      	ldr	r3, [pc, #492]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d000:	4977      	ldr	r1, [pc, #476]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d002:	4313      	orrs	r3, r2
 800d004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00a      	beq.n	800d02a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d014:	4b72      	ldr	r3, [pc, #456]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d01a:	f023 0203 	bic.w	r2, r3, #3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d022:	496f      	ldr	r1, [pc, #444]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d024:	4313      	orrs	r3, r2
 800d026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00a      	beq.n	800d04c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d036:	4b6a      	ldr	r3, [pc, #424]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d03c:	f023 020c 	bic.w	r2, r3, #12
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d044:	4966      	ldr	r1, [pc, #408]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d046:	4313      	orrs	r3, r2
 800d048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00a      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d058:	4b61      	ldr	r3, [pc, #388]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d05e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d066:	495e      	ldr	r1, [pc, #376]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d068:	4313      	orrs	r3, r2
 800d06a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00a      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d07a:	4b59      	ldr	r3, [pc, #356]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d080:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d088:	4955      	ldr	r1, [pc, #340]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00a      	beq.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d09c:	4b50      	ldr	r3, [pc, #320]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0aa:	494d      	ldr	r1, [pc, #308]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00a      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d0be:	4b48      	ldr	r3, [pc, #288]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0cc:	4944      	ldr	r1, [pc, #272]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00a      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d0e0:	4b3f      	ldr	r3, [pc, #252]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0ee:	493c      	ldr	r1, [pc, #240]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00a      	beq.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d102:	4b37      	ldr	r3, [pc, #220]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d110:	4933      	ldr	r1, [pc, #204]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d112:	4313      	orrs	r3, r2
 800d114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00a      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d124:	4b2e      	ldr	r3, [pc, #184]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d12a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d132:	492b      	ldr	r1, [pc, #172]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d134:	4313      	orrs	r3, r2
 800d136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d011      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d146:	4b26      	ldr	r3, [pc, #152]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d14c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d154:	4922      	ldr	r1, [pc, #136]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d156:	4313      	orrs	r3, r2
 800d158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d164:	d101      	bne.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d166:	2301      	movs	r3, #1
 800d168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 0308 	and.w	r3, r3, #8
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d176:	2301      	movs	r3, #1
 800d178:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00a      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d186:	4b16      	ldr	r3, [pc, #88]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d18c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d194:	4912      	ldr	r1, [pc, #72]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d196:	4313      	orrs	r3, r2
 800d198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d1a8:	4b0d      	ldr	r3, [pc, #52]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1b8:	4909      	ldr	r1, [pc, #36]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d006      	beq.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f000 80d9 	beq.w	800d386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d1d4:	4b02      	ldr	r3, [pc, #8]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a01      	ldr	r2, [pc, #4]	; (800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800d1da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1de:	e001      	b.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d1e0:	40023800 	.word	0x40023800
 800d1e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1e6:	f7fe fa53 	bl	800b690 <HAL_GetTick>
 800d1ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d1ec:	e008      	b.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d1ee:	f7fe fa4f 	bl	800b690 <HAL_GetTick>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	2b64      	cmp	r3, #100	; 0x64
 800d1fa:	d901      	bls.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e194      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d200:	4b6c      	ldr	r3, [pc, #432]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1f0      	bne.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 0301 	and.w	r3, r3, #1
 800d214:	2b00      	cmp	r3, #0
 800d216:	d021      	beq.n	800d25c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d11d      	bne.n	800d25c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d220:	4b64      	ldr	r3, [pc, #400]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d226:	0c1b      	lsrs	r3, r3, #16
 800d228:	f003 0303 	and.w	r3, r3, #3
 800d22c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d22e:	4b61      	ldr	r3, [pc, #388]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d234:	0e1b      	lsrs	r3, r3, #24
 800d236:	f003 030f 	and.w	r3, r3, #15
 800d23a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	019a      	lsls	r2, r3, #6
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	041b      	lsls	r3, r3, #16
 800d246:	431a      	orrs	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	061b      	lsls	r3, r3, #24
 800d24c:	431a      	orrs	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	071b      	lsls	r3, r3, #28
 800d254:	4957      	ldr	r1, [pc, #348]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d256:	4313      	orrs	r3, r2
 800d258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d004      	beq.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d270:	d00a      	beq.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d02e      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d286:	d129      	bne.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d288:	4b4a      	ldr	r3, [pc, #296]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28e:	0c1b      	lsrs	r3, r3, #16
 800d290:	f003 0303 	and.w	r3, r3, #3
 800d294:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d296:	4b47      	ldr	r3, [pc, #284]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d29c:	0f1b      	lsrs	r3, r3, #28
 800d29e:	f003 0307 	and.w	r3, r3, #7
 800d2a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	019a      	lsls	r2, r3, #6
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	041b      	lsls	r3, r3, #16
 800d2ae:	431a      	orrs	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	061b      	lsls	r3, r3, #24
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	071b      	lsls	r3, r3, #28
 800d2bc:	493d      	ldr	r1, [pc, #244]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d2c4:	4b3b      	ldr	r3, [pc, #236]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2ca:	f023 021f 	bic.w	r2, r3, #31
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	4937      	ldr	r1, [pc, #220]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d01d      	beq.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2e8:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ee:	0e1b      	lsrs	r3, r3, #24
 800d2f0:	f003 030f 	and.w	r3, r3, #15
 800d2f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d2f6:	4b2f      	ldr	r3, [pc, #188]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2fc:	0f1b      	lsrs	r3, r3, #28
 800d2fe:	f003 0307 	and.w	r3, r3, #7
 800d302:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	019a      	lsls	r2, r3, #6
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	041b      	lsls	r3, r3, #16
 800d310:	431a      	orrs	r2, r3
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	061b      	lsls	r3, r3, #24
 800d316:	431a      	orrs	r2, r3
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	071b      	lsls	r3, r3, #28
 800d31c:	4925      	ldr	r1, [pc, #148]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d31e:	4313      	orrs	r3, r2
 800d320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d011      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	019a      	lsls	r2, r3, #6
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	041b      	lsls	r3, r3, #16
 800d33c:	431a      	orrs	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	061b      	lsls	r3, r3, #24
 800d344:	431a      	orrs	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	071b      	lsls	r3, r3, #28
 800d34c:	4919      	ldr	r1, [pc, #100]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d34e:	4313      	orrs	r3, r2
 800d350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d354:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a16      	ldr	r2, [pc, #88]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d35a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d35e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d360:	f7fe f996 	bl	800b690 <HAL_GetTick>
 800d364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d366:	e008      	b.n	800d37a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d368:	f7fe f992 	bl	800b690 <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	2b64      	cmp	r3, #100	; 0x64
 800d374:	d901      	bls.n	800d37a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e0d7      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d37a:	4b0e      	ldr	r3, [pc, #56]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0f0      	beq.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	f040 80cd 	bne.w	800d528 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a08      	ldr	r2, [pc, #32]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d39a:	f7fe f979 	bl	800b690 <HAL_GetTick>
 800d39e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3a0:	e00a      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d3a2:	f7fe f975 	bl	800b690 <HAL_GetTick>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	2b64      	cmp	r3, #100	; 0x64
 800d3ae:	d903      	bls.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	e0ba      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d3b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d3b8:	4b5e      	ldr	r3, [pc, #376]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3c4:	d0ed      	beq.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x682>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d009      	beq.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d02e      	beq.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d12a      	bne.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d3ee:	4b51      	ldr	r3, [pc, #324]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f4:	0c1b      	lsrs	r3, r3, #16
 800d3f6:	f003 0303 	and.w	r3, r3, #3
 800d3fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d3fc:	4b4d      	ldr	r3, [pc, #308]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d402:	0f1b      	lsrs	r3, r3, #28
 800d404:	f003 0307 	and.w	r3, r3, #7
 800d408:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	019a      	lsls	r2, r3, #6
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	041b      	lsls	r3, r3, #16
 800d414:	431a      	orrs	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	061b      	lsls	r3, r3, #24
 800d41c:	431a      	orrs	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	071b      	lsls	r3, r3, #28
 800d422:	4944      	ldr	r1, [pc, #272]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d424:	4313      	orrs	r3, r2
 800d426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d42a:	4b42      	ldr	r3, [pc, #264]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d438:	3b01      	subs	r3, #1
 800d43a:	021b      	lsls	r3, r3, #8
 800d43c:	493d      	ldr	r1, [pc, #244]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d022      	beq.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d458:	d11d      	bne.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d45a:	4b36      	ldr	r3, [pc, #216]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d460:	0e1b      	lsrs	r3, r3, #24
 800d462:	f003 030f 	and.w	r3, r3, #15
 800d466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d468:	4b32      	ldr	r3, [pc, #200]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d46e:	0f1b      	lsrs	r3, r3, #28
 800d470:	f003 0307 	and.w	r3, r3, #7
 800d474:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	019a      	lsls	r2, r3, #6
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a1b      	ldr	r3, [r3, #32]
 800d480:	041b      	lsls	r3, r3, #16
 800d482:	431a      	orrs	r2, r3
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	061b      	lsls	r3, r3, #24
 800d488:	431a      	orrs	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	071b      	lsls	r3, r3, #28
 800d48e:	4929      	ldr	r1, [pc, #164]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d490:	4313      	orrs	r3, r2
 800d492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f003 0308 	and.w	r3, r3, #8
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d028      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d4a2:	4b24      	ldr	r3, [pc, #144]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a8:	0e1b      	lsrs	r3, r3, #24
 800d4aa:	f003 030f 	and.w	r3, r3, #15
 800d4ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d4b0:	4b20      	ldr	r3, [pc, #128]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b6:	0c1b      	lsrs	r3, r3, #16
 800d4b8:	f003 0303 	and.w	r3, r3, #3
 800d4bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	695b      	ldr	r3, [r3, #20]
 800d4c2:	019a      	lsls	r2, r3, #6
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	041b      	lsls	r3, r3, #16
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	061b      	lsls	r3, r3, #24
 800d4ce:	431a      	orrs	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	69db      	ldr	r3, [r3, #28]
 800d4d4:	071b      	lsls	r3, r3, #28
 800d4d6:	4917      	ldr	r1, [pc, #92]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d4de:	4b15      	ldr	r3, [pc, #84]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ec:	4911      	ldr	r1, [pc, #68]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d4f4:	4b0f      	ldr	r3, [pc, #60]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a0e      	ldr	r2, [pc, #56]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d4fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d500:	f7fe f8c6 	bl	800b690 <HAL_GetTick>
 800d504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d506:	e008      	b.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d508:	f7fe f8c2 	bl	800b690 <HAL_GetTick>
 800d50c:	4602      	mov	r2, r0
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	1ad3      	subs	r3, r2, r3
 800d512:	2b64      	cmp	r3, #100	; 0x64
 800d514:	d901      	bls.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d516:	2303      	movs	r3, #3
 800d518:	e007      	b.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d51a:	4b06      	ldr	r3, [pc, #24]	; (800d534 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d526:	d1ef      	bne.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3720      	adds	r7, #32
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	40023800 	.word	0x40023800

0800d538 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e01c      	b.n	800d584 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	795b      	ldrb	r3, [r3, #5]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	2b00      	cmp	r3, #0
 800d552:	d105      	bne.n	800d560 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7fd fe4c 	bl	800b1f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2202      	movs	r2, #2
 800d564:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f042 0204 	orr.w	r2, r2, #4
 800d574:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d596:	2300      	movs	r3, #0
 800d598:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	791b      	ldrb	r3, [r3, #4]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d101      	bne.n	800d5a6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	e044      	b.n	800d630 <HAL_RNG_GenerateRandomNumber+0xa4>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	795b      	ldrb	r3, [r3, #5]
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d133      	bne.n	800d61e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2202      	movs	r2, #2
 800d5ba:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d5bc:	f7fe f868 	bl	800b690 <HAL_GetTick>
 800d5c0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d5c2:	e018      	b.n	800d5f6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d5c4:	f7fe f864 	bl	800b690 <HAL_GetTick>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	2b02      	cmp	r3, #2
 800d5d0:	d911      	bls.n	800d5f6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d00a      	beq.n	800d5f6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e01c      	b.n	800d630 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b01      	cmp	r3, #1
 800d602:	d1df      	bne.n	800d5c4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	689a      	ldr	r2, [r3, #8]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	715a      	strb	r2, [r3, #5]
 800d61c:	e004      	b.n	800d628 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2204      	movs	r2, #4
 800d622:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	711a      	strb	r2, [r3, #4]

  return status;
 800d62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d101      	bne.n	800d64a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e049      	b.n	800d6de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f841 	bl	800d6e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2202      	movs	r2, #2
 800d668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	3304      	adds	r3, #4
 800d674:	4619      	mov	r1, r3
 800d676:	4610      	mov	r0, r2
 800d678:	f000 fa00 	bl	800da7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2201      	movs	r2, #1
 800d688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b083      	sub	sp, #12
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d6ee:	bf00      	nop
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
	...

0800d6fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d001      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d710:	2301      	movs	r3, #1
 800d712:	e054      	b.n	800d7be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2202      	movs	r2, #2
 800d718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68da      	ldr	r2, [r3, #12]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f042 0201 	orr.w	r2, r2, #1
 800d72a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a26      	ldr	r2, [pc, #152]	; (800d7cc <HAL_TIM_Base_Start_IT+0xd0>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d022      	beq.n	800d77c <HAL_TIM_Base_Start_IT+0x80>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d73e:	d01d      	beq.n	800d77c <HAL_TIM_Base_Start_IT+0x80>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a22      	ldr	r2, [pc, #136]	; (800d7d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d018      	beq.n	800d77c <HAL_TIM_Base_Start_IT+0x80>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a21      	ldr	r2, [pc, #132]	; (800d7d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d013      	beq.n	800d77c <HAL_TIM_Base_Start_IT+0x80>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a1f      	ldr	r2, [pc, #124]	; (800d7d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d00e      	beq.n	800d77c <HAL_TIM_Base_Start_IT+0x80>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a1e      	ldr	r2, [pc, #120]	; (800d7dc <HAL_TIM_Base_Start_IT+0xe0>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d009      	beq.n	800d77c <HAL_TIM_Base_Start_IT+0x80>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a1c      	ldr	r2, [pc, #112]	; (800d7e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d004      	beq.n	800d77c <HAL_TIM_Base_Start_IT+0x80>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a1b      	ldr	r2, [pc, #108]	; (800d7e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d115      	bne.n	800d7a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	689a      	ldr	r2, [r3, #8]
 800d782:	4b19      	ldr	r3, [pc, #100]	; (800d7e8 <HAL_TIM_Base_Start_IT+0xec>)
 800d784:	4013      	ands	r3, r2
 800d786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2b06      	cmp	r3, #6
 800d78c:	d015      	beq.n	800d7ba <HAL_TIM_Base_Start_IT+0xbe>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d794:	d011      	beq.n	800d7ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f042 0201 	orr.w	r2, r2, #1
 800d7a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7a6:	e008      	b.n	800d7ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f042 0201 	orr.w	r2, r2, #1
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	e000      	b.n	800d7bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	40010000 	.word	0x40010000
 800d7d0:	40000400 	.word	0x40000400
 800d7d4:	40000800 	.word	0x40000800
 800d7d8:	40000c00 	.word	0x40000c00
 800d7dc:	40010400 	.word	0x40010400
 800d7e0:	40014000 	.word	0x40014000
 800d7e4:	40001800 	.word	0x40001800
 800d7e8:	00010007 	.word	0x00010007

0800d7ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	f003 0302 	and.w	r3, r3, #2
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d122      	bne.n	800d848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	f003 0302 	and.w	r3, r3, #2
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d11b      	bne.n	800d848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f06f 0202 	mvn.w	r2, #2
 800d818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	f003 0303 	and.w	r3, r3, #3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d003      	beq.n	800d836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f905 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d834:	e005      	b.n	800d842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f8f7 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f908 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	f003 0304 	and.w	r3, r3, #4
 800d852:	2b04      	cmp	r3, #4
 800d854:	d122      	bne.n	800d89c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b04      	cmp	r3, #4
 800d862:	d11b      	bne.n	800d89c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f06f 0204 	mvn.w	r2, #4
 800d86c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2202      	movs	r2, #2
 800d872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d003      	beq.n	800d88a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f8db 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d888:	e005      	b.n	800d896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f8cd 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f8de 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	f003 0308 	and.w	r3, r3, #8
 800d8a6:	2b08      	cmp	r3, #8
 800d8a8:	d122      	bne.n	800d8f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	f003 0308 	and.w	r3, r3, #8
 800d8b4:	2b08      	cmp	r3, #8
 800d8b6:	d11b      	bne.n	800d8f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f06f 0208 	mvn.w	r2, #8
 800d8c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	69db      	ldr	r3, [r3, #28]
 800d8ce:	f003 0303 	and.w	r3, r3, #3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 f8b1 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d8dc:	e005      	b.n	800d8ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f8a3 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f8b4 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	f003 0310 	and.w	r3, r3, #16
 800d8fa:	2b10      	cmp	r3, #16
 800d8fc:	d122      	bne.n	800d944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	f003 0310 	and.w	r3, r3, #16
 800d908:	2b10      	cmp	r3, #16
 800d90a:	d11b      	bne.n	800d944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f06f 0210 	mvn.w	r2, #16
 800d914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2208      	movs	r2, #8
 800d91a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	69db      	ldr	r3, [r3, #28]
 800d922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d926:	2b00      	cmp	r3, #0
 800d928:	d003      	beq.n	800d932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f887 	bl	800da3e <HAL_TIM_IC_CaptureCallback>
 800d930:	e005      	b.n	800d93e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f879 	bl	800da2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f88a 	bl	800da52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d10e      	bne.n	800d970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	f003 0301 	and.w	r3, r3, #1
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d107      	bne.n	800d970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f06f 0201 	mvn.w	r2, #1
 800d968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7f3 fca2 	bl	80012b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d97a:	2b80      	cmp	r3, #128	; 0x80
 800d97c:	d10e      	bne.n	800d99c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d988:	2b80      	cmp	r3, #128	; 0x80
 800d98a:	d107      	bne.n	800d99c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 f91a 	bl	800dbd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9aa:	d10e      	bne.n	800d9ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9b6:	2b80      	cmp	r3, #128	; 0x80
 800d9b8:	d107      	bne.n	800d9ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 f90d 	bl	800dbe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9d4:	2b40      	cmp	r3, #64	; 0x40
 800d9d6:	d10e      	bne.n	800d9f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e2:	2b40      	cmp	r3, #64	; 0x40
 800d9e4:	d107      	bne.n	800d9f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d9ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 f838 	bl	800da66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	f003 0320 	and.w	r3, r3, #32
 800da00:	2b20      	cmp	r3, #32
 800da02:	d10e      	bne.n	800da22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	f003 0320 	and.w	r3, r3, #32
 800da0e:	2b20      	cmp	r3, #32
 800da10:	d107      	bne.n	800da22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f06f 0220 	mvn.w	r2, #32
 800da1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f8cd 	bl	800dbbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da22:	bf00      	nop
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da2a:	b480      	push	{r7}
 800da2c:	b083      	sub	sp, #12
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da32:	bf00      	nop
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da3e:	b480      	push	{r7}
 800da40:	b083      	sub	sp, #12
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da46:	bf00      	nop
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da5a:	bf00      	nop
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da6e:	bf00      	nop
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
	...

0800da7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a40      	ldr	r2, [pc, #256]	; (800db90 <TIM_Base_SetConfig+0x114>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d013      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da9a:	d00f      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a3d      	ldr	r2, [pc, #244]	; (800db94 <TIM_Base_SetConfig+0x118>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d00b      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4a3c      	ldr	r2, [pc, #240]	; (800db98 <TIM_Base_SetConfig+0x11c>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d007      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4a3b      	ldr	r2, [pc, #236]	; (800db9c <TIM_Base_SetConfig+0x120>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d003      	beq.n	800dabc <TIM_Base_SetConfig+0x40>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a3a      	ldr	r2, [pc, #232]	; (800dba0 <TIM_Base_SetConfig+0x124>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d108      	bne.n	800dace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	4313      	orrs	r3, r2
 800dacc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a2f      	ldr	r2, [pc, #188]	; (800db90 <TIM_Base_SetConfig+0x114>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d02b      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dadc:	d027      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a2c      	ldr	r2, [pc, #176]	; (800db94 <TIM_Base_SetConfig+0x118>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d023      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a2b      	ldr	r2, [pc, #172]	; (800db98 <TIM_Base_SetConfig+0x11c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d01f      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a2a      	ldr	r2, [pc, #168]	; (800db9c <TIM_Base_SetConfig+0x120>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d01b      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a29      	ldr	r2, [pc, #164]	; (800dba0 <TIM_Base_SetConfig+0x124>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d017      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a28      	ldr	r2, [pc, #160]	; (800dba4 <TIM_Base_SetConfig+0x128>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d013      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a27      	ldr	r2, [pc, #156]	; (800dba8 <TIM_Base_SetConfig+0x12c>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d00f      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a26      	ldr	r2, [pc, #152]	; (800dbac <TIM_Base_SetConfig+0x130>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d00b      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a25      	ldr	r2, [pc, #148]	; (800dbb0 <TIM_Base_SetConfig+0x134>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d007      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a24      	ldr	r2, [pc, #144]	; (800dbb4 <TIM_Base_SetConfig+0x138>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d003      	beq.n	800db2e <TIM_Base_SetConfig+0xb2>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a23      	ldr	r2, [pc, #140]	; (800dbb8 <TIM_Base_SetConfig+0x13c>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d108      	bne.n	800db40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	4313      	orrs	r3, r2
 800db4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	689a      	ldr	r2, [r3, #8]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a0a      	ldr	r2, [pc, #40]	; (800db90 <TIM_Base_SetConfig+0x114>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d003      	beq.n	800db74 <TIM_Base_SetConfig+0xf8>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4a0c      	ldr	r2, [pc, #48]	; (800dba0 <TIM_Base_SetConfig+0x124>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d103      	bne.n	800db7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	691a      	ldr	r2, [r3, #16]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	615a      	str	r2, [r3, #20]
}
 800db82:	bf00      	nop
 800db84:	3714      	adds	r7, #20
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	40010000 	.word	0x40010000
 800db94:	40000400 	.word	0x40000400
 800db98:	40000800 	.word	0x40000800
 800db9c:	40000c00 	.word	0x40000c00
 800dba0:	40010400 	.word	0x40010400
 800dba4:	40014000 	.word	0x40014000
 800dba8:	40014400 	.word	0x40014400
 800dbac:	40014800 	.word	0x40014800
 800dbb0:	40001800 	.word	0x40001800
 800dbb4:	40001c00 	.word	0x40001c00
 800dbb8:	40002000 	.word	0x40002000

0800dbbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbd8:	bf00      	nop
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d101      	bne.n	800dc0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc06:	2301      	movs	r3, #1
 800dc08:	e040      	b.n	800dc8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d106      	bne.n	800dc20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7fd fb20 	bl	800b260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2224      	movs	r2, #36	; 0x24
 800dc24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f022 0201 	bic.w	r2, r2, #1
 800dc34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f8b0 	bl	800dd9c <UART_SetConfig>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d101      	bne.n	800dc46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	e022      	b.n	800dc8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fb08 	bl	800e264 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	689a      	ldr	r2, [r3, #8]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f042 0201 	orr.w	r2, r2, #1
 800dc82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fb8f 	bl	800e3a8 <UART_CheckIdleState>
 800dc8a:	4603      	mov	r3, r0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08a      	sub	sp, #40	; 0x28
 800dc98:	af02      	add	r7, sp, #8
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	603b      	str	r3, [r7, #0]
 800dca0:	4613      	mov	r3, r2
 800dca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dca8:	2b20      	cmp	r3, #32
 800dcaa:	d171      	bne.n	800dd90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d002      	beq.n	800dcb8 <HAL_UART_Transmit+0x24>
 800dcb2:	88fb      	ldrh	r3, [r7, #6]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e06a      	b.n	800dd92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2221      	movs	r2, #33	; 0x21
 800dcc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dcca:	f7fd fce1 	bl	800b690 <HAL_GetTick>
 800dcce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	88fa      	ldrh	r2, [r7, #6]
 800dcd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	88fa      	ldrh	r2, [r7, #6]
 800dcdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dce8:	d108      	bne.n	800dcfc <HAL_UART_Transmit+0x68>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d104      	bne.n	800dcfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	61bb      	str	r3, [r7, #24]
 800dcfa:	e003      	b.n	800dd04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dd00:	2300      	movs	r3, #0
 800dd02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dd04:	e02c      	b.n	800dd60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	2180      	movs	r1, #128	; 0x80
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f000 fb80 	bl	800e416 <UART_WaitOnFlagUntilTimeout>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800dd1c:	2303      	movs	r3, #3
 800dd1e:	e038      	b.n	800dd92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d10b      	bne.n	800dd3e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	881b      	ldrh	r3, [r3, #0]
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	3302      	adds	r3, #2
 800dd3a:	61bb      	str	r3, [r7, #24]
 800dd3c:	e007      	b.n	800dd4e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	781a      	ldrb	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	3b01      	subs	r3, #1
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d1cc      	bne.n	800dd06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	2200      	movs	r2, #0
 800dd74:	2140      	movs	r1, #64	; 0x40
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f000 fb4d 	bl	800e416 <UART_WaitOnFlagUntilTimeout>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800dd82:	2303      	movs	r3, #3
 800dd84:	e005      	b.n	800dd92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2220      	movs	r2, #32
 800dd8a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e000      	b.n	800dd92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800dd90:	2302      	movs	r3, #2
  }
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3720      	adds	r7, #32
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
	...

0800dd9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b088      	sub	sp, #32
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	689a      	ldr	r2, [r3, #8]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	431a      	orrs	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	431a      	orrs	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	69db      	ldr	r3, [r3, #28]
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	4ba6      	ldr	r3, [pc, #664]	; (800e060 <UART_SetConfig+0x2c4>)
 800ddc8:	4013      	ands	r3, r2
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	6812      	ldr	r2, [r2, #0]
 800ddce:	6979      	ldr	r1, [r7, #20]
 800ddd0:	430b      	orrs	r3, r1
 800ddd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68da      	ldr	r2, [r3, #12]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	430a      	orrs	r2, r1
 800dde8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	699b      	ldr	r3, [r3, #24]
 800ddee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a1b      	ldr	r3, [r3, #32]
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a94      	ldr	r2, [pc, #592]	; (800e064 <UART_SetConfig+0x2c8>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d120      	bne.n	800de5a <UART_SetConfig+0xbe>
 800de18:	4b93      	ldr	r3, [pc, #588]	; (800e068 <UART_SetConfig+0x2cc>)
 800de1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de1e:	f003 0303 	and.w	r3, r3, #3
 800de22:	2b03      	cmp	r3, #3
 800de24:	d816      	bhi.n	800de54 <UART_SetConfig+0xb8>
 800de26:	a201      	add	r2, pc, #4	; (adr r2, 800de2c <UART_SetConfig+0x90>)
 800de28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2c:	0800de3d 	.word	0x0800de3d
 800de30:	0800de49 	.word	0x0800de49
 800de34:	0800de43 	.word	0x0800de43
 800de38:	0800de4f 	.word	0x0800de4f
 800de3c:	2301      	movs	r3, #1
 800de3e:	77fb      	strb	r3, [r7, #31]
 800de40:	e150      	b.n	800e0e4 <UART_SetConfig+0x348>
 800de42:	2302      	movs	r3, #2
 800de44:	77fb      	strb	r3, [r7, #31]
 800de46:	e14d      	b.n	800e0e4 <UART_SetConfig+0x348>
 800de48:	2304      	movs	r3, #4
 800de4a:	77fb      	strb	r3, [r7, #31]
 800de4c:	e14a      	b.n	800e0e4 <UART_SetConfig+0x348>
 800de4e:	2308      	movs	r3, #8
 800de50:	77fb      	strb	r3, [r7, #31]
 800de52:	e147      	b.n	800e0e4 <UART_SetConfig+0x348>
 800de54:	2310      	movs	r3, #16
 800de56:	77fb      	strb	r3, [r7, #31]
 800de58:	e144      	b.n	800e0e4 <UART_SetConfig+0x348>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a83      	ldr	r2, [pc, #524]	; (800e06c <UART_SetConfig+0x2d0>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d132      	bne.n	800deca <UART_SetConfig+0x12e>
 800de64:	4b80      	ldr	r3, [pc, #512]	; (800e068 <UART_SetConfig+0x2cc>)
 800de66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de6a:	f003 030c 	and.w	r3, r3, #12
 800de6e:	2b0c      	cmp	r3, #12
 800de70:	d828      	bhi.n	800dec4 <UART_SetConfig+0x128>
 800de72:	a201      	add	r2, pc, #4	; (adr r2, 800de78 <UART_SetConfig+0xdc>)
 800de74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de78:	0800dead 	.word	0x0800dead
 800de7c:	0800dec5 	.word	0x0800dec5
 800de80:	0800dec5 	.word	0x0800dec5
 800de84:	0800dec5 	.word	0x0800dec5
 800de88:	0800deb9 	.word	0x0800deb9
 800de8c:	0800dec5 	.word	0x0800dec5
 800de90:	0800dec5 	.word	0x0800dec5
 800de94:	0800dec5 	.word	0x0800dec5
 800de98:	0800deb3 	.word	0x0800deb3
 800de9c:	0800dec5 	.word	0x0800dec5
 800dea0:	0800dec5 	.word	0x0800dec5
 800dea4:	0800dec5 	.word	0x0800dec5
 800dea8:	0800debf 	.word	0x0800debf
 800deac:	2300      	movs	r3, #0
 800deae:	77fb      	strb	r3, [r7, #31]
 800deb0:	e118      	b.n	800e0e4 <UART_SetConfig+0x348>
 800deb2:	2302      	movs	r3, #2
 800deb4:	77fb      	strb	r3, [r7, #31]
 800deb6:	e115      	b.n	800e0e4 <UART_SetConfig+0x348>
 800deb8:	2304      	movs	r3, #4
 800deba:	77fb      	strb	r3, [r7, #31]
 800debc:	e112      	b.n	800e0e4 <UART_SetConfig+0x348>
 800debe:	2308      	movs	r3, #8
 800dec0:	77fb      	strb	r3, [r7, #31]
 800dec2:	e10f      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dec4:	2310      	movs	r3, #16
 800dec6:	77fb      	strb	r3, [r7, #31]
 800dec8:	e10c      	b.n	800e0e4 <UART_SetConfig+0x348>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a68      	ldr	r2, [pc, #416]	; (800e070 <UART_SetConfig+0x2d4>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d120      	bne.n	800df16 <UART_SetConfig+0x17a>
 800ded4:	4b64      	ldr	r3, [pc, #400]	; (800e068 <UART_SetConfig+0x2cc>)
 800ded6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800deda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dede:	2b30      	cmp	r3, #48	; 0x30
 800dee0:	d013      	beq.n	800df0a <UART_SetConfig+0x16e>
 800dee2:	2b30      	cmp	r3, #48	; 0x30
 800dee4:	d814      	bhi.n	800df10 <UART_SetConfig+0x174>
 800dee6:	2b20      	cmp	r3, #32
 800dee8:	d009      	beq.n	800defe <UART_SetConfig+0x162>
 800deea:	2b20      	cmp	r3, #32
 800deec:	d810      	bhi.n	800df10 <UART_SetConfig+0x174>
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <UART_SetConfig+0x15c>
 800def2:	2b10      	cmp	r3, #16
 800def4:	d006      	beq.n	800df04 <UART_SetConfig+0x168>
 800def6:	e00b      	b.n	800df10 <UART_SetConfig+0x174>
 800def8:	2300      	movs	r3, #0
 800defa:	77fb      	strb	r3, [r7, #31]
 800defc:	e0f2      	b.n	800e0e4 <UART_SetConfig+0x348>
 800defe:	2302      	movs	r3, #2
 800df00:	77fb      	strb	r3, [r7, #31]
 800df02:	e0ef      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df04:	2304      	movs	r3, #4
 800df06:	77fb      	strb	r3, [r7, #31]
 800df08:	e0ec      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df0a:	2308      	movs	r3, #8
 800df0c:	77fb      	strb	r3, [r7, #31]
 800df0e:	e0e9      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df10:	2310      	movs	r3, #16
 800df12:	77fb      	strb	r3, [r7, #31]
 800df14:	e0e6      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a56      	ldr	r2, [pc, #344]	; (800e074 <UART_SetConfig+0x2d8>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d120      	bne.n	800df62 <UART_SetConfig+0x1c6>
 800df20:	4b51      	ldr	r3, [pc, #324]	; (800e068 <UART_SetConfig+0x2cc>)
 800df22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df2a:	2bc0      	cmp	r3, #192	; 0xc0
 800df2c:	d013      	beq.n	800df56 <UART_SetConfig+0x1ba>
 800df2e:	2bc0      	cmp	r3, #192	; 0xc0
 800df30:	d814      	bhi.n	800df5c <UART_SetConfig+0x1c0>
 800df32:	2b80      	cmp	r3, #128	; 0x80
 800df34:	d009      	beq.n	800df4a <UART_SetConfig+0x1ae>
 800df36:	2b80      	cmp	r3, #128	; 0x80
 800df38:	d810      	bhi.n	800df5c <UART_SetConfig+0x1c0>
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <UART_SetConfig+0x1a8>
 800df3e:	2b40      	cmp	r3, #64	; 0x40
 800df40:	d006      	beq.n	800df50 <UART_SetConfig+0x1b4>
 800df42:	e00b      	b.n	800df5c <UART_SetConfig+0x1c0>
 800df44:	2300      	movs	r3, #0
 800df46:	77fb      	strb	r3, [r7, #31]
 800df48:	e0cc      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df4a:	2302      	movs	r3, #2
 800df4c:	77fb      	strb	r3, [r7, #31]
 800df4e:	e0c9      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df50:	2304      	movs	r3, #4
 800df52:	77fb      	strb	r3, [r7, #31]
 800df54:	e0c6      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df56:	2308      	movs	r3, #8
 800df58:	77fb      	strb	r3, [r7, #31]
 800df5a:	e0c3      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df5c:	2310      	movs	r3, #16
 800df5e:	77fb      	strb	r3, [r7, #31]
 800df60:	e0c0      	b.n	800e0e4 <UART_SetConfig+0x348>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a44      	ldr	r2, [pc, #272]	; (800e078 <UART_SetConfig+0x2dc>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d125      	bne.n	800dfb8 <UART_SetConfig+0x21c>
 800df6c:	4b3e      	ldr	r3, [pc, #248]	; (800e068 <UART_SetConfig+0x2cc>)
 800df6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df7a:	d017      	beq.n	800dfac <UART_SetConfig+0x210>
 800df7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df80:	d817      	bhi.n	800dfb2 <UART_SetConfig+0x216>
 800df82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df86:	d00b      	beq.n	800dfa0 <UART_SetConfig+0x204>
 800df88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df8c:	d811      	bhi.n	800dfb2 <UART_SetConfig+0x216>
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d003      	beq.n	800df9a <UART_SetConfig+0x1fe>
 800df92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df96:	d006      	beq.n	800dfa6 <UART_SetConfig+0x20a>
 800df98:	e00b      	b.n	800dfb2 <UART_SetConfig+0x216>
 800df9a:	2300      	movs	r3, #0
 800df9c:	77fb      	strb	r3, [r7, #31]
 800df9e:	e0a1      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	77fb      	strb	r3, [r7, #31]
 800dfa4:	e09e      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dfa6:	2304      	movs	r3, #4
 800dfa8:	77fb      	strb	r3, [r7, #31]
 800dfaa:	e09b      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dfac:	2308      	movs	r3, #8
 800dfae:	77fb      	strb	r3, [r7, #31]
 800dfb0:	e098      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dfb2:	2310      	movs	r3, #16
 800dfb4:	77fb      	strb	r3, [r7, #31]
 800dfb6:	e095      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a2f      	ldr	r2, [pc, #188]	; (800e07c <UART_SetConfig+0x2e0>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d125      	bne.n	800e00e <UART_SetConfig+0x272>
 800dfc2:	4b29      	ldr	r3, [pc, #164]	; (800e068 <UART_SetConfig+0x2cc>)
 800dfc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dfcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dfd0:	d017      	beq.n	800e002 <UART_SetConfig+0x266>
 800dfd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dfd6:	d817      	bhi.n	800e008 <UART_SetConfig+0x26c>
 800dfd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfdc:	d00b      	beq.n	800dff6 <UART_SetConfig+0x25a>
 800dfde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfe2:	d811      	bhi.n	800e008 <UART_SetConfig+0x26c>
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d003      	beq.n	800dff0 <UART_SetConfig+0x254>
 800dfe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfec:	d006      	beq.n	800dffc <UART_SetConfig+0x260>
 800dfee:	e00b      	b.n	800e008 <UART_SetConfig+0x26c>
 800dff0:	2301      	movs	r3, #1
 800dff2:	77fb      	strb	r3, [r7, #31]
 800dff4:	e076      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dff6:	2302      	movs	r3, #2
 800dff8:	77fb      	strb	r3, [r7, #31]
 800dffa:	e073      	b.n	800e0e4 <UART_SetConfig+0x348>
 800dffc:	2304      	movs	r3, #4
 800dffe:	77fb      	strb	r3, [r7, #31]
 800e000:	e070      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e002:	2308      	movs	r3, #8
 800e004:	77fb      	strb	r3, [r7, #31]
 800e006:	e06d      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e008:	2310      	movs	r3, #16
 800e00a:	77fb      	strb	r3, [r7, #31]
 800e00c:	e06a      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a1b      	ldr	r2, [pc, #108]	; (800e080 <UART_SetConfig+0x2e4>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d138      	bne.n	800e08a <UART_SetConfig+0x2ee>
 800e018:	4b13      	ldr	r3, [pc, #76]	; (800e068 <UART_SetConfig+0x2cc>)
 800e01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e01e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e022:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e026:	d017      	beq.n	800e058 <UART_SetConfig+0x2bc>
 800e028:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e02c:	d82a      	bhi.n	800e084 <UART_SetConfig+0x2e8>
 800e02e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e032:	d00b      	beq.n	800e04c <UART_SetConfig+0x2b0>
 800e034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e038:	d824      	bhi.n	800e084 <UART_SetConfig+0x2e8>
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <UART_SetConfig+0x2aa>
 800e03e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e042:	d006      	beq.n	800e052 <UART_SetConfig+0x2b6>
 800e044:	e01e      	b.n	800e084 <UART_SetConfig+0x2e8>
 800e046:	2300      	movs	r3, #0
 800e048:	77fb      	strb	r3, [r7, #31]
 800e04a:	e04b      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e04c:	2302      	movs	r3, #2
 800e04e:	77fb      	strb	r3, [r7, #31]
 800e050:	e048      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e052:	2304      	movs	r3, #4
 800e054:	77fb      	strb	r3, [r7, #31]
 800e056:	e045      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e058:	2308      	movs	r3, #8
 800e05a:	77fb      	strb	r3, [r7, #31]
 800e05c:	e042      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e05e:	bf00      	nop
 800e060:	efff69f3 	.word	0xefff69f3
 800e064:	40011000 	.word	0x40011000
 800e068:	40023800 	.word	0x40023800
 800e06c:	40004400 	.word	0x40004400
 800e070:	40004800 	.word	0x40004800
 800e074:	40004c00 	.word	0x40004c00
 800e078:	40005000 	.word	0x40005000
 800e07c:	40011400 	.word	0x40011400
 800e080:	40007800 	.word	0x40007800
 800e084:	2310      	movs	r3, #16
 800e086:	77fb      	strb	r3, [r7, #31]
 800e088:	e02c      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a72      	ldr	r2, [pc, #456]	; (800e258 <UART_SetConfig+0x4bc>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d125      	bne.n	800e0e0 <UART_SetConfig+0x344>
 800e094:	4b71      	ldr	r3, [pc, #452]	; (800e25c <UART_SetConfig+0x4c0>)
 800e096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e09a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e09e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e0a2:	d017      	beq.n	800e0d4 <UART_SetConfig+0x338>
 800e0a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e0a8:	d817      	bhi.n	800e0da <UART_SetConfig+0x33e>
 800e0aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0ae:	d00b      	beq.n	800e0c8 <UART_SetConfig+0x32c>
 800e0b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0b4:	d811      	bhi.n	800e0da <UART_SetConfig+0x33e>
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d003      	beq.n	800e0c2 <UART_SetConfig+0x326>
 800e0ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0be:	d006      	beq.n	800e0ce <UART_SetConfig+0x332>
 800e0c0:	e00b      	b.n	800e0da <UART_SetConfig+0x33e>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	77fb      	strb	r3, [r7, #31]
 800e0c6:	e00d      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	77fb      	strb	r3, [r7, #31]
 800e0cc:	e00a      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e0ce:	2304      	movs	r3, #4
 800e0d0:	77fb      	strb	r3, [r7, #31]
 800e0d2:	e007      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e0d4:	2308      	movs	r3, #8
 800e0d6:	77fb      	strb	r3, [r7, #31]
 800e0d8:	e004      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e0da:	2310      	movs	r3, #16
 800e0dc:	77fb      	strb	r3, [r7, #31]
 800e0de:	e001      	b.n	800e0e4 <UART_SetConfig+0x348>
 800e0e0:	2310      	movs	r3, #16
 800e0e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	69db      	ldr	r3, [r3, #28]
 800e0e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0ec:	d15b      	bne.n	800e1a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e0ee:	7ffb      	ldrb	r3, [r7, #31]
 800e0f0:	2b08      	cmp	r3, #8
 800e0f2:	d828      	bhi.n	800e146 <UART_SetConfig+0x3aa>
 800e0f4:	a201      	add	r2, pc, #4	; (adr r2, 800e0fc <UART_SetConfig+0x360>)
 800e0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fa:	bf00      	nop
 800e0fc:	0800e121 	.word	0x0800e121
 800e100:	0800e129 	.word	0x0800e129
 800e104:	0800e131 	.word	0x0800e131
 800e108:	0800e147 	.word	0x0800e147
 800e10c:	0800e137 	.word	0x0800e137
 800e110:	0800e147 	.word	0x0800e147
 800e114:	0800e147 	.word	0x0800e147
 800e118:	0800e147 	.word	0x0800e147
 800e11c:	0800e13f 	.word	0x0800e13f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e120:	f7fe fdc0 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
 800e124:	61b8      	str	r0, [r7, #24]
        break;
 800e126:	e013      	b.n	800e150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e128:	f7fe fdd0 	bl	800cccc <HAL_RCC_GetPCLK2Freq>
 800e12c:	61b8      	str	r0, [r7, #24]
        break;
 800e12e:	e00f      	b.n	800e150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e130:	4b4b      	ldr	r3, [pc, #300]	; (800e260 <UART_SetConfig+0x4c4>)
 800e132:	61bb      	str	r3, [r7, #24]
        break;
 800e134:	e00c      	b.n	800e150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e136:	f7fe fca3 	bl	800ca80 <HAL_RCC_GetSysClockFreq>
 800e13a:	61b8      	str	r0, [r7, #24]
        break;
 800e13c:	e008      	b.n	800e150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e13e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e142:	61bb      	str	r3, [r7, #24]
        break;
 800e144:	e004      	b.n	800e150 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e146:	2300      	movs	r3, #0
 800e148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	77bb      	strb	r3, [r7, #30]
        break;
 800e14e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d074      	beq.n	800e240 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	005a      	lsls	r2, r3, #1
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	085b      	lsrs	r3, r3, #1
 800e160:	441a      	add	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	2b0f      	cmp	r3, #15
 800e170:	d916      	bls.n	800e1a0 <UART_SetConfig+0x404>
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e178:	d212      	bcs.n	800e1a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	f023 030f 	bic.w	r3, r3, #15
 800e182:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	085b      	lsrs	r3, r3, #1
 800e188:	b29b      	uxth	r3, r3
 800e18a:	f003 0307 	and.w	r3, r3, #7
 800e18e:	b29a      	uxth	r2, r3
 800e190:	89fb      	ldrh	r3, [r7, #14]
 800e192:	4313      	orrs	r3, r2
 800e194:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	89fa      	ldrh	r2, [r7, #14]
 800e19c:	60da      	str	r2, [r3, #12]
 800e19e:	e04f      	b.n	800e240 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	77bb      	strb	r3, [r7, #30]
 800e1a4:	e04c      	b.n	800e240 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1a6:	7ffb      	ldrb	r3, [r7, #31]
 800e1a8:	2b08      	cmp	r3, #8
 800e1aa:	d828      	bhi.n	800e1fe <UART_SetConfig+0x462>
 800e1ac:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <UART_SetConfig+0x418>)
 800e1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b2:	bf00      	nop
 800e1b4:	0800e1d9 	.word	0x0800e1d9
 800e1b8:	0800e1e1 	.word	0x0800e1e1
 800e1bc:	0800e1e9 	.word	0x0800e1e9
 800e1c0:	0800e1ff 	.word	0x0800e1ff
 800e1c4:	0800e1ef 	.word	0x0800e1ef
 800e1c8:	0800e1ff 	.word	0x0800e1ff
 800e1cc:	0800e1ff 	.word	0x0800e1ff
 800e1d0:	0800e1ff 	.word	0x0800e1ff
 800e1d4:	0800e1f7 	.word	0x0800e1f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1d8:	f7fe fd64 	bl	800cca4 <HAL_RCC_GetPCLK1Freq>
 800e1dc:	61b8      	str	r0, [r7, #24]
        break;
 800e1de:	e013      	b.n	800e208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1e0:	f7fe fd74 	bl	800cccc <HAL_RCC_GetPCLK2Freq>
 800e1e4:	61b8      	str	r0, [r7, #24]
        break;
 800e1e6:	e00f      	b.n	800e208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e1e8:	4b1d      	ldr	r3, [pc, #116]	; (800e260 <UART_SetConfig+0x4c4>)
 800e1ea:	61bb      	str	r3, [r7, #24]
        break;
 800e1ec:	e00c      	b.n	800e208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e1ee:	f7fe fc47 	bl	800ca80 <HAL_RCC_GetSysClockFreq>
 800e1f2:	61b8      	str	r0, [r7, #24]
        break;
 800e1f4:	e008      	b.n	800e208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1fa:	61bb      	str	r3, [r7, #24]
        break;
 800e1fc:	e004      	b.n	800e208 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e1fe:	2300      	movs	r3, #0
 800e200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	77bb      	strb	r3, [r7, #30]
        break;
 800e206:	bf00      	nop
    }

    if (pclk != 0U)
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d018      	beq.n	800e240 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	085a      	lsrs	r2, r3, #1
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	441a      	add	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	2b0f      	cmp	r3, #15
 800e226:	d909      	bls.n	800e23c <UART_SetConfig+0x4a0>
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e22e:	d205      	bcs.n	800e23c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	b29a      	uxth	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	60da      	str	r2, [r3, #12]
 800e23a:	e001      	b.n	800e240 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e24c:	7fbb      	ldrb	r3, [r7, #30]
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3720      	adds	r7, #32
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	40007c00 	.word	0x40007c00
 800e25c:	40023800 	.word	0x40023800
 800e260:	00f42400 	.word	0x00f42400

0800e264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e270:	f003 0301 	and.w	r3, r3, #1
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00a      	beq.n	800e28e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	430a      	orrs	r2, r1
 800e28c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e292:	f003 0302 	and.w	r3, r3, #2
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00a      	beq.n	800e2b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	430a      	orrs	r2, r1
 800e2ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b4:	f003 0304 	and.w	r3, r3, #4
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00a      	beq.n	800e2d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	430a      	orrs	r2, r1
 800e2d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d6:	f003 0308 	and.w	r3, r3, #8
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00a      	beq.n	800e2f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	430a      	orrs	r2, r1
 800e2f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f8:	f003 0310 	and.w	r3, r3, #16
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00a      	beq.n	800e316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	430a      	orrs	r2, r1
 800e314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31a:	f003 0320 	and.w	r3, r3, #32
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d00a      	beq.n	800e338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	430a      	orrs	r2, r1
 800e336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e340:	2b00      	cmp	r3, #0
 800e342:	d01a      	beq.n	800e37a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	430a      	orrs	r2, r1
 800e358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e362:	d10a      	bne.n	800e37a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	430a      	orrs	r2, r1
 800e39a:	605a      	str	r2, [r3, #4]
  }
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af02      	add	r7, sp, #8
 800e3ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3b8:	f7fd f96a 	bl	800b690 <HAL_GetTick>
 800e3bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 0308 	and.w	r3, r3, #8
 800e3c8:	2b08      	cmp	r3, #8
 800e3ca:	d10e      	bne.n	800e3ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f81b 	bl	800e416 <UART_WaitOnFlagUntilTimeout>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	e011      	b.n	800e40e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2220      	movs	r2, #32
 800e3ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2220      	movs	r2, #32
 800e3f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b09c      	sub	sp, #112	; 0x70
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	603b      	str	r3, [r7, #0]
 800e422:	4613      	mov	r3, r2
 800e424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e426:	e0a7      	b.n	800e578 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42e:	f000 80a3 	beq.w	800e578 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e432:	f7fd f92d 	bl	800b690 <HAL_GetTick>
 800e436:	4602      	mov	r2, r0
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e43e:	429a      	cmp	r2, r3
 800e440:	d302      	bcc.n	800e448 <UART_WaitOnFlagUntilTimeout+0x32>
 800e442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e444:	2b00      	cmp	r3, #0
 800e446:	d13f      	bne.n	800e4c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e450:	e853 3f00 	ldrex	r3, [r3]
 800e454:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e45c:	667b      	str	r3, [r7, #100]	; 0x64
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	461a      	mov	r2, r3
 800e464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e466:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e468:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e46a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e46c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e46e:	e841 2300 	strex	r3, r2, [r1]
 800e472:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1e6      	bne.n	800e448 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3308      	adds	r3, #8
 800e480:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e484:	e853 3f00 	ldrex	r3, [r3]
 800e488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48c:	f023 0301 	bic.w	r3, r3, #1
 800e490:	663b      	str	r3, [r7, #96]	; 0x60
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3308      	adds	r3, #8
 800e498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e49a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e49c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4a2:	e841 2300 	strex	r3, r2, [r1]
 800e4a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e4a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d1e5      	bne.n	800e47a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2220      	movs	r2, #32
 800e4b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2220      	movs	r2, #32
 800e4b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e4c4:	2303      	movs	r3, #3
 800e4c6:	e068      	b.n	800e59a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f003 0304 	and.w	r3, r3, #4
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d050      	beq.n	800e578 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	69db      	ldr	r3, [r3, #28]
 800e4dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e4e4:	d148      	bne.n	800e578 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	e853 3f00 	ldrex	r3, [r3]
 800e4fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e500:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e504:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e50e:	637b      	str	r3, [r7, #52]	; 0x34
 800e510:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e512:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e516:	e841 2300 	strex	r3, r2, [r1]
 800e51a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1e6      	bne.n	800e4f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3308      	adds	r3, #8
 800e528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	613b      	str	r3, [r7, #16]
   return(result);
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	f023 0301 	bic.w	r3, r3, #1
 800e538:	66bb      	str	r3, [r7, #104]	; 0x68
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e542:	623a      	str	r2, [r7, #32]
 800e544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	69f9      	ldr	r1, [r7, #28]
 800e548:	6a3a      	ldr	r2, [r7, #32]
 800e54a:	e841 2300 	strex	r3, r2, [r1]
 800e54e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1e5      	bne.n	800e522 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2220      	movs	r2, #32
 800e55a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2220      	movs	r2, #32
 800e560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2220      	movs	r2, #32
 800e568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e574:	2303      	movs	r3, #3
 800e576:	e010      	b.n	800e59a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	69da      	ldr	r2, [r3, #28]
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	4013      	ands	r3, r2
 800e582:	68ba      	ldr	r2, [r7, #8]
 800e584:	429a      	cmp	r2, r3
 800e586:	bf0c      	ite	eq
 800e588:	2301      	moveq	r3, #1
 800e58a:	2300      	movne	r3, #0
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	461a      	mov	r2, r3
 800e590:	79fb      	ldrb	r3, [r7, #7]
 800e592:	429a      	cmp	r2, r3
 800e594:	f43f af48 	beq.w	800e428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3770      	adds	r7, #112	; 0x70
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e5a2:	b480      	push	{r7}
 800e5a4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e5a6:	bf00      	nop
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5b6:	f3ef 8305 	mrs	r3, IPSR
 800e5ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800e5bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d10f      	bne.n	800e5e2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5c6:	607b      	str	r3, [r7, #4]
  return(result);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d105      	bne.n	800e5da <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e5ce:	f3ef 8311 	mrs	r3, BASEPRI
 800e5d2:	603b      	str	r3, [r7, #0]
  return(result);
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d007      	beq.n	800e5ea <osKernelInitialize+0x3a>
 800e5da:	4b0e      	ldr	r3, [pc, #56]	; (800e614 <osKernelInitialize+0x64>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d103      	bne.n	800e5ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e5e2:	f06f 0305 	mvn.w	r3, #5
 800e5e6:	60fb      	str	r3, [r7, #12]
 800e5e8:	e00c      	b.n	800e604 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e5ea:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <osKernelInitialize+0x64>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d105      	bne.n	800e5fe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e5f2:	4b08      	ldr	r3, [pc, #32]	; (800e614 <osKernelInitialize+0x64>)
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	60fb      	str	r3, [r7, #12]
 800e5fc:	e002      	b.n	800e604 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e602:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e604:	68fb      	ldr	r3, [r7, #12]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	200036c8 	.word	0x200036c8

0800e618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e61e:	f3ef 8305 	mrs	r3, IPSR
 800e622:	60bb      	str	r3, [r7, #8]
  return(result);
 800e624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e626:	2b00      	cmp	r3, #0
 800e628:	d10f      	bne.n	800e64a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e62a:	f3ef 8310 	mrs	r3, PRIMASK
 800e62e:	607b      	str	r3, [r7, #4]
  return(result);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d105      	bne.n	800e642 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e636:	f3ef 8311 	mrs	r3, BASEPRI
 800e63a:	603b      	str	r3, [r7, #0]
  return(result);
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <osKernelStart+0x3a>
 800e642:	4b0f      	ldr	r3, [pc, #60]	; (800e680 <osKernelStart+0x68>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b02      	cmp	r3, #2
 800e648:	d103      	bne.n	800e652 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e64a:	f06f 0305 	mvn.w	r3, #5
 800e64e:	60fb      	str	r3, [r7, #12]
 800e650:	e010      	b.n	800e674 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e652:	4b0b      	ldr	r3, [pc, #44]	; (800e680 <osKernelStart+0x68>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b01      	cmp	r3, #1
 800e658:	d109      	bne.n	800e66e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e65a:	f7ff ffa2 	bl	800e5a2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e65e:	4b08      	ldr	r3, [pc, #32]	; (800e680 <osKernelStart+0x68>)
 800e660:	2202      	movs	r2, #2
 800e662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e664:	f001 f8e6 	bl	800f834 <vTaskStartScheduler>
      stat = osOK;
 800e668:	2300      	movs	r3, #0
 800e66a:	60fb      	str	r3, [r7, #12]
 800e66c:	e002      	b.n	800e674 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e66e:	f04f 33ff 	mov.w	r3, #4294967295
 800e672:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e674:	68fb      	ldr	r3, [r7, #12]
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	200036c8 	.word	0x200036c8

0800e684 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e68a:	f3ef 8305 	mrs	r3, IPSR
 800e68e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e690:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10f      	bne.n	800e6b6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e696:	f3ef 8310 	mrs	r3, PRIMASK
 800e69a:	607b      	str	r3, [r7, #4]
  return(result);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d105      	bne.n	800e6ae <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6a2:	f3ef 8311 	mrs	r3, BASEPRI
 800e6a6:	603b      	str	r3, [r7, #0]
  return(result);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d007      	beq.n	800e6be <osKernelGetTickCount+0x3a>
 800e6ae:	4b08      	ldr	r3, [pc, #32]	; (800e6d0 <osKernelGetTickCount+0x4c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d103      	bne.n	800e6be <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e6b6:	f001 f9e5 	bl	800fa84 <xTaskGetTickCountFromISR>
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	e002      	b.n	800e6c4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e6be:	f001 f9d1 	bl	800fa64 <xTaskGetTickCount>
 800e6c2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	200036c8 	.word	0x200036c8

0800e6d4 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800e6d4:	b480      	push	{r7}
 800e6d6:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800e6d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
	...

0800e6e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b090      	sub	sp, #64	; 0x40
 800e6ec:	af04      	add	r7, sp, #16
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6f8:	f3ef 8305 	mrs	r3, IPSR
 800e6fc:	61fb      	str	r3, [r7, #28]
  return(result);
 800e6fe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e700:	2b00      	cmp	r3, #0
 800e702:	f040 808f 	bne.w	800e824 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e706:	f3ef 8310 	mrs	r3, PRIMASK
 800e70a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d105      	bne.n	800e71e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e712:	f3ef 8311 	mrs	r3, BASEPRI
 800e716:	617b      	str	r3, [r7, #20]
  return(result);
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d003      	beq.n	800e726 <osThreadNew+0x3e>
 800e71e:	4b44      	ldr	r3, [pc, #272]	; (800e830 <osThreadNew+0x148>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b02      	cmp	r3, #2
 800e724:	d07e      	beq.n	800e824 <osThreadNew+0x13c>
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d07b      	beq.n	800e824 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e72c:	2380      	movs	r3, #128	; 0x80
 800e72e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e730:	2318      	movs	r3, #24
 800e732:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e734:	2300      	movs	r3, #0
 800e736:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e738:	f04f 33ff 	mov.w	r3, #4294967295
 800e73c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d045      	beq.n	800e7d0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d002      	beq.n	800e752 <osThreadNew+0x6a>
        name = attr->name;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d002      	beq.n	800e760 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	699b      	ldr	r3, [r3, #24]
 800e75e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	2b00      	cmp	r3, #0
 800e764:	d008      	beq.n	800e778 <osThreadNew+0x90>
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	2b38      	cmp	r3, #56	; 0x38
 800e76a:	d805      	bhi.n	800e778 <osThreadNew+0x90>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	d001      	beq.n	800e77c <osThreadNew+0x94>
        return (NULL);
 800e778:	2300      	movs	r3, #0
 800e77a:	e054      	b.n	800e826 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	695b      	ldr	r3, [r3, #20]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d003      	beq.n	800e78c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	695b      	ldr	r3, [r3, #20]
 800e788:	089b      	lsrs	r3, r3, #2
 800e78a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00e      	beq.n	800e7b2 <osThreadNew+0xca>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	2b5b      	cmp	r3, #91	; 0x5b
 800e79a:	d90a      	bls.n	800e7b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d006      	beq.n	800e7b2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	695b      	ldr	r3, [r3, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <osThreadNew+0xca>
        mem = 1;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	623b      	str	r3, [r7, #32]
 800e7b0:	e010      	b.n	800e7d4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10c      	bne.n	800e7d4 <osThreadNew+0xec>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d108      	bne.n	800e7d4 <osThreadNew+0xec>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	691b      	ldr	r3, [r3, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d104      	bne.n	800e7d4 <osThreadNew+0xec>
          mem = 0;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	623b      	str	r3, [r7, #32]
 800e7ce:	e001      	b.n	800e7d4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d110      	bne.n	800e7fc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e7e2:	9202      	str	r2, [sp, #8]
 800e7e4:	9301      	str	r3, [sp, #4]
 800e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f000 fe3f 	bl	800f474 <xTaskCreateStatic>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	613b      	str	r3, [r7, #16]
 800e7fa:	e013      	b.n	800e824 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d110      	bne.n	800e824 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e804:	b29a      	uxth	r2, r3
 800e806:	f107 0310 	add.w	r3, r7, #16
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	f000 fe90 	bl	800f53a <xTaskCreate>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d001      	beq.n	800e824 <osThreadNew+0x13c>
          hTask = NULL;
 800e820:	2300      	movs	r3, #0
 800e822:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e824:	693b      	ldr	r3, [r7, #16]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3730      	adds	r7, #48	; 0x30
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	200036c8 	.word	0x200036c8

0800e834 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e83c:	f3ef 8305 	mrs	r3, IPSR
 800e840:	613b      	str	r3, [r7, #16]
  return(result);
 800e842:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10f      	bne.n	800e868 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e848:	f3ef 8310 	mrs	r3, PRIMASK
 800e84c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d105      	bne.n	800e860 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e854:	f3ef 8311 	mrs	r3, BASEPRI
 800e858:	60bb      	str	r3, [r7, #8]
  return(result);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d007      	beq.n	800e870 <osDelay+0x3c>
 800e860:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <osDelay+0x58>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b02      	cmp	r3, #2
 800e866:	d103      	bne.n	800e870 <osDelay+0x3c>
    stat = osErrorISR;
 800e868:	f06f 0305 	mvn.w	r3, #5
 800e86c:	617b      	str	r3, [r7, #20]
 800e86e:	e007      	b.n	800e880 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e870:	2300      	movs	r3, #0
 800e872:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d002      	beq.n	800e880 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 ffa4 	bl	800f7c8 <vTaskDelay>
    }
  }

  return (stat);
 800e880:	697b      	ldr	r3, [r7, #20]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3718      	adds	r7, #24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	200036c8 	.word	0x200036c8

0800e890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	4a07      	ldr	r2, [pc, #28]	; (800e8bc <vApplicationGetIdleTaskMemory+0x2c>)
 800e8a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	4a06      	ldr	r2, [pc, #24]	; (800e8c0 <vApplicationGetIdleTaskMemory+0x30>)
 800e8a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2280      	movs	r2, #128	; 0x80
 800e8ac:	601a      	str	r2, [r3, #0]
}
 800e8ae:	bf00      	nop
 800e8b0:	3714      	adds	r7, #20
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	200036cc 	.word	0x200036cc
 800e8c0:	20003728 	.word	0x20003728

0800e8c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4a07      	ldr	r2, [pc, #28]	; (800e8f0 <vApplicationGetTimerTaskMemory+0x2c>)
 800e8d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	4a06      	ldr	r2, [pc, #24]	; (800e8f4 <vApplicationGetTimerTaskMemory+0x30>)
 800e8da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8e2:	601a      	str	r2, [r3, #0]
}
 800e8e4:	bf00      	nop
 800e8e6:	3714      	adds	r7, #20
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	20003928 	.word	0x20003928
 800e8f4:	20003984 	.word	0x20003984

0800e8f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f103 0208 	add.w	r2, r3, #8
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f04f 32ff 	mov.w	r2, #4294967295
 800e910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f103 0208 	add.w	r2, r3, #8
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f103 0208 	add.w	r2, r3, #8
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e946:	bf00      	nop
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e952:	b480      	push	{r7}
 800e954:	b085      	sub	sp, #20
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	689a      	ldr	r2, [r3, #8]
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	1c5a      	adds	r2, r3, #1
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	601a      	str	r2, [r3, #0]
}
 800e98e:	bf00      	nop
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e99a:	b480      	push	{r7}
 800e99c:	b085      	sub	sp, #20
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b0:	d103      	bne.n	800e9ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	e00c      	b.n	800e9d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	3308      	adds	r3, #8
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	e002      	b.n	800e9c8 <vListInsert+0x2e>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	60fb      	str	r3, [r7, #12]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d2f6      	bcs.n	800e9c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	685a      	ldr	r2, [r3, #4]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	683a      	ldr	r2, [r7, #0]
 800e9e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	683a      	ldr	r2, [r7, #0]
 800e9ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	1c5a      	adds	r2, r3, #1
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	601a      	str	r2, [r3, #0]
}
 800ea00:	bf00      	nop
 800ea02:	3714      	adds	r7, #20
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	6892      	ldr	r2, [r2, #8]
 800ea22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	6852      	ldr	r2, [r2, #4]
 800ea2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d103      	bne.n	800ea40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	689a      	ldr	r2, [r3, #8]
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	1e5a      	subs	r2, r3, #1
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3714      	adds	r7, #20
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10c      	bne.n	800ea8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea78:	b672      	cpsid	i
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	b662      	cpsie	i
 800ea88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ea8a:	bf00      	nop
 800ea8c:	e7fe      	b.n	800ea8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ea8e:	f002 f88d 	bl	8010bac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9a:	68f9      	ldr	r1, [r7, #12]
 800ea9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ea9e:	fb01 f303 	mul.w	r3, r1, r3
 800eaa2:	441a      	add	r2, r3
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eabe:	3b01      	subs	r3, #1
 800eac0:	68f9      	ldr	r1, [r7, #12]
 800eac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eac4:	fb01 f303 	mul.w	r3, r1, r3
 800eac8:	441a      	add	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	22ff      	movs	r2, #255	; 0xff
 800ead2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	22ff      	movs	r2, #255	; 0xff
 800eada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d114      	bne.n	800eb0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01a      	beq.n	800eb22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	3310      	adds	r3, #16
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f001 f949 	bl	800fd88 <xTaskRemoveFromEventList>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d012      	beq.n	800eb22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eafc:	4b0c      	ldr	r3, [pc, #48]	; (800eb30 <xQueueGenericReset+0xd0>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	e009      	b.n	800eb22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3310      	adds	r3, #16
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7ff fef0 	bl	800e8f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3324      	adds	r3, #36	; 0x24
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7ff feeb 	bl	800e8f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb22:	f002 f877 	bl	8010c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb26:	2301      	movs	r3, #1
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	e000ed04 	.word	0xe000ed04

0800eb34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b08e      	sub	sp, #56	; 0x38
 800eb38:	af02      	add	r7, sp, #8
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d10c      	bne.n	800eb62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800eb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4c:	b672      	cpsid	i
 800eb4e:	f383 8811 	msr	BASEPRI, r3
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	b662      	cpsie	i
 800eb5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb5e:	bf00      	nop
 800eb60:	e7fe      	b.n	800eb60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d10c      	bne.n	800eb82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800eb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6c:	b672      	cpsid	i
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	b662      	cpsie	i
 800eb7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb7e:	bf00      	nop
 800eb80:	e7fe      	b.n	800eb80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <xQueueGenericCreateStatic+0x5a>
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <xQueueGenericCreateStatic+0x5e>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e000      	b.n	800eb94 <xQueueGenericCreateStatic+0x60>
 800eb92:	2300      	movs	r3, #0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10c      	bne.n	800ebb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	b672      	cpsid	i
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	b662      	cpsie	i
 800ebac:	623b      	str	r3, [r7, #32]
}
 800ebae:	bf00      	nop
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d102      	bne.n	800ebbe <xQueueGenericCreateStatic+0x8a>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d101      	bne.n	800ebc2 <xQueueGenericCreateStatic+0x8e>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e000      	b.n	800ebc4 <xQueueGenericCreateStatic+0x90>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10c      	bne.n	800ebe2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebcc:	b672      	cpsid	i
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	b662      	cpsie	i
 800ebdc:	61fb      	str	r3, [r7, #28]
}
 800ebde:	bf00      	nop
 800ebe0:	e7fe      	b.n	800ebe0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ebe2:	2350      	movs	r3, #80	; 0x50
 800ebe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	2b50      	cmp	r3, #80	; 0x50
 800ebea:	d00c      	beq.n	800ec06 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ebec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf0:	b672      	cpsid	i
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	b662      	cpsie	i
 800ec00:	61bb      	str	r3, [r7, #24]
}
 800ec02:	bf00      	nop
 800ec04:	e7fe      	b.n	800ec04 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00d      	beq.n	800ec2e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec14:	2201      	movs	r2, #1
 800ec16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	4613      	mov	r3, r2
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f000 f805 	bl	800ec38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3730      	adds	r7, #48	; 0x30
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d103      	bne.n	800ec54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	69ba      	ldr	r2, [r7, #24]
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	e002      	b.n	800ec5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	68ba      	ldr	r2, [r7, #8]
 800ec64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec66:	2101      	movs	r1, #1
 800ec68:	69b8      	ldr	r0, [r7, #24]
 800ec6a:	f7ff fef9 	bl	800ea60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	78fa      	ldrb	r2, [r7, #3]
 800ec72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ec76:	bf00      	nop
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
	...

0800ec80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08e      	sub	sp, #56	; 0x38
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10c      	bne.n	800ecb6 <xQueueGenericSend+0x36>
	__asm volatile
 800ec9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca0:	b672      	cpsid	i
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	b662      	cpsie	i
 800ecb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ecb2:	bf00      	nop
 800ecb4:	e7fe      	b.n	800ecb4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d103      	bne.n	800ecc4 <xQueueGenericSend+0x44>
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <xQueueGenericSend+0x48>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e000      	b.n	800ecca <xQueueGenericSend+0x4a>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10c      	bne.n	800ece8 <xQueueGenericSend+0x68>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	b672      	cpsid	i
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	b662      	cpsie	i
 800ece2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ece4:	bf00      	nop
 800ece6:	e7fe      	b.n	800ece6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d103      	bne.n	800ecf6 <xQueueGenericSend+0x76>
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d101      	bne.n	800ecfa <xQueueGenericSend+0x7a>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e000      	b.n	800ecfc <xQueueGenericSend+0x7c>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10c      	bne.n	800ed1a <xQueueGenericSend+0x9a>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed04:	b672      	cpsid	i
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	b662      	cpsie	i
 800ed14:	623b      	str	r3, [r7, #32]
}
 800ed16:	bf00      	nop
 800ed18:	e7fe      	b.n	800ed18 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed1a:	f001 f9fb 	bl	8010114 <xTaskGetSchedulerState>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d102      	bne.n	800ed2a <xQueueGenericSend+0xaa>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d101      	bne.n	800ed2e <xQueueGenericSend+0xae>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e000      	b.n	800ed30 <xQueueGenericSend+0xb0>
 800ed2e:	2300      	movs	r3, #0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10c      	bne.n	800ed4e <xQueueGenericSend+0xce>
	__asm volatile
 800ed34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed38:	b672      	cpsid	i
 800ed3a:	f383 8811 	msr	BASEPRI, r3
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	f3bf 8f4f 	dsb	sy
 800ed46:	b662      	cpsie	i
 800ed48:	61fb      	str	r3, [r7, #28]
}
 800ed4a:	bf00      	nop
 800ed4c:	e7fe      	b.n	800ed4c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed4e:	f001 ff2d 	bl	8010bac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d302      	bcc.n	800ed64 <xQueueGenericSend+0xe4>
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d129      	bne.n	800edb8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed64:	683a      	ldr	r2, [r7, #0]
 800ed66:	68b9      	ldr	r1, [r7, #8]
 800ed68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed6a:	f000 fa15 	bl	800f198 <prvCopyDataToQueue>
 800ed6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d010      	beq.n	800ed9a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	3324      	adds	r3, #36	; 0x24
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f001 f803 	bl	800fd88 <xTaskRemoveFromEventList>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d013      	beq.n	800edb0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ed88:	4b3f      	ldr	r3, [pc, #252]	; (800ee88 <xQueueGenericSend+0x208>)
 800ed8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	f3bf 8f6f 	isb	sy
 800ed98:	e00a      	b.n	800edb0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ed9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d007      	beq.n	800edb0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eda0:	4b39      	ldr	r3, [pc, #228]	; (800ee88 <xQueueGenericSend+0x208>)
 800eda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eda6:	601a      	str	r2, [r3, #0]
 800eda8:	f3bf 8f4f 	dsb	sy
 800edac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800edb0:	f001 ff30 	bl	8010c14 <vPortExitCritical>
				return pdPASS;
 800edb4:	2301      	movs	r3, #1
 800edb6:	e063      	b.n	800ee80 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d103      	bne.n	800edc6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800edbe:	f001 ff29 	bl	8010c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	e05c      	b.n	800ee80 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800edc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d106      	bne.n	800edda <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edcc:	f107 0314 	add.w	r3, r7, #20
 800edd0:	4618      	mov	r0, r3
 800edd2:	f001 f83f 	bl	800fe54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800edd6:	2301      	movs	r3, #1
 800edd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800edda:	f001 ff1b 	bl	8010c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800edde:	f000 fd93 	bl	800f908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ede2:	f001 fee3 	bl	8010bac <vPortEnterCritical>
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edec:	b25b      	sxtb	r3, r3
 800edee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf2:	d103      	bne.n	800edfc <xQueueGenericSend+0x17c>
 800edf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf6:	2200      	movs	r2, #0
 800edf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee02:	b25b      	sxtb	r3, r3
 800ee04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee08:	d103      	bne.n	800ee12 <xQueueGenericSend+0x192>
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee12:	f001 feff 	bl	8010c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee16:	1d3a      	adds	r2, r7, #4
 800ee18:	f107 0314 	add.w	r3, r7, #20
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f001 f82e 	bl	800fe80 <xTaskCheckForTimeOut>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d124      	bne.n	800ee74 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee2c:	f000 faac 	bl	800f388 <prvIsQueueFull>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d018      	beq.n	800ee68 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee38:	3310      	adds	r3, #16
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f000 ff4e 	bl	800fce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ee44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee46:	f000 fa37 	bl	800f2b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ee4a:	f000 fd6b 	bl	800f924 <xTaskResumeAll>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f47f af7c 	bne.w	800ed4e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ee56:	4b0c      	ldr	r3, [pc, #48]	; (800ee88 <xQueueGenericSend+0x208>)
 800ee58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee5c:	601a      	str	r2, [r3, #0]
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	e772      	b.n	800ed4e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ee68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee6a:	f000 fa25 	bl	800f2b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee6e:	f000 fd59 	bl	800f924 <xTaskResumeAll>
 800ee72:	e76c      	b.n	800ed4e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ee74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee76:	f000 fa1f 	bl	800f2b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee7a:	f000 fd53 	bl	800f924 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ee7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3738      	adds	r7, #56	; 0x38
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	e000ed04 	.word	0xe000ed04

0800ee8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b08e      	sub	sp, #56	; 0x38
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d10c      	bne.n	800eebe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800eea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea8:	b672      	cpsid	i
 800eeaa:	f383 8811 	msr	BASEPRI, r3
 800eeae:	f3bf 8f6f 	isb	sy
 800eeb2:	f3bf 8f4f 	dsb	sy
 800eeb6:	b662      	cpsie	i
 800eeb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eeba:	bf00      	nop
 800eebc:	e7fe      	b.n	800eebc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d103      	bne.n	800eecc <xQueueGenericSendFromISR+0x40>
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d101      	bne.n	800eed0 <xQueueGenericSendFromISR+0x44>
 800eecc:	2301      	movs	r3, #1
 800eece:	e000      	b.n	800eed2 <xQueueGenericSendFromISR+0x46>
 800eed0:	2300      	movs	r3, #0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d10c      	bne.n	800eef0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800eed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeda:	b672      	cpsid	i
 800eedc:	f383 8811 	msr	BASEPRI, r3
 800eee0:	f3bf 8f6f 	isb	sy
 800eee4:	f3bf 8f4f 	dsb	sy
 800eee8:	b662      	cpsie	i
 800eeea:	623b      	str	r3, [r7, #32]
}
 800eeec:	bf00      	nop
 800eeee:	e7fe      	b.n	800eeee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d103      	bne.n	800eefe <xQueueGenericSendFromISR+0x72>
 800eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d101      	bne.n	800ef02 <xQueueGenericSendFromISR+0x76>
 800eefe:	2301      	movs	r3, #1
 800ef00:	e000      	b.n	800ef04 <xQueueGenericSendFromISR+0x78>
 800ef02:	2300      	movs	r3, #0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10c      	bne.n	800ef22 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ef08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0c:	b672      	cpsid	i
 800ef0e:	f383 8811 	msr	BASEPRI, r3
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	b662      	cpsie	i
 800ef1c:	61fb      	str	r3, [r7, #28]
}
 800ef1e:	bf00      	nop
 800ef20:	e7fe      	b.n	800ef20 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef22:	f001 ff2b 	bl	8010d7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef26:	f3ef 8211 	mrs	r2, BASEPRI
 800ef2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2e:	b672      	cpsid	i
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	b662      	cpsie	i
 800ef3e:	61ba      	str	r2, [r7, #24]
 800ef40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ef42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d302      	bcc.n	800ef58 <xQueueGenericSendFromISR+0xcc>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d12c      	bne.n	800efb2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef62:	683a      	ldr	r2, [r7, #0]
 800ef64:	68b9      	ldr	r1, [r7, #8]
 800ef66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef68:	f000 f916 	bl	800f198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ef6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ef70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef74:	d112      	bne.n	800ef9c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d016      	beq.n	800efac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	3324      	adds	r3, #36	; 0x24
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 ff00 	bl	800fd88 <xTaskRemoveFromEventList>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00e      	beq.n	800efac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00b      	beq.n	800efac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	e007      	b.n	800efac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ef9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efa0:	3301      	adds	r3, #1
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	b25a      	sxtb	r2, r3
 800efa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800efac:	2301      	movs	r3, #1
 800efae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800efb0:	e001      	b.n	800efb6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800efb2:	2300      	movs	r3, #0
 800efb4:	637b      	str	r3, [r7, #52]	; 0x34
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800efc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800efc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3738      	adds	r7, #56	; 0x38
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b08c      	sub	sp, #48	; 0x30
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800efd8:	2300      	movs	r3, #0
 800efda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d10c      	bne.n	800f000 <xQueueReceive+0x34>
	__asm volatile
 800efe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efea:	b672      	cpsid	i
 800efec:	f383 8811 	msr	BASEPRI, r3
 800eff0:	f3bf 8f6f 	isb	sy
 800eff4:	f3bf 8f4f 	dsb	sy
 800eff8:	b662      	cpsie	i
 800effa:	623b      	str	r3, [r7, #32]
}
 800effc:	bf00      	nop
 800effe:	e7fe      	b.n	800effe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d103      	bne.n	800f00e <xQueueReceive+0x42>
 800f006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <xQueueReceive+0x46>
 800f00e:	2301      	movs	r3, #1
 800f010:	e000      	b.n	800f014 <xQueueReceive+0x48>
 800f012:	2300      	movs	r3, #0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d10c      	bne.n	800f032 <xQueueReceive+0x66>
	__asm volatile
 800f018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01c:	b672      	cpsid	i
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	b662      	cpsie	i
 800f02c:	61fb      	str	r3, [r7, #28]
}
 800f02e:	bf00      	nop
 800f030:	e7fe      	b.n	800f030 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f032:	f001 f86f 	bl	8010114 <xTaskGetSchedulerState>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d102      	bne.n	800f042 <xQueueReceive+0x76>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d101      	bne.n	800f046 <xQueueReceive+0x7a>
 800f042:	2301      	movs	r3, #1
 800f044:	e000      	b.n	800f048 <xQueueReceive+0x7c>
 800f046:	2300      	movs	r3, #0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10c      	bne.n	800f066 <xQueueReceive+0x9a>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f050:	b672      	cpsid	i
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	b662      	cpsie	i
 800f060:	61bb      	str	r3, [r7, #24]
}
 800f062:	bf00      	nop
 800f064:	e7fe      	b.n	800f064 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f066:	f001 fda1 	bl	8010bac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	2b00      	cmp	r3, #0
 800f074:	d01f      	beq.n	800f0b6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f07a:	f000 f8f7 	bl	800f26c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f080:	1e5a      	subs	r2, r3, #1
 800f082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f084:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00f      	beq.n	800f0ae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	3310      	adds	r3, #16
 800f092:	4618      	mov	r0, r3
 800f094:	f000 fe78 	bl	800fd88 <xTaskRemoveFromEventList>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d007      	beq.n	800f0ae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f09e:	4b3d      	ldr	r3, [pc, #244]	; (800f194 <xQueueReceive+0x1c8>)
 800f0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0a4:	601a      	str	r2, [r3, #0]
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0ae:	f001 fdb1 	bl	8010c14 <vPortExitCritical>
				return pdPASS;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e069      	b.n	800f18a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d103      	bne.n	800f0c4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f0bc:	f001 fdaa 	bl	8010c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	e062      	b.n	800f18a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d106      	bne.n	800f0d8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0ca:	f107 0310 	add.w	r3, r7, #16
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 fec0 	bl	800fe54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0d8:	f001 fd9c 	bl	8010c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0dc:	f000 fc14 	bl	800f908 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0e0:	f001 fd64 	bl	8010bac <vPortEnterCritical>
 800f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0ea:	b25b      	sxtb	r3, r3
 800f0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f0:	d103      	bne.n	800f0fa <xQueueReceive+0x12e>
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f100:	b25b      	sxtb	r3, r3
 800f102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f106:	d103      	bne.n	800f110 <xQueueReceive+0x144>
 800f108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10a:	2200      	movs	r2, #0
 800f10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f110:	f001 fd80 	bl	8010c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f114:	1d3a      	adds	r2, r7, #4
 800f116:	f107 0310 	add.w	r3, r7, #16
 800f11a:	4611      	mov	r1, r2
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 feaf 	bl	800fe80 <xTaskCheckForTimeOut>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d123      	bne.n	800f170 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f12a:	f000 f917 	bl	800f35c <prvIsQueueEmpty>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d017      	beq.n	800f164 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f136:	3324      	adds	r3, #36	; 0x24
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	4611      	mov	r1, r2
 800f13c:	4618      	mov	r0, r3
 800f13e:	f000 fdcf 	bl	800fce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f144:	f000 f8b8 	bl	800f2b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f148:	f000 fbec 	bl	800f924 <xTaskResumeAll>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d189      	bne.n	800f066 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f152:	4b10      	ldr	r3, [pc, #64]	; (800f194 <xQueueReceive+0x1c8>)
 800f154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	e780      	b.n	800f066 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f166:	f000 f8a7 	bl	800f2b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f16a:	f000 fbdb 	bl	800f924 <xTaskResumeAll>
 800f16e:	e77a      	b.n	800f066 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f172:	f000 f8a1 	bl	800f2b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f176:	f000 fbd5 	bl	800f924 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f17a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f17c:	f000 f8ee 	bl	800f35c <prvIsQueueEmpty>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	f43f af6f 	beq.w	800f066 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3730      	adds	r7, #48	; 0x30
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	e000ed04 	.word	0xe000ed04

0800f198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10d      	bne.n	800f1d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d14d      	bne.n	800f25a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 ffc4 	bl	8010150 <xTaskPriorityDisinherit>
 800f1c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	609a      	str	r2, [r3, #8]
 800f1d0:	e043      	b.n	800f25a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d119      	bne.n	800f20c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6858      	ldr	r0, [r3, #4]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	68b9      	ldr	r1, [r7, #8]
 800f1e4:	f002 fbbb 	bl	801195e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	685a      	ldr	r2, [r3, #4]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f0:	441a      	add	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	685a      	ldr	r2, [r3, #4]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d32b      	bcc.n	800f25a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	605a      	str	r2, [r3, #4]
 800f20a:	e026      	b.n	800f25a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68d8      	ldr	r0, [r3, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f214:	461a      	mov	r2, r3
 800f216:	68b9      	ldr	r1, [r7, #8]
 800f218:	f002 fba1 	bl	801195e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	68da      	ldr	r2, [r3, #12]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f224:	425b      	negs	r3, r3
 800f226:	441a      	add	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68da      	ldr	r2, [r3, #12]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	429a      	cmp	r2, r3
 800f236:	d207      	bcs.n	800f248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	689a      	ldr	r2, [r3, #8]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f240:	425b      	negs	r3, r3
 800f242:	441a      	add	r2, r3
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d105      	bne.n	800f25a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d002      	beq.n	800f25a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	3b01      	subs	r3, #1
 800f258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	1c5a      	adds	r2, r3, #1
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f262:	697b      	ldr	r3, [r7, #20]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d018      	beq.n	800f2b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	68da      	ldr	r2, [r3, #12]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f286:	441a      	add	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	68da      	ldr	r2, [r3, #12]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	429a      	cmp	r2, r3
 800f296:	d303      	bcc.n	800f2a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	68d9      	ldr	r1, [r3, #12]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	6838      	ldr	r0, [r7, #0]
 800f2ac:	f002 fb57 	bl	801195e <memcpy>
	}
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f2c0:	f001 fc74 	bl	8010bac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2cc:	e011      	b.n	800f2f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d012      	beq.n	800f2fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	3324      	adds	r3, #36	; 0x24
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f000 fd54 	bl	800fd88 <xTaskRemoveFromEventList>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f2e6:	f000 fe31 	bl	800ff4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	b2db      	uxtb	r3, r3
 800f2f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	dce9      	bgt.n	800f2ce <prvUnlockQueue+0x16>
 800f2fa:	e000      	b.n	800f2fe <prvUnlockQueue+0x46>
					break;
 800f2fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	22ff      	movs	r2, #255	; 0xff
 800f302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f306:	f001 fc85 	bl	8010c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f30a:	f001 fc4f 	bl	8010bac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f316:	e011      	b.n	800f33c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d012      	beq.n	800f346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3310      	adds	r3, #16
 800f324:	4618      	mov	r0, r3
 800f326:	f000 fd2f 	bl	800fd88 <xTaskRemoveFromEventList>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f330:	f000 fe0c 	bl	800ff4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f334:	7bbb      	ldrb	r3, [r7, #14]
 800f336:	3b01      	subs	r3, #1
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f33c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f340:	2b00      	cmp	r3, #0
 800f342:	dce9      	bgt.n	800f318 <prvUnlockQueue+0x60>
 800f344:	e000      	b.n	800f348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	22ff      	movs	r2, #255	; 0xff
 800f34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f350:	f001 fc60 	bl	8010c14 <vPortExitCritical>
}
 800f354:	bf00      	nop
 800f356:	3710      	adds	r7, #16
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f364:	f001 fc22 	bl	8010bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d102      	bne.n	800f376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f370:	2301      	movs	r3, #1
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	e001      	b.n	800f37a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f376:	2300      	movs	r3, #0
 800f378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f37a:	f001 fc4b 	bl	8010c14 <vPortExitCritical>

	return xReturn;
 800f37e:	68fb      	ldr	r3, [r7, #12]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f390:	f001 fc0c 	bl	8010bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d102      	bne.n	800f3a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e001      	b.n	800f3aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f3aa:	f001 fc33 	bl	8010c14 <vPortExitCritical>

	return xReturn;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60fb      	str	r3, [r7, #12]
 800f3c6:	e014      	b.n	800f3f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f3c8:	4a0f      	ldr	r2, [pc, #60]	; (800f408 <vQueueAddToRegistry+0x50>)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10b      	bne.n	800f3ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f3d4:	490c      	ldr	r1, [pc, #48]	; (800f408 <vQueueAddToRegistry+0x50>)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	683a      	ldr	r2, [r7, #0]
 800f3da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f3de:	4a0a      	ldr	r2, [pc, #40]	; (800f408 <vQueueAddToRegistry+0x50>)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	00db      	lsls	r3, r3, #3
 800f3e4:	4413      	add	r3, r2
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f3ea:	e006      	b.n	800f3fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	60fb      	str	r3, [r7, #12]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2b07      	cmp	r3, #7
 800f3f6:	d9e7      	bls.n	800f3c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f3f8:	bf00      	nop
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	20003d84 	.word	0x20003d84

0800f40c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b086      	sub	sp, #24
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f41c:	f001 fbc6 	bl	8010bac <vPortEnterCritical>
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f426:	b25b      	sxtb	r3, r3
 800f428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42c:	d103      	bne.n	800f436 <vQueueWaitForMessageRestricted+0x2a>
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f43c:	b25b      	sxtb	r3, r3
 800f43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f442:	d103      	bne.n	800f44c <vQueueWaitForMessageRestricted+0x40>
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	2200      	movs	r2, #0
 800f448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f44c:	f001 fbe2 	bl	8010c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	3324      	adds	r3, #36	; 0x24
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	68b9      	ldr	r1, [r7, #8]
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fc63 	bl	800fd2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f466:	6978      	ldr	r0, [r7, #20]
 800f468:	f7ff ff26 	bl	800f2b8 <prvUnlockQueue>
	}
 800f46c:	bf00      	nop
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f474:	b580      	push	{r7, lr}
 800f476:	b08e      	sub	sp, #56	; 0x38
 800f478:	af04      	add	r7, sp, #16
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10c      	bne.n	800f4a2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48c:	b672      	cpsid	i
 800f48e:	f383 8811 	msr	BASEPRI, r3
 800f492:	f3bf 8f6f 	isb	sy
 800f496:	f3bf 8f4f 	dsb	sy
 800f49a:	b662      	cpsie	i
 800f49c:	623b      	str	r3, [r7, #32]
}
 800f49e:	bf00      	nop
 800f4a0:	e7fe      	b.n	800f4a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10c      	bne.n	800f4c2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800f4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ac:	b672      	cpsid	i
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	b662      	cpsie	i
 800f4bc:	61fb      	str	r3, [r7, #28]
}
 800f4be:	bf00      	nop
 800f4c0:	e7fe      	b.n	800f4c0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f4c2:	235c      	movs	r3, #92	; 0x5c
 800f4c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	2b5c      	cmp	r3, #92	; 0x5c
 800f4ca:	d00c      	beq.n	800f4e6 <xTaskCreateStatic+0x72>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d0:	b672      	cpsid	i
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	b662      	cpsie	i
 800f4e0:	61bb      	str	r3, [r7, #24]
}
 800f4e2:	bf00      	nop
 800f4e4:	e7fe      	b.n	800f4e4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f4e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d01e      	beq.n	800f52c <xTaskCreateStatic+0xb8>
 800f4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d01b      	beq.n	800f52c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f500:	2202      	movs	r2, #2
 800f502:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f506:	2300      	movs	r3, #0
 800f508:	9303      	str	r3, [sp, #12]
 800f50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50c:	9302      	str	r3, [sp, #8]
 800f50e:	f107 0314 	add.w	r3, r7, #20
 800f512:	9301      	str	r3, [sp, #4]
 800f514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	68b9      	ldr	r1, [r7, #8]
 800f51e:	68f8      	ldr	r0, [r7, #12]
 800f520:	f000 f850 	bl	800f5c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f526:	f000 f8df 	bl	800f6e8 <prvAddNewTaskToReadyList>
 800f52a:	e001      	b.n	800f530 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f52c:	2300      	movs	r3, #0
 800f52e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f530:	697b      	ldr	r3, [r7, #20]
	}
 800f532:	4618      	mov	r0, r3
 800f534:	3728      	adds	r7, #40	; 0x28
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b08c      	sub	sp, #48	; 0x30
 800f53e:	af04      	add	r7, sp, #16
 800f540:	60f8      	str	r0, [r7, #12]
 800f542:	60b9      	str	r1, [r7, #8]
 800f544:	603b      	str	r3, [r7, #0]
 800f546:	4613      	mov	r3, r2
 800f548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f54a:	88fb      	ldrh	r3, [r7, #6]
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	4618      	mov	r0, r3
 800f550:	f001 fc58 	bl	8010e04 <pvPortMalloc>
 800f554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d00e      	beq.n	800f57a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f55c:	205c      	movs	r0, #92	; 0x5c
 800f55e:	f001 fc51 	bl	8010e04 <pvPortMalloc>
 800f562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d003      	beq.n	800f572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	697a      	ldr	r2, [r7, #20]
 800f56e:	631a      	str	r2, [r3, #48]	; 0x30
 800f570:	e005      	b.n	800f57e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f572:	6978      	ldr	r0, [r7, #20]
 800f574:	f001 fd10 	bl	8010f98 <vPortFree>
 800f578:	e001      	b.n	800f57e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f57a:	2300      	movs	r3, #0
 800f57c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d017      	beq.n	800f5b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	2200      	movs	r2, #0
 800f588:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f58c:	88fa      	ldrh	r2, [r7, #6]
 800f58e:	2300      	movs	r3, #0
 800f590:	9303      	str	r3, [sp, #12]
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	9302      	str	r3, [sp, #8]
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	9301      	str	r3, [sp, #4]
 800f59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	68b9      	ldr	r1, [r7, #8]
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f000 f80e 	bl	800f5c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5a8:	69f8      	ldr	r0, [r7, #28]
 800f5aa:	f000 f89d 	bl	800f6e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	61bb      	str	r3, [r7, #24]
 800f5b2:	e002      	b.n	800f5ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f5ba:	69bb      	ldr	r3, [r7, #24]
	}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3720      	adds	r7, #32
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b088      	sub	sp, #32
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
 800f5d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	461a      	mov	r2, r3
 800f5dc:	21a5      	movs	r1, #165	; 0xa5
 800f5de:	f002 f8f4 	bl	80117ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5e6:	6879      	ldr	r1, [r7, #4]
 800f5e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f5ec:	440b      	add	r3, r1
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	4413      	add	r3, r2
 800f5f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	f023 0307 	bic.w	r3, r3, #7
 800f5fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	f003 0307 	and.w	r3, r3, #7
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00c      	beq.n	800f620 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60a:	b672      	cpsid	i
 800f60c:	f383 8811 	msr	BASEPRI, r3
 800f610:	f3bf 8f6f 	isb	sy
 800f614:	f3bf 8f4f 	dsb	sy
 800f618:	b662      	cpsie	i
 800f61a:	617b      	str	r3, [r7, #20]
}
 800f61c:	bf00      	nop
 800f61e:	e7fe      	b.n	800f61e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d01f      	beq.n	800f666 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f626:	2300      	movs	r3, #0
 800f628:	61fb      	str	r3, [r7, #28]
 800f62a:	e012      	b.n	800f652 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	4413      	add	r3, r2
 800f632:	7819      	ldrb	r1, [r3, #0]
 800f634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	4413      	add	r3, r2
 800f63a:	3334      	adds	r3, #52	; 0x34
 800f63c:	460a      	mov	r2, r1
 800f63e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f640:	68ba      	ldr	r2, [r7, #8]
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	4413      	add	r3, r2
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d006      	beq.n	800f65a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	3301      	adds	r3, #1
 800f650:	61fb      	str	r3, [r7, #28]
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	2b0f      	cmp	r3, #15
 800f656:	d9e9      	bls.n	800f62c <prvInitialiseNewTask+0x68>
 800f658:	e000      	b.n	800f65c <prvInitialiseNewTask+0x98>
			{
				break;
 800f65a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f664:	e003      	b.n	800f66e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	2200      	movs	r2, #0
 800f66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f670:	2b37      	cmp	r3, #55	; 0x37
 800f672:	d901      	bls.n	800f678 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f674:	2337      	movs	r3, #55	; 0x37
 800f676:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f67c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f686:	2200      	movs	r2, #0
 800f688:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68c:	3304      	adds	r3, #4
 800f68e:	4618      	mov	r0, r3
 800f690:	f7ff f952 	bl	800e938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	3318      	adds	r3, #24
 800f698:	4618      	mov	r0, r3
 800f69a:	f7ff f94d 	bl	800e938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6c2:	683a      	ldr	r2, [r7, #0]
 800f6c4:	68f9      	ldr	r1, [r7, #12]
 800f6c6:	69b8      	ldr	r0, [r7, #24]
 800f6c8:	f001 f964 	bl	8010994 <pxPortInitialiseStack>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6de:	bf00      	nop
 800f6e0:	3720      	adds	r7, #32
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
	...

0800f6e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f6f0:	f001 fa5c 	bl	8010bac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f6f4:	4b2d      	ldr	r3, [pc, #180]	; (800f7ac <prvAddNewTaskToReadyList+0xc4>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	4a2c      	ldr	r2, [pc, #176]	; (800f7ac <prvAddNewTaskToReadyList+0xc4>)
 800f6fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f6fe:	4b2c      	ldr	r3, [pc, #176]	; (800f7b0 <prvAddNewTaskToReadyList+0xc8>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d109      	bne.n	800f71a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f706:	4a2a      	ldr	r2, [pc, #168]	; (800f7b0 <prvAddNewTaskToReadyList+0xc8>)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f70c:	4b27      	ldr	r3, [pc, #156]	; (800f7ac <prvAddNewTaskToReadyList+0xc4>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2b01      	cmp	r3, #1
 800f712:	d110      	bne.n	800f736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f714:	f000 fc3e 	bl	800ff94 <prvInitialiseTaskLists>
 800f718:	e00d      	b.n	800f736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f71a:	4b26      	ldr	r3, [pc, #152]	; (800f7b4 <prvAddNewTaskToReadyList+0xcc>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d109      	bne.n	800f736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f722:	4b23      	ldr	r3, [pc, #140]	; (800f7b0 <prvAddNewTaskToReadyList+0xc8>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d802      	bhi.n	800f736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f730:	4a1f      	ldr	r2, [pc, #124]	; (800f7b0 <prvAddNewTaskToReadyList+0xc8>)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f736:	4b20      	ldr	r3, [pc, #128]	; (800f7b8 <prvAddNewTaskToReadyList+0xd0>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	3301      	adds	r3, #1
 800f73c:	4a1e      	ldr	r2, [pc, #120]	; (800f7b8 <prvAddNewTaskToReadyList+0xd0>)
 800f73e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f740:	4b1d      	ldr	r3, [pc, #116]	; (800f7b8 <prvAddNewTaskToReadyList+0xd0>)
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f74c:	4b1b      	ldr	r3, [pc, #108]	; (800f7bc <prvAddNewTaskToReadyList+0xd4>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	d903      	bls.n	800f75c <prvAddNewTaskToReadyList+0x74>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f758:	4a18      	ldr	r2, [pc, #96]	; (800f7bc <prvAddNewTaskToReadyList+0xd4>)
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f760:	4613      	mov	r3, r2
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	4413      	add	r3, r2
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	4a15      	ldr	r2, [pc, #84]	; (800f7c0 <prvAddNewTaskToReadyList+0xd8>)
 800f76a:	441a      	add	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	3304      	adds	r3, #4
 800f770:	4619      	mov	r1, r3
 800f772:	4610      	mov	r0, r2
 800f774:	f7ff f8ed 	bl	800e952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f778:	f001 fa4c 	bl	8010c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f77c:	4b0d      	ldr	r3, [pc, #52]	; (800f7b4 <prvAddNewTaskToReadyList+0xcc>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00e      	beq.n	800f7a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f784:	4b0a      	ldr	r3, [pc, #40]	; (800f7b0 <prvAddNewTaskToReadyList+0xc8>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78e:	429a      	cmp	r2, r3
 800f790:	d207      	bcs.n	800f7a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f792:	4b0c      	ldr	r3, [pc, #48]	; (800f7c4 <prvAddNewTaskToReadyList+0xdc>)
 800f794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f798:	601a      	str	r2, [r3, #0]
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7a2:	bf00      	nop
 800f7a4:	3708      	adds	r7, #8
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
 800f7aa:	bf00      	nop
 800f7ac:	20004298 	.word	0x20004298
 800f7b0:	20003dc4 	.word	0x20003dc4
 800f7b4:	200042a4 	.word	0x200042a4
 800f7b8:	200042b4 	.word	0x200042b4
 800f7bc:	200042a0 	.word	0x200042a0
 800f7c0:	20003dc8 	.word	0x20003dc8
 800f7c4:	e000ed04 	.word	0xe000ed04

0800f7c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d019      	beq.n	800f80e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f7da:	4b14      	ldr	r3, [pc, #80]	; (800f82c <vTaskDelay+0x64>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00c      	beq.n	800f7fc <vTaskDelay+0x34>
	__asm volatile
 800f7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e6:	b672      	cpsid	i
 800f7e8:	f383 8811 	msr	BASEPRI, r3
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	f3bf 8f4f 	dsb	sy
 800f7f4:	b662      	cpsie	i
 800f7f6:	60bb      	str	r3, [r7, #8]
}
 800f7f8:	bf00      	nop
 800f7fa:	e7fe      	b.n	800f7fa <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f7fc:	f000 f884 	bl	800f908 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f800:	2100      	movs	r1, #0
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fd16 	bl	8010234 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f808:	f000 f88c 	bl	800f924 <xTaskResumeAll>
 800f80c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d107      	bne.n	800f824 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f814:	4b06      	ldr	r3, [pc, #24]	; (800f830 <vTaskDelay+0x68>)
 800f816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f81a:	601a      	str	r2, [r3, #0]
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f824:	bf00      	nop
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	200042c0 	.word	0x200042c0
 800f830:	e000ed04 	.word	0xe000ed04

0800f834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b08a      	sub	sp, #40	; 0x28
 800f838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f83a:	2300      	movs	r3, #0
 800f83c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f83e:	2300      	movs	r3, #0
 800f840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f842:	463a      	mov	r2, r7
 800f844:	1d39      	adds	r1, r7, #4
 800f846:	f107 0308 	add.w	r3, r7, #8
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7ff f820 	bl	800e890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	9202      	str	r2, [sp, #8]
 800f858:	9301      	str	r3, [sp, #4]
 800f85a:	2300      	movs	r3, #0
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	2300      	movs	r3, #0
 800f860:	460a      	mov	r2, r1
 800f862:	4923      	ldr	r1, [pc, #140]	; (800f8f0 <vTaskStartScheduler+0xbc>)
 800f864:	4823      	ldr	r0, [pc, #140]	; (800f8f4 <vTaskStartScheduler+0xc0>)
 800f866:	f7ff fe05 	bl	800f474 <xTaskCreateStatic>
 800f86a:	4603      	mov	r3, r0
 800f86c:	4a22      	ldr	r2, [pc, #136]	; (800f8f8 <vTaskStartScheduler+0xc4>)
 800f86e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f870:	4b21      	ldr	r3, [pc, #132]	; (800f8f8 <vTaskStartScheduler+0xc4>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d002      	beq.n	800f87e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f878:	2301      	movs	r3, #1
 800f87a:	617b      	str	r3, [r7, #20]
 800f87c:	e001      	b.n	800f882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f87e:	2300      	movs	r3, #0
 800f880:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	2b01      	cmp	r3, #1
 800f886:	d102      	bne.n	800f88e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f888:	f000 fd28 	bl	80102dc <xTimerCreateTimerTask>
 800f88c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	2b01      	cmp	r3, #1
 800f892:	d118      	bne.n	800f8c6 <vTaskStartScheduler+0x92>
	__asm volatile
 800f894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f898:	b672      	cpsid	i
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	b662      	cpsie	i
 800f8a8:	613b      	str	r3, [r7, #16]
}
 800f8aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f8ac:	4b13      	ldr	r3, [pc, #76]	; (800f8fc <vTaskStartScheduler+0xc8>)
 800f8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f8b4:	4b12      	ldr	r3, [pc, #72]	; (800f900 <vTaskStartScheduler+0xcc>)
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f8ba:	4b12      	ldr	r3, [pc, #72]	; (800f904 <vTaskStartScheduler+0xd0>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f8c0:	f001 f8f6 	bl	8010ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f8c4:	e010      	b.n	800f8e8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8cc:	d10c      	bne.n	800f8e8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	b672      	cpsid	i
 800f8d4:	f383 8811 	msr	BASEPRI, r3
 800f8d8:	f3bf 8f6f 	isb	sy
 800f8dc:	f3bf 8f4f 	dsb	sy
 800f8e0:	b662      	cpsie	i
 800f8e2:	60fb      	str	r3, [r7, #12]
}
 800f8e4:	bf00      	nop
 800f8e6:	e7fe      	b.n	800f8e6 <vTaskStartScheduler+0xb2>
}
 800f8e8:	bf00      	nop
 800f8ea:	3718      	adds	r7, #24
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	08013e6c 	.word	0x08013e6c
 800f8f4:	0800ff65 	.word	0x0800ff65
 800f8f8:	200042bc 	.word	0x200042bc
 800f8fc:	200042b8 	.word	0x200042b8
 800f900:	200042a4 	.word	0x200042a4
 800f904:	2000429c 	.word	0x2000429c

0800f908 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f908:	b480      	push	{r7}
 800f90a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f90c:	4b04      	ldr	r3, [pc, #16]	; (800f920 <vTaskSuspendAll+0x18>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	3301      	adds	r3, #1
 800f912:	4a03      	ldr	r2, [pc, #12]	; (800f920 <vTaskSuspendAll+0x18>)
 800f914:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f916:	bf00      	nop
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	200042c0 	.word	0x200042c0

0800f924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f92a:	2300      	movs	r3, #0
 800f92c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f92e:	2300      	movs	r3, #0
 800f930:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f932:	4b43      	ldr	r3, [pc, #268]	; (800fa40 <xTaskResumeAll+0x11c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10c      	bne.n	800f954 <xTaskResumeAll+0x30>
	__asm volatile
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	b672      	cpsid	i
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	b662      	cpsie	i
 800f94e:	603b      	str	r3, [r7, #0]
}
 800f950:	bf00      	nop
 800f952:	e7fe      	b.n	800f952 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f954:	f001 f92a 	bl	8010bac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f958:	4b39      	ldr	r3, [pc, #228]	; (800fa40 <xTaskResumeAll+0x11c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	3b01      	subs	r3, #1
 800f95e:	4a38      	ldr	r2, [pc, #224]	; (800fa40 <xTaskResumeAll+0x11c>)
 800f960:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f962:	4b37      	ldr	r3, [pc, #220]	; (800fa40 <xTaskResumeAll+0x11c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d162      	bne.n	800fa30 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f96a:	4b36      	ldr	r3, [pc, #216]	; (800fa44 <xTaskResumeAll+0x120>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d05e      	beq.n	800fa30 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f972:	e02f      	b.n	800f9d4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f974:	4b34      	ldr	r3, [pc, #208]	; (800fa48 <xTaskResumeAll+0x124>)
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	3318      	adds	r3, #24
 800f980:	4618      	mov	r0, r3
 800f982:	f7ff f843 	bl	800ea0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	3304      	adds	r3, #4
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7ff f83e 	bl	800ea0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f994:	4b2d      	ldr	r3, [pc, #180]	; (800fa4c <xTaskResumeAll+0x128>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d903      	bls.n	800f9a4 <xTaskResumeAll+0x80>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a0:	4a2a      	ldr	r2, [pc, #168]	; (800fa4c <xTaskResumeAll+0x128>)
 800f9a2:	6013      	str	r3, [r2, #0]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4a27      	ldr	r2, [pc, #156]	; (800fa50 <xTaskResumeAll+0x12c>)
 800f9b2:	441a      	add	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	f7fe ffc9 	bl	800e952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c4:	4b23      	ldr	r3, [pc, #140]	; (800fa54 <xTaskResumeAll+0x130>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d302      	bcc.n	800f9d4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f9ce:	4b22      	ldr	r3, [pc, #136]	; (800fa58 <xTaskResumeAll+0x134>)
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9d4:	4b1c      	ldr	r3, [pc, #112]	; (800fa48 <xTaskResumeAll+0x124>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1cb      	bne.n	800f974 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f9e2:	f000 fb77 	bl	80100d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f9e6:	4b1d      	ldr	r3, [pc, #116]	; (800fa5c <xTaskResumeAll+0x138>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d010      	beq.n	800fa14 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f9f2:	f000 f859 	bl	800faa8 <xTaskIncrementTick>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d002      	beq.n	800fa02 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f9fc:	4b16      	ldr	r3, [pc, #88]	; (800fa58 <xTaskResumeAll+0x134>)
 800f9fe:	2201      	movs	r2, #1
 800fa00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1f1      	bne.n	800f9f2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800fa0e:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <xTaskResumeAll+0x138>)
 800fa10:	2200      	movs	r2, #0
 800fa12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa14:	4b10      	ldr	r3, [pc, #64]	; (800fa58 <xTaskResumeAll+0x134>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d009      	beq.n	800fa30 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa20:	4b0f      	ldr	r3, [pc, #60]	; (800fa60 <xTaskResumeAll+0x13c>)
 800fa22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa26:	601a      	str	r2, [r3, #0]
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa30:	f001 f8f0 	bl	8010c14 <vPortExitCritical>

	return xAlreadyYielded;
 800fa34:	68bb      	ldr	r3, [r7, #8]
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	200042c0 	.word	0x200042c0
 800fa44:	20004298 	.word	0x20004298
 800fa48:	20004258 	.word	0x20004258
 800fa4c:	200042a0 	.word	0x200042a0
 800fa50:	20003dc8 	.word	0x20003dc8
 800fa54:	20003dc4 	.word	0x20003dc4
 800fa58:	200042ac 	.word	0x200042ac
 800fa5c:	200042a8 	.word	0x200042a8
 800fa60:	e000ed04 	.word	0xe000ed04

0800fa64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fa6a:	4b05      	ldr	r3, [pc, #20]	; (800fa80 <xTaskGetTickCount+0x1c>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fa70:	687b      	ldr	r3, [r7, #4]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	370c      	adds	r7, #12
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	2000429c 	.word	0x2000429c

0800fa84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa8a:	f001 f977 	bl	8010d7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fa8e:	2300      	movs	r3, #0
 800fa90:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fa92:	4b04      	ldr	r3, [pc, #16]	; (800faa4 <xTaskGetTickCountFromISR+0x20>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa98:	683b      	ldr	r3, [r7, #0]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	2000429c 	.word	0x2000429c

0800faa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800faae:	2300      	movs	r3, #0
 800fab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fab2:	4b50      	ldr	r3, [pc, #320]	; (800fbf4 <xTaskIncrementTick+0x14c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f040 808b 	bne.w	800fbd2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fabc:	4b4e      	ldr	r3, [pc, #312]	; (800fbf8 <xTaskIncrementTick+0x150>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	3301      	adds	r3, #1
 800fac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fac4:	4a4c      	ldr	r2, [pc, #304]	; (800fbf8 <xTaskIncrementTick+0x150>)
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	2b00      	cmp	r3, #0
 800face:	d122      	bne.n	800fb16 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fad0:	4b4a      	ldr	r3, [pc, #296]	; (800fbfc <xTaskIncrementTick+0x154>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00c      	beq.n	800faf4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	b672      	cpsid	i
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	b662      	cpsie	i
 800faee:	603b      	str	r3, [r7, #0]
}
 800faf0:	bf00      	nop
 800faf2:	e7fe      	b.n	800faf2 <xTaskIncrementTick+0x4a>
 800faf4:	4b41      	ldr	r3, [pc, #260]	; (800fbfc <xTaskIncrementTick+0x154>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	60fb      	str	r3, [r7, #12]
 800fafa:	4b41      	ldr	r3, [pc, #260]	; (800fc00 <xTaskIncrementTick+0x158>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a3f      	ldr	r2, [pc, #252]	; (800fbfc <xTaskIncrementTick+0x154>)
 800fb00:	6013      	str	r3, [r2, #0]
 800fb02:	4a3f      	ldr	r2, [pc, #252]	; (800fc00 <xTaskIncrementTick+0x158>)
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	6013      	str	r3, [r2, #0]
 800fb08:	4b3e      	ldr	r3, [pc, #248]	; (800fc04 <xTaskIncrementTick+0x15c>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	4a3d      	ldr	r2, [pc, #244]	; (800fc04 <xTaskIncrementTick+0x15c>)
 800fb10:	6013      	str	r3, [r2, #0]
 800fb12:	f000 fadf 	bl	80100d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb16:	4b3c      	ldr	r3, [pc, #240]	; (800fc08 <xTaskIncrementTick+0x160>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d349      	bcc.n	800fbb4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb20:	4b36      	ldr	r3, [pc, #216]	; (800fbfc <xTaskIncrementTick+0x154>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d104      	bne.n	800fb34 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb2a:	4b37      	ldr	r3, [pc, #220]	; (800fc08 <xTaskIncrementTick+0x160>)
 800fb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb30:	601a      	str	r2, [r3, #0]
					break;
 800fb32:	e03f      	b.n	800fbb4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb34:	4b31      	ldr	r3, [pc, #196]	; (800fbfc <xTaskIncrementTick+0x154>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb44:	693a      	ldr	r2, [r7, #16]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d203      	bcs.n	800fb54 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb4c:	4a2e      	ldr	r2, [pc, #184]	; (800fc08 <xTaskIncrementTick+0x160>)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb52:	e02f      	b.n	800fbb4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	3304      	adds	r3, #4
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fe ff57 	bl	800ea0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d004      	beq.n	800fb70 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	3318      	adds	r3, #24
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fe ff4e 	bl	800ea0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb74:	4b25      	ldr	r3, [pc, #148]	; (800fc0c <xTaskIncrementTick+0x164>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d903      	bls.n	800fb84 <xTaskIncrementTick+0xdc>
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb80:	4a22      	ldr	r2, [pc, #136]	; (800fc0c <xTaskIncrementTick+0x164>)
 800fb82:	6013      	str	r3, [r2, #0]
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb88:	4613      	mov	r3, r2
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	4413      	add	r3, r2
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4a1f      	ldr	r2, [pc, #124]	; (800fc10 <xTaskIncrementTick+0x168>)
 800fb92:	441a      	add	r2, r3
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	3304      	adds	r3, #4
 800fb98:	4619      	mov	r1, r3
 800fb9a:	4610      	mov	r0, r2
 800fb9c:	f7fe fed9 	bl	800e952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba4:	4b1b      	ldr	r3, [pc, #108]	; (800fc14 <xTaskIncrementTick+0x16c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d3b8      	bcc.n	800fb20 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbb2:	e7b5      	b.n	800fb20 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fbb4:	4b17      	ldr	r3, [pc, #92]	; (800fc14 <xTaskIncrementTick+0x16c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbba:	4915      	ldr	r1, [pc, #84]	; (800fc10 <xTaskIncrementTick+0x168>)
 800fbbc:	4613      	mov	r3, r2
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	4413      	add	r3, r2
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	440b      	add	r3, r1
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d907      	bls.n	800fbdc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	617b      	str	r3, [r7, #20]
 800fbd0:	e004      	b.n	800fbdc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fbd2:	4b11      	ldr	r3, [pc, #68]	; (800fc18 <xTaskIncrementTick+0x170>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	4a0f      	ldr	r2, [pc, #60]	; (800fc18 <xTaskIncrementTick+0x170>)
 800fbda:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <xTaskIncrementTick+0x174>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d001      	beq.n	800fbe8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fbe8:	697b      	ldr	r3, [r7, #20]
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	200042c0 	.word	0x200042c0
 800fbf8:	2000429c 	.word	0x2000429c
 800fbfc:	20004250 	.word	0x20004250
 800fc00:	20004254 	.word	0x20004254
 800fc04:	200042b0 	.word	0x200042b0
 800fc08:	200042b8 	.word	0x200042b8
 800fc0c:	200042a0 	.word	0x200042a0
 800fc10:	20003dc8 	.word	0x20003dc8
 800fc14:	20003dc4 	.word	0x20003dc4
 800fc18:	200042a8 	.word	0x200042a8
 800fc1c:	200042ac 	.word	0x200042ac

0800fc20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc20:	b480      	push	{r7}
 800fc22:	b085      	sub	sp, #20
 800fc24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc26:	4b29      	ldr	r3, [pc, #164]	; (800fccc <vTaskSwitchContext+0xac>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d003      	beq.n	800fc36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc2e:	4b28      	ldr	r3, [pc, #160]	; (800fcd0 <vTaskSwitchContext+0xb0>)
 800fc30:	2201      	movs	r2, #1
 800fc32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc34:	e043      	b.n	800fcbe <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800fc36:	4b26      	ldr	r3, [pc, #152]	; (800fcd0 <vTaskSwitchContext+0xb0>)
 800fc38:	2200      	movs	r2, #0
 800fc3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc3c:	4b25      	ldr	r3, [pc, #148]	; (800fcd4 <vTaskSwitchContext+0xb4>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	60fb      	str	r3, [r7, #12]
 800fc42:	e012      	b.n	800fc6a <vTaskSwitchContext+0x4a>
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d10c      	bne.n	800fc64 <vTaskSwitchContext+0x44>
	__asm volatile
 800fc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4e:	b672      	cpsid	i
 800fc50:	f383 8811 	msr	BASEPRI, r3
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	f3bf 8f4f 	dsb	sy
 800fc5c:	b662      	cpsie	i
 800fc5e:	607b      	str	r3, [r7, #4]
}
 800fc60:	bf00      	nop
 800fc62:	e7fe      	b.n	800fc62 <vTaskSwitchContext+0x42>
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	3b01      	subs	r3, #1
 800fc68:	60fb      	str	r3, [r7, #12]
 800fc6a:	491b      	ldr	r1, [pc, #108]	; (800fcd8 <vTaskSwitchContext+0xb8>)
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	440b      	add	r3, r1
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d0e2      	beq.n	800fc44 <vTaskSwitchContext+0x24>
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	4613      	mov	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	4413      	add	r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	4a13      	ldr	r2, [pc, #76]	; (800fcd8 <vTaskSwitchContext+0xb8>)
 800fc8a:	4413      	add	r3, r2
 800fc8c:	60bb      	str	r3, [r7, #8]
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	605a      	str	r2, [r3, #4]
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	3308      	adds	r3, #8
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d104      	bne.n	800fcae <vTaskSwitchContext+0x8e>
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	685a      	ldr	r2, [r3, #4]
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	605a      	str	r2, [r3, #4]
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	4a09      	ldr	r2, [pc, #36]	; (800fcdc <vTaskSwitchContext+0xbc>)
 800fcb6:	6013      	str	r3, [r2, #0]
 800fcb8:	4a06      	ldr	r2, [pc, #24]	; (800fcd4 <vTaskSwitchContext+0xb4>)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6013      	str	r3, [r2, #0]
}
 800fcbe:	bf00      	nop
 800fcc0:	3714      	adds	r7, #20
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	200042c0 	.word	0x200042c0
 800fcd0:	200042ac 	.word	0x200042ac
 800fcd4:	200042a0 	.word	0x200042a0
 800fcd8:	20003dc8 	.word	0x20003dc8
 800fcdc:	20003dc4 	.word	0x20003dc4

0800fce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d10c      	bne.n	800fd0a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	b672      	cpsid	i
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	b662      	cpsie	i
 800fd04:	60fb      	str	r3, [r7, #12]
}
 800fd06:	bf00      	nop
 800fd08:	e7fe      	b.n	800fd08 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd0a:	4b07      	ldr	r3, [pc, #28]	; (800fd28 <vTaskPlaceOnEventList+0x48>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3318      	adds	r3, #24
 800fd10:	4619      	mov	r1, r3
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f7fe fe41 	bl	800e99a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd18:	2101      	movs	r1, #1
 800fd1a:	6838      	ldr	r0, [r7, #0]
 800fd1c:	f000 fa8a 	bl	8010234 <prvAddCurrentTaskToDelayedList>
}
 800fd20:	bf00      	nop
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20003dc4 	.word	0x20003dc4

0800fd2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b086      	sub	sp, #24
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10c      	bne.n	800fd58 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	b672      	cpsid	i
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	b662      	cpsie	i
 800fd52:	617b      	str	r3, [r7, #20]
}
 800fd54:	bf00      	nop
 800fd56:	e7fe      	b.n	800fd56 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd58:	4b0a      	ldr	r3, [pc, #40]	; (800fd84 <vTaskPlaceOnEventListRestricted+0x58>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	3318      	adds	r3, #24
 800fd5e:	4619      	mov	r1, r3
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f7fe fdf6 	bl	800e952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d002      	beq.n	800fd72 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800fd6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fd72:	6879      	ldr	r1, [r7, #4]
 800fd74:	68b8      	ldr	r0, [r7, #8]
 800fd76:	f000 fa5d 	bl	8010234 <prvAddCurrentTaskToDelayedList>
	}
 800fd7a:	bf00      	nop
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	20003dc4 	.word	0x20003dc4

0800fd88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10c      	bne.n	800fdb8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	b672      	cpsid	i
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	b662      	cpsie	i
 800fdb2:	60fb      	str	r3, [r7, #12]
}
 800fdb4:	bf00      	nop
 800fdb6:	e7fe      	b.n	800fdb6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	3318      	adds	r3, #24
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fe fe25 	bl	800ea0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdc2:	4b1e      	ldr	r3, [pc, #120]	; (800fe3c <xTaskRemoveFromEventList+0xb4>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d11d      	bne.n	800fe06 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	3304      	adds	r3, #4
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fe fe1c 	bl	800ea0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd8:	4b19      	ldr	r3, [pc, #100]	; (800fe40 <xTaskRemoveFromEventList+0xb8>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d903      	bls.n	800fde8 <xTaskRemoveFromEventList+0x60>
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde4:	4a16      	ldr	r2, [pc, #88]	; (800fe40 <xTaskRemoveFromEventList+0xb8>)
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdec:	4613      	mov	r3, r2
 800fdee:	009b      	lsls	r3, r3, #2
 800fdf0:	4413      	add	r3, r2
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	4a13      	ldr	r2, [pc, #76]	; (800fe44 <xTaskRemoveFromEventList+0xbc>)
 800fdf6:	441a      	add	r2, r3
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	3304      	adds	r3, #4
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	4610      	mov	r0, r2
 800fe00:	f7fe fda7 	bl	800e952 <vListInsertEnd>
 800fe04:	e005      	b.n	800fe12 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	3318      	adds	r3, #24
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	480e      	ldr	r0, [pc, #56]	; (800fe48 <xTaskRemoveFromEventList+0xc0>)
 800fe0e:	f7fe fda0 	bl	800e952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe16:	4b0d      	ldr	r3, [pc, #52]	; (800fe4c <xTaskRemoveFromEventList+0xc4>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d905      	bls.n	800fe2c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe20:	2301      	movs	r3, #1
 800fe22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe24:	4b0a      	ldr	r3, [pc, #40]	; (800fe50 <xTaskRemoveFromEventList+0xc8>)
 800fe26:	2201      	movs	r2, #1
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	e001      	b.n	800fe30 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe30:	697b      	ldr	r3, [r7, #20]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	200042c0 	.word	0x200042c0
 800fe40:	200042a0 	.word	0x200042a0
 800fe44:	20003dc8 	.word	0x20003dc8
 800fe48:	20004258 	.word	0x20004258
 800fe4c:	20003dc4 	.word	0x20003dc4
 800fe50:	200042ac 	.word	0x200042ac

0800fe54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe5c:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <vTaskInternalSetTimeOutState+0x24>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe64:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <vTaskInternalSetTimeOutState+0x28>)
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	605a      	str	r2, [r3, #4]
}
 800fe6c:	bf00      	nop
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr
 800fe78:	200042b0 	.word	0x200042b0
 800fe7c:	2000429c 	.word	0x2000429c

0800fe80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d10c      	bne.n	800feaa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fe90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe94:	b672      	cpsid	i
 800fe96:	f383 8811 	msr	BASEPRI, r3
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	f3bf 8f4f 	dsb	sy
 800fea2:	b662      	cpsie	i
 800fea4:	613b      	str	r3, [r7, #16]
}
 800fea6:	bf00      	nop
 800fea8:	e7fe      	b.n	800fea8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d10c      	bne.n	800feca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	b672      	cpsid	i
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	b662      	cpsie	i
 800fec4:	60fb      	str	r3, [r7, #12]
}
 800fec6:	bf00      	nop
 800fec8:	e7fe      	b.n	800fec8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800feca:	f000 fe6f 	bl	8010bac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fece:	4b1d      	ldr	r3, [pc, #116]	; (800ff44 <xTaskCheckForTimeOut+0xc4>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	69ba      	ldr	r2, [r7, #24]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee6:	d102      	bne.n	800feee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fee8:	2300      	movs	r3, #0
 800feea:	61fb      	str	r3, [r7, #28]
 800feec:	e023      	b.n	800ff36 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	4b15      	ldr	r3, [pc, #84]	; (800ff48 <xTaskCheckForTimeOut+0xc8>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d007      	beq.n	800ff0a <xTaskCheckForTimeOut+0x8a>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	69ba      	ldr	r2, [r7, #24]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d302      	bcc.n	800ff0a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff04:	2301      	movs	r3, #1
 800ff06:	61fb      	str	r3, [r7, #28]
 800ff08:	e015      	b.n	800ff36 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	697a      	ldr	r2, [r7, #20]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d20b      	bcs.n	800ff2c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	1ad2      	subs	r2, r2, r3
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f7ff ff97 	bl	800fe54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff26:	2300      	movs	r3, #0
 800ff28:	61fb      	str	r3, [r7, #28]
 800ff2a:	e004      	b.n	800ff36 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff32:	2301      	movs	r3, #1
 800ff34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff36:	f000 fe6d 	bl	8010c14 <vPortExitCritical>

	return xReturn;
 800ff3a:	69fb      	ldr	r3, [r7, #28]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3720      	adds	r7, #32
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	2000429c 	.word	0x2000429c
 800ff48:	200042b0 	.word	0x200042b0

0800ff4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff50:	4b03      	ldr	r3, [pc, #12]	; (800ff60 <vTaskMissedYield+0x14>)
 800ff52:	2201      	movs	r2, #1
 800ff54:	601a      	str	r2, [r3, #0]
}
 800ff56:	bf00      	nop
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	200042ac 	.word	0x200042ac

0800ff64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff6c:	f000 f852 	bl	8010014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff70:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <prvIdleTask+0x28>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d9f9      	bls.n	800ff6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff78:	4b05      	ldr	r3, [pc, #20]	; (800ff90 <prvIdleTask+0x2c>)
 800ff7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff7e:	601a      	str	r2, [r3, #0]
 800ff80:	f3bf 8f4f 	dsb	sy
 800ff84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ff88:	e7f0      	b.n	800ff6c <prvIdleTask+0x8>
 800ff8a:	bf00      	nop
 800ff8c:	20003dc8 	.word	0x20003dc8
 800ff90:	e000ed04 	.word	0xe000ed04

0800ff94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	607b      	str	r3, [r7, #4]
 800ff9e:	e00c      	b.n	800ffba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	4413      	add	r3, r2
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	4a12      	ldr	r2, [pc, #72]	; (800fff4 <prvInitialiseTaskLists+0x60>)
 800ffac:	4413      	add	r3, r2
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe fca2 	bl	800e8f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	607b      	str	r3, [r7, #4]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2b37      	cmp	r3, #55	; 0x37
 800ffbe:	d9ef      	bls.n	800ffa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ffc0:	480d      	ldr	r0, [pc, #52]	; (800fff8 <prvInitialiseTaskLists+0x64>)
 800ffc2:	f7fe fc99 	bl	800e8f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ffc6:	480d      	ldr	r0, [pc, #52]	; (800fffc <prvInitialiseTaskLists+0x68>)
 800ffc8:	f7fe fc96 	bl	800e8f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ffcc:	480c      	ldr	r0, [pc, #48]	; (8010000 <prvInitialiseTaskLists+0x6c>)
 800ffce:	f7fe fc93 	bl	800e8f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ffd2:	480c      	ldr	r0, [pc, #48]	; (8010004 <prvInitialiseTaskLists+0x70>)
 800ffd4:	f7fe fc90 	bl	800e8f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ffd8:	480b      	ldr	r0, [pc, #44]	; (8010008 <prvInitialiseTaskLists+0x74>)
 800ffda:	f7fe fc8d 	bl	800e8f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ffde:	4b0b      	ldr	r3, [pc, #44]	; (801000c <prvInitialiseTaskLists+0x78>)
 800ffe0:	4a05      	ldr	r2, [pc, #20]	; (800fff8 <prvInitialiseTaskLists+0x64>)
 800ffe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ffe4:	4b0a      	ldr	r3, [pc, #40]	; (8010010 <prvInitialiseTaskLists+0x7c>)
 800ffe6:	4a05      	ldr	r2, [pc, #20]	; (800fffc <prvInitialiseTaskLists+0x68>)
 800ffe8:	601a      	str	r2, [r3, #0]
}
 800ffea:	bf00      	nop
 800ffec:	3708      	adds	r7, #8
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	20003dc8 	.word	0x20003dc8
 800fff8:	20004228 	.word	0x20004228
 800fffc:	2000423c 	.word	0x2000423c
 8010000:	20004258 	.word	0x20004258
 8010004:	2000426c 	.word	0x2000426c
 8010008:	20004284 	.word	0x20004284
 801000c:	20004250 	.word	0x20004250
 8010010:	20004254 	.word	0x20004254

08010014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801001a:	e019      	b.n	8010050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801001c:	f000 fdc6 	bl	8010bac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010020:	4b10      	ldr	r3, [pc, #64]	; (8010064 <prvCheckTasksWaitingTermination+0x50>)
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	3304      	adds	r3, #4
 801002c:	4618      	mov	r0, r3
 801002e:	f7fe fced 	bl	800ea0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010032:	4b0d      	ldr	r3, [pc, #52]	; (8010068 <prvCheckTasksWaitingTermination+0x54>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	3b01      	subs	r3, #1
 8010038:	4a0b      	ldr	r2, [pc, #44]	; (8010068 <prvCheckTasksWaitingTermination+0x54>)
 801003a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801003c:	4b0b      	ldr	r3, [pc, #44]	; (801006c <prvCheckTasksWaitingTermination+0x58>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	3b01      	subs	r3, #1
 8010042:	4a0a      	ldr	r2, [pc, #40]	; (801006c <prvCheckTasksWaitingTermination+0x58>)
 8010044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010046:	f000 fde5 	bl	8010c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 f810 	bl	8010070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010050:	4b06      	ldr	r3, [pc, #24]	; (801006c <prvCheckTasksWaitingTermination+0x58>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1e1      	bne.n	801001c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010058:	bf00      	nop
 801005a:	bf00      	nop
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
 8010062:	bf00      	nop
 8010064:	2000426c 	.word	0x2000426c
 8010068:	20004298 	.word	0x20004298
 801006c:	20004280 	.word	0x20004280

08010070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801007e:	2b00      	cmp	r3, #0
 8010080:	d108      	bne.n	8010094 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010086:	4618      	mov	r0, r3
 8010088:	f000 ff86 	bl	8010f98 <vPortFree>
				vPortFree( pxTCB );
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 ff83 	bl	8010f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010092:	e01a      	b.n	80100ca <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801009a:	2b01      	cmp	r3, #1
 801009c:	d103      	bne.n	80100a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 ff7a 	bl	8010f98 <vPortFree>
	}
 80100a4:	e011      	b.n	80100ca <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d00c      	beq.n	80100ca <prvDeleteTCB+0x5a>
	__asm volatile
 80100b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b4:	b672      	cpsid	i
 80100b6:	f383 8811 	msr	BASEPRI, r3
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	f3bf 8f4f 	dsb	sy
 80100c2:	b662      	cpsie	i
 80100c4:	60fb      	str	r3, [r7, #12]
}
 80100c6:	bf00      	nop
 80100c8:	e7fe      	b.n	80100c8 <prvDeleteTCB+0x58>
	}
 80100ca:	bf00      	nop
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100da:	4b0c      	ldr	r3, [pc, #48]	; (801010c <prvResetNextTaskUnblockTime+0x38>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d104      	bne.n	80100ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80100e4:	4b0a      	ldr	r3, [pc, #40]	; (8010110 <prvResetNextTaskUnblockTime+0x3c>)
 80100e6:	f04f 32ff 	mov.w	r2, #4294967295
 80100ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80100ec:	e008      	b.n	8010100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100ee:	4b07      	ldr	r3, [pc, #28]	; (801010c <prvResetNextTaskUnblockTime+0x38>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	4a04      	ldr	r2, [pc, #16]	; (8010110 <prvResetNextTaskUnblockTime+0x3c>)
 80100fe:	6013      	str	r3, [r2, #0]
}
 8010100:	bf00      	nop
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr
 801010c:	20004250 	.word	0x20004250
 8010110:	200042b8 	.word	0x200042b8

08010114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801011a:	4b0b      	ldr	r3, [pc, #44]	; (8010148 <xTaskGetSchedulerState+0x34>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d102      	bne.n	8010128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010122:	2301      	movs	r3, #1
 8010124:	607b      	str	r3, [r7, #4]
 8010126:	e008      	b.n	801013a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010128:	4b08      	ldr	r3, [pc, #32]	; (801014c <xTaskGetSchedulerState+0x38>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d102      	bne.n	8010136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010130:	2302      	movs	r3, #2
 8010132:	607b      	str	r3, [r7, #4]
 8010134:	e001      	b.n	801013a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010136:	2300      	movs	r3, #0
 8010138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801013a:	687b      	ldr	r3, [r7, #4]
	}
 801013c:	4618      	mov	r0, r3
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr
 8010148:	200042a4 	.word	0x200042a4
 801014c:	200042c0 	.word	0x200042c0

08010150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801015c:	2300      	movs	r3, #0
 801015e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d05a      	beq.n	801021c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010166:	4b30      	ldr	r3, [pc, #192]	; (8010228 <xTaskPriorityDisinherit+0xd8>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	693a      	ldr	r2, [r7, #16]
 801016c:	429a      	cmp	r2, r3
 801016e:	d00c      	beq.n	801018a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	b672      	cpsid	i
 8010176:	f383 8811 	msr	BASEPRI, r3
 801017a:	f3bf 8f6f 	isb	sy
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	b662      	cpsie	i
 8010184:	60fb      	str	r3, [r7, #12]
}
 8010186:	bf00      	nop
 8010188:	e7fe      	b.n	8010188 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801018e:	2b00      	cmp	r3, #0
 8010190:	d10c      	bne.n	80101ac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010196:	b672      	cpsid	i
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	b662      	cpsie	i
 80101a6:	60bb      	str	r3, [r7, #8]
}
 80101a8:	bf00      	nop
 80101aa:	e7fe      	b.n	80101aa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101b0:	1e5a      	subs	r2, r3, #1
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101be:	429a      	cmp	r2, r3
 80101c0:	d02c      	beq.n	801021c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d128      	bne.n	801021c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	3304      	adds	r3, #4
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fe fc1c 	bl	800ea0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ec:	4b0f      	ldr	r3, [pc, #60]	; (801022c <xTaskPriorityDisinherit+0xdc>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d903      	bls.n	80101fc <xTaskPriorityDisinherit+0xac>
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f8:	4a0c      	ldr	r2, [pc, #48]	; (801022c <xTaskPriorityDisinherit+0xdc>)
 80101fa:	6013      	str	r3, [r2, #0]
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010200:	4613      	mov	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4a09      	ldr	r2, [pc, #36]	; (8010230 <xTaskPriorityDisinherit+0xe0>)
 801020a:	441a      	add	r2, r3
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	3304      	adds	r3, #4
 8010210:	4619      	mov	r1, r3
 8010212:	4610      	mov	r0, r2
 8010214:	f7fe fb9d 	bl	800e952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010218:	2301      	movs	r3, #1
 801021a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801021c:	697b      	ldr	r3, [r7, #20]
	}
 801021e:	4618      	mov	r0, r3
 8010220:	3718      	adds	r7, #24
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	20003dc4 	.word	0x20003dc4
 801022c:	200042a0 	.word	0x200042a0
 8010230:	20003dc8 	.word	0x20003dc8

08010234 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801023e:	4b21      	ldr	r3, [pc, #132]	; (80102c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010244:	4b20      	ldr	r3, [pc, #128]	; (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3304      	adds	r3, #4
 801024a:	4618      	mov	r0, r3
 801024c:	f7fe fbde 	bl	800ea0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010256:	d10a      	bne.n	801026e <prvAddCurrentTaskToDelayedList+0x3a>
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d007      	beq.n	801026e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801025e:	4b1a      	ldr	r3, [pc, #104]	; (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3304      	adds	r3, #4
 8010264:	4619      	mov	r1, r3
 8010266:	4819      	ldr	r0, [pc, #100]	; (80102cc <prvAddCurrentTaskToDelayedList+0x98>)
 8010268:	f7fe fb73 	bl	800e952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801026c:	e026      	b.n	80102bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	4413      	add	r3, r2
 8010274:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010276:	4b14      	ldr	r3, [pc, #80]	; (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	68ba      	ldr	r2, [r7, #8]
 801027c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	429a      	cmp	r2, r3
 8010284:	d209      	bcs.n	801029a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010286:	4b12      	ldr	r3, [pc, #72]	; (80102d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	4b0f      	ldr	r3, [pc, #60]	; (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	3304      	adds	r3, #4
 8010290:	4619      	mov	r1, r3
 8010292:	4610      	mov	r0, r2
 8010294:	f7fe fb81 	bl	800e99a <vListInsert>
}
 8010298:	e010      	b.n	80102bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801029a:	4b0e      	ldr	r3, [pc, #56]	; (80102d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	4b0a      	ldr	r3, [pc, #40]	; (80102c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3304      	adds	r3, #4
 80102a4:	4619      	mov	r1, r3
 80102a6:	4610      	mov	r0, r2
 80102a8:	f7fe fb77 	bl	800e99a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102ac:	4b0a      	ldr	r3, [pc, #40]	; (80102d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	68ba      	ldr	r2, [r7, #8]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d202      	bcs.n	80102bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80102b6:	4a08      	ldr	r2, [pc, #32]	; (80102d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	6013      	str	r3, [r2, #0]
}
 80102bc:	bf00      	nop
 80102be:	3710      	adds	r7, #16
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	2000429c 	.word	0x2000429c
 80102c8:	20003dc4 	.word	0x20003dc4
 80102cc:	20004284 	.word	0x20004284
 80102d0:	20004254 	.word	0x20004254
 80102d4:	20004250 	.word	0x20004250
 80102d8:	200042b8 	.word	0x200042b8

080102dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b08a      	sub	sp, #40	; 0x28
 80102e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80102e6:	f000 fb15 	bl	8010914 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80102ea:	4b1d      	ldr	r3, [pc, #116]	; (8010360 <xTimerCreateTimerTask+0x84>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d021      	beq.n	8010336 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80102f6:	2300      	movs	r3, #0
 80102f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80102fa:	1d3a      	adds	r2, r7, #4
 80102fc:	f107 0108 	add.w	r1, r7, #8
 8010300:	f107 030c 	add.w	r3, r7, #12
 8010304:	4618      	mov	r0, r3
 8010306:	f7fe fadd 	bl	800e8c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801030a:	6879      	ldr	r1, [r7, #4]
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	9202      	str	r2, [sp, #8]
 8010312:	9301      	str	r3, [sp, #4]
 8010314:	2302      	movs	r3, #2
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	2300      	movs	r3, #0
 801031a:	460a      	mov	r2, r1
 801031c:	4911      	ldr	r1, [pc, #68]	; (8010364 <xTimerCreateTimerTask+0x88>)
 801031e:	4812      	ldr	r0, [pc, #72]	; (8010368 <xTimerCreateTimerTask+0x8c>)
 8010320:	f7ff f8a8 	bl	800f474 <xTaskCreateStatic>
 8010324:	4603      	mov	r3, r0
 8010326:	4a11      	ldr	r2, [pc, #68]	; (801036c <xTimerCreateTimerTask+0x90>)
 8010328:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801032a:	4b10      	ldr	r3, [pc, #64]	; (801036c <xTimerCreateTimerTask+0x90>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d001      	beq.n	8010336 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010332:	2301      	movs	r3, #1
 8010334:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10c      	bne.n	8010356 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	b672      	cpsid	i
 8010342:	f383 8811 	msr	BASEPRI, r3
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	b662      	cpsie	i
 8010350:	613b      	str	r3, [r7, #16]
}
 8010352:	bf00      	nop
 8010354:	e7fe      	b.n	8010354 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010356:	697b      	ldr	r3, [r7, #20]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3718      	adds	r7, #24
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	200042f4 	.word	0x200042f4
 8010364:	08013e74 	.word	0x08013e74
 8010368:	080104ad 	.word	0x080104ad
 801036c:	200042f8 	.word	0x200042f8

08010370 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	; 0x28
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801037e:	2300      	movs	r3, #0
 8010380:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10c      	bne.n	80103a2 <xTimerGenericCommand+0x32>
	__asm volatile
 8010388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038c:	b672      	cpsid	i
 801038e:	f383 8811 	msr	BASEPRI, r3
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	f3bf 8f4f 	dsb	sy
 801039a:	b662      	cpsie	i
 801039c:	623b      	str	r3, [r7, #32]
}
 801039e:	bf00      	nop
 80103a0:	e7fe      	b.n	80103a0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80103a2:	4b1a      	ldr	r3, [pc, #104]	; (801040c <xTimerGenericCommand+0x9c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d02a      	beq.n	8010400 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	2b05      	cmp	r3, #5
 80103ba:	dc18      	bgt.n	80103ee <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103bc:	f7ff feaa 	bl	8010114 <xTaskGetSchedulerState>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	d109      	bne.n	80103da <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103c6:	4b11      	ldr	r3, [pc, #68]	; (801040c <xTimerGenericCommand+0x9c>)
 80103c8:	6818      	ldr	r0, [r3, #0]
 80103ca:	f107 0110 	add.w	r1, r7, #16
 80103ce:	2300      	movs	r3, #0
 80103d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103d2:	f7fe fc55 	bl	800ec80 <xQueueGenericSend>
 80103d6:	6278      	str	r0, [r7, #36]	; 0x24
 80103d8:	e012      	b.n	8010400 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103da:	4b0c      	ldr	r3, [pc, #48]	; (801040c <xTimerGenericCommand+0x9c>)
 80103dc:	6818      	ldr	r0, [r3, #0]
 80103de:	f107 0110 	add.w	r1, r7, #16
 80103e2:	2300      	movs	r3, #0
 80103e4:	2200      	movs	r2, #0
 80103e6:	f7fe fc4b 	bl	800ec80 <xQueueGenericSend>
 80103ea:	6278      	str	r0, [r7, #36]	; 0x24
 80103ec:	e008      	b.n	8010400 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80103ee:	4b07      	ldr	r3, [pc, #28]	; (801040c <xTimerGenericCommand+0x9c>)
 80103f0:	6818      	ldr	r0, [r3, #0]
 80103f2:	f107 0110 	add.w	r1, r7, #16
 80103f6:	2300      	movs	r3, #0
 80103f8:	683a      	ldr	r2, [r7, #0]
 80103fa:	f7fe fd47 	bl	800ee8c <xQueueGenericSendFromISR>
 80103fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010402:	4618      	mov	r0, r3
 8010404:	3728      	adds	r7, #40	; 0x28
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	200042f4 	.word	0x200042f4

08010410 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b088      	sub	sp, #32
 8010414:	af02      	add	r7, sp, #8
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801041a:	4b23      	ldr	r3, [pc, #140]	; (80104a8 <prvProcessExpiredTimer+0x98>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	3304      	adds	r3, #4
 8010428:	4618      	mov	r0, r3
 801042a:	f7fe faef 	bl	800ea0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010434:	f003 0304 	and.w	r3, r3, #4
 8010438:	2b00      	cmp	r3, #0
 801043a:	d024      	beq.n	8010486 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	699a      	ldr	r2, [r3, #24]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	18d1      	adds	r1, r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	683a      	ldr	r2, [r7, #0]
 8010448:	6978      	ldr	r0, [r7, #20]
 801044a:	f000 f8d3 	bl	80105f4 <prvInsertTimerInActiveList>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d021      	beq.n	8010498 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010454:	2300      	movs	r3, #0
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	2300      	movs	r3, #0
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	2100      	movs	r1, #0
 801045e:	6978      	ldr	r0, [r7, #20]
 8010460:	f7ff ff86 	bl	8010370 <xTimerGenericCommand>
 8010464:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d115      	bne.n	8010498 <prvProcessExpiredTimer+0x88>
	__asm volatile
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	b672      	cpsid	i
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	b662      	cpsie	i
 8010480:	60fb      	str	r3, [r7, #12]
}
 8010482:	bf00      	nop
 8010484:	e7fe      	b.n	8010484 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801048c:	f023 0301 	bic.w	r3, r3, #1
 8010490:	b2da      	uxtb	r2, r3
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	6a1b      	ldr	r3, [r3, #32]
 801049c:	6978      	ldr	r0, [r7, #20]
 801049e:	4798      	blx	r3
}
 80104a0:	bf00      	nop
 80104a2:	3718      	adds	r7, #24
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	200042ec 	.word	0x200042ec

080104ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104b4:	f107 0308 	add.w	r3, r7, #8
 80104b8:	4618      	mov	r0, r3
 80104ba:	f000 f857 	bl	801056c <prvGetNextExpireTime>
 80104be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	4619      	mov	r1, r3
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f000 f803 	bl	80104d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80104ca:	f000 f8d5 	bl	8010678 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104ce:	e7f1      	b.n	80104b4 <prvTimerTask+0x8>

080104d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80104da:	f7ff fa15 	bl	800f908 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104de:	f107 0308 	add.w	r3, r7, #8
 80104e2:	4618      	mov	r0, r3
 80104e4:	f000 f866 	bl	80105b4 <prvSampleTimeNow>
 80104e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d130      	bne.n	8010552 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d10a      	bne.n	801050c <prvProcessTimerOrBlockTask+0x3c>
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d806      	bhi.n	801050c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80104fe:	f7ff fa11 	bl	800f924 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010502:	68f9      	ldr	r1, [r7, #12]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff ff83 	bl	8010410 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801050a:	e024      	b.n	8010556 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d008      	beq.n	8010524 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010512:	4b13      	ldr	r3, [pc, #76]	; (8010560 <prvProcessTimerOrBlockTask+0x90>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d101      	bne.n	8010520 <prvProcessTimerOrBlockTask+0x50>
 801051c:	2301      	movs	r3, #1
 801051e:	e000      	b.n	8010522 <prvProcessTimerOrBlockTask+0x52>
 8010520:	2300      	movs	r3, #0
 8010522:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010524:	4b0f      	ldr	r3, [pc, #60]	; (8010564 <prvProcessTimerOrBlockTask+0x94>)
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	4619      	mov	r1, r3
 8010532:	f7fe ff6b 	bl	800f40c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010536:	f7ff f9f5 	bl	800f924 <xTaskResumeAll>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d10a      	bne.n	8010556 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010540:	4b09      	ldr	r3, [pc, #36]	; (8010568 <prvProcessTimerOrBlockTask+0x98>)
 8010542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	f3bf 8f6f 	isb	sy
}
 8010550:	e001      	b.n	8010556 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010552:	f7ff f9e7 	bl	800f924 <xTaskResumeAll>
}
 8010556:	bf00      	nop
 8010558:	3710      	adds	r7, #16
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	200042f0 	.word	0x200042f0
 8010564:	200042f4 	.word	0x200042f4
 8010568:	e000ed04 	.word	0xe000ed04

0801056c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010574:	4b0e      	ldr	r3, [pc, #56]	; (80105b0 <prvGetNextExpireTime+0x44>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d101      	bne.n	8010582 <prvGetNextExpireTime+0x16>
 801057e:	2201      	movs	r2, #1
 8010580:	e000      	b.n	8010584 <prvGetNextExpireTime+0x18>
 8010582:	2200      	movs	r2, #0
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d105      	bne.n	801059c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010590:	4b07      	ldr	r3, [pc, #28]	; (80105b0 <prvGetNextExpireTime+0x44>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	60fb      	str	r3, [r7, #12]
 801059a:	e001      	b.n	80105a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801059c:	2300      	movs	r3, #0
 801059e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80105a0:	68fb      	ldr	r3, [r7, #12]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3714      	adds	r7, #20
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	200042ec 	.word	0x200042ec

080105b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80105bc:	f7ff fa52 	bl	800fa64 <xTaskGetTickCount>
 80105c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80105c2:	4b0b      	ldr	r3, [pc, #44]	; (80105f0 <prvSampleTimeNow+0x3c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d205      	bcs.n	80105d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80105cc:	f000 f93c 	bl	8010848 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	601a      	str	r2, [r3, #0]
 80105d6:	e002      	b.n	80105de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80105de:	4a04      	ldr	r2, [pc, #16]	; (80105f0 <prvSampleTimeNow+0x3c>)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80105e4:	68fb      	ldr	r3, [r7, #12]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3710      	adds	r7, #16
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	200042fc 	.word	0x200042fc

080105f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b086      	sub	sp, #24
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
 8010600:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010602:	2300      	movs	r3, #0
 8010604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	68ba      	ldr	r2, [r7, #8]
 801060a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010612:	68ba      	ldr	r2, [r7, #8]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	429a      	cmp	r2, r3
 8010618:	d812      	bhi.n	8010640 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	1ad2      	subs	r2, r2, r3
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	429a      	cmp	r2, r3
 8010626:	d302      	bcc.n	801062e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010628:	2301      	movs	r3, #1
 801062a:	617b      	str	r3, [r7, #20]
 801062c:	e01b      	b.n	8010666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801062e:	4b10      	ldr	r3, [pc, #64]	; (8010670 <prvInsertTimerInActiveList+0x7c>)
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	3304      	adds	r3, #4
 8010636:	4619      	mov	r1, r3
 8010638:	4610      	mov	r0, r2
 801063a:	f7fe f9ae 	bl	800e99a <vListInsert>
 801063e:	e012      	b.n	8010666 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	429a      	cmp	r2, r3
 8010646:	d206      	bcs.n	8010656 <prvInsertTimerInActiveList+0x62>
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	429a      	cmp	r2, r3
 801064e:	d302      	bcc.n	8010656 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010650:	2301      	movs	r3, #1
 8010652:	617b      	str	r3, [r7, #20]
 8010654:	e007      	b.n	8010666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010656:	4b07      	ldr	r3, [pc, #28]	; (8010674 <prvInsertTimerInActiveList+0x80>)
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	3304      	adds	r3, #4
 801065e:	4619      	mov	r1, r3
 8010660:	4610      	mov	r0, r2
 8010662:	f7fe f99a 	bl	800e99a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010666:	697b      	ldr	r3, [r7, #20]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3718      	adds	r7, #24
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	200042f0 	.word	0x200042f0
 8010674:	200042ec 	.word	0x200042ec

08010678 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b08e      	sub	sp, #56	; 0x38
 801067c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801067e:	e0d0      	b.n	8010822 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	da1a      	bge.n	80106bc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010686:	1d3b      	adds	r3, r7, #4
 8010688:	3304      	adds	r3, #4
 801068a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d10c      	bne.n	80106ac <prvProcessReceivedCommands+0x34>
	__asm volatile
 8010692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010696:	b672      	cpsid	i
 8010698:	f383 8811 	msr	BASEPRI, r3
 801069c:	f3bf 8f6f 	isb	sy
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	b662      	cpsie	i
 80106a6:	61fb      	str	r3, [r7, #28]
}
 80106a8:	bf00      	nop
 80106aa:	e7fe      	b.n	80106aa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80106ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106b2:	6850      	ldr	r0, [r2, #4]
 80106b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106b6:	6892      	ldr	r2, [r2, #8]
 80106b8:	4611      	mov	r1, r2
 80106ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f2c0 80af 	blt.w	8010822 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80106c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d004      	beq.n	80106da <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	3304      	adds	r3, #4
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fe f999 	bl	800ea0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106da:	463b      	mov	r3, r7
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff ff69 	bl	80105b4 <prvSampleTimeNow>
 80106e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b09      	cmp	r3, #9
 80106e8:	f200 809a 	bhi.w	8010820 <prvProcessReceivedCommands+0x1a8>
 80106ec:	a201      	add	r2, pc, #4	; (adr r2, 80106f4 <prvProcessReceivedCommands+0x7c>)
 80106ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f2:	bf00      	nop
 80106f4:	0801071d 	.word	0x0801071d
 80106f8:	0801071d 	.word	0x0801071d
 80106fc:	0801071d 	.word	0x0801071d
 8010700:	08010795 	.word	0x08010795
 8010704:	080107a9 	.word	0x080107a9
 8010708:	080107f7 	.word	0x080107f7
 801070c:	0801071d 	.word	0x0801071d
 8010710:	0801071d 	.word	0x0801071d
 8010714:	08010795 	.word	0x08010795
 8010718:	080107a9 	.word	0x080107a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010722:	f043 0301 	orr.w	r3, r3, #1
 8010726:	b2da      	uxtb	r2, r3
 8010728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801072e:	68ba      	ldr	r2, [r7, #8]
 8010730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010732:	699b      	ldr	r3, [r3, #24]
 8010734:	18d1      	adds	r1, r2, r3
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801073a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801073c:	f7ff ff5a 	bl	80105f4 <prvInsertTimerInActiveList>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d06d      	beq.n	8010822 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801074c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010754:	f003 0304 	and.w	r3, r3, #4
 8010758:	2b00      	cmp	r3, #0
 801075a:	d062      	beq.n	8010822 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801075c:	68ba      	ldr	r2, [r7, #8]
 801075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010760:	699b      	ldr	r3, [r3, #24]
 8010762:	441a      	add	r2, r3
 8010764:	2300      	movs	r3, #0
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	2300      	movs	r3, #0
 801076a:	2100      	movs	r1, #0
 801076c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801076e:	f7ff fdff 	bl	8010370 <xTimerGenericCommand>
 8010772:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d153      	bne.n	8010822 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 801077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077e:	b672      	cpsid	i
 8010780:	f383 8811 	msr	BASEPRI, r3
 8010784:	f3bf 8f6f 	isb	sy
 8010788:	f3bf 8f4f 	dsb	sy
 801078c:	b662      	cpsie	i
 801078e:	61bb      	str	r3, [r7, #24]
}
 8010790:	bf00      	nop
 8010792:	e7fe      	b.n	8010792 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801079a:	f023 0301 	bic.w	r3, r3, #1
 801079e:	b2da      	uxtb	r2, r3
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80107a6:	e03c      	b.n	8010822 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107ae:	f043 0301 	orr.w	r3, r3, #1
 80107b2:	b2da      	uxtb	r2, r3
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80107c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c2:	699b      	ldr	r3, [r3, #24]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d10c      	bne.n	80107e2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80107c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107cc:	b672      	cpsid	i
 80107ce:	f383 8811 	msr	BASEPRI, r3
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	f3bf 8f4f 	dsb	sy
 80107da:	b662      	cpsie	i
 80107dc:	617b      	str	r3, [r7, #20]
}
 80107de:	bf00      	nop
 80107e0:	e7fe      	b.n	80107e0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e4:	699a      	ldr	r2, [r3, #24]
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	18d1      	adds	r1, r2, r3
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107f0:	f7ff ff00 	bl	80105f4 <prvInsertTimerInActiveList>
					break;
 80107f4:	e015      	b.n	8010822 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80107f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107fc:	f003 0302 	and.w	r3, r3, #2
 8010800:	2b00      	cmp	r3, #0
 8010802:	d103      	bne.n	801080c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010806:	f000 fbc7 	bl	8010f98 <vPortFree>
 801080a:	e00a      	b.n	8010822 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010812:	f023 0301 	bic.w	r3, r3, #1
 8010816:	b2da      	uxtb	r2, r3
 8010818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801081e:	e000      	b.n	8010822 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8010820:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010822:	4b08      	ldr	r3, [pc, #32]	; (8010844 <prvProcessReceivedCommands+0x1cc>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	1d39      	adds	r1, r7, #4
 8010828:	2200      	movs	r2, #0
 801082a:	4618      	mov	r0, r3
 801082c:	f7fe fbce 	bl	800efcc <xQueueReceive>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	f47f af24 	bne.w	8010680 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010838:	bf00      	nop
 801083a:	bf00      	nop
 801083c:	3730      	adds	r7, #48	; 0x30
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	200042f4 	.word	0x200042f4

08010848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b088      	sub	sp, #32
 801084c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801084e:	e04a      	b.n	80108e6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010850:	4b2e      	ldr	r3, [pc, #184]	; (801090c <prvSwitchTimerLists+0xc4>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801085a:	4b2c      	ldr	r3, [pc, #176]	; (801090c <prvSwitchTimerLists+0xc4>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	3304      	adds	r3, #4
 8010868:	4618      	mov	r0, r3
 801086a:	f7fe f8cf 	bl	800ea0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	6a1b      	ldr	r3, [r3, #32]
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801087c:	f003 0304 	and.w	r3, r3, #4
 8010880:	2b00      	cmp	r3, #0
 8010882:	d030      	beq.n	80108e6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	699b      	ldr	r3, [r3, #24]
 8010888:	693a      	ldr	r2, [r7, #16]
 801088a:	4413      	add	r3, r2
 801088c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801088e:	68ba      	ldr	r2, [r7, #8]
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	429a      	cmp	r2, r3
 8010894:	d90e      	bls.n	80108b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	68ba      	ldr	r2, [r7, #8]
 801089a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80108a2:	4b1a      	ldr	r3, [pc, #104]	; (801090c <prvSwitchTimerLists+0xc4>)
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	3304      	adds	r3, #4
 80108aa:	4619      	mov	r1, r3
 80108ac:	4610      	mov	r0, r2
 80108ae:	f7fe f874 	bl	800e99a <vListInsert>
 80108b2:	e018      	b.n	80108e6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80108b4:	2300      	movs	r3, #0
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	2300      	movs	r3, #0
 80108ba:	693a      	ldr	r2, [r7, #16]
 80108bc:	2100      	movs	r1, #0
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7ff fd56 	bl	8010370 <xTimerGenericCommand>
 80108c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d10c      	bne.n	80108e6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80108cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d0:	b672      	cpsid	i
 80108d2:	f383 8811 	msr	BASEPRI, r3
 80108d6:	f3bf 8f6f 	isb	sy
 80108da:	f3bf 8f4f 	dsb	sy
 80108de:	b662      	cpsie	i
 80108e0:	603b      	str	r3, [r7, #0]
}
 80108e2:	bf00      	nop
 80108e4:	e7fe      	b.n	80108e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108e6:	4b09      	ldr	r3, [pc, #36]	; (801090c <prvSwitchTimerLists+0xc4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1af      	bne.n	8010850 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80108f0:	4b06      	ldr	r3, [pc, #24]	; (801090c <prvSwitchTimerLists+0xc4>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80108f6:	4b06      	ldr	r3, [pc, #24]	; (8010910 <prvSwitchTimerLists+0xc8>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a04      	ldr	r2, [pc, #16]	; (801090c <prvSwitchTimerLists+0xc4>)
 80108fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80108fe:	4a04      	ldr	r2, [pc, #16]	; (8010910 <prvSwitchTimerLists+0xc8>)
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	6013      	str	r3, [r2, #0]
}
 8010904:	bf00      	nop
 8010906:	3718      	adds	r7, #24
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}
 801090c:	200042ec 	.word	0x200042ec
 8010910:	200042f0 	.word	0x200042f0

08010914 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801091a:	f000 f947 	bl	8010bac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801091e:	4b15      	ldr	r3, [pc, #84]	; (8010974 <prvCheckForValidListAndQueue+0x60>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d120      	bne.n	8010968 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010926:	4814      	ldr	r0, [pc, #80]	; (8010978 <prvCheckForValidListAndQueue+0x64>)
 8010928:	f7fd ffe6 	bl	800e8f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801092c:	4813      	ldr	r0, [pc, #76]	; (801097c <prvCheckForValidListAndQueue+0x68>)
 801092e:	f7fd ffe3 	bl	800e8f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010932:	4b13      	ldr	r3, [pc, #76]	; (8010980 <prvCheckForValidListAndQueue+0x6c>)
 8010934:	4a10      	ldr	r2, [pc, #64]	; (8010978 <prvCheckForValidListAndQueue+0x64>)
 8010936:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010938:	4b12      	ldr	r3, [pc, #72]	; (8010984 <prvCheckForValidListAndQueue+0x70>)
 801093a:	4a10      	ldr	r2, [pc, #64]	; (801097c <prvCheckForValidListAndQueue+0x68>)
 801093c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801093e:	2300      	movs	r3, #0
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	4b11      	ldr	r3, [pc, #68]	; (8010988 <prvCheckForValidListAndQueue+0x74>)
 8010944:	4a11      	ldr	r2, [pc, #68]	; (801098c <prvCheckForValidListAndQueue+0x78>)
 8010946:	2110      	movs	r1, #16
 8010948:	200a      	movs	r0, #10
 801094a:	f7fe f8f3 	bl	800eb34 <xQueueGenericCreateStatic>
 801094e:	4603      	mov	r3, r0
 8010950:	4a08      	ldr	r2, [pc, #32]	; (8010974 <prvCheckForValidListAndQueue+0x60>)
 8010952:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010954:	4b07      	ldr	r3, [pc, #28]	; (8010974 <prvCheckForValidListAndQueue+0x60>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d005      	beq.n	8010968 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801095c:	4b05      	ldr	r3, [pc, #20]	; (8010974 <prvCheckForValidListAndQueue+0x60>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	490b      	ldr	r1, [pc, #44]	; (8010990 <prvCheckForValidListAndQueue+0x7c>)
 8010962:	4618      	mov	r0, r3
 8010964:	f7fe fd28 	bl	800f3b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010968:	f000 f954 	bl	8010c14 <vPortExitCritical>
}
 801096c:	bf00      	nop
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	200042f4 	.word	0x200042f4
 8010978:	200042c4 	.word	0x200042c4
 801097c:	200042d8 	.word	0x200042d8
 8010980:	200042ec 	.word	0x200042ec
 8010984:	200042f0 	.word	0x200042f0
 8010988:	200043a0 	.word	0x200043a0
 801098c:	20004300 	.word	0x20004300
 8010990:	08013e7c 	.word	0x08013e7c

08010994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	3b04      	subs	r3, #4
 80109a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80109ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	3b04      	subs	r3, #4
 80109b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	f023 0201 	bic.w	r2, r3, #1
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	3b04      	subs	r3, #4
 80109c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80109c4:	4a0c      	ldr	r2, [pc, #48]	; (80109f8 <pxPortInitialiseStack+0x64>)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	3b14      	subs	r3, #20
 80109ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	3b04      	subs	r3, #4
 80109da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f06f 0202 	mvn.w	r2, #2
 80109e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	3b20      	subs	r3, #32
 80109e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80109ea:	68fb      	ldr	r3, [r7, #12]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	080109fd 	.word	0x080109fd

080109fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010a06:	4b14      	ldr	r3, [pc, #80]	; (8010a58 <prvTaskExitError+0x5c>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a0e:	d00c      	beq.n	8010a2a <prvTaskExitError+0x2e>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	b672      	cpsid	i
 8010a16:	f383 8811 	msr	BASEPRI, r3
 8010a1a:	f3bf 8f6f 	isb	sy
 8010a1e:	f3bf 8f4f 	dsb	sy
 8010a22:	b662      	cpsie	i
 8010a24:	60fb      	str	r3, [r7, #12]
}
 8010a26:	bf00      	nop
 8010a28:	e7fe      	b.n	8010a28 <prvTaskExitError+0x2c>
	__asm volatile
 8010a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a2e:	b672      	cpsid	i
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	b662      	cpsie	i
 8010a3e:	60bb      	str	r3, [r7, #8]
}
 8010a40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a42:	bf00      	nop
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d0fc      	beq.n	8010a44 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a4a:	bf00      	nop
 8010a4c:	bf00      	nop
 8010a4e:	3714      	adds	r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr
 8010a58:	2000025c 	.word	0x2000025c
 8010a5c:	00000000 	.word	0x00000000

08010a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a60:	4b07      	ldr	r3, [pc, #28]	; (8010a80 <pxCurrentTCBConst2>)
 8010a62:	6819      	ldr	r1, [r3, #0]
 8010a64:	6808      	ldr	r0, [r1, #0]
 8010a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6a:	f380 8809 	msr	PSP, r0
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f04f 0000 	mov.w	r0, #0
 8010a76:	f380 8811 	msr	BASEPRI, r0
 8010a7a:	4770      	bx	lr
 8010a7c:	f3af 8000 	nop.w

08010a80 <pxCurrentTCBConst2>:
 8010a80:	20003dc4 	.word	0x20003dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a84:	bf00      	nop
 8010a86:	bf00      	nop

08010a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a88:	4808      	ldr	r0, [pc, #32]	; (8010aac <prvPortStartFirstTask+0x24>)
 8010a8a:	6800      	ldr	r0, [r0, #0]
 8010a8c:	6800      	ldr	r0, [r0, #0]
 8010a8e:	f380 8808 	msr	MSP, r0
 8010a92:	f04f 0000 	mov.w	r0, #0
 8010a96:	f380 8814 	msr	CONTROL, r0
 8010a9a:	b662      	cpsie	i
 8010a9c:	b661      	cpsie	f
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	df00      	svc	0
 8010aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010aaa:	bf00      	nop
 8010aac:	e000ed08 	.word	0xe000ed08

08010ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ab6:	4b37      	ldr	r3, [pc, #220]	; (8010b94 <xPortStartScheduler+0xe4>)
 8010ab8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	22ff      	movs	r2, #255	; 0xff
 8010ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ad0:	78fb      	ldrb	r3, [r7, #3]
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	4b2f      	ldr	r3, [pc, #188]	; (8010b98 <xPortStartScheduler+0xe8>)
 8010adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ade:	4b2f      	ldr	r3, [pc, #188]	; (8010b9c <xPortStartScheduler+0xec>)
 8010ae0:	2207      	movs	r2, #7
 8010ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ae4:	e009      	b.n	8010afa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010ae6:	4b2d      	ldr	r3, [pc, #180]	; (8010b9c <xPortStartScheduler+0xec>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	3b01      	subs	r3, #1
 8010aec:	4a2b      	ldr	r2, [pc, #172]	; (8010b9c <xPortStartScheduler+0xec>)
 8010aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010af0:	78fb      	ldrb	r3, [r7, #3]
 8010af2:	b2db      	uxtb	r3, r3
 8010af4:	005b      	lsls	r3, r3, #1
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010afa:	78fb      	ldrb	r3, [r7, #3]
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b02:	2b80      	cmp	r3, #128	; 0x80
 8010b04:	d0ef      	beq.n	8010ae6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010b06:	4b25      	ldr	r3, [pc, #148]	; (8010b9c <xPortStartScheduler+0xec>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f1c3 0307 	rsb	r3, r3, #7
 8010b0e:	2b04      	cmp	r3, #4
 8010b10:	d00c      	beq.n	8010b2c <xPortStartScheduler+0x7c>
	__asm volatile
 8010b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b16:	b672      	cpsid	i
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	b662      	cpsie	i
 8010b26:	60bb      	str	r3, [r7, #8]
}
 8010b28:	bf00      	nop
 8010b2a:	e7fe      	b.n	8010b2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b2c:	4b1b      	ldr	r3, [pc, #108]	; (8010b9c <xPortStartScheduler+0xec>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	021b      	lsls	r3, r3, #8
 8010b32:	4a1a      	ldr	r2, [pc, #104]	; (8010b9c <xPortStartScheduler+0xec>)
 8010b34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b36:	4b19      	ldr	r3, [pc, #100]	; (8010b9c <xPortStartScheduler+0xec>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b3e:	4a17      	ldr	r2, [pc, #92]	; (8010b9c <xPortStartScheduler+0xec>)
 8010b40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	b2da      	uxtb	r2, r3
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b4a:	4b15      	ldr	r3, [pc, #84]	; (8010ba0 <xPortStartScheduler+0xf0>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4a14      	ldr	r2, [pc, #80]	; (8010ba0 <xPortStartScheduler+0xf0>)
 8010b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b56:	4b12      	ldr	r3, [pc, #72]	; (8010ba0 <xPortStartScheduler+0xf0>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a11      	ldr	r2, [pc, #68]	; (8010ba0 <xPortStartScheduler+0xf0>)
 8010b5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b62:	f000 f8dd 	bl	8010d20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b66:	4b0f      	ldr	r3, [pc, #60]	; (8010ba4 <xPortStartScheduler+0xf4>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b6c:	f000 f8fc 	bl	8010d68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b70:	4b0d      	ldr	r3, [pc, #52]	; (8010ba8 <xPortStartScheduler+0xf8>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a0c      	ldr	r2, [pc, #48]	; (8010ba8 <xPortStartScheduler+0xf8>)
 8010b76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010b7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b7c:	f7ff ff84 	bl	8010a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b80:	f7ff f84e 	bl	800fc20 <vTaskSwitchContext>
	prvTaskExitError();
 8010b84:	f7ff ff3a 	bl	80109fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	e000e400 	.word	0xe000e400
 8010b98:	200043f0 	.word	0x200043f0
 8010b9c:	200043f4 	.word	0x200043f4
 8010ba0:	e000ed20 	.word	0xe000ed20
 8010ba4:	2000025c 	.word	0x2000025c
 8010ba8:	e000ef34 	.word	0xe000ef34

08010bac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
	__asm volatile
 8010bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb6:	b672      	cpsid	i
 8010bb8:	f383 8811 	msr	BASEPRI, r3
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f3bf 8f4f 	dsb	sy
 8010bc4:	b662      	cpsie	i
 8010bc6:	607b      	str	r3, [r7, #4]
}
 8010bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bca:	4b10      	ldr	r3, [pc, #64]	; (8010c0c <vPortEnterCritical+0x60>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	4a0e      	ldr	r2, [pc, #56]	; (8010c0c <vPortEnterCritical+0x60>)
 8010bd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010bd4:	4b0d      	ldr	r3, [pc, #52]	; (8010c0c <vPortEnterCritical+0x60>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d111      	bne.n	8010c00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bdc:	4b0c      	ldr	r3, [pc, #48]	; (8010c10 <vPortEnterCritical+0x64>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00c      	beq.n	8010c00 <vPortEnterCritical+0x54>
	__asm volatile
 8010be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bea:	b672      	cpsid	i
 8010bec:	f383 8811 	msr	BASEPRI, r3
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	b662      	cpsie	i
 8010bfa:	603b      	str	r3, [r7, #0]
}
 8010bfc:	bf00      	nop
 8010bfe:	e7fe      	b.n	8010bfe <vPortEnterCritical+0x52>
	}
}
 8010c00:	bf00      	nop
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr
 8010c0c:	2000025c 	.word	0x2000025c
 8010c10:	e000ed04 	.word	0xe000ed04

08010c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c1a:	4b13      	ldr	r3, [pc, #76]	; (8010c68 <vPortExitCritical+0x54>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d10c      	bne.n	8010c3c <vPortExitCritical+0x28>
	__asm volatile
 8010c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c26:	b672      	cpsid	i
 8010c28:	f383 8811 	msr	BASEPRI, r3
 8010c2c:	f3bf 8f6f 	isb	sy
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	b662      	cpsie	i
 8010c36:	607b      	str	r3, [r7, #4]
}
 8010c38:	bf00      	nop
 8010c3a:	e7fe      	b.n	8010c3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010c3c:	4b0a      	ldr	r3, [pc, #40]	; (8010c68 <vPortExitCritical+0x54>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	3b01      	subs	r3, #1
 8010c42:	4a09      	ldr	r2, [pc, #36]	; (8010c68 <vPortExitCritical+0x54>)
 8010c44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c46:	4b08      	ldr	r3, [pc, #32]	; (8010c68 <vPortExitCritical+0x54>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d105      	bne.n	8010c5a <vPortExitCritical+0x46>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	f383 8811 	msr	BASEPRI, r3
}
 8010c58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c5a:	bf00      	nop
 8010c5c:	370c      	adds	r7, #12
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	2000025c 	.word	0x2000025c
 8010c6c:	00000000 	.word	0x00000000

08010c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c70:	f3ef 8009 	mrs	r0, PSP
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	4b15      	ldr	r3, [pc, #84]	; (8010cd0 <pxCurrentTCBConst>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	f01e 0f10 	tst.w	lr, #16
 8010c80:	bf08      	it	eq
 8010c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8a:	6010      	str	r0, [r2, #0]
 8010c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c94:	b672      	cpsid	i
 8010c96:	f380 8811 	msr	BASEPRI, r0
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	b662      	cpsie	i
 8010ca4:	f7fe ffbc 	bl	800fc20 <vTaskSwitchContext>
 8010ca8:	f04f 0000 	mov.w	r0, #0
 8010cac:	f380 8811 	msr	BASEPRI, r0
 8010cb0:	bc09      	pop	{r0, r3}
 8010cb2:	6819      	ldr	r1, [r3, #0]
 8010cb4:	6808      	ldr	r0, [r1, #0]
 8010cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cba:	f01e 0f10 	tst.w	lr, #16
 8010cbe:	bf08      	it	eq
 8010cc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010cc4:	f380 8809 	msr	PSP, r0
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop

08010cd0 <pxCurrentTCBConst>:
 8010cd0:	20003dc4 	.word	0x20003dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010cd4:	bf00      	nop
 8010cd6:	bf00      	nop

08010cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8010cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce2:	b672      	cpsid	i
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	b662      	cpsie	i
 8010cf2:	607b      	str	r3, [r7, #4]
}
 8010cf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010cf6:	f7fe fed7 	bl	800faa8 <xTaskIncrementTick>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d003      	beq.n	8010d08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d00:	4b06      	ldr	r3, [pc, #24]	; (8010d1c <SysTick_Handler+0x44>)
 8010d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d06:	601a      	str	r2, [r3, #0]
 8010d08:	2300      	movs	r3, #0
 8010d0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	f383 8811 	msr	BASEPRI, r3
}
 8010d12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d14:	bf00      	nop
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	e000ed04 	.word	0xe000ed04

08010d20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d20:	b480      	push	{r7}
 8010d22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d24:	4b0b      	ldr	r3, [pc, #44]	; (8010d54 <vPortSetupTimerInterrupt+0x34>)
 8010d26:	2200      	movs	r2, #0
 8010d28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d2a:	4b0b      	ldr	r3, [pc, #44]	; (8010d58 <vPortSetupTimerInterrupt+0x38>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d30:	4b0a      	ldr	r3, [pc, #40]	; (8010d5c <vPortSetupTimerInterrupt+0x3c>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a0a      	ldr	r2, [pc, #40]	; (8010d60 <vPortSetupTimerInterrupt+0x40>)
 8010d36:	fba2 2303 	umull	r2, r3, r2, r3
 8010d3a:	099b      	lsrs	r3, r3, #6
 8010d3c:	4a09      	ldr	r2, [pc, #36]	; (8010d64 <vPortSetupTimerInterrupt+0x44>)
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d42:	4b04      	ldr	r3, [pc, #16]	; (8010d54 <vPortSetupTimerInterrupt+0x34>)
 8010d44:	2207      	movs	r2, #7
 8010d46:	601a      	str	r2, [r3, #0]
}
 8010d48:	bf00      	nop
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop
 8010d54:	e000e010 	.word	0xe000e010
 8010d58:	e000e018 	.word	0xe000e018
 8010d5c:	20000250 	.word	0x20000250
 8010d60:	10624dd3 	.word	0x10624dd3
 8010d64:	e000e014 	.word	0xe000e014

08010d68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010d78 <vPortEnableVFP+0x10>
 8010d6c:	6801      	ldr	r1, [r0, #0]
 8010d6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d72:	6001      	str	r1, [r0, #0]
 8010d74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d76:	bf00      	nop
 8010d78:	e000ed88 	.word	0xe000ed88

08010d7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d82:	f3ef 8305 	mrs	r3, IPSR
 8010d86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2b0f      	cmp	r3, #15
 8010d8c:	d916      	bls.n	8010dbc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d8e:	4a19      	ldr	r2, [pc, #100]	; (8010df4 <vPortValidateInterruptPriority+0x78>)
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	4413      	add	r3, r2
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d98:	4b17      	ldr	r3, [pc, #92]	; (8010df8 <vPortValidateInterruptPriority+0x7c>)
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	7afa      	ldrb	r2, [r7, #11]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d20c      	bcs.n	8010dbc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da6:	b672      	cpsid	i
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	b662      	cpsie	i
 8010db6:	607b      	str	r3, [r7, #4]
}
 8010db8:	bf00      	nop
 8010dba:	e7fe      	b.n	8010dba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010dbc:	4b0f      	ldr	r3, [pc, #60]	; (8010dfc <vPortValidateInterruptPriority+0x80>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <vPortValidateInterruptPriority+0x84>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d90c      	bls.n	8010de6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd0:	b672      	cpsid	i
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	b662      	cpsie	i
 8010de0:	603b      	str	r3, [r7, #0]
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <vPortValidateInterruptPriority+0x68>
	}
 8010de6:	bf00      	nop
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	e000e3f0 	.word	0xe000e3f0
 8010df8:	200043f0 	.word	0x200043f0
 8010dfc:	e000ed0c 	.word	0xe000ed0c
 8010e00:	200043f4 	.word	0x200043f4

08010e04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08a      	sub	sp, #40	; 0x28
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e10:	f7fe fd7a 	bl	800f908 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e14:	4b5b      	ldr	r3, [pc, #364]	; (8010f84 <pvPortMalloc+0x180>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d101      	bne.n	8010e20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e1c:	f000 f91a 	bl	8011054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e20:	4b59      	ldr	r3, [pc, #356]	; (8010f88 <pvPortMalloc+0x184>)
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	4013      	ands	r3, r2
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f040 8092 	bne.w	8010f52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d01f      	beq.n	8010e74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010e34:	2208      	movs	r2, #8
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4413      	add	r3, r2
 8010e3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f003 0307 	and.w	r3, r3, #7
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d016      	beq.n	8010e74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f023 0307 	bic.w	r3, r3, #7
 8010e4c:	3308      	adds	r3, #8
 8010e4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f003 0307 	and.w	r3, r3, #7
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00c      	beq.n	8010e74 <pvPortMalloc+0x70>
	__asm volatile
 8010e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5e:	b672      	cpsid	i
 8010e60:	f383 8811 	msr	BASEPRI, r3
 8010e64:	f3bf 8f6f 	isb	sy
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	b662      	cpsie	i
 8010e6e:	617b      	str	r3, [r7, #20]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d06b      	beq.n	8010f52 <pvPortMalloc+0x14e>
 8010e7a:	4b44      	ldr	r3, [pc, #272]	; (8010f8c <pvPortMalloc+0x188>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d866      	bhi.n	8010f52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e84:	4b42      	ldr	r3, [pc, #264]	; (8010f90 <pvPortMalloc+0x18c>)
 8010e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e88:	4b41      	ldr	r3, [pc, #260]	; (8010f90 <pvPortMalloc+0x18c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e8e:	e004      	b.n	8010e9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d903      	bls.n	8010eac <pvPortMalloc+0xa8>
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d1f1      	bne.n	8010e90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010eac:	4b35      	ldr	r3, [pc, #212]	; (8010f84 <pvPortMalloc+0x180>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d04d      	beq.n	8010f52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010eb6:	6a3b      	ldr	r3, [r7, #32]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2208      	movs	r2, #8
 8010ebc:	4413      	add	r3, r2
 8010ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eca:	685a      	ldr	r2, [r3, #4]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	1ad2      	subs	r2, r2, r3
 8010ed0:	2308      	movs	r3, #8
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d921      	bls.n	8010f1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4413      	add	r3, r2
 8010ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	f003 0307 	and.w	r3, r3, #7
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00c      	beq.n	8010f04 <pvPortMalloc+0x100>
	__asm volatile
 8010eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eee:	b672      	cpsid	i
 8010ef0:	f383 8811 	msr	BASEPRI, r3
 8010ef4:	f3bf 8f6f 	isb	sy
 8010ef8:	f3bf 8f4f 	dsb	sy
 8010efc:	b662      	cpsie	i
 8010efe:	613b      	str	r3, [r7, #16]
}
 8010f00:	bf00      	nop
 8010f02:	e7fe      	b.n	8010f02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	685a      	ldr	r2, [r3, #4]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	1ad2      	subs	r2, r2, r3
 8010f0c:	69bb      	ldr	r3, [r7, #24]
 8010f0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f16:	69b8      	ldr	r0, [r7, #24]
 8010f18:	f000 f8fe 	bl	8011118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f1c:	4b1b      	ldr	r3, [pc, #108]	; (8010f8c <pvPortMalloc+0x188>)
 8010f1e:	681a      	ldr	r2, [r3, #0]
 8010f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	4a19      	ldr	r2, [pc, #100]	; (8010f8c <pvPortMalloc+0x188>)
 8010f28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f2a:	4b18      	ldr	r3, [pc, #96]	; (8010f8c <pvPortMalloc+0x188>)
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	4b19      	ldr	r3, [pc, #100]	; (8010f94 <pvPortMalloc+0x190>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d203      	bcs.n	8010f3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f36:	4b15      	ldr	r3, [pc, #84]	; (8010f8c <pvPortMalloc+0x188>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4a16      	ldr	r2, [pc, #88]	; (8010f94 <pvPortMalloc+0x190>)
 8010f3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f40:	685a      	ldr	r2, [r3, #4]
 8010f42:	4b11      	ldr	r3, [pc, #68]	; (8010f88 <pvPortMalloc+0x184>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	431a      	orrs	r2, r3
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4e:	2200      	movs	r2, #0
 8010f50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f52:	f7fe fce7 	bl	800f924 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	f003 0307 	and.w	r3, r3, #7
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d00c      	beq.n	8010f7a <pvPortMalloc+0x176>
	__asm volatile
 8010f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f64:	b672      	cpsid	i
 8010f66:	f383 8811 	msr	BASEPRI, r3
 8010f6a:	f3bf 8f6f 	isb	sy
 8010f6e:	f3bf 8f4f 	dsb	sy
 8010f72:	b662      	cpsie	i
 8010f74:	60fb      	str	r3, [r7, #12]
}
 8010f76:	bf00      	nop
 8010f78:	e7fe      	b.n	8010f78 <pvPortMalloc+0x174>
	return pvReturn;
 8010f7a:	69fb      	ldr	r3, [r7, #28]
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3728      	adds	r7, #40	; 0x28
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	20008000 	.word	0x20008000
 8010f88:	2000800c 	.word	0x2000800c
 8010f8c:	20008004 	.word	0x20008004
 8010f90:	20007ff8 	.word	0x20007ff8
 8010f94:	20008008 	.word	0x20008008

08010f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d04c      	beq.n	8011044 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010faa:	2308      	movs	r3, #8
 8010fac:	425b      	negs	r3, r3
 8010fae:	697a      	ldr	r2, [r7, #20]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	685a      	ldr	r2, [r3, #4]
 8010fbc:	4b23      	ldr	r3, [pc, #140]	; (801104c <vPortFree+0xb4>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4013      	ands	r3, r2
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10c      	bne.n	8010fe0 <vPortFree+0x48>
	__asm volatile
 8010fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fca:	b672      	cpsid	i
 8010fcc:	f383 8811 	msr	BASEPRI, r3
 8010fd0:	f3bf 8f6f 	isb	sy
 8010fd4:	f3bf 8f4f 	dsb	sy
 8010fd8:	b662      	cpsie	i
 8010fda:	60fb      	str	r3, [r7, #12]
}
 8010fdc:	bf00      	nop
 8010fde:	e7fe      	b.n	8010fde <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00c      	beq.n	8011002 <vPortFree+0x6a>
	__asm volatile
 8010fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fec:	b672      	cpsid	i
 8010fee:	f383 8811 	msr	BASEPRI, r3
 8010ff2:	f3bf 8f6f 	isb	sy
 8010ff6:	f3bf 8f4f 	dsb	sy
 8010ffa:	b662      	cpsie	i
 8010ffc:	60bb      	str	r3, [r7, #8]
}
 8010ffe:	bf00      	nop
 8011000:	e7fe      	b.n	8011000 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	685a      	ldr	r2, [r3, #4]
 8011006:	4b11      	ldr	r3, [pc, #68]	; (801104c <vPortFree+0xb4>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4013      	ands	r3, r2
 801100c:	2b00      	cmp	r3, #0
 801100e:	d019      	beq.n	8011044 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d115      	bne.n	8011044 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	685a      	ldr	r2, [r3, #4]
 801101c:	4b0b      	ldr	r3, [pc, #44]	; (801104c <vPortFree+0xb4>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	43db      	mvns	r3, r3
 8011022:	401a      	ands	r2, r3
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011028:	f7fe fc6e 	bl	800f908 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	4b07      	ldr	r3, [pc, #28]	; (8011050 <vPortFree+0xb8>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4413      	add	r3, r2
 8011036:	4a06      	ldr	r2, [pc, #24]	; (8011050 <vPortFree+0xb8>)
 8011038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801103a:	6938      	ldr	r0, [r7, #16]
 801103c:	f000 f86c 	bl	8011118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011040:	f7fe fc70 	bl	800f924 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011044:	bf00      	nop
 8011046:	3718      	adds	r7, #24
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	2000800c 	.word	0x2000800c
 8011050:	20008004 	.word	0x20008004

08011054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011054:	b480      	push	{r7}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801105a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801105e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011060:	4b27      	ldr	r3, [pc, #156]	; (8011100 <prvHeapInit+0xac>)
 8011062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f003 0307 	and.w	r3, r3, #7
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00c      	beq.n	8011088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	3307      	adds	r3, #7
 8011072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f023 0307 	bic.w	r3, r3, #7
 801107a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	1ad3      	subs	r3, r2, r3
 8011082:	4a1f      	ldr	r2, [pc, #124]	; (8011100 <prvHeapInit+0xac>)
 8011084:	4413      	add	r3, r2
 8011086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801108c:	4a1d      	ldr	r2, [pc, #116]	; (8011104 <prvHeapInit+0xb0>)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011092:	4b1c      	ldr	r3, [pc, #112]	; (8011104 <prvHeapInit+0xb0>)
 8011094:	2200      	movs	r2, #0
 8011096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	68ba      	ldr	r2, [r7, #8]
 801109c:	4413      	add	r3, r2
 801109e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110a0:	2208      	movs	r2, #8
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	1a9b      	subs	r3, r3, r2
 80110a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f023 0307 	bic.w	r3, r3, #7
 80110ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	4a15      	ldr	r2, [pc, #84]	; (8011108 <prvHeapInit+0xb4>)
 80110b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110b6:	4b14      	ldr	r3, [pc, #80]	; (8011108 <prvHeapInit+0xb4>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2200      	movs	r2, #0
 80110bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110be:	4b12      	ldr	r3, [pc, #72]	; (8011108 <prvHeapInit+0xb4>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	1ad2      	subs	r2, r2, r3
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110d4:	4b0c      	ldr	r3, [pc, #48]	; (8011108 <prvHeapInit+0xb4>)
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	4a0a      	ldr	r2, [pc, #40]	; (801110c <prvHeapInit+0xb8>)
 80110e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	4a09      	ldr	r2, [pc, #36]	; (8011110 <prvHeapInit+0xbc>)
 80110ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110ec:	4b09      	ldr	r3, [pc, #36]	; (8011114 <prvHeapInit+0xc0>)
 80110ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80110f2:	601a      	str	r2, [r3, #0]
}
 80110f4:	bf00      	nop
 80110f6:	3714      	adds	r7, #20
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	200043f8 	.word	0x200043f8
 8011104:	20007ff8 	.word	0x20007ff8
 8011108:	20008000 	.word	0x20008000
 801110c:	20008008 	.word	0x20008008
 8011110:	20008004 	.word	0x20008004
 8011114:	2000800c 	.word	0x2000800c

08011118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011118:	b480      	push	{r7}
 801111a:	b085      	sub	sp, #20
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011120:	4b28      	ldr	r3, [pc, #160]	; (80111c4 <prvInsertBlockIntoFreeList+0xac>)
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	e002      	b.n	801112c <prvInsertBlockIntoFreeList+0x14>
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	60fb      	str	r3, [r7, #12]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	429a      	cmp	r2, r3
 8011134:	d8f7      	bhi.n	8011126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	68ba      	ldr	r2, [r7, #8]
 8011140:	4413      	add	r3, r2
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	429a      	cmp	r2, r3
 8011146:	d108      	bne.n	801115a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	685a      	ldr	r2, [r3, #4]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	441a      	add	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	68ba      	ldr	r2, [r7, #8]
 8011164:	441a      	add	r2, r3
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	d118      	bne.n	80111a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	4b15      	ldr	r3, [pc, #84]	; (80111c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	429a      	cmp	r2, r3
 8011178:	d00d      	beq.n	8011196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	441a      	add	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	e008      	b.n	80111a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011196:	4b0c      	ldr	r3, [pc, #48]	; (80111c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011198:	681a      	ldr	r2, [r3, #0]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	e003      	b.n	80111a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111a8:	68fa      	ldr	r2, [r7, #12]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d002      	beq.n	80111b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111b6:	bf00      	nop
 80111b8:	3714      	adds	r7, #20
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	20007ff8 	.word	0x20007ff8
 80111c8:	20008000 	.word	0x20008000

080111cc <__assert_func>:
 80111cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111ce:	4614      	mov	r4, r2
 80111d0:	461a      	mov	r2, r3
 80111d2:	4b09      	ldr	r3, [pc, #36]	; (80111f8 <__assert_func+0x2c>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	4605      	mov	r5, r0
 80111d8:	68d8      	ldr	r0, [r3, #12]
 80111da:	b14c      	cbz	r4, 80111f0 <__assert_func+0x24>
 80111dc:	4b07      	ldr	r3, [pc, #28]	; (80111fc <__assert_func+0x30>)
 80111de:	9100      	str	r1, [sp, #0]
 80111e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111e4:	4906      	ldr	r1, [pc, #24]	; (8011200 <__assert_func+0x34>)
 80111e6:	462b      	mov	r3, r5
 80111e8:	f000 fa4a 	bl	8011680 <fiprintf>
 80111ec:	f000 fbc5 	bl	801197a <abort>
 80111f0:	4b04      	ldr	r3, [pc, #16]	; (8011204 <__assert_func+0x38>)
 80111f2:	461c      	mov	r4, r3
 80111f4:	e7f3      	b.n	80111de <__assert_func+0x12>
 80111f6:	bf00      	nop
 80111f8:	200002b8 	.word	0x200002b8
 80111fc:	080144c8 	.word	0x080144c8
 8011200:	080144d5 	.word	0x080144d5
 8011204:	08014503 	.word	0x08014503

08011208 <atoi>:
 8011208:	220a      	movs	r2, #10
 801120a:	2100      	movs	r1, #0
 801120c:	f000 b98a 	b.w	8011524 <strtol>

08011210 <calloc>:
 8011210:	4b02      	ldr	r3, [pc, #8]	; (801121c <calloc+0xc>)
 8011212:	460a      	mov	r2, r1
 8011214:	4601      	mov	r1, r0
 8011216:	6818      	ldr	r0, [r3, #0]
 8011218:	f000 b802 	b.w	8011220 <_calloc_r>
 801121c:	200002b8 	.word	0x200002b8

08011220 <_calloc_r>:
 8011220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011222:	fba1 2402 	umull	r2, r4, r1, r2
 8011226:	b94c      	cbnz	r4, 801123c <_calloc_r+0x1c>
 8011228:	4611      	mov	r1, r2
 801122a:	9201      	str	r2, [sp, #4]
 801122c:	f000 f83e 	bl	80112ac <_malloc_r>
 8011230:	9a01      	ldr	r2, [sp, #4]
 8011232:	4605      	mov	r5, r0
 8011234:	b930      	cbnz	r0, 8011244 <_calloc_r+0x24>
 8011236:	4628      	mov	r0, r5
 8011238:	b003      	add	sp, #12
 801123a:	bd30      	pop	{r4, r5, pc}
 801123c:	220c      	movs	r2, #12
 801123e:	6002      	str	r2, [r0, #0]
 8011240:	2500      	movs	r5, #0
 8011242:	e7f8      	b.n	8011236 <_calloc_r+0x16>
 8011244:	4621      	mov	r1, r4
 8011246:	f000 fac0 	bl	80117ca <memset>
 801124a:	e7f4      	b.n	8011236 <_calloc_r+0x16>

0801124c <malloc>:
 801124c:	4b02      	ldr	r3, [pc, #8]	; (8011258 <malloc+0xc>)
 801124e:	4601      	mov	r1, r0
 8011250:	6818      	ldr	r0, [r3, #0]
 8011252:	f000 b82b 	b.w	80112ac <_malloc_r>
 8011256:	bf00      	nop
 8011258:	200002b8 	.word	0x200002b8

0801125c <free>:
 801125c:	4b02      	ldr	r3, [pc, #8]	; (8011268 <free+0xc>)
 801125e:	4601      	mov	r1, r0
 8011260:	6818      	ldr	r0, [r3, #0]
 8011262:	f000 bb91 	b.w	8011988 <_free_r>
 8011266:	bf00      	nop
 8011268:	200002b8 	.word	0x200002b8

0801126c <sbrk_aligned>:
 801126c:	b570      	push	{r4, r5, r6, lr}
 801126e:	4e0e      	ldr	r6, [pc, #56]	; (80112a8 <sbrk_aligned+0x3c>)
 8011270:	460c      	mov	r4, r1
 8011272:	6831      	ldr	r1, [r6, #0]
 8011274:	4605      	mov	r5, r0
 8011276:	b911      	cbnz	r1, 801127e <sbrk_aligned+0x12>
 8011278:	f000 fb1a 	bl	80118b0 <_sbrk_r>
 801127c:	6030      	str	r0, [r6, #0]
 801127e:	4621      	mov	r1, r4
 8011280:	4628      	mov	r0, r5
 8011282:	f000 fb15 	bl	80118b0 <_sbrk_r>
 8011286:	1c43      	adds	r3, r0, #1
 8011288:	d00a      	beq.n	80112a0 <sbrk_aligned+0x34>
 801128a:	1cc4      	adds	r4, r0, #3
 801128c:	f024 0403 	bic.w	r4, r4, #3
 8011290:	42a0      	cmp	r0, r4
 8011292:	d007      	beq.n	80112a4 <sbrk_aligned+0x38>
 8011294:	1a21      	subs	r1, r4, r0
 8011296:	4628      	mov	r0, r5
 8011298:	f000 fb0a 	bl	80118b0 <_sbrk_r>
 801129c:	3001      	adds	r0, #1
 801129e:	d101      	bne.n	80112a4 <sbrk_aligned+0x38>
 80112a0:	f04f 34ff 	mov.w	r4, #4294967295
 80112a4:	4620      	mov	r0, r4
 80112a6:	bd70      	pop	{r4, r5, r6, pc}
 80112a8:	20008014 	.word	0x20008014

080112ac <_malloc_r>:
 80112ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112b0:	1ccd      	adds	r5, r1, #3
 80112b2:	f025 0503 	bic.w	r5, r5, #3
 80112b6:	3508      	adds	r5, #8
 80112b8:	2d0c      	cmp	r5, #12
 80112ba:	bf38      	it	cc
 80112bc:	250c      	movcc	r5, #12
 80112be:	2d00      	cmp	r5, #0
 80112c0:	4607      	mov	r7, r0
 80112c2:	db01      	blt.n	80112c8 <_malloc_r+0x1c>
 80112c4:	42a9      	cmp	r1, r5
 80112c6:	d905      	bls.n	80112d4 <_malloc_r+0x28>
 80112c8:	230c      	movs	r3, #12
 80112ca:	603b      	str	r3, [r7, #0]
 80112cc:	2600      	movs	r6, #0
 80112ce:	4630      	mov	r0, r6
 80112d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80113a8 <_malloc_r+0xfc>
 80112d8:	f000 f868 	bl	80113ac <__malloc_lock>
 80112dc:	f8d8 3000 	ldr.w	r3, [r8]
 80112e0:	461c      	mov	r4, r3
 80112e2:	bb5c      	cbnz	r4, 801133c <_malloc_r+0x90>
 80112e4:	4629      	mov	r1, r5
 80112e6:	4638      	mov	r0, r7
 80112e8:	f7ff ffc0 	bl	801126c <sbrk_aligned>
 80112ec:	1c43      	adds	r3, r0, #1
 80112ee:	4604      	mov	r4, r0
 80112f0:	d155      	bne.n	801139e <_malloc_r+0xf2>
 80112f2:	f8d8 4000 	ldr.w	r4, [r8]
 80112f6:	4626      	mov	r6, r4
 80112f8:	2e00      	cmp	r6, #0
 80112fa:	d145      	bne.n	8011388 <_malloc_r+0xdc>
 80112fc:	2c00      	cmp	r4, #0
 80112fe:	d048      	beq.n	8011392 <_malloc_r+0xe6>
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	4631      	mov	r1, r6
 8011304:	4638      	mov	r0, r7
 8011306:	eb04 0903 	add.w	r9, r4, r3
 801130a:	f000 fad1 	bl	80118b0 <_sbrk_r>
 801130e:	4581      	cmp	r9, r0
 8011310:	d13f      	bne.n	8011392 <_malloc_r+0xe6>
 8011312:	6821      	ldr	r1, [r4, #0]
 8011314:	1a6d      	subs	r5, r5, r1
 8011316:	4629      	mov	r1, r5
 8011318:	4638      	mov	r0, r7
 801131a:	f7ff ffa7 	bl	801126c <sbrk_aligned>
 801131e:	3001      	adds	r0, #1
 8011320:	d037      	beq.n	8011392 <_malloc_r+0xe6>
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	442b      	add	r3, r5
 8011326:	6023      	str	r3, [r4, #0]
 8011328:	f8d8 3000 	ldr.w	r3, [r8]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d038      	beq.n	80113a2 <_malloc_r+0xf6>
 8011330:	685a      	ldr	r2, [r3, #4]
 8011332:	42a2      	cmp	r2, r4
 8011334:	d12b      	bne.n	801138e <_malloc_r+0xe2>
 8011336:	2200      	movs	r2, #0
 8011338:	605a      	str	r2, [r3, #4]
 801133a:	e00f      	b.n	801135c <_malloc_r+0xb0>
 801133c:	6822      	ldr	r2, [r4, #0]
 801133e:	1b52      	subs	r2, r2, r5
 8011340:	d41f      	bmi.n	8011382 <_malloc_r+0xd6>
 8011342:	2a0b      	cmp	r2, #11
 8011344:	d917      	bls.n	8011376 <_malloc_r+0xca>
 8011346:	1961      	adds	r1, r4, r5
 8011348:	42a3      	cmp	r3, r4
 801134a:	6025      	str	r5, [r4, #0]
 801134c:	bf18      	it	ne
 801134e:	6059      	strne	r1, [r3, #4]
 8011350:	6863      	ldr	r3, [r4, #4]
 8011352:	bf08      	it	eq
 8011354:	f8c8 1000 	streq.w	r1, [r8]
 8011358:	5162      	str	r2, [r4, r5]
 801135a:	604b      	str	r3, [r1, #4]
 801135c:	4638      	mov	r0, r7
 801135e:	f104 060b 	add.w	r6, r4, #11
 8011362:	f000 f829 	bl	80113b8 <__malloc_unlock>
 8011366:	f026 0607 	bic.w	r6, r6, #7
 801136a:	1d23      	adds	r3, r4, #4
 801136c:	1af2      	subs	r2, r6, r3
 801136e:	d0ae      	beq.n	80112ce <_malloc_r+0x22>
 8011370:	1b9b      	subs	r3, r3, r6
 8011372:	50a3      	str	r3, [r4, r2]
 8011374:	e7ab      	b.n	80112ce <_malloc_r+0x22>
 8011376:	42a3      	cmp	r3, r4
 8011378:	6862      	ldr	r2, [r4, #4]
 801137a:	d1dd      	bne.n	8011338 <_malloc_r+0x8c>
 801137c:	f8c8 2000 	str.w	r2, [r8]
 8011380:	e7ec      	b.n	801135c <_malloc_r+0xb0>
 8011382:	4623      	mov	r3, r4
 8011384:	6864      	ldr	r4, [r4, #4]
 8011386:	e7ac      	b.n	80112e2 <_malloc_r+0x36>
 8011388:	4634      	mov	r4, r6
 801138a:	6876      	ldr	r6, [r6, #4]
 801138c:	e7b4      	b.n	80112f8 <_malloc_r+0x4c>
 801138e:	4613      	mov	r3, r2
 8011390:	e7cc      	b.n	801132c <_malloc_r+0x80>
 8011392:	230c      	movs	r3, #12
 8011394:	603b      	str	r3, [r7, #0]
 8011396:	4638      	mov	r0, r7
 8011398:	f000 f80e 	bl	80113b8 <__malloc_unlock>
 801139c:	e797      	b.n	80112ce <_malloc_r+0x22>
 801139e:	6025      	str	r5, [r4, #0]
 80113a0:	e7dc      	b.n	801135c <_malloc_r+0xb0>
 80113a2:	605b      	str	r3, [r3, #4]
 80113a4:	deff      	udf	#255	; 0xff
 80113a6:	bf00      	nop
 80113a8:	20008010 	.word	0x20008010

080113ac <__malloc_lock>:
 80113ac:	4801      	ldr	r0, [pc, #4]	; (80113b4 <__malloc_lock+0x8>)
 80113ae:	f000 bacc 	b.w	801194a <__retarget_lock_acquire_recursive>
 80113b2:	bf00      	nop
 80113b4:	20008158 	.word	0x20008158

080113b8 <__malloc_unlock>:
 80113b8:	4801      	ldr	r0, [pc, #4]	; (80113c0 <__malloc_unlock+0x8>)
 80113ba:	f000 bac7 	b.w	801194c <__retarget_lock_release_recursive>
 80113be:	bf00      	nop
 80113c0:	20008158 	.word	0x20008158

080113c4 <srand>:
 80113c4:	b538      	push	{r3, r4, r5, lr}
 80113c6:	4b10      	ldr	r3, [pc, #64]	; (8011408 <srand+0x44>)
 80113c8:	681d      	ldr	r5, [r3, #0]
 80113ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80113cc:	4604      	mov	r4, r0
 80113ce:	b9b3      	cbnz	r3, 80113fe <srand+0x3a>
 80113d0:	2018      	movs	r0, #24
 80113d2:	f7ff ff3b 	bl	801124c <malloc>
 80113d6:	4602      	mov	r2, r0
 80113d8:	6328      	str	r0, [r5, #48]	; 0x30
 80113da:	b920      	cbnz	r0, 80113e6 <srand+0x22>
 80113dc:	4b0b      	ldr	r3, [pc, #44]	; (801140c <srand+0x48>)
 80113de:	480c      	ldr	r0, [pc, #48]	; (8011410 <srand+0x4c>)
 80113e0:	2146      	movs	r1, #70	; 0x46
 80113e2:	f7ff fef3 	bl	80111cc <__assert_func>
 80113e6:	490b      	ldr	r1, [pc, #44]	; (8011414 <srand+0x50>)
 80113e8:	4b0b      	ldr	r3, [pc, #44]	; (8011418 <srand+0x54>)
 80113ea:	e9c0 1300 	strd	r1, r3, [r0]
 80113ee:	4b0b      	ldr	r3, [pc, #44]	; (801141c <srand+0x58>)
 80113f0:	6083      	str	r3, [r0, #8]
 80113f2:	230b      	movs	r3, #11
 80113f4:	8183      	strh	r3, [r0, #12]
 80113f6:	2100      	movs	r1, #0
 80113f8:	2001      	movs	r0, #1
 80113fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80113fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011400:	2200      	movs	r2, #0
 8011402:	611c      	str	r4, [r3, #16]
 8011404:	615a      	str	r2, [r3, #20]
 8011406:	bd38      	pop	{r3, r4, r5, pc}
 8011408:	200002b8 	.word	0x200002b8
 801140c:	08014504 	.word	0x08014504
 8011410:	0801451b 	.word	0x0801451b
 8011414:	abcd330e 	.word	0xabcd330e
 8011418:	e66d1234 	.word	0xe66d1234
 801141c:	0005deec 	.word	0x0005deec

08011420 <_strtol_l.constprop.0>:
 8011420:	2b01      	cmp	r3, #1
 8011422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011426:	d001      	beq.n	801142c <_strtol_l.constprop.0+0xc>
 8011428:	2b24      	cmp	r3, #36	; 0x24
 801142a:	d906      	bls.n	801143a <_strtol_l.constprop.0+0x1a>
 801142c:	f000 fa62 	bl	80118f4 <__errno>
 8011430:	2316      	movs	r3, #22
 8011432:	6003      	str	r3, [r0, #0]
 8011434:	2000      	movs	r0, #0
 8011436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011520 <_strtol_l.constprop.0+0x100>
 801143e:	460d      	mov	r5, r1
 8011440:	462e      	mov	r6, r5
 8011442:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011446:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801144a:	f017 0708 	ands.w	r7, r7, #8
 801144e:	d1f7      	bne.n	8011440 <_strtol_l.constprop.0+0x20>
 8011450:	2c2d      	cmp	r4, #45	; 0x2d
 8011452:	d132      	bne.n	80114ba <_strtol_l.constprop.0+0x9a>
 8011454:	782c      	ldrb	r4, [r5, #0]
 8011456:	2701      	movs	r7, #1
 8011458:	1cb5      	adds	r5, r6, #2
 801145a:	2b00      	cmp	r3, #0
 801145c:	d05b      	beq.n	8011516 <_strtol_l.constprop.0+0xf6>
 801145e:	2b10      	cmp	r3, #16
 8011460:	d109      	bne.n	8011476 <_strtol_l.constprop.0+0x56>
 8011462:	2c30      	cmp	r4, #48	; 0x30
 8011464:	d107      	bne.n	8011476 <_strtol_l.constprop.0+0x56>
 8011466:	782c      	ldrb	r4, [r5, #0]
 8011468:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801146c:	2c58      	cmp	r4, #88	; 0x58
 801146e:	d14d      	bne.n	801150c <_strtol_l.constprop.0+0xec>
 8011470:	786c      	ldrb	r4, [r5, #1]
 8011472:	2310      	movs	r3, #16
 8011474:	3502      	adds	r5, #2
 8011476:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801147a:	f108 38ff 	add.w	r8, r8, #4294967295
 801147e:	f04f 0e00 	mov.w	lr, #0
 8011482:	fbb8 f9f3 	udiv	r9, r8, r3
 8011486:	4676      	mov	r6, lr
 8011488:	fb03 8a19 	mls	sl, r3, r9, r8
 801148c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011490:	f1bc 0f09 	cmp.w	ip, #9
 8011494:	d816      	bhi.n	80114c4 <_strtol_l.constprop.0+0xa4>
 8011496:	4664      	mov	r4, ip
 8011498:	42a3      	cmp	r3, r4
 801149a:	dd24      	ble.n	80114e6 <_strtol_l.constprop.0+0xc6>
 801149c:	f1be 3fff 	cmp.w	lr, #4294967295
 80114a0:	d008      	beq.n	80114b4 <_strtol_l.constprop.0+0x94>
 80114a2:	45b1      	cmp	r9, r6
 80114a4:	d31c      	bcc.n	80114e0 <_strtol_l.constprop.0+0xc0>
 80114a6:	d101      	bne.n	80114ac <_strtol_l.constprop.0+0x8c>
 80114a8:	45a2      	cmp	sl, r4
 80114aa:	db19      	blt.n	80114e0 <_strtol_l.constprop.0+0xc0>
 80114ac:	fb06 4603 	mla	r6, r6, r3, r4
 80114b0:	f04f 0e01 	mov.w	lr, #1
 80114b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114b8:	e7e8      	b.n	801148c <_strtol_l.constprop.0+0x6c>
 80114ba:	2c2b      	cmp	r4, #43	; 0x2b
 80114bc:	bf04      	itt	eq
 80114be:	782c      	ldrbeq	r4, [r5, #0]
 80114c0:	1cb5      	addeq	r5, r6, #2
 80114c2:	e7ca      	b.n	801145a <_strtol_l.constprop.0+0x3a>
 80114c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80114c8:	f1bc 0f19 	cmp.w	ip, #25
 80114cc:	d801      	bhi.n	80114d2 <_strtol_l.constprop.0+0xb2>
 80114ce:	3c37      	subs	r4, #55	; 0x37
 80114d0:	e7e2      	b.n	8011498 <_strtol_l.constprop.0+0x78>
 80114d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80114d6:	f1bc 0f19 	cmp.w	ip, #25
 80114da:	d804      	bhi.n	80114e6 <_strtol_l.constprop.0+0xc6>
 80114dc:	3c57      	subs	r4, #87	; 0x57
 80114de:	e7db      	b.n	8011498 <_strtol_l.constprop.0+0x78>
 80114e0:	f04f 3eff 	mov.w	lr, #4294967295
 80114e4:	e7e6      	b.n	80114b4 <_strtol_l.constprop.0+0x94>
 80114e6:	f1be 3fff 	cmp.w	lr, #4294967295
 80114ea:	d105      	bne.n	80114f8 <_strtol_l.constprop.0+0xd8>
 80114ec:	2322      	movs	r3, #34	; 0x22
 80114ee:	6003      	str	r3, [r0, #0]
 80114f0:	4646      	mov	r6, r8
 80114f2:	b942      	cbnz	r2, 8011506 <_strtol_l.constprop.0+0xe6>
 80114f4:	4630      	mov	r0, r6
 80114f6:	e79e      	b.n	8011436 <_strtol_l.constprop.0+0x16>
 80114f8:	b107      	cbz	r7, 80114fc <_strtol_l.constprop.0+0xdc>
 80114fa:	4276      	negs	r6, r6
 80114fc:	2a00      	cmp	r2, #0
 80114fe:	d0f9      	beq.n	80114f4 <_strtol_l.constprop.0+0xd4>
 8011500:	f1be 0f00 	cmp.w	lr, #0
 8011504:	d000      	beq.n	8011508 <_strtol_l.constprop.0+0xe8>
 8011506:	1e69      	subs	r1, r5, #1
 8011508:	6011      	str	r1, [r2, #0]
 801150a:	e7f3      	b.n	80114f4 <_strtol_l.constprop.0+0xd4>
 801150c:	2430      	movs	r4, #48	; 0x30
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1b1      	bne.n	8011476 <_strtol_l.constprop.0+0x56>
 8011512:	2308      	movs	r3, #8
 8011514:	e7af      	b.n	8011476 <_strtol_l.constprop.0+0x56>
 8011516:	2c30      	cmp	r4, #48	; 0x30
 8011518:	d0a5      	beq.n	8011466 <_strtol_l.constprop.0+0x46>
 801151a:	230a      	movs	r3, #10
 801151c:	e7ab      	b.n	8011476 <_strtol_l.constprop.0+0x56>
 801151e:	bf00      	nop
 8011520:	08014574 	.word	0x08014574

08011524 <strtol>:
 8011524:	4613      	mov	r3, r2
 8011526:	460a      	mov	r2, r1
 8011528:	4601      	mov	r1, r0
 801152a:	4802      	ldr	r0, [pc, #8]	; (8011534 <strtol+0x10>)
 801152c:	6800      	ldr	r0, [r0, #0]
 801152e:	f7ff bf77 	b.w	8011420 <_strtol_l.constprop.0>
 8011532:	bf00      	nop
 8011534:	200002b8 	.word	0x200002b8

08011538 <std>:
 8011538:	2300      	movs	r3, #0
 801153a:	b510      	push	{r4, lr}
 801153c:	4604      	mov	r4, r0
 801153e:	e9c0 3300 	strd	r3, r3, [r0]
 8011542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011546:	6083      	str	r3, [r0, #8]
 8011548:	8181      	strh	r1, [r0, #12]
 801154a:	6643      	str	r3, [r0, #100]	; 0x64
 801154c:	81c2      	strh	r2, [r0, #14]
 801154e:	6183      	str	r3, [r0, #24]
 8011550:	4619      	mov	r1, r3
 8011552:	2208      	movs	r2, #8
 8011554:	305c      	adds	r0, #92	; 0x5c
 8011556:	f000 f938 	bl	80117ca <memset>
 801155a:	4b0d      	ldr	r3, [pc, #52]	; (8011590 <std+0x58>)
 801155c:	6263      	str	r3, [r4, #36]	; 0x24
 801155e:	4b0d      	ldr	r3, [pc, #52]	; (8011594 <std+0x5c>)
 8011560:	62a3      	str	r3, [r4, #40]	; 0x28
 8011562:	4b0d      	ldr	r3, [pc, #52]	; (8011598 <std+0x60>)
 8011564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011566:	4b0d      	ldr	r3, [pc, #52]	; (801159c <std+0x64>)
 8011568:	6323      	str	r3, [r4, #48]	; 0x30
 801156a:	4b0d      	ldr	r3, [pc, #52]	; (80115a0 <std+0x68>)
 801156c:	6224      	str	r4, [r4, #32]
 801156e:	429c      	cmp	r4, r3
 8011570:	d006      	beq.n	8011580 <std+0x48>
 8011572:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011576:	4294      	cmp	r4, r2
 8011578:	d002      	beq.n	8011580 <std+0x48>
 801157a:	33d0      	adds	r3, #208	; 0xd0
 801157c:	429c      	cmp	r4, r3
 801157e:	d105      	bne.n	801158c <std+0x54>
 8011580:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011588:	f000 b9de 	b.w	8011948 <__retarget_lock_init_recursive>
 801158c:	bd10      	pop	{r4, pc}
 801158e:	bf00      	nop
 8011590:	080116f1 	.word	0x080116f1
 8011594:	08011713 	.word	0x08011713
 8011598:	0801174b 	.word	0x0801174b
 801159c:	0801176f 	.word	0x0801176f
 80115a0:	20008018 	.word	0x20008018

080115a4 <stdio_exit_handler>:
 80115a4:	4a02      	ldr	r2, [pc, #8]	; (80115b0 <stdio_exit_handler+0xc>)
 80115a6:	4903      	ldr	r1, [pc, #12]	; (80115b4 <stdio_exit_handler+0x10>)
 80115a8:	4803      	ldr	r0, [pc, #12]	; (80115b8 <stdio_exit_handler+0x14>)
 80115aa:	f000 b87b 	b.w	80116a4 <_fwalk_sglue>
 80115ae:	bf00      	nop
 80115b0:	20000260 	.word	0x20000260
 80115b4:	080120d5 	.word	0x080120d5
 80115b8:	2000026c 	.word	0x2000026c

080115bc <cleanup_stdio>:
 80115bc:	6841      	ldr	r1, [r0, #4]
 80115be:	4b0c      	ldr	r3, [pc, #48]	; (80115f0 <cleanup_stdio+0x34>)
 80115c0:	4299      	cmp	r1, r3
 80115c2:	b510      	push	{r4, lr}
 80115c4:	4604      	mov	r4, r0
 80115c6:	d001      	beq.n	80115cc <cleanup_stdio+0x10>
 80115c8:	f000 fd84 	bl	80120d4 <_fflush_r>
 80115cc:	68a1      	ldr	r1, [r4, #8]
 80115ce:	4b09      	ldr	r3, [pc, #36]	; (80115f4 <cleanup_stdio+0x38>)
 80115d0:	4299      	cmp	r1, r3
 80115d2:	d002      	beq.n	80115da <cleanup_stdio+0x1e>
 80115d4:	4620      	mov	r0, r4
 80115d6:	f000 fd7d 	bl	80120d4 <_fflush_r>
 80115da:	68e1      	ldr	r1, [r4, #12]
 80115dc:	4b06      	ldr	r3, [pc, #24]	; (80115f8 <cleanup_stdio+0x3c>)
 80115de:	4299      	cmp	r1, r3
 80115e0:	d004      	beq.n	80115ec <cleanup_stdio+0x30>
 80115e2:	4620      	mov	r0, r4
 80115e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115e8:	f000 bd74 	b.w	80120d4 <_fflush_r>
 80115ec:	bd10      	pop	{r4, pc}
 80115ee:	bf00      	nop
 80115f0:	20008018 	.word	0x20008018
 80115f4:	20008080 	.word	0x20008080
 80115f8:	200080e8 	.word	0x200080e8

080115fc <global_stdio_init.part.0>:
 80115fc:	b510      	push	{r4, lr}
 80115fe:	4b0b      	ldr	r3, [pc, #44]	; (801162c <global_stdio_init.part.0+0x30>)
 8011600:	4c0b      	ldr	r4, [pc, #44]	; (8011630 <global_stdio_init.part.0+0x34>)
 8011602:	4a0c      	ldr	r2, [pc, #48]	; (8011634 <global_stdio_init.part.0+0x38>)
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	4620      	mov	r0, r4
 8011608:	2200      	movs	r2, #0
 801160a:	2104      	movs	r1, #4
 801160c:	f7ff ff94 	bl	8011538 <std>
 8011610:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011614:	2201      	movs	r2, #1
 8011616:	2109      	movs	r1, #9
 8011618:	f7ff ff8e 	bl	8011538 <std>
 801161c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011620:	2202      	movs	r2, #2
 8011622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011626:	2112      	movs	r1, #18
 8011628:	f7ff bf86 	b.w	8011538 <std>
 801162c:	20008150 	.word	0x20008150
 8011630:	20008018 	.word	0x20008018
 8011634:	080115a5 	.word	0x080115a5

08011638 <__sfp_lock_acquire>:
 8011638:	4801      	ldr	r0, [pc, #4]	; (8011640 <__sfp_lock_acquire+0x8>)
 801163a:	f000 b986 	b.w	801194a <__retarget_lock_acquire_recursive>
 801163e:	bf00      	nop
 8011640:	20008159 	.word	0x20008159

08011644 <__sfp_lock_release>:
 8011644:	4801      	ldr	r0, [pc, #4]	; (801164c <__sfp_lock_release+0x8>)
 8011646:	f000 b981 	b.w	801194c <__retarget_lock_release_recursive>
 801164a:	bf00      	nop
 801164c:	20008159 	.word	0x20008159

08011650 <__sinit>:
 8011650:	b510      	push	{r4, lr}
 8011652:	4604      	mov	r4, r0
 8011654:	f7ff fff0 	bl	8011638 <__sfp_lock_acquire>
 8011658:	6a23      	ldr	r3, [r4, #32]
 801165a:	b11b      	cbz	r3, 8011664 <__sinit+0x14>
 801165c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011660:	f7ff bff0 	b.w	8011644 <__sfp_lock_release>
 8011664:	4b04      	ldr	r3, [pc, #16]	; (8011678 <__sinit+0x28>)
 8011666:	6223      	str	r3, [r4, #32]
 8011668:	4b04      	ldr	r3, [pc, #16]	; (801167c <__sinit+0x2c>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1f5      	bne.n	801165c <__sinit+0xc>
 8011670:	f7ff ffc4 	bl	80115fc <global_stdio_init.part.0>
 8011674:	e7f2      	b.n	801165c <__sinit+0xc>
 8011676:	bf00      	nop
 8011678:	080115bd 	.word	0x080115bd
 801167c:	20008150 	.word	0x20008150

08011680 <fiprintf>:
 8011680:	b40e      	push	{r1, r2, r3}
 8011682:	b503      	push	{r0, r1, lr}
 8011684:	4601      	mov	r1, r0
 8011686:	ab03      	add	r3, sp, #12
 8011688:	4805      	ldr	r0, [pc, #20]	; (80116a0 <fiprintf+0x20>)
 801168a:	f853 2b04 	ldr.w	r2, [r3], #4
 801168e:	6800      	ldr	r0, [r0, #0]
 8011690:	9301      	str	r3, [sp, #4]
 8011692:	f000 f9ef 	bl	8011a74 <_vfiprintf_r>
 8011696:	b002      	add	sp, #8
 8011698:	f85d eb04 	ldr.w	lr, [sp], #4
 801169c:	b003      	add	sp, #12
 801169e:	4770      	bx	lr
 80116a0:	200002b8 	.word	0x200002b8

080116a4 <_fwalk_sglue>:
 80116a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116a8:	4607      	mov	r7, r0
 80116aa:	4688      	mov	r8, r1
 80116ac:	4614      	mov	r4, r2
 80116ae:	2600      	movs	r6, #0
 80116b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116b4:	f1b9 0901 	subs.w	r9, r9, #1
 80116b8:	d505      	bpl.n	80116c6 <_fwalk_sglue+0x22>
 80116ba:	6824      	ldr	r4, [r4, #0]
 80116bc:	2c00      	cmp	r4, #0
 80116be:	d1f7      	bne.n	80116b0 <_fwalk_sglue+0xc>
 80116c0:	4630      	mov	r0, r6
 80116c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116c6:	89ab      	ldrh	r3, [r5, #12]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d907      	bls.n	80116dc <_fwalk_sglue+0x38>
 80116cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116d0:	3301      	adds	r3, #1
 80116d2:	d003      	beq.n	80116dc <_fwalk_sglue+0x38>
 80116d4:	4629      	mov	r1, r5
 80116d6:	4638      	mov	r0, r7
 80116d8:	47c0      	blx	r8
 80116da:	4306      	orrs	r6, r0
 80116dc:	3568      	adds	r5, #104	; 0x68
 80116de:	e7e9      	b.n	80116b4 <_fwalk_sglue+0x10>

080116e0 <putchar>:
 80116e0:	4b02      	ldr	r3, [pc, #8]	; (80116ec <putchar+0xc>)
 80116e2:	4601      	mov	r1, r0
 80116e4:	6818      	ldr	r0, [r3, #0]
 80116e6:	6882      	ldr	r2, [r0, #8]
 80116e8:	f000 bd1c 	b.w	8012124 <_putc_r>
 80116ec:	200002b8 	.word	0x200002b8

080116f0 <__sread>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	460c      	mov	r4, r1
 80116f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f8:	f000 f8c8 	bl	801188c <_read_r>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	bfab      	itete	ge
 8011700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011702:	89a3      	ldrhlt	r3, [r4, #12]
 8011704:	181b      	addge	r3, r3, r0
 8011706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801170a:	bfac      	ite	ge
 801170c:	6563      	strge	r3, [r4, #84]	; 0x54
 801170e:	81a3      	strhlt	r3, [r4, #12]
 8011710:	bd10      	pop	{r4, pc}

08011712 <__swrite>:
 8011712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011716:	461f      	mov	r7, r3
 8011718:	898b      	ldrh	r3, [r1, #12]
 801171a:	05db      	lsls	r3, r3, #23
 801171c:	4605      	mov	r5, r0
 801171e:	460c      	mov	r4, r1
 8011720:	4616      	mov	r6, r2
 8011722:	d505      	bpl.n	8011730 <__swrite+0x1e>
 8011724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011728:	2302      	movs	r3, #2
 801172a:	2200      	movs	r2, #0
 801172c:	f000 f89c 	bl	8011868 <_lseek_r>
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801173a:	81a3      	strh	r3, [r4, #12]
 801173c:	4632      	mov	r2, r6
 801173e:	463b      	mov	r3, r7
 8011740:	4628      	mov	r0, r5
 8011742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011746:	f000 b8c3 	b.w	80118d0 <_write_r>

0801174a <__sseek>:
 801174a:	b510      	push	{r4, lr}
 801174c:	460c      	mov	r4, r1
 801174e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011752:	f000 f889 	bl	8011868 <_lseek_r>
 8011756:	1c43      	adds	r3, r0, #1
 8011758:	89a3      	ldrh	r3, [r4, #12]
 801175a:	bf15      	itete	ne
 801175c:	6560      	strne	r0, [r4, #84]	; 0x54
 801175e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011766:	81a3      	strheq	r3, [r4, #12]
 8011768:	bf18      	it	ne
 801176a:	81a3      	strhne	r3, [r4, #12]
 801176c:	bd10      	pop	{r4, pc}

0801176e <__sclose>:
 801176e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011772:	f000 b869 	b.w	8011848 <_close_r>

08011776 <memcmp>:
 8011776:	b510      	push	{r4, lr}
 8011778:	3901      	subs	r1, #1
 801177a:	4402      	add	r2, r0
 801177c:	4290      	cmp	r0, r2
 801177e:	d101      	bne.n	8011784 <memcmp+0xe>
 8011780:	2000      	movs	r0, #0
 8011782:	e005      	b.n	8011790 <memcmp+0x1a>
 8011784:	7803      	ldrb	r3, [r0, #0]
 8011786:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801178a:	42a3      	cmp	r3, r4
 801178c:	d001      	beq.n	8011792 <memcmp+0x1c>
 801178e:	1b18      	subs	r0, r3, r4
 8011790:	bd10      	pop	{r4, pc}
 8011792:	3001      	adds	r0, #1
 8011794:	e7f2      	b.n	801177c <memcmp+0x6>

08011796 <memmove>:
 8011796:	4288      	cmp	r0, r1
 8011798:	b510      	push	{r4, lr}
 801179a:	eb01 0402 	add.w	r4, r1, r2
 801179e:	d902      	bls.n	80117a6 <memmove+0x10>
 80117a0:	4284      	cmp	r4, r0
 80117a2:	4623      	mov	r3, r4
 80117a4:	d807      	bhi.n	80117b6 <memmove+0x20>
 80117a6:	1e43      	subs	r3, r0, #1
 80117a8:	42a1      	cmp	r1, r4
 80117aa:	d008      	beq.n	80117be <memmove+0x28>
 80117ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80117b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117b4:	e7f8      	b.n	80117a8 <memmove+0x12>
 80117b6:	4402      	add	r2, r0
 80117b8:	4601      	mov	r1, r0
 80117ba:	428a      	cmp	r2, r1
 80117bc:	d100      	bne.n	80117c0 <memmove+0x2a>
 80117be:	bd10      	pop	{r4, pc}
 80117c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117c8:	e7f7      	b.n	80117ba <memmove+0x24>

080117ca <memset>:
 80117ca:	4402      	add	r2, r0
 80117cc:	4603      	mov	r3, r0
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d100      	bne.n	80117d4 <memset+0xa>
 80117d2:	4770      	bx	lr
 80117d4:	f803 1b01 	strb.w	r1, [r3], #1
 80117d8:	e7f9      	b.n	80117ce <memset+0x4>

080117da <strchr>:
 80117da:	b2c9      	uxtb	r1, r1
 80117dc:	4603      	mov	r3, r0
 80117de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117e2:	b11a      	cbz	r2, 80117ec <strchr+0x12>
 80117e4:	428a      	cmp	r2, r1
 80117e6:	d1f9      	bne.n	80117dc <strchr+0x2>
 80117e8:	4618      	mov	r0, r3
 80117ea:	4770      	bx	lr
 80117ec:	2900      	cmp	r1, #0
 80117ee:	bf18      	it	ne
 80117f0:	2300      	movne	r3, #0
 80117f2:	e7f9      	b.n	80117e8 <strchr+0xe>

080117f4 <strncmp>:
 80117f4:	b510      	push	{r4, lr}
 80117f6:	b16a      	cbz	r2, 8011814 <strncmp+0x20>
 80117f8:	3901      	subs	r1, #1
 80117fa:	1884      	adds	r4, r0, r2
 80117fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011800:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011804:	429a      	cmp	r2, r3
 8011806:	d103      	bne.n	8011810 <strncmp+0x1c>
 8011808:	42a0      	cmp	r0, r4
 801180a:	d001      	beq.n	8011810 <strncmp+0x1c>
 801180c:	2a00      	cmp	r2, #0
 801180e:	d1f5      	bne.n	80117fc <strncmp+0x8>
 8011810:	1ad0      	subs	r0, r2, r3
 8011812:	bd10      	pop	{r4, pc}
 8011814:	4610      	mov	r0, r2
 8011816:	e7fc      	b.n	8011812 <strncmp+0x1e>

08011818 <strrchr>:
 8011818:	b513      	push	{r0, r1, r4, lr}
 801181a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801181e:	4603      	mov	r3, r0
 8011820:	d110      	bne.n	8011844 <strrchr+0x2c>
 8011822:	b002      	add	sp, #8
 8011824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011828:	f7ff bfd7 	b.w	80117da <strchr>
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	4604      	mov	r4, r0
 8011830:	4618      	mov	r0, r3
 8011832:	9101      	str	r1, [sp, #4]
 8011834:	f7ff ffd1 	bl	80117da <strchr>
 8011838:	9901      	ldr	r1, [sp, #4]
 801183a:	2800      	cmp	r0, #0
 801183c:	d1f6      	bne.n	801182c <strrchr+0x14>
 801183e:	4620      	mov	r0, r4
 8011840:	b002      	add	sp, #8
 8011842:	bd10      	pop	{r4, pc}
 8011844:	2400      	movs	r4, #0
 8011846:	e7f3      	b.n	8011830 <strrchr+0x18>

08011848 <_close_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d06      	ldr	r5, [pc, #24]	; (8011864 <_close_r+0x1c>)
 801184c:	2300      	movs	r3, #0
 801184e:	4604      	mov	r4, r0
 8011850:	4608      	mov	r0, r1
 8011852:	602b      	str	r3, [r5, #0]
 8011854:	f7f9 fe56 	bl	800b504 <_close>
 8011858:	1c43      	adds	r3, r0, #1
 801185a:	d102      	bne.n	8011862 <_close_r+0x1a>
 801185c:	682b      	ldr	r3, [r5, #0]
 801185e:	b103      	cbz	r3, 8011862 <_close_r+0x1a>
 8011860:	6023      	str	r3, [r4, #0]
 8011862:	bd38      	pop	{r3, r4, r5, pc}
 8011864:	20008154 	.word	0x20008154

08011868 <_lseek_r>:
 8011868:	b538      	push	{r3, r4, r5, lr}
 801186a:	4d07      	ldr	r5, [pc, #28]	; (8011888 <_lseek_r+0x20>)
 801186c:	4604      	mov	r4, r0
 801186e:	4608      	mov	r0, r1
 8011870:	4611      	mov	r1, r2
 8011872:	2200      	movs	r2, #0
 8011874:	602a      	str	r2, [r5, #0]
 8011876:	461a      	mov	r2, r3
 8011878:	f7f9 fe6b 	bl	800b552 <_lseek>
 801187c:	1c43      	adds	r3, r0, #1
 801187e:	d102      	bne.n	8011886 <_lseek_r+0x1e>
 8011880:	682b      	ldr	r3, [r5, #0]
 8011882:	b103      	cbz	r3, 8011886 <_lseek_r+0x1e>
 8011884:	6023      	str	r3, [r4, #0]
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	20008154 	.word	0x20008154

0801188c <_read_r>:
 801188c:	b538      	push	{r3, r4, r5, lr}
 801188e:	4d07      	ldr	r5, [pc, #28]	; (80118ac <_read_r+0x20>)
 8011890:	4604      	mov	r4, r0
 8011892:	4608      	mov	r0, r1
 8011894:	4611      	mov	r1, r2
 8011896:	2200      	movs	r2, #0
 8011898:	602a      	str	r2, [r5, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	f7f9 fdfc 	bl	800b498 <_read>
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	d102      	bne.n	80118aa <_read_r+0x1e>
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	b103      	cbz	r3, 80118aa <_read_r+0x1e>
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	bd38      	pop	{r3, r4, r5, pc}
 80118ac:	20008154 	.word	0x20008154

080118b0 <_sbrk_r>:
 80118b0:	b538      	push	{r3, r4, r5, lr}
 80118b2:	4d06      	ldr	r5, [pc, #24]	; (80118cc <_sbrk_r+0x1c>)
 80118b4:	2300      	movs	r3, #0
 80118b6:	4604      	mov	r4, r0
 80118b8:	4608      	mov	r0, r1
 80118ba:	602b      	str	r3, [r5, #0]
 80118bc:	f7f9 fe56 	bl	800b56c <_sbrk>
 80118c0:	1c43      	adds	r3, r0, #1
 80118c2:	d102      	bne.n	80118ca <_sbrk_r+0x1a>
 80118c4:	682b      	ldr	r3, [r5, #0]
 80118c6:	b103      	cbz	r3, 80118ca <_sbrk_r+0x1a>
 80118c8:	6023      	str	r3, [r4, #0]
 80118ca:	bd38      	pop	{r3, r4, r5, pc}
 80118cc:	20008154 	.word	0x20008154

080118d0 <_write_r>:
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	4d07      	ldr	r5, [pc, #28]	; (80118f0 <_write_r+0x20>)
 80118d4:	4604      	mov	r4, r0
 80118d6:	4608      	mov	r0, r1
 80118d8:	4611      	mov	r1, r2
 80118da:	2200      	movs	r2, #0
 80118dc:	602a      	str	r2, [r5, #0]
 80118de:	461a      	mov	r2, r3
 80118e0:	f7f9 fdf8 	bl	800b4d4 <_write>
 80118e4:	1c43      	adds	r3, r0, #1
 80118e6:	d102      	bne.n	80118ee <_write_r+0x1e>
 80118e8:	682b      	ldr	r3, [r5, #0]
 80118ea:	b103      	cbz	r3, 80118ee <_write_r+0x1e>
 80118ec:	6023      	str	r3, [r4, #0]
 80118ee:	bd38      	pop	{r3, r4, r5, pc}
 80118f0:	20008154 	.word	0x20008154

080118f4 <__errno>:
 80118f4:	4b01      	ldr	r3, [pc, #4]	; (80118fc <__errno+0x8>)
 80118f6:	6818      	ldr	r0, [r3, #0]
 80118f8:	4770      	bx	lr
 80118fa:	bf00      	nop
 80118fc:	200002b8 	.word	0x200002b8

08011900 <__libc_init_array>:
 8011900:	b570      	push	{r4, r5, r6, lr}
 8011902:	4d0d      	ldr	r5, [pc, #52]	; (8011938 <__libc_init_array+0x38>)
 8011904:	4c0d      	ldr	r4, [pc, #52]	; (801193c <__libc_init_array+0x3c>)
 8011906:	1b64      	subs	r4, r4, r5
 8011908:	10a4      	asrs	r4, r4, #2
 801190a:	2600      	movs	r6, #0
 801190c:	42a6      	cmp	r6, r4
 801190e:	d109      	bne.n	8011924 <__libc_init_array+0x24>
 8011910:	4d0b      	ldr	r5, [pc, #44]	; (8011940 <__libc_init_array+0x40>)
 8011912:	4c0c      	ldr	r4, [pc, #48]	; (8011944 <__libc_init_array+0x44>)
 8011914:	f000 fd98 	bl	8012448 <_init>
 8011918:	1b64      	subs	r4, r4, r5
 801191a:	10a4      	asrs	r4, r4, #2
 801191c:	2600      	movs	r6, #0
 801191e:	42a6      	cmp	r6, r4
 8011920:	d105      	bne.n	801192e <__libc_init_array+0x2e>
 8011922:	bd70      	pop	{r4, r5, r6, pc}
 8011924:	f855 3b04 	ldr.w	r3, [r5], #4
 8011928:	4798      	blx	r3
 801192a:	3601      	adds	r6, #1
 801192c:	e7ee      	b.n	801190c <__libc_init_array+0xc>
 801192e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011932:	4798      	blx	r3
 8011934:	3601      	adds	r6, #1
 8011936:	e7f2      	b.n	801191e <__libc_init_array+0x1e>
 8011938:	080146b0 	.word	0x080146b0
 801193c:	080146b0 	.word	0x080146b0
 8011940:	080146b0 	.word	0x080146b0
 8011944:	080146b4 	.word	0x080146b4

08011948 <__retarget_lock_init_recursive>:
 8011948:	4770      	bx	lr

0801194a <__retarget_lock_acquire_recursive>:
 801194a:	4770      	bx	lr

0801194c <__retarget_lock_release_recursive>:
 801194c:	4770      	bx	lr

0801194e <strcpy>:
 801194e:	4603      	mov	r3, r0
 8011950:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011954:	f803 2b01 	strb.w	r2, [r3], #1
 8011958:	2a00      	cmp	r2, #0
 801195a:	d1f9      	bne.n	8011950 <strcpy+0x2>
 801195c:	4770      	bx	lr

0801195e <memcpy>:
 801195e:	440a      	add	r2, r1
 8011960:	4291      	cmp	r1, r2
 8011962:	f100 33ff 	add.w	r3, r0, #4294967295
 8011966:	d100      	bne.n	801196a <memcpy+0xc>
 8011968:	4770      	bx	lr
 801196a:	b510      	push	{r4, lr}
 801196c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011974:	4291      	cmp	r1, r2
 8011976:	d1f9      	bne.n	801196c <memcpy+0xe>
 8011978:	bd10      	pop	{r4, pc}

0801197a <abort>:
 801197a:	b508      	push	{r3, lr}
 801197c:	2006      	movs	r0, #6
 801197e:	f000 fcc3 	bl	8012308 <raise>
 8011982:	2001      	movs	r0, #1
 8011984:	f7f9 fd7e 	bl	800b484 <_exit>

08011988 <_free_r>:
 8011988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801198a:	2900      	cmp	r1, #0
 801198c:	d044      	beq.n	8011a18 <_free_r+0x90>
 801198e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011992:	9001      	str	r0, [sp, #4]
 8011994:	2b00      	cmp	r3, #0
 8011996:	f1a1 0404 	sub.w	r4, r1, #4
 801199a:	bfb8      	it	lt
 801199c:	18e4      	addlt	r4, r4, r3
 801199e:	f7ff fd05 	bl	80113ac <__malloc_lock>
 80119a2:	4a1e      	ldr	r2, [pc, #120]	; (8011a1c <_free_r+0x94>)
 80119a4:	9801      	ldr	r0, [sp, #4]
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	b933      	cbnz	r3, 80119b8 <_free_r+0x30>
 80119aa:	6063      	str	r3, [r4, #4]
 80119ac:	6014      	str	r4, [r2, #0]
 80119ae:	b003      	add	sp, #12
 80119b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119b4:	f7ff bd00 	b.w	80113b8 <__malloc_unlock>
 80119b8:	42a3      	cmp	r3, r4
 80119ba:	d908      	bls.n	80119ce <_free_r+0x46>
 80119bc:	6825      	ldr	r5, [r4, #0]
 80119be:	1961      	adds	r1, r4, r5
 80119c0:	428b      	cmp	r3, r1
 80119c2:	bf01      	itttt	eq
 80119c4:	6819      	ldreq	r1, [r3, #0]
 80119c6:	685b      	ldreq	r3, [r3, #4]
 80119c8:	1949      	addeq	r1, r1, r5
 80119ca:	6021      	streq	r1, [r4, #0]
 80119cc:	e7ed      	b.n	80119aa <_free_r+0x22>
 80119ce:	461a      	mov	r2, r3
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	b10b      	cbz	r3, 80119d8 <_free_r+0x50>
 80119d4:	42a3      	cmp	r3, r4
 80119d6:	d9fa      	bls.n	80119ce <_free_r+0x46>
 80119d8:	6811      	ldr	r1, [r2, #0]
 80119da:	1855      	adds	r5, r2, r1
 80119dc:	42a5      	cmp	r5, r4
 80119de:	d10b      	bne.n	80119f8 <_free_r+0x70>
 80119e0:	6824      	ldr	r4, [r4, #0]
 80119e2:	4421      	add	r1, r4
 80119e4:	1854      	adds	r4, r2, r1
 80119e6:	42a3      	cmp	r3, r4
 80119e8:	6011      	str	r1, [r2, #0]
 80119ea:	d1e0      	bne.n	80119ae <_free_r+0x26>
 80119ec:	681c      	ldr	r4, [r3, #0]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	6053      	str	r3, [r2, #4]
 80119f2:	440c      	add	r4, r1
 80119f4:	6014      	str	r4, [r2, #0]
 80119f6:	e7da      	b.n	80119ae <_free_r+0x26>
 80119f8:	d902      	bls.n	8011a00 <_free_r+0x78>
 80119fa:	230c      	movs	r3, #12
 80119fc:	6003      	str	r3, [r0, #0]
 80119fe:	e7d6      	b.n	80119ae <_free_r+0x26>
 8011a00:	6825      	ldr	r5, [r4, #0]
 8011a02:	1961      	adds	r1, r4, r5
 8011a04:	428b      	cmp	r3, r1
 8011a06:	bf04      	itt	eq
 8011a08:	6819      	ldreq	r1, [r3, #0]
 8011a0a:	685b      	ldreq	r3, [r3, #4]
 8011a0c:	6063      	str	r3, [r4, #4]
 8011a0e:	bf04      	itt	eq
 8011a10:	1949      	addeq	r1, r1, r5
 8011a12:	6021      	streq	r1, [r4, #0]
 8011a14:	6054      	str	r4, [r2, #4]
 8011a16:	e7ca      	b.n	80119ae <_free_r+0x26>
 8011a18:	b003      	add	sp, #12
 8011a1a:	bd30      	pop	{r4, r5, pc}
 8011a1c:	20008010 	.word	0x20008010

08011a20 <__sfputc_r>:
 8011a20:	6893      	ldr	r3, [r2, #8]
 8011a22:	3b01      	subs	r3, #1
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	b410      	push	{r4}
 8011a28:	6093      	str	r3, [r2, #8]
 8011a2a:	da08      	bge.n	8011a3e <__sfputc_r+0x1e>
 8011a2c:	6994      	ldr	r4, [r2, #24]
 8011a2e:	42a3      	cmp	r3, r4
 8011a30:	db01      	blt.n	8011a36 <__sfputc_r+0x16>
 8011a32:	290a      	cmp	r1, #10
 8011a34:	d103      	bne.n	8011a3e <__sfputc_r+0x1e>
 8011a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a3a:	f000 bba7 	b.w	801218c <__swbuf_r>
 8011a3e:	6813      	ldr	r3, [r2, #0]
 8011a40:	1c58      	adds	r0, r3, #1
 8011a42:	6010      	str	r0, [r2, #0]
 8011a44:	7019      	strb	r1, [r3, #0]
 8011a46:	4608      	mov	r0, r1
 8011a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a4c:	4770      	bx	lr

08011a4e <__sfputs_r>:
 8011a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a50:	4606      	mov	r6, r0
 8011a52:	460f      	mov	r7, r1
 8011a54:	4614      	mov	r4, r2
 8011a56:	18d5      	adds	r5, r2, r3
 8011a58:	42ac      	cmp	r4, r5
 8011a5a:	d101      	bne.n	8011a60 <__sfputs_r+0x12>
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	e007      	b.n	8011a70 <__sfputs_r+0x22>
 8011a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a64:	463a      	mov	r2, r7
 8011a66:	4630      	mov	r0, r6
 8011a68:	f7ff ffda 	bl	8011a20 <__sfputc_r>
 8011a6c:	1c43      	adds	r3, r0, #1
 8011a6e:	d1f3      	bne.n	8011a58 <__sfputs_r+0xa>
 8011a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a74 <_vfiprintf_r>:
 8011a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a78:	460d      	mov	r5, r1
 8011a7a:	b09d      	sub	sp, #116	; 0x74
 8011a7c:	4614      	mov	r4, r2
 8011a7e:	4698      	mov	r8, r3
 8011a80:	4606      	mov	r6, r0
 8011a82:	b118      	cbz	r0, 8011a8c <_vfiprintf_r+0x18>
 8011a84:	6a03      	ldr	r3, [r0, #32]
 8011a86:	b90b      	cbnz	r3, 8011a8c <_vfiprintf_r+0x18>
 8011a88:	f7ff fde2 	bl	8011650 <__sinit>
 8011a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a8e:	07d9      	lsls	r1, r3, #31
 8011a90:	d405      	bmi.n	8011a9e <_vfiprintf_r+0x2a>
 8011a92:	89ab      	ldrh	r3, [r5, #12]
 8011a94:	059a      	lsls	r2, r3, #22
 8011a96:	d402      	bmi.n	8011a9e <_vfiprintf_r+0x2a>
 8011a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a9a:	f7ff ff56 	bl	801194a <__retarget_lock_acquire_recursive>
 8011a9e:	89ab      	ldrh	r3, [r5, #12]
 8011aa0:	071b      	lsls	r3, r3, #28
 8011aa2:	d501      	bpl.n	8011aa8 <_vfiprintf_r+0x34>
 8011aa4:	692b      	ldr	r3, [r5, #16]
 8011aa6:	b99b      	cbnz	r3, 8011ad0 <_vfiprintf_r+0x5c>
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f000 fbac 	bl	8012208 <__swsetup_r>
 8011ab0:	b170      	cbz	r0, 8011ad0 <_vfiprintf_r+0x5c>
 8011ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ab4:	07dc      	lsls	r4, r3, #31
 8011ab6:	d504      	bpl.n	8011ac2 <_vfiprintf_r+0x4e>
 8011ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8011abc:	b01d      	add	sp, #116	; 0x74
 8011abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac2:	89ab      	ldrh	r3, [r5, #12]
 8011ac4:	0598      	lsls	r0, r3, #22
 8011ac6:	d4f7      	bmi.n	8011ab8 <_vfiprintf_r+0x44>
 8011ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011aca:	f7ff ff3f 	bl	801194c <__retarget_lock_release_recursive>
 8011ace:	e7f3      	b.n	8011ab8 <_vfiprintf_r+0x44>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ad4:	2320      	movs	r3, #32
 8011ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ade:	2330      	movs	r3, #48	; 0x30
 8011ae0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011c94 <_vfiprintf_r+0x220>
 8011ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ae8:	f04f 0901 	mov.w	r9, #1
 8011aec:	4623      	mov	r3, r4
 8011aee:	469a      	mov	sl, r3
 8011af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011af4:	b10a      	cbz	r2, 8011afa <_vfiprintf_r+0x86>
 8011af6:	2a25      	cmp	r2, #37	; 0x25
 8011af8:	d1f9      	bne.n	8011aee <_vfiprintf_r+0x7a>
 8011afa:	ebba 0b04 	subs.w	fp, sl, r4
 8011afe:	d00b      	beq.n	8011b18 <_vfiprintf_r+0xa4>
 8011b00:	465b      	mov	r3, fp
 8011b02:	4622      	mov	r2, r4
 8011b04:	4629      	mov	r1, r5
 8011b06:	4630      	mov	r0, r6
 8011b08:	f7ff ffa1 	bl	8011a4e <__sfputs_r>
 8011b0c:	3001      	adds	r0, #1
 8011b0e:	f000 80a9 	beq.w	8011c64 <_vfiprintf_r+0x1f0>
 8011b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b14:	445a      	add	r2, fp
 8011b16:	9209      	str	r2, [sp, #36]	; 0x24
 8011b18:	f89a 3000 	ldrb.w	r3, [sl]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	f000 80a1 	beq.w	8011c64 <_vfiprintf_r+0x1f0>
 8011b22:	2300      	movs	r3, #0
 8011b24:	f04f 32ff 	mov.w	r2, #4294967295
 8011b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b2c:	f10a 0a01 	add.w	sl, sl, #1
 8011b30:	9304      	str	r3, [sp, #16]
 8011b32:	9307      	str	r3, [sp, #28]
 8011b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b38:	931a      	str	r3, [sp, #104]	; 0x68
 8011b3a:	4654      	mov	r4, sl
 8011b3c:	2205      	movs	r2, #5
 8011b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b42:	4854      	ldr	r0, [pc, #336]	; (8011c94 <_vfiprintf_r+0x220>)
 8011b44:	f7ee fb74 	bl	8000230 <memchr>
 8011b48:	9a04      	ldr	r2, [sp, #16]
 8011b4a:	b9d8      	cbnz	r0, 8011b84 <_vfiprintf_r+0x110>
 8011b4c:	06d1      	lsls	r1, r2, #27
 8011b4e:	bf44      	itt	mi
 8011b50:	2320      	movmi	r3, #32
 8011b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b56:	0713      	lsls	r3, r2, #28
 8011b58:	bf44      	itt	mi
 8011b5a:	232b      	movmi	r3, #43	; 0x2b
 8011b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b60:	f89a 3000 	ldrb.w	r3, [sl]
 8011b64:	2b2a      	cmp	r3, #42	; 0x2a
 8011b66:	d015      	beq.n	8011b94 <_vfiprintf_r+0x120>
 8011b68:	9a07      	ldr	r2, [sp, #28]
 8011b6a:	4654      	mov	r4, sl
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	f04f 0c0a 	mov.w	ip, #10
 8011b72:	4621      	mov	r1, r4
 8011b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b78:	3b30      	subs	r3, #48	; 0x30
 8011b7a:	2b09      	cmp	r3, #9
 8011b7c:	d94d      	bls.n	8011c1a <_vfiprintf_r+0x1a6>
 8011b7e:	b1b0      	cbz	r0, 8011bae <_vfiprintf_r+0x13a>
 8011b80:	9207      	str	r2, [sp, #28]
 8011b82:	e014      	b.n	8011bae <_vfiprintf_r+0x13a>
 8011b84:	eba0 0308 	sub.w	r3, r0, r8
 8011b88:	fa09 f303 	lsl.w	r3, r9, r3
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	9304      	str	r3, [sp, #16]
 8011b90:	46a2      	mov	sl, r4
 8011b92:	e7d2      	b.n	8011b3a <_vfiprintf_r+0xc6>
 8011b94:	9b03      	ldr	r3, [sp, #12]
 8011b96:	1d19      	adds	r1, r3, #4
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	9103      	str	r1, [sp, #12]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	bfbb      	ittet	lt
 8011ba0:	425b      	neglt	r3, r3
 8011ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8011ba6:	9307      	strge	r3, [sp, #28]
 8011ba8:	9307      	strlt	r3, [sp, #28]
 8011baa:	bfb8      	it	lt
 8011bac:	9204      	strlt	r2, [sp, #16]
 8011bae:	7823      	ldrb	r3, [r4, #0]
 8011bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8011bb2:	d10c      	bne.n	8011bce <_vfiprintf_r+0x15a>
 8011bb4:	7863      	ldrb	r3, [r4, #1]
 8011bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8011bb8:	d134      	bne.n	8011c24 <_vfiprintf_r+0x1b0>
 8011bba:	9b03      	ldr	r3, [sp, #12]
 8011bbc:	1d1a      	adds	r2, r3, #4
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	9203      	str	r2, [sp, #12]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	bfb8      	it	lt
 8011bc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bca:	3402      	adds	r4, #2
 8011bcc:	9305      	str	r3, [sp, #20]
 8011bce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011ca4 <_vfiprintf_r+0x230>
 8011bd2:	7821      	ldrb	r1, [r4, #0]
 8011bd4:	2203      	movs	r2, #3
 8011bd6:	4650      	mov	r0, sl
 8011bd8:	f7ee fb2a 	bl	8000230 <memchr>
 8011bdc:	b138      	cbz	r0, 8011bee <_vfiprintf_r+0x17a>
 8011bde:	9b04      	ldr	r3, [sp, #16]
 8011be0:	eba0 000a 	sub.w	r0, r0, sl
 8011be4:	2240      	movs	r2, #64	; 0x40
 8011be6:	4082      	lsls	r2, r0
 8011be8:	4313      	orrs	r3, r2
 8011bea:	3401      	adds	r4, #1
 8011bec:	9304      	str	r3, [sp, #16]
 8011bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf2:	4829      	ldr	r0, [pc, #164]	; (8011c98 <_vfiprintf_r+0x224>)
 8011bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bf8:	2206      	movs	r2, #6
 8011bfa:	f7ee fb19 	bl	8000230 <memchr>
 8011bfe:	2800      	cmp	r0, #0
 8011c00:	d03f      	beq.n	8011c82 <_vfiprintf_r+0x20e>
 8011c02:	4b26      	ldr	r3, [pc, #152]	; (8011c9c <_vfiprintf_r+0x228>)
 8011c04:	bb1b      	cbnz	r3, 8011c4e <_vfiprintf_r+0x1da>
 8011c06:	9b03      	ldr	r3, [sp, #12]
 8011c08:	3307      	adds	r3, #7
 8011c0a:	f023 0307 	bic.w	r3, r3, #7
 8011c0e:	3308      	adds	r3, #8
 8011c10:	9303      	str	r3, [sp, #12]
 8011c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c14:	443b      	add	r3, r7
 8011c16:	9309      	str	r3, [sp, #36]	; 0x24
 8011c18:	e768      	b.n	8011aec <_vfiprintf_r+0x78>
 8011c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c1e:	460c      	mov	r4, r1
 8011c20:	2001      	movs	r0, #1
 8011c22:	e7a6      	b.n	8011b72 <_vfiprintf_r+0xfe>
 8011c24:	2300      	movs	r3, #0
 8011c26:	3401      	adds	r4, #1
 8011c28:	9305      	str	r3, [sp, #20]
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	f04f 0c0a 	mov.w	ip, #10
 8011c30:	4620      	mov	r0, r4
 8011c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c36:	3a30      	subs	r2, #48	; 0x30
 8011c38:	2a09      	cmp	r2, #9
 8011c3a:	d903      	bls.n	8011c44 <_vfiprintf_r+0x1d0>
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d0c6      	beq.n	8011bce <_vfiprintf_r+0x15a>
 8011c40:	9105      	str	r1, [sp, #20]
 8011c42:	e7c4      	b.n	8011bce <_vfiprintf_r+0x15a>
 8011c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c48:	4604      	mov	r4, r0
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e7f0      	b.n	8011c30 <_vfiprintf_r+0x1bc>
 8011c4e:	ab03      	add	r3, sp, #12
 8011c50:	9300      	str	r3, [sp, #0]
 8011c52:	462a      	mov	r2, r5
 8011c54:	4b12      	ldr	r3, [pc, #72]	; (8011ca0 <_vfiprintf_r+0x22c>)
 8011c56:	a904      	add	r1, sp, #16
 8011c58:	4630      	mov	r0, r6
 8011c5a:	f3af 8000 	nop.w
 8011c5e:	4607      	mov	r7, r0
 8011c60:	1c78      	adds	r0, r7, #1
 8011c62:	d1d6      	bne.n	8011c12 <_vfiprintf_r+0x19e>
 8011c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c66:	07d9      	lsls	r1, r3, #31
 8011c68:	d405      	bmi.n	8011c76 <_vfiprintf_r+0x202>
 8011c6a:	89ab      	ldrh	r3, [r5, #12]
 8011c6c:	059a      	lsls	r2, r3, #22
 8011c6e:	d402      	bmi.n	8011c76 <_vfiprintf_r+0x202>
 8011c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c72:	f7ff fe6b 	bl	801194c <__retarget_lock_release_recursive>
 8011c76:	89ab      	ldrh	r3, [r5, #12]
 8011c78:	065b      	lsls	r3, r3, #25
 8011c7a:	f53f af1d 	bmi.w	8011ab8 <_vfiprintf_r+0x44>
 8011c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c80:	e71c      	b.n	8011abc <_vfiprintf_r+0x48>
 8011c82:	ab03      	add	r3, sp, #12
 8011c84:	9300      	str	r3, [sp, #0]
 8011c86:	462a      	mov	r2, r5
 8011c88:	4b05      	ldr	r3, [pc, #20]	; (8011ca0 <_vfiprintf_r+0x22c>)
 8011c8a:	a904      	add	r1, sp, #16
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f000 f879 	bl	8011d84 <_printf_i>
 8011c92:	e7e4      	b.n	8011c5e <_vfiprintf_r+0x1ea>
 8011c94:	08014674 	.word	0x08014674
 8011c98:	0801467e 	.word	0x0801467e
 8011c9c:	00000000 	.word	0x00000000
 8011ca0:	08011a4f 	.word	0x08011a4f
 8011ca4:	0801467a 	.word	0x0801467a

08011ca8 <_printf_common>:
 8011ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cac:	4616      	mov	r6, r2
 8011cae:	4699      	mov	r9, r3
 8011cb0:	688a      	ldr	r2, [r1, #8]
 8011cb2:	690b      	ldr	r3, [r1, #16]
 8011cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	bfb8      	it	lt
 8011cbc:	4613      	movlt	r3, r2
 8011cbe:	6033      	str	r3, [r6, #0]
 8011cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011cc4:	4607      	mov	r7, r0
 8011cc6:	460c      	mov	r4, r1
 8011cc8:	b10a      	cbz	r2, 8011cce <_printf_common+0x26>
 8011cca:	3301      	adds	r3, #1
 8011ccc:	6033      	str	r3, [r6, #0]
 8011cce:	6823      	ldr	r3, [r4, #0]
 8011cd0:	0699      	lsls	r1, r3, #26
 8011cd2:	bf42      	ittt	mi
 8011cd4:	6833      	ldrmi	r3, [r6, #0]
 8011cd6:	3302      	addmi	r3, #2
 8011cd8:	6033      	strmi	r3, [r6, #0]
 8011cda:	6825      	ldr	r5, [r4, #0]
 8011cdc:	f015 0506 	ands.w	r5, r5, #6
 8011ce0:	d106      	bne.n	8011cf0 <_printf_common+0x48>
 8011ce2:	f104 0a19 	add.w	sl, r4, #25
 8011ce6:	68e3      	ldr	r3, [r4, #12]
 8011ce8:	6832      	ldr	r2, [r6, #0]
 8011cea:	1a9b      	subs	r3, r3, r2
 8011cec:	42ab      	cmp	r3, r5
 8011cee:	dc26      	bgt.n	8011d3e <_printf_common+0x96>
 8011cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011cf4:	1e13      	subs	r3, r2, #0
 8011cf6:	6822      	ldr	r2, [r4, #0]
 8011cf8:	bf18      	it	ne
 8011cfa:	2301      	movne	r3, #1
 8011cfc:	0692      	lsls	r2, r2, #26
 8011cfe:	d42b      	bmi.n	8011d58 <_printf_common+0xb0>
 8011d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d04:	4649      	mov	r1, r9
 8011d06:	4638      	mov	r0, r7
 8011d08:	47c0      	blx	r8
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	d01e      	beq.n	8011d4c <_printf_common+0xa4>
 8011d0e:	6823      	ldr	r3, [r4, #0]
 8011d10:	6922      	ldr	r2, [r4, #16]
 8011d12:	f003 0306 	and.w	r3, r3, #6
 8011d16:	2b04      	cmp	r3, #4
 8011d18:	bf02      	ittt	eq
 8011d1a:	68e5      	ldreq	r5, [r4, #12]
 8011d1c:	6833      	ldreq	r3, [r6, #0]
 8011d1e:	1aed      	subeq	r5, r5, r3
 8011d20:	68a3      	ldr	r3, [r4, #8]
 8011d22:	bf0c      	ite	eq
 8011d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d28:	2500      	movne	r5, #0
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	bfc4      	itt	gt
 8011d2e:	1a9b      	subgt	r3, r3, r2
 8011d30:	18ed      	addgt	r5, r5, r3
 8011d32:	2600      	movs	r6, #0
 8011d34:	341a      	adds	r4, #26
 8011d36:	42b5      	cmp	r5, r6
 8011d38:	d11a      	bne.n	8011d70 <_printf_common+0xc8>
 8011d3a:	2000      	movs	r0, #0
 8011d3c:	e008      	b.n	8011d50 <_printf_common+0xa8>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	4652      	mov	r2, sl
 8011d42:	4649      	mov	r1, r9
 8011d44:	4638      	mov	r0, r7
 8011d46:	47c0      	blx	r8
 8011d48:	3001      	adds	r0, #1
 8011d4a:	d103      	bne.n	8011d54 <_printf_common+0xac>
 8011d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d54:	3501      	adds	r5, #1
 8011d56:	e7c6      	b.n	8011ce6 <_printf_common+0x3e>
 8011d58:	18e1      	adds	r1, r4, r3
 8011d5a:	1c5a      	adds	r2, r3, #1
 8011d5c:	2030      	movs	r0, #48	; 0x30
 8011d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d62:	4422      	add	r2, r4
 8011d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d6c:	3302      	adds	r3, #2
 8011d6e:	e7c7      	b.n	8011d00 <_printf_common+0x58>
 8011d70:	2301      	movs	r3, #1
 8011d72:	4622      	mov	r2, r4
 8011d74:	4649      	mov	r1, r9
 8011d76:	4638      	mov	r0, r7
 8011d78:	47c0      	blx	r8
 8011d7a:	3001      	adds	r0, #1
 8011d7c:	d0e6      	beq.n	8011d4c <_printf_common+0xa4>
 8011d7e:	3601      	adds	r6, #1
 8011d80:	e7d9      	b.n	8011d36 <_printf_common+0x8e>
	...

08011d84 <_printf_i>:
 8011d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d88:	7e0f      	ldrb	r7, [r1, #24]
 8011d8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d8c:	2f78      	cmp	r7, #120	; 0x78
 8011d8e:	4691      	mov	r9, r2
 8011d90:	4680      	mov	r8, r0
 8011d92:	460c      	mov	r4, r1
 8011d94:	469a      	mov	sl, r3
 8011d96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011d9a:	d807      	bhi.n	8011dac <_printf_i+0x28>
 8011d9c:	2f62      	cmp	r7, #98	; 0x62
 8011d9e:	d80a      	bhi.n	8011db6 <_printf_i+0x32>
 8011da0:	2f00      	cmp	r7, #0
 8011da2:	f000 80d4 	beq.w	8011f4e <_printf_i+0x1ca>
 8011da6:	2f58      	cmp	r7, #88	; 0x58
 8011da8:	f000 80c0 	beq.w	8011f2c <_printf_i+0x1a8>
 8011dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011db4:	e03a      	b.n	8011e2c <_printf_i+0xa8>
 8011db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011dba:	2b15      	cmp	r3, #21
 8011dbc:	d8f6      	bhi.n	8011dac <_printf_i+0x28>
 8011dbe:	a101      	add	r1, pc, #4	; (adr r1, 8011dc4 <_printf_i+0x40>)
 8011dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011dc4:	08011e1d 	.word	0x08011e1d
 8011dc8:	08011e31 	.word	0x08011e31
 8011dcc:	08011dad 	.word	0x08011dad
 8011dd0:	08011dad 	.word	0x08011dad
 8011dd4:	08011dad 	.word	0x08011dad
 8011dd8:	08011dad 	.word	0x08011dad
 8011ddc:	08011e31 	.word	0x08011e31
 8011de0:	08011dad 	.word	0x08011dad
 8011de4:	08011dad 	.word	0x08011dad
 8011de8:	08011dad 	.word	0x08011dad
 8011dec:	08011dad 	.word	0x08011dad
 8011df0:	08011f35 	.word	0x08011f35
 8011df4:	08011e5d 	.word	0x08011e5d
 8011df8:	08011eef 	.word	0x08011eef
 8011dfc:	08011dad 	.word	0x08011dad
 8011e00:	08011dad 	.word	0x08011dad
 8011e04:	08011f57 	.word	0x08011f57
 8011e08:	08011dad 	.word	0x08011dad
 8011e0c:	08011e5d 	.word	0x08011e5d
 8011e10:	08011dad 	.word	0x08011dad
 8011e14:	08011dad 	.word	0x08011dad
 8011e18:	08011ef7 	.word	0x08011ef7
 8011e1c:	682b      	ldr	r3, [r5, #0]
 8011e1e:	1d1a      	adds	r2, r3, #4
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	602a      	str	r2, [r5, #0]
 8011e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	e09f      	b.n	8011f70 <_printf_i+0x1ec>
 8011e30:	6820      	ldr	r0, [r4, #0]
 8011e32:	682b      	ldr	r3, [r5, #0]
 8011e34:	0607      	lsls	r7, r0, #24
 8011e36:	f103 0104 	add.w	r1, r3, #4
 8011e3a:	6029      	str	r1, [r5, #0]
 8011e3c:	d501      	bpl.n	8011e42 <_printf_i+0xbe>
 8011e3e:	681e      	ldr	r6, [r3, #0]
 8011e40:	e003      	b.n	8011e4a <_printf_i+0xc6>
 8011e42:	0646      	lsls	r6, r0, #25
 8011e44:	d5fb      	bpl.n	8011e3e <_printf_i+0xba>
 8011e46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011e4a:	2e00      	cmp	r6, #0
 8011e4c:	da03      	bge.n	8011e56 <_printf_i+0xd2>
 8011e4e:	232d      	movs	r3, #45	; 0x2d
 8011e50:	4276      	negs	r6, r6
 8011e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e56:	485a      	ldr	r0, [pc, #360]	; (8011fc0 <_printf_i+0x23c>)
 8011e58:	230a      	movs	r3, #10
 8011e5a:	e012      	b.n	8011e82 <_printf_i+0xfe>
 8011e5c:	682b      	ldr	r3, [r5, #0]
 8011e5e:	6820      	ldr	r0, [r4, #0]
 8011e60:	1d19      	adds	r1, r3, #4
 8011e62:	6029      	str	r1, [r5, #0]
 8011e64:	0605      	lsls	r5, r0, #24
 8011e66:	d501      	bpl.n	8011e6c <_printf_i+0xe8>
 8011e68:	681e      	ldr	r6, [r3, #0]
 8011e6a:	e002      	b.n	8011e72 <_printf_i+0xee>
 8011e6c:	0641      	lsls	r1, r0, #25
 8011e6e:	d5fb      	bpl.n	8011e68 <_printf_i+0xe4>
 8011e70:	881e      	ldrh	r6, [r3, #0]
 8011e72:	4853      	ldr	r0, [pc, #332]	; (8011fc0 <_printf_i+0x23c>)
 8011e74:	2f6f      	cmp	r7, #111	; 0x6f
 8011e76:	bf0c      	ite	eq
 8011e78:	2308      	moveq	r3, #8
 8011e7a:	230a      	movne	r3, #10
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e82:	6865      	ldr	r5, [r4, #4]
 8011e84:	60a5      	str	r5, [r4, #8]
 8011e86:	2d00      	cmp	r5, #0
 8011e88:	bfa2      	ittt	ge
 8011e8a:	6821      	ldrge	r1, [r4, #0]
 8011e8c:	f021 0104 	bicge.w	r1, r1, #4
 8011e90:	6021      	strge	r1, [r4, #0]
 8011e92:	b90e      	cbnz	r6, 8011e98 <_printf_i+0x114>
 8011e94:	2d00      	cmp	r5, #0
 8011e96:	d04b      	beq.n	8011f30 <_printf_i+0x1ac>
 8011e98:	4615      	mov	r5, r2
 8011e9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011e9e:	fb03 6711 	mls	r7, r3, r1, r6
 8011ea2:	5dc7      	ldrb	r7, [r0, r7]
 8011ea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ea8:	4637      	mov	r7, r6
 8011eaa:	42bb      	cmp	r3, r7
 8011eac:	460e      	mov	r6, r1
 8011eae:	d9f4      	bls.n	8011e9a <_printf_i+0x116>
 8011eb0:	2b08      	cmp	r3, #8
 8011eb2:	d10b      	bne.n	8011ecc <_printf_i+0x148>
 8011eb4:	6823      	ldr	r3, [r4, #0]
 8011eb6:	07de      	lsls	r6, r3, #31
 8011eb8:	d508      	bpl.n	8011ecc <_printf_i+0x148>
 8011eba:	6923      	ldr	r3, [r4, #16]
 8011ebc:	6861      	ldr	r1, [r4, #4]
 8011ebe:	4299      	cmp	r1, r3
 8011ec0:	bfde      	ittt	le
 8011ec2:	2330      	movle	r3, #48	; 0x30
 8011ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ecc:	1b52      	subs	r2, r2, r5
 8011ece:	6122      	str	r2, [r4, #16]
 8011ed0:	f8cd a000 	str.w	sl, [sp]
 8011ed4:	464b      	mov	r3, r9
 8011ed6:	aa03      	add	r2, sp, #12
 8011ed8:	4621      	mov	r1, r4
 8011eda:	4640      	mov	r0, r8
 8011edc:	f7ff fee4 	bl	8011ca8 <_printf_common>
 8011ee0:	3001      	adds	r0, #1
 8011ee2:	d14a      	bne.n	8011f7a <_printf_i+0x1f6>
 8011ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee8:	b004      	add	sp, #16
 8011eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eee:	6823      	ldr	r3, [r4, #0]
 8011ef0:	f043 0320 	orr.w	r3, r3, #32
 8011ef4:	6023      	str	r3, [r4, #0]
 8011ef6:	4833      	ldr	r0, [pc, #204]	; (8011fc4 <_printf_i+0x240>)
 8011ef8:	2778      	movs	r7, #120	; 0x78
 8011efa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011efe:	6823      	ldr	r3, [r4, #0]
 8011f00:	6829      	ldr	r1, [r5, #0]
 8011f02:	061f      	lsls	r7, r3, #24
 8011f04:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f08:	d402      	bmi.n	8011f10 <_printf_i+0x18c>
 8011f0a:	065f      	lsls	r7, r3, #25
 8011f0c:	bf48      	it	mi
 8011f0e:	b2b6      	uxthmi	r6, r6
 8011f10:	07df      	lsls	r7, r3, #31
 8011f12:	bf48      	it	mi
 8011f14:	f043 0320 	orrmi.w	r3, r3, #32
 8011f18:	6029      	str	r1, [r5, #0]
 8011f1a:	bf48      	it	mi
 8011f1c:	6023      	strmi	r3, [r4, #0]
 8011f1e:	b91e      	cbnz	r6, 8011f28 <_printf_i+0x1a4>
 8011f20:	6823      	ldr	r3, [r4, #0]
 8011f22:	f023 0320 	bic.w	r3, r3, #32
 8011f26:	6023      	str	r3, [r4, #0]
 8011f28:	2310      	movs	r3, #16
 8011f2a:	e7a7      	b.n	8011e7c <_printf_i+0xf8>
 8011f2c:	4824      	ldr	r0, [pc, #144]	; (8011fc0 <_printf_i+0x23c>)
 8011f2e:	e7e4      	b.n	8011efa <_printf_i+0x176>
 8011f30:	4615      	mov	r5, r2
 8011f32:	e7bd      	b.n	8011eb0 <_printf_i+0x12c>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	6826      	ldr	r6, [r4, #0]
 8011f38:	6961      	ldr	r1, [r4, #20]
 8011f3a:	1d18      	adds	r0, r3, #4
 8011f3c:	6028      	str	r0, [r5, #0]
 8011f3e:	0635      	lsls	r5, r6, #24
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	d501      	bpl.n	8011f48 <_printf_i+0x1c4>
 8011f44:	6019      	str	r1, [r3, #0]
 8011f46:	e002      	b.n	8011f4e <_printf_i+0x1ca>
 8011f48:	0670      	lsls	r0, r6, #25
 8011f4a:	d5fb      	bpl.n	8011f44 <_printf_i+0x1c0>
 8011f4c:	8019      	strh	r1, [r3, #0]
 8011f4e:	2300      	movs	r3, #0
 8011f50:	6123      	str	r3, [r4, #16]
 8011f52:	4615      	mov	r5, r2
 8011f54:	e7bc      	b.n	8011ed0 <_printf_i+0x14c>
 8011f56:	682b      	ldr	r3, [r5, #0]
 8011f58:	1d1a      	adds	r2, r3, #4
 8011f5a:	602a      	str	r2, [r5, #0]
 8011f5c:	681d      	ldr	r5, [r3, #0]
 8011f5e:	6862      	ldr	r2, [r4, #4]
 8011f60:	2100      	movs	r1, #0
 8011f62:	4628      	mov	r0, r5
 8011f64:	f7ee f964 	bl	8000230 <memchr>
 8011f68:	b108      	cbz	r0, 8011f6e <_printf_i+0x1ea>
 8011f6a:	1b40      	subs	r0, r0, r5
 8011f6c:	6060      	str	r0, [r4, #4]
 8011f6e:	6863      	ldr	r3, [r4, #4]
 8011f70:	6123      	str	r3, [r4, #16]
 8011f72:	2300      	movs	r3, #0
 8011f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f78:	e7aa      	b.n	8011ed0 <_printf_i+0x14c>
 8011f7a:	6923      	ldr	r3, [r4, #16]
 8011f7c:	462a      	mov	r2, r5
 8011f7e:	4649      	mov	r1, r9
 8011f80:	4640      	mov	r0, r8
 8011f82:	47d0      	blx	sl
 8011f84:	3001      	adds	r0, #1
 8011f86:	d0ad      	beq.n	8011ee4 <_printf_i+0x160>
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	079b      	lsls	r3, r3, #30
 8011f8c:	d413      	bmi.n	8011fb6 <_printf_i+0x232>
 8011f8e:	68e0      	ldr	r0, [r4, #12]
 8011f90:	9b03      	ldr	r3, [sp, #12]
 8011f92:	4298      	cmp	r0, r3
 8011f94:	bfb8      	it	lt
 8011f96:	4618      	movlt	r0, r3
 8011f98:	e7a6      	b.n	8011ee8 <_printf_i+0x164>
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	4632      	mov	r2, r6
 8011f9e:	4649      	mov	r1, r9
 8011fa0:	4640      	mov	r0, r8
 8011fa2:	47d0      	blx	sl
 8011fa4:	3001      	adds	r0, #1
 8011fa6:	d09d      	beq.n	8011ee4 <_printf_i+0x160>
 8011fa8:	3501      	adds	r5, #1
 8011faa:	68e3      	ldr	r3, [r4, #12]
 8011fac:	9903      	ldr	r1, [sp, #12]
 8011fae:	1a5b      	subs	r3, r3, r1
 8011fb0:	42ab      	cmp	r3, r5
 8011fb2:	dcf2      	bgt.n	8011f9a <_printf_i+0x216>
 8011fb4:	e7eb      	b.n	8011f8e <_printf_i+0x20a>
 8011fb6:	2500      	movs	r5, #0
 8011fb8:	f104 0619 	add.w	r6, r4, #25
 8011fbc:	e7f5      	b.n	8011faa <_printf_i+0x226>
 8011fbe:	bf00      	nop
 8011fc0:	08014685 	.word	0x08014685
 8011fc4:	08014696 	.word	0x08014696

08011fc8 <__sflush_r>:
 8011fc8:	898a      	ldrh	r2, [r1, #12]
 8011fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fce:	4605      	mov	r5, r0
 8011fd0:	0710      	lsls	r0, r2, #28
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	d458      	bmi.n	8012088 <__sflush_r+0xc0>
 8011fd6:	684b      	ldr	r3, [r1, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	dc05      	bgt.n	8011fe8 <__sflush_r+0x20>
 8011fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	dc02      	bgt.n	8011fe8 <__sflush_r+0x20>
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011fea:	2e00      	cmp	r6, #0
 8011fec:	d0f9      	beq.n	8011fe2 <__sflush_r+0x1a>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ff4:	682f      	ldr	r7, [r5, #0]
 8011ff6:	6a21      	ldr	r1, [r4, #32]
 8011ff8:	602b      	str	r3, [r5, #0]
 8011ffa:	d032      	beq.n	8012062 <__sflush_r+0x9a>
 8011ffc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ffe:	89a3      	ldrh	r3, [r4, #12]
 8012000:	075a      	lsls	r2, r3, #29
 8012002:	d505      	bpl.n	8012010 <__sflush_r+0x48>
 8012004:	6863      	ldr	r3, [r4, #4]
 8012006:	1ac0      	subs	r0, r0, r3
 8012008:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801200a:	b10b      	cbz	r3, 8012010 <__sflush_r+0x48>
 801200c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801200e:	1ac0      	subs	r0, r0, r3
 8012010:	2300      	movs	r3, #0
 8012012:	4602      	mov	r2, r0
 8012014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012016:	6a21      	ldr	r1, [r4, #32]
 8012018:	4628      	mov	r0, r5
 801201a:	47b0      	blx	r6
 801201c:	1c43      	adds	r3, r0, #1
 801201e:	89a3      	ldrh	r3, [r4, #12]
 8012020:	d106      	bne.n	8012030 <__sflush_r+0x68>
 8012022:	6829      	ldr	r1, [r5, #0]
 8012024:	291d      	cmp	r1, #29
 8012026:	d82b      	bhi.n	8012080 <__sflush_r+0xb8>
 8012028:	4a29      	ldr	r2, [pc, #164]	; (80120d0 <__sflush_r+0x108>)
 801202a:	410a      	asrs	r2, r1
 801202c:	07d6      	lsls	r6, r2, #31
 801202e:	d427      	bmi.n	8012080 <__sflush_r+0xb8>
 8012030:	2200      	movs	r2, #0
 8012032:	6062      	str	r2, [r4, #4]
 8012034:	04d9      	lsls	r1, r3, #19
 8012036:	6922      	ldr	r2, [r4, #16]
 8012038:	6022      	str	r2, [r4, #0]
 801203a:	d504      	bpl.n	8012046 <__sflush_r+0x7e>
 801203c:	1c42      	adds	r2, r0, #1
 801203e:	d101      	bne.n	8012044 <__sflush_r+0x7c>
 8012040:	682b      	ldr	r3, [r5, #0]
 8012042:	b903      	cbnz	r3, 8012046 <__sflush_r+0x7e>
 8012044:	6560      	str	r0, [r4, #84]	; 0x54
 8012046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012048:	602f      	str	r7, [r5, #0]
 801204a:	2900      	cmp	r1, #0
 801204c:	d0c9      	beq.n	8011fe2 <__sflush_r+0x1a>
 801204e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012052:	4299      	cmp	r1, r3
 8012054:	d002      	beq.n	801205c <__sflush_r+0x94>
 8012056:	4628      	mov	r0, r5
 8012058:	f7ff fc96 	bl	8011988 <_free_r>
 801205c:	2000      	movs	r0, #0
 801205e:	6360      	str	r0, [r4, #52]	; 0x34
 8012060:	e7c0      	b.n	8011fe4 <__sflush_r+0x1c>
 8012062:	2301      	movs	r3, #1
 8012064:	4628      	mov	r0, r5
 8012066:	47b0      	blx	r6
 8012068:	1c41      	adds	r1, r0, #1
 801206a:	d1c8      	bne.n	8011ffe <__sflush_r+0x36>
 801206c:	682b      	ldr	r3, [r5, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d0c5      	beq.n	8011ffe <__sflush_r+0x36>
 8012072:	2b1d      	cmp	r3, #29
 8012074:	d001      	beq.n	801207a <__sflush_r+0xb2>
 8012076:	2b16      	cmp	r3, #22
 8012078:	d101      	bne.n	801207e <__sflush_r+0xb6>
 801207a:	602f      	str	r7, [r5, #0]
 801207c:	e7b1      	b.n	8011fe2 <__sflush_r+0x1a>
 801207e:	89a3      	ldrh	r3, [r4, #12]
 8012080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012084:	81a3      	strh	r3, [r4, #12]
 8012086:	e7ad      	b.n	8011fe4 <__sflush_r+0x1c>
 8012088:	690f      	ldr	r7, [r1, #16]
 801208a:	2f00      	cmp	r7, #0
 801208c:	d0a9      	beq.n	8011fe2 <__sflush_r+0x1a>
 801208e:	0793      	lsls	r3, r2, #30
 8012090:	680e      	ldr	r6, [r1, #0]
 8012092:	bf08      	it	eq
 8012094:	694b      	ldreq	r3, [r1, #20]
 8012096:	600f      	str	r7, [r1, #0]
 8012098:	bf18      	it	ne
 801209a:	2300      	movne	r3, #0
 801209c:	eba6 0807 	sub.w	r8, r6, r7
 80120a0:	608b      	str	r3, [r1, #8]
 80120a2:	f1b8 0f00 	cmp.w	r8, #0
 80120a6:	dd9c      	ble.n	8011fe2 <__sflush_r+0x1a>
 80120a8:	6a21      	ldr	r1, [r4, #32]
 80120aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120ac:	4643      	mov	r3, r8
 80120ae:	463a      	mov	r2, r7
 80120b0:	4628      	mov	r0, r5
 80120b2:	47b0      	blx	r6
 80120b4:	2800      	cmp	r0, #0
 80120b6:	dc06      	bgt.n	80120c6 <__sflush_r+0xfe>
 80120b8:	89a3      	ldrh	r3, [r4, #12]
 80120ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120be:	81a3      	strh	r3, [r4, #12]
 80120c0:	f04f 30ff 	mov.w	r0, #4294967295
 80120c4:	e78e      	b.n	8011fe4 <__sflush_r+0x1c>
 80120c6:	4407      	add	r7, r0
 80120c8:	eba8 0800 	sub.w	r8, r8, r0
 80120cc:	e7e9      	b.n	80120a2 <__sflush_r+0xda>
 80120ce:	bf00      	nop
 80120d0:	dfbffffe 	.word	0xdfbffffe

080120d4 <_fflush_r>:
 80120d4:	b538      	push	{r3, r4, r5, lr}
 80120d6:	690b      	ldr	r3, [r1, #16]
 80120d8:	4605      	mov	r5, r0
 80120da:	460c      	mov	r4, r1
 80120dc:	b913      	cbnz	r3, 80120e4 <_fflush_r+0x10>
 80120de:	2500      	movs	r5, #0
 80120e0:	4628      	mov	r0, r5
 80120e2:	bd38      	pop	{r3, r4, r5, pc}
 80120e4:	b118      	cbz	r0, 80120ee <_fflush_r+0x1a>
 80120e6:	6a03      	ldr	r3, [r0, #32]
 80120e8:	b90b      	cbnz	r3, 80120ee <_fflush_r+0x1a>
 80120ea:	f7ff fab1 	bl	8011650 <__sinit>
 80120ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d0f3      	beq.n	80120de <_fflush_r+0xa>
 80120f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80120f8:	07d0      	lsls	r0, r2, #31
 80120fa:	d404      	bmi.n	8012106 <_fflush_r+0x32>
 80120fc:	0599      	lsls	r1, r3, #22
 80120fe:	d402      	bmi.n	8012106 <_fflush_r+0x32>
 8012100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012102:	f7ff fc22 	bl	801194a <__retarget_lock_acquire_recursive>
 8012106:	4628      	mov	r0, r5
 8012108:	4621      	mov	r1, r4
 801210a:	f7ff ff5d 	bl	8011fc8 <__sflush_r>
 801210e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012110:	07da      	lsls	r2, r3, #31
 8012112:	4605      	mov	r5, r0
 8012114:	d4e4      	bmi.n	80120e0 <_fflush_r+0xc>
 8012116:	89a3      	ldrh	r3, [r4, #12]
 8012118:	059b      	lsls	r3, r3, #22
 801211a:	d4e1      	bmi.n	80120e0 <_fflush_r+0xc>
 801211c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801211e:	f7ff fc15 	bl	801194c <__retarget_lock_release_recursive>
 8012122:	e7dd      	b.n	80120e0 <_fflush_r+0xc>

08012124 <_putc_r>:
 8012124:	b570      	push	{r4, r5, r6, lr}
 8012126:	460d      	mov	r5, r1
 8012128:	4614      	mov	r4, r2
 801212a:	4606      	mov	r6, r0
 801212c:	b118      	cbz	r0, 8012136 <_putc_r+0x12>
 801212e:	6a03      	ldr	r3, [r0, #32]
 8012130:	b90b      	cbnz	r3, 8012136 <_putc_r+0x12>
 8012132:	f7ff fa8d 	bl	8011650 <__sinit>
 8012136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012138:	07d8      	lsls	r0, r3, #31
 801213a:	d405      	bmi.n	8012148 <_putc_r+0x24>
 801213c:	89a3      	ldrh	r3, [r4, #12]
 801213e:	0599      	lsls	r1, r3, #22
 8012140:	d402      	bmi.n	8012148 <_putc_r+0x24>
 8012142:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012144:	f7ff fc01 	bl	801194a <__retarget_lock_acquire_recursive>
 8012148:	68a3      	ldr	r3, [r4, #8]
 801214a:	3b01      	subs	r3, #1
 801214c:	2b00      	cmp	r3, #0
 801214e:	60a3      	str	r3, [r4, #8]
 8012150:	da05      	bge.n	801215e <_putc_r+0x3a>
 8012152:	69a2      	ldr	r2, [r4, #24]
 8012154:	4293      	cmp	r3, r2
 8012156:	db12      	blt.n	801217e <_putc_r+0x5a>
 8012158:	b2eb      	uxtb	r3, r5
 801215a:	2b0a      	cmp	r3, #10
 801215c:	d00f      	beq.n	801217e <_putc_r+0x5a>
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	1c5a      	adds	r2, r3, #1
 8012162:	6022      	str	r2, [r4, #0]
 8012164:	701d      	strb	r5, [r3, #0]
 8012166:	b2ed      	uxtb	r5, r5
 8012168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801216a:	07da      	lsls	r2, r3, #31
 801216c:	d405      	bmi.n	801217a <_putc_r+0x56>
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	059b      	lsls	r3, r3, #22
 8012172:	d402      	bmi.n	801217a <_putc_r+0x56>
 8012174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012176:	f7ff fbe9 	bl	801194c <__retarget_lock_release_recursive>
 801217a:	4628      	mov	r0, r5
 801217c:	bd70      	pop	{r4, r5, r6, pc}
 801217e:	4629      	mov	r1, r5
 8012180:	4622      	mov	r2, r4
 8012182:	4630      	mov	r0, r6
 8012184:	f000 f802 	bl	801218c <__swbuf_r>
 8012188:	4605      	mov	r5, r0
 801218a:	e7ed      	b.n	8012168 <_putc_r+0x44>

0801218c <__swbuf_r>:
 801218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218e:	460e      	mov	r6, r1
 8012190:	4614      	mov	r4, r2
 8012192:	4605      	mov	r5, r0
 8012194:	b118      	cbz	r0, 801219e <__swbuf_r+0x12>
 8012196:	6a03      	ldr	r3, [r0, #32]
 8012198:	b90b      	cbnz	r3, 801219e <__swbuf_r+0x12>
 801219a:	f7ff fa59 	bl	8011650 <__sinit>
 801219e:	69a3      	ldr	r3, [r4, #24]
 80121a0:	60a3      	str	r3, [r4, #8]
 80121a2:	89a3      	ldrh	r3, [r4, #12]
 80121a4:	071a      	lsls	r2, r3, #28
 80121a6:	d525      	bpl.n	80121f4 <__swbuf_r+0x68>
 80121a8:	6923      	ldr	r3, [r4, #16]
 80121aa:	b31b      	cbz	r3, 80121f4 <__swbuf_r+0x68>
 80121ac:	6823      	ldr	r3, [r4, #0]
 80121ae:	6922      	ldr	r2, [r4, #16]
 80121b0:	1a98      	subs	r0, r3, r2
 80121b2:	6963      	ldr	r3, [r4, #20]
 80121b4:	b2f6      	uxtb	r6, r6
 80121b6:	4283      	cmp	r3, r0
 80121b8:	4637      	mov	r7, r6
 80121ba:	dc04      	bgt.n	80121c6 <__swbuf_r+0x3a>
 80121bc:	4621      	mov	r1, r4
 80121be:	4628      	mov	r0, r5
 80121c0:	f7ff ff88 	bl	80120d4 <_fflush_r>
 80121c4:	b9e0      	cbnz	r0, 8012200 <__swbuf_r+0x74>
 80121c6:	68a3      	ldr	r3, [r4, #8]
 80121c8:	3b01      	subs	r3, #1
 80121ca:	60a3      	str	r3, [r4, #8]
 80121cc:	6823      	ldr	r3, [r4, #0]
 80121ce:	1c5a      	adds	r2, r3, #1
 80121d0:	6022      	str	r2, [r4, #0]
 80121d2:	701e      	strb	r6, [r3, #0]
 80121d4:	6962      	ldr	r2, [r4, #20]
 80121d6:	1c43      	adds	r3, r0, #1
 80121d8:	429a      	cmp	r2, r3
 80121da:	d004      	beq.n	80121e6 <__swbuf_r+0x5a>
 80121dc:	89a3      	ldrh	r3, [r4, #12]
 80121de:	07db      	lsls	r3, r3, #31
 80121e0:	d506      	bpl.n	80121f0 <__swbuf_r+0x64>
 80121e2:	2e0a      	cmp	r6, #10
 80121e4:	d104      	bne.n	80121f0 <__swbuf_r+0x64>
 80121e6:	4621      	mov	r1, r4
 80121e8:	4628      	mov	r0, r5
 80121ea:	f7ff ff73 	bl	80120d4 <_fflush_r>
 80121ee:	b938      	cbnz	r0, 8012200 <__swbuf_r+0x74>
 80121f0:	4638      	mov	r0, r7
 80121f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121f4:	4621      	mov	r1, r4
 80121f6:	4628      	mov	r0, r5
 80121f8:	f000 f806 	bl	8012208 <__swsetup_r>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d0d5      	beq.n	80121ac <__swbuf_r+0x20>
 8012200:	f04f 37ff 	mov.w	r7, #4294967295
 8012204:	e7f4      	b.n	80121f0 <__swbuf_r+0x64>
	...

08012208 <__swsetup_r>:
 8012208:	b538      	push	{r3, r4, r5, lr}
 801220a:	4b2a      	ldr	r3, [pc, #168]	; (80122b4 <__swsetup_r+0xac>)
 801220c:	4605      	mov	r5, r0
 801220e:	6818      	ldr	r0, [r3, #0]
 8012210:	460c      	mov	r4, r1
 8012212:	b118      	cbz	r0, 801221c <__swsetup_r+0x14>
 8012214:	6a03      	ldr	r3, [r0, #32]
 8012216:	b90b      	cbnz	r3, 801221c <__swsetup_r+0x14>
 8012218:	f7ff fa1a 	bl	8011650 <__sinit>
 801221c:	89a3      	ldrh	r3, [r4, #12]
 801221e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012222:	0718      	lsls	r0, r3, #28
 8012224:	d422      	bmi.n	801226c <__swsetup_r+0x64>
 8012226:	06d9      	lsls	r1, r3, #27
 8012228:	d407      	bmi.n	801223a <__swsetup_r+0x32>
 801222a:	2309      	movs	r3, #9
 801222c:	602b      	str	r3, [r5, #0]
 801222e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012232:	81a3      	strh	r3, [r4, #12]
 8012234:	f04f 30ff 	mov.w	r0, #4294967295
 8012238:	e034      	b.n	80122a4 <__swsetup_r+0x9c>
 801223a:	0758      	lsls	r0, r3, #29
 801223c:	d512      	bpl.n	8012264 <__swsetup_r+0x5c>
 801223e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012240:	b141      	cbz	r1, 8012254 <__swsetup_r+0x4c>
 8012242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012246:	4299      	cmp	r1, r3
 8012248:	d002      	beq.n	8012250 <__swsetup_r+0x48>
 801224a:	4628      	mov	r0, r5
 801224c:	f7ff fb9c 	bl	8011988 <_free_r>
 8012250:	2300      	movs	r3, #0
 8012252:	6363      	str	r3, [r4, #52]	; 0x34
 8012254:	89a3      	ldrh	r3, [r4, #12]
 8012256:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801225a:	81a3      	strh	r3, [r4, #12]
 801225c:	2300      	movs	r3, #0
 801225e:	6063      	str	r3, [r4, #4]
 8012260:	6923      	ldr	r3, [r4, #16]
 8012262:	6023      	str	r3, [r4, #0]
 8012264:	89a3      	ldrh	r3, [r4, #12]
 8012266:	f043 0308 	orr.w	r3, r3, #8
 801226a:	81a3      	strh	r3, [r4, #12]
 801226c:	6923      	ldr	r3, [r4, #16]
 801226e:	b94b      	cbnz	r3, 8012284 <__swsetup_r+0x7c>
 8012270:	89a3      	ldrh	r3, [r4, #12]
 8012272:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801227a:	d003      	beq.n	8012284 <__swsetup_r+0x7c>
 801227c:	4621      	mov	r1, r4
 801227e:	4628      	mov	r0, r5
 8012280:	f000 f884 	bl	801238c <__smakebuf_r>
 8012284:	89a0      	ldrh	r0, [r4, #12]
 8012286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801228a:	f010 0301 	ands.w	r3, r0, #1
 801228e:	d00a      	beq.n	80122a6 <__swsetup_r+0x9e>
 8012290:	2300      	movs	r3, #0
 8012292:	60a3      	str	r3, [r4, #8]
 8012294:	6963      	ldr	r3, [r4, #20]
 8012296:	425b      	negs	r3, r3
 8012298:	61a3      	str	r3, [r4, #24]
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	b943      	cbnz	r3, 80122b0 <__swsetup_r+0xa8>
 801229e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80122a2:	d1c4      	bne.n	801222e <__swsetup_r+0x26>
 80122a4:	bd38      	pop	{r3, r4, r5, pc}
 80122a6:	0781      	lsls	r1, r0, #30
 80122a8:	bf58      	it	pl
 80122aa:	6963      	ldrpl	r3, [r4, #20]
 80122ac:	60a3      	str	r3, [r4, #8]
 80122ae:	e7f4      	b.n	801229a <__swsetup_r+0x92>
 80122b0:	2000      	movs	r0, #0
 80122b2:	e7f7      	b.n	80122a4 <__swsetup_r+0x9c>
 80122b4:	200002b8 	.word	0x200002b8

080122b8 <_raise_r>:
 80122b8:	291f      	cmp	r1, #31
 80122ba:	b538      	push	{r3, r4, r5, lr}
 80122bc:	4604      	mov	r4, r0
 80122be:	460d      	mov	r5, r1
 80122c0:	d904      	bls.n	80122cc <_raise_r+0x14>
 80122c2:	2316      	movs	r3, #22
 80122c4:	6003      	str	r3, [r0, #0]
 80122c6:	f04f 30ff 	mov.w	r0, #4294967295
 80122ca:	bd38      	pop	{r3, r4, r5, pc}
 80122cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80122ce:	b112      	cbz	r2, 80122d6 <_raise_r+0x1e>
 80122d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122d4:	b94b      	cbnz	r3, 80122ea <_raise_r+0x32>
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 f830 	bl	801233c <_getpid_r>
 80122dc:	462a      	mov	r2, r5
 80122de:	4601      	mov	r1, r0
 80122e0:	4620      	mov	r0, r4
 80122e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122e6:	f000 b817 	b.w	8012318 <_kill_r>
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d00a      	beq.n	8012304 <_raise_r+0x4c>
 80122ee:	1c59      	adds	r1, r3, #1
 80122f0:	d103      	bne.n	80122fa <_raise_r+0x42>
 80122f2:	2316      	movs	r3, #22
 80122f4:	6003      	str	r3, [r0, #0]
 80122f6:	2001      	movs	r0, #1
 80122f8:	e7e7      	b.n	80122ca <_raise_r+0x12>
 80122fa:	2400      	movs	r4, #0
 80122fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012300:	4628      	mov	r0, r5
 8012302:	4798      	blx	r3
 8012304:	2000      	movs	r0, #0
 8012306:	e7e0      	b.n	80122ca <_raise_r+0x12>

08012308 <raise>:
 8012308:	4b02      	ldr	r3, [pc, #8]	; (8012314 <raise+0xc>)
 801230a:	4601      	mov	r1, r0
 801230c:	6818      	ldr	r0, [r3, #0]
 801230e:	f7ff bfd3 	b.w	80122b8 <_raise_r>
 8012312:	bf00      	nop
 8012314:	200002b8 	.word	0x200002b8

08012318 <_kill_r>:
 8012318:	b538      	push	{r3, r4, r5, lr}
 801231a:	4d07      	ldr	r5, [pc, #28]	; (8012338 <_kill_r+0x20>)
 801231c:	2300      	movs	r3, #0
 801231e:	4604      	mov	r4, r0
 8012320:	4608      	mov	r0, r1
 8012322:	4611      	mov	r1, r2
 8012324:	602b      	str	r3, [r5, #0]
 8012326:	f7f9 f89d 	bl	800b464 <_kill>
 801232a:	1c43      	adds	r3, r0, #1
 801232c:	d102      	bne.n	8012334 <_kill_r+0x1c>
 801232e:	682b      	ldr	r3, [r5, #0]
 8012330:	b103      	cbz	r3, 8012334 <_kill_r+0x1c>
 8012332:	6023      	str	r3, [r4, #0]
 8012334:	bd38      	pop	{r3, r4, r5, pc}
 8012336:	bf00      	nop
 8012338:	20008154 	.word	0x20008154

0801233c <_getpid_r>:
 801233c:	f7f9 b88a 	b.w	800b454 <_getpid>

08012340 <__swhatbuf_r>:
 8012340:	b570      	push	{r4, r5, r6, lr}
 8012342:	460c      	mov	r4, r1
 8012344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012348:	2900      	cmp	r1, #0
 801234a:	b096      	sub	sp, #88	; 0x58
 801234c:	4615      	mov	r5, r2
 801234e:	461e      	mov	r6, r3
 8012350:	da0d      	bge.n	801236e <__swhatbuf_r+0x2e>
 8012352:	89a3      	ldrh	r3, [r4, #12]
 8012354:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012358:	f04f 0100 	mov.w	r1, #0
 801235c:	bf0c      	ite	eq
 801235e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012362:	2340      	movne	r3, #64	; 0x40
 8012364:	2000      	movs	r0, #0
 8012366:	6031      	str	r1, [r6, #0]
 8012368:	602b      	str	r3, [r5, #0]
 801236a:	b016      	add	sp, #88	; 0x58
 801236c:	bd70      	pop	{r4, r5, r6, pc}
 801236e:	466a      	mov	r2, sp
 8012370:	f000 f848 	bl	8012404 <_fstat_r>
 8012374:	2800      	cmp	r0, #0
 8012376:	dbec      	blt.n	8012352 <__swhatbuf_r+0x12>
 8012378:	9901      	ldr	r1, [sp, #4]
 801237a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801237e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012382:	4259      	negs	r1, r3
 8012384:	4159      	adcs	r1, r3
 8012386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801238a:	e7eb      	b.n	8012364 <__swhatbuf_r+0x24>

0801238c <__smakebuf_r>:
 801238c:	898b      	ldrh	r3, [r1, #12]
 801238e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012390:	079d      	lsls	r5, r3, #30
 8012392:	4606      	mov	r6, r0
 8012394:	460c      	mov	r4, r1
 8012396:	d507      	bpl.n	80123a8 <__smakebuf_r+0x1c>
 8012398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801239c:	6023      	str	r3, [r4, #0]
 801239e:	6123      	str	r3, [r4, #16]
 80123a0:	2301      	movs	r3, #1
 80123a2:	6163      	str	r3, [r4, #20]
 80123a4:	b002      	add	sp, #8
 80123a6:	bd70      	pop	{r4, r5, r6, pc}
 80123a8:	ab01      	add	r3, sp, #4
 80123aa:	466a      	mov	r2, sp
 80123ac:	f7ff ffc8 	bl	8012340 <__swhatbuf_r>
 80123b0:	9900      	ldr	r1, [sp, #0]
 80123b2:	4605      	mov	r5, r0
 80123b4:	4630      	mov	r0, r6
 80123b6:	f7fe ff79 	bl	80112ac <_malloc_r>
 80123ba:	b948      	cbnz	r0, 80123d0 <__smakebuf_r+0x44>
 80123bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123c0:	059a      	lsls	r2, r3, #22
 80123c2:	d4ef      	bmi.n	80123a4 <__smakebuf_r+0x18>
 80123c4:	f023 0303 	bic.w	r3, r3, #3
 80123c8:	f043 0302 	orr.w	r3, r3, #2
 80123cc:	81a3      	strh	r3, [r4, #12]
 80123ce:	e7e3      	b.n	8012398 <__smakebuf_r+0xc>
 80123d0:	89a3      	ldrh	r3, [r4, #12]
 80123d2:	6020      	str	r0, [r4, #0]
 80123d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123d8:	81a3      	strh	r3, [r4, #12]
 80123da:	9b00      	ldr	r3, [sp, #0]
 80123dc:	6163      	str	r3, [r4, #20]
 80123de:	9b01      	ldr	r3, [sp, #4]
 80123e0:	6120      	str	r0, [r4, #16]
 80123e2:	b15b      	cbz	r3, 80123fc <__smakebuf_r+0x70>
 80123e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123e8:	4630      	mov	r0, r6
 80123ea:	f000 f81d 	bl	8012428 <_isatty_r>
 80123ee:	b128      	cbz	r0, 80123fc <__smakebuf_r+0x70>
 80123f0:	89a3      	ldrh	r3, [r4, #12]
 80123f2:	f023 0303 	bic.w	r3, r3, #3
 80123f6:	f043 0301 	orr.w	r3, r3, #1
 80123fa:	81a3      	strh	r3, [r4, #12]
 80123fc:	89a3      	ldrh	r3, [r4, #12]
 80123fe:	431d      	orrs	r5, r3
 8012400:	81a5      	strh	r5, [r4, #12]
 8012402:	e7cf      	b.n	80123a4 <__smakebuf_r+0x18>

08012404 <_fstat_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d07      	ldr	r5, [pc, #28]	; (8012424 <_fstat_r+0x20>)
 8012408:	2300      	movs	r3, #0
 801240a:	4604      	mov	r4, r0
 801240c:	4608      	mov	r0, r1
 801240e:	4611      	mov	r1, r2
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	f7f9 f883 	bl	800b51c <_fstat>
 8012416:	1c43      	adds	r3, r0, #1
 8012418:	d102      	bne.n	8012420 <_fstat_r+0x1c>
 801241a:	682b      	ldr	r3, [r5, #0]
 801241c:	b103      	cbz	r3, 8012420 <_fstat_r+0x1c>
 801241e:	6023      	str	r3, [r4, #0]
 8012420:	bd38      	pop	{r3, r4, r5, pc}
 8012422:	bf00      	nop
 8012424:	20008154 	.word	0x20008154

08012428 <_isatty_r>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	4d06      	ldr	r5, [pc, #24]	; (8012444 <_isatty_r+0x1c>)
 801242c:	2300      	movs	r3, #0
 801242e:	4604      	mov	r4, r0
 8012430:	4608      	mov	r0, r1
 8012432:	602b      	str	r3, [r5, #0]
 8012434:	f7f9 f882 	bl	800b53c <_isatty>
 8012438:	1c43      	adds	r3, r0, #1
 801243a:	d102      	bne.n	8012442 <_isatty_r+0x1a>
 801243c:	682b      	ldr	r3, [r5, #0]
 801243e:	b103      	cbz	r3, 8012442 <_isatty_r+0x1a>
 8012440:	6023      	str	r3, [r4, #0]
 8012442:	bd38      	pop	{r3, r4, r5, pc}
 8012444:	20008154 	.word	0x20008154

08012448 <_init>:
 8012448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801244a:	bf00      	nop
 801244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801244e:	bc08      	pop	{r3}
 8012450:	469e      	mov	lr, r3
 8012452:	4770      	bx	lr

08012454 <_fini>:
 8012454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012456:	bf00      	nop
 8012458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801245a:	bc08      	pop	{r3}
 801245c:	469e      	mov	lr, r3
 801245e:	4770      	bx	lr
